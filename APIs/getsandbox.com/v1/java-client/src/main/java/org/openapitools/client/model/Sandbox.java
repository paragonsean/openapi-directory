/*
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.ConfiguredRouteDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sandbox
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:43.511538-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Sandbox {
  /**
   * The import source of this Sandbox.
   */
  @JsonAdapter(ApiDefinitionEnum.Adapter.class)
  public enum ApiDefinitionEnum {
    NONE("None"),
    
    APIARY("Apiary"),
    
    SWAGGER_V2_JSON("Swagger_V2_Json"),
    
    RAML_V08("RAML_V08"),
    
    WSDL("WSDL");

    private String value;

    ApiDefinitionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiDefinitionEnum fromValue(String value) {
      for (ApiDefinitionEnum b : ApiDefinitionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiDefinitionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiDefinitionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiDefinitionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiDefinitionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ApiDefinitionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_API_DEFINITION = "apiDefinition";
  @SerializedName(SERIALIZED_NAME_API_DEFINITION)
  private ApiDefinitionEnum apiDefinition;

  public static final String SERIALIZED_NAME_CHILD_SANDBOXES = "childSandboxes";
  @SerializedName(SERIALIZED_NAME_CHILD_SANDBOXES)
  private Set<Sandbox> childSandboxes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_CONFIGURED_ROUTES = "configuredRoutes";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_ROUTES)
  private Set<ConfiguredRouteDetails> configuredRoutes = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GIT_ACCESS_TOKEN = "gitAccessToken";
  @SerializedName(SERIALIZED_NAME_GIT_ACCESS_TOKEN)
  private String gitAccessToken;

  public static final String SERIALIZED_NAME_GIT_URL = "gitUrl";
  @SerializedName(SERIALIZED_NAME_GIT_URL)
  private String gitUrl;

  public static final String SERIALIZED_NAME_HAS_REPOSITORY = "hasRepository";
  @SerializedName(SERIALIZED_NAME_HAS_REPOSITORY)
  private Boolean hasRepository;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_WHITELIST = "ipWhitelist";
  @SerializedName(SERIALIZED_NAME_IP_WHITELIST)
  private Set<String> ipWhitelist = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_SANDBOX = "parentSandbox";
  @SerializedName(SERIALIZED_NAME_PARENT_SANDBOX)
  private Sandbox parentSandbox;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Object> properties = new HashMap<>();

  /**
   * The listener status.
   */
  @JsonAdapter(ProxyStatusEnum.Adapter.class)
  public enum ProxyStatusEnum {
    STARTED("STARTED"),
    
    STOPPED("STOPPED");

    private String value;

    ProxyStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProxyStatusEnum fromValue(String value) {
      for (ProxyStatusEnum b : ProxyStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProxyStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProxyStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProxyStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProxyStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProxyStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROXY_STATUS = "proxyStatus";
  @SerializedName(SERIALIZED_NAME_PROXY_STATUS)
  private ProxyStatusEnum proxyStatus;

  /**
   * The library version of this Sandbox.
   */
  @JsonAdapter(RuntimeVersionEnum.Adapter.class)
  public enum RuntimeVersionEnum {
    _1("VERSION_1"),
    
    _2("VERSION_2");

    private String value;

    RuntimeVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuntimeVersionEnum fromValue(String value) {
      for (RuntimeVersionEnum b : RuntimeVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuntimeVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuntimeVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuntimeVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUNTIME_VERSION = "runtimeVersion";
  @SerializedName(SERIALIZED_NAME_RUNTIME_VERSION)
  private RuntimeVersionEnum runtimeVersion;

  public static final String SERIALIZED_NAME_SANDBOX_URL = "sandboxUrl";
  @SerializedName(SERIALIZED_NAME_SANDBOX_URL)
  private String sandboxUrl;

  /**
   * Gets or Sets stackType
   */
  @JsonAdapter(StackTypeEnum.Adapter.class)
  public enum StackTypeEnum {
    JAVA_SCRIPT("JavaScript");

    private String value;

    StackTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StackTypeEnum fromValue(String value) {
      for (StackTypeEnum b : StackTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StackTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StackTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StackTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StackTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StackTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STACK_TYPE = "stackType";
  @SerializedName(SERIALIZED_NAME_STACK_TYPE)
  private StackTypeEnum stackType;

  /**
   * The listener transport.
   */
  @JsonAdapter(TransportTypeEnum.Adapter.class)
  public enum TransportTypeEnum {
    HTTP("HTTP");

    private String value;

    TransportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportTypeEnum fromValue(String value) {
      for (TransportTypeEnum b : TransportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_TYPE = "transportType";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_TYPE)
  private TransportTypeEnum transportType;

  public Sandbox() {
  }

  public Sandbox apiDefinition(ApiDefinitionEnum apiDefinition) {
    this.apiDefinition = apiDefinition;
    return this;
  }

  /**
   * The import source of this Sandbox.
   * @return apiDefinition
   */
  @javax.annotation.Nullable
  public ApiDefinitionEnum getApiDefinition() {
    return apiDefinition;
  }

  public void setApiDefinition(ApiDefinitionEnum apiDefinition) {
    this.apiDefinition = apiDefinition;
  }


  public Sandbox childSandboxes(Set<Sandbox> childSandboxes) {
    this.childSandboxes = childSandboxes;
    return this;
  }

  public Sandbox addChildSandboxesItem(Sandbox childSandboxesItem) {
    if (this.childSandboxes == null) {
      this.childSandboxes = new LinkedHashSet<>();
    }
    this.childSandboxes.add(childSandboxesItem);
    return this;
  }

  /**
   * Clones of this Sandbox.
   * @return childSandboxes
   */
  @javax.annotation.Nullable
  public Set<Sandbox> getChildSandboxes() {
    return childSandboxes;
  }

  public void setChildSandboxes(Set<Sandbox> childSandboxes) {
    this.childSandboxes = childSandboxes;
  }


  public Sandbox configuredRoutes(Set<ConfiguredRouteDetails> configuredRoutes) {
    this.configuredRoutes = configuredRoutes;
    return this;
  }

  public Sandbox addConfiguredRoutesItem(ConfiguredRouteDetails configuredRoutesItem) {
    if (this.configuredRoutes == null) {
      this.configuredRoutes = new LinkedHashSet<>();
    }
    this.configuredRoutes.add(configuredRoutesItem);
    return this;
  }

  /**
   * Extra configuration applied to some routes, delays, overrides etc.
   * @return configuredRoutes
   */
  @javax.annotation.Nullable
  public Set<ConfiguredRouteDetails> getConfiguredRoutes() {
    return configuredRoutes;
  }

  public void setConfiguredRoutes(Set<ConfiguredRouteDetails> configuredRoutes) {
    this.configuredRoutes = configuredRoutes;
  }


  public Sandbox description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Sandbox gitAccessToken(String gitAccessToken) {
    this.gitAccessToken = gitAccessToken;
    return this;
  }

  /**
   * Get gitAccessToken
   * @return gitAccessToken
   */
  @javax.annotation.Nullable
  public String getGitAccessToken() {
    return gitAccessToken;
  }

  public void setGitAccessToken(String gitAccessToken) {
    this.gitAccessToken = gitAccessToken;
  }


  public Sandbox gitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
    return this;
  }

  /**
   * The git clone URL.
   * @return gitUrl
   */
  @javax.annotation.Nullable
  public String getGitUrl() {
    return gitUrl;
  }

  public void setGitUrl(String gitUrl) {
    this.gitUrl = gitUrl;
  }


  public Sandbox hasRepository(Boolean hasRepository) {
    this.hasRepository = hasRepository;
    return this;
  }

  /**
   * Whether this Sandbox has a git repository or not.
   * @return hasRepository
   */
  @javax.annotation.Nullable
  public Boolean getHasRepository() {
    return hasRepository;
  }

  public void setHasRepository(Boolean hasRepository) {
    this.hasRepository = hasRepository;
  }


  public Sandbox id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the Sandbox.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Sandbox ipWhitelist(Set<String> ipWhitelist) {
    this.ipWhitelist = ipWhitelist;
    return this;
  }

  public Sandbox addIpWhitelistItem(String ipWhitelistItem) {
    if (this.ipWhitelist == null) {
      this.ipWhitelist = new LinkedHashSet<>();
    }
    this.ipWhitelist.add(ipWhitelistItem);
    return this;
  }

  /**
   * The list of IPs allowed to make requests, all allowed if omitted.
   * @return ipWhitelist
   */
  @javax.annotation.Nullable
  public Set<String> getIpWhitelist() {
    return ipWhitelist;
  }

  public void setIpWhitelist(Set<String> ipWhitelist) {
    this.ipWhitelist = ipWhitelist;
  }


  public Sandbox name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Sandbox parentSandbox(Sandbox parentSandbox) {
    this.parentSandbox = parentSandbox;
    return this;
  }

  /**
   * Get parentSandbox
   * @return parentSandbox
   */
  @javax.annotation.Nullable
  public Sandbox getParentSandbox() {
    return parentSandbox;
  }

  public void setParentSandbox(Sandbox parentSandbox) {
    this.parentSandbox = parentSandbox;
  }


  public Sandbox properties(Map<String, Object> properties) {
    this.properties = properties;
    return this;
  }

  public Sandbox putPropertiesItem(String key, Object propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Object> properties) {
    this.properties = properties;
  }


  public Sandbox proxyStatus(ProxyStatusEnum proxyStatus) {
    this.proxyStatus = proxyStatus;
    return this;
  }

  /**
   * The listener status.
   * @return proxyStatus
   */
  @javax.annotation.Nullable
  public ProxyStatusEnum getProxyStatus() {
    return proxyStatus;
  }

  public void setProxyStatus(ProxyStatusEnum proxyStatus) {
    this.proxyStatus = proxyStatus;
  }


  public Sandbox runtimeVersion(RuntimeVersionEnum runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
    return this;
  }

  /**
   * The library version of this Sandbox.
   * @return runtimeVersion
   */
  @javax.annotation.Nullable
  public RuntimeVersionEnum getRuntimeVersion() {
    return runtimeVersion;
  }

  public void setRuntimeVersion(RuntimeVersionEnum runtimeVersion) {
    this.runtimeVersion = runtimeVersion;
  }


  public Sandbox sandboxUrl(String sandboxUrl) {
    this.sandboxUrl = sandboxUrl;
    return this;
  }

  /**
   * The request URL for this Sandbox.
   * @return sandboxUrl
   */
  @javax.annotation.Nullable
  public String getSandboxUrl() {
    return sandboxUrl;
  }

  public void setSandboxUrl(String sandboxUrl) {
    this.sandboxUrl = sandboxUrl;
  }


  public Sandbox stackType(StackTypeEnum stackType) {
    this.stackType = stackType;
    return this;
  }

  /**
   * Get stackType
   * @return stackType
   */
  @javax.annotation.Nullable
  public StackTypeEnum getStackType() {
    return stackType;
  }

  public void setStackType(StackTypeEnum stackType) {
    this.stackType = stackType;
  }


  public Sandbox transportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
    return this;
  }

  /**
   * The listener transport.
   * @return transportType
   */
  @javax.annotation.Nullable
  public TransportTypeEnum getTransportType() {
    return transportType;
  }

  public void setTransportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sandbox sandbox = (Sandbox) o;
    return Objects.equals(this.apiDefinition, sandbox.apiDefinition) &&
        Objects.equals(this.childSandboxes, sandbox.childSandboxes) &&
        Objects.equals(this.configuredRoutes, sandbox.configuredRoutes) &&
        Objects.equals(this.description, sandbox.description) &&
        Objects.equals(this.gitAccessToken, sandbox.gitAccessToken) &&
        Objects.equals(this.gitUrl, sandbox.gitUrl) &&
        Objects.equals(this.hasRepository, sandbox.hasRepository) &&
        Objects.equals(this.id, sandbox.id) &&
        Objects.equals(this.ipWhitelist, sandbox.ipWhitelist) &&
        Objects.equals(this.name, sandbox.name) &&
        Objects.equals(this.parentSandbox, sandbox.parentSandbox) &&
        Objects.equals(this.properties, sandbox.properties) &&
        Objects.equals(this.proxyStatus, sandbox.proxyStatus) &&
        Objects.equals(this.runtimeVersion, sandbox.runtimeVersion) &&
        Objects.equals(this.sandboxUrl, sandbox.sandboxUrl) &&
        Objects.equals(this.stackType, sandbox.stackType) &&
        Objects.equals(this.transportType, sandbox.transportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiDefinition, childSandboxes, configuredRoutes, description, gitAccessToken, gitUrl, hasRepository, id, ipWhitelist, name, parentSandbox, properties, proxyStatus, runtimeVersion, sandboxUrl, stackType, transportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sandbox {\n");
    sb.append("    apiDefinition: ").append(toIndentedString(apiDefinition)).append("\n");
    sb.append("    childSandboxes: ").append(toIndentedString(childSandboxes)).append("\n");
    sb.append("    configuredRoutes: ").append(toIndentedString(configuredRoutes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gitAccessToken: ").append(toIndentedString(gitAccessToken)).append("\n");
    sb.append("    gitUrl: ").append(toIndentedString(gitUrl)).append("\n");
    sb.append("    hasRepository: ").append(toIndentedString(hasRepository)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipWhitelist: ").append(toIndentedString(ipWhitelist)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentSandbox: ").append(toIndentedString(parentSandbox)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    proxyStatus: ").append(toIndentedString(proxyStatus)).append("\n");
    sb.append("    runtimeVersion: ").append(toIndentedString(runtimeVersion)).append("\n");
    sb.append("    sandboxUrl: ").append(toIndentedString(sandboxUrl)).append("\n");
    sb.append("    stackType: ").append(toIndentedString(stackType)).append("\n");
    sb.append("    transportType: ").append(toIndentedString(transportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiDefinition");
    openapiFields.add("childSandboxes");
    openapiFields.add("configuredRoutes");
    openapiFields.add("description");
    openapiFields.add("gitAccessToken");
    openapiFields.add("gitUrl");
    openapiFields.add("hasRepository");
    openapiFields.add("id");
    openapiFields.add("ipWhitelist");
    openapiFields.add("name");
    openapiFields.add("parentSandbox");
    openapiFields.add("properties");
    openapiFields.add("proxyStatus");
    openapiFields.add("runtimeVersion");
    openapiFields.add("sandboxUrl");
    openapiFields.add("stackType");
    openapiFields.add("transportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Sandbox
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Sandbox.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Sandbox is not found in the empty JSON string", Sandbox.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Sandbox.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Sandbox` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Sandbox.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiDefinition") != null && !jsonObj.get("apiDefinition").isJsonNull()) && !jsonObj.get("apiDefinition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiDefinition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiDefinition").toString()));
      }
      // validate the optional field `apiDefinition`
      if (jsonObj.get("apiDefinition") != null && !jsonObj.get("apiDefinition").isJsonNull()) {
        ApiDefinitionEnum.validateJsonElement(jsonObj.get("apiDefinition"));
      }
      if (jsonObj.get("childSandboxes") != null && !jsonObj.get("childSandboxes").isJsonNull()) {
        JsonArray jsonArraychildSandboxes = jsonObj.getAsJsonArray("childSandboxes");
        if (jsonArraychildSandboxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("childSandboxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `childSandboxes` to be an array in the JSON string but got `%s`", jsonObj.get("childSandboxes").toString()));
          }

          // validate the optional field `childSandboxes` (array)
          for (int i = 0; i < jsonArraychildSandboxes.size(); i++) {
            Sandbox.validateJsonElement(jsonArraychildSandboxes.get(i));
          };
        }
      }
      if (jsonObj.get("configuredRoutes") != null && !jsonObj.get("configuredRoutes").isJsonNull()) {
        JsonArray jsonArrayconfiguredRoutes = jsonObj.getAsJsonArray("configuredRoutes");
        if (jsonArrayconfiguredRoutes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configuredRoutes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configuredRoutes` to be an array in the JSON string but got `%s`", jsonObj.get("configuredRoutes").toString()));
          }

          // validate the optional field `configuredRoutes` (array)
          for (int i = 0; i < jsonArrayconfiguredRoutes.size(); i++) {
            ConfiguredRouteDetails.validateJsonElement(jsonArrayconfiguredRoutes.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gitAccessToken") != null && !jsonObj.get("gitAccessToken").isJsonNull()) && !jsonObj.get("gitAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitAccessToken").toString()));
      }
      if ((jsonObj.get("gitUrl") != null && !jsonObj.get("gitUrl").isJsonNull()) && !jsonObj.get("gitUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitUrl").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipWhitelist") != null && !jsonObj.get("ipWhitelist").isJsonNull() && !jsonObj.get("ipWhitelist").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipWhitelist` to be an array in the JSON string but got `%s`", jsonObj.get("ipWhitelist").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `parentSandbox`
      if (jsonObj.get("parentSandbox") != null && !jsonObj.get("parentSandbox").isJsonNull()) {
        Sandbox.validateJsonElement(jsonObj.get("parentSandbox"));
      }
      if ((jsonObj.get("proxyStatus") != null && !jsonObj.get("proxyStatus").isJsonNull()) && !jsonObj.get("proxyStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyStatus").toString()));
      }
      // validate the optional field `proxyStatus`
      if (jsonObj.get("proxyStatus") != null && !jsonObj.get("proxyStatus").isJsonNull()) {
        ProxyStatusEnum.validateJsonElement(jsonObj.get("proxyStatus"));
      }
      if ((jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) && !jsonObj.get("runtimeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtimeVersion").toString()));
      }
      // validate the optional field `runtimeVersion`
      if (jsonObj.get("runtimeVersion") != null && !jsonObj.get("runtimeVersion").isJsonNull()) {
        RuntimeVersionEnum.validateJsonElement(jsonObj.get("runtimeVersion"));
      }
      if ((jsonObj.get("sandboxUrl") != null && !jsonObj.get("sandboxUrl").isJsonNull()) && !jsonObj.get("sandboxUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sandboxUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sandboxUrl").toString()));
      }
      if ((jsonObj.get("stackType") != null && !jsonObj.get("stackType").isJsonNull()) && !jsonObj.get("stackType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stackType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stackType").toString()));
      }
      // validate the optional field `stackType`
      if (jsonObj.get("stackType") != null && !jsonObj.get("stackType").isJsonNull()) {
        StackTypeEnum.validateJsonElement(jsonObj.get("stackType"));
      }
      if ((jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) && !jsonObj.get("transportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportType").toString()));
      }
      // validate the optional field `transportType`
      if (jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) {
        TransportTypeEnum.validateJsonElement(jsonObj.get("transportType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Sandbox.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Sandbox' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Sandbox> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Sandbox.class));

       return (TypeAdapter<T>) new TypeAdapter<Sandbox>() {
           @Override
           public void write(JsonWriter out, Sandbox value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Sandbox read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Sandbox given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Sandbox
   * @throws IOException if the JSON string is invalid with respect to Sandbox
   */
  public static Sandbox fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Sandbox.class);
  }

  /**
   * Convert an instance of Sandbox to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

