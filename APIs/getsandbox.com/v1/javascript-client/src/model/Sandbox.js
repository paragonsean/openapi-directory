/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfiguredRouteDetails from './ConfiguredRouteDetails';

/**
 * The Sandbox model module.
 * @module model/Sandbox
 * @version v1
 */
class Sandbox {
    /**
     * Constructs a new <code>Sandbox</code>.
     * @alias module:model/Sandbox
     * @param name {String} 
     */
    constructor(name) { 
        
        Sandbox.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Sandbox</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sandbox} obj Optional instance to populate.
     * @return {module:model/Sandbox} The populated <code>Sandbox</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sandbox();

            if (data.hasOwnProperty('apiDefinition')) {
                obj['apiDefinition'] = ApiClient.convertToType(data['apiDefinition'], 'String');
            }
            if (data.hasOwnProperty('childSandboxes')) {
                obj['childSandboxes'] = ApiClient.convertToType(data['childSandboxes'], [Sandbox]);
            }
            if (data.hasOwnProperty('configuredRoutes')) {
                obj['configuredRoutes'] = ApiClient.convertToType(data['configuredRoutes'], [ConfiguredRouteDetails]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gitAccessToken')) {
                obj['gitAccessToken'] = ApiClient.convertToType(data['gitAccessToken'], 'String');
            }
            if (data.hasOwnProperty('gitUrl')) {
                obj['gitUrl'] = ApiClient.convertToType(data['gitUrl'], 'String');
            }
            if (data.hasOwnProperty('hasRepository')) {
                obj['hasRepository'] = ApiClient.convertToType(data['hasRepository'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipWhitelist')) {
                obj['ipWhitelist'] = ApiClient.convertToType(data['ipWhitelist'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentSandbox')) {
                obj['parentSandbox'] = Sandbox.constructFromObject(data['parentSandbox']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': Object});
            }
            if (data.hasOwnProperty('proxyStatus')) {
                obj['proxyStatus'] = ApiClient.convertToType(data['proxyStatus'], 'String');
            }
            if (data.hasOwnProperty('runtimeVersion')) {
                obj['runtimeVersion'] = ApiClient.convertToType(data['runtimeVersion'], 'String');
            }
            if (data.hasOwnProperty('sandboxUrl')) {
                obj['sandboxUrl'] = ApiClient.convertToType(data['sandboxUrl'], 'String');
            }
            if (data.hasOwnProperty('stackType')) {
                obj['stackType'] = ApiClient.convertToType(data['stackType'], 'String');
            }
            if (data.hasOwnProperty('transportType')) {
                obj['transportType'] = ApiClient.convertToType(data['transportType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sandbox</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sandbox</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sandbox.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['apiDefinition'] && !(typeof data['apiDefinition'] === 'string' || data['apiDefinition'] instanceof String)) {
            throw new Error("Expected the field `apiDefinition` to be a primitive type in the JSON string but got " + data['apiDefinition']);
        }
        if (data['childSandboxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['childSandboxes'])) {
                throw new Error("Expected the field `childSandboxes` to be an array in the JSON data but got " + data['childSandboxes']);
            }
            // validate the optional field `childSandboxes` (array)
            for (const item of data['childSandboxes']) {
                Sandbox.validateJSON(item);
            };
        }
        if (data['configuredRoutes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['configuredRoutes'])) {
                throw new Error("Expected the field `configuredRoutes` to be an array in the JSON data but got " + data['configuredRoutes']);
            }
            // validate the optional field `configuredRoutes` (array)
            for (const item of data['configuredRoutes']) {
                ConfiguredRouteDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['gitAccessToken'] && !(typeof data['gitAccessToken'] === 'string' || data['gitAccessToken'] instanceof String)) {
            throw new Error("Expected the field `gitAccessToken` to be a primitive type in the JSON string but got " + data['gitAccessToken']);
        }
        // ensure the json data is a string
        if (data['gitUrl'] && !(typeof data['gitUrl'] === 'string' || data['gitUrl'] instanceof String)) {
            throw new Error("Expected the field `gitUrl` to be a primitive type in the JSON string but got " + data['gitUrl']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipWhitelist'])) {
            throw new Error("Expected the field `ipWhitelist` to be an array in the JSON data but got " + data['ipWhitelist']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parentSandbox`
        if (data['parentSandbox']) { // data not null
          Sandbox.validateJSON(data['parentSandbox']);
        }
        // ensure the json data is a string
        if (data['proxyStatus'] && !(typeof data['proxyStatus'] === 'string' || data['proxyStatus'] instanceof String)) {
            throw new Error("Expected the field `proxyStatus` to be a primitive type in the JSON string but got " + data['proxyStatus']);
        }
        // ensure the json data is a string
        if (data['runtimeVersion'] && !(typeof data['runtimeVersion'] === 'string' || data['runtimeVersion'] instanceof String)) {
            throw new Error("Expected the field `runtimeVersion` to be a primitive type in the JSON string but got " + data['runtimeVersion']);
        }
        // ensure the json data is a string
        if (data['sandboxUrl'] && !(typeof data['sandboxUrl'] === 'string' || data['sandboxUrl'] instanceof String)) {
            throw new Error("Expected the field `sandboxUrl` to be a primitive type in the JSON string but got " + data['sandboxUrl']);
        }
        // ensure the json data is a string
        if (data['stackType'] && !(typeof data['stackType'] === 'string' || data['stackType'] instanceof String)) {
            throw new Error("Expected the field `stackType` to be a primitive type in the JSON string but got " + data['stackType']);
        }
        // ensure the json data is a string
        if (data['transportType'] && !(typeof data['transportType'] === 'string' || data['transportType'] instanceof String)) {
            throw new Error("Expected the field `transportType` to be a primitive type in the JSON string but got " + data['transportType']);
        }

        return true;
    }


}

Sandbox.RequiredProperties = ["name"];

/**
 * The import source of this Sandbox.
 * @member {module:model/Sandbox.ApiDefinitionEnum} apiDefinition
 */
Sandbox.prototype['apiDefinition'] = undefined;

/**
 * Clones of this Sandbox.
 * @member {Array.<module:model/Sandbox>} childSandboxes
 */
Sandbox.prototype['childSandboxes'] = undefined;

/**
 * Extra configuration applied to some routes, delays, overrides etc.
 * @member {Array.<module:model/ConfiguredRouteDetails>} configuredRoutes
 */
Sandbox.prototype['configuredRoutes'] = undefined;

/**
 * @member {String} description
 */
Sandbox.prototype['description'] = undefined;

/**
 * @member {String} gitAccessToken
 */
Sandbox.prototype['gitAccessToken'] = undefined;

/**
 * The git clone URL.
 * @member {String} gitUrl
 */
Sandbox.prototype['gitUrl'] = undefined;

/**
 * Whether this Sandbox has a git repository or not.
 * @member {Boolean} hasRepository
 */
Sandbox.prototype['hasRepository'] = undefined;

/**
 * The ID of the Sandbox.
 * @member {String} id
 */
Sandbox.prototype['id'] = undefined;

/**
 * The list of IPs allowed to make requests, all allowed if omitted.
 * @member {Array.<String>} ipWhitelist
 */
Sandbox.prototype['ipWhitelist'] = undefined;

/**
 * @member {String} name
 */
Sandbox.prototype['name'] = undefined;

/**
 * @member {module:model/Sandbox} parentSandbox
 */
Sandbox.prototype['parentSandbox'] = undefined;

/**
 * @member {Object.<String, Object>} properties
 */
Sandbox.prototype['properties'] = undefined;

/**
 * The listener status.
 * @member {module:model/Sandbox.ProxyStatusEnum} proxyStatus
 */
Sandbox.prototype['proxyStatus'] = undefined;

/**
 * The library version of this Sandbox.
 * @member {module:model/Sandbox.RuntimeVersionEnum} runtimeVersion
 */
Sandbox.prototype['runtimeVersion'] = undefined;

/**
 * The request URL for this Sandbox.
 * @member {String} sandboxUrl
 */
Sandbox.prototype['sandboxUrl'] = undefined;

/**
 * @member {module:model/Sandbox.StackTypeEnum} stackType
 */
Sandbox.prototype['stackType'] = undefined;

/**
 * The listener transport.
 * @member {module:model/Sandbox.TransportTypeEnum} transportType
 */
Sandbox.prototype['transportType'] = undefined;





/**
 * Allowed values for the <code>apiDefinition</code> property.
 * @enum {String}
 * @readonly
 */
Sandbox['ApiDefinitionEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Apiary"
     * @const
     */
    "Apiary": "Apiary",

    /**
     * value: "Swagger_V2_Json"
     * @const
     */
    "Swagger_V2_Json": "Swagger_V2_Json",

    /**
     * value: "RAML_V08"
     * @const
     */
    "RAML_V08": "RAML_V08",

    /**
     * value: "WSDL"
     * @const
     */
    "WSDL": "WSDL"
};


/**
 * Allowed values for the <code>proxyStatus</code> property.
 * @enum {String}
 * @readonly
 */
Sandbox['ProxyStatusEnum'] = {

    /**
     * value: "STARTED"
     * @const
     */
    "STARTED": "STARTED",

    /**
     * value: "STOPPED"
     * @const
     */
    "STOPPED": "STOPPED"
};


/**
 * Allowed values for the <code>runtimeVersion</code> property.
 * @enum {String}
 * @readonly
 */
Sandbox['RuntimeVersionEnum'] = {

    /**
     * value: "VERSION_1"
     * @const
     */
    "1": "VERSION_1",

    /**
     * value: "VERSION_2"
     * @const
     */
    "2": "VERSION_2"
};


/**
 * Allowed values for the <code>stackType</code> property.
 * @enum {String}
 * @readonly
 */
Sandbox['StackTypeEnum'] = {

    /**
     * value: "JavaScript"
     * @const
     */
    "JavaScript": "JavaScript"
};


/**
 * Allowed values for the <code>transportType</code> property.
 * @enum {String}
 * @readonly
 */
Sandbox['TransportTypeEnum'] = {

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP"
};



export default Sandbox;

