/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RuntimeRequest model module.
 * @module model/RuntimeRequest
 * @version v1
 */
class RuntimeRequest {
    /**
     * Constructs a new <code>RuntimeRequest</code>.
     * @alias module:model/RuntimeRequest
     */
    constructor() { 
        
        RuntimeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuntimeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuntimeRequest} obj Optional instance to populate.
     * @return {module:model/RuntimeRequest} The populated <code>RuntimeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuntimeRequest();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('fullSandboxId')) {
                obj['fullSandboxId'] = ApiClient.convertToType(data['fullSandboxId'], 'String');
            }
            if (data.hasOwnProperty('fullSandboxName')) {
                obj['fullSandboxName'] = ApiClient.convertToType(data['fullSandboxName'], 'String');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('receivedTimestamp')) {
                obj['receivedTimestamp'] = ApiClient.convertToType(data['receivedTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('sandboxId')) {
                obj['sandboxId'] = ApiClient.convertToType(data['sandboxId'], 'String');
            }
            if (data.hasOwnProperty('sandboxName')) {
                obj['sandboxName'] = ApiClient.convertToType(data['sandboxName'], 'String');
            }
            if (data.hasOwnProperty('transport')) {
                obj['transport'] = ApiClient.convertToType(data['transport'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuntimeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuntimeRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['fullSandboxId'] && !(typeof data['fullSandboxId'] === 'string' || data['fullSandboxId'] instanceof String)) {
            throw new Error("Expected the field `fullSandboxId` to be a primitive type in the JSON string but got " + data['fullSandboxId']);
        }
        // ensure the json data is a string
        if (data['fullSandboxName'] && !(typeof data['fullSandboxName'] === 'string' || data['fullSandboxName'] instanceof String)) {
            throw new Error("Expected the field `fullSandboxName` to be a primitive type in the JSON string but got " + data['fullSandboxName']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['sandboxId'] && !(typeof data['sandboxId'] === 'string' || data['sandboxId'] instanceof String)) {
            throw new Error("Expected the field `sandboxId` to be a primitive type in the JSON string but got " + data['sandboxId']);
        }
        // ensure the json data is a string
        if (data['sandboxName'] && !(typeof data['sandboxName'] === 'string' || data['sandboxName'] instanceof String)) {
            throw new Error("Expected the field `sandboxName` to be a primitive type in the JSON string but got " + data['sandboxName']);
        }
        // ensure the json data is a string
        if (data['transport'] && !(typeof data['transport'] === 'string' || data['transport'] instanceof String)) {
            throw new Error("Expected the field `transport` to be a primitive type in the JSON string but got " + data['transport']);
        }

        return true;
    }


}



/**
 * The body of the given request.
 * @member {String} body
 */
RuntimeRequest.prototype['body'] = undefined;

/**
 * The content type of the body, for example 'application/json'.
 * @member {String} contentType
 */
RuntimeRequest.prototype['contentType'] = undefined;

/**
 * The parent ID of the Sandbox that received the request.
 * @member {String} fullSandboxId
 */
RuntimeRequest.prototype['fullSandboxId'] = undefined;

/**
 * The parent name of the Sandbox that received the request.
 * @member {String} fullSandboxName
 */
RuntimeRequest.prototype['fullSandboxName'] = undefined;

/**
 * Transport headers for the given request.
 * @member {Object.<String, String>} headers
 */
RuntimeRequest.prototype['headers'] = undefined;

/**
 * The requestor IP address.
 * @member {String} ip
 */
RuntimeRequest.prototype['ip'] = undefined;

/**
 * @member {Object.<String, String>} properties
 */
RuntimeRequest.prototype['properties'] = undefined;

/**
 * The epoch time in milliseconds when the request was received.
 * @member {Number} receivedTimestamp
 */
RuntimeRequest.prototype['receivedTimestamp'] = undefined;

/**
 * The ID of the Sandbox that received the request.
 * @member {String} sandboxId
 */
RuntimeRequest.prototype['sandboxId'] = undefined;

/**
 * The name of the Sandbox that received the request.
 * @member {String} sandboxName
 */
RuntimeRequest.prototype['sandboxName'] = undefined;

/**
 * Which transport the request was for, 'HTTP'.
 * @member {String} transport
 */
RuntimeRequest.prototype['transport'] = undefined;






export default RuntimeRequest;

