/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateSandbox model module.
 * @module model/CreateSandbox
 * @version v1
 */
class CreateSandbox {
    /**
     * Constructs a new <code>CreateSandbox</code>.
     * @alias module:model/CreateSandbox
     */
    constructor() { 
        
        CreateSandbox.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateSandbox</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSandbox} obj Optional instance to populate.
     * @return {module:model/CreateSandbox} The populated <code>CreateSandbox</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSandbox();

            if (data.hasOwnProperty('commitBaseTemplate')) {
                obj['commitBaseTemplate'] = ApiClient.convertToType(data['commitBaseTemplate'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerOrganisationName')) {
                obj['ownerOrganisationName'] = ApiClient.convertToType(data['ownerOrganisationName'], 'String');
            }
            if (data.hasOwnProperty('parentSandboxName')) {
                obj['parentSandboxName'] = ApiClient.convertToType(data['parentSandboxName'], 'String');
            }
            if (data.hasOwnProperty('transportType')) {
                obj['transportType'] = ApiClient.convertToType(data['transportType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSandbox</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSandbox</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerOrganisationName'] && !(typeof data['ownerOrganisationName'] === 'string' || data['ownerOrganisationName'] instanceof String)) {
            throw new Error("Expected the field `ownerOrganisationName` to be a primitive type in the JSON string but got " + data['ownerOrganisationName']);
        }
        // ensure the json data is a string
        if (data['parentSandboxName'] && !(typeof data['parentSandboxName'] === 'string' || data['parentSandboxName'] instanceof String)) {
            throw new Error("Expected the field `parentSandboxName` to be a primitive type in the JSON string but got " + data['parentSandboxName']);
        }
        // ensure the json data is a string
        if (data['transportType'] && !(typeof data['transportType'] === 'string' || data['transportType'] instanceof String)) {
            throw new Error("Expected the field `transportType` to be a primitive type in the JSON string but got " + data['transportType']);
        }

        return true;
    }


}



/**
 * Whether to commit the example Sandbox definition upon creation.
 * @member {Boolean} commitBaseTemplate
 */
CreateSandbox.prototype['commitBaseTemplate'] = undefined;

/**
 * Text describing this Sandbox.
 * @member {String} description
 */
CreateSandbox.prototype['description'] = undefined;

/**
 * Optional name to give the Sandbox, will be generated if omitted.
 * @member {String} name
 */
CreateSandbox.prototype['name'] = undefined;

/**
 * Name of the team this Sandbox should be created under.
 * @member {String} ownerOrganisationName
 */
CreateSandbox.prototype['ownerOrganisationName'] = undefined;

/**
 * Name of the Sandbox this should be created under, if exists will be a 'clone'.
 * @member {String} parentSandboxName
 */
CreateSandbox.prototype['parentSandboxName'] = undefined;

/**
 * @member {module:model/CreateSandbox.TransportTypeEnum} transportType
 */
CreateSandbox.prototype['transportType'] = undefined;





/**
 * Allowed values for the <code>transportType</code> property.
 * @enum {String}
 * @readonly
 */
CreateSandbox['TransportTypeEnum'] = {

    /**
     * value: "HTTP"
     * @const
     */
    "HTTP": "HTTP"
};



export default CreateSandbox;

