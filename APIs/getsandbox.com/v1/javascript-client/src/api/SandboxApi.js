/**
 * Sandbox API
 * Sandbox API
 *
 * The version of the OpenAPI document: v1
 * Contact: hello@getsandbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSandbox from '../model/CreateSandbox';
import Sandbox from '../model/Sandbox';

/**
* Sandbox service.
* @module api/SandboxApi
* @version v1
*/
export default class SandboxApi {

    /**
    * Constructs a new SandboxApi. 
    * @alias module:api/SandboxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSandbox operation.
     * @callback module:api/SandboxApi~createSandboxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sandbox} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * createSandbox
     * @param {module:model/CreateSandbox} body Sandbox to be created
     * @param {module:api/SandboxApi~createSandboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sandbox}
     */
    createSandbox(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSandbox");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Sandbox;
      return this.apiClient.callApi(
        '/1/sandboxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSandbox operation.
     * @callback module:api/SandboxApi~deleteSandboxCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteSandbox
     * @param {String} sandboxName Name of the Sandbox
     * @param {module:api/SandboxApi~deleteSandboxCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSandbox(sandboxName, callback) {
      let postBody = null;
      // verify the required parameter 'sandboxName' is set
      if (sandboxName === undefined || sandboxName === null) {
        throw new Error("Missing the required parameter 'sandboxName' when calling deleteSandbox");
      }

      let pathParams = {
        'sandboxName': sandboxName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1/sandboxes/{sandboxName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSandboxState operation.
     * @callback module:api/SandboxApi~deleteSandboxStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteSandboxState
     * @param {String} sandboxName Name of the Sandbox
     * @param {module:api/SandboxApi~deleteSandboxStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSandboxState(sandboxName, callback) {
      let postBody = null;
      // verify the required parameter 'sandboxName' is set
      if (sandboxName === undefined || sandboxName === null) {
        throw new Error("Missing the required parameter 'sandboxName' when calling deleteSandboxState");
      }

      let pathParams = {
        'sandboxName': sandboxName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1/sandboxes/{sandboxName}/state', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forkSandbox operation.
     * @callback module:api/SandboxApi~forkSandboxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sandbox} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * forkSandbox
     * @param {String} sandboxName Name of the Sandbox
     * @param {module:api/SandboxApi~forkSandboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sandbox}
     */
    forkSandbox(sandboxName, callback) {
      let postBody = null;
      // verify the required parameter 'sandboxName' is set
      if (sandboxName === undefined || sandboxName === null) {
        throw new Error("Missing the required parameter 'sandboxName' when calling forkSandbox");
      }

      let pathParams = {
        'sandboxName': sandboxName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sandbox;
      return this.apiClient.callApi(
        '/1/sandboxes/{sandboxName}/fork', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSandbox operation.
     * @callback module:api/SandboxApi~getSandboxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sandbox} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSandbox
     * @param {String} sandboxName Name of the Sandbox
     * @param {module:api/SandboxApi~getSandboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sandbox}
     */
    getSandbox(sandboxName, callback) {
      let postBody = null;
      // verify the required parameter 'sandboxName' is set
      if (sandboxName === undefined || sandboxName === null) {
        throw new Error("Missing the required parameter 'sandboxName' when calling getSandbox");
      }

      let pathParams = {
        'sandboxName': sandboxName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Sandbox;
      return this.apiClient.callApi(
        '/1/sandboxes/{sandboxName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSandboxState operation.
     * @callback module:api/SandboxApi~getSandboxStateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSandboxState
     * @param {String} sandboxName Name of the Sandbox
     * @param {module:api/SandboxApi~getSandboxStateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSandboxState(sandboxName, callback) {
      let postBody = null;
      // verify the required parameter 'sandboxName' is set
      if (sandboxName === undefined || sandboxName === null) {
        throw new Error("Missing the required parameter 'sandboxName' when calling getSandboxState");
      }

      let pathParams = {
        'sandboxName': sandboxName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/1/sandboxes/{sandboxName}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSandboxes operation.
     * @callback module:api/SandboxApi~getSandboxesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Sandbox>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSandboxes
     * @param {Object} opts Optional parameters
     * @param {String} [filterType] 
     * @param {module:api/SandboxApi~getSandboxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Sandbox>}
     */
    getSandboxes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filterType': opts['filterType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Sandbox];
      return this.apiClient.callApi(
        '/1/sandboxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSandbox operation.
     * @callback module:api/SandboxApi~updateSandboxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Sandbox} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateSandbox
     * @param {String} sandboxName Name of the Sandbox
     * @param {module:model/Sandbox} body Fields to updated on given Sandbox
     * @param {module:api/SandboxApi~updateSandboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Sandbox}
     */
    updateSandbox(sandboxName, body, callback) {
      let postBody = body;
      // verify the required parameter 'sandboxName' is set
      if (sandboxName === undefined || sandboxName === null) {
        throw new Error("Missing the required parameter 'sandboxName' when calling updateSandbox");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSandbox");
      }

      let pathParams = {
        'sandboxName': sandboxName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Sandbox;
      return this.apiClient.callApi(
        '/1/sandboxes/{sandboxName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
