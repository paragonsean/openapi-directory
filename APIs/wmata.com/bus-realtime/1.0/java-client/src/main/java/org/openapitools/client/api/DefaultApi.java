/*
 * Real-Time Bus Predictions
 * Real-time bus prediction methods.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for call5476365e031f5909e4fe331d
     * @param stopID 7-digit regional stop ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476365e031f5909e4fe331dCall(String stopID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jPredictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stopID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StopID", stopID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476365e031f5909e4fe331dValidateBeforeCall(String stopID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopID' is set
        if (stopID == null) {
            throw new ApiException("Missing the required parameter 'stopID' when calling call5476365e031f5909e4fe331d(Async)");
        }

        return call5476365e031f5909e4fe331dCall(stopID, _callback);

    }

    /**
     * JSON - Next Buses
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns next bus arrival times at a stop.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Predictions&lt;/td&gt;    &lt;td&gt;  Array containing bus predictions (&lt;a href&#x3D;  \&quot;#NextBusPrediction\&quot;&gt;NextBusPrediction&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Full name of the given StopID.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;NextBusPrediction\&quot; name&#x3D;  \&quot;NextBusPrediction\&quot;&gt;NextBusPrediction Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the DirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;Customer-friendly description of direction and destination for  a bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Minutes&lt;/td&gt;    &lt;td&gt;Minutes until bus arrival at this stop. Numeric value.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Base route name as shown on the bus. This can be used in other  bus-related methods. Note that all variants will be shown as their  base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;VehicleID&lt;/td&gt;    &lt;td&gt;Bus identifier. This can be correlated with results returned  from bus positions.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476365e031f5909e4fe331d(String stopID) throws ApiException {
        call5476365e031f5909e4fe331dWithHttpInfo(stopID);
    }

    /**
     * JSON - Next Buses
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns next bus arrival times at a stop.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Predictions&lt;/td&gt;    &lt;td&gt;  Array containing bus predictions (&lt;a href&#x3D;  \&quot;#NextBusPrediction\&quot;&gt;NextBusPrediction&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Full name of the given StopID.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;NextBusPrediction\&quot; name&#x3D;  \&quot;NextBusPrediction\&quot;&gt;NextBusPrediction Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the DirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;Customer-friendly description of direction and destination for  a bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Minutes&lt;/td&gt;    &lt;td&gt;Minutes until bus arrival at this stop. Numeric value.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Base route name as shown on the bus. This can be used in other  bus-related methods. Note that all variants will be shown as their  base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;VehicleID&lt;/td&gt;    &lt;td&gt;Bus identifier. This can be correlated with results returned  from bus positions.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476365e031f5909e4fe331dWithHttpInfo(String stopID) throws ApiException {
        okhttp3.Call localVarCall = call5476365e031f5909e4fe331dValidateBeforeCall(stopID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Next Buses (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns next bus arrival times at a stop.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Predictions&lt;/td&gt;    &lt;td&gt;  Array containing bus predictions (&lt;a href&#x3D;  \&quot;#NextBusPrediction\&quot;&gt;NextBusPrediction&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Full name of the given StopID.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;NextBusPrediction\&quot; name&#x3D;  \&quot;NextBusPrediction\&quot;&gt;NextBusPrediction Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the DirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;Customer-friendly description of direction and destination for  a bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Minutes&lt;/td&gt;    &lt;td&gt;Minutes until bus arrival at this stop. Numeric value.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Base route name as shown on the bus. This can be used in other  bus-related methods. Note that all variants will be shown as their  base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;VehicleID&lt;/td&gt;    &lt;td&gt;Bus identifier. This can be correlated with results returned  from bus positions.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476365e031f5909e4fe331dAsync(String stopID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476365e031f5909e4fe331dValidateBeforeCall(stopID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476365e031f5909e4fe331e
     * @param stopID 7-digit regional stop ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476365e031f5909e4fe331eCall(String stopID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Predictions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stopID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StopID", stopID));
        }

        final String[] localVarAccepts = {
            "text/xml",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476365e031f5909e4fe331eValidateBeforeCall(String stopID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopID' is set
        if (stopID == null) {
            throw new ApiException("Missing the required parameter 'stopID' when calling call5476365e031f5909e4fe331e(Async)");
        }

        return call5476365e031f5909e4fe331eCall(stopID, _callback);

    }

    /**
     * XML - Next Buses
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns next bus arrival times at a stop.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Predictions&lt;/td&gt;    &lt;td&gt;  Array containing bus predictions (&lt;a href&#x3D;  \&quot;#NextBusPrediction\&quot;&gt;NextBusPrediction&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Full name of the given StopID.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;NextBusPrediction\&quot; name&#x3D;  \&quot;NextBusPrediction\&quot;&gt;NextBusPrediction Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the DirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;Customer-friendly description of direction and destination for  a bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Minutes&lt;/td&gt;    &lt;td&gt;Minutes until bus arrival at this stop. Numeric value.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Base route name as shown on the bus. This can be used in other  bus-related methods. Note that all variants will be shown as their  base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;VehicleID&lt;/td&gt;    &lt;td&gt;Bus identifier. This can be correlated with results returned  from bus positions.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476365e031f5909e4fe331e(String stopID) throws ApiException {
        call5476365e031f5909e4fe331eWithHttpInfo(stopID);
    }

    /**
     * XML - Next Buses
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns next bus arrival times at a stop.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Predictions&lt;/td&gt;    &lt;td&gt;  Array containing bus predictions (&lt;a href&#x3D;  \&quot;#NextBusPrediction\&quot;&gt;NextBusPrediction&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Full name of the given StopID.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;NextBusPrediction\&quot; name&#x3D;  \&quot;NextBusPrediction\&quot;&gt;NextBusPrediction Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the DirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;Customer-friendly description of direction and destination for  a bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Minutes&lt;/td&gt;    &lt;td&gt;Minutes until bus arrival at this stop. Numeric value.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Base route name as shown on the bus. This can be used in other  bus-related methods. Note that all variants will be shown as their  base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;VehicleID&lt;/td&gt;    &lt;td&gt;Bus identifier. This can be correlated with results returned  from bus positions.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476365e031f5909e4fe331eWithHttpInfo(String stopID) throws ApiException {
        okhttp3.Call localVarCall = call5476365e031f5909e4fe331eValidateBeforeCall(stopID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Next Buses (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns next bus arrival times at a stop.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Predictions&lt;/td&gt;    &lt;td&gt;  Array containing bus predictions (&lt;a href&#x3D;  \&quot;#NextBusPrediction\&quot;&gt;NextBusPrediction&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Full name of the given StopID.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;NextBusPrediction\&quot; name&#x3D;  \&quot;NextBusPrediction\&quot;&gt;NextBusPrediction Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the DirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;Customer-friendly description of direction and destination for  a bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Minutes&lt;/td&gt;    &lt;td&gt;Minutes until bus arrival at this stop. Numeric value.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Base route name as shown on the bus. This can be used in other  bus-related methods. Note that all variants will be shown as their  base route names (i.e.: 10Av1 and 10Av2 will be shown as 10A).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;VehicleID&lt;/td&gt;    &lt;td&gt;Bus identifier. This can be correlated with results returned  from bus positions.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response from invalid Stop ID. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476365e031f5909e4fe331eAsync(String stopID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476365e031f5909e4fe331eValidateBeforeCall(stopID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
