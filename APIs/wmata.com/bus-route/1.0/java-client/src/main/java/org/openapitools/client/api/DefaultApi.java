/*
 * Bus Route and Stop Methods
 * Bus stop information, route and schedule data, and bus positions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for call5476362a281d830c946a3d68
     * @param routeID Base bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default return code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d68Call(String routeID, BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jBusPositions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RouteID", routeID));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Radius", radius));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d68ValidateBeforeCall(String routeID, BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        return call5476362a281d830c946a3d68Call(routeID, lat, lon, radius, _callback);

    }

    /**
     * JSON - Bus Position
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns bus positions for the given route, with an optional search radius. If no parameters are specified, all bus positions are returned.&lt;/p&gt;  &lt;p&gt;Note that the RouteID parameter accepts only base route names and no variations, i.e.: use 10A instead of 10Av1 or 10Av2.&lt;/p&gt;  &lt;p&gt;Bus positions are refreshed approximately every &lt;span style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;20 to 30&lt;/span&gt; 7 to 10 seconds.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;BusPositions&lt;/td&gt;  &lt;td&gt; Array containing bus position information (&lt;a href&#x3D; \&quot;#BusPosition\&quot;&gt;BusPositions&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;BusPosition\&quot; name&#x3D;\&quot;BusPosition\&quot;&gt;BusPosition Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DateTime&lt;/td&gt;  &lt;td&gt;Date and time (Eastern Standard Time) of last position update. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:23:40).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Deviation&lt;/td&gt;  &lt;td&gt;Deviation, in minutes, from schedule. Positive values indicate that the bus is running late while negative ones are for buses running ahead of schedule.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText for a customer-friendly description of direction.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the trip, not the bus itself (e.g.: NORTH, SOUTH, EAST, WEST).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Last reported Latitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Last reported Longitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Base route name as shown on the bus. Note that the base route name could also refer to any variant, so a RouteID of 10A could refer to 10A, 10Av1, 10Av2, etc.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripEndTime&lt;/td&gt;  &lt;td&gt;Scheduled end date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:17:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Destination of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripID&lt;/td&gt;  &lt;td&gt;Unique trip ID. This can be correlated with the data returned from the schedule-related methods.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripStartTime&lt;/td&gt;  &lt;td&gt;Scheduled start date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T12:40:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;VehicleID&lt;/td&gt;  &lt;td&gt;Unique identifier for the bus. This is usually visible on the bus itself.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param routeID Base bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default return code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d68(String routeID, BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        call5476362a281d830c946a3d68WithHttpInfo(routeID, lat, lon, radius);
    }

    /**
     * JSON - Bus Position
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns bus positions for the given route, with an optional search radius. If no parameters are specified, all bus positions are returned.&lt;/p&gt;  &lt;p&gt;Note that the RouteID parameter accepts only base route names and no variations, i.e.: use 10A instead of 10Av1 or 10Av2.&lt;/p&gt;  &lt;p&gt;Bus positions are refreshed approximately every &lt;span style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;20 to 30&lt;/span&gt; 7 to 10 seconds.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;BusPositions&lt;/td&gt;  &lt;td&gt; Array containing bus position information (&lt;a href&#x3D; \&quot;#BusPosition\&quot;&gt;BusPositions&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;BusPosition\&quot; name&#x3D;\&quot;BusPosition\&quot;&gt;BusPosition Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DateTime&lt;/td&gt;  &lt;td&gt;Date and time (Eastern Standard Time) of last position update. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:23:40).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Deviation&lt;/td&gt;  &lt;td&gt;Deviation, in minutes, from schedule. Positive values indicate that the bus is running late while negative ones are for buses running ahead of schedule.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText for a customer-friendly description of direction.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the trip, not the bus itself (e.g.: NORTH, SOUTH, EAST, WEST).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Last reported Latitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Last reported Longitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Base route name as shown on the bus. Note that the base route name could also refer to any variant, so a RouteID of 10A could refer to 10A, 10Av1, 10Av2, etc.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripEndTime&lt;/td&gt;  &lt;td&gt;Scheduled end date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:17:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Destination of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripID&lt;/td&gt;  &lt;td&gt;Unique trip ID. This can be correlated with the data returned from the schedule-related methods.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripStartTime&lt;/td&gt;  &lt;td&gt;Scheduled start date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T12:40:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;VehicleID&lt;/td&gt;  &lt;td&gt;Unique identifier for the bus. This is usually visible on the bus itself.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param routeID Base bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default return code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d68WithHttpInfo(String routeID, BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d68ValidateBeforeCall(routeID, lat, lon, radius, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Bus Position (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns bus positions for the given route, with an optional search radius. If no parameters are specified, all bus positions are returned.&lt;/p&gt;  &lt;p&gt;Note that the RouteID parameter accepts only base route names and no variations, i.e.: use 10A instead of 10Av1 or 10Av2.&lt;/p&gt;  &lt;p&gt;Bus positions are refreshed approximately every &lt;span style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;20 to 30&lt;/span&gt; 7 to 10 seconds.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;BusPositions&lt;/td&gt;  &lt;td&gt; Array containing bus position information (&lt;a href&#x3D; \&quot;#BusPosition\&quot;&gt;BusPositions&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;BusPosition\&quot; name&#x3D;\&quot;BusPosition\&quot;&gt;BusPosition Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DateTime&lt;/td&gt;  &lt;td&gt;Date and time (Eastern Standard Time) of last position update. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:23:40).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Deviation&lt;/td&gt;  &lt;td&gt;Deviation, in minutes, from schedule. Positive values indicate that the bus is running late while negative ones are for buses running ahead of schedule.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText for a customer-friendly description of direction.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the trip, not the bus itself (e.g.: NORTH, SOUTH, EAST, WEST).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Last reported Latitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Last reported Longitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Base route name as shown on the bus. Note that the base route name could also refer to any variant, so a RouteID of 10A could refer to 10A, 10Av1, 10Av2, etc.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripEndTime&lt;/td&gt;  &lt;td&gt;Scheduled end date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:17:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Destination of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripID&lt;/td&gt;  &lt;td&gt;Unique trip ID. This can be correlated with the data returned from the schedule-related methods.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripStartTime&lt;/td&gt;  &lt;td&gt;Scheduled start date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T12:40:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;VehicleID&lt;/td&gt;  &lt;td&gt;Unique identifier for the bus. This is usually visible on the bus itself.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param routeID Base bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default return code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d68Async(String routeID, BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d68ValidateBeforeCall(routeID, lat, lon, radius, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d69
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d69Call(String routeID, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jRouteDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RouteID", routeID));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d69ValidateBeforeCall(String routeID, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeID' is set
        if (routeID == null) {
            throw new ApiException("Missing the required parameter 'routeID' when calling call5476362a281d830c946a3d69(Async)");
        }

        return call5476362a281d830c946a3d69Call(routeID, date, _callback);

    }

    /**
     * JSON - Path Details
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;For a given date, returns the set of ordered latitude/longitude points along  a route variant along with the list of stops served.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Structures describing &lt;a href&#x3D;\&quot;#Direction\&quot;&gt;path/stop&lt;/a&gt;  information.&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few will return NULL for Direction0 or for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant (e.g.: 10A, 10Av1, etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Direction\&quot; name&#x3D;\&quot;Direction\&quot;&gt;Direction0/Direction1  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  DirectionText element to denote the general direction of the route  variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;General direction of the route variant (NORTH, SOUTH, EAST,  WEST, LOOP, etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Shape&lt;/td&gt;    &lt;td&gt;  Array containing shape point information (&lt;a href&#x3D;  \&quot;#ShapePoint\&quot;&gt;ShapePoint&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ShapePoint\&quot; name&#x3D;\&quot;ShapePoint\&quot;&gt;ShapePoint  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Order of the point in the sequence of ShapePoints.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d69(String routeID, String date) throws ApiException {
        call5476362a281d830c946a3d69WithHttpInfo(routeID, date);
    }

    /**
     * JSON - Path Details
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;For a given date, returns the set of ordered latitude/longitude points along  a route variant along with the list of stops served.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Structures describing &lt;a href&#x3D;\&quot;#Direction\&quot;&gt;path/stop&lt;/a&gt;  information.&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few will return NULL for Direction0 or for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant (e.g.: 10A, 10Av1, etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Direction\&quot; name&#x3D;\&quot;Direction\&quot;&gt;Direction0/Direction1  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  DirectionText element to denote the general direction of the route  variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;General direction of the route variant (NORTH, SOUTH, EAST,  WEST, LOOP, etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Shape&lt;/td&gt;    &lt;td&gt;  Array containing shape point information (&lt;a href&#x3D;  \&quot;#ShapePoint\&quot;&gt;ShapePoint&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ShapePoint\&quot; name&#x3D;\&quot;ShapePoint\&quot;&gt;ShapePoint  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Order of the point in the sequence of ShapePoints.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d69WithHttpInfo(String routeID, String date) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d69ValidateBeforeCall(routeID, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Path Details (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;For a given date, returns the set of ordered latitude/longitude points along  a route variant along with the list of stops served.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Structures describing &lt;a href&#x3D;\&quot;#Direction\&quot;&gt;path/stop&lt;/a&gt;  information.&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few will return NULL for Direction0 or for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant (e.g.: 10A, 10Av1, etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Direction\&quot; name&#x3D;\&quot;Direction\&quot;&gt;Direction0/Direction1  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  DirectionText element to denote the general direction of the route  variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;    &lt;td&gt;General direction of the route variant (NORTH, SOUTH, EAST,  WEST, LOOP, etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Shape&lt;/td&gt;    &lt;td&gt;  Array containing shape point information (&lt;a href&#x3D;  \&quot;#ShapePoint\&quot;&gt;ShapePoint&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ShapePoint\&quot; name&#x3D;\&quot;ShapePoint\&quot;&gt;ShapePoint  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Order of the point in the sequence of ShapePoints.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d69Async(String routeID, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d69ValidateBeforeCall(routeID, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d6a
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6aCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jRoutes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d6aValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return call5476362a281d830c946a3d6aCall(_callback);

    }

    /**
     * JSON - Routes
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of all bus route variants (patterns). For example, the 10A  and 10Av1 are the same route, but may stop at slightly different locations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;  Array containing route variant information (&lt;a href&#x3D;  \&quot;#Route\&quot;&gt;Route&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Route\&quot; name&#x3D;\&quot;Route\&quot;&gt;Route Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name of the route variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Unique identifier for a given route variant. Can be used in  various other bus-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineDescription&lt;/td&gt;    &lt;td&gt;Denotes the route variant’s grouping – lines are a combination of routes which lie in the same corridor and which have significant portions of their paths along the same roadways.&lt;/td&gt;  &lt;/tr&gt;   &lt;/tbody&gt;  &lt;/table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d6a() throws ApiException {
        call5476362a281d830c946a3d6aWithHttpInfo();
    }

    /**
     * JSON - Routes
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of all bus route variants (patterns). For example, the 10A  and 10Av1 are the same route, but may stop at slightly different locations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;  Array containing route variant information (&lt;a href&#x3D;  \&quot;#Route\&quot;&gt;Route&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Route\&quot; name&#x3D;\&quot;Route\&quot;&gt;Route Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name of the route variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Unique identifier for a given route variant. Can be used in  various other bus-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineDescription&lt;/td&gt;    &lt;td&gt;Denotes the route variant’s grouping – lines are a combination of routes which lie in the same corridor and which have significant portions of their paths along the same roadways.&lt;/td&gt;  &lt;/tr&gt;   &lt;/tbody&gt;  &lt;/table&gt;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d6aWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d6aValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Routes (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of all bus route variants (patterns). For example, the 10A  and 10Av1 are the same route, but may stop at slightly different locations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;  Array containing route variant information (&lt;a href&#x3D;  \&quot;#Route\&quot;&gt;Route&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Route\&quot; name&#x3D;\&quot;Route\&quot;&gt;Route Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name of the route variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Unique identifier for a given route variant. Can be used in  various other bus-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineDescription&lt;/td&gt;    &lt;td&gt;Denotes the route variant’s grouping – lines are a combination of routes which lie in the same corridor and which have significant portions of their paths along the same roadways.&lt;/td&gt;  &lt;/tr&gt;   &lt;/tbody&gt;  &lt;/table&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6aAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d6aValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d6b
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1, etc. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations if a base route is specified in RouteID.  For example, if B30 is specified and IncludingVariations is set to true, data for all variations of B30 such as B30v1, B30v2, etc. will be returned. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6bCall(String routeID, String date, Boolean includingVariations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jRouteSchedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RouteID", routeID));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Date", date));
        }

        if (includingVariations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludingVariations", includingVariations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d6bValidateBeforeCall(String routeID, String date, Boolean includingVariations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeID' is set
        if (routeID == null) {
            throw new ApiException("Missing the required parameter 'routeID' when calling call5476362a281d830c946a3d6b(Async)");
        }

        return call5476362a281d830c946a3d6bCall(routeID, date, includingVariations, _callback);

    }

    /**
     * JSON - Schedule
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns schedules for a given route variant for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Arrays containing trip information (&lt;a href&#x3D;  \&quot;#Trip\&quot;&gt;Trip&lt;/a&gt;).&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few (especially ones which run in  a loop, such as the U8) will return content only for Direction0  and NULL content for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Trip\&quot; name&#x3D;\&quot;Trip\&quot;&gt;Trip Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  TripDirectionText element to denote the general direction of the  trip.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant. This can be used in several other bus  methods which accept variants.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopTimes&lt;/td&gt;    &lt;td&gt;  Array containing location and time information (&lt;a href&#x3D;  \&quot;#StopTime\&quot;&gt;StopTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (NORTH, SOUTH, EAST, WEST, LOOP,  etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Unique trip ID. This can be correlated with the data returned  from the schedule-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StopTime\&quot; name&#x3D;\&quot;StopTime\&quot;&gt;StopTime Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopSeq&lt;/td&gt;    &lt;td&gt;Order of the stop in the sequence of StopTimes.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Scheduled departure date and time (Eastern Standard Time) from  this stop. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1, etc. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations if a base route is specified in RouteID.  For example, if B30 is specified and IncludingVariations is set to true, data for all variations of B30 such as B30v1, B30v2, etc. will be returned. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d6b(String routeID, String date, Boolean includingVariations) throws ApiException {
        call5476362a281d830c946a3d6bWithHttpInfo(routeID, date, includingVariations);
    }

    /**
     * JSON - Schedule
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns schedules for a given route variant for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Arrays containing trip information (&lt;a href&#x3D;  \&quot;#Trip\&quot;&gt;Trip&lt;/a&gt;).&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few (especially ones which run in  a loop, such as the U8) will return content only for Direction0  and NULL content for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Trip\&quot; name&#x3D;\&quot;Trip\&quot;&gt;Trip Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  TripDirectionText element to denote the general direction of the  trip.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant. This can be used in several other bus  methods which accept variants.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopTimes&lt;/td&gt;    &lt;td&gt;  Array containing location and time information (&lt;a href&#x3D;  \&quot;#StopTime\&quot;&gt;StopTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (NORTH, SOUTH, EAST, WEST, LOOP,  etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Unique trip ID. This can be correlated with the data returned  from the schedule-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StopTime\&quot; name&#x3D;\&quot;StopTime\&quot;&gt;StopTime Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopSeq&lt;/td&gt;    &lt;td&gt;Order of the stop in the sequence of StopTimes.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Scheduled departure date and time (Eastern Standard Time) from  this stop. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1, etc. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations if a base route is specified in RouteID.  For example, if B30 is specified and IncludingVariations is set to true, data for all variations of B30 such as B30v1, B30v2, etc. will be returned. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d6bWithHttpInfo(String routeID, String date, Boolean includingVariations) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d6bValidateBeforeCall(routeID, date, includingVariations, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Schedule (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns schedules for a given route variant for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Arrays containing trip information (&lt;a href&#x3D;  \&quot;#Trip\&quot;&gt;Trip&lt;/a&gt;).&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few (especially ones which run in  a loop, such as the U8) will return content only for Direction0  and NULL content for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Trip\&quot; name&#x3D;\&quot;Trip\&quot;&gt;Trip Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  TripDirectionText element to denote the general direction of the  trip.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant. This can be used in several other bus  methods which accept variants.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopTimes&lt;/td&gt;    &lt;td&gt;  Array containing location and time information (&lt;a href&#x3D;  \&quot;#StopTime\&quot;&gt;StopTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (NORTH, SOUTH, EAST, WEST, LOOP,  etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Unique trip ID. This can be correlated with the data returned  from the schedule-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StopTime\&quot; name&#x3D;\&quot;StopTime\&quot;&gt;StopTime Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopSeq&lt;/td&gt;    &lt;td&gt;Order of the stop in the sequence of StopTimes.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Scheduled departure date and time (Eastern Standard Time) from  this stop. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1, etc. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations if a base route is specified in RouteID.  For example, if B30 is specified and IncludingVariations is set to true, data for all variations of B30 such as B30v1, B30v2, etc. will be returned. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6bAsync(String routeID, String date, Boolean includingVariations, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d6bValidateBeforeCall(routeID, date, includingVariations, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d6c
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6cCall(String stopID, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jStopSchedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stopID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StopID", stopID));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d6cValidateBeforeCall(String stopID, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopID' is set
        if (stopID == null) {
            throw new ApiException("Missing the required parameter 'stopID' when calling call5476362a281d830c946a3d6c(Async)");
        }

        return call5476362a281d830c946a3d6cCall(stopID, date, _callback);

    }

    /**
     * JSON - Schedule at Stop
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of buses scheduled at a stop for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;ScheduleArrivals&lt;/td&gt;    &lt;td&gt;  Array containing scheduled arrival information (&lt;a href&#x3D;  \&quot;#ScheduleArrival\&quot;&gt;ScheduleArrival&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stop&lt;/td&gt;    &lt;td&gt;  Structure describing &lt;a href&#x3D;\&quot;#Stop\&quot;&gt;stop&lt;/a&gt; information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ScheduleArrival\&quot; name&#x3D;  \&quot;ScheduleArrival\&quot;&gt;ScheduleArrival Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the TripDirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant identifier (pattern). This variant can be  used in several other bus methods which accept variants. Note that  customers will never see anything other than the base route name,  so variants 10A, 10Av1, 10Av2, etc. will be displayed as 10A on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;ScheduleTime&lt;/td&gt;    &lt;td&gt;Date and time (Eastern Standard Time) when the bus is scheduled  to stop at this location. Will be in YYYY-MM-DDTHH:mm:ss format  (e.g.: 2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (e.g.: NORTH, SOUTH, EAST,  WEST).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d6c(String stopID, String date) throws ApiException {
        call5476362a281d830c946a3d6cWithHttpInfo(stopID, date);
    }

    /**
     * JSON - Schedule at Stop
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of buses scheduled at a stop for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;ScheduleArrivals&lt;/td&gt;    &lt;td&gt;  Array containing scheduled arrival information (&lt;a href&#x3D;  \&quot;#ScheduleArrival\&quot;&gt;ScheduleArrival&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stop&lt;/td&gt;    &lt;td&gt;  Structure describing &lt;a href&#x3D;\&quot;#Stop\&quot;&gt;stop&lt;/a&gt; information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ScheduleArrival\&quot; name&#x3D;  \&quot;ScheduleArrival\&quot;&gt;ScheduleArrival Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the TripDirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant identifier (pattern). This variant can be  used in several other bus methods which accept variants. Note that  customers will never see anything other than the base route name,  so variants 10A, 10Av1, 10Av2, etc. will be displayed as 10A on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;ScheduleTime&lt;/td&gt;    &lt;td&gt;Date and time (Eastern Standard Time) when the bus is scheduled  to stop at this location. Will be in YYYY-MM-DDTHH:mm:ss format  (e.g.: 2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (e.g.: NORTH, SOUTH, EAST,  WEST).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d6cWithHttpInfo(String stopID, String date) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d6cValidateBeforeCall(stopID, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Schedule at Stop (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of buses scheduled at a stop for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;ScheduleArrivals&lt;/td&gt;    &lt;td&gt;  Array containing scheduled arrival information (&lt;a href&#x3D;  \&quot;#ScheduleArrival\&quot;&gt;ScheduleArrival&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stop&lt;/td&gt;    &lt;td&gt;  Structure describing &lt;a href&#x3D;\&quot;#Stop\&quot;&gt;stop&lt;/a&gt; information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ScheduleArrival\&quot; name&#x3D;  \&quot;ScheduleArrival\&quot;&gt;ScheduleArrival Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the TripDirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant identifier (pattern). This variant can be  used in several other bus methods which accept variants. Note that  customers will never see anything other than the base route name,  so variants 10A, 10Av1, 10Av2, etc. will be displayed as 10A on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;ScheduleTime&lt;/td&gt;    &lt;td&gt;Date and time (Eastern Standard Time) when the bus is scheduled  to stop at this location. Will be in YYYY-MM-DDTHH:mm:ss format  (e.g.: 2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (e.g.: NORTH, SOUTH, EAST,  WEST).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6cAsync(String stopID, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d6cValidateBeforeCall(stopID, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d6d
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6dCall(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jStops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Radius", radius));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d6dValidateBeforeCall(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        return call5476362a281d830c946a3d6dCall(lat, lon, radius, _callback);

    }

    /**
     * JSON - Stop Search
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby bus stops based on latitude, longitude, and radius.  Omit all parameters to retrieve a list of all stops.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d6d(BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        call5476362a281d830c946a3d6dWithHttpInfo(lat, lon, radius);
    }

    /**
     * JSON - Stop Search
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby bus stops based on latitude, longitude, and radius.  Omit all parameters to retrieve a list of all stops.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d6dWithHttpInfo(BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d6dValidateBeforeCall(lat, lon, radius, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Stop Search (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby bus stops based on latitude, longitude, and radius.  Omit all parameters to retrieve a list of all stops.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6dAsync(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d6dValidateBeforeCall(lat, lon, radius, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d6e
     * @param routeID Bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6eCall(String routeID, String lat, String lon, String radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/BusPositions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RouteID", routeID));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Radius", radius));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d6eValidateBeforeCall(String routeID, String lat, String lon, String radius, final ApiCallback _callback) throws ApiException {
        return call5476362a281d830c946a3d6eCall(routeID, lat, lon, radius, _callback);

    }

    /**
     * XML - Bus Position
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns bus positions for the given route, with an optional search radius. If no parameters are specified, all bus positions are returned.&lt;/p&gt;  &lt;p&gt;Note that the RouteID parameter accepts only base route names and no variations, i.e.: use 10A instead of 10Av1 or 10Av2.&lt;/p&gt;  &lt;p&gt;Bus positions are refreshed approximately every &lt;span style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;20 to 30&lt;/span&gt; 7 to 10 seconds.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;BusPositions&lt;/td&gt;  &lt;td&gt; Array containing bus position information (&lt;a href&#x3D; \&quot;#BusPosition\&quot;&gt;BusPositions&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;BusPosition\&quot; name&#x3D;\&quot;BusPosition\&quot;&gt;BusPosition Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DateTime&lt;/td&gt;  &lt;td&gt;Date and time (Eastern Standard Time) of last position update. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:23:40).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Deviation&lt;/td&gt;  &lt;td&gt;Deviation, in minutes, from schedule. Positive values indicate that the bus is running late while negative ones are for buses running ahead of schedule.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText for a customer-friendly description of direction.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the trip, not the bus itself (e.g.: NORTH, SOUTH, EAST, WEST).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Last reported Latitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Last reported Longitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Base route name as shown on the bus. Note that the base route name could also refer to any variant, so a RouteID of 10A could refer to 10A, 10Av1, 10Av2, etc.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripEndTime&lt;/td&gt;  &lt;td&gt;Scheduled end date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:17:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Destination of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripID&lt;/td&gt;  &lt;td&gt;Unique trip ID. This can be correlated with the data returned from the schedule-related methods.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripStartTime&lt;/td&gt;  &lt;td&gt;Scheduled start date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T12:40:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;VehicleID&lt;/td&gt;  &lt;td&gt;Unique identifier for the bus. This is usually visible on the bus itself.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param routeID Bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d6e(String routeID, String lat, String lon, String radius) throws ApiException {
        call5476362a281d830c946a3d6eWithHttpInfo(routeID, lat, lon, radius);
    }

    /**
     * XML - Bus Position
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns bus positions for the given route, with an optional search radius. If no parameters are specified, all bus positions are returned.&lt;/p&gt;  &lt;p&gt;Note that the RouteID parameter accepts only base route names and no variations, i.e.: use 10A instead of 10Av1 or 10Av2.&lt;/p&gt;  &lt;p&gt;Bus positions are refreshed approximately every &lt;span style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;20 to 30&lt;/span&gt; 7 to 10 seconds.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;BusPositions&lt;/td&gt;  &lt;td&gt; Array containing bus position information (&lt;a href&#x3D; \&quot;#BusPosition\&quot;&gt;BusPositions&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;BusPosition\&quot; name&#x3D;\&quot;BusPosition\&quot;&gt;BusPosition Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DateTime&lt;/td&gt;  &lt;td&gt;Date and time (Eastern Standard Time) of last position update. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:23:40).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Deviation&lt;/td&gt;  &lt;td&gt;Deviation, in minutes, from schedule. Positive values indicate that the bus is running late while negative ones are for buses running ahead of schedule.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText for a customer-friendly description of direction.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the trip, not the bus itself (e.g.: NORTH, SOUTH, EAST, WEST).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Last reported Latitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Last reported Longitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Base route name as shown on the bus. Note that the base route name could also refer to any variant, so a RouteID of 10A could refer to 10A, 10Av1, 10Av2, etc.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripEndTime&lt;/td&gt;  &lt;td&gt;Scheduled end date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:17:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Destination of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripID&lt;/td&gt;  &lt;td&gt;Unique trip ID. This can be correlated with the data returned from the schedule-related methods.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripStartTime&lt;/td&gt;  &lt;td&gt;Scheduled start date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T12:40:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;VehicleID&lt;/td&gt;  &lt;td&gt;Unique identifier for the bus. This is usually visible on the bus itself.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param routeID Bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d6eWithHttpInfo(String routeID, String lat, String lon, String radius) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d6eValidateBeforeCall(routeID, lat, lon, radius, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Bus Position (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns bus positions for the given route, with an optional search radius. If no parameters are specified, all bus positions are returned.&lt;/p&gt;  &lt;p&gt;Note that the RouteID parameter accepts only base route names and no variations, i.e.: use 10A instead of 10Av1 or 10Av2.&lt;/p&gt;  &lt;p&gt;Bus positions are refreshed approximately every &lt;span style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;20 to 30&lt;/span&gt; 7 to 10 seconds.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;BusPositions&lt;/td&gt;  &lt;td&gt; Array containing bus position information (&lt;a href&#x3D; \&quot;#BusPosition\&quot;&gt;BusPositions&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;BusPosition\&quot; name&#x3D;\&quot;BusPosition\&quot;&gt;BusPosition Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DateTime&lt;/td&gt;  &lt;td&gt;Date and time (Eastern Standard Time) of last position update. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:23:40).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Deviation&lt;/td&gt;  &lt;td&gt;Deviation, in minutes, from schedule. Positive values indicate that the bus is running late while negative ones are for buses running ahead of schedule.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText for a customer-friendly description of direction.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the trip, not the bus itself (e.g.: NORTH, SOUTH, EAST, WEST).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Last reported Latitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Last reported Longitude of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Base route name as shown on the bus. Note that the base route name could also refer to any variant, so a RouteID of 10A could refer to 10A, 10Av1, 10Av2, etc.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripEndTime&lt;/td&gt;  &lt;td&gt;Scheduled end date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T13:17:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Destination of the bus.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripID&lt;/td&gt;  &lt;td&gt;Unique trip ID. This can be correlated with the data returned from the schedule-related methods.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TripStartTime&lt;/td&gt;  &lt;td&gt;Scheduled start date and time (Eastern Standard Time) of the bus&#39;s current trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.: 2014-10-27T12:40:00).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;VehicleID&lt;/td&gt;  &lt;td&gt;Unique identifier for the bus. This is usually visible on the bus itself.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param routeID Bus route, e.g.: 70, 10A. (optional, default to 70)
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6eAsync(String routeID, String lat, String lon, String radius, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d6eValidateBeforeCall(routeID, lat, lon, radius, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d6f
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6fCall(String routeID, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RouteDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RouteID", routeID));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Date", date));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d6fValidateBeforeCall(String routeID, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeID' is set
        if (routeID == null) {
            throw new ApiException("Missing the required parameter 'routeID' when calling call5476362a281d830c946a3d6f(Async)");
        }

        return call5476362a281d830c946a3d6fCall(routeID, date, _callback);

    }

    /**
     * XML - Path Details
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;For a given date, returns the set of ordered latitude/longitude points along route variant along with the list of stops served.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;  &lt;td&gt;  Structures describing &lt;a href&#x3D;\&quot;#Direction\&quot;&gt;path/stop&lt;/a&gt;information.&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and Direction1 elements, though a few will return NULL for Direction0 or for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to direction, but a different value for the same route signifies that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Bus route variant (e.g.: 10A, 10Av1, etc.).&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Direction\&quot; name&#x3D;\&quot;Direction\&quot;&gt;Direction0/Direction1 Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText element to denote the general direction of the route variant.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the route variant (NORTH, SOUTH, EAST, WEST, LOOP, etc.).&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Shape&lt;/td&gt;  &lt;td&gt;  Array containing shape point information (&lt;a href&#x3D;\&quot;#ShapePoint\&quot;&gt;ShapePoint&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;  &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Descriptive text of where the bus is headed. This is similar, but not necessarily identical, to what is displayed on the bus.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ShapePoint\&quot; name&#x3D;\&quot;ShapePoint\&quot;&gt;ShapePoint Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;  &lt;td&gt;Order of the point in the sequence of ShapePoints.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;   &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Stop name. May be slightly different from what is spoken or displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;  &lt;td&gt;String array of route variants which provide service at this stop. Note that these are not date-specific; any route variant which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;  &lt;td&gt;7-digit regional ID which can be used in various bus-related methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d6f(String routeID, String date) throws ApiException {
        call5476362a281d830c946a3d6fWithHttpInfo(routeID, date);
    }

    /**
     * XML - Path Details
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;For a given date, returns the set of ordered latitude/longitude points along route variant along with the list of stops served.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;  &lt;td&gt;  Structures describing &lt;a href&#x3D;\&quot;#Direction\&quot;&gt;path/stop&lt;/a&gt;information.&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and Direction1 elements, though a few will return NULL for Direction0 or for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to direction, but a different value for the same route signifies that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Bus route variant (e.g.: 10A, 10Av1, etc.).&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Direction\&quot; name&#x3D;\&quot;Direction\&quot;&gt;Direction0/Direction1 Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText element to denote the general direction of the route variant.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the route variant (NORTH, SOUTH, EAST, WEST, LOOP, etc.).&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Shape&lt;/td&gt;  &lt;td&gt;  Array containing shape point information (&lt;a href&#x3D;\&quot;#ShapePoint\&quot;&gt;ShapePoint&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;  &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Descriptive text of where the bus is headed. This is similar, but not necessarily identical, to what is displayed on the bus.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ShapePoint\&quot; name&#x3D;\&quot;ShapePoint\&quot;&gt;ShapePoint Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;  &lt;td&gt;Order of the point in the sequence of ShapePoints.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;   &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Stop name. May be slightly different from what is spoken or displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;  &lt;td&gt;String array of route variants which provide service at this stop. Note that these are not date-specific; any route variant which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;  &lt;td&gt;7-digit regional ID which can be used in various bus-related methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d6fWithHttpInfo(String routeID, String date) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d6fValidateBeforeCall(routeID, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Path Details (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;For a given date, returns the set of ordered latitude/longitude points along route variant along with the list of stops served.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;  &lt;td&gt;  Structures describing &lt;a href&#x3D;\&quot;#Direction\&quot;&gt;path/stop&lt;/a&gt;information.&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and Direction1 elements, though a few will return NULL for Direction0 or for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to direction, but a different value for the same route signifies that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;  &lt;td&gt;Bus route variant (e.g.: 10A, 10Av1, etc.).&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Direction\&quot; name&#x3D;\&quot;Direction\&quot;&gt;Direction0/Direction1 Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;  &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the DirectionText element to denote the general direction of the route variant.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;DirectionText&lt;/td&gt;  &lt;td&gt;General direction of the route variant (NORTH, SOUTH, EAST, WEST, LOOP, etc.).&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Shape&lt;/td&gt;  &lt;td&gt;  Array containing shape point information (&lt;a href&#x3D;\&quot;#ShapePoint\&quot;&gt;ShapePoint&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;  &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;  &lt;td&gt;Descriptive text of where the bus is headed. This is similar, but not necessarily identical, to what is displayed on the bus.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ShapePoint\&quot; name&#x3D;\&quot;ShapePoint\&quot;&gt;ShapePoint Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;  &lt;td&gt;Order of the point in the sequence of ShapePoints.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;   &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Stop name. May be slightly different from what is spoken or displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;  &lt;td&gt;String array of route variants which provide service at this stop. Note that these are not date-specific; any route variant which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;  &lt;td&gt;7-digit regional ID which can be used in various bus-related methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve route and stop information.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d6fAsync(String routeID, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d6fValidateBeforeCall(routeID, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d70
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d70Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Routes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d70ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return call5476362a281d830c946a3d70Call(_callback);

    }

    /**
     * XML - Routes
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of all bus route variants (patterns). For example, the 10A  and 10Av1 are the same route, but may stop at slightly different locations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;  Array containing route variant information (&lt;a href&#x3D;  \&quot;#Route\&quot;&gt;Route&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Route\&quot; name&#x3D;\&quot;Route\&quot;&gt;Route Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name of the route variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Unique identifier for a given route variant. Can be used in  various other bus-related methods.&lt;/td&gt;  &lt;/tr&gt;      &lt;tr&gt;  &lt;td&gt;LineDescription&lt;/td&gt;    &lt;td&gt;Denotes the route variant’s grouping – lines are a combination of routes which lie in the same corridor and which have significant portions of their paths along the same roadways.&lt;/td&gt;  &lt;/tr&gt;   &lt;/tbody&gt;  &lt;/table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d70() throws ApiException {
        call5476362a281d830c946a3d70WithHttpInfo();
    }

    /**
     * XML - Routes
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of all bus route variants (patterns). For example, the 10A  and 10Av1 are the same route, but may stop at slightly different locations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;  Array containing route variant information (&lt;a href&#x3D;  \&quot;#Route\&quot;&gt;Route&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Route\&quot; name&#x3D;\&quot;Route\&quot;&gt;Route Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name of the route variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Unique identifier for a given route variant. Can be used in  various other bus-related methods.&lt;/td&gt;  &lt;/tr&gt;      &lt;tr&gt;  &lt;td&gt;LineDescription&lt;/td&gt;    &lt;td&gt;Denotes the route variant’s grouping – lines are a combination of routes which lie in the same corridor and which have significant portions of their paths along the same roadways.&lt;/td&gt;  &lt;/tr&gt;   &lt;/tbody&gt;  &lt;/table&gt;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d70WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d70ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Routes (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of all bus route variants (patterns). For example, the 10A  and 10Av1 are the same route, but may stop at slightly different locations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;  Array containing route variant information (&lt;a href&#x3D;  \&quot;#Route\&quot;&gt;Route&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Route\&quot; name&#x3D;\&quot;Route\&quot;&gt;Route Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name of the route variant.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Unique identifier for a given route variant. Can be used in  various other bus-related methods.&lt;/td&gt;  &lt;/tr&gt;      &lt;tr&gt;  &lt;td&gt;LineDescription&lt;/td&gt;    &lt;td&gt;Denotes the route variant’s grouping – lines are a combination of routes which lie in the same corridor and which have significant portions of their paths along the same roadways.&lt;/td&gt;  &lt;/tr&gt;   &lt;/tbody&gt;  &lt;/table&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d70Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d70ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d71
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations.  For example, if B30 is specified, include all variations such as B30v1, B30v2, etc. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d71Call(String routeID, String date, Boolean includingVariations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RouteSchedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RouteID", routeID));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Date", date));
        }

        if (includingVariations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludingVariations", includingVariations));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d71ValidateBeforeCall(String routeID, String date, Boolean includingVariations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routeID' is set
        if (routeID == null) {
            throw new ApiException("Missing the required parameter 'routeID' when calling call5476362a281d830c946a3d71(Async)");
        }

        return call5476362a281d830c946a3d71Call(routeID, date, includingVariations, _callback);

    }

    /**
     * XML - Schedule
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns schedules for a given route variant for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Arrays containing trip information (&lt;a href&#x3D;  \&quot;#Trip\&quot;&gt;Trip&lt;/a&gt;).&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few (especially ones which run in  a loop, such as the U8) will return content only for Direction0  and NULL content for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Trip\&quot; name&#x3D;\&quot;Trip\&quot;&gt;Trip Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  TripDirectionText element to denote the general direction of the  trip.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant. This can be used in several other bus  methods which accept variants.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopTimes&lt;/td&gt;    &lt;td&gt;  Array containing location and time information (&lt;a href&#x3D;  \&quot;#StopTime\&quot;&gt;StopTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (NORTH, SOUTH, EAST, WEST, LOOP,  etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Unique trip ID. This can be correlated with the data returned  from the schedule-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StopTime\&quot; name&#x3D;\&quot;StopTime\&quot;&gt;StopTime Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopSeq&lt;/td&gt;    &lt;td&gt;Order of the stop in the sequence of StopTimes.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Scheduled departure date and time (Eastern Standard Time) from  this stop. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations.  For example, if B30 is specified, include all variations such as B30v1, B30v2, etc. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d71(String routeID, String date, Boolean includingVariations) throws ApiException {
        call5476362a281d830c946a3d71WithHttpInfo(routeID, date, includingVariations);
    }

    /**
     * XML - Schedule
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns schedules for a given route variant for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Arrays containing trip information (&lt;a href&#x3D;  \&quot;#Trip\&quot;&gt;Trip&lt;/a&gt;).&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few (especially ones which run in  a loop, such as the U8) will return content only for Direction0  and NULL content for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Trip\&quot; name&#x3D;\&quot;Trip\&quot;&gt;Trip Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  TripDirectionText element to denote the general direction of the  trip.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant. This can be used in several other bus  methods which accept variants.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopTimes&lt;/td&gt;    &lt;td&gt;  Array containing location and time information (&lt;a href&#x3D;  \&quot;#StopTime\&quot;&gt;StopTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (NORTH, SOUTH, EAST, WEST, LOOP,  etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Unique trip ID. This can be correlated with the data returned  from the schedule-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StopTime\&quot; name&#x3D;\&quot;StopTime\&quot;&gt;StopTime Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopSeq&lt;/td&gt;    &lt;td&gt;Order of the stop in the sequence of StopTimes.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Scheduled departure date and time (Eastern Standard Time) from  this stop. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations.  For example, if B30 is specified, include all variations such as B30v1, B30v2, etc. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d71WithHttpInfo(String routeID, String date, Boolean includingVariations) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d71ValidateBeforeCall(routeID, date, includingVariations, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Schedule (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns schedules for a given route variant for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Direction0/Direction1&lt;/td&gt;    &lt;td&gt;  Arrays containing trip information (&lt;a href&#x3D;  \&quot;#Trip\&quot;&gt;Trip&lt;/a&gt;).&lt;br&gt;  &lt;br&gt;  Most routes will return content in both Direction0 and  Direction1 elements, though a few (especially ones which run in  a loop, such as the U8) will return content only for Direction0  and NULL content for Direction1.&lt;br&gt;  &lt;br&gt;  0 or 1 are binary properties. There is no specific mapping to  direction, but a different value for the same route signifies  that the route is in an opposite direction.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Descriptive name for the route.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Trip\&quot; name&#x3D;\&quot;Trip\&quot;&gt;Trip Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt; Use the  TripDirectionText element to denote the general direction of the  trip.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant. This can be used in several other bus  methods which accept variants.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopTimes&lt;/td&gt;    &lt;td&gt;  Array containing location and time information (&lt;a href&#x3D;  \&quot;#StopTime\&quot;&gt;StopTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (NORTH, SOUTH, EAST, WEST, LOOP,  etc.).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Descriptive text of where the bus is headed. This is similar,  but not necessarily identical, to what is displayed on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Unique trip ID. This can be correlated with the data returned  from the schedule-related methods.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StopTime\&quot; name&#x3D;\&quot;StopTime\&quot;&gt;StopTime Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopName&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopSeq&lt;/td&gt;    &lt;td&gt;Order of the stop in the sequence of StopTimes.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Scheduled departure date and time (Eastern Standard Time) from  this stop. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param routeID Bus route variant, e.g.: 70, 10A, 10Av1. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param includingVariations Whether or not to include variations.  For example, if B30 is specified, include all variations such as B30v1, B30v2, etc. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d71Async(String routeID, String date, Boolean includingVariations, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d71ValidateBeforeCall(routeID, date, includingVariations, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d72
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d72Call(String stopID, String date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StopSchedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stopID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StopID", stopID));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Date", date));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d72ValidateBeforeCall(String stopID, String date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stopID' is set
        if (stopID == null) {
            throw new ApiException("Missing the required parameter 'stopID' when calling call5476362a281d830c946a3d72(Async)");
        }

        return call5476362a281d830c946a3d72Call(stopID, date, _callback);

    }

    /**
     * XML - Schedule at Stop
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of buses scheduled at a stop for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;ScheduleArrivals&lt;/td&gt;    &lt;td&gt;  Array containing scheduled arrival information (&lt;a href&#x3D;  \&quot;#ScheduleArrival\&quot;&gt;ScheduleArrival&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stop&lt;/td&gt;    &lt;td&gt;  Structure describing &lt;a href&#x3D;\&quot;#Stop\&quot;&gt;stop&lt;/a&gt; information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ScheduleArrival\&quot; name&#x3D;  \&quot;ScheduleArrival\&quot;&gt;ScheduleArrival Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the TripDirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant identifier (pattern). This variant can be  used in several other bus methods which accept variants. Note that  customers will never see anything other than the base route name,  so variants 10A, 10Av1, 10Av2, etc. will be displayed as 10A on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;ScheduleTime&lt;/td&gt;    &lt;td&gt;Date and time (Eastern Standard Time) when the bus is scheduled  to stop at this location. Will be in YYYY-MM-DDTHH:mm:ss format  (e.g.: 2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (e.g.: NORTH, SOUTH, EAST,  WEST).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d72(String stopID, String date) throws ApiException {
        call5476362a281d830c946a3d72WithHttpInfo(stopID, date);
    }

    /**
     * XML - Schedule at Stop
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of buses scheduled at a stop for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;ScheduleArrivals&lt;/td&gt;    &lt;td&gt;  Array containing scheduled arrival information (&lt;a href&#x3D;  \&quot;#ScheduleArrival\&quot;&gt;ScheduleArrival&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stop&lt;/td&gt;    &lt;td&gt;  Structure describing &lt;a href&#x3D;\&quot;#Stop\&quot;&gt;stop&lt;/a&gt; information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ScheduleArrival\&quot; name&#x3D;  \&quot;ScheduleArrival\&quot;&gt;ScheduleArrival Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the TripDirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant identifier (pattern). This variant can be  used in several other bus methods which accept variants. Note that  customers will never see anything other than the base route name,  so variants 10A, 10Av1, 10Av2, etc. will be displayed as 10A on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;ScheduleTime&lt;/td&gt;    &lt;td&gt;Date and time (Eastern Standard Time) when the bus is scheduled  to stop at this location. Will be in YYYY-MM-DDTHH:mm:ss format  (e.g.: 2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (e.g.: NORTH, SOUTH, EAST,  WEST).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d72WithHttpInfo(String stopID, String date) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d72ValidateBeforeCall(stopID, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Schedule at Stop (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of buses scheduled at a stop for a given date.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;ScheduleArrivals&lt;/td&gt;    &lt;td&gt;  Array containing scheduled arrival information (&lt;a href&#x3D;  \&quot;#ScheduleArrival\&quot;&gt;ScheduleArrival&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Stop&lt;/td&gt;    &lt;td&gt;  Structure describing &lt;a href&#x3D;\&quot;#Stop\&quot;&gt;stop&lt;/a&gt; information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;ScheduleArrival\&quot; name&#x3D;  \&quot;ScheduleArrival\&quot;&gt;ScheduleArrival Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DirectionNum&lt;/td&gt;    &lt;td&gt;Denotes a binary direction (0 or 1) of the bus. There is no  specific mapping to direction, but a different value for the same  route signifies that the buses are traveling in opposite  directions. Use the TripDirectionText element to show the actual  destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndTime&lt;/td&gt;    &lt;td&gt;Scheduled end date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;RouteID&lt;/td&gt;    &lt;td&gt;Bus route variant identifier (pattern). This variant can be  used in several other bus methods which accept variants. Note that  customers will never see anything other than the base route name,  so variants 10A, 10Av1, 10Av2, etc. will be displayed as 10A on the  bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;ScheduleTime&lt;/td&gt;    &lt;td&gt;Date and time (Eastern Standard Time) when the bus is scheduled  to stop at this location. Will be in YYYY-MM-DDTHH:mm:ss format  (e.g.: 2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartTime&lt;/td&gt;    &lt;td&gt;Scheduled start date and time (Eastern Standard Time) for this  trip. Will be in YYYY-MM-DDTHH:mm:ss format (e.g.:  2014-10-27T13:17:00).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripDirectionText&lt;/td&gt;    &lt;td&gt;General direction of the trip (e.g.: NORTH, SOUTH, EAST,  WEST).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripHeadsign&lt;/td&gt;    &lt;td&gt;Destination of the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;TripID&lt;/td&gt;    &lt;td&gt;Trip identifier. This can be correlated with the data in our  bus schedule information as well as bus positions.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stopID 7-digit regional stop ID. (required)
     * @param date Date in YYYY-MM-DD format for which to retrieve schedule.  Defaults to today&#39;s date unless specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d72Async(String stopID, String date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d72ValidateBeforeCall(stopID, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476362a281d830c946a3d73
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (feet) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d73Call(String lat, String lon, String radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Stops";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Radius", radius));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476362a281d830c946a3d73ValidateBeforeCall(String lat, String lon, String radius, final ApiCallback _callback) throws ApiException {
        return call5476362a281d830c946a3d73Call(lat, lon, radius, _callback);

    }

    /**
     * XML - Stop Search
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby bus stops based on latitude, longitude, and radius.  Omit all parameters to retrieve a list of all stops.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (feet) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476362a281d830c946a3d73(String lat, String lon, String radius) throws ApiException {
        call5476362a281d830c946a3d73WithHttpInfo(lat, lon, radius);
    }

    /**
     * XML - Stop Search
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby bus stops based on latitude, longitude, and radius.  Omit all parameters to retrieve a list of all stops.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (feet) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476362a281d830c946a3d73WithHttpInfo(String lat, String lon, String radius) throws ApiException {
        okhttp3.Call localVarCall = call5476362a281d830c946a3d73ValidateBeforeCall(lat, lon, radius, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Stop Search (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby bus stops based on latitude, longitude, and radius.  Omit all parameters to retrieve a list of all stops.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Stops&lt;/td&gt;    &lt;td&gt;  Array containing stop information (&lt;a href&#x3D;\&quot;#Stop\&quot;&gt;Stop&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Stop\&quot; name&#x3D;\&quot;Stop\&quot;&gt;Stop Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Stop name. May be slightly different from what is spoken or  displayed in the bus.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Routes&lt;/td&gt;    &lt;td&gt;String array of route variants which provide service at this  stop. Note that these are not date-specific; any route variant  which stops at this stop on any day will be listed.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StopID&lt;/td&gt;    &lt;td&gt;7-digit regional ID which can be used in various bus-related  methods. If unavailable, the StopID will be 0 or NULL.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional)
     * @param radius Radius (feet) to include in the search area, required if Latitude and Longitude are specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476362a281d830c946a3d73Async(String lat, String lon, String radius, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476362a281d830c946a3d73ValidateBeforeCall(lat, lon, radius, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
