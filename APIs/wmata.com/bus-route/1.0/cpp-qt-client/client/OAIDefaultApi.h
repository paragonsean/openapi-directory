/**
 * Bus Route and Stop Methods
 * Bus stop information, route and schedule data, and bus positions.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  route_id QString [optional]
    * @param[in]  lat double [optional]
    * @param[in]  lon double [optional]
    * @param[in]  radius double [optional]
    */
    virtual void 5476362a281d830c946a3d68(const ::OpenAPI::OptionalParam<QString> &route_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  route_id QString [required]
    * @param[in]  date QString [optional]
    */
    virtual void 5476362a281d830c946a3d69(const QString &route_id, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());


    virtual void 5476362a281d830c946a3d6a();

    /**
    * @param[in]  route_id QString [required]
    * @param[in]  date QString [optional]
    * @param[in]  including_variations bool [optional]
    */
    virtual void 5476362a281d830c946a3d6b(const QString &route_id, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &including_variations = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  stop_id QString [required]
    * @param[in]  date QString [optional]
    */
    virtual void 5476362a281d830c946a3d6c(const QString &stop_id, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat double [optional]
    * @param[in]  lon double [optional]
    * @param[in]  radius double [optional]
    */
    virtual void 5476362a281d830c946a3d6d(const ::OpenAPI::OptionalParam<double> &lat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &lon = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &radius = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  route_id QString [optional]
    * @param[in]  lat QString [optional]
    * @param[in]  lon QString [optional]
    * @param[in]  radius QString [optional]
    */
    virtual void 5476362a281d830c946a3d6e(const ::OpenAPI::OptionalParam<QString> &route_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &radius = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  route_id QString [required]
    * @param[in]  date QString [optional]
    */
    virtual void 5476362a281d830c946a3d6f(const QString &route_id, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());


    virtual void 5476362a281d830c946a3d70();

    /**
    * @param[in]  route_id QString [required]
    * @param[in]  date QString [optional]
    * @param[in]  including_variations bool [optional]
    */
    virtual void 5476362a281d830c946a3d71(const QString &route_id, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &including_variations = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  stop_id QString [required]
    * @param[in]  date QString [optional]
    */
    virtual void 5476362a281d830c946a3d72(const QString &stop_id, const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lat QString [optional]
    * @param[in]  lon QString [optional]
    * @param[in]  radius QString [optional]
    */
    virtual void 5476362a281d830c946a3d73(const ::OpenAPI::OptionalParam<QString> &lat = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lon = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &radius = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void 5476362a281d830c946a3d68Callback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d69Callback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6aCallback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6bCallback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6cCallback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6dCallback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6eCallback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6fCallback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d70Callback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d71Callback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d72Callback(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d73Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void 5476362a281d830c946a3d68Signal();
    void 5476362a281d830c946a3d69Signal();
    void 5476362a281d830c946a3d6aSignal();
    void 5476362a281d830c946a3d6bSignal();
    void 5476362a281d830c946a3d6cSignal();
    void 5476362a281d830c946a3d6dSignal();
    void 5476362a281d830c946a3d6eSignal();
    void 5476362a281d830c946a3d6fSignal();
    void 5476362a281d830c946a3d70Signal();
    void 5476362a281d830c946a3d71Signal();
    void 5476362a281d830c946a3d72Signal();
    void 5476362a281d830c946a3d73Signal();


    void 5476362a281d830c946a3d68SignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d69SignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6aSignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6bSignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6cSignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6dSignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6eSignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d6fSignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d70SignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d71SignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d72SignalFull(OAIHttpRequestWorker *worker);
    void 5476362a281d830c946a3d73SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d68SignalError() instead")
    void 5476362a281d830c946a3d68SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d68SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d69SignalError() instead")
    void 5476362a281d830c946a3d69SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d69SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6aSignalError() instead")
    void 5476362a281d830c946a3d6aSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6aSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6bSignalError() instead")
    void 5476362a281d830c946a3d6bSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6bSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6cSignalError() instead")
    void 5476362a281d830c946a3d6cSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6cSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6dSignalError() instead")
    void 5476362a281d830c946a3d6dSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6dSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6eSignalError() instead")
    void 5476362a281d830c946a3d6eSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6eSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6fSignalError() instead")
    void 5476362a281d830c946a3d6fSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6fSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d70SignalError() instead")
    void 5476362a281d830c946a3d70SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d70SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d71SignalError() instead")
    void 5476362a281d830c946a3d71SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d71SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d72SignalError() instead")
    void 5476362a281d830c946a3d72SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d72SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d73SignalError() instead")
    void 5476362a281d830c946a3d73SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d73SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d68SignalErrorFull() instead")
    void 5476362a281d830c946a3d68SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d68SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d69SignalErrorFull() instead")
    void 5476362a281d830c946a3d69SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d69SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6aSignalErrorFull() instead")
    void 5476362a281d830c946a3d6aSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6aSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6bSignalErrorFull() instead")
    void 5476362a281d830c946a3d6bSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6bSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6cSignalErrorFull() instead")
    void 5476362a281d830c946a3d6cSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6cSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6dSignalErrorFull() instead")
    void 5476362a281d830c946a3d6dSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6dSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6eSignalErrorFull() instead")
    void 5476362a281d830c946a3d6eSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6eSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d6fSignalErrorFull() instead")
    void 5476362a281d830c946a3d6fSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d6fSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d70SignalErrorFull() instead")
    void 5476362a281d830c946a3d70SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d70SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d71SignalErrorFull() instead")
    void 5476362a281d830c946a3d71SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d71SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d72SignalErrorFull() instead")
    void 5476362a281d830c946a3d72SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d72SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use 5476362a281d830c946a3d73SignalErrorFull() instead")
    void 5476362a281d830c946a3d73SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void 5476362a281d830c946a3d73SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
