/*
 * Rail Station Information
 * Rail line and station information, including locations, fares, times, and parking.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for call5476364f031f5909e4fe330c
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330cCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jLines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe330cValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe330cCall(_callback);

    }

    /**
     * JSON - Lines
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns information about all rail lines.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Lines&lt;/td&gt;    &lt;td&gt;  Array containing line information (&lt;a href&#x3D;\&quot;#Line\&quot;&gt;Line&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Line\&quot; name&#x3D;\&quot;Line\&quot;&gt;Line Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DisplayName&lt;/td&gt;    &lt;td&gt;Full name of line color.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndStationCode&lt;/td&gt;    &lt;td&gt;End station code. For example, will be E10 (Greenbelt) for the  Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination1&lt;/td&gt;    &lt;td&gt;Intermediate terminal station code. During normal service, some  trains on some lines might end their trip prior to the  StartStationCode or EndStationCode. A good example is on the Red  Line where some trains stop at A11 (Grosvenor) or B08 (Silver  Spring). Empty string if not defined.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination2&lt;/td&gt;    &lt;td&gt;Similar to InternalDestination1.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartStationCode&lt;/td&gt;    &lt;td&gt;Start station code. For example, will be F11 (Branch Avenue)  for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use  this value in other rail-related APIs to retrieve data about a  station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe330c() throws ApiException {
        call5476364f031f5909e4fe330cWithHttpInfo();
    }

    /**
     * JSON - Lines
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns information about all rail lines.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Lines&lt;/td&gt;    &lt;td&gt;  Array containing line information (&lt;a href&#x3D;\&quot;#Line\&quot;&gt;Line&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Line\&quot; name&#x3D;\&quot;Line\&quot;&gt;Line Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DisplayName&lt;/td&gt;    &lt;td&gt;Full name of line color.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndStationCode&lt;/td&gt;    &lt;td&gt;End station code. For example, will be E10 (Greenbelt) for the  Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination1&lt;/td&gt;    &lt;td&gt;Intermediate terminal station code. During normal service, some  trains on some lines might end their trip prior to the  StartStationCode or EndStationCode. A good example is on the Red  Line where some trains stop at A11 (Grosvenor) or B08 (Silver  Spring). Empty string if not defined.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination2&lt;/td&gt;    &lt;td&gt;Similar to InternalDestination1.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartStationCode&lt;/td&gt;    &lt;td&gt;Start station code. For example, will be F11 (Branch Avenue)  for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use  this value in other rail-related APIs to retrieve data about a  station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe330cWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe330cValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Lines (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns information about all rail lines.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Lines&lt;/td&gt;    &lt;td&gt;  Array containing line information (&lt;a href&#x3D;\&quot;#Line\&quot;&gt;Line&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Line\&quot; name&#x3D;\&quot;Line\&quot;&gt;Line Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DisplayName&lt;/td&gt;    &lt;td&gt;Full name of line color.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndStationCode&lt;/td&gt;    &lt;td&gt;End station code. For example, will be E10 (Greenbelt) for the  Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination1&lt;/td&gt;    &lt;td&gt;Intermediate terminal station code. During normal service, some  trains on some lines might end their trip prior to the  StartStationCode or EndStationCode. A good example is on the Red  Line where some trains stop at A11 (Grosvenor) or B08 (Silver  Spring). Empty string if not defined.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination2&lt;/td&gt;    &lt;td&gt;Similar to InternalDestination1.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartStationCode&lt;/td&gt;    &lt;td&gt;Start station code. For example, will be F11 (Branch Avenue)  for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use  this value in other rail-related APIs to retrieve data about a  station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330cAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe330cValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe330d
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330dCall(String stationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jStationParking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StationCode", stationCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe330dValidateBeforeCall(String stationCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe330dCall(stationCode, _callback);

    }

    /**
     * JSON - Parking Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns parking information at a station based on a given StationCode. Omit the StationCode to return parking information for all stations.&lt;/p&gt;  &lt;p&gt;If a station has no parking, the StationsParking element will contain no child elements.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationsParking&lt;/td&gt;  &lt;td&gt; Array containing station parking information (&lt;a href&#x3D; \&quot;#StationParking\&quot;&gt;StationParking&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationParking\&quot; name&#x3D;\&quot;StationParking\&quot;&gt;StationParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Useful when returning parking information for all stations. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;When not NULL, provides additional parking resources such as nearby lots.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;AllDayParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#AllDayParking\&quot;&gt;all-day parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;ShortTermParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#ShortTermParking\&quot;&gt;short-term parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;AllDayParking\&quot; name&#x3D;\&quot;AllDayParking\&quot;&gt;AllDayParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of all-day parking spots available at a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for Metro riders. NULL when no all-day spots are available. For most stations, this value is identical to the NonRiderCost.&lt;br&gt; &lt;br&gt; For cases where the NonRiderCost is different, the lower cost per day requires a valid rail trip using a SmarTrip&amp;reg; card originating from a station other than the one where the patron parked. To receive this lower rate, patrons must pay for their parking with the same SmarTrip&amp;reg; card used to enter/exit Metrorail, and must exit the parking lot within two hours of exiting Metrorail.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;NonRiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for non-Metro riders. NULL when no all-day spots are available.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;ShortTermParking\&quot; name&#x3D; \&quot;ShortTermParking\&quot;&gt;ShortTermParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayRiderCost&lt;/td&gt;  &lt;td&gt;Similar to RiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayNonRiderCost&lt;/td&gt;  &lt;td&gt;Similar to NonRiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of short-term parking spots available at a station (parking meters).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;Misc. information relating to short-term parking. NULL when no short-term spots are available.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe330d(String stationCode) throws ApiException {
        call5476364f031f5909e4fe330dWithHttpInfo(stationCode);
    }

    /**
     * JSON - Parking Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns parking information at a station based on a given StationCode. Omit the StationCode to return parking information for all stations.&lt;/p&gt;  &lt;p&gt;If a station has no parking, the StationsParking element will contain no child elements.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationsParking&lt;/td&gt;  &lt;td&gt; Array containing station parking information (&lt;a href&#x3D; \&quot;#StationParking\&quot;&gt;StationParking&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationParking\&quot; name&#x3D;\&quot;StationParking\&quot;&gt;StationParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Useful when returning parking information for all stations. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;When not NULL, provides additional parking resources such as nearby lots.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;AllDayParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#AllDayParking\&quot;&gt;all-day parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;ShortTermParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#ShortTermParking\&quot;&gt;short-term parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;AllDayParking\&quot; name&#x3D;\&quot;AllDayParking\&quot;&gt;AllDayParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of all-day parking spots available at a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for Metro riders. NULL when no all-day spots are available. For most stations, this value is identical to the NonRiderCost.&lt;br&gt; &lt;br&gt; For cases where the NonRiderCost is different, the lower cost per day requires a valid rail trip using a SmarTrip&amp;reg; card originating from a station other than the one where the patron parked. To receive this lower rate, patrons must pay for their parking with the same SmarTrip&amp;reg; card used to enter/exit Metrorail, and must exit the parking lot within two hours of exiting Metrorail.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;NonRiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for non-Metro riders. NULL when no all-day spots are available.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;ShortTermParking\&quot; name&#x3D; \&quot;ShortTermParking\&quot;&gt;ShortTermParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayRiderCost&lt;/td&gt;  &lt;td&gt;Similar to RiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayNonRiderCost&lt;/td&gt;  &lt;td&gt;Similar to NonRiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of short-term parking spots available at a station (parking meters).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;Misc. information relating to short-term parking. NULL when no short-term spots are available.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe330dWithHttpInfo(String stationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe330dValidateBeforeCall(stationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Parking Information (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns parking information at a station based on a given StationCode. Omit the StationCode to return parking information for all stations.&lt;/p&gt;  &lt;p&gt;If a station has no parking, the StationsParking element will contain no child elements.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationsParking&lt;/td&gt;  &lt;td&gt; Array containing station parking information (&lt;a href&#x3D; \&quot;#StationParking\&quot;&gt;StationParking&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationParking\&quot; name&#x3D;\&quot;StationParking\&quot;&gt;StationParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Useful when returning parking information for all stations. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;When not NULL, provides additional parking resources such as nearby lots.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;AllDayParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#AllDayParking\&quot;&gt;all-day parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;ShortTermParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#ShortTermParking\&quot;&gt;short-term parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;AllDayParking\&quot; name&#x3D;\&quot;AllDayParking\&quot;&gt;AllDayParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of all-day parking spots available at a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for Metro riders. NULL when no all-day spots are available. For most stations, this value is identical to the NonRiderCost.&lt;br&gt; &lt;br&gt; For cases where the NonRiderCost is different, the lower cost per day requires a valid rail trip using a SmarTrip&amp;reg; card originating from a station other than the one where the patron parked. To receive this lower rate, patrons must pay for their parking with the same SmarTrip&amp;reg; card used to enter/exit Metrorail, and must exit the parking lot within two hours of exiting Metrorail.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;NonRiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for non-Metro riders. NULL when no all-day spots are available.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;ShortTermParking\&quot; name&#x3D; \&quot;ShortTermParking\&quot;&gt;ShortTermParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayRiderCost&lt;/td&gt;  &lt;td&gt;Similar to RiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayNonRiderCost&lt;/td&gt;  &lt;td&gt;Similar to NonRiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of short-term parking spots available at a station (parking meters).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;Misc. information relating to short-term parking. NULL when no short-term spots are available.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330dAsync(String stationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe330dValidateBeforeCall(stationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe330e
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330eCall(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jPath";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FromStationCode", fromStationCode));
        }

        if (toStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ToStationCode", toStationCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe330eValidateBeforeCall(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromStationCode' is set
        if (fromStationCode == null) {
            throw new ApiException("Missing the required parameter 'fromStationCode' when calling call5476364f031f5909e4fe330e(Async)");
        }

        // verify the required parameter 'toStationCode' is set
        if (toStationCode == null) {
            throw new ApiException("Missing the required parameter 'toStationCode' when calling call5476364f031f5909e4fe330e(Async)");
        }

        return call5476364f031f5909e4fe330eCall(fromStationCode, toStationCode, _callback);

    }

    /**
     * JSON - Path Between Stations
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of ordered stations and distances between two stations on the  &lt;em&gt;same line&lt;/em&gt;.&lt;/p&gt;    &lt;p&gt;Note that this method is not suitable on its own as a pathfinding solution  between stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Path&lt;/td&gt;    &lt;td&gt;  Array containing path details (&lt;a href&#x3D;  \&quot;#MetroPathItem\&quot;&gt;MetroPathItem&lt;/a&gt;)  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;MetroPathItem\&quot; name&#x3D;\&quot;MetroPathItem\&quot;&gt;MetroPathItem  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DistanceToPrev&lt;/td&gt;    &lt;td&gt;Distance in feet to the previous station in the list.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV) this station&#39;s platform is on.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Ordered sequence number.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name for this station, as shown on the WMATA website.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe330e(String fromStationCode, String toStationCode) throws ApiException {
        call5476364f031f5909e4fe330eWithHttpInfo(fromStationCode, toStationCode);
    }

    /**
     * JSON - Path Between Stations
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of ordered stations and distances between two stations on the  &lt;em&gt;same line&lt;/em&gt;.&lt;/p&gt;    &lt;p&gt;Note that this method is not suitable on its own as a pathfinding solution  between stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Path&lt;/td&gt;    &lt;td&gt;  Array containing path details (&lt;a href&#x3D;  \&quot;#MetroPathItem\&quot;&gt;MetroPathItem&lt;/a&gt;)  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;MetroPathItem\&quot; name&#x3D;\&quot;MetroPathItem\&quot;&gt;MetroPathItem  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DistanceToPrev&lt;/td&gt;    &lt;td&gt;Distance in feet to the previous station in the list.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV) this station&#39;s platform is on.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Ordered sequence number.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name for this station, as shown on the WMATA website.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe330eWithHttpInfo(String fromStationCode, String toStationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe330eValidateBeforeCall(fromStationCode, toStationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Path Between Stations (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of ordered stations and distances between two stations on the  &lt;em&gt;same line&lt;/em&gt;.&lt;/p&gt;    &lt;p&gt;Note that this method is not suitable on its own as a pathfinding solution  between stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Path&lt;/td&gt;    &lt;td&gt;  Array containing path details (&lt;a href&#x3D;  \&quot;#MetroPathItem\&quot;&gt;MetroPathItem&lt;/a&gt;)  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;MetroPathItem\&quot; name&#x3D;\&quot;MetroPathItem\&quot;&gt;MetroPathItem  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DistanceToPrev&lt;/td&gt;    &lt;td&gt;Distance in feet to the previous station in the list.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV) this station&#39;s platform is on.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Ordered sequence number.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name for this station, as shown on the WMATA website.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330eAsync(String fromStationCode, String toStationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe330eValidateBeforeCall(fromStationCode, toStationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe330f
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330fCall(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jStationEntrances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Radius", radius));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe330fValidateBeforeCall(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe330fCall(lat, lon, radius, _callback);

    }

    /**
     * JSON - Station Entrances
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby station entrances based on latitude, longitude, and  radius (meters). Omit search parameters to return all station entrances.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Entrances&lt;/td&gt;    &lt;td&gt;  Array containing detailed information about station entrances  (&lt;a href&#x3D;\&quot;#StationEntrance\&quot;&gt;StationEntrance&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationEntrance\&quot; name&#x3D;  \&quot;StationEntrance\&quot;&gt;StationEntrance Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Description&lt;/td&gt;    &lt;td&gt;Additional information for the entrance, if available.  Currently available data usually shows the same value as the Name  element.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;ID&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt;&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Name of the entrance (usually the station name and nearest  intersection).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode1&lt;/td&gt;    &lt;td&gt;The station code associated with this entrance. Use this value  in other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode2&lt;/td&gt;    &lt;td&gt;For stations containing multiple platforms (e.g.: Gallery  Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the other  station code.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe330f(BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        call5476364f031f5909e4fe330fWithHttpInfo(lat, lon, radius);
    }

    /**
     * JSON - Station Entrances
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby station entrances based on latitude, longitude, and  radius (meters). Omit search parameters to return all station entrances.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Entrances&lt;/td&gt;    &lt;td&gt;  Array containing detailed information about station entrances  (&lt;a href&#x3D;\&quot;#StationEntrance\&quot;&gt;StationEntrance&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationEntrance\&quot; name&#x3D;  \&quot;StationEntrance\&quot;&gt;StationEntrance Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Description&lt;/td&gt;    &lt;td&gt;Additional information for the entrance, if available.  Currently available data usually shows the same value as the Name  element.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;ID&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt;&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Name of the entrance (usually the station name and nearest  intersection).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode1&lt;/td&gt;    &lt;td&gt;The station code associated with this entrance. Use this value  in other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode2&lt;/td&gt;    &lt;td&gt;For stations containing multiple platforms (e.g.: Gallery  Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the other  station code.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe330fWithHttpInfo(BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe330fValidateBeforeCall(lat, lon, radius, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Station Entrances (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby station entrances based on latitude, longitude, and  radius (meters). Omit search parameters to return all station entrances.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Entrances&lt;/td&gt;    &lt;td&gt;  Array containing detailed information about station entrances  (&lt;a href&#x3D;\&quot;#StationEntrance\&quot;&gt;StationEntrance&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationEntrance\&quot; name&#x3D;  \&quot;StationEntrance\&quot;&gt;StationEntrance Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Description&lt;/td&gt;    &lt;td&gt;Additional information for the entrance, if available.  Currently available data usually shows the same value as the Name  element.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;ID&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt;&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Name of the entrance (usually the station name and nearest  intersection).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode1&lt;/td&gt;    &lt;td&gt;The station code associated with this entrance. Use this value  in other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode2&lt;/td&gt;    &lt;td&gt;For stations containing multiple platforms (e.g.: Gallery  Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the other  station code.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe330fAsync(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe330fValidateBeforeCall(lat, lon, radius, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3310
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3310Call(String stationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jStationInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StationCode", stationCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3310ValidateBeforeCall(String stationCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationCode' is set
        if (stationCode == null) {
            throw new ApiException("Missing the required parameter 'stationCode' when calling call5476364f031f5909e4fe3310(Async)");
        }

        return call5476364f031f5909e4fe3310Call(stationCode, _callback);

    }

    /**
     * JSON - Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns station location and address information based on a given StationCode.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3310(String stationCode) throws ApiException {
        call5476364f031f5909e4fe3310WithHttpInfo(stationCode);
    }

    /**
     * JSON - Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns station location and address information based on a given StationCode.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3310WithHttpInfo(String stationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3310ValidateBeforeCall(stationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Station Information (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns station location and address information based on a given StationCode.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3310Async(String stationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3310ValidateBeforeCall(stationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3311
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3311Call(String lineCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jStations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lineCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LineCode", lineCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3311ValidateBeforeCall(String lineCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe3311Call(lineCode, _callback);

    }

    /**
     * JSON - Station List
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a list of station location and address information based on a given LineCode. Omit the LineCode to return all stations. The response is an array of objects identical to those returned in the Station Information method.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Stations&lt;/td&gt;  &lt;td&gt; Array containing station information (&lt;a href&#x3D; \&quot;#Station\&quot;&gt;Station&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Station\&quot; name&#x3D;\&quot;Station\&quot;&gt;Station Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Address\&quot; name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3311(String lineCode) throws ApiException {
        call5476364f031f5909e4fe3311WithHttpInfo(lineCode);
    }

    /**
     * JSON - Station List
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a list of station location and address information based on a given LineCode. Omit the LineCode to return all stations. The response is an array of objects identical to those returned in the Station Information method.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Stations&lt;/td&gt;  &lt;td&gt; Array containing station information (&lt;a href&#x3D; \&quot;#Station\&quot;&gt;Station&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Station\&quot; name&#x3D;\&quot;Station\&quot;&gt;Station Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Address\&quot; name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3311WithHttpInfo(String lineCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3311ValidateBeforeCall(lineCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Station List (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a list of station location and address information based on a given LineCode. Omit the LineCode to return all stations. The response is an array of objects identical to those returned in the Station Information method.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Stations&lt;/td&gt;  &lt;td&gt; Array containing station information (&lt;a href&#x3D; \&quot;#Station\&quot;&gt;Station&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Station\&quot; name&#x3D;\&quot;Station\&quot;&gt;Station Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Address\&quot; name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3311Async(String lineCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3311ValidateBeforeCall(lineCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3312
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3312Call(String stationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jStationTimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StationCode", stationCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3312ValidateBeforeCall(String stationCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe3312Call(stationCode, _callback);

    }

    /**
     * JSON - Station Timings
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns opening and scheduled first/last train times based on a given  StationCode. Omit the StationCode to return timing information for all  stations.&lt;/p&gt;    &lt;p&gt;Note that for stations with multiple platforms (e.g.: Metro Center, L&#39;Enfant  Plaza, etc.), a distinct call is required for each StationCode to retrieve the  full set of train times at such stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;StationTimes&lt;/td&gt;    &lt;td&gt;  Array containing station timing information (&lt;a href&#x3D;  \&quot;#StationTime\&quot;&gt;StationTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationTime\&quot; name&#x3D;\&quot;StationTime\&quot;&gt;StationTime  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Code&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name of the station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;*Day Elements&lt;/td&gt;    &lt;td&gt;  Container elements containing timing information based on  &lt;a href&#x3D;\&quot;#dow\&quot;&gt;day of the week.&lt;/a&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;dow\&quot; name&#x3D;\&quot;dow\&quot;&gt;Monday/Tuesday/Wednesday/etc.  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;OpeningTime&lt;/td&gt;    &lt;td&gt;Station opening time. Format is HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;FirstTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#first\&quot;&gt;first train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LastTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#last\&quot;&gt;last train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;first\&quot; name&#x3D;\&quot;first\&quot;&gt;FirstTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;First train leaves the station at this time. Format is  HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;last\&quot; name&#x3D;\&quot;last\&quot;&gt;LastTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Last train leaves the station at this time. Format is HH:mm.  Note that when the time is AM, it signifies the next day. For  example, a value of 02:30 under a Saturday element means the last  train leaves on Sunday at 2:30 AM.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3312(String stationCode) throws ApiException {
        call5476364f031f5909e4fe3312WithHttpInfo(stationCode);
    }

    /**
     * JSON - Station Timings
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns opening and scheduled first/last train times based on a given  StationCode. Omit the StationCode to return timing information for all  stations.&lt;/p&gt;    &lt;p&gt;Note that for stations with multiple platforms (e.g.: Metro Center, L&#39;Enfant  Plaza, etc.), a distinct call is required for each StationCode to retrieve the  full set of train times at such stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;StationTimes&lt;/td&gt;    &lt;td&gt;  Array containing station timing information (&lt;a href&#x3D;  \&quot;#StationTime\&quot;&gt;StationTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationTime\&quot; name&#x3D;\&quot;StationTime\&quot;&gt;StationTime  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Code&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name of the station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;*Day Elements&lt;/td&gt;    &lt;td&gt;  Container elements containing timing information based on  &lt;a href&#x3D;\&quot;#dow\&quot;&gt;day of the week.&lt;/a&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;dow\&quot; name&#x3D;\&quot;dow\&quot;&gt;Monday/Tuesday/Wednesday/etc.  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;OpeningTime&lt;/td&gt;    &lt;td&gt;Station opening time. Format is HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;FirstTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#first\&quot;&gt;first train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LastTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#last\&quot;&gt;last train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;first\&quot; name&#x3D;\&quot;first\&quot;&gt;FirstTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;First train leaves the station at this time. Format is  HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;last\&quot; name&#x3D;\&quot;last\&quot;&gt;LastTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Last train leaves the station at this time. Format is HH:mm.  Note that when the time is AM, it signifies the next day. For  example, a value of 02:30 under a Saturday element means the last  train leaves on Sunday at 2:30 AM.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3312WithHttpInfo(String stationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3312ValidateBeforeCall(stationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Station Timings (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns opening and scheduled first/last train times based on a given  StationCode. Omit the StationCode to return timing information for all  stations.&lt;/p&gt;    &lt;p&gt;Note that for stations with multiple platforms (e.g.: Metro Center, L&#39;Enfant  Plaza, etc.), a distinct call is required for each StationCode to retrieve the  full set of train times at such stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;StationTimes&lt;/td&gt;    &lt;td&gt;  Array containing station timing information (&lt;a href&#x3D;  \&quot;#StationTime\&quot;&gt;StationTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationTime\&quot; name&#x3D;\&quot;StationTime\&quot;&gt;StationTime  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Code&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name of the station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;*Day Elements&lt;/td&gt;    &lt;td&gt;  Container elements containing timing information based on  &lt;a href&#x3D;\&quot;#dow\&quot;&gt;day of the week.&lt;/a&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;dow\&quot; name&#x3D;\&quot;dow\&quot;&gt;Monday/Tuesday/Wednesday/etc.  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;OpeningTime&lt;/td&gt;    &lt;td&gt;Station opening time. Format is HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;FirstTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#first\&quot;&gt;first train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LastTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#last\&quot;&gt;last train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;first\&quot; name&#x3D;\&quot;first\&quot;&gt;FirstTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;First train leaves the station at this time. Format is  HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;last\&quot; name&#x3D;\&quot;last\&quot;&gt;LastTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Last train leaves the station at this time. Format is HH:mm.  Note that when the time is AM, it signifies the next day. For  example, a value of 02:30 under a Saturday element means the last  train leaves on Sunday at 2:30 AM.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3312Async(String stationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3312ValidateBeforeCall(stationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3313
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3313Call(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json/jSrcStationToDstStationInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FromStationCode", fromStationCode));
        }

        if (toStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ToStationCode", toStationCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3313ValidateBeforeCall(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe3313Call(fromStationCode, toStationCode, _callback);

    }

    /**
     * JSON - Station to Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a distance, fare information, and estimated travel time between any two stations, including those on different lines. Omit both parameters to retrieve data for all stations.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationToStationInfos&lt;/td&gt;  &lt;td&gt; Array containing station to station information (&lt;a href&#x3D; \&quot;#StationToStationInfo\&quot;&gt;StationToStationInfo&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationToStationInfo\&quot; name&#x3D; \&quot;StationToStationInfo\&quot;&gt;StationToStationInfo Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;CompositeMiles&lt;/td&gt;  &lt;td&gt;Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA&#39;s &lt;a href&#x3D;\&quot;https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page&#x3D;6\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Tariff on Fares&lt;/a&gt;.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DestinationStation&lt;/td&gt;  &lt;td&gt;Destination station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailFare&lt;/td&gt;  &lt;td&gt; Structure containing &lt;a href&#x3D;\&quot;#RailFare\&quot;&gt;fare&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailTime&lt;/td&gt;  &lt;td&gt;Estimated travel time (schedule time) in minutes between the source and destination station. This is not correlated to minutes &lt;span class&#x3D;\&quot;text-info\&quot;&gt;(Min)&lt;/span&gt; in Real-Time Rail Predictions.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SourceStation&lt;/td&gt;  &lt;td&gt;Origin station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;RailFare\&quot; name&#x3D;\&quot;RailFare\&quot;&gt;RailFare Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;OffPeakTime&lt;/td&gt;  &lt;td&gt;Fare during off-peak times (times other than the ones described below).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;PeakTime&lt;/td&gt;  &lt;td&gt;Fare during peak times (weekdays from opening to 9:30 AM and 3-7 PM, and weekends from midnight to closing).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SeniorDisabled&lt;/td&gt;  &lt;td&gt; Reduced fare for &lt;a href&#x3D; \&quot;http://www.wmata.com/fares/reduced.cfm\&quot;&gt;senior citizens or people with disabilities&lt;/a&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3313(String fromStationCode, String toStationCode) throws ApiException {
        call5476364f031f5909e4fe3313WithHttpInfo(fromStationCode, toStationCode);
    }

    /**
     * JSON - Station to Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a distance, fare information, and estimated travel time between any two stations, including those on different lines. Omit both parameters to retrieve data for all stations.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationToStationInfos&lt;/td&gt;  &lt;td&gt; Array containing station to station information (&lt;a href&#x3D; \&quot;#StationToStationInfo\&quot;&gt;StationToStationInfo&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationToStationInfo\&quot; name&#x3D; \&quot;StationToStationInfo\&quot;&gt;StationToStationInfo Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;CompositeMiles&lt;/td&gt;  &lt;td&gt;Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA&#39;s &lt;a href&#x3D;\&quot;https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page&#x3D;6\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Tariff on Fares&lt;/a&gt;.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DestinationStation&lt;/td&gt;  &lt;td&gt;Destination station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailFare&lt;/td&gt;  &lt;td&gt; Structure containing &lt;a href&#x3D;\&quot;#RailFare\&quot;&gt;fare&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailTime&lt;/td&gt;  &lt;td&gt;Estimated travel time (schedule time) in minutes between the source and destination station. This is not correlated to minutes &lt;span class&#x3D;\&quot;text-info\&quot;&gt;(Min)&lt;/span&gt; in Real-Time Rail Predictions.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SourceStation&lt;/td&gt;  &lt;td&gt;Origin station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;RailFare\&quot; name&#x3D;\&quot;RailFare\&quot;&gt;RailFare Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;OffPeakTime&lt;/td&gt;  &lt;td&gt;Fare during off-peak times (times other than the ones described below).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;PeakTime&lt;/td&gt;  &lt;td&gt;Fare during peak times (weekdays from opening to 9:30 AM and 3-7 PM, and weekends from midnight to closing).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SeniorDisabled&lt;/td&gt;  &lt;td&gt; Reduced fare for &lt;a href&#x3D; \&quot;http://www.wmata.com/fares/reduced.cfm\&quot;&gt;senior citizens or people with disabilities&lt;/a&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3313WithHttpInfo(String fromStationCode, String toStationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3313ValidateBeforeCall(fromStationCode, toStationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * JSON - Station to Station Information (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a distance, fare information, and estimated travel time between any two stations, including those on different lines. Omit both parameters to retrieve data for all stations.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationToStationInfos&lt;/td&gt;  &lt;td&gt; Array containing station to station information (&lt;a href&#x3D; \&quot;#StationToStationInfo\&quot;&gt;StationToStationInfo&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationToStationInfo\&quot; name&#x3D; \&quot;StationToStationInfo\&quot;&gt;StationToStationInfo Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;CompositeMiles&lt;/td&gt;  &lt;td&gt;Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA&#39;s &lt;a href&#x3D;\&quot;https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page&#x3D;6\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Tariff on Fares&lt;/a&gt;.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DestinationStation&lt;/td&gt;  &lt;td&gt;Destination station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailFare&lt;/td&gt;  &lt;td&gt; Structure containing &lt;a href&#x3D;\&quot;#RailFare\&quot;&gt;fare&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailTime&lt;/td&gt;  &lt;td&gt;Estimated travel time (schedule time) in minutes between the source and destination station. This is not correlated to minutes &lt;span class&#x3D;\&quot;text-info\&quot;&gt;(Min)&lt;/span&gt; in Real-Time Rail Predictions.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SourceStation&lt;/td&gt;  &lt;td&gt;Origin station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;RailFare\&quot; name&#x3D;\&quot;RailFare\&quot;&gt;RailFare Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;OffPeakTime&lt;/td&gt;  &lt;td&gt;Fare during off-peak times (times other than the ones described below).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;PeakTime&lt;/td&gt;  &lt;td&gt;Fare during peak times (weekdays from opening to 9:30 AM and 3-7 PM, and weekends from midnight to closing).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SeniorDisabled&lt;/td&gt;  &lt;td&gt; Reduced fare for &lt;a href&#x3D; \&quot;http://www.wmata.com/fares/reduced.cfm\&quot;&gt;senior citizens or people with disabilities&lt;/a&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3313Async(String fromStationCode, String toStationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3313ValidateBeforeCall(fromStationCode, toStationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3314
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3314Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Lines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3314ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe3314Call(_callback);

    }

    /**
     * XML - Lines
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns information about all rail lines.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Lines&lt;/td&gt;    &lt;td&gt;  Array containing line information (&lt;a href&#x3D;\&quot;#Line\&quot;&gt;Line&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Line\&quot; name&#x3D;\&quot;Line\&quot;&gt;Line Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DisplayName&lt;/td&gt;    &lt;td&gt;Full name of line color.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndStationCode&lt;/td&gt;    &lt;td&gt;End station code. For example, will be E10 (Greenbelt) for the  Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination1&lt;/td&gt;    &lt;td&gt;Intermediate terminal station code. During normal service, some  trains on some lines might end their trip prior to the  StartStationCode or EndStationCode. A good example is on the Red  Line where some trains stop at A11 (Grosvenor) or B08 (Silver  Spring). Empty string if not defined.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination2&lt;/td&gt;    &lt;td&gt;Similar to InternalDestination1.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartStationCode&lt;/td&gt;    &lt;td&gt;Start station code. For example, will be F11 (Branch Avenue)  for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use  this value in other rail-related APIs to retrieve data about a  station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3314() throws ApiException {
        call5476364f031f5909e4fe3314WithHttpInfo();
    }

    /**
     * XML - Lines
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns information about all rail lines.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Lines&lt;/td&gt;    &lt;td&gt;  Array containing line information (&lt;a href&#x3D;\&quot;#Line\&quot;&gt;Line&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Line\&quot; name&#x3D;\&quot;Line\&quot;&gt;Line Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DisplayName&lt;/td&gt;    &lt;td&gt;Full name of line color.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndStationCode&lt;/td&gt;    &lt;td&gt;End station code. For example, will be E10 (Greenbelt) for the  Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination1&lt;/td&gt;    &lt;td&gt;Intermediate terminal station code. During normal service, some  trains on some lines might end their trip prior to the  StartStationCode or EndStationCode. A good example is on the Red  Line where some trains stop at A11 (Grosvenor) or B08 (Silver  Spring). Empty string if not defined.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination2&lt;/td&gt;    &lt;td&gt;Similar to InternalDestination1.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartStationCode&lt;/td&gt;    &lt;td&gt;Start station code. For example, will be F11 (Branch Avenue)  for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use  this value in other rail-related APIs to retrieve data about a  station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3314WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3314ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Lines (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns information about all rail lines.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Lines&lt;/td&gt;    &lt;td&gt;  Array containing line information (&lt;a href&#x3D;\&quot;#Line\&quot;&gt;Line&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;Line\&quot; name&#x3D;\&quot;Line\&quot;&gt;Line Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DisplayName&lt;/td&gt;    &lt;td&gt;Full name of line color.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;EndStationCode&lt;/td&gt;    &lt;td&gt;End station code. For example, will be E10 (Greenbelt) for the  Green Line, B11 (Glenmont) for the Red Line, etc. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination1&lt;/td&gt;    &lt;td&gt;Intermediate terminal station code. During normal service, some  trains on some lines might end their trip prior to the  StartStationCode or EndStationCode. A good example is on the Red  Line where some trains stop at A11 (Grosvenor) or B08 (Silver  Spring). Empty string if not defined.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;InternalDestination2&lt;/td&gt;    &lt;td&gt;Similar to InternalDestination1.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StartStationCode&lt;/td&gt;    &lt;td&gt;Start station code. For example, will be F11 (Branch Avenue)  for the Green Line, A15 (Shady Grove) for the Red Line, etc. Use  this value in other rail-related APIs to retrieve data about a  station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3314Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3314ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3315
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3315Call(String stationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StationParking";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StationCode", stationCode));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3315ValidateBeforeCall(String stationCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe3315Call(stationCode, _callback);

    }

    /**
     * XML - Parking Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns parking information at a station based on a given StationCode. Omit the StationCode to return parking information for all stations.&lt;/p&gt;  &lt;p&gt;If a station has no parking, the StationsParking element will contain no child elements.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationsParking&lt;/td&gt;  &lt;td&gt; Array containing station parking information (&lt;a href&#x3D; \&quot;#StationParking\&quot;&gt;StationParking&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationParking\&quot; name&#x3D;\&quot;StationParking\&quot;&gt;StationParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Useful when returning parking information for all stations. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;When not NULL, provides additional parking resources such as nearby lots.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;AllDayParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#AllDayParking\&quot;&gt;all-day parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;ShortTermParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#ShortTermParking\&quot;&gt;short-term parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;AllDayParking\&quot; name&#x3D;\&quot;AllDayParking\&quot;&gt;AllDayParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of all-day parking spots available at a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for Metro riders. NULL when no all-day spots are available. For most stations, this value is identical to the NonRiderCost.&lt;br&gt; &lt;br&gt; For cases where the NonRiderCost is different, the lower cost per day requires a valid rail trip using a SmarTrip&amp;reg; card originating from a station other than the one where the patron parked. To receive this lower rate, patrons must pay for their parking with the same SmarTrip&amp;reg; card used to enter/exit Metrorail, and must exit the parking lot within two hours of exiting Metrorail.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;NonRiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for non-Metro riders. NULL when no all-day spots are available.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;ShortTermParking\&quot; name&#x3D; \&quot;ShortTermParking\&quot;&gt;ShortTermParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayRiderCost&lt;/td&gt;  &lt;td&gt;Similar to RiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayNonRiderCost&lt;/td&gt;  &lt;td&gt;Similar to NonRiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of short-term parking spots available at a station (parking meters).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;Misc. information relating to short-term parking. NULL when no short-term spots are available.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3315(String stationCode) throws ApiException {
        call5476364f031f5909e4fe3315WithHttpInfo(stationCode);
    }

    /**
     * XML - Parking Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns parking information at a station based on a given StationCode. Omit the StationCode to return parking information for all stations.&lt;/p&gt;  &lt;p&gt;If a station has no parking, the StationsParking element will contain no child elements.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationsParking&lt;/td&gt;  &lt;td&gt; Array containing station parking information (&lt;a href&#x3D; \&quot;#StationParking\&quot;&gt;StationParking&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationParking\&quot; name&#x3D;\&quot;StationParking\&quot;&gt;StationParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Useful when returning parking information for all stations. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;When not NULL, provides additional parking resources such as nearby lots.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;AllDayParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#AllDayParking\&quot;&gt;all-day parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;ShortTermParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#ShortTermParking\&quot;&gt;short-term parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;AllDayParking\&quot; name&#x3D;\&quot;AllDayParking\&quot;&gt;AllDayParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of all-day parking spots available at a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for Metro riders. NULL when no all-day spots are available. For most stations, this value is identical to the NonRiderCost.&lt;br&gt; &lt;br&gt; For cases where the NonRiderCost is different, the lower cost per day requires a valid rail trip using a SmarTrip&amp;reg; card originating from a station other than the one where the patron parked. To receive this lower rate, patrons must pay for their parking with the same SmarTrip&amp;reg; card used to enter/exit Metrorail, and must exit the parking lot within two hours of exiting Metrorail.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;NonRiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for non-Metro riders. NULL when no all-day spots are available.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;ShortTermParking\&quot; name&#x3D; \&quot;ShortTermParking\&quot;&gt;ShortTermParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayRiderCost&lt;/td&gt;  &lt;td&gt;Similar to RiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayNonRiderCost&lt;/td&gt;  &lt;td&gt;Similar to NonRiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of short-term parking spots available at a station (parking meters).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;Misc. information relating to short-term parking. NULL when no short-term spots are available.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3315WithHttpInfo(String stationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3315ValidateBeforeCall(stationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Parking Information (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns parking information at a station based on a given StationCode. Omit the StationCode to return parking information for all stations.&lt;/p&gt;  &lt;p&gt;If a station has no parking, the StationsParking element will contain no child elements.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationsParking&lt;/td&gt;  &lt;td&gt; Array containing station parking information (&lt;a href&#x3D; \&quot;#StationParking\&quot;&gt;StationParking&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationParking\&quot; name&#x3D;\&quot;StationParking\&quot;&gt;StationParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Useful when returning parking information for all stations. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;When not NULL, provides additional parking resources such as nearby lots.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;AllDayParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#AllDayParking\&quot;&gt;all-day parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;ShortTermParking&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#ShortTermParking\&quot;&gt;short-term parking&lt;/a&gt; options. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;AllDayParking\&quot; name&#x3D;\&quot;AllDayParking\&quot;&gt;AllDayParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of all-day parking spots available at a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for Metro riders. NULL when no all-day spots are available. For most stations, this value is identical to the NonRiderCost.&lt;br&gt; &lt;br&gt; For cases where the NonRiderCost is different, the lower cost per day requires a valid rail trip using a SmarTrip&amp;reg; card originating from a station other than the one where the patron parked. To receive this lower rate, patrons must pay for their parking with the same SmarTrip&amp;reg; card used to enter/exit Metrorail, and must exit the parking lot within two hours of exiting Metrorail.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;NonRiderCost&lt;/td&gt;  &lt;td&gt;All-day cost per day (weekday) for non-Metro riders. NULL when no all-day spots are available.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;ShortTermParking\&quot; name&#x3D; \&quot;ShortTermParking\&quot;&gt;ShortTermParking Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayRiderCost&lt;/td&gt;  &lt;td&gt;Similar to RiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SaturdayNonRiderCost&lt;/td&gt;  &lt;td&gt;Similar to NonRiderCost, except denoting Saturday prices.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;TotalCount&lt;/td&gt;  &lt;td&gt;Number of short-term parking spots available at a station (parking meters).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Notes&lt;/td&gt;  &lt;td&gt;Misc. information relating to short-term parking. NULL when no short-term spots are available.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3315Async(String stationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3315ValidateBeforeCall(stationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3316
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3316Call(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Path";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FromStationCode", fromStationCode));
        }

        if (toStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ToStationCode", toStationCode));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3316ValidateBeforeCall(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fromStationCode' is set
        if (fromStationCode == null) {
            throw new ApiException("Missing the required parameter 'fromStationCode' when calling call5476364f031f5909e4fe3316(Async)");
        }

        // verify the required parameter 'toStationCode' is set
        if (toStationCode == null) {
            throw new ApiException("Missing the required parameter 'toStationCode' when calling call5476364f031f5909e4fe3316(Async)");
        }

        return call5476364f031f5909e4fe3316Call(fromStationCode, toStationCode, _callback);

    }

    /**
     * XML - Path Between Stations
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of ordered stations and distances between two stations on the  &lt;em&gt;same line&lt;/em&gt;.&lt;/p&gt;    &lt;p&gt;Note that this method is not suitable on its own as a pathfinding solution  between stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Path&lt;/td&gt;    &lt;td&gt;  Array containing path details (&lt;a href&#x3D;  \&quot;#MetroPathItem\&quot;&gt;MetroPathItem&lt;/a&gt;)  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;MetroPathItem\&quot; name&#x3D;\&quot;MetroPathItem\&quot;&gt;MetroPathItem  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DistanceToPrev&lt;/td&gt;    &lt;td&gt;Distance in feet to the previous station in the list.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV) this station&#39;s platform is on.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Ordered sequence number.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name for this station, as shown on the WMATA website.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3316(String fromStationCode, String toStationCode) throws ApiException {
        call5476364f031f5909e4fe3316WithHttpInfo(fromStationCode, toStationCode);
    }

    /**
     * XML - Path Between Stations
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of ordered stations and distances between two stations on the  &lt;em&gt;same line&lt;/em&gt;.&lt;/p&gt;    &lt;p&gt;Note that this method is not suitable on its own as a pathfinding solution  between stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Path&lt;/td&gt;    &lt;td&gt;  Array containing path details (&lt;a href&#x3D;  \&quot;#MetroPathItem\&quot;&gt;MetroPathItem&lt;/a&gt;)  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;MetroPathItem\&quot; name&#x3D;\&quot;MetroPathItem\&quot;&gt;MetroPathItem  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DistanceToPrev&lt;/td&gt;    &lt;td&gt;Distance in feet to the previous station in the list.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV) this station&#39;s platform is on.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Ordered sequence number.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name for this station, as shown on the WMATA website.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3316WithHttpInfo(String fromStationCode, String toStationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3316ValidateBeforeCall(fromStationCode, toStationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Path Between Stations (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a set of ordered stations and distances between two stations on the  &lt;em&gt;same line&lt;/em&gt;.&lt;/p&gt;    &lt;p&gt;Note that this method is not suitable on its own as a pathfinding solution  between stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Path&lt;/td&gt;    &lt;td&gt;  Array containing path details (&lt;a href&#x3D;  \&quot;#MetroPathItem\&quot;&gt;MetroPathItem&lt;/a&gt;)  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;MetroPathItem\&quot; name&#x3D;\&quot;MetroPathItem\&quot;&gt;MetroPathItem  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DistanceToPrev&lt;/td&gt;    &lt;td&gt;Distance in feet to the previous station in the list.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LineCode&lt;/td&gt;    &lt;td&gt;Two-letter abbreviation for the line (e.g.: RD, BL, YL, OR, GR,  or SV) this station&#39;s platform is on.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;SeqNum&lt;/td&gt;    &lt;td&gt;Ordered sequence number.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name for this station, as shown on the WMATA website.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param toStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3316Async(String fromStationCode, String toStationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3316ValidateBeforeCall(fromStationCode, toStationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3317
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3317Call(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StationEntrances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Radius", radius));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3317ValidateBeforeCall(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe3317Call(lat, lon, radius, _callback);

    }

    /**
     * XML - Station Entrances
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby station entrances based on latitude, longitude, and  radius (meters). Omit search parameters to return all station entrances.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Entrances&lt;/td&gt;    &lt;td&gt;  Array containing detailed information about station entrances  (&lt;a href&#x3D;\&quot;#StationEntrance\&quot;&gt;StationEntrance&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationEntrance\&quot; name&#x3D;  \&quot;StationEntrance\&quot;&gt;StationEntrance Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Description&lt;/td&gt;    &lt;td&gt;Additional information for the entrance, if available.  Currently available data usually shows the same value as the Name  element.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;ID&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt;&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Name of the entrance (usually the station name and nearest  intersection).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode1&lt;/td&gt;    &lt;td&gt;The station code associated with this entrance. Use this value  in other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode2&lt;/td&gt;    &lt;td&gt;For stations containing multiple platforms (e.g.: Gallery  Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the other  station code.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3317(BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        call5476364f031f5909e4fe3317WithHttpInfo(lat, lon, radius);
    }

    /**
     * XML - Station Entrances
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby station entrances based on latitude, longitude, and  radius (meters). Omit search parameters to return all station entrances.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Entrances&lt;/td&gt;    &lt;td&gt;  Array containing detailed information about station entrances  (&lt;a href&#x3D;\&quot;#StationEntrance\&quot;&gt;StationEntrance&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationEntrance\&quot; name&#x3D;  \&quot;StationEntrance\&quot;&gt;StationEntrance Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Description&lt;/td&gt;    &lt;td&gt;Additional information for the entrance, if available.  Currently available data usually shows the same value as the Name  element.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;ID&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt;&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Name of the entrance (usually the station name and nearest  intersection).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode1&lt;/td&gt;    &lt;td&gt;The station code associated with this entrance. Use this value  in other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode2&lt;/td&gt;    &lt;td&gt;For stations containing multiple platforms (e.g.: Gallery  Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the other  station code.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3317WithHttpInfo(BigDecimal lat, BigDecimal lon, BigDecimal radius) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3317ValidateBeforeCall(lat, lon, radius, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Station Entrances (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns a list of nearby station entrances based on latitude, longitude, and  radius (meters). Omit search parameters to return all station entrances.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;Entrances&lt;/td&gt;    &lt;td&gt;  Array containing detailed information about station entrances  (&lt;a href&#x3D;\&quot;#StationEntrance\&quot;&gt;StationEntrance&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationEntrance\&quot; name&#x3D;  \&quot;StationEntrance\&quot;&gt;StationEntrance Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Description&lt;/td&gt;    &lt;td&gt;Additional information for the entrance, if available.  Currently available data usually shows the same value as the Name  element.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td style&#x3D;\&quot;text-decoration: line-through\&quot;&gt;ID&lt;/td&gt;    &lt;td&gt;&lt;span class&#x3D;\&quot;text-danger\&quot;&gt;Deprecated.&lt;/span&gt;&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lat&lt;/td&gt;    &lt;td&gt;Latitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Lon&lt;/td&gt;    &lt;td&gt;Longitude.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Name&lt;/td&gt;    &lt;td&gt;Name of the entrance (usually the station name and nearest  intersection).&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode1&lt;/td&gt;    &lt;td&gt;The station code associated with this entrance. Use this value  in other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationCode2&lt;/td&gt;    &lt;td&gt;For stations containing multiple platforms (e.g.: Gallery  Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the other  station code.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param lat Center point Latitude, required if Longitude and Radius are specified. (optional, default to 38.8978168)
     * @param lon Center point Longitude, required if Latitude and Radius are specified. (optional, default to -77.0404246)
     * @param radius Radius (meters) to include in the search area, required if Latitude and Longitude are specified. (optional, default to 500.0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3317Async(BigDecimal lat, BigDecimal lon, BigDecimal radius, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3317ValidateBeforeCall(lat, lon, radius, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3318
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3318Call(String stationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StationInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StationCode", stationCode));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3318ValidateBeforeCall(String stationCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationCode' is set
        if (stationCode == null) {
            throw new ApiException("Missing the required parameter 'stationCode' when calling call5476364f031f5909e4fe3318(Async)");
        }

        return call5476364f031f5909e4fe3318Call(stationCode, _callback);

    }

    /**
     * XML - Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns station location and address information based on a given StationCode.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3318(String stationCode) throws ApiException {
        call5476364f031f5909e4fe3318WithHttpInfo(stationCode);
    }

    /**
     * XML - Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns station location and address information based on a given StationCode.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3318WithHttpInfo(String stationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3318ValidateBeforeCall(stationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Station Information (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns station location and address information based on a given StationCode.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3318Async(String stationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3318ValidateBeforeCall(stationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe3319
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3319Call(String lineCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Stations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lineCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LineCode", lineCode));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe3319ValidateBeforeCall(String lineCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe3319Call(lineCode, _callback);

    }

    /**
     * XML - Station List
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a list of station location and address information based on a given LineCode. Omit the LineCode to return all stations. The response is an array of objects identical to those returned in the Station Information method.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Stations&lt;/td&gt;  &lt;td&gt; Array containing station information (&lt;a href&#x3D; \&quot;#Station\&quot;&gt;Station&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Station\&quot; name&#x3D;\&quot;Station\&quot;&gt;Station Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Address\&quot; name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe3319(String lineCode) throws ApiException {
        call5476364f031f5909e4fe3319WithHttpInfo(lineCode);
    }

    /**
     * XML - Station List
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a list of station location and address information based on a given LineCode. Omit the LineCode to return all stations. The response is an array of objects identical to those returned in the Station Information method.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Stations&lt;/td&gt;  &lt;td&gt; Array containing station information (&lt;a href&#x3D; \&quot;#Station\&quot;&gt;Station&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Station\&quot; name&#x3D;\&quot;Station\&quot;&gt;Station Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Address\&quot; name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe3319WithHttpInfo(String lineCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe3319ValidateBeforeCall(lineCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Station List (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a list of station location and address information based on a given LineCode. Omit the LineCode to return all stations. The response is an array of objects identical to those returned in the Station Information method.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Stations&lt;/td&gt;  &lt;td&gt; Array containing station information (&lt;a href&#x3D; \&quot;#Station\&quot;&gt;Station&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Station\&quot; name&#x3D;\&quot;Station\&quot;&gt;Station Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Address&lt;/td&gt;  &lt;td&gt; Structure describing &lt;a href&#x3D;\&quot;#Address\&quot;&gt;address&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Code&lt;/td&gt;  &lt;td&gt;Station code. Repeated from input.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lat&lt;/td&gt;  &lt;td&gt;Latitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode1&lt;/td&gt;  &lt;td&gt;Two-letter abbreviation for one line (e.g.: RD, BL, YL, OR, GR, or SV) served by this station. If the station has an additional platform, the lines served by the other platform are listed in the LineCodeX values for the record associated with the StationCode found in StationTogether1.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode2&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode3&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;LineCode4&lt;/td&gt;  &lt;td&gt;Additional line served by this station, if applicable. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Lon&lt;/td&gt;  &lt;td&gt;Longitude.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Name&lt;/td&gt;  &lt;td&gt;Station name.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether1&lt;/td&gt;  &lt;td&gt;For stations with multiple platforms (e.g.: Gallery Place, Fort Totten, L&#39;Enfant Plaza, and Metro Center), the additional StationCode will be listed here.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;StationTogether2&lt;/td&gt;  &lt;td&gt;Similar in function to StationTogether2. Currently not in use.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;Address\&quot; name&#x3D;\&quot;Address\&quot;&gt;Address Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;City&lt;/td&gt;  &lt;td&gt;City.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;State&lt;/td&gt;  &lt;td&gt;State (abbreviated).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Street&lt;/td&gt;  &lt;td&gt;Street address (for GPS use).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;Zip&lt;/td&gt;  &lt;td&gt;Zip code.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param lineCode Two-letter line code abbreviation:  &lt;ul&gt; &lt;li&gt;RD - Red&lt;/li&gt; &lt;li&gt;YL - Yellow&lt;/li&gt; &lt;li&gt;GR - Green&lt;/li&gt; &lt;li&gt;BL - Blue&lt;/li&gt; &lt;li&gt;OR - Orange&lt;/li&gt; &lt;li&gt;SV - Silver&lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe3319Async(String lineCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe3319ValidateBeforeCall(lineCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe331a
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe331aCall(String stationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/StationTimes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StationCode", stationCode));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe331aValidateBeforeCall(String stationCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe331aCall(stationCode, _callback);

    }

    /**
     * XML - Station Timings
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns opening and scheduled first/last train times based on a given  StationCode. Omit the StationCode to return timing information for all  stations.&lt;/p&gt;    &lt;p&gt;Note that for stations with multiple platforms (e.g.: Metro Center, L&#39;Enfant  Plaza, etc.), a distinct call is required for each StationCode to retrieve the  full set of train times at such stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;StationTimes&lt;/td&gt;    &lt;td&gt;  Array containing station timing information (&lt;a href&#x3D;  \&quot;#StationTime\&quot;&gt;StationTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationTime\&quot; name&#x3D;\&quot;StationTime\&quot;&gt;StationTime  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Code&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name of the station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;*Day Elements&lt;/td&gt;    &lt;td&gt;  Container elements containing timing information based on  &lt;a href&#x3D;\&quot;#dow\&quot;&gt;day of the week.&lt;/a&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;dow\&quot; name&#x3D;\&quot;dow\&quot;&gt;Monday/Tuesday/Wednesday/etc.  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;OpeningTime&lt;/td&gt;    &lt;td&gt;Station opening time. Format is HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;FirstTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#first\&quot;&gt;first train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LastTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#last\&quot;&gt;last train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;first\&quot; name&#x3D;\&quot;first\&quot;&gt;FirstTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;First train leaves the station at this time. Format is  HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;last\&quot; name&#x3D;\&quot;last\&quot;&gt;LastTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Last train leaves the station at this time. Format is HH:mm.  Note that when the time is AM, it signifies the next day. For  example, a value of 02:30 under a Saturday element means the last  train leaves on Sunday at 2:30 AM.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe331a(String stationCode) throws ApiException {
        call5476364f031f5909e4fe331aWithHttpInfo(stationCode);
    }

    /**
     * XML - Station Timings
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns opening and scheduled first/last train times based on a given  StationCode. Omit the StationCode to return timing information for all  stations.&lt;/p&gt;    &lt;p&gt;Note that for stations with multiple platforms (e.g.: Metro Center, L&#39;Enfant  Plaza, etc.), a distinct call is required for each StationCode to retrieve the  full set of train times at such stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;StationTimes&lt;/td&gt;    &lt;td&gt;  Array containing station timing information (&lt;a href&#x3D;  \&quot;#StationTime\&quot;&gt;StationTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationTime\&quot; name&#x3D;\&quot;StationTime\&quot;&gt;StationTime  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Code&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name of the station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;*Day Elements&lt;/td&gt;    &lt;td&gt;  Container elements containing timing information based on  &lt;a href&#x3D;\&quot;#dow\&quot;&gt;day of the week.&lt;/a&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;dow\&quot; name&#x3D;\&quot;dow\&quot;&gt;Monday/Tuesday/Wednesday/etc.  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;OpeningTime&lt;/td&gt;    &lt;td&gt;Station opening time. Format is HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;FirstTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#first\&quot;&gt;first train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LastTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#last\&quot;&gt;last train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;first\&quot; name&#x3D;\&quot;first\&quot;&gt;FirstTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;First train leaves the station at this time. Format is  HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;last\&quot; name&#x3D;\&quot;last\&quot;&gt;LastTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Last train leaves the station at this time. Format is HH:mm.  Note that when the time is AM, it signifies the next day. For  example, a value of 02:30 under a Saturday element means the last  train leaves on Sunday at 2:30 AM.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe331aWithHttpInfo(String stationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe331aValidateBeforeCall(stationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Station Timings (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;    &lt;p&gt;Returns opening and scheduled first/last train times based on a given  StationCode. Omit the StationCode to return timing information for all  stations.&lt;/p&gt;    &lt;p&gt;Note that for stations with multiple platforms (e.g.: Metro Center, L&#39;Enfant  Plaza, etc.), a distinct call is required for each StationCode to retrieve the  full set of train times at such stations.&lt;/p&gt;    &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;    &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt;  &lt;thead&gt;  &lt;tr&gt;  &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;    &lt;th&gt;Description&lt;/th&gt;  &lt;/tr&gt;  &lt;/thead&gt;    &lt;tbody&gt;  &lt;tr&gt;  &lt;td&gt;StationTimes&lt;/td&gt;    &lt;td&gt;  Array containing station timing information (&lt;a href&#x3D;  \&quot;#StationTime\&quot;&gt;StationTime&lt;/a&gt;).  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;StationTime\&quot; name&#x3D;\&quot;StationTime\&quot;&gt;StationTime  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Code&lt;/td&gt;    &lt;td&gt;Station code for this station. Use this value in other  rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;StationName&lt;/td&gt;    &lt;td&gt;Full name of the station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;*Day Elements&lt;/td&gt;    &lt;td&gt;  Container elements containing timing information based on  &lt;a href&#x3D;\&quot;#dow\&quot;&gt;day of the week.&lt;/a&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;dow\&quot; name&#x3D;\&quot;dow\&quot;&gt;Monday/Tuesday/Wednesday/etc.  Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;OpeningTime&lt;/td&gt;    &lt;td&gt;Station opening time. Format is HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;FirstTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#first\&quot;&gt;first train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;LastTrains&lt;/td&gt;    &lt;td&gt;  Structure containing &lt;a href&#x3D;\&quot;#last\&quot;&gt;last train&lt;/a&gt;  information.  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;first\&quot; name&#x3D;\&quot;first\&quot;&gt;FirstTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;First train leaves the station at this time. Format is  HH:mm.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td colspan&#x3D;\&quot;2\&quot;&gt;  &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt;  &lt;a id&#x3D;\&quot;last\&quot; name&#x3D;\&quot;last\&quot;&gt;LastTrains Elements&lt;/a&gt;  &lt;/div&gt;  &lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;Time&lt;/td&gt;    &lt;td&gt;Last train leaves the station at this time. Format is HH:mm.  Note that when the time is AM, it signifies the next day. For  example, a value of 02:30 under a Saturday element means the last  train leaves on Sunday at 2:30 AM.&lt;/td&gt;  &lt;/tr&gt;    &lt;tr&gt;  &lt;td&gt;DestinationStation&lt;/td&gt;    &lt;td&gt;Station code for the train&#39;s destination. Use this value in  other rail-related APIs to retrieve data about a station.&lt;/td&gt;  &lt;/tr&gt;  &lt;/tbody&gt;  &lt;/table&gt;
     * @param stationCode Station code.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe331aAsync(String stationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe331aValidateBeforeCall(stationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for call5476364f031f5909e4fe331b
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe331bCall(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SrcStationToDstStationInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FromStationCode", fromStationCode));
        }

        if (toStationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ToStationCode", toStationCode));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyQuery", "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call call5476364f031f5909e4fe331bValidateBeforeCall(String fromStationCode, String toStationCode, final ApiCallback _callback) throws ApiException {
        return call5476364f031f5909e4fe331bCall(fromStationCode, toStationCode, _callback);

    }

    /**
     * XML - Station to Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a distance, fare information, and estimated travel time between any two stations, including those on different lines. Omit both parameters to retrieve data for all stations.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationToStationInfos&lt;/td&gt;  &lt;td&gt; Array containing station to station information (&lt;a href&#x3D; \&quot;#StationToStationInfo\&quot;&gt;StationToStationInfo&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationToStationInfo\&quot; name&#x3D; \&quot;StationToStationInfo\&quot;&gt;StationToStationInfo Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;CompositeMiles&lt;/td&gt;  &lt;td&gt;Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA&#39;s &lt;a href&#x3D;\&quot;https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page&#x3D;6\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Tariff on Fares&lt;/a&gt;.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DestinationStation&lt;/td&gt;  &lt;td&gt;Destination station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailFare&lt;/td&gt;  &lt;td&gt; Structure containing &lt;a href&#x3D;\&quot;#RailFare\&quot;&gt;fare&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailTime&lt;/td&gt;  &lt;td&gt;Estimated travel time (schedule time) in minutes between the source and destination station. This is not correlated to minutes &lt;span class&#x3D;\&quot;text-info\&quot;&gt;(Min)&lt;/span&gt; in Real-Time Rail Predictions.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SourceStation&lt;/td&gt;  &lt;td&gt;Origin station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;RailFare\&quot; name&#x3D;\&quot;RailFare\&quot;&gt;RailFare Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;OffPeakTime&lt;/td&gt;  &lt;td&gt;Fare during off-peak times (times other than the ones described below).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;PeakTime&lt;/td&gt;  &lt;td&gt;Fare during peak times (weekdays from opening to 9:30 AM and 3-7 PM, and weekends from midnight to closing).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SeniorDisabled&lt;/td&gt;  &lt;td&gt; Reduced fare for &lt;a href&#x3D; \&quot;http://www.wmata.com/fares/reduced.cfm\&quot;&gt;senior citizens or people with disabilities&lt;/a&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public void call5476364f031f5909e4fe331b(String fromStationCode, String toStationCode) throws ApiException {
        call5476364f031f5909e4fe331bWithHttpInfo(fromStationCode, toStationCode);
    }

    /**
     * XML - Station to Station Information
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a distance, fare information, and estimated travel time between any two stations, including those on different lines. Omit both parameters to retrieve data for all stations.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationToStationInfos&lt;/td&gt;  &lt;td&gt; Array containing station to station information (&lt;a href&#x3D; \&quot;#StationToStationInfo\&quot;&gt;StationToStationInfo&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationToStationInfo\&quot; name&#x3D; \&quot;StationToStationInfo\&quot;&gt;StationToStationInfo Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;CompositeMiles&lt;/td&gt;  &lt;td&gt;Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA&#39;s &lt;a href&#x3D;\&quot;https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page&#x3D;6\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Tariff on Fares&lt;/a&gt;.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DestinationStation&lt;/td&gt;  &lt;td&gt;Destination station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailFare&lt;/td&gt;  &lt;td&gt; Structure containing &lt;a href&#x3D;\&quot;#RailFare\&quot;&gt;fare&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailTime&lt;/td&gt;  &lt;td&gt;Estimated travel time (schedule time) in minutes between the source and destination station. This is not correlated to minutes &lt;span class&#x3D;\&quot;text-info\&quot;&gt;(Min)&lt;/span&gt; in Real-Time Rail Predictions.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SourceStation&lt;/td&gt;  &lt;td&gt;Origin station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;RailFare\&quot; name&#x3D;\&quot;RailFare\&quot;&gt;RailFare Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;OffPeakTime&lt;/td&gt;  &lt;td&gt;Fare during off-peak times (times other than the ones described below).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;PeakTime&lt;/td&gt;  &lt;td&gt;Fare during peak times (weekdays from opening to 9:30 AM and 3-7 PM, and weekends from midnight to closing).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SeniorDisabled&lt;/td&gt;  &lt;td&gt; Reduced fare for &lt;a href&#x3D; \&quot;http://www.wmata.com/fares/reduced.cfm\&quot;&gt;senior citizens or people with disabilities&lt;/a&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> call5476364f031f5909e4fe331bWithHttpInfo(String fromStationCode, String toStationCode) throws ApiException {
        okhttp3.Call localVarCall = call5476364f031f5909e4fe331bValidateBeforeCall(fromStationCode, toStationCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * XML - Station to Station Information (asynchronously)
     * &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Description&lt;/h4&gt;  &lt;p&gt;Returns a distance, fare information, and estimated travel time between any two stations, including those on different lines. Omit both parameters to retrieve data for all stations.&lt;/p&gt;  &lt;h4 class&#x3D;\&quot;text-primary\&quot;&gt;Response Elements&lt;/h4&gt;  &lt;table class&#x3D;\&quot;table table-condensed table-hover\&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class&#x3D;\&quot;col-md-3\&quot;&gt;Element&lt;/th&gt;  &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;  &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;StationToStationInfos&lt;/td&gt;  &lt;td&gt; Array containing station to station information (&lt;a href&#x3D; \&quot;#StationToStationInfo\&quot;&gt;StationToStationInfo&lt;/a&gt;). &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;StationToStationInfo\&quot; name&#x3D; \&quot;StationToStationInfo\&quot;&gt;StationToStationInfo Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;CompositeMiles&lt;/td&gt;  &lt;td&gt;Average of distance traveled between two stations and straight-line distance (as used for WMATA fare calculations).  For more details, please refer to WMATA&#39;s &lt;a href&#x3D;\&quot;https://www.wmata.com/about/records/public_docs/upload/Tariff-on-Fares-Annotated-2-12-18.pdf#page&#x3D;6\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot;&gt;Tariff on Fares&lt;/a&gt;.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;DestinationStation&lt;/td&gt;  &lt;td&gt;Destination station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailFare&lt;/td&gt;  &lt;td&gt; Structure containing &lt;a href&#x3D;\&quot;#RailFare\&quot;&gt;fare&lt;/a&gt; information. &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;RailTime&lt;/td&gt;  &lt;td&gt;Estimated travel time (schedule time) in minutes between the source and destination station. This is not correlated to minutes &lt;span class&#x3D;\&quot;text-info\&quot;&gt;(Min)&lt;/span&gt; in Real-Time Rail Predictions.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SourceStation&lt;/td&gt;  &lt;td&gt;Origin station code. Use this value in other rail-related APIs to retrieve data about a station.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td colspan&#x3D;\&quot;2\&quot;&gt; &lt;div class&#x3D;\&quot;text-primary\&quot; style&#x3D;\&quot;margin-top: 1em\&quot;&gt; &lt;a id&#x3D;\&quot;RailFare\&quot; name&#x3D;\&quot;RailFare\&quot;&gt;RailFare Elements&lt;/a&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;OffPeakTime&lt;/td&gt;  &lt;td&gt;Fare during off-peak times (times other than the ones described below).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;PeakTime&lt;/td&gt;  &lt;td&gt;Fare during peak times (weekdays from opening to 9:30 AM and 3-7 PM, and weekends from midnight to closing).&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt; &lt;td&gt;SeniorDisabled&lt;/td&gt;  &lt;td&gt; Reduced fare for &lt;a href&#x3D; \&quot;http://www.wmata.com/fares/reduced.cfm\&quot;&gt;senior citizens or people with disabilities&lt;/a&gt;. &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * @param fromStationCode Station code for the origin station.  Use the Station List method to return a list of all station codes. (optional, default to E10)
     * @param toStationCode Station code for the destination station.  Use the Station List method to return a list of all station codes. (optional, default to J03)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Default response code. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call call5476364f031f5909e4fe331bAsync(String fromStationCode, String toStationCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = call5476364f031f5909e4fe331bValidateBeforeCall(fromStationCode, toStationCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
