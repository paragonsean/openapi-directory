# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_summary import CompanySummary
from openapi_server.models.score import Score
from openapi_server.models.status import Status
from openapi_server.models.summary import Summary
from openapi_server.models.vehicle_summary import VehicleSummary
from openapi_server.models.wrong_input import WrongInput
from openapi_server import util


class Check(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_certificate: str=None, check_id: str=None, company_summary: CompanySummary=None, country: str=None, creation_date: datetime=None, date_of_birth: datetime=None, diplomatic_id: str=None, driver_license: str=None, first_name: str=None, foreign_id: str=None, homonym_probability: float=None, homonym_score: float=None, homonym_scores: List[Score]=None, id_score: float=None, issue_date: datetime=None, last_name: str=None, license_plate: str=None, national_id: str=None, native_country: str=None, owner_document_id: str=None, owner_document_type: str=None, passport: str=None, payment_date: str=None, pep: str=None, phone_number: str=None, professional_card: str=None, ptp: str=None, region: str=None, report_id: str=None, score: float=None, scores: List[Score]=None, status: str=None, statuses: List[Status]=None, summary: Summary=None, tax_id: str=None, type: str=None, update_date: datetime=None, vehicle_id: str=None, vehicle_summary: VehicleSummary=None, wrong_inputs: List[WrongInput]=None):
        """Check - a model defined in OpenAPI

        :param birth_certificate: The birth_certificate of this Check.
        :param check_id: The check_id of this Check.
        :param company_summary: The company_summary of this Check.
        :param country: The country of this Check.
        :param creation_date: The creation_date of this Check.
        :param date_of_birth: The date_of_birth of this Check.
        :param diplomatic_id: The diplomatic_id of this Check.
        :param driver_license: The driver_license of this Check.
        :param first_name: The first_name of this Check.
        :param foreign_id: The foreign_id of this Check.
        :param homonym_probability: The homonym_probability of this Check.
        :param homonym_score: The homonym_score of this Check.
        :param homonym_scores: The homonym_scores of this Check.
        :param id_score: The id_score of this Check.
        :param issue_date: The issue_date of this Check.
        :param last_name: The last_name of this Check.
        :param license_plate: The license_plate of this Check.
        :param national_id: The national_id of this Check.
        :param native_country: The native_country of this Check.
        :param owner_document_id: The owner_document_id of this Check.
        :param owner_document_type: The owner_document_type of this Check.
        :param passport: The passport of this Check.
        :param payment_date: The payment_date of this Check.
        :param pep: The pep of this Check.
        :param phone_number: The phone_number of this Check.
        :param professional_card: The professional_card of this Check.
        :param ptp: The ptp of this Check.
        :param region: The region of this Check.
        :param report_id: The report_id of this Check.
        :param score: The score of this Check.
        :param scores: The scores of this Check.
        :param status: The status of this Check.
        :param statuses: The statuses of this Check.
        :param summary: The summary of this Check.
        :param tax_id: The tax_id of this Check.
        :param type: The type of this Check.
        :param update_date: The update_date of this Check.
        :param vehicle_id: The vehicle_id of this Check.
        :param vehicle_summary: The vehicle_summary of this Check.
        :param wrong_inputs: The wrong_inputs of this Check.
        """
        self.openapi_types = {
            'birth_certificate': str,
            'check_id': str,
            'company_summary': CompanySummary,
            'country': str,
            'creation_date': datetime,
            'date_of_birth': datetime,
            'diplomatic_id': str,
            'driver_license': str,
            'first_name': str,
            'foreign_id': str,
            'homonym_probability': float,
            'homonym_score': float,
            'homonym_scores': List[Score],
            'id_score': float,
            'issue_date': datetime,
            'last_name': str,
            'license_plate': str,
            'national_id': str,
            'native_country': str,
            'owner_document_id': str,
            'owner_document_type': str,
            'passport': str,
            'payment_date': str,
            'pep': str,
            'phone_number': str,
            'professional_card': str,
            'ptp': str,
            'region': str,
            'report_id': str,
            'score': float,
            'scores': List[Score],
            'status': str,
            'statuses': List[Status],
            'summary': Summary,
            'tax_id': str,
            'type': str,
            'update_date': datetime,
            'vehicle_id': str,
            'vehicle_summary': VehicleSummary,
            'wrong_inputs': List[WrongInput]
        }

        self.attribute_map = {
            'birth_certificate': 'birth_certificate',
            'check_id': 'check_id',
            'company_summary': 'company_summary',
            'country': 'country',
            'creation_date': 'creation_date',
            'date_of_birth': 'date_of_birth',
            'diplomatic_id': 'diplomatic_id',
            'driver_license': 'driver_license',
            'first_name': 'first_name',
            'foreign_id': 'foreign_id',
            'homonym_probability': 'homonym_probability',
            'homonym_score': 'homonym_score',
            'homonym_scores': 'homonym_scores',
            'id_score': 'id_score',
            'issue_date': 'issue_date',
            'last_name': 'last_name',
            'license_plate': 'license_plate',
            'national_id': 'national_id',
            'native_country': 'native_country',
            'owner_document_id': 'owner_document_id',
            'owner_document_type': 'owner_document_type',
            'passport': 'passport',
            'payment_date': 'payment_date',
            'pep': 'pep',
            'phone_number': 'phone_number',
            'professional_card': 'professional_card',
            'ptp': 'ptp',
            'region': 'region',
            'report_id': 'report_id',
            'score': 'score',
            'scores': 'scores',
            'status': 'status',
            'statuses': 'statuses',
            'summary': 'summary',
            'tax_id': 'tax_id',
            'type': 'type',
            'update_date': 'update_date',
            'vehicle_id': 'vehicle_id',
            'vehicle_summary': 'vehicle_summary',
            'wrong_inputs': 'wrong_inputs'
        }

        self._birth_certificate = birth_certificate
        self._check_id = check_id
        self._company_summary = company_summary
        self._country = country
        self._creation_date = creation_date
        self._date_of_birth = date_of_birth
        self._diplomatic_id = diplomatic_id
        self._driver_license = driver_license
        self._first_name = first_name
        self._foreign_id = foreign_id
        self._homonym_probability = homonym_probability
        self._homonym_score = homonym_score
        self._homonym_scores = homonym_scores
        self._id_score = id_score
        self._issue_date = issue_date
        self._last_name = last_name
        self._license_plate = license_plate
        self._national_id = national_id
        self._native_country = native_country
        self._owner_document_id = owner_document_id
        self._owner_document_type = owner_document_type
        self._passport = passport
        self._payment_date = payment_date
        self._pep = pep
        self._phone_number = phone_number
        self._professional_card = professional_card
        self._ptp = ptp
        self._region = region
        self._report_id = report_id
        self._score = score
        self._scores = scores
        self._status = status
        self._statuses = statuses
        self._summary = summary
        self._tax_id = tax_id
        self._type = type
        self._update_date = update_date
        self._vehicle_id = vehicle_id
        self._vehicle_summary = vehicle_summary
        self._wrong_inputs = wrong_inputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Check':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Check of this Check.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_certificate(self):
        """Gets the birth_certificate of this Check.

        Person birth certificate

        :return: The birth_certificate of this Check.
        :rtype: str
        """
        return self._birth_certificate

    @birth_certificate.setter
    def birth_certificate(self, birth_certificate):
        """Sets the birth_certificate of this Check.

        Person birth certificate

        :param birth_certificate: The birth_certificate of this Check.
        :type birth_certificate: str
        """

        self._birth_certificate = birth_certificate

    @property
    def check_id(self):
        """Gets the check_id of this Check.

        Background check ID

        :return: The check_id of this Check.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this Check.

        Background check ID

        :param check_id: The check_id of this Check.
        :type check_id: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")

        self._check_id = check_id

    @property
    def company_summary(self):
        """Gets the company_summary of this Check.


        :return: The company_summary of this Check.
        :rtype: CompanySummary
        """
        return self._company_summary

    @company_summary.setter
    def company_summary(self, company_summary):
        """Sets the company_summary of this Check.


        :param company_summary: The company_summary of this Check.
        :type company_summary: CompanySummary
        """

        self._company_summary = company_summary

    @property
    def country(self):
        """Gets the country of this Check.

        ID Document country

        :return: The country of this Check.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Check.

        ID Document country

        :param country: The country of this Check.
        :type country: str
        """
        allowed_values = ["ALL", "BR", "CL", "CO", "CR", "EC", "MX", "PE", "AR"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def creation_date(self):
        """Gets the creation_date of this Check.

        Background check creation date

        :return: The creation_date of this Check.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Check.

        Background check creation date

        :param creation_date: The creation_date of this Check.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Check.

        Person birthdate. Shown only if provided during check creation. YYYY-MM-DD format

        :return: The date_of_birth of this Check.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Check.

        Person birthdate. Shown only if provided during check creation. YYYY-MM-DD format

        :param date_of_birth: The date_of_birth of this Check.
        :type date_of_birth: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def diplomatic_id(self):
        """Gets the diplomatic_id of this Check.

        Person diplomatic id

        :return: The diplomatic_id of this Check.
        :rtype: str
        """
        return self._diplomatic_id

    @diplomatic_id.setter
    def diplomatic_id(self, diplomatic_id):
        """Sets the diplomatic_id of this Check.

        Person diplomatic id

        :param diplomatic_id: The diplomatic_id of this Check.
        :type diplomatic_id: str
        """

        self._diplomatic_id = diplomatic_id

    @property
    def driver_license(self):
        """Gets the driver_license of this Check.

        Person driver's license

        :return: The driver_license of this Check.
        :rtype: str
        """
        return self._driver_license

    @driver_license.setter
    def driver_license(self, driver_license):
        """Sets the driver_license of this Check.

        Person driver's license

        :param driver_license: The driver_license of this Check.
        :type driver_license: str
        """

        self._driver_license = driver_license

    @property
    def first_name(self):
        """Gets the first_name of this Check.

        Person or entity first name. Shown only if provided during check creation

        :return: The first_name of this Check.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Check.

        Person or entity first name. Shown only if provided during check creation

        :param first_name: The first_name of this Check.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def foreign_id(self):
        """Gets the foreign_id of this Check.

        Person foreign identification

        :return: The foreign_id of this Check.
        :rtype: str
        """
        return self._foreign_id

    @foreign_id.setter
    def foreign_id(self, foreign_id):
        """Sets the foreign_id of this Check.

        Person foreign identification

        :param foreign_id: The foreign_id of this Check.
        :type foreign_id: str
        """

        self._foreign_id = foreign_id

    @property
    def homonym_probability(self):
        """Gets the homonym_probability of this Check.

        [Experimental] Analyzes the probability that the results by name are attributed to a homonym. Number between 0 and 1 where 1 is the the greatest probability

        :return: The homonym_probability of this Check.
        :rtype: float
        """
        return self._homonym_probability

    @homonym_probability.setter
    def homonym_probability(self, homonym_probability):
        """Sets the homonym_probability of this Check.

        [Experimental] Analyzes the probability that the results by name are attributed to a homonym. Number between 0 and 1 where 1 is the the greatest probability

        :param homonym_probability: The homonym_probability of this Check.
        :type homonym_probability: float
        """

        self._homonym_probability = homonym_probability

    @property
    def homonym_score(self):
        """Gets the homonym_score of this Check.

        Background check score including results by name only. This might contain homonym information

        :return: The homonym_score of this Check.
        :rtype: float
        """
        return self._homonym_score

    @homonym_score.setter
    def homonym_score(self, homonym_score):
        """Sets the homonym_score of this Check.

        Background check score including results by name only. This might contain homonym information

        :param homonym_score: The homonym_score of this Check.
        :type homonym_score: float
        """
        if homonym_score is not None and homonym_score > 1:
            raise ValueError("Invalid value for `homonym_score`, must be a value less than or equal to `1`")
        if homonym_score is not None and homonym_score < 0:
            raise ValueError("Invalid value for `homonym_score`, must be a value greater than or equal to `0`")

        self._homonym_score = homonym_score

    @property
    def homonym_scores(self):
        """Gets the homonym_scores of this Check.

        Background check scores by name for each profile group. [Deprecated for API key V1]

        :return: The homonym_scores of this Check.
        :rtype: List[Score]
        """
        return self._homonym_scores

    @homonym_scores.setter
    def homonym_scores(self, homonym_scores):
        """Sets the homonym_scores of this Check.

        Background check scores by name for each profile group. [Deprecated for API key V1]

        :param homonym_scores: The homonym_scores of this Check.
        :type homonym_scores: List[Score]
        """

        self._homonym_scores = homonym_scores

    @property
    def id_score(self):
        """Gets the id_score of this Check.

        Background check score regarding results by ID number only. It is a number between 0 and 1 where 1 is the best score. This result is a weighted average of the id_scores listed under scores.

        :return: The id_score of this Check.
        :rtype: float
        """
        return self._id_score

    @id_score.setter
    def id_score(self, id_score):
        """Sets the id_score of this Check.

        Background check score regarding results by ID number only. It is a number between 0 and 1 where 1 is the best score. This result is a weighted average of the id_scores listed under scores.

        :param id_score: The id_score of this Check.
        :type id_score: float
        """
        if id_score is None:
            raise ValueError("Invalid value for `id_score`, must not be `None`")

        self._id_score = id_score

    @property
    def issue_date(self):
        """Gets the issue_date of this Check.

        Issue date of the person ID

        :return: The issue_date of this Check.
        :rtype: datetime
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Check.

        Issue date of the person ID

        :param issue_date: The issue_date of this Check.
        :type issue_date: datetime
        """

        self._issue_date = issue_date

    @property
    def last_name(self):
        """Gets the last_name of this Check.

        Person or entity last name. Shown only if provided during check creation

        :return: The last_name of this Check.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Check.

        Person or entity last name. Shown only if provided during check creation

        :param last_name: The last_name of this Check.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def license_plate(self):
        """Gets the license_plate of this Check.

        Vehicle license plate

        :return: The license_plate of this Check.
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this Check.

        Vehicle license plate

        :param license_plate: The license_plate of this Check.
        :type license_plate: str
        """

        self._license_plate = license_plate

    @property
    def national_id(self):
        """Gets the national_id of this Check.

        Person national identification

        :return: The national_id of this Check.
        :rtype: str
        """
        return self._national_id

    @national_id.setter
    def national_id(self, national_id):
        """Sets the national_id of this Check.

        Person national identification

        :param national_id: The national_id of this Check.
        :type national_id: str
        """

        self._national_id = national_id

    @property
    def native_country(self):
        """Gets the native_country of this Check.

        Person origin country

        :return: The native_country of this Check.
        :rtype: str
        """
        return self._native_country

    @native_country.setter
    def native_country(self, native_country):
        """Sets the native_country of this Check.

        Person origin country

        :param native_country: The native_country of this Check.
        :type native_country: str
        """
        allowed_values = ["ad", "ae", "af", "ag", "ai", "al", "am", "an", "ao", "aq", "ar", "as", "at", "au", "aw", "ax", "az", "ba", "bb", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bm", "bn", "bo", "br", "bs", "bt", "bv", "bw", "by", "bz", "ca", "cc", "cd", "cf", "cg", "ch", "ci", "ck", "cl", "cm", "cn", "co", "cr", "cu", "cv", "cx", "cy", "cz", "de", "dj", "dk", "dm", "do", "dz", "ea", "ec", "ee", "eg", "eh", "er", "es", "et", "fi", "fj", "fk", "fm", "fo", "fr", "ga", "gb", "gd", "ge", "gf", "gg", "gh", "gi", "gl", "gm", "gn", "gp", "gq", "gr", "gs", "gt", "gu", "gw", "gy", "hk", "hm", "hn", "hr", "ht", "hu", "id", "ie", "il", "im", "in", "io", "iq", "ir", "is", "it", "je", "jm", "jo", "jp", "ke", "kg", "kh", "ki", "km", "kn", "kp", "kr", "kw", "ky", "kz", "la", "lb", "lc", "li", "lk", "lr", "ls", "lt", "lu", "lv", "ly", "ma", "mc", "md", "me", "mg", "mh", "mk", "ml", "mm", "mn", "mo", "mp", "mq", "mr", "ms", "mt", "mu", "mv", "mw", "mx", "my", "mz", "na", "nc", "ne", "nf", "ng", "ni", "nl", "false", "np", "nr", "nu", "nz", "om", "pa", "pe", "pf", "pg", "ph", "pk", "pl", "pm", "pn", "pr", "ps", "pt", "pw", "py", "qa", "re", "ro", "rs", "ru", "rw", "sa", "sb", "sc", "sd", "se", "sg", "sh", "si", "sj", "sk", "sl", "sm", "sn", "so", "sr", "st", "sv", "sy", "sz", "tc", "td", "tf", "tg", "th", "tj", "tk", "tl", "tm", "tn", "to", "tr", "tt", "tv", "tw", "tz", "ua", "ug", "um", "us", "uy", "uz", "va", "vc", "ve", "vg", "vi", "vn", "vu", "wf", "ws", "ye", "yt", "za", "zm", "zw"]  # noqa: E501
        if native_country not in allowed_values:
            raise ValueError(
                "Invalid value for `native_country` ({0}), must be one of {1}"
                .format(native_country, allowed_values)
            )

        self._native_country = native_country

    @property
    def owner_document_id(self):
        """Gets the owner_document_id of this Check.

        Vehicle owner identification

        :return: The owner_document_id of this Check.
        :rtype: str
        """
        return self._owner_document_id

    @owner_document_id.setter
    def owner_document_id(self, owner_document_id):
        """Sets the owner_document_id of this Check.

        Vehicle owner identification

        :param owner_document_id: The owner_document_id of this Check.
        :type owner_document_id: str
        """

        self._owner_document_id = owner_document_id

    @property
    def owner_document_type(self):
        """Gets the owner_document_type of this Check.

        Vehicle owner document type

        :return: The owner_document_type of this Check.
        :rtype: str
        """
        return self._owner_document_type

    @owner_document_type.setter
    def owner_document_type(self, owner_document_type):
        """Sets the owner_document_type of this Check.

        Vehicle owner document type

        :param owner_document_type: The owner_document_type of this Check.
        :type owner_document_type: str
        """

        self._owner_document_type = owner_document_type

    @property
    def passport(self):
        """Gets the passport of this Check.

        Person passport

        :return: The passport of this Check.
        :rtype: str
        """
        return self._passport

    @passport.setter
    def passport(self, passport):
        """Sets the passport of this Check.

        Person passport

        :param passport: The passport of this Check.
        :type passport: str
        """

        self._passport = passport

    @property
    def payment_date(self):
        """Gets the payment_date of this Check.

        Vehicle license payment date

        :return: The payment_date of this Check.
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Check.

        Vehicle license payment date

        :param payment_date: The payment_date of this Check.
        :type payment_date: str
        """

        self._payment_date = payment_date

    @property
    def pep(self):
        """Gets the pep of this Check.

        Colombian PEP idenfitication for Venezuelans

        :return: The pep of this Check.
        :rtype: str
        """
        return self._pep

    @pep.setter
    def pep(self, pep):
        """Sets the pep of this Check.

        Colombian PEP idenfitication for Venezuelans

        :param pep: The pep of this Check.
        :type pep: str
        """

        self._pep = pep

    @property
    def phone_number(self):
        """Gets the phone_number of this Check.

        Person phone number. Required by law in order to notify the person their background is being checked

        :return: The phone_number of this Check.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Check.

        Person phone number. Required by law in order to notify the person their background is being checked

        :param phone_number: The phone_number of this Check.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def professional_card(self):
        """Gets the professional_card of this Check.

        Person professional card number

        :return: The professional_card of this Check.
        :rtype: str
        """
        return self._professional_card

    @professional_card.setter
    def professional_card(self, professional_card):
        """Sets the professional_card of this Check.

        Person professional card number

        :param professional_card: The professional_card of this Check.
        :type professional_card: str
        """

        self._professional_card = professional_card

    @property
    def ptp(self):
        """Gets the ptp of this Check.

        Temporary residence permit of the person

        :return: The ptp of this Check.
        :rtype: str
        """
        return self._ptp

    @ptp.setter
    def ptp(self, ptp):
        """Sets the ptp of this Check.

        Temporary residence permit of the person

        :param ptp: The ptp of this Check.
        :type ptp: str
        """

        self._ptp = ptp

    @property
    def region(self):
        """Gets the region of this Check.

        Region where the background is to be checked. By default, background checks in Brazil are performed in region where the person is from. Applies for some Brazil collectors only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.  

        :return: The region of this Check.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Check.

        Region where the background is to be checked. By default, background checks in Brazil are performed in region where the person is from. Applies for some Brazil collectors only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.  

        :param region: The region of this Check.
        :type region: str
        """
        allowed_values = ["DF", "AC", "AL", "AP", "AM", "BA", "CE", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def report_id(self):
        """Gets the report_id of this Check.

        Report ID the background check is associated with

        :return: The report_id of this Check.
        :rtype: str
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this Check.

        Report ID the background check is associated with

        :param report_id: The report_id of this Check.
        :type report_id: str
        """

        self._report_id = report_id

    @property
    def score(self):
        """Gets the score of this Check.

        Background check score. Number between 0 and 1 where 1 is the best score

        :return: The score of this Check.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Check.

        Background check score. Number between 0 and 1 where 1 is the best score

        :param score: The score of this Check.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")
        if score is not None and score > 1:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score

    @property
    def scores(self):
        """Gets the scores of this Check.

        Background check score of each profile group and dataset

        :return: The scores of this Check.
        :rtype: List[Score]
        """
        return self._scores

    @scores.setter
    def scores(self, scores):
        """Sets the scores of this Check.

        Background check score of each profile group and dataset

        :param scores: The scores of this Check.
        :type scores: List[Score]
        """

        self._scores = scores

    @property
    def status(self):
        """Gets the status of this Check.

        Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the check finished successfully, **error** means the check failed, **in_progress** means the check is currently being processed, **delayed** means the check is waiting for an additional requirement to be met, this can last up to 3 days. **Completed** and **error** are the two only final statuses

        :return: The status of this Check.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Check.

        Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the check finished successfully, **error** means the check failed, **in_progress** means the check is currently being processed, **delayed** means the check is waiting for an additional requirement to be met, this can last up to 3 days. **Completed** and **error** are the two only final statuses

        :param status: The status of this Check.
        :type status: str
        """
        allowed_values = ["not_started", "in_progress", "completed", "error", "delayed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def statuses(self):
        """Gets the statuses of this Check.

        Database status list

        :return: The statuses of this Check.
        :rtype: List[Status]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this Check.

        Database status list

        :param statuses: The statuses of this Check.
        :type statuses: List[Status]
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")

        self._statuses = statuses

    @property
    def summary(self):
        """Gets the summary of this Check.


        :return: The summary of this Check.
        :rtype: Summary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Check.


        :param summary: The summary of this Check.
        :type summary: Summary
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def tax_id(self):
        """Gets the tax_id of this Check.

        Person or company tax id

        :return: The tax_id of this Check.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this Check.

        Person or company tax id

        :param tax_id: The tax_id of this Check.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def type(self):
        """Gets the type of this Check.

        Background check type

        :return: The type of this Check.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Check.

        Background check type

        :param type: The type of this Check.
        :type type: str
        """
        allowed_values = ["company", "person", "vehicle"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_date(self):
        """Gets the update_date of this Check.

        Background check update date

        :return: The update_date of this Check.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Check.

        Background check update date

        :param update_date: The update_date of this Check.
        :type update_date: datetime
        """

        self._update_date = update_date

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this Check.

        Vehicle identification

        :return: The vehicle_id of this Check.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this Check.

        Vehicle identification

        :param vehicle_id: The vehicle_id of this Check.
        :type vehicle_id: str
        """

        self._vehicle_id = vehicle_id

    @property
    def vehicle_summary(self):
        """Gets the vehicle_summary of this Check.


        :return: The vehicle_summary of this Check.
        :rtype: VehicleSummary
        """
        return self._vehicle_summary

    @vehicle_summary.setter
    def vehicle_summary(self, vehicle_summary):
        """Sets the vehicle_summary of this Check.


        :param vehicle_summary: The vehicle_summary of this Check.
        :type vehicle_summary: VehicleSummary
        """

        self._vehicle_summary = vehicle_summary

    @property
    def wrong_inputs(self):
        """Gets the wrong_inputs of this Check.

        List of parameters entered during background check creation that do not match the information obtained

        :return: The wrong_inputs of this Check.
        :rtype: List[WrongInput]
        """
        return self._wrong_inputs

    @wrong_inputs.setter
    def wrong_inputs(self, wrong_inputs):
        """Sets the wrong_inputs of this Check.

        List of parameters entered during background check creation that do not match the information obtained

        :param wrong_inputs: The wrong_inputs of this Check.
        :type wrong_inputs: List[WrongInput]
        """

        self._wrong_inputs = wrong_inputs
