# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, enabled: bool=None, user_creation_date: str=None, user_status: str=None, username: str=None):
        """User - a model defined in OpenAPI

        :param email: The email of this User.
        :param enabled: The enabled of this User.
        :param user_creation_date: The user_creation_date of this User.
        :param user_status: The user_status of this User.
        :param username: The username of this User.
        """
        self.openapi_types = {
            'email': str,
            'enabled': bool,
            'user_creation_date': str,
            'user_status': str,
            'username': str
        }

        self.attribute_map = {
            'email': 'email',
            'enabled': 'enabled',
            'user_creation_date': 'user_creation_date',
            'user_status': 'user_status',
            'username': 'username'
        }

        self._email = email
        self._enabled = enabled
        self._user_creation_date = user_creation_date
        self._user_status = user_status
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this User.

        User email

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        User email

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this User.

        Indicates whether the user is allowed to access or not

        :return: The enabled of this User.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.

        Indicates whether the user is allowed to access or not

        :param enabled: The enabled of this User.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def user_creation_date(self):
        """Gets the user_creation_date of this User.

        Date on which the user was created

        :return: The user_creation_date of this User.
        :rtype: str
        """
        return self._user_creation_date

    @user_creation_date.setter
    def user_creation_date(self, user_creation_date):
        """Sets the user_creation_date of this User.

        Date on which the user was created

        :param user_creation_date: The user_creation_date of this User.
        :type user_creation_date: str
        """

        self._user_creation_date = user_creation_date

    @property
    def user_status(self):
        """Gets the user_status of this User.

        Indicates whether the user is confirmed or needs to change their password

        :return: The user_status of this User.
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this User.

        Indicates whether the user is confirmed or needs to change their password

        :param user_status: The user_status of this User.
        :type user_status: str
        """
        allowed_values = ["FORCE_CHANGE_PASSWORD", "CONFIRMED"]  # noqa: E501
        if user_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_status` ({0}), must be one of {1}"
                .format(user_status, allowed_values)
            )

        self._user_status = user_status

    @property
    def username(self):
        """Gets the username of this User.

        Username

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        Username

        :param username: The username of this User.
        :type username: str
        """

        self._username = username
