# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_config import ScoreConfig
from openapi_server import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, config_id: str=None, score_config: ScoreConfig=None):
        """Config - a model defined in OpenAPI

        :param client_id: The client_id of this Config.
        :param config_id: The config_id of this Config.
        :param score_config: The score_config of this Config.
        """
        self.openapi_types = {
            'client_id': str,
            'config_id': str,
            'score_config': ScoreConfig
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'config_id': 'config_id',
            'score_config': 'score_config'
        }

        self._client_id = client_id
        self._config_id = config_id
        self._score_config = score_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Config of this Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this Config.

        Client ID

        :return: The client_id of this Config.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Config.

        Client ID

        :param client_id: The client_id of this Config.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def config_id(self):
        """Gets the config_id of this Config.

        Configuration ID

        :return: The config_id of this Config.
        :rtype: str
        """
        return self._config_id

    @config_id.setter
    def config_id(self, config_id):
        """Sets the config_id of this Config.

        Configuration ID

        :param config_id: The config_id of this Config.
        :type config_id: str
        """
        if config_id is None:
            raise ValueError("Invalid value for `config_id`, must not be `None`")

        self._config_id = config_id

    @property
    def score_config(self):
        """Gets the score_config of this Config.


        :return: The score_config of this Config.
        :rtype: ScoreConfig
        """
        return self._score_config

    @score_config.setter
    def score_config(self, score_config):
        """Sets the score_config of this Config.


        :param score_config: The score_config of this Config.
        :type score_config: ScoreConfig
        """
        if score_config is None:
            raise ValueError("Invalid value for `score_config`, must not be `None`")

        self._score_config = score_config
