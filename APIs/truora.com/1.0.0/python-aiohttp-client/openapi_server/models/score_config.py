# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set: str=None, weight: str=None):
        """ScoreConfig - a model defined in OpenAPI

        :param data_set: The data_set of this ScoreConfig.
        :param weight: The weight of this ScoreConfig.
        """
        self.openapi_types = {
            'data_set': str,
            'weight': str
        }

        self.attribute_map = {
            'data_set': 'data_set',
            'weight': 'weight'
        }

        self._data_set = data_set
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreConfig of this ScoreConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set(self):
        """Gets the data_set of this ScoreConfig.

        Background check dataset

        :return: The data_set of this ScoreConfig.
        :rtype: str
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set):
        """Sets the data_set of this ScoreConfig.

        Background check dataset

        :param data_set: The data_set of this ScoreConfig.
        :type data_set: str
        """
        if data_set is None:
            raise ValueError("Invalid value for `data_set`, must not be `None`")

        self._data_set = data_set

    @property
    def weight(self):
        """Gets the weight of this ScoreConfig.

        Dataset weight for score calculation

        :return: The weight of this ScoreConfig.
        :rtype: str
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ScoreConfig.

        Dataset weight for score calculation

        :param weight: The weight of this ScoreConfig.
        :type weight: str
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")

        self._weight = weight
