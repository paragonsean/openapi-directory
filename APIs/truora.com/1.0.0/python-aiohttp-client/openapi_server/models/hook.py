# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Hook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[str]=None, event_type: str=None, signing_key: str=None, status: str=None, subscriber_type: str=None, subscriber_url: str=None):
        """Hook - a model defined in OpenAPI

        :param actions: The actions of this Hook.
        :param event_type: The event_type of this Hook.
        :param signing_key: The signing_key of this Hook.
        :param status: The status of this Hook.
        :param subscriber_type: The subscriber_type of this Hook.
        :param subscriber_url: The subscriber_url of this Hook.
        """
        self.openapi_types = {
            'actions': List[str],
            'event_type': str,
            'signing_key': str,
            'status': str,
            'subscriber_type': str,
            'subscriber_url': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'event_type': 'event_type',
            'signing_key': 'signing_key',
            'status': 'status',
            'subscriber_type': 'subscriber_type',
            'subscriber_url': 'subscriber_url'
        }

        self._actions = actions
        self._event_type = event_type
        self._signing_key = signing_key
        self._status = status
        self._subscriber_type = subscriber_type
        self._subscriber_url = subscriber_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hook of this Hook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this Hook.

        Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three

        :return: The actions of this Hook.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this Hook.

        Actions you want to be notified. Possible inputs are created, started, and finished or any combination of those three

        :param actions: The actions of this Hook.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def event_type(self):
        """Gets the event_type of this Hook.

        Entity events you want to be notified. If all is selected, there is no need to enter actions

        :return: The event_type of this Hook.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Hook.

        Entity events you want to be notified. If all is selected, there is no need to enter actions

        :param event_type: The event_type of this Hook.
        :type event_type: str
        """
        allowed_values = ["all", "check"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def signing_key(self):
        """Gets the signing_key of this Hook.

        Secret random hexadecimal key used to sign the event and confirm its legitimacy. Signing keys are used to decode the JWT you get as payload from events

        :return: The signing_key of this Hook.
        :rtype: str
        """
        return self._signing_key

    @signing_key.setter
    def signing_key(self, signing_key):
        """Sets the signing_key of this Hook.

        Secret random hexadecimal key used to sign the event and confirm its legitimacy. Signing keys are used to decode the JWT you get as payload from events

        :param signing_key: The signing_key of this Hook.
        :type signing_key: str
        """

        self._signing_key = signing_key

    @property
    def status(self):
        """Gets the status of this Hook.

        indicates whether the hook is active or not. enabled by default

        :return: The status of this Hook.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Hook.

        indicates whether the hook is active or not. enabled by default

        :param status: The status of this Hook.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscriber_type(self):
        """Gets the subscriber_type of this Hook.

        Platform with an endpoint ready to process the information. Only web is supported currently

        :return: The subscriber_type of this Hook.
        :rtype: str
        """
        return self._subscriber_type

    @subscriber_type.setter
    def subscriber_type(self, subscriber_type):
        """Sets the subscriber_type of this Hook.

        Platform with an endpoint ready to process the information. Only web is supported currently

        :param subscriber_type: The subscriber_type of this Hook.
        :type subscriber_type: str
        """

        self._subscriber_type = subscriber_type

    @property
    def subscriber_url(self):
        """Gets the subscriber_url of this Hook.

        Link where notification requests will be sent, required when subscriber_type is web

        :return: The subscriber_url of this Hook.
        :rtype: str
        """
        return self._subscriber_url

    @subscriber_url.setter
    def subscriber_url(self, subscriber_url):
        """Sets the subscriber_url of this Hook.

        Link where notification requests will be sent, required when subscriber_type is web

        :param subscriber_url: The subscriber_url of this Hook.
        :type subscriber_url: str
        """

        self._subscriber_url = subscriber_url
