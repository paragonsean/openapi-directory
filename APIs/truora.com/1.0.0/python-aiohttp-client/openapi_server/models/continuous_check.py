# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check import Check
from openapi_server.models.continuous_check_entry import ContinuousCheckEntry
from openapi_server import util


class ContinuousCheck(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, continuous_check_id: str=None, continuous_check_status: str=None, creation_date: date=None, enabled: bool=None, frequency: str=None, history: ContinuousCheckEntry=None, last_check_id: str=None, next_run_date: date=None, original_check: Check=None, update_date: date=None):
        """ContinuousCheck - a model defined in OpenAPI

        :param continuous_check_id: The continuous_check_id of this ContinuousCheck.
        :param continuous_check_status: The continuous_check_status of this ContinuousCheck.
        :param creation_date: The creation_date of this ContinuousCheck.
        :param enabled: The enabled of this ContinuousCheck.
        :param frequency: The frequency of this ContinuousCheck.
        :param history: The history of this ContinuousCheck.
        :param last_check_id: The last_check_id of this ContinuousCheck.
        :param next_run_date: The next_run_date of this ContinuousCheck.
        :param original_check: The original_check of this ContinuousCheck.
        :param update_date: The update_date of this ContinuousCheck.
        """
        self.openapi_types = {
            'continuous_check_id': str,
            'continuous_check_status': str,
            'creation_date': date,
            'enabled': bool,
            'frequency': str,
            'history': ContinuousCheckEntry,
            'last_check_id': str,
            'next_run_date': date,
            'original_check': Check,
            'update_date': date
        }

        self.attribute_map = {
            'continuous_check_id': 'ContinuousCheckID',
            'continuous_check_status': 'ContinuousCheckStatus',
            'creation_date': 'CreationDate',
            'enabled': 'Enabled',
            'frequency': 'Frequency',
            'history': 'History',
            'last_check_id': 'LastCheckID',
            'next_run_date': 'NextRunDate',
            'original_check': 'OriginalCheck',
            'update_date': 'UpdateDate'
        }

        self._continuous_check_id = continuous_check_id
        self._continuous_check_status = continuous_check_status
        self._creation_date = creation_date
        self._enabled = enabled
        self._frequency = frequency
        self._history = history
        self._last_check_id = last_check_id
        self._next_run_date = next_run_date
        self._original_check = original_check
        self._update_date = update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinuousCheck':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContinuousCheck of this ContinuousCheck.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continuous_check_id(self):
        """Gets the continuous_check_id of this ContinuousCheck.

        Continuous check ID [partition key and sort key]

        :return: The continuous_check_id of this ContinuousCheck.
        :rtype: str
        """
        return self._continuous_check_id

    @continuous_check_id.setter
    def continuous_check_id(self, continuous_check_id):
        """Sets the continuous_check_id of this ContinuousCheck.

        Continuous check ID [partition key and sort key]

        :param continuous_check_id: The continuous_check_id of this ContinuousCheck.
        :type continuous_check_id: str
        """

        self._continuous_check_id = continuous_check_id

    @property
    def continuous_check_status(self):
        """Gets the continuous_check_status of this ContinuousCheck.

        Shows whether the background check score rose, fell, stood the same or was just created

        :return: The continuous_check_status of this ContinuousCheck.
        :rtype: str
        """
        return self._continuous_check_status

    @continuous_check_status.setter
    def continuous_check_status(self, continuous_check_status):
        """Sets the continuous_check_status of this ContinuousCheck.

        Shows whether the background check score rose, fell, stood the same or was just created

        :param continuous_check_status: The continuous_check_status of this ContinuousCheck.
        :type continuous_check_status: str
        """
        allowed_values = ["new", "up", "down", "same"]  # noqa: E501
        if continuous_check_status not in allowed_values:
            raise ValueError(
                "Invalid value for `continuous_check_status` ({0}), must be one of {1}"
                .format(continuous_check_status, allowed_values)
            )

        self._continuous_check_status = continuous_check_status

    @property
    def creation_date(self):
        """Gets the creation_date of this ContinuousCheck.

        Continuous check creation date in RFC3339 format

        :return: The creation_date of this ContinuousCheck.
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ContinuousCheck.

        Continuous check creation date in RFC3339 format

        :param creation_date: The creation_date of this ContinuousCheck.
        :type creation_date: date
        """

        self._creation_date = creation_date

    @property
    def enabled(self):
        """Gets the enabled of this ContinuousCheck.

        Indicates whether continuous check is enabled

        :return: The enabled of this ContinuousCheck.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ContinuousCheck.

        Indicates whether continuous check is enabled

        :param enabled: The enabled of this ContinuousCheck.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def frequency(self):
        """Gets the frequency of this ContinuousCheck.

        Time between background checks. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks

        :return: The frequency of this ContinuousCheck.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ContinuousCheck.

        Time between background checks. It can be daily, weekly, monthly, yearly or have a custom frequency written as a number accompanied by d: day, w: week, m: month, y: year for instance: 3d: every three days, 2w: every two weeks

        :param frequency: The frequency of this ContinuousCheck.
        :type frequency: str
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def history(self):
        """Gets the history of this ContinuousCheck.


        :return: The history of this ContinuousCheck.
        :rtype: ContinuousCheckEntry
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this ContinuousCheck.


        :param history: The history of this ContinuousCheck.
        :type history: ContinuousCheckEntry
        """

        self._history = history

    @property
    def last_check_id(self):
        """Gets the last_check_id of this ContinuousCheck.

        Last check ID

        :return: The last_check_id of this ContinuousCheck.
        :rtype: str
        """
        return self._last_check_id

    @last_check_id.setter
    def last_check_id(self, last_check_id):
        """Sets the last_check_id of this ContinuousCheck.

        Last check ID

        :param last_check_id: The last_check_id of this ContinuousCheck.
        :type last_check_id: str
        """
        if last_check_id is None:
            raise ValueError("Invalid value for `last_check_id`, must not be `None`")

        self._last_check_id = last_check_id

    @property
    def next_run_date(self):
        """Gets the next_run_date of this ContinuousCheck.

        Next background check date, in RFC3339 format (without time)

        :return: The next_run_date of this ContinuousCheck.
        :rtype: date
        """
        return self._next_run_date

    @next_run_date.setter
    def next_run_date(self, next_run_date):
        """Sets the next_run_date of this ContinuousCheck.

        Next background check date, in RFC3339 format (without time)

        :param next_run_date: The next_run_date of this ContinuousCheck.
        :type next_run_date: date
        """

        self._next_run_date = next_run_date

    @property
    def original_check(self):
        """Gets the original_check of this ContinuousCheck.


        :return: The original_check of this ContinuousCheck.
        :rtype: Check
        """
        return self._original_check

    @original_check.setter
    def original_check(self, original_check):
        """Sets the original_check of this ContinuousCheck.


        :param original_check: The original_check of this ContinuousCheck.
        :type original_check: Check
        """

        self._original_check = original_check

    @property
    def update_date(self):
        """Gets the update_date of this ContinuousCheck.

        Continuous check update date in RFC3339 format

        :return: The update_date of this ContinuousCheck.
        :rtype: date
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this ContinuousCheck.

        Continuous check update date in RFC3339 format

        :param update_date: The update_date of this ContinuousCheck.
        :type update_date: date
        """

        self._update_date = update_date
