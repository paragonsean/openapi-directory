# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set: str=None, database_id: str=None, database_name: str=None, invalid_inputs: List[str]=None, status: str=None):
        """Status - a model defined in OpenAPI

        :param data_set: The data_set of this Status.
        :param database_id: The database_id of this Status.
        :param database_name: The database_name of this Status.
        :param invalid_inputs: The invalid_inputs of this Status.
        :param status: The status of this Status.
        """
        self.openapi_types = {
            'data_set': str,
            'database_id': str,
            'database_name': str,
            'invalid_inputs': List[str],
            'status': str
        }

        self.attribute_map = {
            'data_set': 'data_set',
            'database_id': 'database_id',
            'database_name': 'database_name',
            'invalid_inputs': 'invalid_inputs',
            'status': 'status'
        }

        self._data_set = data_set
        self._database_id = database_id
        self._database_name = database_name
        self._invalid_inputs = invalid_inputs
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set(self):
        """Gets the data_set of this Status.

        Background check dataset

        :return: The data_set of this Status.
        :rtype: str
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set):
        """Sets the data_set of this Status.

        Background check dataset

        :param data_set: The data_set of this Status.
        :type data_set: str
        """
        allowed_values = ["affiliations_and_insurances", "alert_in_media", "behavior", "business_background", "criminal_record", "driving_licenses", "international_background", "legal_background", "personal_identity", "professional_background", "traffic_fines", "vehicle_information", "vehicle_permits", "taxes_and_finances"]  # noqa: E501
        if data_set not in allowed_values:
            raise ValueError(
                "Invalid value for `data_set` ({0}), must be one of {1}"
                .format(data_set, allowed_values)
            )

        self._data_set = data_set

    @property
    def database_id(self):
        """Gets the database_id of this Status.

        Database ID. Can be used to verify the database status

        :return: The database_id of this Status.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this Status.

        Database ID. Can be used to verify the database status

        :param database_id: The database_id of this Status.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def database_name(self):
        """Gets the database_name of this Status.

        Background check database name. Do not use this field to identify the database as it may change during the check execution. Use database_id instead

        :return: The database_name of this Status.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this Status.

        Background check database name. Do not use this field to identify the database as it may change during the check execution. Use database_id instead

        :param database_name: The database_name of this Status.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def invalid_inputs(self):
        """Gets the invalid_inputs of this Status.

        List of missing or invalid inputs

        :return: The invalid_inputs of this Status.
        :rtype: List[str]
        """
        return self._invalid_inputs

    @invalid_inputs.setter
    def invalid_inputs(self, invalid_inputs):
        """Sets the invalid_inputs of this Status.

        List of missing or invalid inputs

        :param invalid_inputs: The invalid_inputs of this Status.
        :type invalid_inputs: List[str]
        """

        self._invalid_inputs = invalid_inputs

    @property
    def status(self):
        """Gets the status of this Status.

        Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the search finished successfully, **error** means the search failed, **expired** means the search took too long to finish and therefore failed, **skipped** means the search failed because a wrong number or type of parameters was provided, **delayed** means the search is waiting for an additional requirement to be met and can last up to 3 days

        :return: The status of this Status.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Status.

        Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the search finished successfully, **error** means the search failed, **expired** means the search took too long to finish and therefore failed, **skipped** means the search failed because a wrong number or type of parameters was provided, **delayed** means the search is waiting for an additional requirement to be met and can last up to 3 days

        :param status: The status of this Status.
        :type status: str
        """
        allowed_values = ["not_started", "completed", "expired", "error", "delayed", "skipped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
