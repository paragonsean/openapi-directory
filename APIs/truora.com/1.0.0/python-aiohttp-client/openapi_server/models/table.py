# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_row import TableRow
from openapi_server import util


class Table(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rows: List[TableRow]=None, title: str=None):
        """Table - a model defined in OpenAPI

        :param rows: The rows of this Table.
        :param title: The title of this Table.
        """
        self.openapi_types = {
            'rows': List[TableRow],
            'title': str
        }

        self.attribute_map = {
            'rows': 'rows',
            'title': 'title'
        }

        self._rows = rows
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Table':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Table of this Table.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rows(self):
        """Gets the rows of this Table.

        Table rows

        :return: The rows of this Table.
        :rtype: List[TableRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this Table.

        Table rows

        :param rows: The rows of this Table.
        :type rows: List[TableRow]
        """
        if rows is None:
            raise ValueError("Invalid value for `rows`, must not be `None`")

        self._rows = rows

    @property
    def title(self):
        """Gets the title of this Table.

        Table title

        :return: The title of this Table.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Table.

        Table title

        :param title: The title of this Table.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
