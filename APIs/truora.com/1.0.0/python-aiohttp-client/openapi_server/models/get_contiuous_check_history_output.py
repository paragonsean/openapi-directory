# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change import Change
from openapi_server import util


class GetContiuousCheckHistoryOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, history: List[Change]=None, next: str=None, _self: str=None):
        """GetContiuousCheckHistoryOutput - a model defined in OpenAPI

        :param history: The history of this GetContiuousCheckHistoryOutput.
        :param next: The next of this GetContiuousCheckHistoryOutput.
        :param _self: The _self of this GetContiuousCheckHistoryOutput.
        """
        self.openapi_types = {
            'history': List[Change],
            'next': str,
            '_self': str
        }

        self.attribute_map = {
            'history': 'history',
            'next': 'next',
            '_self': 'self'
        }

        self._history = history
        self._next = next
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetContiuousCheckHistoryOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetContiuousCheckHistoryOutput of this GetContiuousCheckHistoryOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def history(self):
        """Gets the history of this GetContiuousCheckHistoryOutput.

        List of background check changelogs

        :return: The history of this GetContiuousCheckHistoryOutput.
        :rtype: List[Change]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this GetContiuousCheckHistoryOutput.

        List of background check changelogs

        :param history: The history of this GetContiuousCheckHistoryOutput.
        :type history: List[Change]
        """
        if history is None:
            raise ValueError("Invalid value for `history`, must not be `None`")

        self._history = history

    @property
    def next(self):
        """Gets the next of this GetContiuousCheckHistoryOutput.

        Next page URL

        :return: The next of this GetContiuousCheckHistoryOutput.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this GetContiuousCheckHistoryOutput.

        Next page URL

        :param next: The next of this GetContiuousCheckHistoryOutput.
        :type next: str
        """

        self._next = next

    @property
    def _self(self):
        """Gets the _self of this GetContiuousCheckHistoryOutput.

        Current page URL

        :return: The _self of this GetContiuousCheckHistoryOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this GetContiuousCheckHistoryOutput.

        Current page URL

        :param _self: The _self of this GetContiuousCheckHistoryOutput.
        :type _self: str
        """

        self.__self = _self
