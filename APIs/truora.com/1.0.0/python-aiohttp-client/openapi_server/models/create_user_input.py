# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateUserInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, email: str=None, phone_number: str=None, tenant: str=None):
        """CreateUserInput - a model defined in OpenAPI

        :param country: The country of this CreateUserInput.
        :param email: The email of this CreateUserInput.
        :param phone_number: The phone_number of this CreateUserInput.
        :param tenant: The tenant of this CreateUserInput.
        """
        self.openapi_types = {
            'country': str,
            'email': str,
            'phone_number': str,
            'tenant': str
        }

        self.attribute_map = {
            'country': 'country',
            'email': 'email',
            'phone_number': 'phone_number',
            'tenant': 'tenant'
        }

        self._country = country
        self._email = email
        self._phone_number = phone_number
        self._tenant = tenant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserInput of this CreateUserInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CreateUserInput.

        User country

        :return: The country of this CreateUserInput.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreateUserInput.

        User country

        :param country: The country of this CreateUserInput.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def email(self):
        """Gets the email of this CreateUserInput.

        User account email

        :return: The email of this CreateUserInput.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserInput.

        User account email

        :param email: The email of this CreateUserInput.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateUserInput.

        User phone number (including country code)

        :return: The phone_number of this CreateUserInput.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateUserInput.

        User phone number (including country code)

        :param phone_number: The phone_number of this CreateUserInput.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def tenant(self):
        """Gets the tenant of this CreateUserInput.

        Account name

        :return: The tenant of this CreateUserInput.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this CreateUserInput.

        Account name

        :param tenant: The tenant of this CreateUserInput.
        :type tenant: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")

        self._tenant = tenant
