# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.name_found import NameFound
from openapi_server import util


class Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: datetime=None, death_date: datetime=None, drivers_license: str=None, gender: str=None, identity_status: str=None, names_found: List[NameFound]=None, nss: str=None, rfc: str=None):
        """Summary - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this Summary.
        :param death_date: The death_date of this Summary.
        :param drivers_license: The drivers_license of this Summary.
        :param gender: The gender of this Summary.
        :param identity_status: The identity_status of this Summary.
        :param names_found: The names_found of this Summary.
        :param nss: The nss of this Summary.
        :param rfc: The rfc of this Summary.
        """
        self.openapi_types = {
            'date_of_birth': datetime,
            'death_date': datetime,
            'drivers_license': str,
            'gender': str,
            'identity_status': str,
            'names_found': List[NameFound],
            'nss': str,
            'rfc': str
        }

        self.attribute_map = {
            'date_of_birth': 'date_of_birth',
            'death_date': 'death_date',
            'drivers_license': 'drivers_license',
            'gender': 'gender',
            'identity_status': 'identity_status',
            'names_found': 'names_found',
            'nss': 'nss',
            'rfc': 'rfc'
        }

        self._date_of_birth = date_of_birth
        self._death_date = death_date
        self._drivers_license = drivers_license
        self._gender = gender
        self._identity_status = identity_status
        self._names_found = names_found
        self._nss = nss
        self._rfc = rfc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Summary of this Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Summary.

        Person date of birth in RFC3339 format

        :return: The date_of_birth of this Summary.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Summary.

        Person date of birth in RFC3339 format

        :param date_of_birth: The date_of_birth of this Summary.
        :type date_of_birth: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def death_date(self):
        """Gets the death_date of this Summary.

        Person date of death

        :return: The death_date of this Summary.
        :rtype: datetime
        """
        return self._death_date

    @death_date.setter
    def death_date(self, death_date):
        """Sets the death_date of this Summary.

        Person date of death

        :param death_date: The death_date of this Summary.
        :type death_date: datetime
        """

        self._death_date = death_date

    @property
    def drivers_license(self):
        """Gets the drivers_license of this Summary.

        Person driver's license

        :return: The drivers_license of this Summary.
        :rtype: str
        """
        return self._drivers_license

    @drivers_license.setter
    def drivers_license(self, drivers_license):
        """Sets the drivers_license of this Summary.

        Person driver's license

        :param drivers_license: The drivers_license of this Summary.
        :type drivers_license: str
        """

        self._drivers_license = drivers_license

    @property
    def gender(self):
        """Gets the gender of this Summary.

        Person gender

        :return: The gender of this Summary.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Summary.

        Person gender

        :param gender: The gender of this Summary.
        :type gender: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def identity_status(self):
        """Gets the identity_status of this Summary.

        Indicates whether a person was found, found as dead or not found at all

        :return: The identity_status of this Summary.
        :rtype: str
        """
        return self._identity_status

    @identity_status.setter
    def identity_status(self, identity_status):
        """Sets the identity_status of this Summary.

        Indicates whether a person was found, found as dead or not found at all

        :param identity_status: The identity_status of this Summary.
        :type identity_status: str
        """
        allowed_values = ["found", "not_found", "dead"]  # noqa: E501
        if identity_status not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_status` ({0}), must be one of {1}"
                .format(identity_status, allowed_values)
            )

        self._identity_status = identity_status

    @property
    def names_found(self):
        """Gets the names_found of this Summary.

        Names found during the background check process

        :return: The names_found of this Summary.
        :rtype: List[NameFound]
        """
        return self._names_found

    @names_found.setter
    def names_found(self, names_found):
        """Sets the names_found of this Summary.

        Names found during the background check process

        :param names_found: The names_found of this Summary.
        :type names_found: List[NameFound]
        """
        if names_found is None:
            raise ValueError("Invalid value for `names_found`, must not be `None`")

        self._names_found = names_found

    @property
    def nss(self):
        """Gets the nss of this Summary.

        Social security number of the person (Mexico)

        :return: The nss of this Summary.
        :rtype: str
        """
        return self._nss

    @nss.setter
    def nss(self, nss):
        """Sets the nss of this Summary.

        Social security number of the person (Mexico)

        :param nss: The nss of this Summary.
        :type nss: str
        """

        self._nss = nss

    @property
    def rfc(self):
        """Gets the rfc of this Summary.

        Federal taxpayer registration number of the person

        :return: The rfc of this Summary.
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this Summary.

        Federal taxpayer registration number of the person

        :param rfc: The rfc of this Summary.
        :type rfc: str
        """

        self._rfc = rfc
