# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util


class CommentsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: List[Comment]=None, next: str=None, previous: str=None):
        """CommentsOutput - a model defined in OpenAPI

        :param comments: The comments of this CommentsOutput.
        :param next: The next of this CommentsOutput.
        :param previous: The previous of this CommentsOutput.
        """
        self.openapi_types = {
            'comments': List[Comment],
            'next': str,
            'previous': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'next': 'next',
            'previous': 'previous'
        }

        self._comments = comments
        self._next = next
        self._previous = previous

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentsOutput of this CommentsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this CommentsOutput.

        Comment list

        :return: The comments of this CommentsOutput.
        :rtype: List[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CommentsOutput.

        Comment list

        :param comments: The comments of this CommentsOutput.
        :type comments: List[Comment]
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")

        self._comments = comments

    @property
    def next(self):
        """Gets the next of this CommentsOutput.

        Next page path

        :return: The next of this CommentsOutput.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this CommentsOutput.

        Next page path

        :param next: The next of this CommentsOutput.
        :type next: str
        """
        if next is None:
            raise ValueError("Invalid value for `next`, must not be `None`")

        self._next = next

    @property
    def previous(self):
        """Gets the previous of this CommentsOutput.

        Previous page path

        :return: The previous of this CommentsOutput.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this CommentsOutput.

        Previous page path

        :param previous: The previous of this CommentsOutput.
        :type previous: str
        """
        if previous is None:
            raise ValueError("Invalid value for `previous`, must not be `None`")

        self._previous = previous
