# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table import Table
from openapi_server import util


class CheckDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_id: str=None, data_set: str=None, database_name: str=None, group: str=None, id: str=None, result: str=None, score: float=None, tables: List[Table]=None):
        """CheckDetails - a model defined in OpenAPI

        :param check_id: The check_id of this CheckDetails.
        :param data_set: The data_set of this CheckDetails.
        :param database_name: The database_name of this CheckDetails.
        :param group: The group of this CheckDetails.
        :param id: The id of this CheckDetails.
        :param result: The result of this CheckDetails.
        :param score: The score of this CheckDetails.
        :param tables: The tables of this CheckDetails.
        """
        self.openapi_types = {
            'check_id': str,
            'data_set': str,
            'database_name': str,
            'group': str,
            'id': str,
            'result': str,
            'score': float,
            'tables': List[Table]
        }

        self.attribute_map = {
            'check_id': 'check_id',
            'data_set': 'data_set',
            'database_name': 'database_name',
            'group': 'group',
            'id': 'id',
            'result': 'result',
            'score': 'score',
            'tables': 'tables'
        }

        self._check_id = check_id
        self._data_set = data_set
        self._database_name = database_name
        self._group = group
        self._id = id
        self._result = result
        self._score = score
        self._tables = tables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckDetails of this CheckDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_id(self):
        """Gets the check_id of this CheckDetails.

        Associated background check ID

        :return: The check_id of this CheckDetails.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this CheckDetails.

        Associated background check ID

        :param check_id: The check_id of this CheckDetails.
        :type check_id: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")

        self._check_id = check_id

    @property
    def data_set(self):
        """Gets the data_set of this CheckDetails.

        Details dataset

        :return: The data_set of this CheckDetails.
        :rtype: str
        """
        return self._data_set

    @data_set.setter
    def data_set(self, data_set):
        """Sets the data_set of this CheckDetails.

        Details dataset

        :param data_set: The data_set of this CheckDetails.
        :type data_set: str
        """
        if data_set is None:
            raise ValueError("Invalid value for `data_set`, must not be `None`")

        self._data_set = data_set

    @property
    def database_name(self):
        """Gets the database_name of this CheckDetails.

        Database name. Do not use this field to identify the database as its value may vary as the check is completed

        :return: The database_name of this CheckDetails.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this CheckDetails.

        Database name. Do not use this field to identify the database as its value may vary as the check is completed

        :param database_name: The database_name of this CheckDetails.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def group(self):
        """Gets the group of this CheckDetails.

        table group type

        :return: The group of this CheckDetails.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CheckDetails.

        table group type

        :param group: The group of this CheckDetails.
        :type group: str
        """
        allowed_values = ["profile", "legal", "affiliations", "vehicle", "global", "media", "unknown"]  # noqa: E501
        if group not in allowed_values:
            raise ValueError(
                "Invalid value for `group` ({0}), must be one of {1}"
                .format(group, allowed_values)
            )

        self._group = group

    @property
    def id(self):
        """Gets the id of this CheckDetails.

        Detail ID

        :return: The id of this CheckDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckDetails.

        Detail ID

        :param id: The id of this CheckDetails.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def result(self):
        """Gets the result of this CheckDetails.

        Database result

        :return: The result of this CheckDetails.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CheckDetails.

        Database result

        :param result: The result of this CheckDetails.
        :type result: str
        """
        allowed_values = ["pending", "found", "not_found", "error"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def score(self):
        """Gets the score of this CheckDetails.

        Partial detail score. Scores are aggregated later in the background check

        :return: The score of this CheckDetails.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CheckDetails.

        Partial detail score. Scores are aggregated later in the background check

        :param score: The score of this CheckDetails.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def tables(self):
        """Gets the tables of this CheckDetails.

        Query detailed information

        :return: The tables of this CheckDetails.
        :rtype: List[Table]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this CheckDetails.

        Query detailed information

        :param tables: The tables of this CheckDetails.
        :type tables: List[Table]
        """
        if tables is None:
            raise ValueError("Invalid value for `tables`, must not be `None`")

        self._tables = tables
