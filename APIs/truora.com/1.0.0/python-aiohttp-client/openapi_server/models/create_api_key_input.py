# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAPIKeyInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_exp: int=None, key_name: str=None, tenant: str=None, version: str=None):
        """CreateAPIKeyInput - a model defined in OpenAPI

        :param days_exp: The days_exp of this CreateAPIKeyInput.
        :param key_name: The key_name of this CreateAPIKeyInput.
        :param tenant: The tenant of this CreateAPIKeyInput.
        :param version: The version of this CreateAPIKeyInput.
        """
        self.openapi_types = {
            'days_exp': int,
            'key_name': str,
            'tenant': str,
            'version': str
        }

        self.attribute_map = {
            'days_exp': 'days_exp',
            'key_name': 'key_name',
            'tenant': 'tenant',
            'version': 'version'
        }

        self._days_exp = days_exp
        self._key_name = key_name
        self._tenant = tenant
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAPIKeyInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAPIKeyInput of this CreateAPIKeyInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_exp(self):
        """Gets the days_exp of this CreateAPIKeyInput.

        Time in days the API key will be valid for. 365 by default

        :return: The days_exp of this CreateAPIKeyInput.
        :rtype: int
        """
        return self._days_exp

    @days_exp.setter
    def days_exp(self, days_exp):
        """Sets the days_exp of this CreateAPIKeyInput.

        Time in days the API key will be valid for. 365 by default

        :param days_exp: The days_exp of this CreateAPIKeyInput.
        :type days_exp: int
        """
        if days_exp is None:
            raise ValueError("Invalid value for `days_exp`, must not be `None`")

        self._days_exp = days_exp

    @property
    def key_name(self):
        """Gets the key_name of this CreateAPIKeyInput.

        API key name

        :return: The key_name of this CreateAPIKeyInput.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this CreateAPIKeyInput.

        API key name

        :param key_name: The key_name of this CreateAPIKeyInput.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def tenant(self):
        """Gets the tenant of this CreateAPIKeyInput.

        API key owner name

        :return: The tenant of this CreateAPIKeyInput.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this CreateAPIKeyInput.

        API key owner name

        :param tenant: The tenant of this CreateAPIKeyInput.
        :type tenant: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")

        self._tenant = tenant

    @property
    def version(self):
        """Gets the version of this CreateAPIKeyInput.

        API key version. 0 by default

        :return: The version of this CreateAPIKeyInput.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateAPIKeyInput.

        API key version. 0 by default

        :param version: The version of this CreateAPIKeyInput.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
