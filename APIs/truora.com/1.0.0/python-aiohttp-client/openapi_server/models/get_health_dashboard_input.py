# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetHealthDashboardInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, unix_timestamp_seconds: str=None, unixtimezone_offset_seconds: str=None):
        """GetHealthDashboardInput - a model defined in OpenAPI

        :param country: The country of this GetHealthDashboardInput.
        :param unix_timestamp_seconds: The unix_timestamp_seconds of this GetHealthDashboardInput.
        :param unixtimezone_offset_seconds: The unixtimezone_offset_seconds of this GetHealthDashboardInput.
        """
        self.openapi_types = {
            'country': str,
            'unix_timestamp_seconds': str,
            'unixtimezone_offset_seconds': str
        }

        self.attribute_map = {
            'country': 'country',
            'unix_timestamp_seconds': 'unixTimestampSeconds',
            'unixtimezone_offset_seconds': 'unixtimezoneOffsetSeconds'
        }

        self._country = country
        self._unix_timestamp_seconds = unix_timestamp_seconds
        self._unixtimezone_offset_seconds = unixtimezone_offset_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetHealthDashboardInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetHealthDashboardInput of this GetHealthDashboardInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this GetHealthDashboardInput.

        Database country in ISO 3166 code. Must be in all caps.

        :return: The country of this GetHealthDashboardInput.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GetHealthDashboardInput.

        Database country in ISO 3166 code. Must be in all caps.

        :param country: The country of this GetHealthDashboardInput.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def unix_timestamp_seconds(self):
        """Gets the unix_timestamp_seconds of this GetHealthDashboardInput.

        Unix timestamp. Send the current time to know the status

        :return: The unix_timestamp_seconds of this GetHealthDashboardInput.
        :rtype: str
        """
        return self._unix_timestamp_seconds

    @unix_timestamp_seconds.setter
    def unix_timestamp_seconds(self, unix_timestamp_seconds):
        """Sets the unix_timestamp_seconds of this GetHealthDashboardInput.

        Unix timestamp. Send the current time to know the status

        :param unix_timestamp_seconds: The unix_timestamp_seconds of this GetHealthDashboardInput.
        :type unix_timestamp_seconds: str
        """
        if unix_timestamp_seconds is None:
            raise ValueError("Invalid value for `unix_timestamp_seconds`, must not be `None`")

        self._unix_timestamp_seconds = unix_timestamp_seconds

    @property
    def unixtimezone_offset_seconds(self):
        """Gets the unixtimezone_offset_seconds of this GetHealthDashboardInput.

        Offset between the local time and the UTC time in seconds. (e.g., Colombia is located at UTC -18000 seconds)

        :return: The unixtimezone_offset_seconds of this GetHealthDashboardInput.
        :rtype: str
        """
        return self._unixtimezone_offset_seconds

    @unixtimezone_offset_seconds.setter
    def unixtimezone_offset_seconds(self, unixtimezone_offset_seconds):
        """Sets the unixtimezone_offset_seconds of this GetHealthDashboardInput.

        Offset between the local time and the UTC time in seconds. (e.g., Colombia is located at UTC -18000 seconds)

        :param unixtimezone_offset_seconds: The unixtimezone_offset_seconds of this GetHealthDashboardInput.
        :type unixtimezone_offset_seconds: str
        """
        if unixtimezone_offset_seconds is None:
            raise ValueError("Invalid value for `unixtimezone_offset_seconds`, must not be `None`")

        self._unixtimezone_offset_seconds = unixtimezone_offset_seconds
