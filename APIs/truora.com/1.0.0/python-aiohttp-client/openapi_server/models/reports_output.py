# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report import Report
from openapi_server import util


class ReportsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next: str=None, reports: List[Report]=None, _self: str=None):
        """ReportsOutput - a model defined in OpenAPI

        :param next: The next of this ReportsOutput.
        :param reports: The reports of this ReportsOutput.
        :param _self: The _self of this ReportsOutput.
        """
        self.openapi_types = {
            'next': str,
            'reports': List[Report],
            '_self': str
        }

        self.attribute_map = {
            'next': 'next',
            'reports': 'reports',
            '_self': 'self'
        }

        self._next = next
        self._reports = reports
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportsOutput of this ReportsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next(self):
        """Gets the next of this ReportsOutput.

        Next page path

        :return: The next of this ReportsOutput.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this ReportsOutput.

        Next page path

        :param next: The next of this ReportsOutput.
        :type next: str
        """

        self._next = next

    @property
    def reports(self):
        """Gets the reports of this ReportsOutput.

        Report list

        :return: The reports of this ReportsOutput.
        :rtype: List[Report]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this ReportsOutput.

        Report list

        :param reports: The reports of this ReportsOutput.
        :type reports: List[Report]
        """
        if reports is None:
            raise ValueError("Invalid value for `reports`, must not be `None`")

        self._reports = reports

    @property
    def _self(self):
        """Gets the _self of this ReportsOutput.

        Current page path

        :return: The _self of this ReportsOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ReportsOutput.

        Current page path

        :param _self: The _self of this ReportsOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
