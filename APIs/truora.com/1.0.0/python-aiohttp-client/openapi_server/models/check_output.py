# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check import Check
from openapi_server import util


class CheckOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check: Check=None, details: str=None, _self: str=None):
        """CheckOutput - a model defined in OpenAPI

        :param check: The check of this CheckOutput.
        :param details: The details of this CheckOutput.
        :param _self: The _self of this CheckOutput.
        """
        self.openapi_types = {
            'check': Check,
            'details': str,
            '_self': str
        }

        self.attribute_map = {
            'check': 'check',
            'details': 'details',
            '_self': 'self'
        }

        self._check = check
        self._details = details
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckOutput of this CheckOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check(self):
        """Gets the check of this CheckOutput.


        :return: The check of this CheckOutput.
        :rtype: Check
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this CheckOutput.


        :param check: The check of this CheckOutput.
        :type check: Check
        """
        if check is None:
            raise ValueError("Invalid value for `check`, must not be `None`")

        self._check = check

    @property
    def details(self):
        """Gets the details of this CheckOutput.

        Detail path

        :return: The details of this CheckOutput.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this CheckOutput.

        Detail path

        :param details: The details of this CheckOutput.
        :type details: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def _self(self):
        """Gets the _self of this CheckOutput.

        Background check URL

        :return: The _self of this CheckOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CheckOutput.

        Background check URL

        :param _self: The _self of this CheckOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
