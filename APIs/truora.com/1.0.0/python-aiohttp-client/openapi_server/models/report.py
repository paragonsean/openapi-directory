# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_by: str=None, created_checks_count: int=None, creation_date: datetime=None, has_data: bool=None, id: str=None, invalid_checks_count: int=None, name: str=None, size: int=None, update_date: datetime=None):
        """Report - a model defined in OpenAPI

        :param created_by: The created_by of this Report.
        :param created_checks_count: The created_checks_count of this Report.
        :param creation_date: The creation_date of this Report.
        :param has_data: The has_data of this Report.
        :param id: The id of this Report.
        :param invalid_checks_count: The invalid_checks_count of this Report.
        :param name: The name of this Report.
        :param size: The size of this Report.
        :param update_date: The update_date of this Report.
        """
        self.openapi_types = {
            'created_by': str,
            'created_checks_count': int,
            'creation_date': datetime,
            'has_data': bool,
            'id': str,
            'invalid_checks_count': int,
            'name': str,
            'size': int,
            'update_date': datetime
        }

        self.attribute_map = {
            'created_by': 'created_by',
            'created_checks_count': 'created_checks_count',
            'creation_date': 'creation_date',
            'has_data': 'has_data',
            'id': 'id',
            'invalid_checks_count': 'invalid_checks_count',
            'name': 'name',
            'size': 'size',
            'update_date': 'update_date'
        }

        self._created_by = created_by
        self._created_checks_count = created_checks_count
        self._creation_date = creation_date
        self._has_data = has_data
        self._id = id
        self._invalid_checks_count = invalid_checks_count
        self._name = name
        self._size = size
        self._update_date = update_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_by(self):
        """Gets the created_by of this Report.

        name of the user who created the report

        :return: The created_by of this Report.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Report.

        name of the user who created the report

        :param created_by: The created_by of this Report.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def created_checks_count(self):
        """Gets the created_checks_count of this Report.

        Amount of created checks. Returned only when a file is uploaded

        :return: The created_checks_count of this Report.
        :rtype: int
        """
        return self._created_checks_count

    @created_checks_count.setter
    def created_checks_count(self, created_checks_count):
        """Sets the created_checks_count of this Report.

        Amount of created checks. Returned only when a file is uploaded

        :param created_checks_count: The created_checks_count of this Report.
        :type created_checks_count: int
        """

        self._created_checks_count = created_checks_count

    @property
    def creation_date(self):
        """Gets the creation_date of this Report.

        Report creation date

        :return: The creation_date of this Report.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Report.

        Report creation date

        :param creation_date: The creation_date of this Report.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def has_data(self):
        """Gets the has_data of this Report.

        Indicates whether the report has an associated file

        :return: The has_data of this Report.
        :rtype: bool
        """
        return self._has_data

    @has_data.setter
    def has_data(self, has_data):
        """Sets the has_data of this Report.

        Indicates whether the report has an associated file

        :param has_data: The has_data of this Report.
        :type has_data: bool
        """

        self._has_data = has_data

    @property
    def id(self):
        """Gets the id of this Report.

        Report ID

        :return: The id of this Report.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        Report ID

        :param id: The id of this Report.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invalid_checks_count(self):
        """Gets the invalid_checks_count of this Report.

        number of invalid rows in the uploaded file. Returned only when a file is uploaded

        :return: The invalid_checks_count of this Report.
        :rtype: int
        """
        return self._invalid_checks_count

    @invalid_checks_count.setter
    def invalid_checks_count(self, invalid_checks_count):
        """Sets the invalid_checks_count of this Report.

        number of invalid rows in the uploaded file. Returned only when a file is uploaded

        :param invalid_checks_count: The invalid_checks_count of this Report.
        :type invalid_checks_count: int
        """

        self._invalid_checks_count = invalid_checks_count

    @property
    def name(self):
        """Gets the name of this Report.

        Report name

        :return: The name of this Report.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Report.

        Report name

        :param name: The name of this Report.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this Report.

        Uploaded file row count. Returned only when a file is uploaded

        :return: The size of this Report.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Report.

        Uploaded file row count. Returned only when a file is uploaded

        :param size: The size of this Report.
        :type size: int
        """

        self._size = size

    @property
    def update_date(self):
        """Gets the update_date of this Report.

        Latest modification date of the report

        :return: The update_date of this Report.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Report.

        Latest modification date of the report

        :param update_date: The update_date of this Report.
        :type update_date: datetime
        """
        if update_date is None:
            raise ValueError("Invalid value for `update_date`, must not be `None`")

        self._update_date = update_date
