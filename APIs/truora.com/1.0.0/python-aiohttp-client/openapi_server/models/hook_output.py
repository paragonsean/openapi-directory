# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hook import Hook
from openapi_server import util


class HookOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hooks: List[Hook]=None, next: str=None, _self: str=None, signing_key: str=None):
        """HookOutput - a model defined in OpenAPI

        :param hooks: The hooks of this HookOutput.
        :param next: The next of this HookOutput.
        :param _self: The _self of this HookOutput.
        :param signing_key: The signing_key of this HookOutput.
        """
        self.openapi_types = {
            'hooks': List[Hook],
            'next': str,
            '_self': str,
            'signing_key': str
        }

        self.attribute_map = {
            'hooks': 'hooks',
            'next': 'next',
            '_self': 'self',
            'signing_key': 'signing_key'
        }

        self._hooks = hooks
        self._next = next
        self.__self = _self
        self._signing_key = signing_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HookOutput of this HookOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hooks(self):
        """Gets the hooks of this HookOutput.

        List of hooks in current page.

        :return: The hooks of this HookOutput.
        :rtype: List[Hook]
        """
        return self._hooks

    @hooks.setter
    def hooks(self, hooks):
        """Sets the hooks of this HookOutput.

        List of hooks in current page.

        :param hooks: The hooks of this HookOutput.
        :type hooks: List[Hook]
        """

        self._hooks = hooks

    @property
    def next(self):
        """Gets the next of this HookOutput.

        Next page URL

        :return: The next of this HookOutput.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this HookOutput.

        Next page URL

        :param next: The next of this HookOutput.
        :type next: str
        """

        self._next = next

    @property
    def _self(self):
        """Gets the _self of this HookOutput.

        Current page URL

        :return: The _self of this HookOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this HookOutput.

        Current page URL

        :param _self: The _self of this HookOutput.
        :type _self: str
        """

        self.__self = _self

    @property
    def signing_key(self):
        """Gets the signing_key of this HookOutput.

        HMAC key needed to decode the JWTs you will receive. All events are sent in JWT format, this key is needed in order to ensure that only authorized users can decode the information.

        :return: The signing_key of this HookOutput.
        :rtype: str
        """
        return self._signing_key

    @signing_key.setter
    def signing_key(self, signing_key):
        """Sets the signing_key of this HookOutput.

        HMAC key needed to decode the JWTs you will receive. All events are sent in JWT format, this key is needed in order to ensure that only authorized users can decode the information.

        :param signing_key: The signing_key of this HookOutput.
        :type signing_key: str
        """

        self._signing_key = signing_key
