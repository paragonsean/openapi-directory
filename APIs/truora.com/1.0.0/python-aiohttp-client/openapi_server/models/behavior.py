# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Behavior(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_date: date=None, country: str=None, creation_date: datetime=None, document_id: str=None, document_type: str=None, email: str=None, feedback_date: date=None, first_name: str=None, last_name: str=None, phone_number: str=None, reason: str=None):
        """Behavior - a model defined in OpenAPI

        :param birth_date: The birth_date of this Behavior.
        :param country: The country of this Behavior.
        :param creation_date: The creation_date of this Behavior.
        :param document_id: The document_id of this Behavior.
        :param document_type: The document_type of this Behavior.
        :param email: The email of this Behavior.
        :param feedback_date: The feedback_date of this Behavior.
        :param first_name: The first_name of this Behavior.
        :param last_name: The last_name of this Behavior.
        :param phone_number: The phone_number of this Behavior.
        :param reason: The reason of this Behavior.
        """
        self.openapi_types = {
            'birth_date': date,
            'country': str,
            'creation_date': datetime,
            'document_id': str,
            'document_type': str,
            'email': str,
            'feedback_date': date,
            'first_name': str,
            'last_name': str,
            'phone_number': str,
            'reason': str
        }

        self.attribute_map = {
            'birth_date': 'birth_date',
            'country': 'country',
            'creation_date': 'creation_date',
            'document_id': 'document_id',
            'document_type': 'document_type',
            'email': 'email',
            'feedback_date': 'feedback_date',
            'first_name': 'first_name',
            'last_name': 'last_name',
            'phone_number': 'phone_number',
            'reason': 'reason'
        }

        self._birth_date = birth_date
        self._country = country
        self._creation_date = creation_date
        self._document_id = document_id
        self._document_type = document_type
        self._email = email
        self._feedback_date = feedback_date
        self._first_name = first_name
        self._last_name = last_name
        self._phone_number = phone_number
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Behavior':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Behavior of this Behavior.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_date(self):
        """Gets the birth_date of this Behavior.

        Birth date of reported person

        :return: The birth_date of this Behavior.
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Behavior.

        Birth date of reported person

        :param birth_date: The birth_date of this Behavior.
        :type birth_date: date
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")

        self._birth_date = birth_date

    @property
    def country(self):
        """Gets the country of this Behavior.

        Document country

        :return: The country of this Behavior.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Behavior.

        Document country

        :param country: The country of this Behavior.
        :type country: str
        """
        allowed_values = ["co", "ve", "cl", "mx", "pe", "do", "sv", "gt", "bo", "cr", "ec", "pa", "br"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def creation_date(self):
        """Gets the creation_date of this Behavior.

        Feedback creation date

        :return: The creation_date of this Behavior.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Behavior.

        Feedback creation date

        :param creation_date: The creation_date of this Behavior.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def document_id(self):
        """Gets the document_id of this Behavior.

        Person document ID

        :return: The document_id of this Behavior.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Behavior.

        Person document ID

        :param document_id: The document_id of this Behavior.
        :type document_id: str
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")

        self._document_id = document_id

    @property
    def document_type(self):
        """Gets the document_type of this Behavior.

        Document type associated with the background check

        :return: The document_type of this Behavior.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Behavior.

        Document type associated with the background check

        :param document_type: The document_type of this Behavior.
        :type document_type: str
        """
        allowed_values = ["national-id", "passport", "foreign-id", "nit", "diplomatic-id", "civil-registration", "identity-card", "foreigner-card", "professional-card", "military-card", "pep", "nis", "dni", "rui", "license-plate", "query", "name", "rut", "nuip", "foreign-societies", "escrow", "individual-registration", "general-registration", "curp", "dui", "driver-license", "ruc"]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def email(self):
        """Gets the email of this Behavior.

        Reported person e-mail

        :return: The email of this Behavior.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Behavior.

        Reported person e-mail

        :param email: The email of this Behavior.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def feedback_date(self):
        """Gets the feedback_date of this Behavior.

        Behavior report date

        :return: The feedback_date of this Behavior.
        :rtype: date
        """
        return self._feedback_date

    @feedback_date.setter
    def feedback_date(self, feedback_date):
        """Sets the feedback_date of this Behavior.

        Behavior report date

        :param feedback_date: The feedback_date of this Behavior.
        :type feedback_date: date
        """
        if feedback_date is None:
            raise ValueError("Invalid value for `feedback_date`, must not be `None`")

        self._feedback_date = feedback_date

    @property
    def first_name(self):
        """Gets the first_name of this Behavior.

        Person first name

        :return: The first_name of this Behavior.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Behavior.

        Person first name

        :param first_name: The first_name of this Behavior.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Behavior.

        Person last name

        :return: The last_name of this Behavior.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Behavior.

        Person last name

        :param last_name: The last_name of this Behavior.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this Behavior.

        Phone number of the reported person

        :return: The phone_number of this Behavior.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Behavior.

        Phone number of the reported person

        :param phone_number: The phone_number of this Behavior.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def reason(self):
        """Gets the reason of this Behavior.

        Report reason

        :return: The reason of this Behavior.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Behavior.

        Report reason

        :param reason: The reason of this Behavior.
        :type reason: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")

        self._reason = reason
