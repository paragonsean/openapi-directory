# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScoreDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result: str=None, score: float=None, severity: str=None):
        """ScoreDetail - a model defined in OpenAPI

        :param result: The result of this ScoreDetail.
        :param score: The score of this ScoreDetail.
        :param severity: The severity of this ScoreDetail.
        """
        self.openapi_types = {
            'result': str,
            'score': float,
            'severity': str
        }

        self.attribute_map = {
            'result': 'result',
            'score': 'score',
            'severity': 'severity'
        }

        self._result = result
        self._score = score
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreDetail of this ScoreDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self):
        """Gets the result of this ScoreDetail.

        Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status

        :return: The result of this ScoreDetail.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ScoreDetail.

        Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status

        :param result: The result of this ScoreDetail.
        :type result: str
        """
        allowed_values = ["pending", "found", "not_found", "error", "delayed", "ignored"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def score(self):
        """Gets the score of this ScoreDetail.

        Dataset score. Number between 0 and 1 where 1 is the best score.

        :return: The score of this ScoreDetail.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ScoreDetail.

        Dataset score. Number between 0 and 1 where 1 is the best score.

        :param score: The score of this ScoreDetail.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def severity(self):
        """Gets the severity of this ScoreDetail.

        Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none

        :return: The severity of this ScoreDetail.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ScoreDetail.

        Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none

        :param severity: The severity of this ScoreDetail.
        :type severity: str
        """
        allowed_values = ["unknown", "none", "very_low", "low", "medium", "high", "very_high"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
