# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NameFound(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, first_name: str=None, last_name: str=None):
        """NameFound - a model defined in OpenAPI

        :param count: The count of this NameFound.
        :param first_name: The first_name of this NameFound.
        :param last_name: The last_name of this NameFound.
        """
        self.openapi_types = {
            'count': int,
            'first_name': str,
            'last_name': str
        }

        self.attribute_map = {
            'count': 'count',
            'first_name': 'first_name',
            'last_name': 'last_name'
        }

        self._count = count
        self._first_name = first_name
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NameFound':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NameFound of this NameFound.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this NameFound.

        Times this name was found during the background check process

        :return: The count of this NameFound.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NameFound.

        Times this name was found during the background check process

        :param count: The count of this NameFound.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def first_name(self):
        """Gets the first_name of this NameFound.

        First name found in the background check

        :return: The first_name of this NameFound.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this NameFound.

        First name found in the background check

        :param first_name: The first_name of this NameFound.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this NameFound.

        Last name found in the background check

        :return: The last_name of this NameFound.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this NameFound.

        Last name found in the background check

        :param last_name: The last_name of this NameFound.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name
