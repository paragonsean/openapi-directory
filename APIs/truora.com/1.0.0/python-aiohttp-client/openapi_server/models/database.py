# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Database(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_sets: List[str]=None, database_id: str=None, database_name: str=None, hourly_status: List[str]=None):
        """Database - a model defined in OpenAPI

        :param data_sets: The data_sets of this Database.
        :param database_id: The database_id of this Database.
        :param database_name: The database_name of this Database.
        :param hourly_status: The hourly_status of this Database.
        """
        self.openapi_types = {
            'data_sets': List[str],
            'database_id': str,
            'database_name': str,
            'hourly_status': List[str]
        }

        self.attribute_map = {
            'data_sets': 'data_sets',
            'database_id': 'database_id',
            'database_name': 'database_name',
            'hourly_status': 'hourly_status'
        }

        self._data_sets = data_sets
        self._database_id = database_id
        self._database_name = database_name
        self._hourly_status = hourly_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Database':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Database of this Database.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_sets(self):
        """Gets the data_sets of this Database.

        List of data sets fed by the database. It can contain ``affiliations_and_insurances``, ``alert_in:media``, ``business_background``, ``criminal_record``, ``driving_licenses``, ``international_background``, ``legal_background``, ``personal_identity``, ``permiso_de_circulaciÃ³n_covid-19``, ``professional_background``, ``traffic_fines``, ``vehicle_information``, ``vehicle_permits``, ``behaviour_and_reputation``, or ``taxes_and_finances``

        :return: The data_sets of this Database.
        :rtype: List[str]
        """
        return self._data_sets

    @data_sets.setter
    def data_sets(self, data_sets):
        """Sets the data_sets of this Database.

        List of data sets fed by the database. It can contain ``affiliations_and_insurances``, ``alert_in:media``, ``business_background``, ``criminal_record``, ``driving_licenses``, ``international_background``, ``legal_background``, ``personal_identity``, ``permiso_de_circulaciÃ³n_covid-19``, ``professional_background``, ``traffic_fines``, ``vehicle_information``, ``vehicle_permits``, ``behaviour_and_reputation``, or ``taxes_and_finances``

        :param data_sets: The data_sets of this Database.
        :type data_sets: List[str]
        """

        self._data_sets = data_sets

    @property
    def database_id(self):
        """Gets the database_id of this Database.

        Database identifier

        :return: The database_id of this Database.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this Database.

        Database identifier

        :param database_id: The database_id of this Database.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def database_name(self):
        """Gets the database_name of this Database.

        Database name. Do not use this field to identify the database as it might change, use database_id instead

        :return: The database_name of this Database.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this Database.

        Database name. Do not use this field to identify the database as it might change, use database_id instead

        :param database_name: The database_name of this Database.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def hourly_status(self):
        """Gets the hourly_status of this Database.

        An hourly list of the database statuses. The ``operational`` status means the database executions were at least 90% successful, ``degraded_performance`` means the database executions were from 50 to 90% successful, ``partial_outage`` means the database executions were from 10 to 50% sucessful, ``major_outage`` means the database executions were under 10% successful. ``under_maintenance`` means the database is temporarily out of service for maintenance, ``deprecated`` means the database is permanently out of service, ``undetermined`` means there was no enough data to assess the database status

        :return: The hourly_status of this Database.
        :rtype: List[str]
        """
        return self._hourly_status

    @hourly_status.setter
    def hourly_status(self, hourly_status):
        """Sets the hourly_status of this Database.

        An hourly list of the database statuses. The ``operational`` status means the database executions were at least 90% successful, ``degraded_performance`` means the database executions were from 50 to 90% successful, ``partial_outage`` means the database executions were from 10 to 50% sucessful, ``major_outage`` means the database executions were under 10% successful. ``under_maintenance`` means the database is temporarily out of service for maintenance, ``deprecated`` means the database is permanently out of service, ``undetermined`` means there was no enough data to assess the database status

        :param hourly_status: The hourly_status of this Database.
        :type hourly_status: List[str]
        """

        self._hourly_status = hourly_status
