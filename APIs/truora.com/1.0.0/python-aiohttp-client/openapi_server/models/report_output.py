# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report import Report
from openapi_server import util


class ReportOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checks: str=None, report: Report=None, _self: str=None):
        """ReportOutput - a model defined in OpenAPI

        :param checks: The checks of this ReportOutput.
        :param report: The report of this ReportOutput.
        :param _self: The _self of this ReportOutput.
        """
        self.openapi_types = {
            'checks': str,
            'report': Report,
            '_self': str
        }

        self.attribute_map = {
            'checks': 'checks',
            'report': 'report',
            '_self': 'self'
        }

        self._checks = checks
        self._report = report
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportOutput of this ReportOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checks(self):
        """Gets the checks of this ReportOutput.

        Path to background check list

        :return: The checks of this ReportOutput.
        :rtype: str
        """
        return self._checks

    @checks.setter
    def checks(self, checks):
        """Sets the checks of this ReportOutput.

        Path to background check list

        :param checks: The checks of this ReportOutput.
        :type checks: str
        """
        if checks is None:
            raise ValueError("Invalid value for `checks`, must not be `None`")

        self._checks = checks

    @property
    def report(self):
        """Gets the report of this ReportOutput.


        :return: The report of this ReportOutput.
        :rtype: Report
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this ReportOutput.


        :param report: The report of this ReportOutput.
        :type report: Report
        """
        if report is None:
            raise ValueError("Invalid value for `report`, must not be `None`")

        self._report = report

    @property
    def _self(self):
        """Gets the _self of this ReportOutput.

        Path to this resource

        :return: The _self of this ReportOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ReportOutput.

        Path to this resource

        :param _self: The _self of this ReportOutput.
        :type _self: str
        """

        self.__self = _self
