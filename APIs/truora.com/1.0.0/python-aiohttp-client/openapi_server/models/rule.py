# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, level: str=None, operation: str=None, outcome_label: str=None, value: float=None):
        """Rule - a model defined in OpenAPI

        :param level: The level of this Rule.
        :param operation: The operation of this Rule.
        :param outcome_label: The outcome_label of this Rule.
        :param value: The value of this Rule.
        """
        self.openapi_types = {
            'level': str,
            'operation': str,
            'outcome_label': str,
            'value': float
        }

        self.attribute_map = {
            'level': 'level',
            'operation': 'operation',
            'outcome_label': 'outcome_label',
            'value': 'value'
        }

        self._level = level
        self._operation = operation
        self._outcome_label = outcome_label
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def level(self):
        """Gets the level of this Rule.

        Rule nature

        :return: The level of this Rule.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Rule.

        Rule nature

        :param level: The level of this Rule.
        :type level: str
        """
        allowed_values = ["danger", "warning", "success", "info"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def operation(self):
        """Gets the operation of this Rule.

        Comparison between the rule and score values

        :return: The operation of this Rule.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Rule.

        Comparison between the rule and score values

        :param operation: The operation of this Rule.
        :type operation: str
        """
        allowed_values = ["==", ">=", ">", "<", "<="]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def outcome_label(self):
        """Gets the outcome_label of this Rule.

        Used on the scores that fulfil this rule

        :return: The outcome_label of this Rule.
        :rtype: str
        """
        return self._outcome_label

    @outcome_label.setter
    def outcome_label(self, outcome_label):
        """Sets the outcome_label of this Rule.

        Used on the scores that fulfil this rule

        :param outcome_label: The outcome_label of this Rule.
        :type outcome_label: str
        """

        self._outcome_label = outcome_label

    @property
    def value(self):
        """Gets the value of this Rule.

        Rule value

        :return: The value of this Rule.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Rule.

        Rule value

        :param value: The value of this Rule.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
