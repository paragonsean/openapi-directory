# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_config_output import ScoreConfigOutput
from openapi_server import util


class ScoreConfigsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score_configs: List[ScoreConfigOutput]=None):
        """ScoreConfigsOutput - a model defined in OpenAPI

        :param score_configs: The score_configs of this ScoreConfigsOutput.
        """
        self.openapi_types = {
            'score_configs': List[ScoreConfigOutput]
        }

        self.attribute_map = {
            'score_configs': 'score_configs'
        }

        self._score_configs = score_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreConfigsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreConfigsOutput of this ScoreConfigsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score_configs(self):
        """Gets the score_configs of this ScoreConfigsOutput.

        The list of score configs

        :return: The score_configs of this ScoreConfigsOutput.
        :rtype: List[ScoreConfigOutput]
        """
        return self._score_configs

    @score_configs.setter
    def score_configs(self, score_configs):
        """Sets the score_configs of this ScoreConfigsOutput.

        The list of score configs

        :param score_configs: The score_configs of this ScoreConfigsOutput.
        :type score_configs: List[ScoreConfigOutput]
        """
        if score_configs is None:
            raise ValueError("Invalid value for `score_configs`, must not be `None`")

        self._score_configs = score_configs
