# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Change(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_score_changes: float=None, score_changes: List[Change]=None):
        """Change - a model defined in OpenAPI

        :param dataset_score_changes: The dataset_score_changes of this Change.
        :param score_changes: The score_changes of this Change.
        """
        self.openapi_types = {
            'dataset_score_changes': float,
            'score_changes': List[Change]
        }

        self.attribute_map = {
            'dataset_score_changes': 'dataset_score_changes',
            'score_changes': 'score_changes'
        }

        self._dataset_score_changes = dataset_score_changes
        self._score_changes = score_changes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Change':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Change of this Change.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_score_changes(self):
        """Gets the dataset_score_changes of this Change.

        Old and new score map by dataset

        :return: The dataset_score_changes of this Change.
        :rtype: float
        """
        return self._dataset_score_changes

    @dataset_score_changes.setter
    def dataset_score_changes(self, dataset_score_changes):
        """Sets the dataset_score_changes of this Change.

        Old and new score map by dataset

        :param dataset_score_changes: The dataset_score_changes of this Change.
        :type dataset_score_changes: float
        """

        self._dataset_score_changes = dataset_score_changes

    @property
    def score_changes(self):
        """Gets the score_changes of this Change.

        Old and new score list

        :return: The score_changes of this Change.
        :rtype: List[Change]
        """
        return self._score_changes

    @score_changes.setter
    def score_changes(self, score_changes):
        """Sets the score_changes of this Change.

        Old and new score list

        :param score_changes: The score_changes of this Change.
        :type score_changes: List[Change]
        """

        self._score_changes = score_changes
