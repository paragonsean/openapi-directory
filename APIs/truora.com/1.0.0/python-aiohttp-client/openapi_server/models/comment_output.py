# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util


class CommentOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: Comment=None, _self: str=None):
        """CommentOutput - a model defined in OpenAPI

        :param comment: The comment of this CommentOutput.
        :param _self: The _self of this CommentOutput.
        """
        self.openapi_types = {
            'comment': Comment,
            '_self': str
        }

        self.attribute_map = {
            'comment': 'comment',
            '_self': 'self'
        }

        self._comment = comment
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentOutput of this CommentOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this CommentOutput.


        :return: The comment of this CommentOutput.
        :rtype: Comment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CommentOutput.


        :param comment: The comment of this CommentOutput.
        :type comment: Comment
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")

        self._comment = comment

    @property
    def _self(self):
        """Gets the _self of this CommentOutput.

        Current comment path

        :return: The _self of this CommentOutput.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CommentOutput.

        Current comment path

        :param _self: The _self of this CommentOutput.
        :type _self: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
