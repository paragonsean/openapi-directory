# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.score_config import ScoreConfig
from openapi_server import util


class ScoreConfigOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score_config_by_country: List[ScoreConfig]=None):
        """ScoreConfigOutput - a model defined in OpenAPI

        :param score_config_by_country: The score_config_by_country of this ScoreConfigOutput.
        """
        self.openapi_types = {
            'score_config_by_country': List[ScoreConfig]
        }

        self.attribute_map = {
            'score_config_by_country': 'ScoreConfigByCountry'
        }

        self._score_config_by_country = score_config_by_country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScoreConfigOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScoreConfigOutput of this ScoreConfigOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score_config_by_country(self):
        """Gets the score_config_by_country of this ScoreConfigOutput.

        List of score configs that apply for the country

        :return: The score_config_by_country of this ScoreConfigOutput.
        :rtype: List[ScoreConfig]
        """
        return self._score_config_by_country

    @score_config_by_country.setter
    def score_config_by_country(self, score_config_by_country):
        """Sets the score_config_by_country of this ScoreConfigOutput.

        List of score configs that apply for the country

        :param score_config_by_country: The score_config_by_country of this ScoreConfigOutput.
        :type score_config_by_country: List[ScoreConfig]
        """

        self._score_config_by_country = score_config_by_country
