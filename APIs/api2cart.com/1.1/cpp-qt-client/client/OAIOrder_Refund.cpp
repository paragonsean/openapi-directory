/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder_Refund.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder_Refund::OAIOrder_Refund(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder_Refund::OAIOrder_Refund() {
    this->initializeModel();
}

OAIOrder_Refund::~OAIOrder_Refund() {}

void OAIOrder_Refund::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIOrder_Refund::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder_Refund::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIOrder_Refund::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder_Refund::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_modified_time.isSet()) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

OAIObject OAIOrder_Refund::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIOrder_Refund::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIOrder_Refund::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIOrder_Refund::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QString OAIOrder_Refund::getComment() const {
    return m_comment;
}
void OAIOrder_Refund::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIOrder_Refund::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIOrder_Refund::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIObject OAIOrder_Refund::getCustomFields() const {
    return m_custom_fields;
}
void OAIOrder_Refund::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOrder_Refund::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOrder_Refund::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

double OAIOrder_Refund::getFee() const {
    return m_fee;
}
void OAIOrder_Refund::setFee(const double &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAIOrder_Refund::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAIOrder_Refund::is_fee_Valid() const{
    return m_fee_isValid;
}

QString OAIOrder_Refund::getId() const {
    return m_id;
}
void OAIOrder_Refund::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder_Refund::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder_Refund::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOrder_Status_Refund_Item> OAIOrder_Refund::getItems() const {
    return m_items;
}
void OAIOrder_Refund::setItems(const QList<OAIOrder_Status_Refund_Item> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrder_Refund::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrder_Refund::is_items_Valid() const{
    return m_items_isValid;
}

OAIA2CDateTime OAIOrder_Refund::getModifiedTime() const {
    return m_modified_time;
}
void OAIOrder_Refund::setModifiedTime(const OAIA2CDateTime &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIOrder_Refund::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIOrder_Refund::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

double OAIOrder_Refund::getShipping() const {
    return m_shipping;
}
void OAIOrder_Refund::setShipping(const double &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIOrder_Refund::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIOrder_Refund::is_shipping_Valid() const{
    return m_shipping_isValid;
}

double OAIOrder_Refund::getTax() const {
    return m_tax;
}
void OAIOrder_Refund::setTax(const double &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIOrder_Refund::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIOrder_Refund::is_tax_Valid() const{
    return m_tax_isValid;
}

double OAIOrder_Refund::getTotal() const {
    return m_total;
}
void OAIOrder_Refund::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOrder_Refund::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOrder_Refund::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIOrder_Refund::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder_Refund::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
