/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaxClass_ZipCodes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaxClass_ZipCodes::OAITaxClass_ZipCodes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaxClass_ZipCodes::OAITaxClass_ZipCodes() {
    this->initializeModel();
}

OAITaxClass_ZipCodes::~OAITaxClass_ZipCodes() {}

void OAITaxClass_ZipCodes::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_is_range_isSet = false;
    m_is_range_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;
}

void OAITaxClass_ZipCodes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaxClass_ZipCodes::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_is_range_isValid = ::OpenAPI::fromJsonValue(m_is_range, json[QString("is_range")]);
    m_is_range_isSet = !json[QString("is_range")].isNull() && m_is_range_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;
}

QString OAITaxClass_ZipCodes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaxClass_ZipCodes::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_is_range_isSet) {
        obj.insert(QString("is_range"), ::OpenAPI::toJsonValue(m_is_range));
    }
    if (m_range.size() > 0) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    return obj;
}

OAIObject OAITaxClass_ZipCodes::getAdditionalFields() const {
    return m_additional_fields;
}
void OAITaxClass_ZipCodes::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAITaxClass_ZipCodes::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAITaxClass_ZipCodes::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAITaxClass_ZipCodes::getCustomFields() const {
    return m_custom_fields;
}
void OAITaxClass_ZipCodes::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAITaxClass_ZipCodes::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAITaxClass_ZipCodes::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<OAITaxClass_ZipCodes_Range> OAITaxClass_ZipCodes::getFields() const {
    return m_fields;
}
void OAITaxClass_ZipCodes::setFields(const QList<OAITaxClass_ZipCodes_Range> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAITaxClass_ZipCodes::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAITaxClass_ZipCodes::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAITaxClass_ZipCodes::isIsRange() const {
    return m_is_range;
}
void OAITaxClass_ZipCodes::setIsRange(const bool &is_range) {
    m_is_range = is_range;
    m_is_range_isSet = true;
}

bool OAITaxClass_ZipCodes::is_is_range_Set() const{
    return m_is_range_isSet;
}

bool OAITaxClass_ZipCodes::is_is_range_Valid() const{
    return m_is_range_isValid;
}

QList<QString> OAITaxClass_ZipCodes::getRange() const {
    return m_range;
}
void OAITaxClass_ZipCodes::setRange(const QList<QString> &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAITaxClass_ZipCodes::is_range_Set() const{
    return m_range_isSet;
}

bool OAITaxClass_ZipCodes::is_range_Valid() const{
    return m_range_isValid;
}

bool OAITaxClass_ZipCodes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaxClass_ZipCodes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
