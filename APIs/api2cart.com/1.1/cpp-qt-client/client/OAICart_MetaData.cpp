/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICart_MetaData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICart_MetaData::OAICart_MetaData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICart_MetaData::OAICart_MetaData() {
    this->initializeModel();
}

OAICart_MetaData::~OAICart_MetaData() {}

void OAICart_MetaData::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICart_MetaData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICart_MetaData::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICart_MetaData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICart_MetaData::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIObject OAICart_MetaData::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICart_MetaData::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICart_MetaData::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICart_MetaData::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAICart_MetaData::getCustomFields() const {
    return m_custom_fields;
}
void OAICart_MetaData::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICart_MetaData::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICart_MetaData::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICart_MetaData::getId() const {
    return m_id;
}
void OAICart_MetaData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICart_MetaData::is_id_Set() const{
    return m_id_isSet;
}

bool OAICart_MetaData::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICart_MetaData::getKey() const {
    return m_key;
}
void OAICart_MetaData::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICart_MetaData::is_key_Set() const{
    return m_key_isSet;
}

bool OAICart_MetaData::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICart_MetaData::getRNamespace() const {
    return m_r_namespace;
}
void OAICart_MetaData::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAICart_MetaData::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAICart_MetaData::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAICart_MetaData::getValue() const {
    return m_value;
}
void OAICart_MetaData::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICart_MetaData::is_value_Set() const{
    return m_value_isSet;
}

bool OAICart_MetaData::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICart_MetaData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICart_MetaData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
