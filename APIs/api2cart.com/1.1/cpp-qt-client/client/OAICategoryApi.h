/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICategoryApi_H
#define OAI_OAICategoryApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountConfigUpdate_200_response.h"
#include "OAIAttributeDelete_200_response.h"
#include "OAIBridgeDelete_200_response.h"
#include "OAICartConfigUpdate_200_response.h"
#include "OAICategoryAdd_200_response.h"
#include "OAICategoryCount_200_response.h"
#include "OAICategoryFind_200_response.h"
#include "OAICategoryImageAdd_200_response.h"
#include "OAICategoryInfo_200_response.h"
#include "OAIModel_Response_Category_List.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICategoryApi : public QObject {
    Q_OBJECT

public:
    OAICategoryApi(const int timeOut = 0);
    ~OAICategoryApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  parent_id QString [optional]
    * @param[in]  stores_ids QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  avail bool [optional]
    * @param[in]  sort_order qint32 [optional]
    * @param[in]  created_time QString [optional]
    * @param[in]  modified_time QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  meta_title QString [optional]
    * @param[in]  meta_description QString [optional]
    * @param[in]  meta_keywords QString [optional]
    * @param[in]  seo_url QString [optional]
    */
    virtual void categoryAdd(const QString &name, const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stores_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &sort_order = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &created_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_keywords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seo_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  category_id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void categoryAssign(const QString &product_id, const QString &category_id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent_id QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  avail bool [optional]
    */
    virtual void categoryCount(const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void categoryDelete(const QString &id);

    /**
    * @param[in]  find_value QString [required]
    * @param[in]  find_where QString [optional]
    * @param[in]  find_params QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    */
    virtual void categoryFind(const QString &find_value, const ::OpenAPI::OptionalParam<QString> &find_where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &find_params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category_id QString [required]
    * @param[in]  image_name QString [required]
    * @param[in]  url QString [required]
    * @param[in]  type QString [required]
    * @param[in]  label QString [optional]
    * @param[in]  mime QString [optional]
    * @param[in]  position qint32 [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void categoryImageAdd(const QString &category_id, const QString &image_name, const QString &url, const QString &type, const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mime = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &position = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  category_id QString [required]
    * @param[in]  image_id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void categoryImageDelete(const QString &category_id, const QString &image_id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    */
    virtual void categoryInfo(const QString &id, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  avail bool [optional]
    */
    virtual void categoryList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  category_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void categoryUnassign(const QString &category_id, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  parent_id QString [optional]
    * @param[in]  stores_ids QString [optional]
    * @param[in]  avail bool [optional]
    * @param[in]  sort_order qint32 [optional]
    * @param[in]  modified_time QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  meta_title QString [optional]
    * @param[in]  meta_description QString [optional]
    * @param[in]  meta_keywords QString [optional]
    * @param[in]  seo_url QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void categoryUpdate(const QString &id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stores_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &sort_order = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &modified_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meta_keywords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seo_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void categoryAddCallback(OAIHttpRequestWorker *worker);
    void categoryAssignCallback(OAIHttpRequestWorker *worker);
    void categoryCountCallback(OAIHttpRequestWorker *worker);
    void categoryDeleteCallback(OAIHttpRequestWorker *worker);
    void categoryFindCallback(OAIHttpRequestWorker *worker);
    void categoryImageAddCallback(OAIHttpRequestWorker *worker);
    void categoryImageDeleteCallback(OAIHttpRequestWorker *worker);
    void categoryInfoCallback(OAIHttpRequestWorker *worker);
    void categoryListCallback(OAIHttpRequestWorker *worker);
    void categoryUnassignCallback(OAIHttpRequestWorker *worker);
    void categoryUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void categoryAddSignal(OAICategoryAdd_200_response summary);
    void categoryAssignSignal(OAICartConfigUpdate_200_response summary);
    void categoryCountSignal(OAICategoryCount_200_response summary);
    void categoryDeleteSignal(OAIBridgeDelete_200_response summary);
    void categoryFindSignal(OAICategoryFind_200_response summary);
    void categoryImageAddSignal(OAICategoryImageAdd_200_response summary);
    void categoryImageDeleteSignal(OAIAttributeDelete_200_response summary);
    void categoryInfoSignal(OAICategoryInfo_200_response summary);
    void categoryListSignal(OAIModel_Response_Category_List summary);
    void categoryUnassignSignal(OAICartConfigUpdate_200_response summary);
    void categoryUpdateSignal(OAIAccountConfigUpdate_200_response summary);


    void categoryAddSignalFull(OAIHttpRequestWorker *worker, OAICategoryAdd_200_response summary);
    void categoryAssignSignalFull(OAIHttpRequestWorker *worker, OAICartConfigUpdate_200_response summary);
    void categoryCountSignalFull(OAIHttpRequestWorker *worker, OAICategoryCount_200_response summary);
    void categoryDeleteSignalFull(OAIHttpRequestWorker *worker, OAIBridgeDelete_200_response summary);
    void categoryFindSignalFull(OAIHttpRequestWorker *worker, OAICategoryFind_200_response summary);
    void categoryImageAddSignalFull(OAIHttpRequestWorker *worker, OAICategoryImageAdd_200_response summary);
    void categoryImageDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void categoryInfoSignalFull(OAIHttpRequestWorker *worker, OAICategoryInfo_200_response summary);
    void categoryListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Category_List summary);
    void categoryUnassignSignalFull(OAIHttpRequestWorker *worker, OAICartConfigUpdate_200_response summary);
    void categoryUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);

    Q_DECL_DEPRECATED_X("Use categoryAddSignalError() instead")
    void categoryAddSignalE(OAICategoryAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryAddSignalError(OAICategoryAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryAssignSignalError() instead")
    void categoryAssignSignalE(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryAssignSignalError(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryCountSignalError() instead")
    void categoryCountSignalE(OAICategoryCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryCountSignalError(OAICategoryCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryDeleteSignalError() instead")
    void categoryDeleteSignalE(OAIBridgeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryDeleteSignalError(OAIBridgeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryFindSignalError() instead")
    void categoryFindSignalE(OAICategoryFind_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryFindSignalError(OAICategoryFind_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryImageAddSignalError() instead")
    void categoryImageAddSignalE(OAICategoryImageAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryImageAddSignalError(OAICategoryImageAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryImageDeleteSignalError() instead")
    void categoryImageDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryImageDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryInfoSignalError() instead")
    void categoryInfoSignalE(OAICategoryInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryInfoSignalError(OAICategoryInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryListSignalError() instead")
    void categoryListSignalE(OAIModel_Response_Category_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryListSignalError(OAIModel_Response_Category_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryUnassignSignalError() instead")
    void categoryUnassignSignalE(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryUnassignSignalError(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryUpdateSignalError() instead")
    void categoryUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use categoryAddSignalErrorFull() instead")
    void categoryAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryAssignSignalErrorFull() instead")
    void categoryAssignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryAssignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryCountSignalErrorFull() instead")
    void categoryCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryDeleteSignalErrorFull() instead")
    void categoryDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryFindSignalErrorFull() instead")
    void categoryFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryImageAddSignalErrorFull() instead")
    void categoryImageAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryImageAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryImageDeleteSignalErrorFull() instead")
    void categoryImageDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryImageDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryInfoSignalErrorFull() instead")
    void categoryInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryListSignalErrorFull() instead")
    void categoryListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryUnassignSignalErrorFull() instead")
    void categoryUnassignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryUnassignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categoryUpdateSignalErrorFull() instead")
    void categoryUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categoryUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
