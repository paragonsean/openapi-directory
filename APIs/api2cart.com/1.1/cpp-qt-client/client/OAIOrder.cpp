/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder::OAIOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder::OAIOrder() {
    this->initializeModel();
}

OAIOrder::~OAIOrder() {}

void OAIOrder::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_basket_id_isSet = false;
    m_basket_id_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_bundles_isSet = false;
    m_bundles_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_create_at_isSet = false;
    m_create_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_finished_time_isSet = false;
    m_finished_time_isValid = false;

    m_gift_message_isSet = false;
    m_gift_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_order_details_url_isSet = false;
    m_order_details_url_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_products_isSet = false;
    m_order_products_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_shipping_address_isSet = false;
    m_shipping_address_isValid = false;

    m_shipping_method_isSet = false;
    m_shipping_method_isValid = false;

    m_shipping_methods_isSet = false;
    m_shipping_methods_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;

    m_warehouses_ids_isSet = false;
    m_warehouses_ids_isValid = false;
}

void OAIOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_basket_id_isValid = ::OpenAPI::fromJsonValue(m_basket_id, json[QString("basket_id")]);
    m_basket_id_isSet = !json[QString("basket_id")].isNull() && m_basket_id_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billing_address")]);
    m_billing_address_isSet = !json[QString("billing_address")].isNull() && m_billing_address_isValid;

    m_bundles_isValid = ::OpenAPI::fromJsonValue(m_bundles, json[QString("bundles")]);
    m_bundles_isSet = !json[QString("bundles")].isNull() && m_bundles_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_create_at_isValid = ::OpenAPI::fromJsonValue(m_create_at, json[QString("create_at")]);
    m_create_at_isSet = !json[QString("create_at")].isNull() && m_create_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_finished_time_isValid = ::OpenAPI::fromJsonValue(m_finished_time, json[QString("finished_time")]);
    m_finished_time_isSet = !json[QString("finished_time")].isNull() && m_finished_time_isValid;

    m_gift_message_isValid = ::OpenAPI::fromJsonValue(m_gift_message, json[QString("gift_message")]);
    m_gift_message_isSet = !json[QString("gift_message")].isNull() && m_gift_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_order_details_url_isValid = ::OpenAPI::fromJsonValue(m_order_details_url, json[QString("order_details_url")]);
    m_order_details_url_isSet = !json[QString("order_details_url")].isNull() && m_order_details_url_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_order_products_isValid = ::OpenAPI::fromJsonValue(m_order_products, json[QString("order_products")]);
    m_order_products_isSet = !json[QString("order_products")].isNull() && m_order_products_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_shipping_address_isValid = ::OpenAPI::fromJsonValue(m_shipping_address, json[QString("shipping_address")]);
    m_shipping_address_isSet = !json[QString("shipping_address")].isNull() && m_shipping_address_isValid;

    m_shipping_method_isValid = ::OpenAPI::fromJsonValue(m_shipping_method, json[QString("shipping_method")]);
    m_shipping_method_isSet = !json[QString("shipping_method")].isNull() && m_shipping_method_isValid;

    m_shipping_methods_isValid = ::OpenAPI::fromJsonValue(m_shipping_methods, json[QString("shipping_methods")]);
    m_shipping_methods_isSet = !json[QString("shipping_methods")].isNull() && m_shipping_methods_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;

    m_warehouses_ids_isValid = ::OpenAPI::fromJsonValue(m_warehouses_ids, json[QString("warehouses_ids")]);
    m_warehouses_ids_isSet = !json[QString("warehouses_ids")].isNull() && m_warehouses_ids_isValid;
}

QString OAIOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_basket_id_isSet) {
        obj.insert(QString("basket_id"), ::OpenAPI::toJsonValue(m_basket_id));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billing_address"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_bundles.size() > 0) {
        obj.insert(QString("bundles"), ::OpenAPI::toJsonValue(m_bundles));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_create_at.isSet()) {
        obj.insert(QString("create_at"), ::OpenAPI::toJsonValue(m_create_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_discounts.size() > 0) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_finished_time.isSet()) {
        obj.insert(QString("finished_time"), ::OpenAPI::toJsonValue(m_finished_time));
    }
    if (m_gift_message_isSet) {
        obj.insert(QString("gift_message"), ::OpenAPI::toJsonValue(m_gift_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_at.isSet()) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_order_details_url_isSet) {
        obj.insert(QString("order_details_url"), ::OpenAPI::toJsonValue(m_order_details_url));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_products.size() > 0) {
        obj.insert(QString("order_products"), ::OpenAPI::toJsonValue(m_order_products));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_refunds.size() > 0) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_shipping_address.isSet()) {
        obj.insert(QString("shipping_address"), ::OpenAPI::toJsonValue(m_shipping_address));
    }
    if (m_shipping_method.isSet()) {
        obj.insert(QString("shipping_method"), ::OpenAPI::toJsonValue(m_shipping_method));
    }
    if (m_shipping_methods.size() > 0) {
        obj.insert(QString("shipping_methods"), ::OpenAPI::toJsonValue(m_shipping_methods));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_total.isSet()) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_totals.isSet()) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    if (m_warehouses_ids.size() > 0) {
        obj.insert(QString("warehouses_ids"), ::OpenAPI::toJsonValue(m_warehouses_ids));
    }
    return obj;
}

OAIObject OAIOrder::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIOrder::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIOrder::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIOrder::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QString OAIOrder::getBasketId() const {
    return m_basket_id;
}
void OAIOrder::setBasketId(const QString &basket_id) {
    m_basket_id = basket_id;
    m_basket_id_isSet = true;
}

bool OAIOrder::is_basket_id_Set() const{
    return m_basket_id_isSet;
}

bool OAIOrder::is_basket_id_Valid() const{
    return m_basket_id_isValid;
}

OAICustomer_Address OAIOrder::getBillingAddress() const {
    return m_billing_address;
}
void OAIOrder::setBillingAddress(const OAICustomer_Address &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIOrder::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIOrder::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QList<OAIOrder_Item> OAIOrder::getBundles() const {
    return m_bundles;
}
void OAIOrder::setBundles(const QList<OAIOrder_Item> &bundles) {
    m_bundles = bundles;
    m_bundles_isSet = true;
}

bool OAIOrder::is_bundles_Set() const{
    return m_bundles_isSet;
}

bool OAIOrder::is_bundles_Valid() const{
    return m_bundles_isValid;
}

QString OAIOrder::getChannelId() const {
    return m_channel_id;
}
void OAIOrder::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIOrder::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIOrder::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIOrder::getComment() const {
    return m_comment;
}
void OAIOrder::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIOrder::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIOrder::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIA2CDateTime OAIOrder::getCreateAt() const {
    return m_create_at;
}
void OAIOrder::setCreateAt(const OAIA2CDateTime &create_at) {
    m_create_at = create_at;
    m_create_at_isSet = true;
}

bool OAIOrder::is_create_at_Set() const{
    return m_create_at_isSet;
}

bool OAIOrder::is_create_at_Valid() const{
    return m_create_at_isValid;
}

OAICurrency OAIOrder::getCurrency() const {
    return m_currency;
}
void OAIOrder::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrder::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrder::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIObject OAIOrder::getCustomFields() const {
    return m_custom_fields;
}
void OAIOrder::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOrder::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOrder::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

OAIBaseCustomer OAIOrder::getCustomer() const {
    return m_customer;
}
void OAIOrder::setCustomer(const OAIBaseCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIOrder::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIOrder::is_customer_Valid() const{
    return m_customer_isValid;
}

QList<OAIOrder_Totals_NewDiscount> OAIOrder::getDiscounts() const {
    return m_discounts;
}
void OAIOrder::setDiscounts(const QList<OAIOrder_Totals_NewDiscount> &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAIOrder::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAIOrder::is_discounts_Valid() const{
    return m_discounts_isValid;
}

OAIA2CDateTime OAIOrder::getFinishedTime() const {
    return m_finished_time;
}
void OAIOrder::setFinishedTime(const OAIA2CDateTime &finished_time) {
    m_finished_time = finished_time;
    m_finished_time_isSet = true;
}

bool OAIOrder::is_finished_time_Set() const{
    return m_finished_time_isSet;
}

bool OAIOrder::is_finished_time_Valid() const{
    return m_finished_time_isValid;
}

QString OAIOrder::getGiftMessage() const {
    return m_gift_message;
}
void OAIOrder::setGiftMessage(const QString &gift_message) {
    m_gift_message = gift_message;
    m_gift_message_isSet = true;
}

bool OAIOrder::is_gift_message_Set() const{
    return m_gift_message_isSet;
}

bool OAIOrder::is_gift_message_Valid() const{
    return m_gift_message_isValid;
}

QString OAIOrder::getId() const {
    return m_id;
}
void OAIOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrder::is_id_Valid() const{
    return m_id_isValid;
}

OAIA2CDateTime OAIOrder::getModifiedAt() const {
    return m_modified_at;
}
void OAIOrder::setModifiedAt(const OAIA2CDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIOrder::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIOrder::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAIOrder::getOrderDetailsUrl() const {
    return m_order_details_url;
}
void OAIOrder::setOrderDetailsUrl(const QString &order_details_url) {
    m_order_details_url = order_details_url;
    m_order_details_url_isSet = true;
}

bool OAIOrder::is_order_details_url_Set() const{
    return m_order_details_url_isSet;
}

bool OAIOrder::is_order_details_url_Valid() const{
    return m_order_details_url_isValid;
}

QString OAIOrder::getOrderId() const {
    return m_order_id;
}
void OAIOrder::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrder::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrder::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QList<OAIOrder_Item> OAIOrder::getOrderProducts() const {
    return m_order_products;
}
void OAIOrder::setOrderProducts(const QList<OAIOrder_Item> &order_products) {
    m_order_products = order_products;
    m_order_products_isSet = true;
}

bool OAIOrder::is_order_products_Set() const{
    return m_order_products_isSet;
}

bool OAIOrder::is_order_products_Valid() const{
    return m_order_products_isValid;
}

OAIOrder_PaymentMethod OAIOrder::getPaymentMethod() const {
    return m_payment_method;
}
void OAIOrder::setPaymentMethod(const OAIOrder_PaymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIOrder::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIOrder::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QList<OAIOrder_Refund> OAIOrder::getRefunds() const {
    return m_refunds;
}
void OAIOrder::setRefunds(const QList<OAIOrder_Refund> &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAIOrder::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAIOrder::is_refunds_Valid() const{
    return m_refunds_isValid;
}

OAICustomer_Address OAIOrder::getShippingAddress() const {
    return m_shipping_address;
}
void OAIOrder::setShippingAddress(const OAICustomer_Address &shipping_address) {
    m_shipping_address = shipping_address;
    m_shipping_address_isSet = true;
}

bool OAIOrder::is_shipping_address_Set() const{
    return m_shipping_address_isSet;
}

bool OAIOrder::is_shipping_address_Valid() const{
    return m_shipping_address_isValid;
}

OAIOrder_ShippingMethod OAIOrder::getShippingMethod() const {
    return m_shipping_method;
}
void OAIOrder::setShippingMethod(const OAIOrder_ShippingMethod &shipping_method) {
    m_shipping_method = shipping_method;
    m_shipping_method_isSet = true;
}

bool OAIOrder::is_shipping_method_Set() const{
    return m_shipping_method_isSet;
}

bool OAIOrder::is_shipping_method_Valid() const{
    return m_shipping_method_isValid;
}

QList<OAIOrder_ShippingMethod> OAIOrder::getShippingMethods() const {
    return m_shipping_methods;
}
void OAIOrder::setShippingMethods(const QList<OAIOrder_ShippingMethod> &shipping_methods) {
    m_shipping_methods = shipping_methods;
    m_shipping_methods_isSet = true;
}

bool OAIOrder::is_shipping_methods_Set() const{
    return m_shipping_methods_isSet;
}

bool OAIOrder::is_shipping_methods_Valid() const{
    return m_shipping_methods_isValid;
}

OAIOrder_Status OAIOrder::getStatus() const {
    return m_status;
}
void OAIOrder::setStatus(const OAIOrder_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOrder::getStoreId() const {
    return m_store_id;
}
void OAIOrder::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIOrder::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIOrder::is_store_id_Valid() const{
    return m_store_id_isValid;
}

OAIOrder_Total OAIOrder::getTotal() const {
    return m_total;
}
void OAIOrder::setTotal(const OAIOrder_Total &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOrder::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOrder::is_total_Valid() const{
    return m_total_isValid;
}

OAIOrder_Totals OAIOrder::getTotals() const {
    return m_totals;
}
void OAIOrder::setTotals(const OAIOrder_Totals &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIOrder::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIOrder::is_totals_Valid() const{
    return m_totals_isValid;
}

QList<QString> OAIOrder::getWarehousesIds() const {
    return m_warehouses_ids;
}
void OAIOrder::setWarehousesIds(const QList<QString> &warehouses_ids) {
    m_warehouses_ids = warehouses_ids;
    m_warehouses_ids_isSet = true;
}

bool OAIOrder::is_warehouses_ids_Set() const{
    return m_warehouses_ids_isSet;
}

bool OAIOrder::is_warehouses_ids_Valid() const{
    return m_warehouses_ids_isValid;
}

bool OAIOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_details_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouses_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
