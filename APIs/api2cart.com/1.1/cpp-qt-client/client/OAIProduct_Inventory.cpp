/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct_Inventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct_Inventory::OAIProduct_Inventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct_Inventory::OAIProduct_Inventory() {
    this->initializeModel();
}

OAIProduct_Inventory::~OAIProduct_Inventory() {}

void OAIProduct_Inventory::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_in_stock_isSet = false;
    m_in_stock_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIProduct_Inventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct_Inventory::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_in_stock_isValid = ::OpenAPI::fromJsonValue(m_in_stock, json[QString("in_stock")]);
    m_in_stock_isSet = !json[QString("in_stock")].isNull() && m_in_stock_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouse_id")]);
    m_warehouse_id_isSet = !json[QString("warehouse_id")].isNull() && m_warehouse_id_isValid;
}

QString OAIProduct_Inventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct_Inventory::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_in_stock_isSet) {
        obj.insert(QString("in_stock"), ::OpenAPI::toJsonValue(m_in_stock));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouse_id"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

OAIObject OAIProduct_Inventory::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIProduct_Inventory::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIProduct_Inventory::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIProduct_Inventory::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAIProduct_Inventory::getCustomFields() const {
    return m_custom_fields;
}
void OAIProduct_Inventory::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProduct_Inventory::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProduct_Inventory::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAIProduct_Inventory::isInStock() const {
    return m_in_stock;
}
void OAIProduct_Inventory::setInStock(const bool &in_stock) {
    m_in_stock = in_stock;
    m_in_stock_isSet = true;
}

bool OAIProduct_Inventory::is_in_stock_Set() const{
    return m_in_stock_isSet;
}

bool OAIProduct_Inventory::is_in_stock_Valid() const{
    return m_in_stock_isValid;
}

qint32 OAIProduct_Inventory::getPriority() const {
    return m_priority;
}
void OAIProduct_Inventory::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIProduct_Inventory::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIProduct_Inventory::is_priority_Valid() const{
    return m_priority_isValid;
}

double OAIProduct_Inventory::getQuantity() const {
    return m_quantity;
}
void OAIProduct_Inventory::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProduct_Inventory::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProduct_Inventory::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIProduct_Inventory::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIProduct_Inventory::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIProduct_Inventory::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIProduct_Inventory::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIProduct_Inventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct_Inventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
