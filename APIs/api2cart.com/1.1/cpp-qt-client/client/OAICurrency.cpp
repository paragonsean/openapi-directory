/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrency.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrency::OAICurrency(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrency::OAICurrency() {
    this->initializeModel();
}

OAICurrency::~OAICurrency() {}

void OAICurrency::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_avail_isSet = false;
    m_avail_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_iso3_isSet = false;
    m_iso3_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_symbol_left_isSet = false;
    m_symbol_left_isValid = false;

    m_symbol_right_isSet = false;
    m_symbol_right_isValid = false;
}

void OAICurrency::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrency::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_avail_isValid = ::OpenAPI::fromJsonValue(m_avail, json[QString("avail")]);
    m_avail_isSet = !json[QString("avail")].isNull() && m_avail_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_iso3_isValid = ::OpenAPI::fromJsonValue(m_iso3, json[QString("iso3")]);
    m_iso3_isSet = !json[QString("iso3")].isNull() && m_iso3_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_symbol_left_isValid = ::OpenAPI::fromJsonValue(m_symbol_left, json[QString("symbol_left")]);
    m_symbol_left_isSet = !json[QString("symbol_left")].isNull() && m_symbol_left_isValid;

    m_symbol_right_isValid = ::OpenAPI::fromJsonValue(m_symbol_right, json[QString("symbol_right")]);
    m_symbol_right_isSet = !json[QString("symbol_right")].isNull() && m_symbol_right_isValid;
}

QString OAICurrency::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrency::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_avail_isSet) {
        obj.insert(QString("avail"), ::OpenAPI::toJsonValue(m_avail));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_iso3_isSet) {
        obj.insert(QString("iso3"), ::OpenAPI::toJsonValue(m_iso3));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_symbol_left_isSet) {
        obj.insert(QString("symbol_left"), ::OpenAPI::toJsonValue(m_symbol_left));
    }
    if (m_symbol_right_isSet) {
        obj.insert(QString("symbol_right"), ::OpenAPI::toJsonValue(m_symbol_right));
    }
    return obj;
}

OAIObject OAICurrency::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICurrency::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICurrency::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICurrency::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

bool OAICurrency::isAvail() const {
    return m_avail;
}
void OAICurrency::setAvail(const bool &avail) {
    m_avail = avail;
    m_avail_isSet = true;
}

bool OAICurrency::is_avail_Set() const{
    return m_avail_isSet;
}

bool OAICurrency::is_avail_Valid() const{
    return m_avail_isValid;
}

OAIObject OAICurrency::getCustomFields() const {
    return m_custom_fields;
}
void OAICurrency::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICurrency::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICurrency::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

bool OAICurrency::isRDefault() const {
    return m_r_default;
}
void OAICurrency::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAICurrency::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAICurrency::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAICurrency::getId() const {
    return m_id;
}
void OAICurrency::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICurrency::is_id_Set() const{
    return m_id_isSet;
}

bool OAICurrency::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICurrency::getIso3() const {
    return m_iso3;
}
void OAICurrency::setIso3(const QString &iso3) {
    m_iso3 = iso3;
    m_iso3_isSet = true;
}

bool OAICurrency::is_iso3_Set() const{
    return m_iso3_isSet;
}

bool OAICurrency::is_iso3_Valid() const{
    return m_iso3_isValid;
}

QString OAICurrency::getName() const {
    return m_name;
}
void OAICurrency::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICurrency::is_name_Set() const{
    return m_name_isSet;
}

bool OAICurrency::is_name_Valid() const{
    return m_name_isValid;
}

double OAICurrency::getRate() const {
    return m_rate;
}
void OAICurrency::setRate(const double &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAICurrency::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAICurrency::is_rate_Valid() const{
    return m_rate_isValid;
}

QString OAICurrency::getSymbolLeft() const {
    return m_symbol_left;
}
void OAICurrency::setSymbolLeft(const QString &symbol_left) {
    m_symbol_left = symbol_left;
    m_symbol_left_isSet = true;
}

bool OAICurrency::is_symbol_left_Set() const{
    return m_symbol_left_isSet;
}

bool OAICurrency::is_symbol_left_Valid() const{
    return m_symbol_left_isValid;
}

QString OAICurrency::getSymbolRight() const {
    return m_symbol_right;
}
void OAICurrency::setSymbolRight(const QString &symbol_right) {
    m_symbol_right = symbol_right;
    m_symbol_right_isSet = true;
}

bool OAICurrency::is_symbol_right_Set() const{
    return m_symbol_right_isSet;
}

bool OAICurrency::is_symbol_right_Valid() const{
    return m_symbol_right_isValid;
}

bool OAICurrency::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_right_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrency::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
