/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderShipmentAdd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderShipmentAdd::OAIOrderShipmentAdd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderShipmentAdd::OAIOrderShipmentAdd() {
    this->initializeModel();
}

OAIOrderShipmentAdd::~OAIOrderShipmentAdd() {}

void OAIOrderShipmentAdd::initializeModel() {

    m_adjust_stock_isSet = false;
    m_adjust_stock_isValid = false;

    m_enable_cache_isSet = false;
    m_enable_cache_isValid = false;

    m_is_shipped_isSet = false;
    m_is_shipped_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_send_notifications_isSet = false;
    m_send_notifications_isValid = false;

    m_shipment_provider_isSet = false;
    m_shipment_provider_isValid = false;

    m_shipping_method_isSet = false;
    m_shipping_method_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_tracking_link_isSet = false;
    m_tracking_link_isValid = false;

    m_tracking_numbers_isSet = false;
    m_tracking_numbers_isValid = false;

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;
}

void OAIOrderShipmentAdd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderShipmentAdd::fromJsonObject(QJsonObject json) {

    m_adjust_stock_isValid = ::OpenAPI::fromJsonValue(m_adjust_stock, json[QString("adjust_stock")]);
    m_adjust_stock_isSet = !json[QString("adjust_stock")].isNull() && m_adjust_stock_isValid;

    m_enable_cache_isValid = ::OpenAPI::fromJsonValue(m_enable_cache, json[QString("enable_cache")]);
    m_enable_cache_isSet = !json[QString("enable_cache")].isNull() && m_enable_cache_isValid;

    m_is_shipped_isValid = ::OpenAPI::fromJsonValue(m_is_shipped, json[QString("is_shipped")]);
    m_is_shipped_isSet = !json[QString("is_shipped")].isNull() && m_is_shipped_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_send_notifications_isValid = ::OpenAPI::fromJsonValue(m_send_notifications, json[QString("send_notifications")]);
    m_send_notifications_isSet = !json[QString("send_notifications")].isNull() && m_send_notifications_isValid;

    m_shipment_provider_isValid = ::OpenAPI::fromJsonValue(m_shipment_provider, json[QString("shipment_provider")]);
    m_shipment_provider_isSet = !json[QString("shipment_provider")].isNull() && m_shipment_provider_isValid;

    m_shipping_method_isValid = ::OpenAPI::fromJsonValue(m_shipping_method, json[QString("shipping_method")]);
    m_shipping_method_isSet = !json[QString("shipping_method")].isNull() && m_shipping_method_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_tracking_link_isValid = ::OpenAPI::fromJsonValue(m_tracking_link, json[QString("tracking_link")]);
    m_tracking_link_isSet = !json[QString("tracking_link")].isNull() && m_tracking_link_isValid;

    m_tracking_numbers_isValid = ::OpenAPI::fromJsonValue(m_tracking_numbers, json[QString("tracking_numbers")]);
    m_tracking_numbers_isSet = !json[QString("tracking_numbers")].isNull() && m_tracking_numbers_isValid;

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouse_id")]);
    m_warehouse_id_isSet = !json[QString("warehouse_id")].isNull() && m_warehouse_id_isValid;
}

QString OAIOrderShipmentAdd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderShipmentAdd::asJsonObject() const {
    QJsonObject obj;
    if (m_adjust_stock_isSet) {
        obj.insert(QString("adjust_stock"), ::OpenAPI::toJsonValue(m_adjust_stock));
    }
    if (m_enable_cache_isSet) {
        obj.insert(QString("enable_cache"), ::OpenAPI::toJsonValue(m_enable_cache));
    }
    if (m_is_shipped_isSet) {
        obj.insert(QString("is_shipped"), ::OpenAPI::toJsonValue(m_is_shipped));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_send_notifications_isSet) {
        obj.insert(QString("send_notifications"), ::OpenAPI::toJsonValue(m_send_notifications));
    }
    if (m_shipment_provider_isSet) {
        obj.insert(QString("shipment_provider"), ::OpenAPI::toJsonValue(m_shipment_provider));
    }
    if (m_shipping_method_isSet) {
        obj.insert(QString("shipping_method"), ::OpenAPI::toJsonValue(m_shipping_method));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_tracking_link_isSet) {
        obj.insert(QString("tracking_link"), ::OpenAPI::toJsonValue(m_tracking_link));
    }
    if (m_tracking_numbers.size() > 0) {
        obj.insert(QString("tracking_numbers"), ::OpenAPI::toJsonValue(m_tracking_numbers));
    }
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouse_id"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    return obj;
}

bool OAIOrderShipmentAdd::isAdjustStock() const {
    return m_adjust_stock;
}
void OAIOrderShipmentAdd::setAdjustStock(const bool &adjust_stock) {
    m_adjust_stock = adjust_stock;
    m_adjust_stock_isSet = true;
}

bool OAIOrderShipmentAdd::is_adjust_stock_Set() const{
    return m_adjust_stock_isSet;
}

bool OAIOrderShipmentAdd::is_adjust_stock_Valid() const{
    return m_adjust_stock_isValid;
}

bool OAIOrderShipmentAdd::isEnableCache() const {
    return m_enable_cache;
}
void OAIOrderShipmentAdd::setEnableCache(const bool &enable_cache) {
    m_enable_cache = enable_cache;
    m_enable_cache_isSet = true;
}

bool OAIOrderShipmentAdd::is_enable_cache_Set() const{
    return m_enable_cache_isSet;
}

bool OAIOrderShipmentAdd::is_enable_cache_Valid() const{
    return m_enable_cache_isValid;
}

bool OAIOrderShipmentAdd::isIsShipped() const {
    return m_is_shipped;
}
void OAIOrderShipmentAdd::setIsShipped(const bool &is_shipped) {
    m_is_shipped = is_shipped;
    m_is_shipped_isSet = true;
}

bool OAIOrderShipmentAdd::is_is_shipped_Set() const{
    return m_is_shipped_isSet;
}

bool OAIOrderShipmentAdd::is_is_shipped_Valid() const{
    return m_is_shipped_isValid;
}

QList<OAIOrderShipmentAdd_items_inner> OAIOrderShipmentAdd::getItems() const {
    return m_items;
}
void OAIOrderShipmentAdd::setItems(const QList<OAIOrderShipmentAdd_items_inner> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIOrderShipmentAdd::is_items_Set() const{
    return m_items_isSet;
}

bool OAIOrderShipmentAdd::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIOrderShipmentAdd::getOrderId() const {
    return m_order_id;
}
void OAIOrderShipmentAdd::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrderShipmentAdd::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrderShipmentAdd::is_order_id_Valid() const{
    return m_order_id_isValid;
}

bool OAIOrderShipmentAdd::isSendNotifications() const {
    return m_send_notifications;
}
void OAIOrderShipmentAdd::setSendNotifications(const bool &send_notifications) {
    m_send_notifications = send_notifications;
    m_send_notifications_isSet = true;
}

bool OAIOrderShipmentAdd::is_send_notifications_Set() const{
    return m_send_notifications_isSet;
}

bool OAIOrderShipmentAdd::is_send_notifications_Valid() const{
    return m_send_notifications_isValid;
}

QString OAIOrderShipmentAdd::getShipmentProvider() const {
    return m_shipment_provider;
}
void OAIOrderShipmentAdd::setShipmentProvider(const QString &shipment_provider) {
    m_shipment_provider = shipment_provider;
    m_shipment_provider_isSet = true;
}

bool OAIOrderShipmentAdd::is_shipment_provider_Set() const{
    return m_shipment_provider_isSet;
}

bool OAIOrderShipmentAdd::is_shipment_provider_Valid() const{
    return m_shipment_provider_isValid;
}

QString OAIOrderShipmentAdd::getShippingMethod() const {
    return m_shipping_method;
}
void OAIOrderShipmentAdd::setShippingMethod(const QString &shipping_method) {
    m_shipping_method = shipping_method;
    m_shipping_method_isSet = true;
}

bool OAIOrderShipmentAdd::is_shipping_method_Set() const{
    return m_shipping_method_isSet;
}

bool OAIOrderShipmentAdd::is_shipping_method_Valid() const{
    return m_shipping_method_isValid;
}

QString OAIOrderShipmentAdd::getStoreId() const {
    return m_store_id;
}
void OAIOrderShipmentAdd::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIOrderShipmentAdd::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIOrderShipmentAdd::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QString OAIOrderShipmentAdd::getTrackingLink() const {
    return m_tracking_link;
}
void OAIOrderShipmentAdd::setTrackingLink(const QString &tracking_link) {
    m_tracking_link = tracking_link;
    m_tracking_link_isSet = true;
}

bool OAIOrderShipmentAdd::is_tracking_link_Set() const{
    return m_tracking_link_isSet;
}

bool OAIOrderShipmentAdd::is_tracking_link_Valid() const{
    return m_tracking_link_isValid;
}

QList<OAIOrderShipmentAdd_tracking_numbers_inner> OAIOrderShipmentAdd::getTrackingNumbers() const {
    return m_tracking_numbers;
}
void OAIOrderShipmentAdd::setTrackingNumbers(const QList<OAIOrderShipmentAdd_tracking_numbers_inner> &tracking_numbers) {
    m_tracking_numbers = tracking_numbers;
    m_tracking_numbers_isSet = true;
}

bool OAIOrderShipmentAdd::is_tracking_numbers_Set() const{
    return m_tracking_numbers_isSet;
}

bool OAIOrderShipmentAdd::is_tracking_numbers_Valid() const{
    return m_tracking_numbers_isValid;
}

QString OAIOrderShipmentAdd::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIOrderShipmentAdd::setWarehouseId(const QString &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIOrderShipmentAdd::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIOrderShipmentAdd::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

bool OAIOrderShipmentAdd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjust_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderShipmentAdd::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
