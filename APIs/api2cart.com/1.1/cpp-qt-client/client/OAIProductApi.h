/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductApi_H
#define OAI_OAIProductApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountConfigUpdate_200_response.h"
#include "OAIAttributeDelete_200_response.h"
#include "OAICartConfigUpdate_200_response.h"
#include "OAICartValidate_200_response.h"
#include "OAIModel_Response_Product_Attribute_List.h"
#include "OAIModel_Response_Product_ChildItem_List.h"
#include "OAIModel_Response_Product_List.h"
#include "OAIProductAdd.h"
#include "OAIProductAdd_200_response.h"
#include "OAIProductAttributeValueSet_200_response.h"
#include "OAIProductAttributeValueUnset_200_response.h"
#include "OAIProductBrandList_200_response.h"
#include "OAIProductChildItemFind_200_response.h"
#include "OAIProductChildItemInfo_200_response.h"
#include "OAIProductCount_200_response.h"
#include "OAIProductCurrencyAdd_200_response.h"
#include "OAIProductCurrencyList_200_response.h"
#include "OAIProductDelete_200_response.h"
#include "OAIProductFind_200_response.h"
#include "OAIProductImageAdd.h"
#include "OAIProductImageAdd_200_response.h"
#include "OAIProductImageUpdate_200_response.h"
#include "OAIProductInfo_200_response.h"
#include "OAIProductManufacturerAdd_200_response.h"
#include "OAIProductOptionAdd_200_response.h"
#include "OAIProductOptionAssign_200_response.h"
#include "OAIProductOptionList_200_response.h"
#include "OAIProductOptionValueAdd_200_response.h"
#include "OAIProductOptionValueAssign_200_response.h"
#include "OAIProductPriceAdd.h"
#include "OAIProductPriceUpdate.h"
#include "OAIProductReviewList_200_response.h"
#include "OAIProductTaxAdd.h"
#include "OAIProductTaxAdd_200_response.h"
#include "OAIProductUpdate.h"
#include "OAIProductVariantAdd.h"
#include "OAIProductVariantAdd_200_response.h"
#include "OAIProductVariantCount_200_response.h"
#include "OAIProductVariantImageAdd.h"
#include "OAIProductVariantList_200_response.h"
#include "OAIProductVariantPriceAdd.h"
#include "OAIProductVariantPriceUpdate.h"
#include "OAIProductVariantUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductApi : public QObject {
    Q_OBJECT

public:
    OAIProductApi(const int timeOut = 0);
    ~OAIProductApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_product_add OAIProductAdd [required]
    */
    virtual void productAdd(const OAIProductAdd &oai_product_add);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  attribute_id QString [optional]
    * @param[in]  variant_id QString [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  attribute_group_id QString [optional]
    * @param[in]  set_name QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void productAttributeList(const QString &product_id, const ::OpenAPI::OptionalParam<QString> &attribute_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &variant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &attribute_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &set_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  attribute_id QString [optional]
    * @param[in]  attribute_group_id QString [optional]
    * @param[in]  attribute_name QString [optional]
    * @param[in]  value QString [optional]
    * @param[in]  value_id qint32 [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void productAttributeValueSet(const QString &product_id, const ::OpenAPI::OptionalParam<QString> &attribute_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &value_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  attribute_id QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  include_default bool [optional]
    * @param[in]  reindex bool [optional]
    * @param[in]  clear_cache bool [optional]
    */
    virtual void productAttributeValueUnset(const QString &product_id, const QString &attribute_id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_default = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &reindex = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &clear_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  brand_ids QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void productBrandList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &brand_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  find_value QString [required]
    * @param[in]  find_where QString [optional]
    * @param[in]  find_params QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void productChildItemFind(const QString &find_value, const ::OpenAPI::OptionalParam<QString> &find_where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &find_params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  currency_id QString [optional]
    */
    virtual void productChildItemInfo(const QString &product_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  product_id QString [optional]
    * @param[in]  product_ids QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  currency_id QString [optional]
    * @param[in]  avail_sale bool [optional]
    * @param[in]  report_request_id QString [optional]
    * @param[in]  disable_report_cache bool [optional]
    */
    virtual void productChildItemList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail_sale = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &report_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_report_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  category_id QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  avail_view bool [optional]
    * @param[in]  avail_sale bool [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  product_ids QString [optional]
    * @param[in]  report_request_id QString [optional]
    * @param[in]  disable_report_cache bool [optional]
    * @param[in]  brand_name QString [optional]
    * @param[in]  product_attributes QList<QString> [optional]
    * @param[in]  status QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void productCount(const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail_view = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &avail_sale = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_report_cache = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &brand_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_attributes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  iso3 QString [required]
    * @param[in]  rate double [required]
    * @param[in]  name QString [optional]
    * @param[in]  avail bool [optional]
    * @param[in]  symbol_left QString [optional]
    * @param[in]  symbol_right QString [optional]
    * @param[in]  r_default bool [optional]
    */
    virtual void productCurrencyAdd(const QString &iso3, const double &rate, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &symbol_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &symbol_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_default = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  r_default bool [optional]
    * @param[in]  avail bool [optional]
    */
    virtual void productCurrencyList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_default = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void productDelete(const QString &id);


    virtual void productFields();

    /**
    * @param[in]  find_value QString [required]
    * @param[in]  find_where QString [optional]
    * @param[in]  find_params QString [optional]
    * @param[in]  find_what QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void productFind(const QString &find_value, const ::OpenAPI::OptionalParam<QString> &find_where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &find_params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &find_what = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_product_image_add OAIProductImageAdd [required]
    */
    virtual void productImageAdd(const OAIProductImageAdd &oai_product_image_add);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void productImageDelete(const QString &product_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  variant_ids QString [optional]
    * @param[in]  image_name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  position qint32 [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  hidden bool [optional]
    */
    virtual void productImageUpdate(const QString &product_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &variant_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &position = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &hidden = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  currency_id QString [optional]
    * @param[in]  report_request_id QString [optional]
    * @param[in]  disable_report_cache bool [optional]
    */
    virtual void productInfo(const QString &id, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_report_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  category_id QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  avail_view bool [optional]
    * @param[in]  avail_sale bool [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  currency_id QString [optional]
    * @param[in]  product_ids QString [optional]
    * @param[in]  since_id qint32 [optional]
    * @param[in]  report_request_id QString [optional]
    * @param[in]  disable_report_cache bool [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  sku QString [optional]
    * @param[in]  disable_cache bool [optional]
    * @param[in]  brand_name QString [optional]
    * @param[in]  product_attributes QList<QString> [optional]
    * @param[in]  status QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void productList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail_view = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &avail_sale = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &since_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &report_request_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_report_cache = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_cache = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &brand_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_attributes = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  manufacturer QString [required]
    */
    virtual void productManufacturerAdd(const QString &product_id, const QString &manufacturer);

    /**
    * @param[in]  name QString [required]
    * @param[in]  type QString [required]
    * @param[in]  product_id QString [optional]
    * @param[in]  default_option_value QString [optional]
    * @param[in]  option_values QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  avail bool [optional]
    * @param[in]  sort_order qint32 [optional]
    * @param[in]  required bool [optional]
    * @param[in]  clear_cache bool [optional]
    */
    virtual void productOptionAdd(const QString &name, const QString &type, const ::OpenAPI::OptionalParam<QString> &product_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_option_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &option_values = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &sort_order = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &clear_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  option_id QString [required]
    * @param[in]  required bool [optional]
    * @param[in]  sort_order qint32 [optional]
    * @param[in]  option_values QString [optional]
    * @param[in]  clear_cache bool [optional]
    */
    virtual void productOptionAssign(const QString &product_id, const QString &option_id, const ::OpenAPI::OptionalParam<bool> &required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &sort_order = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &option_values = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &clear_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  product_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void productOptionList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  option_id QString [required]
    * @param[in]  option_value QString [required]
    * @param[in]  sort_order qint32 [optional]
    * @param[in]  clear_cache bool [optional]
    */
    virtual void productOptionValueAdd(const QString &product_id, const QString &option_id, const QString &option_value, const ::OpenAPI::OptionalParam<qint32> &sort_order = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &clear_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  product_option_id qint32 [required]
    * @param[in]  option_value_id qint32 [required]
    * @param[in]  clear_cache bool [optional]
    */
    virtual void productOptionValueAssign(const qint32 &product_option_id, const qint32 &option_value_id, const ::OpenAPI::OptionalParam<bool> &clear_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  option_id QString [required]
    * @param[in]  option_value_id qint32 [required]
    * @param[in]  option_value QString [required]
    * @param[in]  price double [optional]
    * @param[in]  quantity double [optional]
    * @param[in]  clear_cache bool [optional]
    */
    virtual void productOptionValueUpdate(const QString &product_id, const QString &option_id, const qint32 &option_value_id, const QString &option_value, const ::OpenAPI::OptionalParam<double> &price = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &quantity = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &clear_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_product_price_add OAIProductPriceAdd [required]
    */
    virtual void productPriceAdd(const OAIProductPriceAdd &oai_product_price_add);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  group_prices QString [optional]
    */
    virtual void productPriceDelete(const QString &product_id, const ::OpenAPI::OptionalParam<QString> &group_prices = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_product_price_update OAIProductPriceUpdate [required]
    */
    virtual void productPriceUpdate(const OAIProductPriceUpdate &oai_product_price_update);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void productReviewList(const QString &product_id, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  store_id QString [required]
    */
    virtual void productStoreAssign(const QString &product_id, const QString &store_id);

    /**
    * @param[in]  oai_product_tax_add OAIProductTaxAdd [required]
    */
    virtual void productTaxAdd(const OAIProductTaxAdd &oai_product_tax_add);

    /**
    * @param[in]  oai_product_update OAIProductUpdate [required]
    */
    virtual void productUpdate(const OAIProductUpdate &oai_product_update);

    /**
    * @param[in]  oai_product_variant_add OAIProductVariantAdd [required]
    */
    virtual void productVariantAdd(const OAIProductVariantAdd &oai_product_variant_add);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  category_id QString [optional]
    * @param[in]  store_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void productVariantCount(const QString &product_id, const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void productVariantDelete(const QString &id, const QString &product_id);

    /**
    * @param[in]  oai_product_variant_image_add OAIProductVariantImageAdd [required]
    */
    virtual void productVariantImageAdd(const OAIProductVariantImageAdd &oai_product_variant_image_add);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  product_variant_id qint32 [required]
    * @param[in]  id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void productVariantImageDelete(const QString &product_id, const qint32 &product_variant_id, const QString &id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void productVariantInfo(const QString &id, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  category_id QString [optional]
    * @param[in]  product_id QString [optional]
    * @param[in]  store_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void productVariantList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_product_variant_price_add OAIProductVariantPriceAdd [required]
    */
    virtual void productVariantPriceAdd(const OAIProductVariantPriceAdd &oai_product_variant_price_add);

    /**
    * @param[in]  id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  group_prices QString [required]
    */
    virtual void productVariantPriceDelete(const QString &id, const QString &product_id, const QString &group_prices);

    /**
    * @param[in]  oai_product_variant_price_update OAIProductVariantPriceUpdate [required]
    */
    virtual void productVariantPriceUpdate(const OAIProductVariantPriceUpdate &oai_product_variant_price_update);

    /**
    * @param[in]  oai_product_variant_update OAIProductVariantUpdate [required]
    */
    virtual void productVariantUpdate(const OAIProductVariantUpdate &oai_product_variant_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productAddCallback(OAIHttpRequestWorker *worker);
    void productAttributeListCallback(OAIHttpRequestWorker *worker);
    void productAttributeValueSetCallback(OAIHttpRequestWorker *worker);
    void productAttributeValueUnsetCallback(OAIHttpRequestWorker *worker);
    void productBrandListCallback(OAIHttpRequestWorker *worker);
    void productChildItemFindCallback(OAIHttpRequestWorker *worker);
    void productChildItemInfoCallback(OAIHttpRequestWorker *worker);
    void productChildItemListCallback(OAIHttpRequestWorker *worker);
    void productCountCallback(OAIHttpRequestWorker *worker);
    void productCurrencyAddCallback(OAIHttpRequestWorker *worker);
    void productCurrencyListCallback(OAIHttpRequestWorker *worker);
    void productDeleteCallback(OAIHttpRequestWorker *worker);
    void productFieldsCallback(OAIHttpRequestWorker *worker);
    void productFindCallback(OAIHttpRequestWorker *worker);
    void productImageAddCallback(OAIHttpRequestWorker *worker);
    void productImageDeleteCallback(OAIHttpRequestWorker *worker);
    void productImageUpdateCallback(OAIHttpRequestWorker *worker);
    void productInfoCallback(OAIHttpRequestWorker *worker);
    void productListCallback(OAIHttpRequestWorker *worker);
    void productManufacturerAddCallback(OAIHttpRequestWorker *worker);
    void productOptionAddCallback(OAIHttpRequestWorker *worker);
    void productOptionAssignCallback(OAIHttpRequestWorker *worker);
    void productOptionListCallback(OAIHttpRequestWorker *worker);
    void productOptionValueAddCallback(OAIHttpRequestWorker *worker);
    void productOptionValueAssignCallback(OAIHttpRequestWorker *worker);
    void productOptionValueUpdateCallback(OAIHttpRequestWorker *worker);
    void productPriceAddCallback(OAIHttpRequestWorker *worker);
    void productPriceDeleteCallback(OAIHttpRequestWorker *worker);
    void productPriceUpdateCallback(OAIHttpRequestWorker *worker);
    void productReviewListCallback(OAIHttpRequestWorker *worker);
    void productStoreAssignCallback(OAIHttpRequestWorker *worker);
    void productTaxAddCallback(OAIHttpRequestWorker *worker);
    void productUpdateCallback(OAIHttpRequestWorker *worker);
    void productVariantAddCallback(OAIHttpRequestWorker *worker);
    void productVariantCountCallback(OAIHttpRequestWorker *worker);
    void productVariantDeleteCallback(OAIHttpRequestWorker *worker);
    void productVariantImageAddCallback(OAIHttpRequestWorker *worker);
    void productVariantImageDeleteCallback(OAIHttpRequestWorker *worker);
    void productVariantInfoCallback(OAIHttpRequestWorker *worker);
    void productVariantListCallback(OAIHttpRequestWorker *worker);
    void productVariantPriceAddCallback(OAIHttpRequestWorker *worker);
    void productVariantPriceDeleteCallback(OAIHttpRequestWorker *worker);
    void productVariantPriceUpdateCallback(OAIHttpRequestWorker *worker);
    void productVariantUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productAddSignal(OAIProductAdd_200_response summary);
    void productAttributeListSignal(OAIModel_Response_Product_Attribute_List summary);
    void productAttributeValueSetSignal(OAIProductAttributeValueSet_200_response summary);
    void productAttributeValueUnsetSignal(OAIProductAttributeValueUnset_200_response summary);
    void productBrandListSignal(OAIProductBrandList_200_response summary);
    void productChildItemFindSignal(OAIProductChildItemFind_200_response summary);
    void productChildItemInfoSignal(OAIProductChildItemInfo_200_response summary);
    void productChildItemListSignal(OAIModel_Response_Product_ChildItem_List summary);
    void productCountSignal(OAIProductCount_200_response summary);
    void productCurrencyAddSignal(OAIProductCurrencyAdd_200_response summary);
    void productCurrencyListSignal(OAIProductCurrencyList_200_response summary);
    void productDeleteSignal(OAIProductDelete_200_response summary);
    void productFieldsSignal(OAICartConfigUpdate_200_response summary);
    void productFindSignal(OAIProductFind_200_response summary);
    void productImageAddSignal(OAIProductImageAdd_200_response summary);
    void productImageDeleteSignal(OAIAttributeDelete_200_response summary);
    void productImageUpdateSignal(OAIProductImageUpdate_200_response summary);
    void productInfoSignal(OAIProductInfo_200_response summary);
    void productListSignal(OAIModel_Response_Product_List summary);
    void productManufacturerAddSignal(OAIProductManufacturerAdd_200_response summary);
    void productOptionAddSignal(OAIProductOptionAdd_200_response summary);
    void productOptionAssignSignal(OAIProductOptionAssign_200_response summary);
    void productOptionListSignal(OAIProductOptionList_200_response summary);
    void productOptionValueAddSignal(OAIProductOptionValueAdd_200_response summary);
    void productOptionValueAssignSignal(OAIProductOptionValueAssign_200_response summary);
    void productOptionValueUpdateSignal(OAIAccountConfigUpdate_200_response summary);
    void productPriceAddSignal(OAICartValidate_200_response summary);
    void productPriceDeleteSignal(OAIAttributeDelete_200_response summary);
    void productPriceUpdateSignal(OAIAccountConfigUpdate_200_response summary);
    void productReviewListSignal(OAIProductReviewList_200_response summary);
    void productStoreAssignSignal(OAIAccountConfigUpdate_200_response summary);
    void productTaxAddSignal(OAIProductTaxAdd_200_response summary);
    void productUpdateSignal(OAIAccountConfigUpdate_200_response summary);
    void productVariantAddSignal(OAIProductVariantAdd_200_response summary);
    void productVariantCountSignal(OAIProductVariantCount_200_response summary);
    void productVariantDeleteSignal(OAIAttributeDelete_200_response summary);
    void productVariantImageAddSignal(OAIProductImageAdd_200_response summary);
    void productVariantImageDeleteSignal(OAIAttributeDelete_200_response summary);
    void productVariantInfoSignal(OAIProductInfo_200_response summary);
    void productVariantListSignal(OAIProductVariantList_200_response summary);
    void productVariantPriceAddSignal(OAICartValidate_200_response summary);
    void productVariantPriceDeleteSignal(OAIAttributeDelete_200_response summary);
    void productVariantPriceUpdateSignal(OAIAccountConfigUpdate_200_response summary);
    void productVariantUpdateSignal(OAIAccountConfigUpdate_200_response summary);


    void productAddSignalFull(OAIHttpRequestWorker *worker, OAIProductAdd_200_response summary);
    void productAttributeListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Product_Attribute_List summary);
    void productAttributeValueSetSignalFull(OAIHttpRequestWorker *worker, OAIProductAttributeValueSet_200_response summary);
    void productAttributeValueUnsetSignalFull(OAIHttpRequestWorker *worker, OAIProductAttributeValueUnset_200_response summary);
    void productBrandListSignalFull(OAIHttpRequestWorker *worker, OAIProductBrandList_200_response summary);
    void productChildItemFindSignalFull(OAIHttpRequestWorker *worker, OAIProductChildItemFind_200_response summary);
    void productChildItemInfoSignalFull(OAIHttpRequestWorker *worker, OAIProductChildItemInfo_200_response summary);
    void productChildItemListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Product_ChildItem_List summary);
    void productCountSignalFull(OAIHttpRequestWorker *worker, OAIProductCount_200_response summary);
    void productCurrencyAddSignalFull(OAIHttpRequestWorker *worker, OAIProductCurrencyAdd_200_response summary);
    void productCurrencyListSignalFull(OAIHttpRequestWorker *worker, OAIProductCurrencyList_200_response summary);
    void productDeleteSignalFull(OAIHttpRequestWorker *worker, OAIProductDelete_200_response summary);
    void productFieldsSignalFull(OAIHttpRequestWorker *worker, OAICartConfigUpdate_200_response summary);
    void productFindSignalFull(OAIHttpRequestWorker *worker, OAIProductFind_200_response summary);
    void productImageAddSignalFull(OAIHttpRequestWorker *worker, OAIProductImageAdd_200_response summary);
    void productImageDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void productImageUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProductImageUpdate_200_response summary);
    void productInfoSignalFull(OAIHttpRequestWorker *worker, OAIProductInfo_200_response summary);
    void productListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Product_List summary);
    void productManufacturerAddSignalFull(OAIHttpRequestWorker *worker, OAIProductManufacturerAdd_200_response summary);
    void productOptionAddSignalFull(OAIHttpRequestWorker *worker, OAIProductOptionAdd_200_response summary);
    void productOptionAssignSignalFull(OAIHttpRequestWorker *worker, OAIProductOptionAssign_200_response summary);
    void productOptionListSignalFull(OAIHttpRequestWorker *worker, OAIProductOptionList_200_response summary);
    void productOptionValueAddSignalFull(OAIHttpRequestWorker *worker, OAIProductOptionValueAdd_200_response summary);
    void productOptionValueAssignSignalFull(OAIHttpRequestWorker *worker, OAIProductOptionValueAssign_200_response summary);
    void productOptionValueUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);
    void productPriceAddSignalFull(OAIHttpRequestWorker *worker, OAICartValidate_200_response summary);
    void productPriceDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void productPriceUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);
    void productReviewListSignalFull(OAIHttpRequestWorker *worker, OAIProductReviewList_200_response summary);
    void productStoreAssignSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);
    void productTaxAddSignalFull(OAIHttpRequestWorker *worker, OAIProductTaxAdd_200_response summary);
    void productUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);
    void productVariantAddSignalFull(OAIHttpRequestWorker *worker, OAIProductVariantAdd_200_response summary);
    void productVariantCountSignalFull(OAIHttpRequestWorker *worker, OAIProductVariantCount_200_response summary);
    void productVariantDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void productVariantImageAddSignalFull(OAIHttpRequestWorker *worker, OAIProductImageAdd_200_response summary);
    void productVariantImageDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void productVariantInfoSignalFull(OAIHttpRequestWorker *worker, OAIProductInfo_200_response summary);
    void productVariantListSignalFull(OAIHttpRequestWorker *worker, OAIProductVariantList_200_response summary);
    void productVariantPriceAddSignalFull(OAIHttpRequestWorker *worker, OAICartValidate_200_response summary);
    void productVariantPriceDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void productVariantPriceUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);
    void productVariantUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);

    Q_DECL_DEPRECATED_X("Use productAddSignalError() instead")
    void productAddSignalE(OAIProductAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productAddSignalError(OAIProductAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productAttributeListSignalError() instead")
    void productAttributeListSignalE(OAIModel_Response_Product_Attribute_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productAttributeListSignalError(OAIModel_Response_Product_Attribute_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productAttributeValueSetSignalError() instead")
    void productAttributeValueSetSignalE(OAIProductAttributeValueSet_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productAttributeValueSetSignalError(OAIProductAttributeValueSet_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productAttributeValueUnsetSignalError() instead")
    void productAttributeValueUnsetSignalE(OAIProductAttributeValueUnset_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productAttributeValueUnsetSignalError(OAIProductAttributeValueUnset_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productBrandListSignalError() instead")
    void productBrandListSignalE(OAIProductBrandList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productBrandListSignalError(OAIProductBrandList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productChildItemFindSignalError() instead")
    void productChildItemFindSignalE(OAIProductChildItemFind_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productChildItemFindSignalError(OAIProductChildItemFind_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productChildItemInfoSignalError() instead")
    void productChildItemInfoSignalE(OAIProductChildItemInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productChildItemInfoSignalError(OAIProductChildItemInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productChildItemListSignalError() instead")
    void productChildItemListSignalE(OAIModel_Response_Product_ChildItem_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productChildItemListSignalError(OAIModel_Response_Product_ChildItem_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountSignalError() instead")
    void productCountSignalE(OAIProductCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountSignalError(OAIProductCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCurrencyAddSignalError() instead")
    void productCurrencyAddSignalE(OAIProductCurrencyAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCurrencyAddSignalError(OAIProductCurrencyAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCurrencyListSignalError() instead")
    void productCurrencyListSignalE(OAIProductCurrencyList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCurrencyListSignalError(OAIProductCurrencyList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeleteSignalError() instead")
    void productDeleteSignalE(OAIProductDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeleteSignalError(OAIProductDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productFieldsSignalError() instead")
    void productFieldsSignalE(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productFieldsSignalError(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productFindSignalError() instead")
    void productFindSignalE(OAIProductFind_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productFindSignalError(OAIProductFind_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productImageAddSignalError() instead")
    void productImageAddSignalE(OAIProductImageAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productImageAddSignalError(OAIProductImageAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productImageDeleteSignalError() instead")
    void productImageDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productImageDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productImageUpdateSignalError() instead")
    void productImageUpdateSignalE(OAIProductImageUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productImageUpdateSignalError(OAIProductImageUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productInfoSignalError() instead")
    void productInfoSignalE(OAIProductInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productInfoSignalError(OAIProductInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productListSignalError() instead")
    void productListSignalE(OAIModel_Response_Product_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productListSignalError(OAIModel_Response_Product_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productManufacturerAddSignalError() instead")
    void productManufacturerAddSignalE(OAIProductManufacturerAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productManufacturerAddSignalError(OAIProductManufacturerAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionAddSignalError() instead")
    void productOptionAddSignalE(OAIProductOptionAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionAddSignalError(OAIProductOptionAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionAssignSignalError() instead")
    void productOptionAssignSignalE(OAIProductOptionAssign_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionAssignSignalError(OAIProductOptionAssign_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionListSignalError() instead")
    void productOptionListSignalE(OAIProductOptionList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionListSignalError(OAIProductOptionList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionValueAddSignalError() instead")
    void productOptionValueAddSignalE(OAIProductOptionValueAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionValueAddSignalError(OAIProductOptionValueAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionValueAssignSignalError() instead")
    void productOptionValueAssignSignalE(OAIProductOptionValueAssign_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionValueAssignSignalError(OAIProductOptionValueAssign_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionValueUpdateSignalError() instead")
    void productOptionValueUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionValueUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPriceAddSignalError() instead")
    void productPriceAddSignalE(OAICartValidate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPriceAddSignalError(OAICartValidate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPriceDeleteSignalError() instead")
    void productPriceDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPriceDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPriceUpdateSignalError() instead")
    void productPriceUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPriceUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productReviewListSignalError() instead")
    void productReviewListSignalE(OAIProductReviewList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productReviewListSignalError(OAIProductReviewList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productStoreAssignSignalError() instead")
    void productStoreAssignSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productStoreAssignSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productTaxAddSignalError() instead")
    void productTaxAddSignalE(OAIProductTaxAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productTaxAddSignalError(OAIProductTaxAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productUpdateSignalError() instead")
    void productUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantAddSignalError() instead")
    void productVariantAddSignalE(OAIProductVariantAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantAddSignalError(OAIProductVariantAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantCountSignalError() instead")
    void productVariantCountSignalE(OAIProductVariantCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantCountSignalError(OAIProductVariantCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantDeleteSignalError() instead")
    void productVariantDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantImageAddSignalError() instead")
    void productVariantImageAddSignalE(OAIProductImageAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantImageAddSignalError(OAIProductImageAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantImageDeleteSignalError() instead")
    void productVariantImageDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantImageDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantInfoSignalError() instead")
    void productVariantInfoSignalE(OAIProductInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantInfoSignalError(OAIProductInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantListSignalError() instead")
    void productVariantListSignalE(OAIProductVariantList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantListSignalError(OAIProductVariantList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantPriceAddSignalError() instead")
    void productVariantPriceAddSignalE(OAICartValidate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantPriceAddSignalError(OAICartValidate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantPriceDeleteSignalError() instead")
    void productVariantPriceDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantPriceDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantPriceUpdateSignalError() instead")
    void productVariantPriceUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantPriceUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantUpdateSignalError() instead")
    void productVariantUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productAddSignalErrorFull() instead")
    void productAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productAttributeListSignalErrorFull() instead")
    void productAttributeListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productAttributeListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productAttributeValueSetSignalErrorFull() instead")
    void productAttributeValueSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productAttributeValueSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productAttributeValueUnsetSignalErrorFull() instead")
    void productAttributeValueUnsetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productAttributeValueUnsetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productBrandListSignalErrorFull() instead")
    void productBrandListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productBrandListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productChildItemFindSignalErrorFull() instead")
    void productChildItemFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productChildItemFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productChildItemInfoSignalErrorFull() instead")
    void productChildItemInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productChildItemInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productChildItemListSignalErrorFull() instead")
    void productChildItemListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productChildItemListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCountSignalErrorFull() instead")
    void productCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCurrencyAddSignalErrorFull() instead")
    void productCurrencyAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCurrencyAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCurrencyListSignalErrorFull() instead")
    void productCurrencyListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCurrencyListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeleteSignalErrorFull() instead")
    void productDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productFieldsSignalErrorFull() instead")
    void productFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productFindSignalErrorFull() instead")
    void productFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productImageAddSignalErrorFull() instead")
    void productImageAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productImageAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productImageDeleteSignalErrorFull() instead")
    void productImageDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productImageDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productImageUpdateSignalErrorFull() instead")
    void productImageUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productImageUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productInfoSignalErrorFull() instead")
    void productInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productListSignalErrorFull() instead")
    void productListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productManufacturerAddSignalErrorFull() instead")
    void productManufacturerAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productManufacturerAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionAddSignalErrorFull() instead")
    void productOptionAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionAssignSignalErrorFull() instead")
    void productOptionAssignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionAssignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionListSignalErrorFull() instead")
    void productOptionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionValueAddSignalErrorFull() instead")
    void productOptionValueAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionValueAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionValueAssignSignalErrorFull() instead")
    void productOptionValueAssignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionValueAssignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productOptionValueUpdateSignalErrorFull() instead")
    void productOptionValueUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productOptionValueUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPriceAddSignalErrorFull() instead")
    void productPriceAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPriceAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPriceDeleteSignalErrorFull() instead")
    void productPriceDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPriceDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPriceUpdateSignalErrorFull() instead")
    void productPriceUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPriceUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productReviewListSignalErrorFull() instead")
    void productReviewListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productReviewListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productStoreAssignSignalErrorFull() instead")
    void productStoreAssignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productStoreAssignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productTaxAddSignalErrorFull() instead")
    void productTaxAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productTaxAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productUpdateSignalErrorFull() instead")
    void productUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantAddSignalErrorFull() instead")
    void productVariantAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantCountSignalErrorFull() instead")
    void productVariantCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantDeleteSignalErrorFull() instead")
    void productVariantDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantImageAddSignalErrorFull() instead")
    void productVariantImageAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantImageAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantImageDeleteSignalErrorFull() instead")
    void productVariantImageDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantImageDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantInfoSignalErrorFull() instead")
    void productVariantInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantListSignalErrorFull() instead")
    void productVariantListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantPriceAddSignalErrorFull() instead")
    void productVariantPriceAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantPriceAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantPriceDeleteSignalErrorFull() instead")
    void productVariantPriceDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantPriceDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantPriceUpdateSignalErrorFull() instead")
    void productVariantPriceUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantPriceUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productVariantUpdateSignalErrorFull() instead")
    void productVariantUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productVariantUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
