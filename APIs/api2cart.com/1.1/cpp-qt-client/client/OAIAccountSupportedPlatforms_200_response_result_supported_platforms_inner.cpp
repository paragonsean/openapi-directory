/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner() {
    this->initializeModel();
}

OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::~OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner() {}

void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::initializeModel() {

    m_cart_id_isSet = false;
    m_cart_id_isValid = false;

    m_cart_method_isSet = false;
    m_cart_method_isValid = false;

    m_cart_name_isSet = false;
    m_cart_name_isValid = false;

    m_cart_versions_isSet = false;
    m_cart_versions_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;
}

void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::fromJsonObject(QJsonObject json) {

    m_cart_id_isValid = ::OpenAPI::fromJsonValue(m_cart_id, json[QString("cart_id")]);
    m_cart_id_isSet = !json[QString("cart_id")].isNull() && m_cart_id_isValid;

    m_cart_method_isValid = ::OpenAPI::fromJsonValue(m_cart_method, json[QString("cart_method")]);
    m_cart_method_isSet = !json[QString("cart_method")].isNull() && m_cart_method_isValid;

    m_cart_name_isValid = ::OpenAPI::fromJsonValue(m_cart_name, json[QString("cart_name")]);
    m_cart_name_isSet = !json[QString("cart_name")].isNull() && m_cart_name_isValid;

    m_cart_versions_isValid = ::OpenAPI::fromJsonValue(m_cart_versions, json[QString("cart_versions")]);
    m_cart_versions_isSet = !json[QString("cart_versions")].isNull() && m_cart_versions_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;
}

QString OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_cart_id_isSet) {
        obj.insert(QString("cart_id"), ::OpenAPI::toJsonValue(m_cart_id));
    }
    if (m_cart_method_isSet) {
        obj.insert(QString("cart_method"), ::OpenAPI::toJsonValue(m_cart_method));
    }
    if (m_cart_name_isSet) {
        obj.insert(QString("cart_name"), ::OpenAPI::toJsonValue(m_cart_name));
    }
    if (m_cart_versions_isSet) {
        obj.insert(QString("cart_versions"), ::OpenAPI::toJsonValue(m_cart_versions));
    }
    if (m_params.isSet()) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    return obj;
}

QString OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::getCartId() const {
    return m_cart_id;
}
void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::setCartId(const QString &cart_id) {
    m_cart_id = cart_id;
    m_cart_id_isSet = true;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_id_Set() const{
    return m_cart_id_isSet;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_id_Valid() const{
    return m_cart_id_isValid;
}

QString OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::getCartMethod() const {
    return m_cart_method;
}
void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::setCartMethod(const QString &cart_method) {
    m_cart_method = cart_method;
    m_cart_method_isSet = true;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_method_Set() const{
    return m_cart_method_isSet;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_method_Valid() const{
    return m_cart_method_isValid;
}

QString OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::getCartName() const {
    return m_cart_name;
}
void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::setCartName(const QString &cart_name) {
    m_cart_name = cart_name;
    m_cart_name_isSet = true;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_name_Set() const{
    return m_cart_name_isSet;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_name_Valid() const{
    return m_cart_name_isValid;
}

QString OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::getCartVersions() const {
    return m_cart_versions;
}
void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::setCartVersions(const QString &cart_versions) {
    m_cart_versions = cart_versions;
    m_cart_versions_isSet = true;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_versions_Set() const{
    return m_cart_versions_isSet;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_cart_versions_Valid() const{
    return m_cart_versions_isValid;
}

OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner_params OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::getParams() const {
    return m_params;
}
void OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::setParams(const OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner_params &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_params_Set() const{
    return m_params_isSet;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::is_params_Valid() const{
    return m_params_isValid;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cart_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cart_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountSupportedPlatforms_200_response_result_supported_platforms_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
