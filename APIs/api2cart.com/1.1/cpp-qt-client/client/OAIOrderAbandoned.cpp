/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderAbandoned.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderAbandoned::OAIOrderAbandoned(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderAbandoned::OAIOrderAbandoned() {
    this->initializeModel();
}

OAIOrderAbandoned::~OAIOrderAbandoned() {}

void OAIOrderAbandoned::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_basket_id_isSet = false;
    m_basket_id_isValid = false;

    m_basket_url_isSet = false;
    m_basket_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_order_products_isSet = false;
    m_order_products_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;
}

void OAIOrderAbandoned::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderAbandoned::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_basket_id_isValid = ::OpenAPI::fromJsonValue(m_basket_id, json[QString("basket_id")]);
    m_basket_id_isSet = !json[QString("basket_id")].isNull() && m_basket_id_isValid;

    m_basket_url_isValid = ::OpenAPI::fromJsonValue(m_basket_url, json[QString("basket_url")]);
    m_basket_url_isSet = !json[QString("basket_url")].isNull() && m_basket_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_order_products_isValid = ::OpenAPI::fromJsonValue(m_order_products, json[QString("order_products")]);
    m_order_products_isSet = !json[QString("order_products")].isNull() && m_order_products_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;
}

QString OAIOrderAbandoned::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderAbandoned::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_basket_id_isSet) {
        obj.insert(QString("basket_id"), ::OpenAPI::toJsonValue(m_basket_id));
    }
    if (m_basket_url_isSet) {
        obj.insert(QString("basket_url"), ::OpenAPI::toJsonValue(m_basket_url));
    }
    if (m_created_at.isSet()) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_at.isSet()) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_order_products.size() > 0) {
        obj.insert(QString("order_products"), ::OpenAPI::toJsonValue(m_order_products));
    }
    if (m_totals.isSet()) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    return obj;
}

OAIObject OAIOrderAbandoned::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIOrderAbandoned::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIOrderAbandoned::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIOrderAbandoned::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QString OAIOrderAbandoned::getBasketId() const {
    return m_basket_id;
}
void OAIOrderAbandoned::setBasketId(const QString &basket_id) {
    m_basket_id = basket_id;
    m_basket_id_isSet = true;
}

bool OAIOrderAbandoned::is_basket_id_Set() const{
    return m_basket_id_isSet;
}

bool OAIOrderAbandoned::is_basket_id_Valid() const{
    return m_basket_id_isValid;
}

QString OAIOrderAbandoned::getBasketUrl() const {
    return m_basket_url;
}
void OAIOrderAbandoned::setBasketUrl(const QString &basket_url) {
    m_basket_url = basket_url;
    m_basket_url_isSet = true;
}

bool OAIOrderAbandoned::is_basket_url_Set() const{
    return m_basket_url_isSet;
}

bool OAIOrderAbandoned::is_basket_url_Valid() const{
    return m_basket_url_isValid;
}

OAIA2CDateTime OAIOrderAbandoned::getCreatedAt() const {
    return m_created_at;
}
void OAIOrderAbandoned::setCreatedAt(const OAIA2CDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrderAbandoned::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrderAbandoned::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAICurrency OAIOrderAbandoned::getCurrency() const {
    return m_currency;
}
void OAIOrderAbandoned::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrderAbandoned::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrderAbandoned::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIObject OAIOrderAbandoned::getCustomFields() const {
    return m_custom_fields;
}
void OAIOrderAbandoned::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOrderAbandoned::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOrderAbandoned::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

OAIBaseCustomer OAIOrderAbandoned::getCustomer() const {
    return m_customer;
}
void OAIOrderAbandoned::setCustomer(const OAIBaseCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIOrderAbandoned::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIOrderAbandoned::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIOrderAbandoned::getId() const {
    return m_id;
}
void OAIOrderAbandoned::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderAbandoned::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderAbandoned::is_id_Valid() const{
    return m_id_isValid;
}

OAIA2CDateTime OAIOrderAbandoned::getModifiedAt() const {
    return m_modified_at;
}
void OAIOrderAbandoned::setModifiedAt(const OAIA2CDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIOrderAbandoned::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIOrderAbandoned::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QList<OAIOrder_Item> OAIOrderAbandoned::getOrderProducts() const {
    return m_order_products;
}
void OAIOrderAbandoned::setOrderProducts(const QList<OAIOrder_Item> &order_products) {
    m_order_products = order_products;
    m_order_products_isSet = true;
}

bool OAIOrderAbandoned::is_order_products_Set() const{
    return m_order_products_isSet;
}

bool OAIOrderAbandoned::is_order_products_Valid() const{
    return m_order_products_isValid;
}

OAIOrder_Totals OAIOrderAbandoned::getTotals() const {
    return m_totals;
}
void OAIOrderAbandoned::setTotals(const OAIOrder_Totals &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIOrderAbandoned::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIOrderAbandoned::is_totals_Valid() const{
    return m_totals_isValid;
}

bool OAIOrderAbandoned::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_basket_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderAbandoned::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
