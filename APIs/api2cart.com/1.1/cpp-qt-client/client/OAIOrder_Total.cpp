/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrder_Total.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrder_Total::OAIOrder_Total(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrder_Total::OAIOrder_Total() {
    this->initializeModel();
}

OAIOrder_Total::~OAIOrder_Total() {}

void OAIOrder_Total::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_shipping_ex_tax_isSet = false;
    m_shipping_ex_tax_isValid = false;

    m_subtotal_ex_tax_isSet = false;
    m_subtotal_ex_tax_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_discount_isSet = false;
    m_total_discount_isValid = false;

    m_total_paid_isSet = false;
    m_total_paid_isValid = false;

    m_total_tax_isSet = false;
    m_total_tax_isValid = false;

    m_wrapping_ex_tax_isSet = false;
    m_wrapping_ex_tax_isValid = false;
}

void OAIOrder_Total::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrder_Total::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_shipping_ex_tax_isValid = ::OpenAPI::fromJsonValue(m_shipping_ex_tax, json[QString("shipping_ex_tax")]);
    m_shipping_ex_tax_isSet = !json[QString("shipping_ex_tax")].isNull() && m_shipping_ex_tax_isValid;

    m_subtotal_ex_tax_isValid = ::OpenAPI::fromJsonValue(m_subtotal_ex_tax, json[QString("subtotal_ex_tax")]);
    m_subtotal_ex_tax_isSet = !json[QString("subtotal_ex_tax")].isNull() && m_subtotal_ex_tax_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_discount_isValid = ::OpenAPI::fromJsonValue(m_total_discount, json[QString("total_discount")]);
    m_total_discount_isSet = !json[QString("total_discount")].isNull() && m_total_discount_isValid;

    m_total_paid_isValid = ::OpenAPI::fromJsonValue(m_total_paid, json[QString("total_paid")]);
    m_total_paid_isSet = !json[QString("total_paid")].isNull() && m_total_paid_isValid;

    m_total_tax_isValid = ::OpenAPI::fromJsonValue(m_total_tax, json[QString("total_tax")]);
    m_total_tax_isSet = !json[QString("total_tax")].isNull() && m_total_tax_isValid;

    m_wrapping_ex_tax_isValid = ::OpenAPI::fromJsonValue(m_wrapping_ex_tax, json[QString("wrapping_ex_tax")]);
    m_wrapping_ex_tax_isSet = !json[QString("wrapping_ex_tax")].isNull() && m_wrapping_ex_tax_isValid;
}

QString OAIOrder_Total::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrder_Total::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_shipping_ex_tax_isSet) {
        obj.insert(QString("shipping_ex_tax"), ::OpenAPI::toJsonValue(m_shipping_ex_tax));
    }
    if (m_subtotal_ex_tax_isSet) {
        obj.insert(QString("subtotal_ex_tax"), ::OpenAPI::toJsonValue(m_subtotal_ex_tax));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_discount_isSet) {
        obj.insert(QString("total_discount"), ::OpenAPI::toJsonValue(m_total_discount));
    }
    if (m_total_paid_isSet) {
        obj.insert(QString("total_paid"), ::OpenAPI::toJsonValue(m_total_paid));
    }
    if (m_total_tax_isSet) {
        obj.insert(QString("total_tax"), ::OpenAPI::toJsonValue(m_total_tax));
    }
    if (m_wrapping_ex_tax_isSet) {
        obj.insert(QString("wrapping_ex_tax"), ::OpenAPI::toJsonValue(m_wrapping_ex_tax));
    }
    return obj;
}

OAIObject OAIOrder_Total::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIOrder_Total::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIOrder_Total::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIOrder_Total::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAIOrder_Total::getCustomFields() const {
    return m_custom_fields;
}
void OAIOrder_Total::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOrder_Total::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOrder_Total::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

double OAIOrder_Total::getShippingExTax() const {
    return m_shipping_ex_tax;
}
void OAIOrder_Total::setShippingExTax(const double &shipping_ex_tax) {
    m_shipping_ex_tax = shipping_ex_tax;
    m_shipping_ex_tax_isSet = true;
}

bool OAIOrder_Total::is_shipping_ex_tax_Set() const{
    return m_shipping_ex_tax_isSet;
}

bool OAIOrder_Total::is_shipping_ex_tax_Valid() const{
    return m_shipping_ex_tax_isValid;
}

double OAIOrder_Total::getSubtotalExTax() const {
    return m_subtotal_ex_tax;
}
void OAIOrder_Total::setSubtotalExTax(const double &subtotal_ex_tax) {
    m_subtotal_ex_tax = subtotal_ex_tax;
    m_subtotal_ex_tax_isSet = true;
}

bool OAIOrder_Total::is_subtotal_ex_tax_Set() const{
    return m_subtotal_ex_tax_isSet;
}

bool OAIOrder_Total::is_subtotal_ex_tax_Valid() const{
    return m_subtotal_ex_tax_isValid;
}

double OAIOrder_Total::getTotal() const {
    return m_total;
}
void OAIOrder_Total::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIOrder_Total::is_total_Set() const{
    return m_total_isSet;
}

bool OAIOrder_Total::is_total_Valid() const{
    return m_total_isValid;
}

double OAIOrder_Total::getTotalDiscount() const {
    return m_total_discount;
}
void OAIOrder_Total::setTotalDiscount(const double &total_discount) {
    m_total_discount = total_discount;
    m_total_discount_isSet = true;
}

bool OAIOrder_Total::is_total_discount_Set() const{
    return m_total_discount_isSet;
}

bool OAIOrder_Total::is_total_discount_Valid() const{
    return m_total_discount_isValid;
}

double OAIOrder_Total::getTotalPaid() const {
    return m_total_paid;
}
void OAIOrder_Total::setTotalPaid(const double &total_paid) {
    m_total_paid = total_paid;
    m_total_paid_isSet = true;
}

bool OAIOrder_Total::is_total_paid_Set() const{
    return m_total_paid_isSet;
}

bool OAIOrder_Total::is_total_paid_Valid() const{
    return m_total_paid_isValid;
}

double OAIOrder_Total::getTotalTax() const {
    return m_total_tax;
}
void OAIOrder_Total::setTotalTax(const double &total_tax) {
    m_total_tax = total_tax;
    m_total_tax_isSet = true;
}

bool OAIOrder_Total::is_total_tax_Set() const{
    return m_total_tax_isSet;
}

bool OAIOrder_Total::is_total_tax_Valid() const{
    return m_total_tax_isValid;
}

double OAIOrder_Total::getWrappingExTax() const {
    return m_wrapping_ex_tax;
}
void OAIOrder_Total::setWrappingExTax(const double &wrapping_ex_tax) {
    m_wrapping_ex_tax = wrapping_ex_tax;
    m_wrapping_ex_tax_isSet = true;
}

bool OAIOrder_Total::is_wrapping_ex_tax_Set() const{
    return m_wrapping_ex_tax_isSet;
}

bool OAIOrder_Total::is_wrapping_ex_tax_Valid() const{
    return m_wrapping_ex_tax_isValid;
}

bool OAIOrder_Total::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_ex_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtotal_ex_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_discount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_paid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapping_ex_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrder_Total::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
