/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductTaxAdd.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductTaxAdd::OAIProductTaxAdd(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductTaxAdd::OAIProductTaxAdd() {
    this->initializeModel();
}

OAIProductTaxAdd::~OAIProductTaxAdd() {}

void OAIProductTaxAdd::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_tax_rates_isSet = false;
    m_tax_rates_isValid = false;
}

void OAIProductTaxAdd::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductTaxAdd::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("product_id")]);
    m_product_id_isSet = !json[QString("product_id")].isNull() && m_product_id_isValid;

    m_tax_rates_isValid = ::OpenAPI::fromJsonValue(m_tax_rates, json[QString("tax_rates")]);
    m_tax_rates_isSet = !json[QString("tax_rates")].isNull() && m_tax_rates_isValid;
}

QString OAIProductTaxAdd::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductTaxAdd::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("product_id"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_tax_rates.size() > 0) {
        obj.insert(QString("tax_rates"), ::OpenAPI::toJsonValue(m_tax_rates));
    }
    return obj;
}

QString OAIProductTaxAdd::getName() const {
    return m_name;
}
void OAIProductTaxAdd::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductTaxAdd::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductTaxAdd::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProductTaxAdd::getProductId() const {
    return m_product_id;
}
void OAIProductTaxAdd::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductTaxAdd::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductTaxAdd::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QList<OAIProductTaxAdd_tax_rates_inner> OAIProductTaxAdd::getTaxRates() const {
    return m_tax_rates;
}
void OAIProductTaxAdd::setTaxRates(const QList<OAIProductTaxAdd_tax_rates_inner> &tax_rates) {
    m_tax_rates = tax_rates;
    m_tax_rates_isSet = true;
}

bool OAIProductTaxAdd::is_tax_rates_Set() const{
    return m_tax_rates_isSet;
}

bool OAIProductTaxAdd::is_tax_rates_Valid() const{
    return m_tax_rates_isValid;
}

bool OAIProductTaxAdd::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductTaxAdd::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_tax_rates_isValid && true;
}

} // namespace OpenAPI
