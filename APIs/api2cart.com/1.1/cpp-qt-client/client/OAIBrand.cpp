/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrand::OAIBrand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrand::OAIBrand() {
    this->initializeModel();
}

OAIBrand::~OAIBrand() {}

void OAIBrand::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_full_description_isSet = false;
    m_full_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_meta_description_isSet = false;
    m_meta_description_isValid = false;

    m_meta_keywords_isSet = false;
    m_meta_keywords_isValid = false;

    m_meta_title_isSet = false;
    m_meta_title_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_stores_ids_isSet = false;
    m_stores_ids_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIBrand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrand::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_full_description_isValid = ::OpenAPI::fromJsonValue(m_full_description, json[QString("full_description")]);
    m_full_description_isSet = !json[QString("full_description")].isNull() && m_full_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_meta_description_isValid = ::OpenAPI::fromJsonValue(m_meta_description, json[QString("meta_description")]);
    m_meta_description_isSet = !json[QString("meta_description")].isNull() && m_meta_description_isValid;

    m_meta_keywords_isValid = ::OpenAPI::fromJsonValue(m_meta_keywords, json[QString("meta_keywords")]);
    m_meta_keywords_isSet = !json[QString("meta_keywords")].isNull() && m_meta_keywords_isValid;

    m_meta_title_isValid = ::OpenAPI::fromJsonValue(m_meta_title, json[QString("meta_title")]);
    m_meta_title_isSet = !json[QString("meta_title")].isNull() && m_meta_title_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modified_time")]);
    m_modified_time_isSet = !json[QString("modified_time")].isNull() && m_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("short_description")]);
    m_short_description_isSet = !json[QString("short_description")].isNull() && m_short_description_isValid;

    m_stores_ids_isValid = ::OpenAPI::fromJsonValue(m_stores_ids, json[QString("stores_ids")]);
    m_stores_ids_isSet = !json[QString("stores_ids")].isNull() && m_stores_ids_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIBrand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrand::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_full_description_isSet) {
        obj.insert(QString("full_description"), ::OpenAPI::toJsonValue(m_full_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_meta_description_isSet) {
        obj.insert(QString("meta_description"), ::OpenAPI::toJsonValue(m_meta_description));
    }
    if (m_meta_keywords_isSet) {
        obj.insert(QString("meta_keywords"), ::OpenAPI::toJsonValue(m_meta_keywords));
    }
    if (m_meta_title_isSet) {
        obj.insert(QString("meta_title"), ::OpenAPI::toJsonValue(m_meta_title));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modified_time"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("short_description"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_stores_ids.size() > 0) {
        obj.insert(QString("stores_ids"), ::OpenAPI::toJsonValue(m_stores_ids));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIBrand::isActive() const {
    return m_active;
}
void OAIBrand::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIBrand::is_active_Set() const{
    return m_active_isSet;
}

bool OAIBrand::is_active_Valid() const{
    return m_active_isValid;
}

OAIObject OAIBrand::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIBrand::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIBrand::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIBrand::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QString OAIBrand::getCreatedTime() const {
    return m_created_time;
}
void OAIBrand::setCreatedTime(const QString &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIBrand::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIBrand::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIObject OAIBrand::getCustomFields() const {
    return m_custom_fields;
}
void OAIBrand::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIBrand::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIBrand::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIBrand::getFullDescription() const {
    return m_full_description;
}
void OAIBrand::setFullDescription(const QString &full_description) {
    m_full_description = full_description;
    m_full_description_isSet = true;
}

bool OAIBrand::is_full_description_Set() const{
    return m_full_description_isSet;
}

bool OAIBrand::is_full_description_Valid() const{
    return m_full_description_isValid;
}

QString OAIBrand::getId() const {
    return m_id;
}
void OAIBrand::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBrand::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBrand::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImage> OAIBrand::getImages() const {
    return m_images;
}
void OAIBrand::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIBrand::is_images_Set() const{
    return m_images_isSet;
}

bool OAIBrand::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIBrand::getMetaDescription() const {
    return m_meta_description;
}
void OAIBrand::setMetaDescription(const QString &meta_description) {
    m_meta_description = meta_description;
    m_meta_description_isSet = true;
}

bool OAIBrand::is_meta_description_Set() const{
    return m_meta_description_isSet;
}

bool OAIBrand::is_meta_description_Valid() const{
    return m_meta_description_isValid;
}

QString OAIBrand::getMetaKeywords() const {
    return m_meta_keywords;
}
void OAIBrand::setMetaKeywords(const QString &meta_keywords) {
    m_meta_keywords = meta_keywords;
    m_meta_keywords_isSet = true;
}

bool OAIBrand::is_meta_keywords_Set() const{
    return m_meta_keywords_isSet;
}

bool OAIBrand::is_meta_keywords_Valid() const{
    return m_meta_keywords_isValid;
}

QString OAIBrand::getMetaTitle() const {
    return m_meta_title;
}
void OAIBrand::setMetaTitle(const QString &meta_title) {
    m_meta_title = meta_title;
    m_meta_title_isSet = true;
}

bool OAIBrand::is_meta_title_Set() const{
    return m_meta_title_isSet;
}

bool OAIBrand::is_meta_title_Valid() const{
    return m_meta_title_isValid;
}

QString OAIBrand::getModifiedTime() const {
    return m_modified_time;
}
void OAIBrand::setModifiedTime(const QString &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIBrand::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIBrand::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAIBrand::getName() const {
    return m_name;
}
void OAIBrand::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBrand::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBrand::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBrand::getShortDescription() const {
    return m_short_description;
}
void OAIBrand::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIBrand::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIBrand::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QList<QString> OAIBrand::getStoresIds() const {
    return m_stores_ids;
}
void OAIBrand::setStoresIds(const QList<QString> &stores_ids) {
    m_stores_ids = stores_ids;
    m_stores_ids_isSet = true;
}

bool OAIBrand::is_stores_ids_Set() const{
    return m_stores_ids_isSet;
}

bool OAIBrand::is_stores_ids_Valid() const{
    return m_stores_ids_isValid;
}

QString OAIBrand::getUrl() const {
    return m_url;
}
void OAIBrand::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBrand::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBrand::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIBrand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
