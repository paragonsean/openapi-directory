/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICategory::OAICategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICategory::OAICategory() {
    this->initializeModel();
}

OAICategory::~OAICategory() {}

void OAICategory::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_avail_isSet = false;
    m_avail_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_meta_description_isSet = false;
    m_meta_description_isValid = false;

    m_meta_title_isSet = false;
    m_meta_title_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_seo_url_isSet = false;
    m_seo_url_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_stores_ids_isSet = false;
    m_stores_ids_isValid = false;
}

void OAICategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICategory::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_avail_isValid = ::OpenAPI::fromJsonValue(m_avail, json[QString("avail")]);
    m_avail_isSet = !json[QString("avail")].isNull() && m_avail_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_meta_description_isValid = ::OpenAPI::fromJsonValue(m_meta_description, json[QString("meta_description")]);
    m_meta_description_isSet = !json[QString("meta_description")].isNull() && m_meta_description_isValid;

    m_meta_title_isValid = ::OpenAPI::fromJsonValue(m_meta_title, json[QString("meta_title")]);
    m_meta_title_isSet = !json[QString("meta_title")].isNull() && m_meta_title_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_seo_url_isValid = ::OpenAPI::fromJsonValue(m_seo_url, json[QString("seo_url")]);
    m_seo_url_isSet = !json[QString("seo_url")].isNull() && m_seo_url_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("short_description")]);
    m_short_description_isSet = !json[QString("short_description")].isNull() && m_short_description_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_stores_ids_isValid = ::OpenAPI::fromJsonValue(m_stores_ids, json[QString("stores_ids")]);
    m_stores_ids_isSet = !json[QString("stores_ids")].isNull() && m_stores_ids_isValid;
}

QString OAICategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICategory::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_avail_isSet) {
        obj.insert(QString("avail"), ::OpenAPI::toJsonValue(m_avail));
    }
    if (m_created_at.isSet()) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_meta_description_isSet) {
        obj.insert(QString("meta_description"), ::OpenAPI::toJsonValue(m_meta_description));
    }
    if (m_meta_title_isSet) {
        obj.insert(QString("meta_title"), ::OpenAPI::toJsonValue(m_meta_title));
    }
    if (m_modified_at.isSet()) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_seo_url_isSet) {
        obj.insert(QString("seo_url"), ::OpenAPI::toJsonValue(m_seo_url));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("short_description"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_stores_ids.size() > 0) {
        obj.insert(QString("stores_ids"), ::OpenAPI::toJsonValue(m_stores_ids));
    }
    return obj;
}

OAIObject OAICategory::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICategory::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICategory::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICategory::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

bool OAICategory::isAvail() const {
    return m_avail;
}
void OAICategory::setAvail(const bool &avail) {
    m_avail = avail;
    m_avail_isSet = true;
}

bool OAICategory::is_avail_Set() const{
    return m_avail_isSet;
}

bool OAICategory::is_avail_Valid() const{
    return m_avail_isValid;
}

OAIA2CDateTime OAICategory::getCreatedAt() const {
    return m_created_at;
}
void OAICategory::setCreatedAt(const OAIA2CDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICategory::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICategory::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAICategory::getCustomFields() const {
    return m_custom_fields;
}
void OAICategory::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICategory::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICategory::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICategory::getDescription() const {
    return m_description;
}
void OAICategory::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICategory::is_description_Set() const{
    return m_description_isSet;
}

bool OAICategory::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICategory::getId() const {
    return m_id;
}
void OAICategory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAICategory::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImage> OAICategory::getImages() const {
    return m_images;
}
void OAICategory::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAICategory::is_images_Set() const{
    return m_images_isSet;
}

bool OAICategory::is_images_Valid() const{
    return m_images_isValid;
}

QString OAICategory::getKeywords() const {
    return m_keywords;
}
void OAICategory::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAICategory::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAICategory::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAICategory::getMetaDescription() const {
    return m_meta_description;
}
void OAICategory::setMetaDescription(const QString &meta_description) {
    m_meta_description = meta_description;
    m_meta_description_isSet = true;
}

bool OAICategory::is_meta_description_Set() const{
    return m_meta_description_isSet;
}

bool OAICategory::is_meta_description_Valid() const{
    return m_meta_description_isValid;
}

QString OAICategory::getMetaTitle() const {
    return m_meta_title;
}
void OAICategory::setMetaTitle(const QString &meta_title) {
    m_meta_title = meta_title;
    m_meta_title_isSet = true;
}

bool OAICategory::is_meta_title_Set() const{
    return m_meta_title_isSet;
}

bool OAICategory::is_meta_title_Valid() const{
    return m_meta_title_isValid;
}

OAIA2CDateTime OAICategory::getModifiedAt() const {
    return m_modified_at;
}
void OAICategory::setModifiedAt(const OAIA2CDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAICategory::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAICategory::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAICategory::getName() const {
    return m_name;
}
void OAICategory::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICategory::is_name_Set() const{
    return m_name_isSet;
}

bool OAICategory::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICategory::getParentId() const {
    return m_parent_id;
}
void OAICategory::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAICategory::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAICategory::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAICategory::getPath() const {
    return m_path;
}
void OAICategory::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICategory::is_path_Set() const{
    return m_path_isSet;
}

bool OAICategory::is_path_Valid() const{
    return m_path_isValid;
}

QString OAICategory::getSeoUrl() const {
    return m_seo_url;
}
void OAICategory::setSeoUrl(const QString &seo_url) {
    m_seo_url = seo_url;
    m_seo_url_isSet = true;
}

bool OAICategory::is_seo_url_Set() const{
    return m_seo_url_isSet;
}

bool OAICategory::is_seo_url_Valid() const{
    return m_seo_url_isValid;
}

QString OAICategory::getShortDescription() const {
    return m_short_description;
}
void OAICategory::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAICategory::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAICategory::is_short_description_Valid() const{
    return m_short_description_isValid;
}

qint32 OAICategory::getSortOrder() const {
    return m_sort_order;
}
void OAICategory::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAICategory::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAICategory::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

QList<QString> OAICategory::getStoresIds() const {
    return m_stores_ids;
}
void OAICategory::setStoresIds(const QList<QString> &stores_ids) {
    m_stores_ids = stores_ids;
    m_stores_ids_isSet = true;
}

bool OAICategory::is_stores_ids_Set() const{
    return m_stores_ids_isSet;
}

bool OAICategory::is_stores_ids_Valid() const{
    return m_stores_ids_isValid;
}

bool OAICategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
