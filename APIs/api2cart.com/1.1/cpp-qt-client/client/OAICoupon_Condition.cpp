/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoupon_Condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoupon_Condition::OAICoupon_Condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoupon_Condition::OAICoupon_Condition() {
    this->initializeModel();
}

OAICoupon_Condition::~OAICoupon_Condition() {}

void OAICoupon_Condition::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_logic_operator_isSet = false;
    m_logic_operator_isValid = false;

    m_match_items_isSet = false;
    m_match_items_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_sub_conditions_isSet = false;
    m_sub_conditions_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICoupon_Condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoupon_Condition::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_logic_operator_isValid = ::OpenAPI::fromJsonValue(m_logic_operator, json[QString("logic_operator")]);
    m_logic_operator_isSet = !json[QString("logic_operator")].isNull() && m_logic_operator_isValid;

    m_match_items_isValid = ::OpenAPI::fromJsonValue(m_match_items, json[QString("match_items")]);
    m_match_items_isSet = !json[QString("match_items")].isNull() && m_match_items_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_sub_conditions_isValid = ::OpenAPI::fromJsonValue(m_sub_conditions, json[QString("sub-conditions")]);
    m_sub_conditions_isSet = !json[QString("sub-conditions")].isNull() && m_sub_conditions_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAICoupon_Condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoupon_Condition::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_logic_operator_isSet) {
        obj.insert(QString("logic_operator"), ::OpenAPI::toJsonValue(m_logic_operator));
    }
    if (m_match_items_isSet) {
        obj.insert(QString("match_items"), ::OpenAPI::toJsonValue(m_match_items));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_sub_conditions.size() > 0) {
        obj.insert(QString("sub-conditions"), ::OpenAPI::toJsonValue(m_sub_conditions));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIObject OAICoupon_Condition::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICoupon_Condition::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICoupon_Condition::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICoupon_Condition::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIObject OAICoupon_Condition::getCustomFields() const {
    return m_custom_fields;
}
void OAICoupon_Condition::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICoupon_Condition::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICoupon_Condition::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICoupon_Condition::getEntity() const {
    return m_entity;
}
void OAICoupon_Condition::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAICoupon_Condition::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAICoupon_Condition::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAICoupon_Condition::getId() const {
    return m_id;
}
void OAICoupon_Condition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICoupon_Condition::is_id_Set() const{
    return m_id_isSet;
}

bool OAICoupon_Condition::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICoupon_Condition::getKey() const {
    return m_key;
}
void OAICoupon_Condition::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICoupon_Condition::is_key_Set() const{
    return m_key_isSet;
}

bool OAICoupon_Condition::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICoupon_Condition::getLogicOperator() const {
    return m_logic_operator;
}
void OAICoupon_Condition::setLogicOperator(const QString &logic_operator) {
    m_logic_operator = logic_operator;
    m_logic_operator_isSet = true;
}

bool OAICoupon_Condition::is_logic_operator_Set() const{
    return m_logic_operator_isSet;
}

bool OAICoupon_Condition::is_logic_operator_Valid() const{
    return m_logic_operator_isValid;
}

QString OAICoupon_Condition::getMatchItems() const {
    return m_match_items;
}
void OAICoupon_Condition::setMatchItems(const QString &match_items) {
    m_match_items = match_items;
    m_match_items_isSet = true;
}

bool OAICoupon_Condition::is_match_items_Set() const{
    return m_match_items_isSet;
}

bool OAICoupon_Condition::is_match_items_Valid() const{
    return m_match_items_isValid;
}

QString OAICoupon_Condition::getROperator() const {
    return m_r_operator;
}
void OAICoupon_Condition::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAICoupon_Condition::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAICoupon_Condition::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QList<OAICoupon_Condition> OAICoupon_Condition::getSubConditions() const {
    return m_sub_conditions;
}
void OAICoupon_Condition::setSubConditions(const QList<OAICoupon_Condition> &sub_conditions) {
    m_sub_conditions = sub_conditions;
    m_sub_conditions_isSet = true;
}

bool OAICoupon_Condition::is_sub_conditions_Set() const{
    return m_sub_conditions_isSet;
}

bool OAICoupon_Condition::is_sub_conditions_Valid() const{
    return m_sub_conditions_isValid;
}

QString OAICoupon_Condition::getValue() const {
    return m_value;
}
void OAICoupon_Condition::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICoupon_Condition::is_value_Set() const{
    return m_value_isSet;
}

bool OAICoupon_Condition::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICoupon_Condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logic_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoupon_Condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
