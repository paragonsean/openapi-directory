/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer_WishList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer_WishList::OAICustomer_WishList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer_WishList::OAICustomer_WishList() {
    this->initializeModel();
}

OAICustomer_WishList::~OAICustomer_WishList() {}

void OAICustomer_WishList::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;
}

void OAICustomer_WishList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer_WishList::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;
}

QString OAICustomer_WishList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer_WishList::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_created_at.isSet()) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_modified_at.isSet()) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    return obj;
}

OAIObject OAICustomer_WishList::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICustomer_WishList::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICustomer_WishList::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICustomer_WishList::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

OAIA2CDateTime OAICustomer_WishList::getCreatedAt() const {
    return m_created_at;
}
void OAICustomer_WishList::setCreatedAt(const OAIA2CDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICustomer_WishList::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICustomer_WishList::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAICustomer_WishList::getCustomFields() const {
    return m_custom_fields;
}
void OAICustomer_WishList::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICustomer_WishList::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICustomer_WishList::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICustomer_WishList::getDescription() const {
    return m_description;
}
void OAICustomer_WishList::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomer_WishList::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomer_WishList::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICustomer_WishList::getId() const {
    return m_id;
}
void OAICustomer_WishList::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomer_WishList::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomer_WishList::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomer_WishList::getIsPublic() const {
    return m_is_public;
}
void OAICustomer_WishList::setIsPublic(const QString &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAICustomer_WishList::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAICustomer_WishList::is_is_public_Valid() const{
    return m_is_public_isValid;
}

OAIA2CDateTime OAICustomer_WishList::getModifiedAt() const {
    return m_modified_at;
}
void OAICustomer_WishList::setModifiedAt(const OAIA2CDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAICustomer_WishList::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAICustomer_WishList::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAICustomer_WishList::getName() const {
    return m_name;
}
void OAICustomer_WishList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomer_WishList::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomer_WishList::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAICustomer_WishList_Item> OAICustomer_WishList::getProducts() const {
    return m_products;
}
void OAICustomer_WishList::setProducts(const QList<OAICustomer_WishList_Item> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAICustomer_WishList::is_products_Set() const{
    return m_products_isSet;
}

bool OAICustomer_WishList::is_products_Valid() const{
    return m_products_isValid;
}

bool OAICustomer_WishList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer_WishList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
