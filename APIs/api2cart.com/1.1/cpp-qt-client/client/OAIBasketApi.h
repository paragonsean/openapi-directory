/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBasketApi_H
#define OAI_OAIBasketApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBasketInfo_200_response.h"
#include "OAIBasketItemAdd_200_response.h"
#include "OAIBasketLiveShippingServiceCreate_200_response.h"
#include "OAIBasketLiveShippingServiceDelete_200_response.h"
#include "OAIBasketLiveShippingServiceList_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBasketApi : public QObject {
    Q_OBJECT

public:
    OAIBasketApi(const int timeOut = 0);
    ~OAIBasketApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void basketInfo(const QString &id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  variant_id QString [optional]
    * @param[in]  quantity double [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void basketItemAdd(const QString &customer_id, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &variant_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &quantity = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  callback QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void basketLiveShippingServiceCreate(const QString &name, const QString &callback, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void basketLiveShippingServiceDelete(const qint32 &id);

    /**
    * @param[in]  store_id QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    */
    virtual void basketLiveShippingServiceList(const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void basketInfoCallback(OAIHttpRequestWorker *worker);
    void basketItemAddCallback(OAIHttpRequestWorker *worker);
    void basketLiveShippingServiceCreateCallback(OAIHttpRequestWorker *worker);
    void basketLiveShippingServiceDeleteCallback(OAIHttpRequestWorker *worker);
    void basketLiveShippingServiceListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void basketInfoSignal(OAIBasketInfo_200_response summary);
    void basketItemAddSignal(OAIBasketItemAdd_200_response summary);
    void basketLiveShippingServiceCreateSignal(OAIBasketLiveShippingServiceCreate_200_response summary);
    void basketLiveShippingServiceDeleteSignal(OAIBasketLiveShippingServiceDelete_200_response summary);
    void basketLiveShippingServiceListSignal(OAIBasketLiveShippingServiceList_200_response summary);


    void basketInfoSignalFull(OAIHttpRequestWorker *worker, OAIBasketInfo_200_response summary);
    void basketItemAddSignalFull(OAIHttpRequestWorker *worker, OAIBasketItemAdd_200_response summary);
    void basketLiveShippingServiceCreateSignalFull(OAIHttpRequestWorker *worker, OAIBasketLiveShippingServiceCreate_200_response summary);
    void basketLiveShippingServiceDeleteSignalFull(OAIHttpRequestWorker *worker, OAIBasketLiveShippingServiceDelete_200_response summary);
    void basketLiveShippingServiceListSignalFull(OAIHttpRequestWorker *worker, OAIBasketLiveShippingServiceList_200_response summary);

    Q_DECL_DEPRECATED_X("Use basketInfoSignalError() instead")
    void basketInfoSignalE(OAIBasketInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketInfoSignalError(OAIBasketInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketItemAddSignalError() instead")
    void basketItemAddSignalE(OAIBasketItemAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketItemAddSignalError(OAIBasketItemAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketLiveShippingServiceCreateSignalError() instead")
    void basketLiveShippingServiceCreateSignalE(OAIBasketLiveShippingServiceCreate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketLiveShippingServiceCreateSignalError(OAIBasketLiveShippingServiceCreate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketLiveShippingServiceDeleteSignalError() instead")
    void basketLiveShippingServiceDeleteSignalE(OAIBasketLiveShippingServiceDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketLiveShippingServiceDeleteSignalError(OAIBasketLiveShippingServiceDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketLiveShippingServiceListSignalError() instead")
    void basketLiveShippingServiceListSignalE(OAIBasketLiveShippingServiceList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void basketLiveShippingServiceListSignalError(OAIBasketLiveShippingServiceList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use basketInfoSignalErrorFull() instead")
    void basketInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketItemAddSignalErrorFull() instead")
    void basketItemAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketItemAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketLiveShippingServiceCreateSignalErrorFull() instead")
    void basketLiveShippingServiceCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketLiveShippingServiceCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketLiveShippingServiceDeleteSignalErrorFull() instead")
    void basketLiveShippingServiceDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketLiveShippingServiceDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use basketLiveShippingServiceListSignalErrorFull() instead")
    void basketLiveShippingServiceListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void basketLiveShippingServiceListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
