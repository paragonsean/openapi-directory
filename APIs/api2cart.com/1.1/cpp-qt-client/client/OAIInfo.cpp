/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfo::OAIInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfo::OAIInfo() {
    this->initializeModel();
}

OAIInfo::~OAIInfo() {}

void OAIInfo::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_code_isSet = false;
    m_state_code_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_street_address_line_2_isSet = false;
    m_street_address_line_2_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAIInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfo::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_code_isValid = ::OpenAPI::fromJsonValue(m_state_code, json[QString("state_code")]);
    m_state_code_isSet = !json[QString("state_code")].isNull() && m_state_code_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("street_address")]);
    m_street_address_isSet = !json[QString("street_address")].isNull() && m_street_address_isValid;

    m_street_address_line_2_isValid = ::OpenAPI::fromJsonValue(m_street_address_line_2, json[QString("street_address_line_2")]);
    m_street_address_line_2_isSet = !json[QString("street_address_line_2")].isNull() && m_street_address_line_2_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("zip_code")]);
    m_zip_code_isSet = !json[QString("zip_code")].isNull() && m_zip_code_isValid;
}

QString OAIInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_code_isSet) {
        obj.insert(QString("state_code"), ::OpenAPI::toJsonValue(m_state_code));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("street_address"), ::OpenAPI::toJsonValue(m_street_address));
    }
    if (m_street_address_line_2_isSet) {
        obj.insert(QString("street_address_line_2"), ::OpenAPI::toJsonValue(m_street_address_line_2));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("zip_code"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

OAIObject OAIInfo::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIInfo::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIInfo::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIInfo::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QString OAIInfo::getCity() const {
    return m_city;
}
void OAIInfo::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIInfo::is_city_Set() const{
    return m_city_isSet;
}

bool OAIInfo::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIInfo::getCountry() const {
    return m_country;
}
void OAIInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAIInfo::is_country_Valid() const{
    return m_country_isValid;
}

OAIObject OAIInfo::getCustomFields() const {
    return m_custom_fields;
}
void OAIInfo::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIInfo::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIInfo::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIInfo::getEmail() const {
    return m_email;
}
void OAIInfo::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIInfo::is_email_Set() const{
    return m_email_isSet;
}

bool OAIInfo::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIInfo::getOwner() const {
    return m_owner;
}
void OAIInfo::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIInfo::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIInfo::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIInfo::getPhone() const {
    return m_phone;
}
void OAIInfo::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIInfo::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIInfo::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIInfo::getState() const {
    return m_state;
}
void OAIInfo::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInfo::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInfo::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInfo::getStateCode() const {
    return m_state_code;
}
void OAIInfo::setStateCode(const QString &state_code) {
    m_state_code = state_code;
    m_state_code_isSet = true;
}

bool OAIInfo::is_state_code_Set() const{
    return m_state_code_isSet;
}

bool OAIInfo::is_state_code_Valid() const{
    return m_state_code_isValid;
}

QString OAIInfo::getStreetAddress() const {
    return m_street_address;
}
void OAIInfo::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAIInfo::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIInfo::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAIInfo::getStreetAddressLine2() const {
    return m_street_address_line_2;
}
void OAIInfo::setStreetAddressLine2(const QString &street_address_line_2) {
    m_street_address_line_2 = street_address_line_2;
    m_street_address_line_2_isSet = true;
}

bool OAIInfo::is_street_address_line_2_Set() const{
    return m_street_address_line_2_isSet;
}

bool OAIInfo::is_street_address_line_2_Valid() const{
    return m_street_address_line_2_isValid;
}

QString OAIInfo::getZipCode() const {
    return m_zip_code;
}
void OAIInfo::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAIInfo::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAIInfo::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAIInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_line_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
