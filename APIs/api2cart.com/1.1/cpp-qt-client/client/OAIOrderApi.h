/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderApi_H
#define OAI_OAIOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountConfigUpdate_200_response.h"
#include "OAIModel_Response_Order_Abandoned_List.h"
#include "OAIModel_Response_Order_List.h"
#include "OAIModel_Response_Order_PreestimateShipping_List.h"
#include "OAIModel_Response_Order_Shipment_List.h"
#include "OAIModel_Response_Order_Transaction_List.h"
#include "OAIOrderAdd.h"
#include "OAIOrderAdd_200_response.h"
#include "OAIOrderCount_200_response.h"
#include "OAIOrderFinancialStatusList_200_response.h"
#include "OAIOrderFind_200_response.h"
#include "OAIOrderFulfillmentStatusList_200_response.h"
#include "OAIOrderInfo_200_response.h"
#include "OAIOrderPreestimateShippingList.h"
#include "OAIOrderRefundAdd.h"
#include "OAIOrderRefundAdd_200_response.h"
#include "OAIOrderShipmentAdd.h"
#include "OAIOrderShipmentAdd_200_response.h"
#include "OAIOrderShipmentDelete_200_response.h"
#include "OAIOrderShipmentTrackingAdd.h"
#include "OAIOrderShipmentTrackingAdd_200_response.h"
#include "OAIOrderShipmentUpdate.h"
#include "OAIOrderStatusList_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderApi : public QObject {
    Q_OBJECT

public:
    OAIOrderApi(const int timeOut = 0);
    ~OAIOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer_id QString [optional]
    * @param[in]  customer_email QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  skip_empty_email bool [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void orderAbandonedList(const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &skip_empty_email = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_order_add OAIOrderAdd [required]
    */
    virtual void orderAdd(const OAIOrderAdd &oai_order_add);

    /**
    * @param[in]  customer_id QString [optional]
    * @param[in]  customer_email QString [optional]
    * @param[in]  order_status QString [optional]
    * @param[in]  order_status_ids QList<QString> [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  order_ids QString [optional]
    * @param[in]  ebay_order_status QString [optional]
    * @param[in]  financial_status QString [optional]
    * @param[in]  fulfillment_status QString [optional]
    * @param[in]  shipping_method QString [optional]
    * @param[in]  delivery_method QString [optional]
    * @param[in]  ship_node_type QString [optional]
    */
    virtual void orderCount(const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_status_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_order_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &financial_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fulfillment_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shipping_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delivery_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ship_node_type = ::OpenAPI::OptionalParam<QString>());


    virtual void orderFinancialStatusList();

    /**
    * @param[in]  customer_id QString [optional]
    * @param[in]  customer_email QString [optional]
    * @param[in]  order_status QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  financial_status QString [optional]
    */
    Q_DECL_DEPRECATED virtual void orderFind(const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &financial_status = ::OpenAPI::OptionalParam<QString>());


    virtual void orderFulfillmentStatusList();

    /**
    * @param[in]  order_id QString [optional]
    * @param[in]  id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  enable_cache bool [optional]
    */
    virtual void orderInfo(const ::OpenAPI::OptionalParam<QString> &order_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_cache = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  customer_id QString [optional]
    * @param[in]  customer_email QString [optional]
    * @param[in]  phone QString [optional]
    * @param[in]  order_status QString [optional]
    * @param[in]  order_status_ids QList<QString> [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  order_ids QString [optional]
    * @param[in]  ebay_order_status QString [optional]
    * @param[in]  basket_id QString [optional]
    * @param[in]  financial_status QString [optional]
    * @param[in]  fulfillment_status QString [optional]
    * @param[in]  shipping_method QString [optional]
    * @param[in]  skip_order_ids QString [optional]
    * @param[in]  since_id qint32 [optional]
    * @param[in]  is_deleted bool [optional]
    * @param[in]  shipping_country_iso3 QString [optional]
    * @param[in]  enable_cache bool [optional]
    * @param[in]  delivery_method QString [optional]
    * @param[in]  ship_node_type QString [optional]
    * @param[in]  currency_id QString [optional]
    */
    virtual void orderList(const ::OpenAPI::OptionalParam<QString> &customer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_status_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_order_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &basket_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &financial_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fulfillment_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shipping_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_order_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &since_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &shipping_country_iso3 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_cache = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &delivery_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ship_node_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_order_preestimate_shipping_list OAIOrderPreestimateShippingList [required]
    */
    virtual void orderPreestimateShippingList(const OAIOrderPreestimateShippingList &oai_order_preestimate_shipping_list);

    /**
    * @param[in]  oai_order_refund_add OAIOrderRefundAdd [required]
    */
    virtual void orderRefundAdd(const OAIOrderRefundAdd &oai_order_refund_add);

    /**
    * @param[in]  oai_order_shipment_add OAIOrderShipmentAdd [required]
    */
    virtual void orderShipmentAdd(const OAIOrderShipmentAdd &oai_order_shipment_add);

    /**
    * @param[in]  shipment_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void orderShipmentDelete(const QString &shipment_id, const QString &order_id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void orderShipmentInfo(const QString &id, const QString &order_id, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void orderShipmentList(const QString &order_id, const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_order_shipment_tracking_add OAIOrderShipmentTrackingAdd [required]
    */
    virtual void orderShipmentTrackingAdd(const OAIOrderShipmentTrackingAdd &oai_order_shipment_tracking_add);

    /**
    * @param[in]  oai_order_shipment_update OAIOrderShipmentUpdate [required]
    */
    virtual void orderShipmentUpdate(const OAIOrderShipmentUpdate &oai_order_shipment_update);

    /**
    * @param[in]  store_id QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void orderStatusList(const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_ids QString [required]
    * @param[in]  count qint32 [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  page_cursor QString [optional]
    */
    virtual void orderTransactionList(const QString &order_ids, const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  order_id QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  order_status QString [optional]
    * @param[in]  comment QString [optional]
    * @param[in]  admin_comment QString [optional]
    * @param[in]  admin_private_comment QString [optional]
    * @param[in]  date_modified QString [optional]
    * @param[in]  date_finished QString [optional]
    * @param[in]  financial_status QString [optional]
    * @param[in]  fulfillment_status QString [optional]
    * @param[in]  order_payment_method QString [optional]
    * @param[in]  send_notifications bool [optional]
    */
    virtual void orderUpdate(const QString &order_id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &admin_comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &admin_private_comment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_modified = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_finished = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &financial_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fulfillment_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_payment_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notifications = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void orderAbandonedListCallback(OAIHttpRequestWorker *worker);
    void orderAddCallback(OAIHttpRequestWorker *worker);
    void orderCountCallback(OAIHttpRequestWorker *worker);
    void orderFinancialStatusListCallback(OAIHttpRequestWorker *worker);
    void orderFindCallback(OAIHttpRequestWorker *worker);
    void orderFulfillmentStatusListCallback(OAIHttpRequestWorker *worker);
    void orderInfoCallback(OAIHttpRequestWorker *worker);
    void orderListCallback(OAIHttpRequestWorker *worker);
    void orderPreestimateShippingListCallback(OAIHttpRequestWorker *worker);
    void orderRefundAddCallback(OAIHttpRequestWorker *worker);
    void orderShipmentAddCallback(OAIHttpRequestWorker *worker);
    void orderShipmentDeleteCallback(OAIHttpRequestWorker *worker);
    void orderShipmentInfoCallback(OAIHttpRequestWorker *worker);
    void orderShipmentListCallback(OAIHttpRequestWorker *worker);
    void orderShipmentTrackingAddCallback(OAIHttpRequestWorker *worker);
    void orderShipmentUpdateCallback(OAIHttpRequestWorker *worker);
    void orderStatusListCallback(OAIHttpRequestWorker *worker);
    void orderTransactionListCallback(OAIHttpRequestWorker *worker);
    void orderUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void orderAbandonedListSignal(OAIModel_Response_Order_Abandoned_List summary);
    void orderAddSignal(OAIOrderAdd_200_response summary);
    void orderCountSignal(OAIOrderCount_200_response summary);
    void orderFinancialStatusListSignal(OAIOrderFinancialStatusList_200_response summary);
    void orderFindSignal(OAIOrderFind_200_response summary);
    void orderFulfillmentStatusListSignal(OAIOrderFulfillmentStatusList_200_response summary);
    void orderInfoSignal(OAIOrderInfo_200_response summary);
    void orderListSignal(OAIModel_Response_Order_List summary);
    void orderPreestimateShippingListSignal(OAIModel_Response_Order_PreestimateShipping_List summary);
    void orderRefundAddSignal(OAIOrderRefundAdd_200_response summary);
    void orderShipmentAddSignal(OAIOrderShipmentAdd_200_response summary);
    void orderShipmentDeleteSignal(OAIOrderShipmentDelete_200_response summary);
    void orderShipmentInfoSignal(OAIModel_Response_Order_Shipment_List summary);
    void orderShipmentListSignal(OAIModel_Response_Order_Shipment_List summary);
    void orderShipmentTrackingAddSignal(OAIOrderShipmentTrackingAdd_200_response summary);
    void orderShipmentUpdateSignal(OAIAccountConfigUpdate_200_response summary);
    void orderStatusListSignal(OAIOrderStatusList_200_response summary);
    void orderTransactionListSignal(OAIModel_Response_Order_Transaction_List summary);
    void orderUpdateSignal(OAIAccountConfigUpdate_200_response summary);


    void orderAbandonedListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Order_Abandoned_List summary);
    void orderAddSignalFull(OAIHttpRequestWorker *worker, OAIOrderAdd_200_response summary);
    void orderCountSignalFull(OAIHttpRequestWorker *worker, OAIOrderCount_200_response summary);
    void orderFinancialStatusListSignalFull(OAIHttpRequestWorker *worker, OAIOrderFinancialStatusList_200_response summary);
    void orderFindSignalFull(OAIHttpRequestWorker *worker, OAIOrderFind_200_response summary);
    void orderFulfillmentStatusListSignalFull(OAIHttpRequestWorker *worker, OAIOrderFulfillmentStatusList_200_response summary);
    void orderInfoSignalFull(OAIHttpRequestWorker *worker, OAIOrderInfo_200_response summary);
    void orderListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Order_List summary);
    void orderPreestimateShippingListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Order_PreestimateShipping_List summary);
    void orderRefundAddSignalFull(OAIHttpRequestWorker *worker, OAIOrderRefundAdd_200_response summary);
    void orderShipmentAddSignalFull(OAIHttpRequestWorker *worker, OAIOrderShipmentAdd_200_response summary);
    void orderShipmentDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOrderShipmentDelete_200_response summary);
    void orderShipmentInfoSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Order_Shipment_List summary);
    void orderShipmentListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Order_Shipment_List summary);
    void orderShipmentTrackingAddSignalFull(OAIHttpRequestWorker *worker, OAIOrderShipmentTrackingAdd_200_response summary);
    void orderShipmentUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);
    void orderStatusListSignalFull(OAIHttpRequestWorker *worker, OAIOrderStatusList_200_response summary);
    void orderTransactionListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Order_Transaction_List summary);
    void orderUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);

    Q_DECL_DEPRECATED_X("Use orderAbandonedListSignalError() instead")
    void orderAbandonedListSignalE(OAIModel_Response_Order_Abandoned_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderAbandonedListSignalError(OAIModel_Response_Order_Abandoned_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderAddSignalError() instead")
    void orderAddSignalE(OAIOrderAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderAddSignalError(OAIOrderAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderCountSignalError() instead")
    void orderCountSignalE(OAIOrderCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCountSignalError(OAIOrderCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderFinancialStatusListSignalError() instead")
    void orderFinancialStatusListSignalE(OAIOrderFinancialStatusList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderFinancialStatusListSignalError(OAIOrderFinancialStatusList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderFindSignalError() instead")
    void orderFindSignalE(OAIOrderFind_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderFindSignalError(OAIOrderFind_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderFulfillmentStatusListSignalError() instead")
    void orderFulfillmentStatusListSignalE(OAIOrderFulfillmentStatusList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderFulfillmentStatusListSignalError(OAIOrderFulfillmentStatusList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderInfoSignalError() instead")
    void orderInfoSignalE(OAIOrderInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderInfoSignalError(OAIOrderInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderListSignalError() instead")
    void orderListSignalE(OAIModel_Response_Order_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderListSignalError(OAIModel_Response_Order_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderPreestimateShippingListSignalError() instead")
    void orderPreestimateShippingListSignalE(OAIModel_Response_Order_PreestimateShipping_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderPreestimateShippingListSignalError(OAIModel_Response_Order_PreestimateShipping_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderRefundAddSignalError() instead")
    void orderRefundAddSignalE(OAIOrderRefundAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderRefundAddSignalError(OAIOrderRefundAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentAddSignalError() instead")
    void orderShipmentAddSignalE(OAIOrderShipmentAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentAddSignalError(OAIOrderShipmentAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentDeleteSignalError() instead")
    void orderShipmentDeleteSignalE(OAIOrderShipmentDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentDeleteSignalError(OAIOrderShipmentDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentInfoSignalError() instead")
    void orderShipmentInfoSignalE(OAIModel_Response_Order_Shipment_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentInfoSignalError(OAIModel_Response_Order_Shipment_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentListSignalError() instead")
    void orderShipmentListSignalE(OAIModel_Response_Order_Shipment_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentListSignalError(OAIModel_Response_Order_Shipment_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentTrackingAddSignalError() instead")
    void orderShipmentTrackingAddSignalE(OAIOrderShipmentTrackingAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentTrackingAddSignalError(OAIOrderShipmentTrackingAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentUpdateSignalError() instead")
    void orderShipmentUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderStatusListSignalError() instead")
    void orderStatusListSignalE(OAIOrderStatusList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderStatusListSignalError(OAIOrderStatusList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderTransactionListSignalError() instead")
    void orderTransactionListSignalE(OAIModel_Response_Order_Transaction_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderTransactionListSignalError(OAIModel_Response_Order_Transaction_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderUpdateSignalError() instead")
    void orderUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orderUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use orderAbandonedListSignalErrorFull() instead")
    void orderAbandonedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderAbandonedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderAddSignalErrorFull() instead")
    void orderAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderCountSignalErrorFull() instead")
    void orderCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderFinancialStatusListSignalErrorFull() instead")
    void orderFinancialStatusListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderFinancialStatusListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderFindSignalErrorFull() instead")
    void orderFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderFulfillmentStatusListSignalErrorFull() instead")
    void orderFulfillmentStatusListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderFulfillmentStatusListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderInfoSignalErrorFull() instead")
    void orderInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderListSignalErrorFull() instead")
    void orderListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderPreestimateShippingListSignalErrorFull() instead")
    void orderPreestimateShippingListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderPreestimateShippingListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderRefundAddSignalErrorFull() instead")
    void orderRefundAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderRefundAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentAddSignalErrorFull() instead")
    void orderShipmentAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentDeleteSignalErrorFull() instead")
    void orderShipmentDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentInfoSignalErrorFull() instead")
    void orderShipmentInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentListSignalErrorFull() instead")
    void orderShipmentListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentTrackingAddSignalErrorFull() instead")
    void orderShipmentTrackingAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentTrackingAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderShipmentUpdateSignalErrorFull() instead")
    void orderShipmentUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderShipmentUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderStatusListSignalErrorFull() instead")
    void orderStatusListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderStatusListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderTransactionListSignalErrorFull() instead")
    void orderTransactionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderTransactionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orderUpdateSignalErrorFull() instead")
    void orderUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orderUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
