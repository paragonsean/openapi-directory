/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_advanced_price_isSet = false;
    m_advanced_price_isValid = false;

    m_avail_sale_isSet = false;
    m_avail_sale_isValid = false;

    m_avail_view_isSet = false;
    m_avail_view_isValid = false;

    m_backorders_isSet = false;
    m_backorders_isValid = false;

    m_categories_ids_isSet = false;
    m_categories_ids_isValid = false;

    m_cost_price_isSet = false;
    m_cost_price_isValid = false;

    m_create_at_isSet = false;
    m_create_at_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dimensions_unit_isSet = false;
    m_dimensions_unit_isValid = false;

    m_discounts_isSet = false;
    m_discounts_isValid = false;

    m_group_items_isSet = false;
    m_group_items_isValid = false;

    m_group_price_isSet = false;
    m_group_price_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_in_stock_isSet = false;
    m_in_stock_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_is_downloadable_isSet = false;
    m_is_downloadable_isValid = false;

    m_is_stock_managed_isSet = false;
    m_is_stock_managed_isValid = false;

    m_is_virtual_isSet = false;
    m_is_virtual_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_manage_stock_isSet = false;
    m_manage_stock_isValid = false;

    m_meta_description_isSet = false;
    m_meta_description_isValid = false;

    m_meta_keywords_isSet = false;
    m_meta_keywords_isValid = false;

    m_meta_title_isSet = false;
    m_meta_title_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_product_options_isSet = false;
    m_product_options_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_related_products_ids_isSet = false;
    m_related_products_ids_isValid = false;

    m_seo_url_isSet = false;
    m_seo_url_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_special_price_isSet = false;
    m_special_price_isValid = false;

    m_stores_ids_isSet = false;
    m_stores_ids_isValid = false;

    m_tax_class_id_isSet = false;
    m_tax_class_id_isValid = false;

    m_tier_price_isSet = false;
    m_tier_price_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_u_brand_isSet = false;
    m_u_brand_isValid = false;

    m_u_brand_id_isSet = false;
    m_u_brand_id_isValid = false;

    m_u_model_isSet = false;
    m_u_model_isValid = false;

    m_u_mpn_isSet = false;
    m_u_mpn_isValid = false;

    m_u_sku_isSet = false;
    m_u_sku_isValid = false;

    m_u_upc_isSet = false;
    m_u_upc_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_weight_unit_isSet = false;
    m_weight_unit_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_advanced_price_isValid = ::OpenAPI::fromJsonValue(m_advanced_price, json[QString("advanced_price")]);
    m_advanced_price_isSet = !json[QString("advanced_price")].isNull() && m_advanced_price_isValid;

    m_avail_sale_isValid = ::OpenAPI::fromJsonValue(m_avail_sale, json[QString("avail_sale")]);
    m_avail_sale_isSet = !json[QString("avail_sale")].isNull() && m_avail_sale_isValid;

    m_avail_view_isValid = ::OpenAPI::fromJsonValue(m_avail_view, json[QString("avail_view")]);
    m_avail_view_isSet = !json[QString("avail_view")].isNull() && m_avail_view_isValid;

    m_backorders_isValid = ::OpenAPI::fromJsonValue(m_backorders, json[QString("backorders")]);
    m_backorders_isSet = !json[QString("backorders")].isNull() && m_backorders_isValid;

    m_categories_ids_isValid = ::OpenAPI::fromJsonValue(m_categories_ids, json[QString("categories_ids")]);
    m_categories_ids_isSet = !json[QString("categories_ids")].isNull() && m_categories_ids_isValid;

    m_cost_price_isValid = ::OpenAPI::fromJsonValue(m_cost_price, json[QString("cost_price")]);
    m_cost_price_isSet = !json[QString("cost_price")].isNull() && m_cost_price_isValid;

    m_create_at_isValid = ::OpenAPI::fromJsonValue(m_create_at, json[QString("create_at")]);
    m_create_at_isSet = !json[QString("create_at")].isNull() && m_create_at_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_dimensions_unit_isValid = ::OpenAPI::fromJsonValue(m_dimensions_unit, json[QString("dimensions_unit")]);
    m_dimensions_unit_isSet = !json[QString("dimensions_unit")].isNull() && m_dimensions_unit_isValid;

    m_discounts_isValid = ::OpenAPI::fromJsonValue(m_discounts, json[QString("discounts")]);
    m_discounts_isSet = !json[QString("discounts")].isNull() && m_discounts_isValid;

    m_group_items_isValid = ::OpenAPI::fromJsonValue(m_group_items, json[QString("group_items")]);
    m_group_items_isSet = !json[QString("group_items")].isNull() && m_group_items_isValid;

    m_group_price_isValid = ::OpenAPI::fromJsonValue(m_group_price, json[QString("group_price")]);
    m_group_price_isSet = !json[QString("group_price")].isNull() && m_group_price_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_in_stock_isValid = ::OpenAPI::fromJsonValue(m_in_stock, json[QString("in_stock")]);
    m_in_stock_isSet = !json[QString("in_stock")].isNull() && m_in_stock_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_is_downloadable_isValid = ::OpenAPI::fromJsonValue(m_is_downloadable, json[QString("is_downloadable")]);
    m_is_downloadable_isSet = !json[QString("is_downloadable")].isNull() && m_is_downloadable_isValid;

    m_is_stock_managed_isValid = ::OpenAPI::fromJsonValue(m_is_stock_managed, json[QString("is_stock_managed")]);
    m_is_stock_managed_isSet = !json[QString("is_stock_managed")].isNull() && m_is_stock_managed_isValid;

    m_is_virtual_isValid = ::OpenAPI::fromJsonValue(m_is_virtual, json[QString("is_virtual")]);
    m_is_virtual_isSet = !json[QString("is_virtual")].isNull() && m_is_virtual_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_manage_stock_isValid = ::OpenAPI::fromJsonValue(m_manage_stock, json[QString("manage_stock")]);
    m_manage_stock_isSet = !json[QString("manage_stock")].isNull() && m_manage_stock_isValid;

    m_meta_description_isValid = ::OpenAPI::fromJsonValue(m_meta_description, json[QString("meta_description")]);
    m_meta_description_isSet = !json[QString("meta_description")].isNull() && m_meta_description_isValid;

    m_meta_keywords_isValid = ::OpenAPI::fromJsonValue(m_meta_keywords, json[QString("meta_keywords")]);
    m_meta_keywords_isSet = !json[QString("meta_keywords")].isNull() && m_meta_keywords_isValid;

    m_meta_title_isValid = ::OpenAPI::fromJsonValue(m_meta_title, json[QString("meta_title")]);
    m_meta_title_isSet = !json[QString("meta_title")].isNull() && m_meta_title_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modified_at")]);
    m_modified_at_isSet = !json[QString("modified_at")].isNull() && m_modified_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_product_options_isValid = ::OpenAPI::fromJsonValue(m_product_options, json[QString("product_options")]);
    m_product_options_isSet = !json[QString("product_options")].isNull() && m_product_options_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_related_products_ids_isValid = ::OpenAPI::fromJsonValue(m_related_products_ids, json[QString("related_products_ids")]);
    m_related_products_ids_isSet = !json[QString("related_products_ids")].isNull() && m_related_products_ids_isValid;

    m_seo_url_isValid = ::OpenAPI::fromJsonValue(m_seo_url, json[QString("seo_url")]);
    m_seo_url_isSet = !json[QString("seo_url")].isNull() && m_seo_url_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("short_description")]);
    m_short_description_isSet = !json[QString("short_description")].isNull() && m_short_description_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sort_order")]);
    m_sort_order_isSet = !json[QString("sort_order")].isNull() && m_sort_order_isValid;

    m_special_price_isValid = ::OpenAPI::fromJsonValue(m_special_price, json[QString("special_price")]);
    m_special_price_isSet = !json[QString("special_price")].isNull() && m_special_price_isValid;

    m_stores_ids_isValid = ::OpenAPI::fromJsonValue(m_stores_ids, json[QString("stores_ids")]);
    m_stores_ids_isSet = !json[QString("stores_ids")].isNull() && m_stores_ids_isValid;

    m_tax_class_id_isValid = ::OpenAPI::fromJsonValue(m_tax_class_id, json[QString("tax_class_id")]);
    m_tax_class_id_isSet = !json[QString("tax_class_id")].isNull() && m_tax_class_id_isValid;

    m_tier_price_isValid = ::OpenAPI::fromJsonValue(m_tier_price, json[QString("tier_price")]);
    m_tier_price_isSet = !json[QString("tier_price")].isNull() && m_tier_price_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_u_brand_isValid = ::OpenAPI::fromJsonValue(m_u_brand, json[QString("u_brand")]);
    m_u_brand_isSet = !json[QString("u_brand")].isNull() && m_u_brand_isValid;

    m_u_brand_id_isValid = ::OpenAPI::fromJsonValue(m_u_brand_id, json[QString("u_brand_id")]);
    m_u_brand_id_isSet = !json[QString("u_brand_id")].isNull() && m_u_brand_id_isValid;

    m_u_model_isValid = ::OpenAPI::fromJsonValue(m_u_model, json[QString("u_model")]);
    m_u_model_isSet = !json[QString("u_model")].isNull() && m_u_model_isValid;

    m_u_mpn_isValid = ::OpenAPI::fromJsonValue(m_u_mpn, json[QString("u_mpn")]);
    m_u_mpn_isSet = !json[QString("u_mpn")].isNull() && m_u_mpn_isValid;

    m_u_sku_isValid = ::OpenAPI::fromJsonValue(m_u_sku, json[QString("u_sku")]);
    m_u_sku_isSet = !json[QString("u_sku")].isNull() && m_u_sku_isValid;

    m_u_upc_isValid = ::OpenAPI::fromJsonValue(m_u_upc, json[QString("u_upc")]);
    m_u_upc_isSet = !json[QString("u_upc")].isNull() && m_u_upc_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_weight_unit_isValid = ::OpenAPI::fromJsonValue(m_weight_unit, json[QString("weight_unit")]);
    m_weight_unit_isSet = !json[QString("weight_unit")].isNull() && m_weight_unit_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_advanced_price.size() > 0) {
        obj.insert(QString("advanced_price"), ::OpenAPI::toJsonValue(m_advanced_price));
    }
    if (m_avail_sale_isSet) {
        obj.insert(QString("avail_sale"), ::OpenAPI::toJsonValue(m_avail_sale));
    }
    if (m_avail_view_isSet) {
        obj.insert(QString("avail_view"), ::OpenAPI::toJsonValue(m_avail_view));
    }
    if (m_backorders_isSet) {
        obj.insert(QString("backorders"), ::OpenAPI::toJsonValue(m_backorders));
    }
    if (m_categories_ids.size() > 0) {
        obj.insert(QString("categories_ids"), ::OpenAPI::toJsonValue(m_categories_ids));
    }
    if (m_cost_price_isSet) {
        obj.insert(QString("cost_price"), ::OpenAPI::toJsonValue(m_cost_price));
    }
    if (m_create_at.isSet()) {
        obj.insert(QString("create_at"), ::OpenAPI::toJsonValue(m_create_at));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dimensions_unit_isSet) {
        obj.insert(QString("dimensions_unit"), ::OpenAPI::toJsonValue(m_dimensions_unit));
    }
    if (m_discounts.size() > 0) {
        obj.insert(QString("discounts"), ::OpenAPI::toJsonValue(m_discounts));
    }
    if (m_group_items.size() > 0) {
        obj.insert(QString("group_items"), ::OpenAPI::toJsonValue(m_group_items));
    }
    if (m_group_price.size() > 0) {
        obj.insert(QString("group_price"), ::OpenAPI::toJsonValue(m_group_price));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_in_stock_isSet) {
        obj.insert(QString("in_stock"), ::OpenAPI::toJsonValue(m_in_stock));
    }
    if (m_inventory.size() > 0) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_is_downloadable_isSet) {
        obj.insert(QString("is_downloadable"), ::OpenAPI::toJsonValue(m_is_downloadable));
    }
    if (m_is_stock_managed_isSet) {
        obj.insert(QString("is_stock_managed"), ::OpenAPI::toJsonValue(m_is_stock_managed));
    }
    if (m_is_virtual_isSet) {
        obj.insert(QString("is_virtual"), ::OpenAPI::toJsonValue(m_is_virtual));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_manage_stock_isSet) {
        obj.insert(QString("manage_stock"), ::OpenAPI::toJsonValue(m_manage_stock));
    }
    if (m_meta_description_isSet) {
        obj.insert(QString("meta_description"), ::OpenAPI::toJsonValue(m_meta_description));
    }
    if (m_meta_keywords_isSet) {
        obj.insert(QString("meta_keywords"), ::OpenAPI::toJsonValue(m_meta_keywords));
    }
    if (m_meta_title_isSet) {
        obj.insert(QString("meta_title"), ::OpenAPI::toJsonValue(m_meta_title));
    }
    if (m_modified_at.isSet()) {
        obj.insert(QString("modified_at"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_product_options.size() > 0) {
        obj.insert(QString("product_options"), ::OpenAPI::toJsonValue(m_product_options));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_related_products_ids.size() > 0) {
        obj.insert(QString("related_products_ids"), ::OpenAPI::toJsonValue(m_related_products_ids));
    }
    if (m_seo_url_isSet) {
        obj.insert(QString("seo_url"), ::OpenAPI::toJsonValue(m_seo_url));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("short_description"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sort_order"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_special_price.isSet()) {
        obj.insert(QString("special_price"), ::OpenAPI::toJsonValue(m_special_price));
    }
    if (m_stores_ids.size() > 0) {
        obj.insert(QString("stores_ids"), ::OpenAPI::toJsonValue(m_stores_ids));
    }
    if (m_tax_class_id_isSet) {
        obj.insert(QString("tax_class_id"), ::OpenAPI::toJsonValue(m_tax_class_id));
    }
    if (m_tier_price.size() > 0) {
        obj.insert(QString("tier_price"), ::OpenAPI::toJsonValue(m_tier_price));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_u_brand_isSet) {
        obj.insert(QString("u_brand"), ::OpenAPI::toJsonValue(m_u_brand));
    }
    if (m_u_brand_id_isSet) {
        obj.insert(QString("u_brand_id"), ::OpenAPI::toJsonValue(m_u_brand_id));
    }
    if (m_u_model_isSet) {
        obj.insert(QString("u_model"), ::OpenAPI::toJsonValue(m_u_model));
    }
    if (m_u_mpn_isSet) {
        obj.insert(QString("u_mpn"), ::OpenAPI::toJsonValue(m_u_mpn));
    }
    if (m_u_sku_isSet) {
        obj.insert(QString("u_sku"), ::OpenAPI::toJsonValue(m_u_sku));
    }
    if (m_u_upc_isSet) {
        obj.insert(QString("u_upc"), ::OpenAPI::toJsonValue(m_u_upc));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_weight_unit_isSet) {
        obj.insert(QString("weight_unit"), ::OpenAPI::toJsonValue(m_weight_unit));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

OAIObject OAIProduct::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIProduct::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIProduct::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIProduct::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QList<OAIProduct_AdvancedPrice> OAIProduct::getAdvancedPrice() const {
    return m_advanced_price;
}
void OAIProduct::setAdvancedPrice(const QList<OAIProduct_AdvancedPrice> &advanced_price) {
    m_advanced_price = advanced_price;
    m_advanced_price_isSet = true;
}

bool OAIProduct::is_advanced_price_Set() const{
    return m_advanced_price_isSet;
}

bool OAIProduct::is_advanced_price_Valid() const{
    return m_advanced_price_isValid;
}

bool OAIProduct::isAvailSale() const {
    return m_avail_sale;
}
void OAIProduct::setAvailSale(const bool &avail_sale) {
    m_avail_sale = avail_sale;
    m_avail_sale_isSet = true;
}

bool OAIProduct::is_avail_sale_Set() const{
    return m_avail_sale_isSet;
}

bool OAIProduct::is_avail_sale_Valid() const{
    return m_avail_sale_isValid;
}

bool OAIProduct::isAvailView() const {
    return m_avail_view;
}
void OAIProduct::setAvailView(const bool &avail_view) {
    m_avail_view = avail_view;
    m_avail_view_isSet = true;
}

bool OAIProduct::is_avail_view_Set() const{
    return m_avail_view_isSet;
}

bool OAIProduct::is_avail_view_Valid() const{
    return m_avail_view_isValid;
}

QString OAIProduct::getBackorders() const {
    return m_backorders;
}
void OAIProduct::setBackorders(const QString &backorders) {
    m_backorders = backorders;
    m_backorders_isSet = true;
}

bool OAIProduct::is_backorders_Set() const{
    return m_backorders_isSet;
}

bool OAIProduct::is_backorders_Valid() const{
    return m_backorders_isValid;
}

QList<QString> OAIProduct::getCategoriesIds() const {
    return m_categories_ids;
}
void OAIProduct::setCategoriesIds(const QList<QString> &categories_ids) {
    m_categories_ids = categories_ids;
    m_categories_ids_isSet = true;
}

bool OAIProduct::is_categories_ids_Set() const{
    return m_categories_ids_isSet;
}

bool OAIProduct::is_categories_ids_Valid() const{
    return m_categories_ids_isValid;
}

double OAIProduct::getCostPrice() const {
    return m_cost_price;
}
void OAIProduct::setCostPrice(const double &cost_price) {
    m_cost_price = cost_price;
    m_cost_price_isSet = true;
}

bool OAIProduct::is_cost_price_Set() const{
    return m_cost_price_isSet;
}

bool OAIProduct::is_cost_price_Valid() const{
    return m_cost_price_isValid;
}

OAIA2CDateTime OAIProduct::getCreateAt() const {
    return m_create_at;
}
void OAIProduct::setCreateAt(const OAIA2CDateTime &create_at) {
    m_create_at = create_at;
    m_create_at_isSet = true;
}

bool OAIProduct::is_create_at_Set() const{
    return m_create_at_isSet;
}

bool OAIProduct::is_create_at_Valid() const{
    return m_create_at_isValid;
}

OAIObject OAIProduct::getCustomFields() const {
    return m_custom_fields;
}
void OAIProduct::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIProduct::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIProduct::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProduct::getDimensionsUnit() const {
    return m_dimensions_unit;
}
void OAIProduct::setDimensionsUnit(const QString &dimensions_unit) {
    m_dimensions_unit = dimensions_unit;
    m_dimensions_unit_isSet = true;
}

bool OAIProduct::is_dimensions_unit_Set() const{
    return m_dimensions_unit_isSet;
}

bool OAIProduct::is_dimensions_unit_Valid() const{
    return m_dimensions_unit_isValid;
}

QList<OAIDiscount> OAIProduct::getDiscounts() const {
    return m_discounts;
}
void OAIProduct::setDiscounts(const QList<OAIDiscount> &discounts) {
    m_discounts = discounts;
    m_discounts_isSet = true;
}

bool OAIProduct::is_discounts_Set() const{
    return m_discounts_isSet;
}

bool OAIProduct::is_discounts_Valid() const{
    return m_discounts_isValid;
}

QList<OAIProduct_GroupItem> OAIProduct::getGroupItems() const {
    return m_group_items;
}
void OAIProduct::setGroupItems(const QList<OAIProduct_GroupItem> &group_items) {
    m_group_items = group_items;
    m_group_items_isSet = true;
}

bool OAIProduct::is_group_items_Set() const{
    return m_group_items_isSet;
}

bool OAIProduct::is_group_items_Valid() const{
    return m_group_items_isValid;
}

QList<OAIProduct_GroupPrice> OAIProduct::getGroupPrice() const {
    return m_group_price;
}
void OAIProduct::setGroupPrice(const QList<OAIProduct_GroupPrice> &group_price) {
    m_group_price = group_price;
    m_group_price_isSet = true;
}

bool OAIProduct::is_group_price_Set() const{
    return m_group_price_isSet;
}

bool OAIProduct::is_group_price_Valid() const{
    return m_group_price_isValid;
}

double OAIProduct::getHeight() const {
    return m_height;
}
void OAIProduct::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIProduct::is_height_Set() const{
    return m_height_isSet;
}

bool OAIProduct::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIProduct::getId() const {
    return m_id;
}
void OAIProduct::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProduct::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProduct::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIImage> OAIProduct::getImages() const {
    return m_images;
}
void OAIProduct::setImages(const QList<OAIImage> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIProduct::is_images_Set() const{
    return m_images_isSet;
}

bool OAIProduct::is_images_Valid() const{
    return m_images_isValid;
}

bool OAIProduct::isInStock() const {
    return m_in_stock;
}
void OAIProduct::setInStock(const bool &in_stock) {
    m_in_stock = in_stock;
    m_in_stock_isSet = true;
}

bool OAIProduct::is_in_stock_Set() const{
    return m_in_stock_isSet;
}

bool OAIProduct::is_in_stock_Valid() const{
    return m_in_stock_isValid;
}

QList<OAIProduct_Inventory> OAIProduct::getInventory() const {
    return m_inventory;
}
void OAIProduct::setInventory(const QList<OAIProduct_Inventory> &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAIProduct::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAIProduct::is_inventory_Valid() const{
    return m_inventory_isValid;
}

bool OAIProduct::isIsDownloadable() const {
    return m_is_downloadable;
}
void OAIProduct::setIsDownloadable(const bool &is_downloadable) {
    m_is_downloadable = is_downloadable;
    m_is_downloadable_isSet = true;
}

bool OAIProduct::is_is_downloadable_Set() const{
    return m_is_downloadable_isSet;
}

bool OAIProduct::is_is_downloadable_Valid() const{
    return m_is_downloadable_isValid;
}

bool OAIProduct::isIsStockManaged() const {
    return m_is_stock_managed;
}
void OAIProduct::setIsStockManaged(const bool &is_stock_managed) {
    m_is_stock_managed = is_stock_managed;
    m_is_stock_managed_isSet = true;
}

bool OAIProduct::is_is_stock_managed_Set() const{
    return m_is_stock_managed_isSet;
}

bool OAIProduct::is_is_stock_managed_Valid() const{
    return m_is_stock_managed_isValid;
}

bool OAIProduct::isIsVirtual() const {
    return m_is_virtual;
}
void OAIProduct::setIsVirtual(const bool &is_virtual) {
    m_is_virtual = is_virtual;
    m_is_virtual_isSet = true;
}

bool OAIProduct::is_is_virtual_Set() const{
    return m_is_virtual_isSet;
}

bool OAIProduct::is_is_virtual_Valid() const{
    return m_is_virtual_isValid;
}

double OAIProduct::getLength() const {
    return m_length;
}
void OAIProduct::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIProduct::is_length_Set() const{
    return m_length_isSet;
}

bool OAIProduct::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIProduct::getManageStock() const {
    return m_manage_stock;
}
void OAIProduct::setManageStock(const QString &manage_stock) {
    m_manage_stock = manage_stock;
    m_manage_stock_isSet = true;
}

bool OAIProduct::is_manage_stock_Set() const{
    return m_manage_stock_isSet;
}

bool OAIProduct::is_manage_stock_Valid() const{
    return m_manage_stock_isValid;
}

QString OAIProduct::getMetaDescription() const {
    return m_meta_description;
}
void OAIProduct::setMetaDescription(const QString &meta_description) {
    m_meta_description = meta_description;
    m_meta_description_isSet = true;
}

bool OAIProduct::is_meta_description_Set() const{
    return m_meta_description_isSet;
}

bool OAIProduct::is_meta_description_Valid() const{
    return m_meta_description_isValid;
}

QString OAIProduct::getMetaKeywords() const {
    return m_meta_keywords;
}
void OAIProduct::setMetaKeywords(const QString &meta_keywords) {
    m_meta_keywords = meta_keywords;
    m_meta_keywords_isSet = true;
}

bool OAIProduct::is_meta_keywords_Set() const{
    return m_meta_keywords_isSet;
}

bool OAIProduct::is_meta_keywords_Valid() const{
    return m_meta_keywords_isValid;
}

QString OAIProduct::getMetaTitle() const {
    return m_meta_title;
}
void OAIProduct::setMetaTitle(const QString &meta_title) {
    m_meta_title = meta_title;
    m_meta_title_isSet = true;
}

bool OAIProduct::is_meta_title_Set() const{
    return m_meta_title_isSet;
}

bool OAIProduct::is_meta_title_Valid() const{
    return m_meta_title_isValid;
}

OAIA2CDateTime OAIProduct::getModifiedAt() const {
    return m_modified_at;
}
void OAIProduct::setModifiedAt(const OAIA2CDateTime &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAIProduct::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAIProduct::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

double OAIProduct::getPrice() const {
    return m_price;
}
void OAIProduct::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIProduct::is_price_Set() const{
    return m_price_isSet;
}

bool OAIProduct::is_price_Valid() const{
    return m_price_isValid;
}

QList<OAIProduct_Option> OAIProduct::getProductOptions() const {
    return m_product_options;
}
void OAIProduct::setProductOptions(const QList<OAIProduct_Option> &product_options) {
    m_product_options = product_options;
    m_product_options_isSet = true;
}

bool OAIProduct::is_product_options_Set() const{
    return m_product_options_isSet;
}

bool OAIProduct::is_product_options_Valid() const{
    return m_product_options_isValid;
}

double OAIProduct::getQuantity() const {
    return m_quantity;
}
void OAIProduct::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIProduct::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIProduct::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QList<QString> OAIProduct::getRelatedProductsIds() const {
    return m_related_products_ids;
}
void OAIProduct::setRelatedProductsIds(const QList<QString> &related_products_ids) {
    m_related_products_ids = related_products_ids;
    m_related_products_ids_isSet = true;
}

bool OAIProduct::is_related_products_ids_Set() const{
    return m_related_products_ids_isSet;
}

bool OAIProduct::is_related_products_ids_Valid() const{
    return m_related_products_ids_isValid;
}

QString OAIProduct::getSeoUrl() const {
    return m_seo_url;
}
void OAIProduct::setSeoUrl(const QString &seo_url) {
    m_seo_url = seo_url;
    m_seo_url_isSet = true;
}

bool OAIProduct::is_seo_url_Set() const{
    return m_seo_url_isSet;
}

bool OAIProduct::is_seo_url_Valid() const{
    return m_seo_url_isValid;
}

QString OAIProduct::getShortDescription() const {
    return m_short_description;
}
void OAIProduct::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIProduct::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIProduct::is_short_description_Valid() const{
    return m_short_description_isValid;
}

qint32 OAIProduct::getSortOrder() const {
    return m_sort_order;
}
void OAIProduct::setSortOrder(const qint32 &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIProduct::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIProduct::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAISpecialPrice OAIProduct::getSpecialPrice() const {
    return m_special_price;
}
void OAIProduct::setSpecialPrice(const OAISpecialPrice &special_price) {
    m_special_price = special_price;
    m_special_price_isSet = true;
}

bool OAIProduct::is_special_price_Set() const{
    return m_special_price_isSet;
}

bool OAIProduct::is_special_price_Valid() const{
    return m_special_price_isValid;
}

QList<QString> OAIProduct::getStoresIds() const {
    return m_stores_ids;
}
void OAIProduct::setStoresIds(const QList<QString> &stores_ids) {
    m_stores_ids = stores_ids;
    m_stores_ids_isSet = true;
}

bool OAIProduct::is_stores_ids_Set() const{
    return m_stores_ids_isSet;
}

bool OAIProduct::is_stores_ids_Valid() const{
    return m_stores_ids_isValid;
}

QString OAIProduct::getTaxClassId() const {
    return m_tax_class_id;
}
void OAIProduct::setTaxClassId(const QString &tax_class_id) {
    m_tax_class_id = tax_class_id;
    m_tax_class_id_isSet = true;
}

bool OAIProduct::is_tax_class_id_Set() const{
    return m_tax_class_id_isSet;
}

bool OAIProduct::is_tax_class_id_Valid() const{
    return m_tax_class_id_isValid;
}

QList<OAIProduct_TierPrice> OAIProduct::getTierPrice() const {
    return m_tier_price;
}
void OAIProduct::setTierPrice(const QList<OAIProduct_TierPrice> &tier_price) {
    m_tier_price = tier_price;
    m_tier_price_isSet = true;
}

bool OAIProduct::is_tier_price_Set() const{
    return m_tier_price_isSet;
}

bool OAIProduct::is_tier_price_Valid() const{
    return m_tier_price_isValid;
}

QString OAIProduct::getType() const {
    return m_type;
}
void OAIProduct::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProduct::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProduct::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIProduct::getUBrand() const {
    return m_u_brand;
}
void OAIProduct::setUBrand(const QString &u_brand) {
    m_u_brand = u_brand;
    m_u_brand_isSet = true;
}

bool OAIProduct::is_u_brand_Set() const{
    return m_u_brand_isSet;
}

bool OAIProduct::is_u_brand_Valid() const{
    return m_u_brand_isValid;
}

QString OAIProduct::getUBrandId() const {
    return m_u_brand_id;
}
void OAIProduct::setUBrandId(const QString &u_brand_id) {
    m_u_brand_id = u_brand_id;
    m_u_brand_id_isSet = true;
}

bool OAIProduct::is_u_brand_id_Set() const{
    return m_u_brand_id_isSet;
}

bool OAIProduct::is_u_brand_id_Valid() const{
    return m_u_brand_id_isValid;
}

QString OAIProduct::getUModel() const {
    return m_u_model;
}
void OAIProduct::setUModel(const QString &u_model) {
    m_u_model = u_model;
    m_u_model_isSet = true;
}

bool OAIProduct::is_u_model_Set() const{
    return m_u_model_isSet;
}

bool OAIProduct::is_u_model_Valid() const{
    return m_u_model_isValid;
}

QString OAIProduct::getUMpn() const {
    return m_u_mpn;
}
void OAIProduct::setUMpn(const QString &u_mpn) {
    m_u_mpn = u_mpn;
    m_u_mpn_isSet = true;
}

bool OAIProduct::is_u_mpn_Set() const{
    return m_u_mpn_isSet;
}

bool OAIProduct::is_u_mpn_Valid() const{
    return m_u_mpn_isValid;
}

QString OAIProduct::getUSku() const {
    return m_u_sku;
}
void OAIProduct::setUSku(const QString &u_sku) {
    m_u_sku = u_sku;
    m_u_sku_isSet = true;
}

bool OAIProduct::is_u_sku_Set() const{
    return m_u_sku_isSet;
}

bool OAIProduct::is_u_sku_Valid() const{
    return m_u_sku_isValid;
}

QString OAIProduct::getUUpc() const {
    return m_u_upc;
}
void OAIProduct::setUUpc(const QString &u_upc) {
    m_u_upc = u_upc;
    m_u_upc_isSet = true;
}

bool OAIProduct::is_u_upc_Set() const{
    return m_u_upc_isSet;
}

bool OAIProduct::is_u_upc_Valid() const{
    return m_u_upc_isValid;
}

QString OAIProduct::getUrl() const {
    return m_url;
}
void OAIProduct::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProduct::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProduct::is_url_Valid() const{
    return m_url_isValid;
}

double OAIProduct::getWeight() const {
    return m_weight;
}
void OAIProduct::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIProduct::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIProduct::is_weight_Valid() const{
    return m_weight_isValid;
}

QString OAIProduct::getWeightUnit() const {
    return m_weight_unit;
}
void OAIProduct::setWeightUnit(const QString &weight_unit) {
    m_weight_unit = weight_unit;
    m_weight_unit_isSet = true;
}

bool OAIProduct::is_weight_unit_Set() const{
    return m_weight_unit_isSet;
}

bool OAIProduct::is_weight_unit_Valid() const{
    return m_weight_unit_isValid;
}

double OAIProduct::getWidth() const {
    return m_width;
}
void OAIProduct::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIProduct::is_width_Set() const{
    return m_width_isSet;
}

bool OAIProduct::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_price.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_sale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backorders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_price.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_downloadable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_stock_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_virtual_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manage_stock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_products_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_seo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_price.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_mpn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u_upc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
