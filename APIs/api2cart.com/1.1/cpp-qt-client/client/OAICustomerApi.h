/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomerApi_H
#define OAI_OAICustomerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomerAdd.h"
#include "OAICustomerAdd_200_response.h"
#include "OAICustomerCount_200_response.h"
#include "OAICustomerFind_200_response.h"
#include "OAICustomerGroupAdd_200_response.h"
#include "OAICustomerInfo_200_response.h"
#include "OAICustomerUpdate.h"
#include "OAICustomerUpdate_200_response.h"
#include "OAICustomerWishlistList_200_response.h"
#include "OAIModel_Response_Customer_Attribute_List.h"
#include "OAIModel_Response_Customer_Group_List.h"
#include "OAIModel_Response_Customer_List.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomerApi : public QObject {
    Q_OBJECT

public:
    OAICustomerApi(const int timeOut = 0);
    ~OAICustomerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_customer_add OAICustomerAdd [required]
    */
    virtual void customerAdd(const OAICustomerAdd &oai_customer_add);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  count qint32 [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void customerAttributeList(const QString &customer_id, const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  customer_list_id QString [optional]
    * @param[in]  avail bool [optional]
    */
    virtual void customerCount(const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_list_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  find_value QString [required]
    * @param[in]  find_where QString [optional]
    * @param[in]  find_params QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void customerFind(const QString &find_value, const ::OpenAPI::OptionalParam<QString> &find_where = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &find_params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  stores_ids QString [optional]
    */
    virtual void customerGroupAdd(const QString &name, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stores_ids = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  group_ids QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void customerGroupList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void customerInfo(const QString &id, const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  group_id QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  customer_list_id QString [optional]
    * @param[in]  avail bool [optional]
    */
    virtual void customerList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer_list_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_customer_update OAICustomerUpdate [required]
    */
    virtual void customerUpdate(const OAICustomerUpdate &oai_customer_update);

    /**
    * @param[in]  customer_id QString [required]
    * @param[in]  id QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void customerWishlistList(const QString &customer_id, const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customerAddCallback(OAIHttpRequestWorker *worker);
    void customerAttributeListCallback(OAIHttpRequestWorker *worker);
    void customerCountCallback(OAIHttpRequestWorker *worker);
    void customerFindCallback(OAIHttpRequestWorker *worker);
    void customerGroupAddCallback(OAIHttpRequestWorker *worker);
    void customerGroupListCallback(OAIHttpRequestWorker *worker);
    void customerInfoCallback(OAIHttpRequestWorker *worker);
    void customerListCallback(OAIHttpRequestWorker *worker);
    void customerUpdateCallback(OAIHttpRequestWorker *worker);
    void customerWishlistListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customerAddSignal(OAICustomerAdd_200_response summary);
    void customerAttributeListSignal(OAIModel_Response_Customer_Attribute_List summary);
    void customerCountSignal(OAICustomerCount_200_response summary);
    void customerFindSignal(OAICustomerFind_200_response summary);
    void customerGroupAddSignal(OAICustomerGroupAdd_200_response summary);
    void customerGroupListSignal(OAIModel_Response_Customer_Group_List summary);
    void customerInfoSignal(OAICustomerInfo_200_response summary);
    void customerListSignal(OAIModel_Response_Customer_List summary);
    void customerUpdateSignal(OAICustomerUpdate_200_response summary);
    void customerWishlistListSignal(OAICustomerWishlistList_200_response summary);


    void customerAddSignalFull(OAIHttpRequestWorker *worker, OAICustomerAdd_200_response summary);
    void customerAttributeListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Customer_Attribute_List summary);
    void customerCountSignalFull(OAIHttpRequestWorker *worker, OAICustomerCount_200_response summary);
    void customerFindSignalFull(OAIHttpRequestWorker *worker, OAICustomerFind_200_response summary);
    void customerGroupAddSignalFull(OAIHttpRequestWorker *worker, OAICustomerGroupAdd_200_response summary);
    void customerGroupListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Customer_Group_List summary);
    void customerInfoSignalFull(OAIHttpRequestWorker *worker, OAICustomerInfo_200_response summary);
    void customerListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Customer_List summary);
    void customerUpdateSignalFull(OAIHttpRequestWorker *worker, OAICustomerUpdate_200_response summary);
    void customerWishlistListSignalFull(OAIHttpRequestWorker *worker, OAICustomerWishlistList_200_response summary);

    Q_DECL_DEPRECATED_X("Use customerAddSignalError() instead")
    void customerAddSignalE(OAICustomerAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddSignalError(OAICustomerAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAttributeListSignalError() instead")
    void customerAttributeListSignalE(OAIModel_Response_Customer_Attribute_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAttributeListSignalError(OAIModel_Response_Customer_Attribute_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountSignalError() instead")
    void customerCountSignalE(OAICustomerCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountSignalError(OAICustomerCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerFindSignalError() instead")
    void customerFindSignalE(OAICustomerFind_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerFindSignalError(OAICustomerFind_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGroupAddSignalError() instead")
    void customerGroupAddSignalE(OAICustomerGroupAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGroupAddSignalError(OAICustomerGroupAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGroupListSignalError() instead")
    void customerGroupListSignalE(OAIModel_Response_Customer_Group_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGroupListSignalError(OAIModel_Response_Customer_Group_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerInfoSignalError() instead")
    void customerInfoSignalE(OAICustomerInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerInfoSignalError(OAICustomerInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerListSignalError() instead")
    void customerListSignalE(OAIModel_Response_Customer_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerListSignalError(OAIModel_Response_Customer_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerUpdateSignalError() instead")
    void customerUpdateSignalE(OAICustomerUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerUpdateSignalError(OAICustomerUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerWishlistListSignalError() instead")
    void customerWishlistListSignalE(OAICustomerWishlistList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customerWishlistListSignalError(OAICustomerWishlistList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customerAddSignalErrorFull() instead")
    void customerAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerAttributeListSignalErrorFull() instead")
    void customerAttributeListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerAttributeListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerCountSignalErrorFull() instead")
    void customerCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerFindSignalErrorFull() instead")
    void customerFindSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerFindSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGroupAddSignalErrorFull() instead")
    void customerGroupAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGroupAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerGroupListSignalErrorFull() instead")
    void customerGroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerGroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerInfoSignalErrorFull() instead")
    void customerInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerListSignalErrorFull() instead")
    void customerListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerUpdateSignalErrorFull() instead")
    void customerUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customerWishlistListSignalErrorFull() instead")
    void customerWishlistListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customerWishlistListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
