/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountCartAdd.h"
#include "OAIAccountCartAdd_200_response.h"
#include "OAIAccountCartList_200_response.h"
#include "OAIAccountConfigUpdate_200_response.h"
#include "OAIAccountFailedWebhooks_200_response.h"
#include "OAIAccountSupportedPlatforms_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_account_cart_add OAIAccountCartAdd [required]
    */
    virtual void accountCartAdd(const OAIAccountCartAdd &oai_account_cart_add);

    /**
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  request_from_date QString [optional]
    * @param[in]  request_to_date QString [optional]
    * @param[in]  store_url QString [optional]
    * @param[in]  store_key QString [optional]
    */
    virtual void accountCartList(const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_from_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &request_to_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  new_store_key QString [optional]
    * @param[in]  bridge_url QString [optional]
    * @param[in]  store_root QString [optional]
    * @param[in]  db_tables_prefix QString [optional]
    * @param[in]  r_3dcart_private_key QString [optional]
    * @param[in]  r_3dcart_access_token QString [optional]
    * @param[in]  r_3dcartapi_api_key QString [optional]
    * @param[in]  amazon_sp_client_id QString [optional]
    * @param[in]  amazon_sp_client_secret QString [optional]
    * @param[in]  amazon_sp_aws_user_key_id QString [optional]
    * @param[in]  amazon_sp_aws_user_secret QString [optional]
    * @param[in]  amazon_sp_aws_region QString [optional]
    * @param[in]  amazon_sp_aws_role_arn QString [optional]
    * @param[in]  amazon_sp_refresh_token QString [optional]
    * @param[in]  amazon_sp_api_environment QString [optional]
    * @param[in]  amazon_access_token QString [optional]
    * @param[in]  amazon_seller_id QString [optional]
    * @param[in]  amazon_marketplaces_ids QString [optional]
    * @param[in]  amazon_secret_key QString [optional]
    * @param[in]  amazon_access_key_id QString [optional]
    * @param[in]  aspdotnetstorefront_api_user QString [optional]
    * @param[in]  aspdotnetstorefront_api_pass QString [optional]
    * @param[in]  bigcommerceapi_admin_account QString [optional]
    * @param[in]  bigcommerceapi_api_path QString [optional]
    * @param[in]  bigcommerceapi_api_key QString [optional]
    * @param[in]  bigcommerceapi_client_id QString [optional]
    * @param[in]  bigcommerceapi_access_token QString [optional]
    * @param[in]  bigcommerceapi_context QString [optional]
    * @param[in]  demandware_client_id QString [optional]
    * @param[in]  demandware_api_password QString [optional]
    * @param[in]  demandware_user_name QString [optional]
    * @param[in]  demandware_user_password QString [optional]
    * @param[in]  ebay_client_id QString [optional]
    * @param[in]  ebay_client_secret QString [optional]
    * @param[in]  ebay_runame QString [optional]
    * @param[in]  ebay_access_token QString [optional]
    * @param[in]  ebay_refresh_token QString [optional]
    * @param[in]  ebay_environment QString [optional]
    * @param[in]  ebay_site_id qint32 [optional]
    * @param[in]  ecwid_acess_token QString [optional]
    * @param[in]  ecwid_store_id QString [optional]
    * @param[in]  etsy_keystring QString [optional]
    * @param[in]  etsy_shared_secret QString [optional]
    * @param[in]  etsy_access_token QString [optional]
    * @param[in]  etsy_token_secret QString [optional]
    * @param[in]  etsy_client_id QString [optional]
    * @param[in]  etsy_refresh_token QString [optional]
    * @param[in]  neto_api_key QString [optional]
    * @param[in]  neto_api_username QString [optional]
    * @param[in]  shopify_api_key QString [optional]
    * @param[in]  shopify_api_password QString [optional]
    * @param[in]  shopify_shared_secret QString [optional]
    * @param[in]  shopify_access_token QString [optional]
    * @param[in]  shopware_access_key QString [optional]
    * @param[in]  shopware_api_key QString [optional]
    * @param[in]  shopware_api_secret QString [optional]
    * @param[in]  volusion_login QString [optional]
    * @param[in]  volusion_password QString [optional]
    * @param[in]  walmart_client_id QString [optional]
    * @param[in]  walmart_client_secret QString [optional]
    * @param[in]  walmart_environment QString [optional]
    * @param[in]  walmart_channel_type QString [optional]
    * @param[in]  squarespace_api_key QString [optional]
    * @param[in]  hybris_client_id QString [optional]
    * @param[in]  hybris_client_secret QString [optional]
    * @param[in]  hybris_username QString [optional]
    * @param[in]  hybris_password QString [optional]
    * @param[in]  hybris_websites QList<QString> [optional]
    * @param[in]  lightspeed_api_key QString [optional]
    * @param[in]  lightspeed_api_secret QString [optional]
    * @param[in]  commercehq_api_key QString [optional]
    * @param[in]  commercehq_api_password QString [optional]
    * @param[in]  wc_consumer_key QString [optional]
    * @param[in]  wc_consumer_secret QString [optional]
    * @param[in]  magento_consumer_key QString [optional]
    * @param[in]  magento_consumer_secret QString [optional]
    * @param[in]  magento_access_token QString [optional]
    * @param[in]  magento_token_secret QString [optional]
    * @param[in]  prestashop_webservice_key QString [optional]
    * @param[in]  wix_app_id QString [optional]
    * @param[in]  wix_app_secret_key QString [optional]
    * @param[in]  wix_refresh_token QString [optional]
    * @param[in]  mercado_libre_app_id QString [optional]
    * @param[in]  mercado_libre_app_secret_key QString [optional]
    * @param[in]  mercado_libre_refresh_token QString [optional]
    * @param[in]  zid_client_id qint32 [optional]
    * @param[in]  zid_client_secret QString [optional]
    * @param[in]  zid_access_token QString [optional]
    * @param[in]  zid_authorization QString [optional]
    * @param[in]  zid_refresh_token QString [optional]
    */
    virtual void accountConfigUpdate(const ::OpenAPI::OptionalParam<QString> &new_store_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bridge_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &db_tables_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_3dcart_private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_3dcart_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_3dcartapi_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_aws_user_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_aws_user_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_aws_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_aws_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_sp_api_environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_seller_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_marketplaces_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_access_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aspdotnetstorefront_api_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &aspdotnetstorefront_api_pass = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bigcommerceapi_admin_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bigcommerceapi_api_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bigcommerceapi_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bigcommerceapi_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bigcommerceapi_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bigcommerceapi_context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &demandware_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &demandware_api_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &demandware_user_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &demandware_user_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_runame = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ebay_site_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ecwid_acess_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ecwid_store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_keystring = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_shared_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &neto_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &neto_api_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopify_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopify_api_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopify_shared_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopify_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopware_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopware_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopware_api_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &volusion_login = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &volusion_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walmart_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walmart_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walmart_environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walmart_channel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &squarespace_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &hybris_websites = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &lightspeed_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lightspeed_api_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commercehq_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commercehq_api_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wc_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wc_consumer_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_consumer_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &prestashop_webservice_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wix_app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wix_app_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wix_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mercado_libre_app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mercado_libre_app_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mercado_libre_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &zid_client_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zid_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zid_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zid_authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zid_refresh_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  count qint32 [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  ids QString [optional]
    */
    virtual void accountFailedWebhooks(const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>());


    virtual void accountSupportedPlatforms();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountCartAddCallback(OAIHttpRequestWorker *worker);
    void accountCartListCallback(OAIHttpRequestWorker *worker);
    void accountConfigUpdateCallback(OAIHttpRequestWorker *worker);
    void accountFailedWebhooksCallback(OAIHttpRequestWorker *worker);
    void accountSupportedPlatformsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountCartAddSignal(OAIAccountCartAdd_200_response summary);
    void accountCartListSignal(OAIAccountCartList_200_response summary);
    void accountConfigUpdateSignal(OAIAccountConfigUpdate_200_response summary);
    void accountFailedWebhooksSignal(OAIAccountFailedWebhooks_200_response summary);
    void accountSupportedPlatformsSignal(OAIAccountSupportedPlatforms_200_response summary);


    void accountCartAddSignalFull(OAIHttpRequestWorker *worker, OAIAccountCartAdd_200_response summary);
    void accountCartListSignalFull(OAIHttpRequestWorker *worker, OAIAccountCartList_200_response summary);
    void accountConfigUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountConfigUpdate_200_response summary);
    void accountFailedWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIAccountFailedWebhooks_200_response summary);
    void accountSupportedPlatformsSignalFull(OAIHttpRequestWorker *worker, OAIAccountSupportedPlatforms_200_response summary);

    Q_DECL_DEPRECATED_X("Use accountCartAddSignalError() instead")
    void accountCartAddSignalE(OAIAccountCartAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCartAddSignalError(OAIAccountCartAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCartListSignalError() instead")
    void accountCartListSignalE(OAIAccountCartList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCartListSignalError(OAIAccountCartList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountConfigUpdateSignalError() instead")
    void accountConfigUpdateSignalE(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountConfigUpdateSignalError(OAIAccountConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFailedWebhooksSignalError() instead")
    void accountFailedWebhooksSignalE(OAIAccountFailedWebhooks_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFailedWebhooksSignalError(OAIAccountFailedWebhooks_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountSupportedPlatformsSignalError() instead")
    void accountSupportedPlatformsSignalE(OAIAccountSupportedPlatforms_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountSupportedPlatformsSignalError(OAIAccountSupportedPlatforms_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountCartAddSignalErrorFull() instead")
    void accountCartAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCartAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCartListSignalErrorFull() instead")
    void accountCartListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCartListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountConfigUpdateSignalErrorFull() instead")
    void accountConfigUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountConfigUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFailedWebhooksSignalErrorFull() instead")
    void accountFailedWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFailedWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountSupportedPlatformsSignalErrorFull() instead")
    void accountSupportedPlatformsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountSupportedPlatformsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
