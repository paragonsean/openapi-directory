/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoupon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoupon::OAICoupon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoupon::OAICoupon() {
    this->initializeModel();
}

OAICoupon::~OAICoupon() {}

void OAICoupon::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_avail_isSet = false;
    m_avail_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_codes_isSet = false;
    m_codes_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_date_end_isSet = false;
    m_date_end_isValid = false;

    m_date_start_isSet = false;
    m_date_start_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_logic_operator_isSet = false;
    m_logic_operator_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_usage_history_isSet = false;
    m_usage_history_isValid = false;

    m_usage_limit_isSet = false;
    m_usage_limit_isValid = false;

    m_usage_limit_per_customer_isSet = false;
    m_usage_limit_per_customer_isValid = false;

    m_used_times_isSet = false;
    m_used_times_isValid = false;
}

void OAICoupon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoupon::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_avail_isValid = ::OpenAPI::fromJsonValue(m_avail, json[QString("avail")]);
    m_avail_isSet = !json[QString("avail")].isNull() && m_avail_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_codes_isValid = ::OpenAPI::fromJsonValue(m_codes, json[QString("codes")]);
    m_codes_isSet = !json[QString("codes")].isNull() && m_codes_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_date_end_isValid = ::OpenAPI::fromJsonValue(m_date_end, json[QString("date_end")]);
    m_date_end_isSet = !json[QString("date_end")].isNull() && m_date_end_isValid;

    m_date_start_isValid = ::OpenAPI::fromJsonValue(m_date_start, json[QString("date_start")]);
    m_date_start_isSet = !json[QString("date_start")].isNull() && m_date_start_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_logic_operator_isValid = ::OpenAPI::fromJsonValue(m_logic_operator, json[QString("logic_operator")]);
    m_logic_operator_isSet = !json[QString("logic_operator")].isNull() && m_logic_operator_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_usage_history_isValid = ::OpenAPI::fromJsonValue(m_usage_history, json[QString("usage_history")]);
    m_usage_history_isSet = !json[QString("usage_history")].isNull() && m_usage_history_isValid;

    m_usage_limit_isValid = ::OpenAPI::fromJsonValue(m_usage_limit, json[QString("usage_limit")]);
    m_usage_limit_isSet = !json[QString("usage_limit")].isNull() && m_usage_limit_isValid;

    m_usage_limit_per_customer_isValid = ::OpenAPI::fromJsonValue(m_usage_limit_per_customer, json[QString("usage_limit_per_customer")]);
    m_usage_limit_per_customer_isSet = !json[QString("usage_limit_per_customer")].isNull() && m_usage_limit_per_customer_isValid;

    m_used_times_isValid = ::OpenAPI::fromJsonValue(m_used_times, json[QString("used_times")]);
    m_used_times_isSet = !json[QString("used_times")].isNull() && m_used_times_isValid;
}

QString OAICoupon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoupon::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_avail_isSet) {
        obj.insert(QString("avail"), ::OpenAPI::toJsonValue(m_avail));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_codes.size() > 0) {
        obj.insert(QString("codes"), ::OpenAPI::toJsonValue(m_codes));
    }
    if (m_conditions.size() > 0) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_date_end.isSet()) {
        obj.insert(QString("date_end"), ::OpenAPI::toJsonValue(m_date_end));
    }
    if (m_date_start.isSet()) {
        obj.insert(QString("date_start"), ::OpenAPI::toJsonValue(m_date_start));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_logic_operator_isSet) {
        obj.insert(QString("logic_operator"), ::OpenAPI::toJsonValue(m_logic_operator));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_usage_history.size() > 0) {
        obj.insert(QString("usage_history"), ::OpenAPI::toJsonValue(m_usage_history));
    }
    if (m_usage_limit_isSet) {
        obj.insert(QString("usage_limit"), ::OpenAPI::toJsonValue(m_usage_limit));
    }
    if (m_usage_limit_per_customer_isSet) {
        obj.insert(QString("usage_limit_per_customer"), ::OpenAPI::toJsonValue(m_usage_limit_per_customer));
    }
    if (m_used_times_isSet) {
        obj.insert(QString("used_times"), ::OpenAPI::toJsonValue(m_used_times));
    }
    return obj;
}

QList<OAICoupon_Action> OAICoupon::getActions() const {
    return m_actions;
}
void OAICoupon::setActions(const QList<OAICoupon_Action> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICoupon::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICoupon::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIObject OAICoupon::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICoupon::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICoupon::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICoupon::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

bool OAICoupon::isAvail() const {
    return m_avail;
}
void OAICoupon::setAvail(const bool &avail) {
    m_avail = avail;
    m_avail_isSet = true;
}

bool OAICoupon::is_avail_Set() const{
    return m_avail_isSet;
}

bool OAICoupon::is_avail_Valid() const{
    return m_avail_isValid;
}

QString OAICoupon::getCode() const {
    return m_code;
}
void OAICoupon::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICoupon::is_code_Set() const{
    return m_code_isSet;
}

bool OAICoupon::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAICoupon_Code> OAICoupon::getCodes() const {
    return m_codes;
}
void OAICoupon::setCodes(const QList<OAICoupon_Code> &codes) {
    m_codes = codes;
    m_codes_isSet = true;
}

bool OAICoupon::is_codes_Set() const{
    return m_codes_isSet;
}

bool OAICoupon::is_codes_Valid() const{
    return m_codes_isValid;
}

QList<OAICoupon_Condition> OAICoupon::getConditions() const {
    return m_conditions;
}
void OAICoupon::setConditions(const QList<OAICoupon_Condition> &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAICoupon::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAICoupon::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIObject OAICoupon::getCustomFields() const {
    return m_custom_fields;
}
void OAICoupon::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICoupon::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICoupon::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

OAIA2CDateTime OAICoupon::getDateEnd() const {
    return m_date_end;
}
void OAICoupon::setDateEnd(const OAIA2CDateTime &date_end) {
    m_date_end = date_end;
    m_date_end_isSet = true;
}

bool OAICoupon::is_date_end_Set() const{
    return m_date_end_isSet;
}

bool OAICoupon::is_date_end_Valid() const{
    return m_date_end_isValid;
}

OAIA2CDateTime OAICoupon::getDateStart() const {
    return m_date_start;
}
void OAICoupon::setDateStart(const OAIA2CDateTime &date_start) {
    m_date_start = date_start;
    m_date_start_isSet = true;
}

bool OAICoupon::is_date_start_Set() const{
    return m_date_start_isSet;
}

bool OAICoupon::is_date_start_Valid() const{
    return m_date_start_isValid;
}

QString OAICoupon::getDescription() const {
    return m_description;
}
void OAICoupon::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICoupon::is_description_Set() const{
    return m_description_isSet;
}

bool OAICoupon::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICoupon::getId() const {
    return m_id;
}
void OAICoupon::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICoupon::is_id_Set() const{
    return m_id_isSet;
}

bool OAICoupon::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICoupon::getLogicOperator() const {
    return m_logic_operator;
}
void OAICoupon::setLogicOperator(const QString &logic_operator) {
    m_logic_operator = logic_operator;
    m_logic_operator_isSet = true;
}

bool OAICoupon::is_logic_operator_Set() const{
    return m_logic_operator_isSet;
}

bool OAICoupon::is_logic_operator_Valid() const{
    return m_logic_operator_isValid;
}

QString OAICoupon::getName() const {
    return m_name;
}
void OAICoupon::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICoupon::is_name_Set() const{
    return m_name_isSet;
}

bool OAICoupon::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICoupon::getPriority() const {
    return m_priority;
}
void OAICoupon::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICoupon::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICoupon::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<OAICoupon_History> OAICoupon::getUsageHistory() const {
    return m_usage_history;
}
void OAICoupon::setUsageHistory(const QList<OAICoupon_History> &usage_history) {
    m_usage_history = usage_history;
    m_usage_history_isSet = true;
}

bool OAICoupon::is_usage_history_Set() const{
    return m_usage_history_isSet;
}

bool OAICoupon::is_usage_history_Valid() const{
    return m_usage_history_isValid;
}

qint32 OAICoupon::getUsageLimit() const {
    return m_usage_limit;
}
void OAICoupon::setUsageLimit(const qint32 &usage_limit) {
    m_usage_limit = usage_limit;
    m_usage_limit_isSet = true;
}

bool OAICoupon::is_usage_limit_Set() const{
    return m_usage_limit_isSet;
}

bool OAICoupon::is_usage_limit_Valid() const{
    return m_usage_limit_isValid;
}

qint32 OAICoupon::getUsageLimitPerCustomer() const {
    return m_usage_limit_per_customer;
}
void OAICoupon::setUsageLimitPerCustomer(const qint32 &usage_limit_per_customer) {
    m_usage_limit_per_customer = usage_limit_per_customer;
    m_usage_limit_per_customer_isSet = true;
}

bool OAICoupon::is_usage_limit_per_customer_Set() const{
    return m_usage_limit_per_customer_isSet;
}

bool OAICoupon::is_usage_limit_per_customer_Valid() const{
    return m_usage_limit_per_customer_isValid;
}

qint32 OAICoupon::getUsedTimes() const {
    return m_used_times;
}
void OAICoupon::setUsedTimes(const qint32 &used_times) {
    m_used_times = used_times;
    m_used_times_isSet = true;
}

bool OAICoupon::is_used_times_Set() const{
    return m_used_times_isSet;
}

bool OAICoupon::is_used_times_Valid() const{
    return m_used_times_isValid;
}

bool OAICoupon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_end.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_start.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logic_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_limit_per_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_times_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoupon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
