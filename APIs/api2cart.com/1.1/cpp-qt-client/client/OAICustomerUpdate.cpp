/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerUpdate::OAICustomerUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerUpdate::OAICustomerUpdate() {
    this->initializeModel();
}

OAICustomerUpdate::~OAICustomerUpdate() {}

void OAICustomerUpdate::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_group_ids_isSet = false;
    m_group_ids_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_news_letter_subscription_isSet = false;
    m_news_letter_subscription_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICustomerUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerUpdate::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("group_id")]);
    m_group_id_isSet = !json[QString("group_id")].isNull() && m_group_id_isValid;

    m_group_ids_isValid = ::OpenAPI::fromJsonValue(m_group_ids, json[QString("group_ids")]);
    m_group_ids_isSet = !json[QString("group_ids")].isNull() && m_group_ids_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_news_letter_subscription_isValid = ::OpenAPI::fromJsonValue(m_news_letter_subscription, json[QString("news_letter_subscription")]);
    m_news_letter_subscription_isSet = !json[QString("news_letter_subscription")].isNull() && m_news_letter_subscription_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICustomerUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("group_id"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_group_ids_isSet) {
        obj.insert(QString("group_ids"), ::OpenAPI::toJsonValue(m_group_ids));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_news_letter_subscription_isSet) {
        obj.insert(QString("news_letter_subscription"), ::OpenAPI::toJsonValue(m_news_letter_subscription));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_tags_isSet) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAICustomerUpdate_address_inner> OAICustomerUpdate::getAddress() const {
    return m_address;
}
void OAICustomerUpdate::setAddress(const QList<OAICustomerUpdate_address_inner> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAICustomerUpdate::is_address_Set() const{
    return m_address_isSet;
}

bool OAICustomerUpdate::is_address_Valid() const{
    return m_address_isValid;
}

QString OAICustomerUpdate::getEmail() const {
    return m_email;
}
void OAICustomerUpdate::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICustomerUpdate::is_email_Set() const{
    return m_email_isSet;
}

bool OAICustomerUpdate::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICustomerUpdate::getFirstName() const {
    return m_first_name;
}
void OAICustomerUpdate::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAICustomerUpdate::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAICustomerUpdate::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAICustomerUpdate::getGroupId() const {
    return m_group_id;
}
void OAICustomerUpdate::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAICustomerUpdate::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAICustomerUpdate::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAICustomerUpdate::getGroupIds() const {
    return m_group_ids;
}
void OAICustomerUpdate::setGroupIds(const QString &group_ids) {
    m_group_ids = group_ids;
    m_group_ids_isSet = true;
}

bool OAICustomerUpdate::is_group_ids_Set() const{
    return m_group_ids_isSet;
}

bool OAICustomerUpdate::is_group_ids_Valid() const{
    return m_group_ids_isValid;
}

QString OAICustomerUpdate::getId() const {
    return m_id;
}
void OAICustomerUpdate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomerUpdate::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomerUpdate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICustomerUpdate::getLastName() const {
    return m_last_name;
}
void OAICustomerUpdate::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAICustomerUpdate::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAICustomerUpdate::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAICustomerUpdate::isNewsLetterSubscription() const {
    return m_news_letter_subscription;
}
void OAICustomerUpdate::setNewsLetterSubscription(const bool &news_letter_subscription) {
    m_news_letter_subscription = news_letter_subscription;
    m_news_letter_subscription_isSet = true;
}

bool OAICustomerUpdate::is_news_letter_subscription_Set() const{
    return m_news_letter_subscription_isSet;
}

bool OAICustomerUpdate::is_news_letter_subscription_Valid() const{
    return m_news_letter_subscription_isValid;
}

QString OAICustomerUpdate::getPhone() const {
    return m_phone;
}
void OAICustomerUpdate::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAICustomerUpdate::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAICustomerUpdate::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAICustomerUpdate::getTags() const {
    return m_tags;
}
void OAICustomerUpdate::setTags(const QString &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICustomerUpdate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICustomerUpdate::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICustomerUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_news_letter_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
