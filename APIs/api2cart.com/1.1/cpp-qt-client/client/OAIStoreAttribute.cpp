/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreAttribute::OAIStoreAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreAttribute::OAIStoreAttribute() {
    this->initializeModel();
}

OAIStoreAttribute::~OAIStoreAttribute() {}

void OAIStoreAttribute::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_default_values_isSet = false;
    m_default_values_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lang_id_isSet = false;
    m_lang_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIStoreAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreAttribute::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_default_values_isValid = ::OpenAPI::fromJsonValue(m_default_values, json[QString("default_values")]);
    m_default_values_isSet = !json[QString("default_values")].isNull() && m_default_values_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lang_id_isValid = ::OpenAPI::fromJsonValue(m_lang_id, json[QString("lang_id")]);
    m_lang_id_isSet = !json[QString("lang_id")].isNull() && m_lang_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIStoreAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_default_values.size() > 0) {
        obj.insert(QString("default_values"), ::OpenAPI::toJsonValue(m_default_values));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lang_id_isSet) {
        obj.insert(QString("lang_id"), ::OpenAPI::toJsonValue(m_lang_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_system_isSet) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

OAIObject OAIStoreAttribute::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIStoreAttribute::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIStoreAttribute::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIStoreAttribute::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QString OAIStoreAttribute::getCode() const {
    return m_code;
}
void OAIStoreAttribute::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIStoreAttribute::is_code_Set() const{
    return m_code_isSet;
}

bool OAIStoreAttribute::is_code_Valid() const{
    return m_code_isValid;
}

OAIObject OAIStoreAttribute::getCustomFields() const {
    return m_custom_fields;
}
void OAIStoreAttribute::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIStoreAttribute::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIStoreAttribute::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QList<QString> OAIStoreAttribute::getDefaultValues() const {
    return m_default_values;
}
void OAIStoreAttribute::setDefaultValues(const QList<QString> &default_values) {
    m_default_values = default_values;
    m_default_values_isSet = true;
}

bool OAIStoreAttribute::is_default_values_Set() const{
    return m_default_values_isSet;
}

bool OAIStoreAttribute::is_default_values_Valid() const{
    return m_default_values_isValid;
}

QString OAIStoreAttribute::getId() const {
    return m_id;
}
void OAIStoreAttribute::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStoreAttribute::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStoreAttribute::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStoreAttribute::getLangId() const {
    return m_lang_id;
}
void OAIStoreAttribute::setLangId(const QString &lang_id) {
    m_lang_id = lang_id;
    m_lang_id_isSet = true;
}

bool OAIStoreAttribute::is_lang_id_Set() const{
    return m_lang_id_isSet;
}

bool OAIStoreAttribute::is_lang_id_Valid() const{
    return m_lang_id_isValid;
}

QString OAIStoreAttribute::getName() const {
    return m_name;
}
void OAIStoreAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStoreAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStoreAttribute::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIStoreAttribute::getPosition() const {
    return m_position;
}
void OAIStoreAttribute::setPosition(const qint32 &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIStoreAttribute::is_position_Set() const{
    return m_position_isSet;
}

bool OAIStoreAttribute::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIStoreAttribute::isRequired() const {
    return m_required;
}
void OAIStoreAttribute::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIStoreAttribute::is_required_Set() const{
    return m_required_isSet;
}

bool OAIStoreAttribute::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIStoreAttribute::getStoreId() const {
    return m_store_id;
}
void OAIStoreAttribute::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIStoreAttribute::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIStoreAttribute::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAIStoreAttribute::isSystem() const {
    return m_system;
}
void OAIStoreAttribute::setSystem(const bool &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIStoreAttribute::is_system_Set() const{
    return m_system_isSet;
}

bool OAIStoreAttribute::is_system_Valid() const{
    return m_system_isValid;
}

QString OAIStoreAttribute::getType() const {
    return m_type;
}
void OAIStoreAttribute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStoreAttribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStoreAttribute::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIStoreAttribute::getValues() const {
    return m_values;
}
void OAIStoreAttribute::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIStoreAttribute::is_values_Set() const{
    return m_values_isSet;
}

bool OAIStoreAttribute::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIStoreAttribute::isVisible() const {
    return m_visible;
}
void OAIStoreAttribute::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIStoreAttribute::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIStoreAttribute::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIStoreAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lang_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
