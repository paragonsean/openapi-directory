/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICartApi_H
#define OAI_OAICartApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountCartAdd_200_response.h"
#include "OAIAttributeAdd_200_response.h"
#include "OAIAttributeDelete_200_response.h"
#include "OAIBasketLiveShippingServiceDelete_200_response.h"
#include "OAIBridgeDelete_200_response.h"
#include "OAICartBridge_200_response.h"
#include "OAICartCatalogPriceRulesCount_200_response.h"
#include "OAICartClearCache_200_response.h"
#include "OAICartConfigUpdate.h"
#include "OAICartConfigUpdate_200_response.h"
#include "OAICartConfig_200_response.h"
#include "OAICartCouponAdd.h"
#include "OAICartCouponAdd_200_response.h"
#include "OAICartCouponCount_200_response.h"
#include "OAICartDelete_200_response.h"
#include "OAICartDisconnect_200_response.h"
#include "OAICartGiftcardAdd_200_response.h"
#include "OAICartGiftcardCount_200_response.h"
#include "OAICartInfo_200_response.h"
#include "OAICartList_200_response.h"
#include "OAICartMethods_200_response.h"
#include "OAICartPluginList_200_response.h"
#include "OAICartScriptAdd_200_response.h"
#include "OAICartShippingZonesList_200_response.h"
#include "OAICartValidate_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAIModel_Response_Cart_Catalog_PriceRules_List.h"
#include "OAIModel_Response_Cart_Coupon_List.h"
#include "OAIModel_Response_Cart_GiftCard_List.h"
#include "OAIModel_Response_Cart_MetaData_List.h"
#include "OAIModel_Response_Cart_Script_List.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICartApi : public QObject {
    Q_OBJECT

public:
    OAICartApi(const int timeOut = 0);
    ~OAICartApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  whitelabel bool [optional]
    */
    virtual void bridgeDownload(const ::OpenAPI::OptionalParam<bool> &whitelabel = ::OpenAPI::OptionalParam<bool>());


    virtual void cartBridge();


    virtual void cartCatalogPriceRulesCount();

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  ids QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void cartCatalogPriceRulesList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cache_type QString [required]
    */
    virtual void cartClearCache(const QString &cache_type);

    /**
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void cartConfig(const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_cart_config_update OAICartConfigUpdate [required]
    */
    Q_DECL_DEPRECATED virtual void cartConfigUpdate(const OAICartConfigUpdate &oai_cart_config_update);

    /**
    * @param[in]  oai_cart_coupon_add OAICartCouponAdd [required]
    */
    virtual void cartCouponAdd(const OAICartCouponAdd &oai_cart_coupon_add);

    /**
    * @param[in]  coupon_id QString [required]
    * @param[in]  entity QString [required]
    * @param[in]  key QString [required]
    * @param[in]  r_operator QString [required]
    * @param[in]  value QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  target QString [optional]
    */
    virtual void cartCouponConditionAdd(const QString &coupon_id, const QString &entity, const QString &key, const QString &r_operator, const QString &value, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  store_id QString [optional]
    * @param[in]  date_start_from QString [optional]
    * @param[in]  date_start_to QString [optional]
    * @param[in]  date_end_from QString [optional]
    * @param[in]  date_end_to QString [optional]
    * @param[in]  avail bool [optional]
    */
    virtual void cartCouponCount(const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_start_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_start_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_end_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_end_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void cartCouponDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  coupons_ids QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  date_start_from QString [optional]
    * @param[in]  date_start_to QString [optional]
    * @param[in]  date_end_from QString [optional]
    * @param[in]  date_end_to QString [optional]
    * @param[in]  avail bool [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void cartCouponList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &coupons_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_start_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_start_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_end_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_end_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &avail = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cart_id QString [required]
    * @param[in]  store_url QString [required]
    * @param[in]  etsy_client_id QString [required]
    * @param[in]  etsy_refresh_token QString [required]
    * @param[in]  store_id QString [required]
    * @param[in]  bridge_url QString [optional]
    * @param[in]  store_root QString [optional]
    * @param[in]  store_key QString [optional]
    * @param[in]  shared_secret QString [optional]
    * @param[in]  validate_version bool [optional]
    * @param[in]  verify bool [optional]
    * @param[in]  db_tables_prefix QString [optional]
    * @param[in]  ftp_host QString [optional]
    * @param[in]  ftp_user QString [optional]
    * @param[in]  ftp_password QString [optional]
    * @param[in]  ftp_port qint32 [optional]
    * @param[in]  ftp_store_dir QString [optional]
    * @param[in]  api_key_3dcart QString [optional]
    * @param[in]  admin_account QString [optional]
    * @param[in]  api_path QString [optional]
    * @param[in]  api_key QString [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  context QString [optional]
    * @param[in]  access_token2 QString [optional]
    * @param[in]  api_key_shopify QString [optional]
    * @param[in]  api_password QString [optional]
    * @param[in]  access_token_shopify QString [optional]
    * @param[in]  api_key2 QString [optional]
    * @param[in]  api_username QString [optional]
    * @param[in]  encrypted_password QString [optional]
    * @param[in]  login QString [optional]
    * @param[in]  api_user_adnsf QString [optional]
    * @param[in]  api_pass QString [optional]
    * @param[in]  private_key QString [optional]
    * @param[in]  app_token QString [optional]
    * @param[in]  etsy_keystring QString [optional]
    * @param[in]  etsy_shared_secret QString [optional]
    * @param[in]  token_secret QString [optional]
    * @param[in]  ebay_client_id QString [optional]
    * @param[in]  ebay_client_secret QString [optional]
    * @param[in]  ebay_runame QString [optional]
    * @param[in]  ebay_access_token QString [optional]
    * @param[in]  ebay_refresh_token QString [optional]
    * @param[in]  ebay_environment QString [optional]
    * @param[in]  ebay_site_id qint32 [optional]
    * @param[in]  dw_client_id QString [optional]
    * @param[in]  dw_api_pass QString [optional]
    * @param[in]  demandware_user_name QString [optional]
    * @param[in]  demandware_user_password QString [optional]
    * @param[in]  seller_id QString [optional]
    * @param[in]  amazon_secret_key QString [optional]
    * @param[in]  amazon_access_key_id QString [optional]
    * @param[in]  marketplaces_ids QString [optional]
    * @param[in]  environment QString [optional]
    * @param[in]  hybris_client_id QString [optional]
    * @param[in]  hybris_client_secret QString [optional]
    * @param[in]  hybris_username QString [optional]
    * @param[in]  hybris_password QString [optional]
    * @param[in]  hybris_websites QList<QString> [optional]
    * @param[in]  walmart_client_id QString [optional]
    * @param[in]  walmart_client_secret QString [optional]
    * @param[in]  walmart_environment QString [optional]
    * @param[in]  walmart_channel_type QString [optional]
    * @param[in]  lightspeed_api_key QString [optional]
    * @param[in]  lightspeed_api_secret QString [optional]
    * @param[in]  shopware_access_key QString [optional]
    * @param[in]  shopware_api_key QString [optional]
    * @param[in]  shopware_api_secret QString [optional]
    * @param[in]  commercehq_api_key QString [optional]
    * @param[in]  commercehq_api_password QString [optional]
    * @param[in]  r_3dcart_private_key QString [optional]
    * @param[in]  r_3dcart_access_token QString [optional]
    * @param[in]  wc_consumer_key QString [optional]
    * @param[in]  wc_consumer_secret QString [optional]
    * @param[in]  magento_consumer_key QString [optional]
    * @param[in]  magento_consumer_secret QString [optional]
    * @param[in]  magento_access_token QString [optional]
    * @param[in]  magento_token_secret QString [optional]
    * @param[in]  prestashop_webservice_key QString [optional]
    * @param[in]  wix_app_id QString [optional]
    * @param[in]  wix_app_secret_key QString [optional]
    * @param[in]  wix_refresh_token QString [optional]
    * @param[in]  mercado_libre_app_id QString [optional]
    * @param[in]  mercado_libre_app_secret_key QString [optional]
    * @param[in]  mercado_libre_refresh_token QString [optional]
    * @param[in]  zid_client_id qint32 [optional]
    * @param[in]  zid_client_secret QString [optional]
    * @param[in]  zid_access_token QString [optional]
    * @param[in]  zid_authorization QString [optional]
    * @param[in]  zid_refresh_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void cartCreate(const QString &cart_id, const QString &store_url, const QString &etsy_client_id, const QString &etsy_refresh_token, const QString &store_id, const ::OpenAPI::OptionalParam<QString> &bridge_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_root = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shared_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &validate_version = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &verify = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &db_tables_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ftp_host = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ftp_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ftp_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ftp_port = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ftp_store_dir = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_key_3dcart = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &admin_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &context = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_key_shopify = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token_shopify = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_key2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &encrypted_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &login = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_user_adnsf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &api_pass = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_keystring = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &etsy_shared_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_runame = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ebay_environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &ebay_site_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &dw_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dw_api_pass = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &demandware_user_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &demandware_user_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seller_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &amazon_access_key_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marketplaces_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hybris_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &hybris_websites = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &walmart_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walmart_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walmart_environment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &walmart_channel_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lightspeed_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lightspeed_api_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopware_access_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopware_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &shopware_api_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commercehq_api_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &commercehq_api_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_3dcart_private_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_3dcart_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wc_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wc_consumer_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_consumer_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_consumer_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &magento_token_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &prestashop_webservice_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wix_app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wix_app_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &wix_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mercado_libre_app_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mercado_libre_app_secret_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mercado_libre_refresh_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &zid_client_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &zid_client_secret = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zid_access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zid_authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &zid_refresh_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  delete_bridge bool [optional]
    */
    virtual void cartDelete(const ::OpenAPI::OptionalParam<bool> &delete_bridge = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  delete_bridge bool [optional]
    */
    Q_DECL_DEPRECATED virtual void cartDisconnect(const ::OpenAPI::OptionalParam<bool> &delete_bridge = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  amount double [required]
    * @param[in]  code QString [optional]
    * @param[in]  owner_email QString [optional]
    * @param[in]  recipient_email QString [optional]
    */
    virtual void cartGiftcardAdd(const double &amount, const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &recipient_email = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  store_id QString [optional]
    */
    virtual void cartGiftcardCount(const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void cartGiftcardList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void cartInfo(const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());


    Q_DECL_DEPRECATED virtual void cartList();

    /**
    * @param[in]  entity_id QString [required]
    * @param[in]  entity QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  page_cursor QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void cartMetaDataList(const QString &entity_id, const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  value QString [required]
    * @param[in]  r_namespace QString [required]
    * @param[in]  entity QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    */
    virtual void cartMetaDataSet(const QString &entity_id, const QString &key, const QString &value, const QString &r_namespace, const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entity_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  entity QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void cartMetaDataUnset(const QString &entity_id, const QString &key, const QString &id, const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());


    virtual void cartMethods();

    /**
    * @param[in]  store_key QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    */
    virtual void cartPluginList(const ::OpenAPI::OptionalParam<QString> &store_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  html QString [optional]
    * @param[in]  src QString [optional]
    * @param[in]  load_method QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  store_id QString [optional]
    */
    virtual void cartScriptAdd(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &html = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &src = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &load_method = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void cartScriptDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page_cursor QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  created_from QString [optional]
    * @param[in]  created_to QString [optional]
    * @param[in]  modified_from QString [optional]
    * @param[in]  modified_to QString [optional]
    * @param[in]  script_ids QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void cartScriptList(const ::OpenAPI::OptionalParam<QString> &page_cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &created_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &script_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  store_id QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  exclude QString [optional]
    */
    virtual void cartShippingZonesList(const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  validate_version bool [optional]
    */
    virtual void cartValidate(const ::OpenAPI::OptionalParam<bool> &validate_version = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bridgeDownloadCallback(OAIHttpRequestWorker *worker);
    void cartBridgeCallback(OAIHttpRequestWorker *worker);
    void cartCatalogPriceRulesCountCallback(OAIHttpRequestWorker *worker);
    void cartCatalogPriceRulesListCallback(OAIHttpRequestWorker *worker);
    void cartClearCacheCallback(OAIHttpRequestWorker *worker);
    void cartConfigCallback(OAIHttpRequestWorker *worker);
    void cartConfigUpdateCallback(OAIHttpRequestWorker *worker);
    void cartCouponAddCallback(OAIHttpRequestWorker *worker);
    void cartCouponConditionAddCallback(OAIHttpRequestWorker *worker);
    void cartCouponCountCallback(OAIHttpRequestWorker *worker);
    void cartCouponDeleteCallback(OAIHttpRequestWorker *worker);
    void cartCouponListCallback(OAIHttpRequestWorker *worker);
    void cartCreateCallback(OAIHttpRequestWorker *worker);
    void cartDeleteCallback(OAIHttpRequestWorker *worker);
    void cartDisconnectCallback(OAIHttpRequestWorker *worker);
    void cartGiftcardAddCallback(OAIHttpRequestWorker *worker);
    void cartGiftcardCountCallback(OAIHttpRequestWorker *worker);
    void cartGiftcardListCallback(OAIHttpRequestWorker *worker);
    void cartInfoCallback(OAIHttpRequestWorker *worker);
    void cartListCallback(OAIHttpRequestWorker *worker);
    void cartMetaDataListCallback(OAIHttpRequestWorker *worker);
    void cartMetaDataSetCallback(OAIHttpRequestWorker *worker);
    void cartMetaDataUnsetCallback(OAIHttpRequestWorker *worker);
    void cartMethodsCallback(OAIHttpRequestWorker *worker);
    void cartPluginListCallback(OAIHttpRequestWorker *worker);
    void cartScriptAddCallback(OAIHttpRequestWorker *worker);
    void cartScriptDeleteCallback(OAIHttpRequestWorker *worker);
    void cartScriptListCallback(OAIHttpRequestWorker *worker);
    void cartShippingZonesListCallback(OAIHttpRequestWorker *worker);
    void cartValidateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bridgeDownloadSignal(OAIHttpFileElement summary);
    void cartBridgeSignal(OAICartBridge_200_response summary);
    void cartCatalogPriceRulesCountSignal(OAICartCatalogPriceRulesCount_200_response summary);
    void cartCatalogPriceRulesListSignal(OAIModel_Response_Cart_Catalog_PriceRules_List summary);
    void cartClearCacheSignal(OAICartClearCache_200_response summary);
    void cartConfigSignal(OAICartConfig_200_response summary);
    void cartConfigUpdateSignal(OAICartConfigUpdate_200_response summary);
    void cartCouponAddSignal(OAICartCouponAdd_200_response summary);
    void cartCouponConditionAddSignal(OAIBasketLiveShippingServiceDelete_200_response summary);
    void cartCouponCountSignal(OAICartCouponCount_200_response summary);
    void cartCouponDeleteSignal(OAIAttributeDelete_200_response summary);
    void cartCouponListSignal(OAIModel_Response_Cart_Coupon_List summary);
    void cartCreateSignal(OAIAccountCartAdd_200_response summary);
    void cartDeleteSignal(OAICartDelete_200_response summary);
    void cartDisconnectSignal(OAICartDisconnect_200_response summary);
    void cartGiftcardAddSignal(OAICartGiftcardAdd_200_response summary);
    void cartGiftcardCountSignal(OAICartGiftcardCount_200_response summary);
    void cartGiftcardListSignal(OAIModel_Response_Cart_GiftCard_List summary);
    void cartInfoSignal(OAICartInfo_200_response summary);
    void cartListSignal(OAICartList_200_response summary);
    void cartMetaDataListSignal(OAIModel_Response_Cart_MetaData_List summary);
    void cartMetaDataSetSignal(OAIAttributeAdd_200_response summary);
    void cartMetaDataUnsetSignal(OAIBasketLiveShippingServiceDelete_200_response summary);
    void cartMethodsSignal(OAICartMethods_200_response summary);
    void cartPluginListSignal(OAICartPluginList_200_response summary);
    void cartScriptAddSignal(OAICartScriptAdd_200_response summary);
    void cartScriptDeleteSignal(OAIBridgeDelete_200_response summary);
    void cartScriptListSignal(OAIModel_Response_Cart_Script_List summary);
    void cartShippingZonesListSignal(OAICartShippingZonesList_200_response summary);
    void cartValidateSignal(OAICartValidate_200_response summary);


    void bridgeDownloadSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void cartBridgeSignalFull(OAIHttpRequestWorker *worker, OAICartBridge_200_response summary);
    void cartCatalogPriceRulesCountSignalFull(OAIHttpRequestWorker *worker, OAICartCatalogPriceRulesCount_200_response summary);
    void cartCatalogPriceRulesListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Cart_Catalog_PriceRules_List summary);
    void cartClearCacheSignalFull(OAIHttpRequestWorker *worker, OAICartClearCache_200_response summary);
    void cartConfigSignalFull(OAIHttpRequestWorker *worker, OAICartConfig_200_response summary);
    void cartConfigUpdateSignalFull(OAIHttpRequestWorker *worker, OAICartConfigUpdate_200_response summary);
    void cartCouponAddSignalFull(OAIHttpRequestWorker *worker, OAICartCouponAdd_200_response summary);
    void cartCouponConditionAddSignalFull(OAIHttpRequestWorker *worker, OAIBasketLiveShippingServiceDelete_200_response summary);
    void cartCouponCountSignalFull(OAIHttpRequestWorker *worker, OAICartCouponCount_200_response summary);
    void cartCouponDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void cartCouponListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Cart_Coupon_List summary);
    void cartCreateSignalFull(OAIHttpRequestWorker *worker, OAIAccountCartAdd_200_response summary);
    void cartDeleteSignalFull(OAIHttpRequestWorker *worker, OAICartDelete_200_response summary);
    void cartDisconnectSignalFull(OAIHttpRequestWorker *worker, OAICartDisconnect_200_response summary);
    void cartGiftcardAddSignalFull(OAIHttpRequestWorker *worker, OAICartGiftcardAdd_200_response summary);
    void cartGiftcardCountSignalFull(OAIHttpRequestWorker *worker, OAICartGiftcardCount_200_response summary);
    void cartGiftcardListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Cart_GiftCard_List summary);
    void cartInfoSignalFull(OAIHttpRequestWorker *worker, OAICartInfo_200_response summary);
    void cartListSignalFull(OAIHttpRequestWorker *worker, OAICartList_200_response summary);
    void cartMetaDataListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Cart_MetaData_List summary);
    void cartMetaDataSetSignalFull(OAIHttpRequestWorker *worker, OAIAttributeAdd_200_response summary);
    void cartMetaDataUnsetSignalFull(OAIHttpRequestWorker *worker, OAIBasketLiveShippingServiceDelete_200_response summary);
    void cartMethodsSignalFull(OAIHttpRequestWorker *worker, OAICartMethods_200_response summary);
    void cartPluginListSignalFull(OAIHttpRequestWorker *worker, OAICartPluginList_200_response summary);
    void cartScriptAddSignalFull(OAIHttpRequestWorker *worker, OAICartScriptAdd_200_response summary);
    void cartScriptDeleteSignalFull(OAIHttpRequestWorker *worker, OAIBridgeDelete_200_response summary);
    void cartScriptListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Cart_Script_List summary);
    void cartShippingZonesListSignalFull(OAIHttpRequestWorker *worker, OAICartShippingZonesList_200_response summary);
    void cartValidateSignalFull(OAIHttpRequestWorker *worker, OAICartValidate_200_response summary);

    Q_DECL_DEPRECATED_X("Use bridgeDownloadSignalError() instead")
    void bridgeDownloadSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bridgeDownloadSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartBridgeSignalError() instead")
    void cartBridgeSignalE(OAICartBridge_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartBridgeSignalError(OAICartBridge_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCatalogPriceRulesCountSignalError() instead")
    void cartCatalogPriceRulesCountSignalE(OAICartCatalogPriceRulesCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCatalogPriceRulesCountSignalError(OAICartCatalogPriceRulesCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCatalogPriceRulesListSignalError() instead")
    void cartCatalogPriceRulesListSignalE(OAIModel_Response_Cart_Catalog_PriceRules_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCatalogPriceRulesListSignalError(OAIModel_Response_Cart_Catalog_PriceRules_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartClearCacheSignalError() instead")
    void cartClearCacheSignalE(OAICartClearCache_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartClearCacheSignalError(OAICartClearCache_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartConfigSignalError() instead")
    void cartConfigSignalE(OAICartConfig_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartConfigSignalError(OAICartConfig_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartConfigUpdateSignalError() instead")
    void cartConfigUpdateSignalE(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartConfigUpdateSignalError(OAICartConfigUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponAddSignalError() instead")
    void cartCouponAddSignalE(OAICartCouponAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponAddSignalError(OAICartCouponAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponConditionAddSignalError() instead")
    void cartCouponConditionAddSignalE(OAIBasketLiveShippingServiceDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponConditionAddSignalError(OAIBasketLiveShippingServiceDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponCountSignalError() instead")
    void cartCouponCountSignalE(OAICartCouponCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponCountSignalError(OAICartCouponCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponDeleteSignalError() instead")
    void cartCouponDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponListSignalError() instead")
    void cartCouponListSignalE(OAIModel_Response_Cart_Coupon_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponListSignalError(OAIModel_Response_Cart_Coupon_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCreateSignalError() instead")
    void cartCreateSignalE(OAIAccountCartAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCreateSignalError(OAIAccountCartAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartDeleteSignalError() instead")
    void cartDeleteSignalE(OAICartDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartDeleteSignalError(OAICartDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartDisconnectSignalError() instead")
    void cartDisconnectSignalE(OAICartDisconnect_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartDisconnectSignalError(OAICartDisconnect_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartGiftcardAddSignalError() instead")
    void cartGiftcardAddSignalE(OAICartGiftcardAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartGiftcardAddSignalError(OAICartGiftcardAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartGiftcardCountSignalError() instead")
    void cartGiftcardCountSignalE(OAICartGiftcardCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartGiftcardCountSignalError(OAICartGiftcardCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartGiftcardListSignalError() instead")
    void cartGiftcardListSignalE(OAIModel_Response_Cart_GiftCard_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartGiftcardListSignalError(OAIModel_Response_Cart_GiftCard_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartInfoSignalError() instead")
    void cartInfoSignalE(OAICartInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartInfoSignalError(OAICartInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartListSignalError() instead")
    void cartListSignalE(OAICartList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartListSignalError(OAICartList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMetaDataListSignalError() instead")
    void cartMetaDataListSignalE(OAIModel_Response_Cart_MetaData_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMetaDataListSignalError(OAIModel_Response_Cart_MetaData_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMetaDataSetSignalError() instead")
    void cartMetaDataSetSignalE(OAIAttributeAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMetaDataSetSignalError(OAIAttributeAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMetaDataUnsetSignalError() instead")
    void cartMetaDataUnsetSignalE(OAIBasketLiveShippingServiceDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMetaDataUnsetSignalError(OAIBasketLiveShippingServiceDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMethodsSignalError() instead")
    void cartMethodsSignalE(OAICartMethods_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMethodsSignalError(OAICartMethods_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartPluginListSignalError() instead")
    void cartPluginListSignalE(OAICartPluginList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartPluginListSignalError(OAICartPluginList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartScriptAddSignalError() instead")
    void cartScriptAddSignalE(OAICartScriptAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartScriptAddSignalError(OAICartScriptAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartScriptDeleteSignalError() instead")
    void cartScriptDeleteSignalE(OAIBridgeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartScriptDeleteSignalError(OAIBridgeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartScriptListSignalError() instead")
    void cartScriptListSignalE(OAIModel_Response_Cart_Script_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartScriptListSignalError(OAIModel_Response_Cart_Script_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartShippingZonesListSignalError() instead")
    void cartShippingZonesListSignalE(OAICartShippingZonesList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartShippingZonesListSignalError(OAICartShippingZonesList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartValidateSignalError() instead")
    void cartValidateSignalE(OAICartValidate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cartValidateSignalError(OAICartValidate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bridgeDownloadSignalErrorFull() instead")
    void bridgeDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bridgeDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartBridgeSignalErrorFull() instead")
    void cartBridgeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartBridgeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCatalogPriceRulesCountSignalErrorFull() instead")
    void cartCatalogPriceRulesCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCatalogPriceRulesCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCatalogPriceRulesListSignalErrorFull() instead")
    void cartCatalogPriceRulesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCatalogPriceRulesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartClearCacheSignalErrorFull() instead")
    void cartClearCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartClearCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartConfigSignalErrorFull() instead")
    void cartConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartConfigUpdateSignalErrorFull() instead")
    void cartConfigUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartConfigUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponAddSignalErrorFull() instead")
    void cartCouponAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponConditionAddSignalErrorFull() instead")
    void cartCouponConditionAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponConditionAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponCountSignalErrorFull() instead")
    void cartCouponCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponDeleteSignalErrorFull() instead")
    void cartCouponDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCouponListSignalErrorFull() instead")
    void cartCouponListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCouponListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartCreateSignalErrorFull() instead")
    void cartCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartDeleteSignalErrorFull() instead")
    void cartDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartDisconnectSignalErrorFull() instead")
    void cartDisconnectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartDisconnectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartGiftcardAddSignalErrorFull() instead")
    void cartGiftcardAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartGiftcardAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartGiftcardCountSignalErrorFull() instead")
    void cartGiftcardCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartGiftcardCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartGiftcardListSignalErrorFull() instead")
    void cartGiftcardListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartGiftcardListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartInfoSignalErrorFull() instead")
    void cartInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartListSignalErrorFull() instead")
    void cartListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMetaDataListSignalErrorFull() instead")
    void cartMetaDataListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMetaDataListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMetaDataSetSignalErrorFull() instead")
    void cartMetaDataSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMetaDataSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMetaDataUnsetSignalErrorFull() instead")
    void cartMetaDataUnsetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMetaDataUnsetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartMethodsSignalErrorFull() instead")
    void cartMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartPluginListSignalErrorFull() instead")
    void cartPluginListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartPluginListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartScriptAddSignalErrorFull() instead")
    void cartScriptAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartScriptAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartScriptDeleteSignalErrorFull() instead")
    void cartScriptDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartScriptDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartScriptListSignalErrorFull() instead")
    void cartScriptListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartScriptListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartShippingZonesListSignalErrorFull() instead")
    void cartShippingZonesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartShippingZonesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cartValidateSignalErrorFull() instead")
    void cartValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cartValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
