/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICart_StoreInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICart_StoreInfo::OAICart_StoreInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICart_StoreInfo::OAICart_StoreInfo() {
    this->initializeModel();
}

OAICart_StoreInfo::~OAICart_StoreInfo() {}

void OAICart_StoreInfo::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_carrier_info_isSet = false;
    m_carrier_info_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_default_warehouse_id_isSet = false;
    m_default_warehouse_id_isValid = false;

    m_dimension_unit_isSet = false;
    m_dimension_unit_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_multi_store_url_isSet = false;
    m_multi_store_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prices_include_tax_isSet = false;
    m_prices_include_tax_isValid = false;

    m_root_category_id_isSet = false;
    m_root_category_id_isValid = false;

    m_store_currencies_isSet = false;
    m_store_currencies_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_store_languages_isSet = false;
    m_store_languages_isValid = false;

    m_store_owner_info_isSet = false;
    m_store_owner_info_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_weight_unit_isSet = false;
    m_weight_unit_isValid = false;
}

void OAICart_StoreInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICart_StoreInfo::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additional_fields")]);
    m_additional_fields_isSet = !json[QString("additional_fields")].isNull() && m_additional_fields_isValid;

    m_carrier_info_isValid = ::OpenAPI::fromJsonValue(m_carrier_info, json[QString("carrier_info")]);
    m_carrier_info_isSet = !json[QString("carrier_info")].isNull() && m_carrier_info_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_default_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_default_warehouse_id, json[QString("default_warehouse_id")]);
    m_default_warehouse_id_isSet = !json[QString("default_warehouse_id")].isNull() && m_default_warehouse_id_isValid;

    m_dimension_unit_isValid = ::OpenAPI::fromJsonValue(m_dimension_unit, json[QString("dimension_unit")]);
    m_dimension_unit_isSet = !json[QString("dimension_unit")].isNull() && m_dimension_unit_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_multi_store_url_isValid = ::OpenAPI::fromJsonValue(m_multi_store_url, json[QString("multi_store_url")]);
    m_multi_store_url_isSet = !json[QString("multi_store_url")].isNull() && m_multi_store_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prices_include_tax_isValid = ::OpenAPI::fromJsonValue(m_prices_include_tax, json[QString("prices_include_tax")]);
    m_prices_include_tax_isSet = !json[QString("prices_include_tax")].isNull() && m_prices_include_tax_isValid;

    m_root_category_id_isValid = ::OpenAPI::fromJsonValue(m_root_category_id, json[QString("root_category_id")]);
    m_root_category_id_isSet = !json[QString("root_category_id")].isNull() && m_root_category_id_isValid;

    m_store_currencies_isValid = ::OpenAPI::fromJsonValue(m_store_currencies, json[QString("store_currencies")]);
    m_store_currencies_isSet = !json[QString("store_currencies")].isNull() && m_store_currencies_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("store_id")]);
    m_store_id_isSet = !json[QString("store_id")].isNull() && m_store_id_isValid;

    m_store_languages_isValid = ::OpenAPI::fromJsonValue(m_store_languages, json[QString("store_languages")]);
    m_store_languages_isSet = !json[QString("store_languages")].isNull() && m_store_languages_isValid;

    m_store_owner_info_isValid = ::OpenAPI::fromJsonValue(m_store_owner_info, json[QString("store_owner_info")]);
    m_store_owner_info_isSet = !json[QString("store_owner_info")].isNull() && m_store_owner_info_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_weight_unit_isValid = ::OpenAPI::fromJsonValue(m_weight_unit, json[QString("weight_unit")]);
    m_weight_unit_isSet = !json[QString("weight_unit")].isNull() && m_weight_unit_isValid;
}

QString OAICart_StoreInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICart_StoreInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_additional_fields_isSet) {
        obj.insert(QString("additional_fields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_carrier_info.size() > 0) {
        obj.insert(QString("carrier_info"), ::OpenAPI::toJsonValue(m_carrier_info));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_fields_isSet) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_default_warehouse_id_isSet) {
        obj.insert(QString("default_warehouse_id"), ::OpenAPI::toJsonValue(m_default_warehouse_id));
    }
    if (m_dimension_unit_isSet) {
        obj.insert(QString("dimension_unit"), ::OpenAPI::toJsonValue(m_dimension_unit));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_multi_store_url_isSet) {
        obj.insert(QString("multi_store_url"), ::OpenAPI::toJsonValue(m_multi_store_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prices_include_tax_isSet) {
        obj.insert(QString("prices_include_tax"), ::OpenAPI::toJsonValue(m_prices_include_tax));
    }
    if (m_root_category_id_isSet) {
        obj.insert(QString("root_category_id"), ::OpenAPI::toJsonValue(m_root_category_id));
    }
    if (m_store_currencies.size() > 0) {
        obj.insert(QString("store_currencies"), ::OpenAPI::toJsonValue(m_store_currencies));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("store_id"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_store_languages.size() > 0) {
        obj.insert(QString("store_languages"), ::OpenAPI::toJsonValue(m_store_languages));
    }
    if (m_store_owner_info.isSet()) {
        obj.insert(QString("store_owner_info"), ::OpenAPI::toJsonValue(m_store_owner_info));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_weight_unit_isSet) {
        obj.insert(QString("weight_unit"), ::OpenAPI::toJsonValue(m_weight_unit));
    }
    return obj;
}

bool OAICart_StoreInfo::isActive() const {
    return m_active;
}
void OAICart_StoreInfo::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICart_StoreInfo::is_active_Set() const{
    return m_active_isSet;
}

bool OAICart_StoreInfo::is_active_Valid() const{
    return m_active_isValid;
}

OAIObject OAICart_StoreInfo::getAdditionalFields() const {
    return m_additional_fields;
}
void OAICart_StoreInfo::setAdditionalFields(const OAIObject &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAICart_StoreInfo::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAICart_StoreInfo::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

QList<OAICarrier> OAICart_StoreInfo::getCarrierInfo() const {
    return m_carrier_info;
}
void OAICart_StoreInfo::setCarrierInfo(const QList<OAICarrier> &carrier_info) {
    m_carrier_info = carrier_info;
    m_carrier_info_isSet = true;
}

bool OAICart_StoreInfo::is_carrier_info_Set() const{
    return m_carrier_info_isSet;
}

bool OAICart_StoreInfo::is_carrier_info_Valid() const{
    return m_carrier_info_isValid;
}

QList<OAICart_Channel> OAICart_StoreInfo::getChannels() const {
    return m_channels;
}
void OAICart_StoreInfo::setChannels(const QList<OAICart_Channel> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAICart_StoreInfo::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAICart_StoreInfo::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAICart_StoreInfo::getCountry() const {
    return m_country;
}
void OAICart_StoreInfo::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICart_StoreInfo::is_country_Set() const{
    return m_country_isSet;
}

bool OAICart_StoreInfo::is_country_Valid() const{
    return m_country_isValid;
}

OAICurrency OAICart_StoreInfo::getCurrency() const {
    return m_currency;
}
void OAICart_StoreInfo::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICart_StoreInfo::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICart_StoreInfo::is_currency_Valid() const{
    return m_currency_isValid;
}

OAIObject OAICart_StoreInfo::getCustomFields() const {
    return m_custom_fields;
}
void OAICart_StoreInfo::setCustomFields(const OAIObject &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAICart_StoreInfo::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAICart_StoreInfo::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAICart_StoreInfo::getDefaultWarehouseId() const {
    return m_default_warehouse_id;
}
void OAICart_StoreInfo::setDefaultWarehouseId(const QString &default_warehouse_id) {
    m_default_warehouse_id = default_warehouse_id;
    m_default_warehouse_id_isSet = true;
}

bool OAICart_StoreInfo::is_default_warehouse_id_Set() const{
    return m_default_warehouse_id_isSet;
}

bool OAICart_StoreInfo::is_default_warehouse_id_Valid() const{
    return m_default_warehouse_id_isValid;
}

QString OAICart_StoreInfo::getDimensionUnit() const {
    return m_dimension_unit;
}
void OAICart_StoreInfo::setDimensionUnit(const QString &dimension_unit) {
    m_dimension_unit = dimension_unit;
    m_dimension_unit_isSet = true;
}

bool OAICart_StoreInfo::is_dimension_unit_Set() const{
    return m_dimension_unit_isSet;
}

bool OAICart_StoreInfo::is_dimension_unit_Valid() const{
    return m_dimension_unit_isValid;
}

QString OAICart_StoreInfo::getLanguage() const {
    return m_language;
}
void OAICart_StoreInfo::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAICart_StoreInfo::is_language_Set() const{
    return m_language_isSet;
}

bool OAICart_StoreInfo::is_language_Valid() const{
    return m_language_isValid;
}

QString OAICart_StoreInfo::getMultiStoreUrl() const {
    return m_multi_store_url;
}
void OAICart_StoreInfo::setMultiStoreUrl(const QString &multi_store_url) {
    m_multi_store_url = multi_store_url;
    m_multi_store_url_isSet = true;
}

bool OAICart_StoreInfo::is_multi_store_url_Set() const{
    return m_multi_store_url_isSet;
}

bool OAICart_StoreInfo::is_multi_store_url_Valid() const{
    return m_multi_store_url_isValid;
}

QString OAICart_StoreInfo::getName() const {
    return m_name;
}
void OAICart_StoreInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICart_StoreInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAICart_StoreInfo::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICart_StoreInfo::isPricesIncludeTax() const {
    return m_prices_include_tax;
}
void OAICart_StoreInfo::setPricesIncludeTax(const bool &prices_include_tax) {
    m_prices_include_tax = prices_include_tax;
    m_prices_include_tax_isSet = true;
}

bool OAICart_StoreInfo::is_prices_include_tax_Set() const{
    return m_prices_include_tax_isSet;
}

bool OAICart_StoreInfo::is_prices_include_tax_Valid() const{
    return m_prices_include_tax_isValid;
}

QString OAICart_StoreInfo::getRootCategoryId() const {
    return m_root_category_id;
}
void OAICart_StoreInfo::setRootCategoryId(const QString &root_category_id) {
    m_root_category_id = root_category_id;
    m_root_category_id_isSet = true;
}

bool OAICart_StoreInfo::is_root_category_id_Set() const{
    return m_root_category_id_isSet;
}

bool OAICart_StoreInfo::is_root_category_id_Valid() const{
    return m_root_category_id_isValid;
}

QList<OAICurrency> OAICart_StoreInfo::getStoreCurrencies() const {
    return m_store_currencies;
}
void OAICart_StoreInfo::setStoreCurrencies(const QList<OAICurrency> &store_currencies) {
    m_store_currencies = store_currencies;
    m_store_currencies_isSet = true;
}

bool OAICart_StoreInfo::is_store_currencies_Set() const{
    return m_store_currencies_isSet;
}

bool OAICart_StoreInfo::is_store_currencies_Valid() const{
    return m_store_currencies_isValid;
}

QString OAICart_StoreInfo::getStoreId() const {
    return m_store_id;
}
void OAICart_StoreInfo::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAICart_StoreInfo::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAICart_StoreInfo::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QList<OAILanguage> OAICart_StoreInfo::getStoreLanguages() const {
    return m_store_languages;
}
void OAICart_StoreInfo::setStoreLanguages(const QList<OAILanguage> &store_languages) {
    m_store_languages = store_languages;
    m_store_languages_isSet = true;
}

bool OAICart_StoreInfo::is_store_languages_Set() const{
    return m_store_languages_isSet;
}

bool OAICart_StoreInfo::is_store_languages_Valid() const{
    return m_store_languages_isValid;
}

OAIInfo OAICart_StoreInfo::getStoreOwnerInfo() const {
    return m_store_owner_info;
}
void OAICart_StoreInfo::setStoreOwnerInfo(const OAIInfo &store_owner_info) {
    m_store_owner_info = store_owner_info;
    m_store_owner_info_isSet = true;
}

bool OAICart_StoreInfo::is_store_owner_info_Set() const{
    return m_store_owner_info_isSet;
}

bool OAICart_StoreInfo::is_store_owner_info_Valid() const{
    return m_store_owner_info_isValid;
}

QString OAICart_StoreInfo::getTimezone() const {
    return m_timezone;
}
void OAICart_StoreInfo::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAICart_StoreInfo::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAICart_StoreInfo::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAICart_StoreInfo::getWeightUnit() const {
    return m_weight_unit;
}
void OAICart_StoreInfo::setWeightUnit(const QString &weight_unit) {
    m_weight_unit = weight_unit;
    m_weight_unit_isSet = true;
}

bool OAICart_StoreInfo::is_weight_unit_Set() const{
    return m_weight_unit_isSet;
}

bool OAICart_StoreInfo::is_weight_unit_Valid() const{
    return m_weight_unit_isValid;
}

bool OAICart_StoreInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_store_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prices_include_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_owner_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICart_StoreInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
