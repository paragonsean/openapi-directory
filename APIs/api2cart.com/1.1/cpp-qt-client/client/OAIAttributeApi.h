/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAttributeApi_H
#define OAI_OAIAttributeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributeAdd_200_response.h"
#include "OAIAttributeAssignGroup_200_response.h"
#include "OAIAttributeAttributesetList_200_response.h"
#include "OAIAttributeCount_200_response.h"
#include "OAIAttributeDelete_200_response.h"
#include "OAIAttributeInfo_200_response.h"
#include "OAIAttributeTypeList_200_response.h"
#include "OAIAttributeUnassignGroup_200_response.h"
#include "OAIAttributeUpdate_200_response.h"
#include "OAIModel_Response_Attribute_List.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAttributeApi : public QObject {
    Q_OBJECT

public:
    OAIAttributeApi(const int timeOut = 0);
    ~OAIAttributeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  code QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  visible bool [optional]
    * @param[in]  required bool [optional]
    * @param[in]  position qint32 [optional]
    * @param[in]  attribute_group_id QString [optional]
    * @param[in]  is_global QString [optional]
    * @param[in]  is_searchable bool [optional]
    * @param[in]  is_filterable QString [optional]
    * @param[in]  is_comparable bool [optional]
    * @param[in]  is_html_allowed_on_front bool [optional]
    * @param[in]  is_filterable_in_search bool [optional]
    * @param[in]  is_configurable bool [optional]
    * @param[in]  is_visible_in_advanced_search bool [optional]
    * @param[in]  is_used_for_promo_rules bool [optional]
    * @param[in]  used_in_product_listing bool [optional]
    * @param[in]  used_for_sort_by bool [optional]
    * @param[in]  apply_to QString [optional]
    */
    virtual void attributeAdd(const QString &type, const QString &name, const ::OpenAPI::OptionalParam<QString> &code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &visible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &position = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &attribute_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_global = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_searchable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &is_filterable = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_comparable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_html_allowed_on_front = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_filterable_in_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_configurable = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_visible_in_advanced_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_used_for_promo_rules = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &used_in_product_listing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &used_for_sort_by = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &apply_to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  attribute_set_id QString [optional]
    */
    virtual void attributeAssignGroup(const QString &id, const QString &group_id, const ::OpenAPI::OptionalParam<QString> &attribute_set_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  attribute_set_id QString [required]
    * @param[in]  group_id QString [optional]
    */
    virtual void attributeAssignSet(const QString &id, const QString &attribute_set_id, const ::OpenAPI::OptionalParam<QString> &group_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void attributeAttributesetList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  visible bool [optional]
    * @param[in]  required bool [optional]
    * @param[in]  system bool [optional]
    */
    virtual void attributeCount(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &visible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &system = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  store_id QString [optional]
    */
    virtual void attributeDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  attribute_set_id QString [optional]
    */
    virtual void attributeGroupList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_set_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    */
    virtual void attributeInfo(const QString &id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  type QString [optional]
    * @param[in]  attribute_ids QString [optional]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    * @param[in]  params QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  response_fields QString [optional]
    * @param[in]  visible bool [optional]
    * @param[in]  required bool [optional]
    * @param[in]  system bool [optional]
    */
    virtual void attributeList(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attribute_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &params = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &response_fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &visible = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &required = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &system = ::OpenAPI::OptionalParam<bool>());


    virtual void attributeTypeList();

    /**
    * @param[in]  id QString [required]
    * @param[in]  group_id QString [required]
    */
    virtual void attributeUnassignGroup(const QString &id, const QString &group_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  attribute_set_id QString [required]
    */
    virtual void attributeUnassignSet(const QString &id, const QString &attribute_set_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  lang_id QString [optional]
    */
    virtual void attributeUpdate(const QString &id, const QString &name, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lang_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attributeAddCallback(OAIHttpRequestWorker *worker);
    void attributeAssignGroupCallback(OAIHttpRequestWorker *worker);
    void attributeAssignSetCallback(OAIHttpRequestWorker *worker);
    void attributeAttributesetListCallback(OAIHttpRequestWorker *worker);
    void attributeCountCallback(OAIHttpRequestWorker *worker);
    void attributeDeleteCallback(OAIHttpRequestWorker *worker);
    void attributeGroupListCallback(OAIHttpRequestWorker *worker);
    void attributeInfoCallback(OAIHttpRequestWorker *worker);
    void attributeListCallback(OAIHttpRequestWorker *worker);
    void attributeTypeListCallback(OAIHttpRequestWorker *worker);
    void attributeUnassignGroupCallback(OAIHttpRequestWorker *worker);
    void attributeUnassignSetCallback(OAIHttpRequestWorker *worker);
    void attributeUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attributeAddSignal(OAIAttributeAdd_200_response summary);
    void attributeAssignGroupSignal(OAIAttributeAssignGroup_200_response summary);
    void attributeAssignSetSignal(OAIAttributeAssignGroup_200_response summary);
    void attributeAttributesetListSignal(OAIAttributeAttributesetList_200_response summary);
    void attributeCountSignal(OAIAttributeCount_200_response summary);
    void attributeDeleteSignal(OAIAttributeDelete_200_response summary);
    void attributeGroupListSignal(OAIAttributeAttributesetList_200_response summary);
    void attributeInfoSignal(OAIAttributeInfo_200_response summary);
    void attributeListSignal(OAIModel_Response_Attribute_List summary);
    void attributeTypeListSignal(OAIAttributeTypeList_200_response summary);
    void attributeUnassignGroupSignal(OAIAttributeUnassignGroup_200_response summary);
    void attributeUnassignSetSignal(OAIAttributeUnassignGroup_200_response summary);
    void attributeUpdateSignal(OAIAttributeUpdate_200_response summary);


    void attributeAddSignalFull(OAIHttpRequestWorker *worker, OAIAttributeAdd_200_response summary);
    void attributeAssignGroupSignalFull(OAIHttpRequestWorker *worker, OAIAttributeAssignGroup_200_response summary);
    void attributeAssignSetSignalFull(OAIHttpRequestWorker *worker, OAIAttributeAssignGroup_200_response summary);
    void attributeAttributesetListSignalFull(OAIHttpRequestWorker *worker, OAIAttributeAttributesetList_200_response summary);
    void attributeCountSignalFull(OAIHttpRequestWorker *worker, OAIAttributeCount_200_response summary);
    void attributeDeleteSignalFull(OAIHttpRequestWorker *worker, OAIAttributeDelete_200_response summary);
    void attributeGroupListSignalFull(OAIHttpRequestWorker *worker, OAIAttributeAttributesetList_200_response summary);
    void attributeInfoSignalFull(OAIHttpRequestWorker *worker, OAIAttributeInfo_200_response summary);
    void attributeListSignalFull(OAIHttpRequestWorker *worker, OAIModel_Response_Attribute_List summary);
    void attributeTypeListSignalFull(OAIHttpRequestWorker *worker, OAIAttributeTypeList_200_response summary);
    void attributeUnassignGroupSignalFull(OAIHttpRequestWorker *worker, OAIAttributeUnassignGroup_200_response summary);
    void attributeUnassignSetSignalFull(OAIHttpRequestWorker *worker, OAIAttributeUnassignGroup_200_response summary);
    void attributeUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAttributeUpdate_200_response summary);

    Q_DECL_DEPRECATED_X("Use attributeAddSignalError() instead")
    void attributeAddSignalE(OAIAttributeAdd_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAddSignalError(OAIAttributeAdd_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeAssignGroupSignalError() instead")
    void attributeAssignGroupSignalE(OAIAttributeAssignGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAssignGroupSignalError(OAIAttributeAssignGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeAssignSetSignalError() instead")
    void attributeAssignSetSignalE(OAIAttributeAssignGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAssignSetSignalError(OAIAttributeAssignGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeAttributesetListSignalError() instead")
    void attributeAttributesetListSignalE(OAIAttributeAttributesetList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAttributesetListSignalError(OAIAttributeAttributesetList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeCountSignalError() instead")
    void attributeCountSignalE(OAIAttributeCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeCountSignalError(OAIAttributeCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeDeleteSignalError() instead")
    void attributeDeleteSignalE(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeDeleteSignalError(OAIAttributeDelete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGroupListSignalError() instead")
    void attributeGroupListSignalE(OAIAttributeAttributesetList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGroupListSignalError(OAIAttributeAttributesetList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeInfoSignalError() instead")
    void attributeInfoSignalE(OAIAttributeInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeInfoSignalError(OAIAttributeInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeListSignalError() instead")
    void attributeListSignalE(OAIModel_Response_Attribute_List summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeListSignalError(OAIModel_Response_Attribute_List summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTypeListSignalError() instead")
    void attributeTypeListSignalE(OAIAttributeTypeList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTypeListSignalError(OAIAttributeTypeList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUnassignGroupSignalError() instead")
    void attributeUnassignGroupSignalE(OAIAttributeUnassignGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUnassignGroupSignalError(OAIAttributeUnassignGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUnassignSetSignalError() instead")
    void attributeUnassignSetSignalE(OAIAttributeUnassignGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUnassignSetSignalError(OAIAttributeUnassignGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUpdateSignalError() instead")
    void attributeUpdateSignalE(OAIAttributeUpdate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUpdateSignalError(OAIAttributeUpdate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attributeAddSignalErrorFull() instead")
    void attributeAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeAssignGroupSignalErrorFull() instead")
    void attributeAssignGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAssignGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeAssignSetSignalErrorFull() instead")
    void attributeAssignSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAssignSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeAttributesetListSignalErrorFull() instead")
    void attributeAttributesetListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeAttributesetListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeCountSignalErrorFull() instead")
    void attributeCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeDeleteSignalErrorFull() instead")
    void attributeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeGroupListSignalErrorFull() instead")
    void attributeGroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeGroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeInfoSignalErrorFull() instead")
    void attributeInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeListSignalErrorFull() instead")
    void attributeListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeTypeListSignalErrorFull() instead")
    void attributeTypeListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeTypeListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUnassignGroupSignalErrorFull() instead")
    void attributeUnassignGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUnassignGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUnassignSetSignalErrorFull() instead")
    void attributeUnassignSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUnassignSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attributeUpdateSignalErrorFull() instead")
    void attributeUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attributeUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
