/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import A2CDateTime from './A2CDateTime';
import CatalogPriceRuleAction from './CatalogPriceRuleAction';
import CouponCondition from './CouponCondition';

/**
 * The CatalogPriceRule model module.
 * @module model/CatalogPriceRule
 * @version 1.1
 */
class CatalogPriceRule {
    /**
     * Constructs a new <code>CatalogPriceRule</code>.
     * @alias module:model/CatalogPriceRule
     */
    constructor() { 
        
        CatalogPriceRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CatalogPriceRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CatalogPriceRule} obj Optional instance to populate.
     * @return {module:model/CatalogPriceRule} The populated <code>CatalogPriceRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CatalogPriceRule();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [CatalogPriceRuleAction]);
            }
            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('avail')) {
                obj['avail'] = ApiClient.convertToType(data['avail'], 'Boolean');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ApiClient.convertToType(data['conditions'], [CouponCondition]);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = A2CDateTime.constructFromObject(data['created_time']);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('date_end')) {
                obj['date_end'] = A2CDateTime.constructFromObject(data['date_end']);
            }
            if (data.hasOwnProperty('date_start')) {
                obj['date_start'] = A2CDateTime.constructFromObject(data['date_start']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('short_description')) {
                obj['short_description'] = ApiClient.convertToType(data['short_description'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('usage_count')) {
                obj['usage_count'] = ApiClient.convertToType(data['usage_count'], 'Number');
            }
            if (data.hasOwnProperty('uses_per_order_limit')) {
                obj['uses_per_order_limit'] = ApiClient.convertToType(data['uses_per_order_limit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CatalogPriceRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CatalogPriceRule</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                CatalogPriceRuleAction.validateJSON(item);
            };
        }
        if (data['conditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['conditions'])) {
                throw new Error("Expected the field `conditions` to be an array in the JSON data but got " + data['conditions']);
            }
            // validate the optional field `conditions` (array)
            for (const item of data['conditions']) {
                CouponCondition.validateJSON(item);
            };
        }
        // validate the optional field `created_time`
        if (data['created_time']) { // data not null
          A2CDateTime.validateJSON(data['created_time']);
        }
        // validate the optional field `date_end`
        if (data['date_end']) { // data not null
          A2CDateTime.validateJSON(data['date_end']);
        }
        // validate the optional field `date_start`
        if (data['date_start']) { // data not null
          A2CDateTime.validateJSON(data['date_start']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['short_description'] && !(typeof data['short_description'] === 'string' || data['short_description'] instanceof String)) {
            throw new Error("Expected the field `short_description` to be a primitive type in the JSON string but got " + data['short_description']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CatalogPriceRuleAction>} actions
 */
CatalogPriceRule.prototype['actions'] = undefined;

/**
 * @member {Object} additional_fields
 */
CatalogPriceRule.prototype['additional_fields'] = undefined;

/**
 * @member {Boolean} avail
 */
CatalogPriceRule.prototype['avail'] = undefined;

/**
 * @member {Array.<module:model/CouponCondition>} conditions
 */
CatalogPriceRule.prototype['conditions'] = undefined;

/**
 * @member {module:model/A2CDateTime} created_time
 */
CatalogPriceRule.prototype['created_time'] = undefined;

/**
 * @member {Object} custom_fields
 */
CatalogPriceRule.prototype['custom_fields'] = undefined;

/**
 * @member {module:model/A2CDateTime} date_end
 */
CatalogPriceRule.prototype['date_end'] = undefined;

/**
 * @member {module:model/A2CDateTime} date_start
 */
CatalogPriceRule.prototype['date_start'] = undefined;

/**
 * @member {String} description
 */
CatalogPriceRule.prototype['description'] = undefined;

/**
 * @member {String} gid
 */
CatalogPriceRule.prototype['gid'] = undefined;

/**
 * @member {String} id
 */
CatalogPriceRule.prototype['id'] = undefined;

/**
 * @member {String} name
 */
CatalogPriceRule.prototype['name'] = undefined;

/**
 * @member {String} short_description
 */
CatalogPriceRule.prototype['short_description'] = undefined;

/**
 * @member {String} type
 */
CatalogPriceRule.prototype['type'] = undefined;

/**
 * @member {Number} usage_count
 */
CatalogPriceRule.prototype['usage_count'] = undefined;

/**
 * @member {Number} uses_per_order_limit
 */
CatalogPriceRule.prototype['uses_per_order_limit'] = undefined;






export default CatalogPriceRule;

