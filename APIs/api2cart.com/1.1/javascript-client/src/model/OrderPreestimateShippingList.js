/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderPreestimateShippingListOrderItemInner from './OrderPreestimateShippingListOrderItemInner';

/**
 * The OrderPreestimateShippingList model module.
 * @module model/OrderPreestimateShippingList
 * @version 1.1
 */
class OrderPreestimateShippingList {
    /**
     * Constructs a new <code>OrderPreestimateShippingList</code>.
     * @alias module:model/OrderPreestimateShippingList
     * @param orderItem {Array.<module:model/OrderPreestimateShippingListOrderItemInner>} 
     * @param shippCountry {String} Specifies shipping country code
     */
    constructor(orderItem, shippCountry) { 
        
        OrderPreestimateShippingList.initialize(this, orderItem, shippCountry);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderItem, shippCountry) { 
        obj['order_item'] = orderItem;
        obj['params'] = 'force_all';
        obj['shipp_country'] = shippCountry;
    }

    /**
     * Constructs a <code>OrderPreestimateShippingList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderPreestimateShippingList} obj Optional instance to populate.
     * @return {module:model/OrderPreestimateShippingList} The populated <code>OrderPreestimateShippingList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderPreestimateShippingList();

            if (data.hasOwnProperty('customer_email')) {
                obj['customer_email'] = ApiClient.convertToType(data['customer_email'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('exclude')) {
                obj['exclude'] = ApiClient.convertToType(data['exclude'], 'String');
            }
            if (data.hasOwnProperty('order_item')) {
                obj['order_item'] = ApiClient.convertToType(data['order_item'], [OrderPreestimateShippingListOrderItemInner]);
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], 'String');
            }
            if (data.hasOwnProperty('shipp_address_1')) {
                obj['shipp_address_1'] = ApiClient.convertToType(data['shipp_address_1'], 'String');
            }
            if (data.hasOwnProperty('shipp_city')) {
                obj['shipp_city'] = ApiClient.convertToType(data['shipp_city'], 'String');
            }
            if (data.hasOwnProperty('shipp_country')) {
                obj['shipp_country'] = ApiClient.convertToType(data['shipp_country'], 'String');
            }
            if (data.hasOwnProperty('shipp_postcode')) {
                obj['shipp_postcode'] = ApiClient.convertToType(data['shipp_postcode'], 'String');
            }
            if (data.hasOwnProperty('shipp_state')) {
                obj['shipp_state'] = ApiClient.convertToType(data['shipp_state'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('warehouse_id')) {
                obj['warehouse_id'] = ApiClient.convertToType(data['warehouse_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderPreestimateShippingList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderPreestimateShippingList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderPreestimateShippingList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customer_email'] && !(typeof data['customer_email'] === 'string' || data['customer_email'] instanceof String)) {
            throw new Error("Expected the field `customer_email` to be a primitive type in the JSON string but got " + data['customer_email']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['exclude'] && !(typeof data['exclude'] === 'string' || data['exclude'] instanceof String)) {
            throw new Error("Expected the field `exclude` to be a primitive type in the JSON string but got " + data['exclude']);
        }
        if (data['order_item']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_item'])) {
                throw new Error("Expected the field `order_item` to be an array in the JSON data but got " + data['order_item']);
            }
            // validate the optional field `order_item` (array)
            for (const item of data['order_item']) {
                OrderPreestimateShippingListOrderItemInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['params'] && !(typeof data['params'] === 'string' || data['params'] instanceof String)) {
            throw new Error("Expected the field `params` to be a primitive type in the JSON string but got " + data['params']);
        }
        // ensure the json data is a string
        if (data['shipp_address_1'] && !(typeof data['shipp_address_1'] === 'string' || data['shipp_address_1'] instanceof String)) {
            throw new Error("Expected the field `shipp_address_1` to be a primitive type in the JSON string but got " + data['shipp_address_1']);
        }
        // ensure the json data is a string
        if (data['shipp_city'] && !(typeof data['shipp_city'] === 'string' || data['shipp_city'] instanceof String)) {
            throw new Error("Expected the field `shipp_city` to be a primitive type in the JSON string but got " + data['shipp_city']);
        }
        // ensure the json data is a string
        if (data['shipp_country'] && !(typeof data['shipp_country'] === 'string' || data['shipp_country'] instanceof String)) {
            throw new Error("Expected the field `shipp_country` to be a primitive type in the JSON string but got " + data['shipp_country']);
        }
        // ensure the json data is a string
        if (data['shipp_postcode'] && !(typeof data['shipp_postcode'] === 'string' || data['shipp_postcode'] instanceof String)) {
            throw new Error("Expected the field `shipp_postcode` to be a primitive type in the JSON string but got " + data['shipp_postcode']);
        }
        // ensure the json data is a string
        if (data['shipp_state'] && !(typeof data['shipp_state'] === 'string' || data['shipp_state'] instanceof String)) {
            throw new Error("Expected the field `shipp_state` to be a primitive type in the JSON string but got " + data['shipp_state']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // ensure the json data is a string
        if (data['warehouse_id'] && !(typeof data['warehouse_id'] === 'string' || data['warehouse_id'] instanceof String)) {
            throw new Error("Expected the field `warehouse_id` to be a primitive type in the JSON string but got " + data['warehouse_id']);
        }

        return true;
    }


}

OrderPreestimateShippingList.RequiredProperties = ["order_item", "shipp_country"];

/**
 * Retrieves orders specified by customer email
 * @member {String} customer_email
 */
OrderPreestimateShippingList.prototype['customer_email'] = undefined;

/**
 * Retrieves orders specified by customer id
 * @member {String} customer_id
 */
OrderPreestimateShippingList.prototype['customer_id'] = undefined;

/**
 * Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
 * @member {String} exclude
 */
OrderPreestimateShippingList.prototype['exclude'] = undefined;

/**
 * @member {Array.<module:model/OrderPreestimateShippingListOrderItemInner>} order_item
 */
OrderPreestimateShippingList.prototype['order_item'] = undefined;

/**
 * Set this parameter in order to choose which entity fields you want to retrieve
 * @member {String} params
 * @default 'force_all'
 */
OrderPreestimateShippingList.prototype['params'] = 'force_all';

/**
 * Specifies first shipping address
 * @member {String} shipp_address_1
 */
OrderPreestimateShippingList.prototype['shipp_address_1'] = undefined;

/**
 * Specifies shipping city
 * @member {String} shipp_city
 */
OrderPreestimateShippingList.prototype['shipp_city'] = undefined;

/**
 * Specifies shipping country code
 * @member {String} shipp_country
 */
OrderPreestimateShippingList.prototype['shipp_country'] = undefined;

/**
 * Specifies shipping postcode
 * @member {String} shipp_postcode
 */
OrderPreestimateShippingList.prototype['shipp_postcode'] = undefined;

/**
 * Specifies shipping state code
 * @member {String} shipp_state
 */
OrderPreestimateShippingList.prototype['shipp_state'] = undefined;

/**
 * Store Id
 * @member {String} store_id
 */
OrderPreestimateShippingList.prototype['store_id'] = undefined;

/**
 * This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
 * @member {String} warehouse_id
 */
OrderPreestimateShippingList.prototype['warehouse_id'] = undefined;






export default OrderPreestimateShippingList;

