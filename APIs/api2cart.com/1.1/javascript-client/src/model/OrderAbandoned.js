/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import A2CDateTime from './A2CDateTime';
import BaseCustomer from './BaseCustomer';
import Currency from './Currency';
import OrderItem from './OrderItem';
import OrderTotals from './OrderTotals';

/**
 * The OrderAbandoned model module.
 * @module model/OrderAbandoned
 * @version 1.1
 */
class OrderAbandoned {
    /**
     * Constructs a new <code>OrderAbandoned</code>.
     * @alias module:model/OrderAbandoned
     */
    constructor() { 
        
        OrderAbandoned.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderAbandoned</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderAbandoned} obj Optional instance to populate.
     * @return {module:model/OrderAbandoned} The populated <code>OrderAbandoned</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderAbandoned();

            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('basket_id')) {
                obj['basket_id'] = ApiClient.convertToType(data['basket_id'], 'String');
            }
            if (data.hasOwnProperty('basket_url')) {
                obj['basket_url'] = ApiClient.convertToType(data['basket_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = A2CDateTime.constructFromObject(data['created_at']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = BaseCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modified_at')) {
                obj['modified_at'] = A2CDateTime.constructFromObject(data['modified_at']);
            }
            if (data.hasOwnProperty('order_products')) {
                obj['order_products'] = ApiClient.convertToType(data['order_products'], [OrderItem]);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = OrderTotals.constructFromObject(data['totals']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderAbandoned</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderAbandoned</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['basket_id'] && !(typeof data['basket_id'] === 'string' || data['basket_id'] instanceof String)) {
            throw new Error("Expected the field `basket_id` to be a primitive type in the JSON string but got " + data['basket_id']);
        }
        // ensure the json data is a string
        if (data['basket_url'] && !(typeof data['basket_url'] === 'string' || data['basket_url'] instanceof String)) {
            throw new Error("Expected the field `basket_url` to be a primitive type in the JSON string but got " + data['basket_url']);
        }
        // validate the optional field `created_at`
        if (data['created_at']) { // data not null
          A2CDateTime.validateJSON(data['created_at']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          BaseCustomer.validateJSON(data['customer']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `modified_at`
        if (data['modified_at']) { // data not null
          A2CDateTime.validateJSON(data['modified_at']);
        }
        if (data['order_products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_products'])) {
                throw new Error("Expected the field `order_products` to be an array in the JSON data but got " + data['order_products']);
            }
            // validate the optional field `order_products` (array)
            for (const item of data['order_products']) {
                OrderItem.validateJSON(item);
            };
        }
        // validate the optional field `totals`
        if (data['totals']) { // data not null
          OrderTotals.validateJSON(data['totals']);
        }

        return true;
    }


}



/**
 * @member {Object} additional_fields
 */
OrderAbandoned.prototype['additional_fields'] = undefined;

/**
 * @member {String} basket_id
 */
OrderAbandoned.prototype['basket_id'] = undefined;

/**
 * @member {String} basket_url
 */
OrderAbandoned.prototype['basket_url'] = undefined;

/**
 * @member {module:model/A2CDateTime} created_at
 */
OrderAbandoned.prototype['created_at'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
OrderAbandoned.prototype['currency'] = undefined;

/**
 * @member {Object} custom_fields
 */
OrderAbandoned.prototype['custom_fields'] = undefined;

/**
 * @member {module:model/BaseCustomer} customer
 */
OrderAbandoned.prototype['customer'] = undefined;

/**
 * @member {String} id
 */
OrderAbandoned.prototype['id'] = undefined;

/**
 * @member {module:model/A2CDateTime} modified_at
 */
OrderAbandoned.prototype['modified_at'] = undefined;

/**
 * @member {Array.<module:model/OrderItem>} order_products
 */
OrderAbandoned.prototype['order_products'] = undefined;

/**
 * @member {module:model/OrderTotals} totals
 */
OrderAbandoned.prototype['totals'] = undefined;






export default OrderAbandoned;

