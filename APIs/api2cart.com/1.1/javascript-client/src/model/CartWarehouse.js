/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerAddress from './CustomerAddress';

/**
 * The CartWarehouse model module.
 * @module model/CartWarehouse
 * @version 1.1
 */
class CartWarehouse {
    /**
     * Constructs a new <code>CartWarehouse</code>.
     * @alias module:model/CartWarehouse
     */
    constructor() { 
        
        CartWarehouse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CartWarehouse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartWarehouse} obj Optional instance to populate.
     * @return {module:model/CartWarehouse} The populated <code>CartWarehouse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartWarehouse();

            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = CustomerAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('avail')) {
                obj['avail'] = ApiClient.convertToType(data['avail'], 'Boolean');
            }
            if (data.hasOwnProperty('carriers_ids')) {
                obj['carriers_ids'] = ApiClient.convertToType(data['carriers_ids'], ['String']);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('stores_ids')) {
                obj['stores_ids'] = ApiClient.convertToType(data['stores_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CartWarehouse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CartWarehouse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          CustomerAddress.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['carriers_ids'])) {
            throw new Error("Expected the field `carriers_ids` to be an array in the JSON data but got " + data['carriers_ids']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stores_ids'])) {
            throw new Error("Expected the field `stores_ids` to be an array in the JSON data but got " + data['stores_ids']);
        }

        return true;
    }


}



/**
 * @member {Object} additional_fields
 */
CartWarehouse.prototype['additional_fields'] = undefined;

/**
 * @member {module:model/CustomerAddress} address
 */
CartWarehouse.prototype['address'] = undefined;

/**
 * @member {Boolean} avail
 */
CartWarehouse.prototype['avail'] = undefined;

/**
 * @member {Array.<String>} carriers_ids
 */
CartWarehouse.prototype['carriers_ids'] = undefined;

/**
 * @member {Object} custom_fields
 */
CartWarehouse.prototype['custom_fields'] = undefined;

/**
 * @member {String} description
 */
CartWarehouse.prototype['description'] = undefined;

/**
 * @member {String} id
 */
CartWarehouse.prototype['id'] = undefined;

/**
 * @member {String} name
 */
CartWarehouse.prototype['name'] = undefined;

/**
 * @member {Array.<String>} stores_ids
 */
CartWarehouse.prototype['stores_ids'] = undefined;






export default CartWarehouse;

