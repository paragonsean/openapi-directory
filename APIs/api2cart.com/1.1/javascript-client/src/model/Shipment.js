/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import A2CDateTime from './A2CDateTime';
import ShipmentItem from './ShipmentItem';
import ShipmentTrackingNumber from './ShipmentTrackingNumber';

/**
 * The Shipment model module.
 * @module model/Shipment
 * @version 1.1
 */
class Shipment {
    /**
     * Constructs a new <code>Shipment</code>.
     * @alias module:model/Shipment
     */
    constructor() { 
        
        Shipment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Shipment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Shipment} obj Optional instance to populate.
     * @return {module:model/Shipment} The populated <code>Shipment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Shipment();

            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = A2CDateTime.constructFromObject(data['created_at']);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_shipped')) {
                obj['is_shipped'] = ApiClient.convertToType(data['is_shipped'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ShipmentItem]);
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = A2CDateTime.constructFromObject(data['modified_time']);
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('shipment_provider')) {
                obj['shipment_provider'] = ApiClient.convertToType(data['shipment_provider'], 'String');
            }
            if (data.hasOwnProperty('tracking_numbers')) {
                obj['tracking_numbers'] = ApiClient.convertToType(data['tracking_numbers'], [ShipmentTrackingNumber]);
            }
            if (data.hasOwnProperty('warehouse_id')) {
                obj['warehouse_id'] = ApiClient.convertToType(data['warehouse_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Shipment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Shipment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `created_at`
        if (data['created_at']) { // data not null
          A2CDateTime.validateJSON(data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                ShipmentItem.validateJSON(item);
            };
        }
        // validate the optional field `modified_time`
        if (data['modified_time']) { // data not null
          A2CDateTime.validateJSON(data['modified_time']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['shipment_provider'] && !(typeof data['shipment_provider'] === 'string' || data['shipment_provider'] instanceof String)) {
            throw new Error("Expected the field `shipment_provider` to be a primitive type in the JSON string but got " + data['shipment_provider']);
        }
        if (data['tracking_numbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracking_numbers'])) {
                throw new Error("Expected the field `tracking_numbers` to be an array in the JSON data but got " + data['tracking_numbers']);
            }
            // validate the optional field `tracking_numbers` (array)
            for (const item of data['tracking_numbers']) {
                ShipmentTrackingNumber.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['warehouse_id'] && !(typeof data['warehouse_id'] === 'string' || data['warehouse_id'] instanceof String)) {
            throw new Error("Expected the field `warehouse_id` to be a primitive type in the JSON string but got " + data['warehouse_id']);
        }

        return true;
    }


}



/**
 * @member {Object} additional_fields
 */
Shipment.prototype['additional_fields'] = undefined;

/**
 * @member {module:model/A2CDateTime} created_at
 */
Shipment.prototype['created_at'] = undefined;

/**
 * @member {Object} custom_fields
 */
Shipment.prototype['custom_fields'] = undefined;

/**
 * @member {String} id
 */
Shipment.prototype['id'] = undefined;

/**
 * @member {Boolean} is_shipped
 */
Shipment.prototype['is_shipped'] = undefined;

/**
 * @member {Array.<module:model/ShipmentItem>} items
 */
Shipment.prototype['items'] = undefined;

/**
 * @member {module:model/A2CDateTime} modified_time
 */
Shipment.prototype['modified_time'] = undefined;

/**
 * @member {String} order_id
 */
Shipment.prototype['order_id'] = undefined;

/**
 * @member {String} shipment_provider
 */
Shipment.prototype['shipment_provider'] = undefined;

/**
 * @member {Array.<module:model/ShipmentTrackingNumber>} tracking_numbers
 */
Shipment.prototype['tracking_numbers'] = undefined;

/**
 * @member {String} warehouse_id
 */
Shipment.prototype['warehouse_id'] = undefined;






export default Shipment;

