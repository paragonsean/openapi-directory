/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerUpdateAddressInner from './CustomerUpdateAddressInner';

/**
 * The CustomerUpdate model module.
 * @module model/CustomerUpdate
 * @version 1.1
 */
class CustomerUpdate {
    /**
     * Constructs a new <code>CustomerUpdate</code>.
     * @alias module:model/CustomerUpdate
     */
    constructor() { 
        
        CustomerUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerUpdate} obj Optional instance to populate.
     * @return {module:model/CustomerUpdate} The populated <code>CustomerUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerUpdate();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], [CustomerUpdateAddressInner]);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('group_id')) {
                obj['group_id'] = ApiClient.convertToType(data['group_id'], 'String');
            }
            if (data.hasOwnProperty('group_ids')) {
                obj['group_ids'] = ApiClient.convertToType(data['group_ids'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('news_letter_subscription')) {
                obj['news_letter_subscription'] = ApiClient.convertToType(data['news_letter_subscription'], 'Boolean');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerUpdate</code>.
     */
    static validateJSON(data) {
        if (data['address']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['address'])) {
                throw new Error("Expected the field `address` to be an array in the JSON data but got " + data['address']);
            }
            // validate the optional field `address` (array)
            for (const item of data['address']) {
                CustomerUpdateAddressInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['group_id'] && !(typeof data['group_id'] === 'string' || data['group_id'] instanceof String)) {
            throw new Error("Expected the field `group_id` to be a primitive type in the JSON string but got " + data['group_id']);
        }
        // ensure the json data is a string
        if (data['group_ids'] && !(typeof data['group_ids'] === 'string' || data['group_ids'] instanceof String)) {
            throw new Error("Expected the field `group_ids` to be a primitive type in the JSON string but got " + data['group_ids']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['tags'] && !(typeof data['tags'] === 'string' || data['tags'] instanceof String)) {
            throw new Error("Expected the field `tags` to be a primitive type in the JSON string but got " + data['tags']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CustomerUpdateAddressInner>} address
 */
CustomerUpdate.prototype['address'] = undefined;

/**
 * Defines customer's email
 * @member {String} email
 */
CustomerUpdate.prototype['email'] = undefined;

/**
 * Defines customer's first name
 * @member {String} first_name
 */
CustomerUpdate.prototype['first_name'] = undefined;

/**
 * Customer group_id
 * @member {String} group_id
 */
CustomerUpdate.prototype['group_id'] = undefined;

/**
 * Groups that will be assigned to a customer
 * @member {String} group_ids
 */
CustomerUpdate.prototype['group_ids'] = undefined;

/**
 * Entity id
 * @member {String} id
 */
CustomerUpdate.prototype['id'] = undefined;

/**
 * Defines customer's last name
 * @member {String} last_name
 */
CustomerUpdate.prototype['last_name'] = undefined;

/**
 * Defines whether the newsletter subscription is available for the user
 * @member {Boolean} news_letter_subscription
 */
CustomerUpdate.prototype['news_letter_subscription'] = undefined;

/**
 * Defines customer's phone number
 * @member {String} phone
 */
CustomerUpdate.prototype['phone'] = undefined;

/**
 * Customer tags
 * @member {String} tags
 */
CustomerUpdate.prototype['tags'] = undefined;






export default CustomerUpdate;

