/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import A2CDateTime from './A2CDateTime';
import BaseCustomer from './BaseCustomer';
import Currency from './Currency';
import CustomerAddress from './CustomerAddress';
import OrderItem from './OrderItem';
import OrderPaymentMethod from './OrderPaymentMethod';
import OrderRefund from './OrderRefund';
import OrderShippingMethod from './OrderShippingMethod';
import OrderStatus from './OrderStatus';
import OrderTotal from './OrderTotal';
import OrderTotals from './OrderTotals';
import OrderTotalsNewDiscount from './OrderTotalsNewDiscount';

/**
 * The Order model module.
 * @module model/Order
 * @version 1.1
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * @alias module:model/Order
     */
    constructor() { 
        
        Order.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('basket_id')) {
                obj['basket_id'] = ApiClient.convertToType(data['basket_id'], 'String');
            }
            if (data.hasOwnProperty('billing_address')) {
                obj['billing_address'] = CustomerAddress.constructFromObject(data['billing_address']);
            }
            if (data.hasOwnProperty('bundles')) {
                obj['bundles'] = ApiClient.convertToType(data['bundles'], [OrderItem]);
            }
            if (data.hasOwnProperty('channel_id')) {
                obj['channel_id'] = ApiClient.convertToType(data['channel_id'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('create_at')) {
                obj['create_at'] = A2CDateTime.constructFromObject(data['create_at']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = BaseCustomer.constructFromObject(data['customer']);
            }
            if (data.hasOwnProperty('discounts')) {
                obj['discounts'] = ApiClient.convertToType(data['discounts'], [OrderTotalsNewDiscount]);
            }
            if (data.hasOwnProperty('finished_time')) {
                obj['finished_time'] = A2CDateTime.constructFromObject(data['finished_time']);
            }
            if (data.hasOwnProperty('gift_message')) {
                obj['gift_message'] = ApiClient.convertToType(data['gift_message'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modified_at')) {
                obj['modified_at'] = A2CDateTime.constructFromObject(data['modified_at']);
            }
            if (data.hasOwnProperty('order_details_url')) {
                obj['order_details_url'] = ApiClient.convertToType(data['order_details_url'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('order_products')) {
                obj['order_products'] = ApiClient.convertToType(data['order_products'], [OrderItem]);
            }
            if (data.hasOwnProperty('payment_method')) {
                obj['payment_method'] = OrderPaymentMethod.constructFromObject(data['payment_method']);
            }
            if (data.hasOwnProperty('refunds')) {
                obj['refunds'] = ApiClient.convertToType(data['refunds'], [OrderRefund]);
            }
            if (data.hasOwnProperty('shipping_address')) {
                obj['shipping_address'] = CustomerAddress.constructFromObject(data['shipping_address']);
            }
            if (data.hasOwnProperty('shipping_method')) {
                obj['shipping_method'] = OrderShippingMethod.constructFromObject(data['shipping_method']);
            }
            if (data.hasOwnProperty('shipping_methods')) {
                obj['shipping_methods'] = ApiClient.convertToType(data['shipping_methods'], [OrderShippingMethod]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OrderStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = OrderTotal.constructFromObject(data['total']);
            }
            if (data.hasOwnProperty('totals')) {
                obj['totals'] = OrderTotals.constructFromObject(data['totals']);
            }
            if (data.hasOwnProperty('warehouses_ids')) {
                obj['warehouses_ids'] = ApiClient.convertToType(data['warehouses_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Order</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Order</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['basket_id'] && !(typeof data['basket_id'] === 'string' || data['basket_id'] instanceof String)) {
            throw new Error("Expected the field `basket_id` to be a primitive type in the JSON string but got " + data['basket_id']);
        }
        // validate the optional field `billing_address`
        if (data['billing_address']) { // data not null
          CustomerAddress.validateJSON(data['billing_address']);
        }
        if (data['bundles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bundles'])) {
                throw new Error("Expected the field `bundles` to be an array in the JSON data but got " + data['bundles']);
            }
            // validate the optional field `bundles` (array)
            for (const item of data['bundles']) {
                OrderItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['channel_id'] && !(typeof data['channel_id'] === 'string' || data['channel_id'] instanceof String)) {
            throw new Error("Expected the field `channel_id` to be a primitive type in the JSON string but got " + data['channel_id']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // validate the optional field `create_at`
        if (data['create_at']) { // data not null
          A2CDateTime.validateJSON(data['create_at']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // validate the optional field `customer`
        if (data['customer']) { // data not null
          BaseCustomer.validateJSON(data['customer']);
        }
        if (data['discounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discounts'])) {
                throw new Error("Expected the field `discounts` to be an array in the JSON data but got " + data['discounts']);
            }
            // validate the optional field `discounts` (array)
            for (const item of data['discounts']) {
                OrderTotalsNewDiscount.validateJSON(item);
            };
        }
        // validate the optional field `finished_time`
        if (data['finished_time']) { // data not null
          A2CDateTime.validateJSON(data['finished_time']);
        }
        // ensure the json data is a string
        if (data['gift_message'] && !(typeof data['gift_message'] === 'string' || data['gift_message'] instanceof String)) {
            throw new Error("Expected the field `gift_message` to be a primitive type in the JSON string but got " + data['gift_message']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `modified_at`
        if (data['modified_at']) { // data not null
          A2CDateTime.validateJSON(data['modified_at']);
        }
        // ensure the json data is a string
        if (data['order_details_url'] && !(typeof data['order_details_url'] === 'string' || data['order_details_url'] instanceof String)) {
            throw new Error("Expected the field `order_details_url` to be a primitive type in the JSON string but got " + data['order_details_url']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        if (data['order_products']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['order_products'])) {
                throw new Error("Expected the field `order_products` to be an array in the JSON data but got " + data['order_products']);
            }
            // validate the optional field `order_products` (array)
            for (const item of data['order_products']) {
                OrderItem.validateJSON(item);
            };
        }
        // validate the optional field `payment_method`
        if (data['payment_method']) { // data not null
          OrderPaymentMethod.validateJSON(data['payment_method']);
        }
        if (data['refunds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['refunds'])) {
                throw new Error("Expected the field `refunds` to be an array in the JSON data but got " + data['refunds']);
            }
            // validate the optional field `refunds` (array)
            for (const item of data['refunds']) {
                OrderRefund.validateJSON(item);
            };
        }
        // validate the optional field `shipping_address`
        if (data['shipping_address']) { // data not null
          CustomerAddress.validateJSON(data['shipping_address']);
        }
        // validate the optional field `shipping_method`
        if (data['shipping_method']) { // data not null
          OrderShippingMethod.validateJSON(data['shipping_method']);
        }
        if (data['shipping_methods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipping_methods'])) {
                throw new Error("Expected the field `shipping_methods` to be an array in the JSON data but got " + data['shipping_methods']);
            }
            // validate the optional field `shipping_methods` (array)
            for (const item of data['shipping_methods']) {
                OrderShippingMethod.validateJSON(item);
            };
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          OrderStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // validate the optional field `total`
        if (data['total']) { // data not null
          OrderTotal.validateJSON(data['total']);
        }
        // validate the optional field `totals`
        if (data['totals']) { // data not null
          OrderTotals.validateJSON(data['totals']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warehouses_ids'])) {
            throw new Error("Expected the field `warehouses_ids` to be an array in the JSON data but got " + data['warehouses_ids']);
        }

        return true;
    }


}



/**
 * @member {Object} additional_fields
 */
Order.prototype['additional_fields'] = undefined;

/**
 * @member {String} basket_id
 */
Order.prototype['basket_id'] = undefined;

/**
 * @member {module:model/CustomerAddress} billing_address
 */
Order.prototype['billing_address'] = undefined;

/**
 * @member {Array.<module:model/OrderItem>} bundles
 */
Order.prototype['bundles'] = undefined;

/**
 * @member {String} channel_id
 */
Order.prototype['channel_id'] = undefined;

/**
 * @member {String} comment
 */
Order.prototype['comment'] = undefined;

/**
 * @member {module:model/A2CDateTime} create_at
 */
Order.prototype['create_at'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Order.prototype['currency'] = undefined;

/**
 * @member {Object} custom_fields
 */
Order.prototype['custom_fields'] = undefined;

/**
 * @member {module:model/BaseCustomer} customer
 */
Order.prototype['customer'] = undefined;

/**
 * @member {Array.<module:model/OrderTotalsNewDiscount>} discounts
 */
Order.prototype['discounts'] = undefined;

/**
 * @member {module:model/A2CDateTime} finished_time
 */
Order.prototype['finished_time'] = undefined;

/**
 * @member {String} gift_message
 */
Order.prototype['gift_message'] = undefined;

/**
 * @member {String} id
 */
Order.prototype['id'] = undefined;

/**
 * @member {module:model/A2CDateTime} modified_at
 */
Order.prototype['modified_at'] = undefined;

/**
 * @member {String} order_details_url
 */
Order.prototype['order_details_url'] = undefined;

/**
 * @member {String} order_id
 */
Order.prototype['order_id'] = undefined;

/**
 * @member {Array.<module:model/OrderItem>} order_products
 */
Order.prototype['order_products'] = undefined;

/**
 * @member {module:model/OrderPaymentMethod} payment_method
 */
Order.prototype['payment_method'] = undefined;

/**
 * @member {Array.<module:model/OrderRefund>} refunds
 */
Order.prototype['refunds'] = undefined;

/**
 * @member {module:model/CustomerAddress} shipping_address
 */
Order.prototype['shipping_address'] = undefined;

/**
 * @member {module:model/OrderShippingMethod} shipping_method
 */
Order.prototype['shipping_method'] = undefined;

/**
 * @member {Array.<module:model/OrderShippingMethod>} shipping_methods
 */
Order.prototype['shipping_methods'] = undefined;

/**
 * @member {module:model/OrderStatus} status
 */
Order.prototype['status'] = undefined;

/**
 * @member {String} store_id
 */
Order.prototype['store_id'] = undefined;

/**
 * @member {module:model/OrderTotal} total
 */
Order.prototype['total'] = undefined;

/**
 * @member {module:model/OrderTotals} totals
 */
Order.prototype['totals'] = undefined;

/**
 * @member {Array.<String>} warehouses_ids
 */
Order.prototype['warehouses_ids'] = undefined;






export default Order;

