/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CartCouponAdd model module.
 * @module model/CartCouponAdd
 * @version 1.1
 */
class CartCouponAdd {
    /**
     * Constructs a new <code>CartCouponAdd</code>.
     * @alias module:model/CartCouponAdd
     * @param actionAmount {Number} Defines the discount amount value.
     * @param actionApplyTo {module:model/CartCouponAdd.ActionApplyToEnum} Defines where discount should be applied
     * @param actionScope {module:model/CartCouponAdd.ActionScopeEnum} Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
     * @param actionType {module:model/CartCouponAdd.ActionTypeEnum} Coupon discount type
     * @param code {String} Coupon code
     */
    constructor(actionAmount, actionApplyTo, actionScope, actionType, code) { 
        
        CartCouponAdd.initialize(this, actionAmount, actionApplyTo, actionScope, actionType, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionAmount, actionApplyTo, actionScope, actionType, code) { 
        obj['action_amount'] = actionAmount;
        obj['action_apply_to'] = actionApplyTo;
        obj['action_scope'] = actionScope;
        obj['action_type'] = actionType;
        obj['code'] = code;
        obj['date_start'] = 'now';
    }

    /**
     * Constructs a <code>CartCouponAdd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CartCouponAdd} obj Optional instance to populate.
     * @return {module:model/CartCouponAdd} The populated <code>CartCouponAdd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CartCouponAdd();

            if (data.hasOwnProperty('action_amount')) {
                obj['action_amount'] = ApiClient.convertToType(data['action_amount'], 'Number');
            }
            if (data.hasOwnProperty('action_apply_to')) {
                obj['action_apply_to'] = ApiClient.convertToType(data['action_apply_to'], 'String');
            }
            if (data.hasOwnProperty('action_condition_entity')) {
                obj['action_condition_entity'] = ApiClient.convertToType(data['action_condition_entity'], 'String');
            }
            if (data.hasOwnProperty('action_condition_key')) {
                obj['action_condition_key'] = ApiClient.convertToType(data['action_condition_key'], 'String');
            }
            if (data.hasOwnProperty('action_condition_operator')) {
                obj['action_condition_operator'] = ApiClient.convertToType(data['action_condition_operator'], 'String');
            }
            if (data.hasOwnProperty('action_condition_value')) {
                obj['action_condition_value'] = ApiClient.convertToType(data['action_condition_value'], 'String');
            }
            if (data.hasOwnProperty('action_scope')) {
                obj['action_scope'] = ApiClient.convertToType(data['action_scope'], 'String');
            }
            if (data.hasOwnProperty('action_type')) {
                obj['action_type'] = ApiClient.convertToType(data['action_type'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('codes')) {
                obj['codes'] = ApiClient.convertToType(data['codes'], ['String']);
            }
            if (data.hasOwnProperty('date_end')) {
                obj['date_end'] = ApiClient.convertToType(data['date_end'], 'String');
            }
            if (data.hasOwnProperty('date_start')) {
                obj['date_start'] = ApiClient.convertToType(data['date_start'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('usage_limit')) {
                obj['usage_limit'] = ApiClient.convertToType(data['usage_limit'], 'Number');
            }
            if (data.hasOwnProperty('usage_limit_per_customer')) {
                obj['usage_limit_per_customer'] = ApiClient.convertToType(data['usage_limit_per_customer'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CartCouponAdd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CartCouponAdd</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CartCouponAdd.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action_apply_to'] && !(typeof data['action_apply_to'] === 'string' || data['action_apply_to'] instanceof String)) {
            throw new Error("Expected the field `action_apply_to` to be a primitive type in the JSON string but got " + data['action_apply_to']);
        }
        // ensure the json data is a string
        if (data['action_condition_entity'] && !(typeof data['action_condition_entity'] === 'string' || data['action_condition_entity'] instanceof String)) {
            throw new Error("Expected the field `action_condition_entity` to be a primitive type in the JSON string but got " + data['action_condition_entity']);
        }
        // ensure the json data is a string
        if (data['action_condition_key'] && !(typeof data['action_condition_key'] === 'string' || data['action_condition_key'] instanceof String)) {
            throw new Error("Expected the field `action_condition_key` to be a primitive type in the JSON string but got " + data['action_condition_key']);
        }
        // ensure the json data is a string
        if (data['action_condition_operator'] && !(typeof data['action_condition_operator'] === 'string' || data['action_condition_operator'] instanceof String)) {
            throw new Error("Expected the field `action_condition_operator` to be a primitive type in the JSON string but got " + data['action_condition_operator']);
        }
        // ensure the json data is a string
        if (data['action_condition_value'] && !(typeof data['action_condition_value'] === 'string' || data['action_condition_value'] instanceof String)) {
            throw new Error("Expected the field `action_condition_value` to be a primitive type in the JSON string but got " + data['action_condition_value']);
        }
        // ensure the json data is a string
        if (data['action_scope'] && !(typeof data['action_scope'] === 'string' || data['action_scope'] instanceof String)) {
            throw new Error("Expected the field `action_scope` to be a primitive type in the JSON string but got " + data['action_scope']);
        }
        // ensure the json data is a string
        if (data['action_type'] && !(typeof data['action_type'] === 'string' || data['action_type'] instanceof String)) {
            throw new Error("Expected the field `action_type` to be a primitive type in the JSON string but got " + data['action_type']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['codes'])) {
            throw new Error("Expected the field `codes` to be an array in the JSON data but got " + data['codes']);
        }
        // ensure the json data is a string
        if (data['date_end'] && !(typeof data['date_end'] === 'string' || data['date_end'] instanceof String)) {
            throw new Error("Expected the field `date_end` to be a primitive type in the JSON string but got " + data['date_end']);
        }
        // ensure the json data is a string
        if (data['date_start'] && !(typeof data['date_start'] === 'string' || data['date_start'] instanceof String)) {
            throw new Error("Expected the field `date_start` to be a primitive type in the JSON string but got " + data['date_start']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }

        return true;
    }


}

CartCouponAdd.RequiredProperties = ["action_amount", "action_apply_to", "action_scope", "action_type", "code"];

/**
 * Defines the discount amount value.
 * @member {Number} action_amount
 */
CartCouponAdd.prototype['action_amount'] = undefined;

/**
 * Defines where discount should be applied
 * @member {module:model/CartCouponAdd.ActionApplyToEnum} action_apply_to
 */
CartCouponAdd.prototype['action_apply_to'] = undefined;

/**
 * Defines entity for action condition.
 * @member {String} action_condition_entity
 */
CartCouponAdd.prototype['action_condition_entity'] = undefined;

/**
 * Defines entity attribute code for action condition.
 * @member {String} action_condition_key
 */
CartCouponAdd.prototype['action_condition_key'] = undefined;

/**
 * Defines condition operator.
 * @member {String} action_condition_operator
 */
CartCouponAdd.prototype['action_condition_operator'] = undefined;

/**
 * Defines condition attribute value/s. Can be comma separated string.
 * @member {String} action_condition_value
 */
CartCouponAdd.prototype['action_condition_value'] = undefined;

/**
 * Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
 * @member {module:model/CartCouponAdd.ActionScopeEnum} action_scope
 */
CartCouponAdd.prototype['action_scope'] = undefined;

/**
 * Coupon discount type
 * @member {module:model/CartCouponAdd.ActionTypeEnum} action_type
 */
CartCouponAdd.prototype['action_type'] = undefined;

/**
 * Coupon code
 * @member {String} code
 */
CartCouponAdd.prototype['code'] = undefined;

/**
 * Entity codes
 * @member {Array.<String>} codes
 */
CartCouponAdd.prototype['codes'] = undefined;

/**
 * Defines when discount code will be expired.
 * @member {String} date_end
 */
CartCouponAdd.prototype['date_end'] = undefined;

/**
 * Defines when discount code will be available.
 * @member {String} date_start
 * @default 'now'
 */
CartCouponAdd.prototype['date_start'] = 'now';

/**
 * Coupon name
 * @member {String} name
 */
CartCouponAdd.prototype['name'] = undefined;

/**
 * Store Id
 * @member {String} store_id
 */
CartCouponAdd.prototype['store_id'] = undefined;

/**
 * Usage limit for coupon.
 * @member {Number} usage_limit
 */
CartCouponAdd.prototype['usage_limit'] = undefined;

/**
 * Usage limit per customer.
 * @member {Number} usage_limit_per_customer
 */
CartCouponAdd.prototype['usage_limit_per_customer'] = undefined;





/**
 * Allowed values for the <code>action_apply_to</code> property.
 * @enum {String}
 * @readonly
 */
CartCouponAdd['ActionApplyToEnum'] = {

    /**
     * value: "order_total"
     * @const
     */
    "order_total": "order_total",

    /**
     * value: "item_price"
     * @const
     */
    "item_price": "item_price",

    /**
     * value: "shipping"
     * @const
     */
    "shipping": "shipping"
};


/**
 * Allowed values for the <code>action_scope</code> property.
 * @enum {String}
 * @readonly
 */
CartCouponAdd['ActionScopeEnum'] = {

    /**
     * value: "order"
     * @const
     */
    "order": "order",

    /**
     * value: "matching_items"
     * @const
     */
    "matching_items": "matching_items"
};


/**
 * Allowed values for the <code>action_type</code> property.
 * @enum {String}
 * @readonly
 */
CartCouponAdd['ActionTypeEnum'] = {

    /**
     * value: "percent"
     * @const
     */
    "percent": "percent",

    /**
     * value: "fixed"
     * @const
     */
    "fixed": "fixed"
};



export default CartCouponAdd;

