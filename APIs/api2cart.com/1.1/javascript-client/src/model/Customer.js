/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import A2CDateTime from './A2CDateTime';
import CustomerAddress from './CustomerAddress';
import CustomerGroup from './CustomerGroup';

/**
 * The Customer model module.
 * @module model/Customer
 * @version 1.1
 */
class Customer {
    /**
     * Constructs a new <code>Customer</code>.
     * @alias module:model/Customer
     */
    constructor() { 
        
        Customer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Customer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Customer} obj Optional instance to populate.
     * @return {module:model/Customer} The populated <code>Customer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Customer();

            if (data.hasOwnProperty('additional_fields')) {
                obj['additional_fields'] = ApiClient.convertToType(data['additional_fields'], Object);
            }
            if (data.hasOwnProperty('address_book')) {
                obj['address_book'] = ApiClient.convertToType(data['address_book'], [CustomerAddress]);
            }
            if (data.hasOwnProperty('birth_day')) {
                obj['birth_day'] = A2CDateTime.constructFromObject(data['birth_day']);
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = A2CDateTime.constructFromObject(data['created_time']);
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], Object);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('first_name')) {
                obj['first_name'] = ApiClient.convertToType(data['first_name'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], [CustomerGroup]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = ApiClient.convertToType(data['ip_address'], 'String');
            }
            if (data.hasOwnProperty('lang_id')) {
                obj['lang_id'] = ApiClient.convertToType(data['lang_id'], 'String');
            }
            if (data.hasOwnProperty('last_login')) {
                obj['last_login'] = A2CDateTime.constructFromObject(data['last_login']);
            }
            if (data.hasOwnProperty('last_name')) {
                obj['last_name'] = ApiClient.convertToType(data['last_name'], 'String');
            }
            if (data.hasOwnProperty('last_order_id')) {
                obj['last_order_id'] = ApiClient.convertToType(data['last_order_id'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('modified_time')) {
                obj['modified_time'] = A2CDateTime.constructFromObject(data['modified_time']);
            }
            if (data.hasOwnProperty('news_letter_subscription')) {
                obj['news_letter_subscription'] = ApiClient.convertToType(data['news_letter_subscription'], 'Boolean');
            }
            if (data.hasOwnProperty('orders_count')) {
                obj['orders_count'] = ApiClient.convertToType(data['orders_count'], 'Number');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('stores_ids')) {
                obj['stores_ids'] = ApiClient.convertToType(data['stores_ids'], ['String']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Customer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Customer</code>.
     */
    static validateJSON(data) {
        if (data['address_book']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['address_book'])) {
                throw new Error("Expected the field `address_book` to be an array in the JSON data but got " + data['address_book']);
            }
            // validate the optional field `address_book` (array)
            for (const item of data['address_book']) {
                CustomerAddress.validateJSON(item);
            };
        }
        // validate the optional field `birth_day`
        if (data['birth_day']) { // data not null
          A2CDateTime.validateJSON(data['birth_day']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // validate the optional field `created_time`
        if (data['created_time']) { // data not null
          A2CDateTime.validateJSON(data['created_time']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['first_name'] && !(typeof data['first_name'] === 'string' || data['first_name'] instanceof String)) {
            throw new Error("Expected the field `first_name` to be a primitive type in the JSON string but got " + data['first_name']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        if (data['group']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['group'])) {
                throw new Error("Expected the field `group` to be an array in the JSON data but got " + data['group']);
            }
            // validate the optional field `group` (array)
            for (const item of data['group']) {
                CustomerGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ip_address'] && !(typeof data['ip_address'] === 'string' || data['ip_address'] instanceof String)) {
            throw new Error("Expected the field `ip_address` to be a primitive type in the JSON string but got " + data['ip_address']);
        }
        // ensure the json data is a string
        if (data['lang_id'] && !(typeof data['lang_id'] === 'string' || data['lang_id'] instanceof String)) {
            throw new Error("Expected the field `lang_id` to be a primitive type in the JSON string but got " + data['lang_id']);
        }
        // validate the optional field `last_login`
        if (data['last_login']) { // data not null
          A2CDateTime.validateJSON(data['last_login']);
        }
        // ensure the json data is a string
        if (data['last_name'] && !(typeof data['last_name'] === 'string' || data['last_name'] instanceof String)) {
            throw new Error("Expected the field `last_name` to be a primitive type in the JSON string but got " + data['last_name']);
        }
        // ensure the json data is a string
        if (data['last_order_id'] && !(typeof data['last_order_id'] === 'string' || data['last_order_id'] instanceof String)) {
            throw new Error("Expected the field `last_order_id` to be a primitive type in the JSON string but got " + data['last_order_id']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // validate the optional field `modified_time`
        if (data['modified_time']) { // data not null
          A2CDateTime.validateJSON(data['modified_time']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['stores_ids'])) {
            throw new Error("Expected the field `stores_ids` to be an array in the JSON data but got " + data['stores_ids']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}



/**
 * @member {Object} additional_fields
 */
Customer.prototype['additional_fields'] = undefined;

/**
 * @member {Array.<module:model/CustomerAddress>} address_book
 */
Customer.prototype['address_book'] = undefined;

/**
 * @member {module:model/A2CDateTime} birth_day
 */
Customer.prototype['birth_day'] = undefined;

/**
 * @member {String} company
 */
Customer.prototype['company'] = undefined;

/**
 * @member {module:model/A2CDateTime} created_time
 */
Customer.prototype['created_time'] = undefined;

/**
 * @member {Object} custom_fields
 */
Customer.prototype['custom_fields'] = undefined;

/**
 * @member {String} email
 */
Customer.prototype['email'] = undefined;

/**
 * @member {String} fax
 */
Customer.prototype['fax'] = undefined;

/**
 * @member {String} first_name
 */
Customer.prototype['first_name'] = undefined;

/**
 * @member {String} gender
 */
Customer.prototype['gender'] = undefined;

/**
 * @member {Array.<module:model/CustomerGroup>} group
 */
Customer.prototype['group'] = undefined;

/**
 * @member {String} id
 */
Customer.prototype['id'] = undefined;

/**
 * @member {String} ip_address
 */
Customer.prototype['ip_address'] = undefined;

/**
 * @member {String} lang_id
 */
Customer.prototype['lang_id'] = undefined;

/**
 * @member {module:model/A2CDateTime} last_login
 */
Customer.prototype['last_login'] = undefined;

/**
 * @member {String} last_name
 */
Customer.prototype['last_name'] = undefined;

/**
 * @member {String} last_order_id
 */
Customer.prototype['last_order_id'] = undefined;

/**
 * @member {String} login
 */
Customer.prototype['login'] = undefined;

/**
 * @member {module:model/A2CDateTime} modified_time
 */
Customer.prototype['modified_time'] = undefined;

/**
 * @member {Boolean} news_letter_subscription
 */
Customer.prototype['news_letter_subscription'] = undefined;

/**
 * @member {Number} orders_count
 */
Customer.prototype['orders_count'] = undefined;

/**
 * @member {String} phone
 */
Customer.prototype['phone'] = undefined;

/**
 * @member {String} status
 */
Customer.prototype['status'] = undefined;

/**
 * @member {Array.<String>} stores_ids
 */
Customer.prototype['stores_ids'] = undefined;

/**
 * @member {String} website
 */
Customer.prototype['website'] = undefined;






export default Customer;

