/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductVariantImageAdd model module.
 * @module model/ProductVariantImageAdd
 * @version 1.1
 */
class ProductVariantImageAdd {
    /**
     * Constructs a new <code>ProductVariantImageAdd</code>.
     * @alias module:model/ProductVariantImageAdd
     * @param imageName {String} Defines image's name
     * @param productVariantId {Number} Defines product's variants specified by variant id
     * @param type {module:model/ProductVariantImageAdd.TypeEnum} Defines image's types that are specified by comma-separated list
     */
    constructor(imageName, productVariantId, type) { 
        
        ProductVariantImageAdd.initialize(this, imageName, productVariantId, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageName, productVariantId, type) { 
        obj['image_name'] = imageName;
        obj['position'] = 0;
        obj['product_variant_id'] = productVariantId;
        obj['type'] = type || 'base';
    }

    /**
     * Constructs a <code>ProductVariantImageAdd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductVariantImageAdd} obj Optional instance to populate.
     * @return {module:model/ProductVariantImageAdd} The populated <code>ProductVariantImageAdd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductVariantImageAdd();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('image_name')) {
                obj['image_name'] = ApiClient.convertToType(data['image_name'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('mime')) {
                obj['mime'] = ApiClient.convertToType(data['mime'], 'String');
            }
            if (data.hasOwnProperty('option_id')) {
                obj['option_id'] = ApiClient.convertToType(data['option_id'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'String');
            }
            if (data.hasOwnProperty('product_variant_id')) {
                obj['product_variant_id'] = ApiClient.convertToType(data['product_variant_id'], 'Number');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductVariantImageAdd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductVariantImageAdd</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductVariantImageAdd.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['image_name'] && !(typeof data['image_name'] === 'string' || data['image_name'] instanceof String)) {
            throw new Error("Expected the field `image_name` to be a primitive type in the JSON string but got " + data['image_name']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['mime'] && !(typeof data['mime'] === 'string' || data['mime'] instanceof String)) {
            throw new Error("Expected the field `mime` to be a primitive type in the JSON string but got " + data['mime']);
        }
        // ensure the json data is a string
        if (data['option_id'] && !(typeof data['option_id'] === 'string' || data['option_id'] instanceof String)) {
            throw new Error("Expected the field `option_id` to be a primitive type in the JSON string but got " + data['option_id']);
        }
        // ensure the json data is a string
        if (data['product_id'] && !(typeof data['product_id'] === 'string' || data['product_id'] instanceof String)) {
            throw new Error("Expected the field `product_id` to be a primitive type in the JSON string but got " + data['product_id']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

ProductVariantImageAdd.RequiredProperties = ["image_name", "product_variant_id", "type"];

/**
 * Content(body) encoded in base64 of image file
 * @member {String} content
 */
ProductVariantImageAdd.prototype['content'] = undefined;

/**
 * Defines image's name
 * @member {String} image_name
 */
ProductVariantImageAdd.prototype['image_name'] = undefined;

/**
 * Defines alternative text that has to be attached to the picture
 * @member {String} label
 */
ProductVariantImageAdd.prototype['label'] = undefined;

/**
 * Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
 * @member {String} mime
 */
ProductVariantImageAdd.prototype['mime'] = undefined;

/**
 * Defines option id of the product variant for which the image will be added
 * @member {String} option_id
 */
ProductVariantImageAdd.prototype['option_id'] = undefined;

/**
 * Defines imageâ€™s position in the list
 * @member {Number} position
 * @default 0
 */
ProductVariantImageAdd.prototype['position'] = 0;

/**
 * Defines product id where the variant image has to be added
 * @member {String} product_id
 */
ProductVariantImageAdd.prototype['product_id'] = undefined;

/**
 * Defines product's variants specified by variant id
 * @member {Number} product_variant_id
 */
ProductVariantImageAdd.prototype['product_variant_id'] = undefined;

/**
 * Store Id
 * @member {String} store_id
 */
ProductVariantImageAdd.prototype['store_id'] = undefined;

/**
 * Defines image's types that are specified by comma-separated list
 * @member {module:model/ProductVariantImageAdd.TypeEnum} type
 * @default 'base'
 */
ProductVariantImageAdd.prototype['type'] = 'base';

/**
 * Defines URL of the image that has to be added
 * @member {String} url
 */
ProductVariantImageAdd.prototype['url'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ProductVariantImageAdd['TypeEnum'] = {

    /**
     * value: "small"
     * @const
     */
    "small": "small",

    /**
     * value: "base"
     * @const
     */
    "base": "base",

    /**
     * value: "additional"
     * @const
     */
    "additional": "additional",

    /**
     * value: "thumbnail"
     * @const
     */
    "thumbnail": "thumbnail"
};



export default ProductVariantImageAdd;

