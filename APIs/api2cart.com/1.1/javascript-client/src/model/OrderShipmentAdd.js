/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderShipmentAddItemsInner from './OrderShipmentAddItemsInner';
import OrderShipmentAddTrackingNumbersInner from './OrderShipmentAddTrackingNumbersInner';

/**
 * The OrderShipmentAdd model module.
 * @module model/OrderShipmentAdd
 * @version 1.1
 */
class OrderShipmentAdd {
    /**
     * Constructs a new <code>OrderShipmentAdd</code>.
     * @alias module:model/OrderShipmentAdd
     */
    constructor() { 
        
        OrderShipmentAdd.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['adjust_stock'] = false;
        obj['enable_cache'] = false;
        obj['is_shipped'] = true;
        obj['send_notifications'] = false;
    }

    /**
     * Constructs a <code>OrderShipmentAdd</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderShipmentAdd} obj Optional instance to populate.
     * @return {module:model/OrderShipmentAdd} The populated <code>OrderShipmentAdd</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderShipmentAdd();

            if (data.hasOwnProperty('adjust_stock')) {
                obj['adjust_stock'] = ApiClient.convertToType(data['adjust_stock'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_cache')) {
                obj['enable_cache'] = ApiClient.convertToType(data['enable_cache'], 'Boolean');
            }
            if (data.hasOwnProperty('is_shipped')) {
                obj['is_shipped'] = ApiClient.convertToType(data['is_shipped'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderShipmentAddItemsInner]);
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('send_notifications')) {
                obj['send_notifications'] = ApiClient.convertToType(data['send_notifications'], 'Boolean');
            }
            if (data.hasOwnProperty('shipment_provider')) {
                obj['shipment_provider'] = ApiClient.convertToType(data['shipment_provider'], 'String');
            }
            if (data.hasOwnProperty('shipping_method')) {
                obj['shipping_method'] = ApiClient.convertToType(data['shipping_method'], 'String');
            }
            if (data.hasOwnProperty('store_id')) {
                obj['store_id'] = ApiClient.convertToType(data['store_id'], 'String');
            }
            if (data.hasOwnProperty('tracking_link')) {
                obj['tracking_link'] = ApiClient.convertToType(data['tracking_link'], 'String');
            }
            if (data.hasOwnProperty('tracking_numbers')) {
                obj['tracking_numbers'] = ApiClient.convertToType(data['tracking_numbers'], [OrderShipmentAddTrackingNumbersInner]);
            }
            if (data.hasOwnProperty('warehouse_id')) {
                obj['warehouse_id'] = ApiClient.convertToType(data['warehouse_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderShipmentAdd</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderShipmentAdd</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrderShipmentAddItemsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['shipment_provider'] && !(typeof data['shipment_provider'] === 'string' || data['shipment_provider'] instanceof String)) {
            throw new Error("Expected the field `shipment_provider` to be a primitive type in the JSON string but got " + data['shipment_provider']);
        }
        // ensure the json data is a string
        if (data['shipping_method'] && !(typeof data['shipping_method'] === 'string' || data['shipping_method'] instanceof String)) {
            throw new Error("Expected the field `shipping_method` to be a primitive type in the JSON string but got " + data['shipping_method']);
        }
        // ensure the json data is a string
        if (data['store_id'] && !(typeof data['store_id'] === 'string' || data['store_id'] instanceof String)) {
            throw new Error("Expected the field `store_id` to be a primitive type in the JSON string but got " + data['store_id']);
        }
        // ensure the json data is a string
        if (data['tracking_link'] && !(typeof data['tracking_link'] === 'string' || data['tracking_link'] instanceof String)) {
            throw new Error("Expected the field `tracking_link` to be a primitive type in the JSON string but got " + data['tracking_link']);
        }
        if (data['tracking_numbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracking_numbers'])) {
                throw new Error("Expected the field `tracking_numbers` to be an array in the JSON data but got " + data['tracking_numbers']);
            }
            // validate the optional field `tracking_numbers` (array)
            for (const item of data['tracking_numbers']) {
                OrderShipmentAddTrackingNumbersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['warehouse_id'] && !(typeof data['warehouse_id'] === 'string' || data['warehouse_id'] instanceof String)) {
            throw new Error("Expected the field `warehouse_id` to be a primitive type in the JSON string but got " + data['warehouse_id']);
        }

        return true;
    }


}



/**
 * This parameter is used for adjust stock.
 * @member {Boolean} adjust_stock
 * @default false
 */
OrderShipmentAdd.prototype['adjust_stock'] = false;

/**
 * If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.
 * @member {Boolean} enable_cache
 * @default false
 */
OrderShipmentAdd.prototype['enable_cache'] = false;

/**
 * Defines shipment's status
 * @member {Boolean} is_shipped
 * @default true
 */
OrderShipmentAdd.prototype['is_shipped'] = true;

/**
 * Defines items in the order that will be shipped
 * @member {Array.<module:model/OrderShipmentAddItemsInner>} items
 */
OrderShipmentAdd.prototype['items'] = undefined;

/**
 * Defines the order for which the shipment will be created
 * @member {String} order_id
 */
OrderShipmentAdd.prototype['order_id'] = undefined;

/**
 * Send notifications to customer after shipment was created
 * @member {Boolean} send_notifications
 * @default false
 */
OrderShipmentAdd.prototype['send_notifications'] = false;

/**
 * Defines company name that provide tracking of shipment
 * @member {String} shipment_provider
 */
OrderShipmentAdd.prototype['shipment_provider'] = undefined;

/**
 * Define shipping method
 * @member {String} shipping_method
 */
OrderShipmentAdd.prototype['shipping_method'] = undefined;

/**
 * Store Id
 * @member {String} store_id
 */
OrderShipmentAdd.prototype['store_id'] = undefined;

/**
 * Defines custom tracking link
 * @member {String} tracking_link
 */
OrderShipmentAdd.prototype['tracking_link'] = undefined;

/**
 * Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"https://api2cart.com/docs/#/cart/CartInfo\">cart.info</a > method
 * @member {Array.<module:model/OrderShipmentAddTrackingNumbersInner>} tracking_numbers
 */
OrderShipmentAdd.prototype['tracking_numbers'] = undefined;

/**
 * This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
 * @member {String} warehouse_id
 */
OrderShipmentAdd.prototype['warehouse_id'] = undefined;






export default OrderShipmentAdd;

