/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountCartAdd200Response from '../model/AccountCartAdd200Response';
import AttributeAdd200Response from '../model/AttributeAdd200Response';
import AttributeDelete200Response from '../model/AttributeDelete200Response';
import BasketLiveShippingServiceDelete200Response from '../model/BasketLiveShippingServiceDelete200Response';
import BridgeDelete200Response from '../model/BridgeDelete200Response';
import CartBridge200Response from '../model/CartBridge200Response';
import CartCatalogPriceRulesCount200Response from '../model/CartCatalogPriceRulesCount200Response';
import CartClearCache200Response from '../model/CartClearCache200Response';
import CartConfig200Response from '../model/CartConfig200Response';
import CartConfigUpdate from '../model/CartConfigUpdate';
import CartConfigUpdate200Response from '../model/CartConfigUpdate200Response';
import CartCouponAdd from '../model/CartCouponAdd';
import CartCouponAdd200Response from '../model/CartCouponAdd200Response';
import CartCouponCount200Response from '../model/CartCouponCount200Response';
import CartDelete200Response from '../model/CartDelete200Response';
import CartDisconnect200Response from '../model/CartDisconnect200Response';
import CartGiftcardAdd200Response from '../model/CartGiftcardAdd200Response';
import CartGiftcardCount200Response from '../model/CartGiftcardCount200Response';
import CartInfo200Response from '../model/CartInfo200Response';
import CartList200Response from '../model/CartList200Response';
import CartMethods200Response from '../model/CartMethods200Response';
import CartPluginList200Response from '../model/CartPluginList200Response';
import CartScriptAdd200Response from '../model/CartScriptAdd200Response';
import CartShippingZonesList200Response from '../model/CartShippingZonesList200Response';
import CartValidate200Response from '../model/CartValidate200Response';
import ModelResponseCartCatalogPriceRulesList from '../model/ModelResponseCartCatalogPriceRulesList';
import ModelResponseCartCouponList from '../model/ModelResponseCartCouponList';
import ModelResponseCartGiftCardList from '../model/ModelResponseCartGiftCardList';
import ModelResponseCartMetaDataList from '../model/ModelResponseCartMetaDataList';
import ModelResponseCartScriptList from '../model/ModelResponseCartScriptList';

/**
* Cart service.
* @module api/CartApi
* @version 1.1
*/
export default class CartApi {

    /**
    * Constructs a new CartApi. 
    * @alias module:api/CartApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bridgeDownload operation.
     * @callback module:api/CartApi~bridgeDownloadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download bridge for store
     * @param {Object} opts Optional parameters
     * @param {Boolean} [whitelabel = false)] Identifies if there is a necessity to download whitelabel bridge.
     * @param {module:api/CartApi~bridgeDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    bridgeDownload(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'whitelabel': opts['whitelabel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/bridge.download.file', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartBridge operation.
     * @callback module:api/CartApi~cartBridgeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartBridge200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bridge key and store key
     * @param {module:api/CartApi~cartBridgeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartBridge200Response}
     */
    cartBridge(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartBridge200Response;
      return this.apiClient.callApi(
        '/cart.bridge.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCatalogPriceRulesCount operation.
     * @callback module:api/CartApi~cartCatalogPriceRulesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartCatalogPriceRulesCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get count of cart catalog price rules discounts.
     * @param {module:api/CartApi~cartCatalogPriceRulesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartCatalogPriceRulesCount200Response}
     */
    cartCatalogPriceRulesCount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartCatalogPriceRulesCount200Response;
      return this.apiClient.callApi(
        '/cart.catalog_price_rules.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCatalogPriceRulesList operation.
     * @callback module:api/CartApi~cartCatalogPriceRulesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartCatalogPriceRulesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cart catalog price rules discounts.
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [ids] Retrieves  catalog_price_rules by ids
     * @param {String} [params = 'id,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartCatalogPriceRulesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartCatalogPriceRulesList}
     */
    cartCatalogPriceRulesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'ids': opts['ids'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartCatalogPriceRulesList;
      return this.apiClient.callApi(
        '/cart.catalog_price_rules.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartClearCache operation.
     * @callback module:api/CartApi~cartClearCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartClearCache200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clear cache on store.
     * @param {String} cacheType Defines which cache should be cleared.
     * @param {module:api/CartApi~cartClearCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartClearCache200Response}
     */
    cartClearCache(cacheType, callback) {
      let postBody = null;
      // verify the required parameter 'cacheType' is set
      if (cacheType === undefined || cacheType === null) {
        throw new Error("Missing the required parameter 'cacheType' when calling cartClearCache");
      }

      let pathParams = {
      };
      let queryParams = {
        'cache_type': cacheType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartClearCache200Response;
      return this.apiClient.callApi(
        '/cart.clear_cache.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartConfig operation.
     * @callback module:api/CartApi~cartConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartConfig200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of cart configs
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'store_name,store_url,db_prefix')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartConfig200Response}
     */
    cartConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartConfig200Response;
      return this.apiClient.callApi(
        '/cart.config.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartConfigUpdate operation.
     * @callback module:api/CartApi~cartConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this API method to update custom data in client database.
     * @param {module:model/CartConfigUpdate} cartConfigUpdate 
     * @param {module:api/CartApi~cartConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartConfigUpdate200Response}
     */
    cartConfigUpdate(cartConfigUpdate, callback) {
      let postBody = cartConfigUpdate;
      // verify the required parameter 'cartConfigUpdate' is set
      if (cartConfigUpdate === undefined || cartConfigUpdate === null) {
        throw new Error("Missing the required parameter 'cartConfigUpdate' when calling cartConfigUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartConfigUpdate200Response;
      return this.apiClient.callApi(
        '/cart.config.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponAdd operation.
     * @callback module:api/CartApi~cartCouponAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartCouponAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new coupon
     * @param {module:model/CartCouponAdd} cartCouponAdd 
     * @param {module:api/CartApi~cartCouponAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartCouponAdd200Response}
     */
    cartCouponAdd(cartCouponAdd, callback) {
      let postBody = cartCouponAdd;
      // verify the required parameter 'cartCouponAdd' is set
      if (cartCouponAdd === undefined || cartCouponAdd === null) {
        throw new Error("Missing the required parameter 'cartCouponAdd' when calling cartCouponAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartCouponAdd200Response;
      return this.apiClient.callApi(
        '/cart.coupon.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponConditionAdd operation.
     * @callback module:api/CartApi~cartCouponConditionAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketLiveShippingServiceDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new coupon condition
     * @param {String} couponId Coupon Id
     * @param {module:model/String} entity Defines condition entity type
     * @param {module:model/String} key Defines condition entity attribute key
     * @param {module:model/String} operator Defines condition operator
     * @param {String} value Defines condition value, can be comma separated according to the operator.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [target = 'coupon_prerequisite')] Defines condition operator
     * @param {module:api/CartApi~cartCouponConditionAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketLiveShippingServiceDelete200Response}
     */
    cartCouponConditionAdd(couponId, entity, key, operator, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'couponId' is set
      if (couponId === undefined || couponId === null) {
        throw new Error("Missing the required parameter 'couponId' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'operator' is set
      if (operator === undefined || operator === null) {
        throw new Error("Missing the required parameter 'operator' when calling cartCouponConditionAdd");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling cartCouponConditionAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'coupon_id': couponId,
        'target': opts['target'],
        'entity': entity,
        'key': key,
        'operator': operator,
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketLiveShippingServiceDelete200Response;
      return this.apiClient.callApi(
        '/cart.coupon.condition.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponCount operation.
     * @callback module:api/CartApi~cartCouponCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartCouponCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cart coupons count.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [dateStartFrom] Filter entity by date_start (greater or equal)
     * @param {String} [dateStartTo] Filter entity by date_start (less or equal)
     * @param {String} [dateEndFrom] Filter entity by date_end (greater or equal)
     * @param {String} [dateEndTo] Filter entity by date_end (less or equal)
     * @param {Boolean} [avail = true)] Defines category's visibility status
     * @param {module:api/CartApi~cartCouponCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartCouponCount200Response}
     */
    cartCouponCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'date_start_from': opts['dateStartFrom'],
        'date_start_to': opts['dateStartTo'],
        'date_end_from': opts['dateEndFrom'],
        'date_end_to': opts['dateEndTo'],
        'avail': opts['avail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartCouponCount200Response;
      return this.apiClient.callApi(
        '/cart.coupon.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponDelete operation.
     * @callback module:api/CartApi~cartCouponDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete coupon
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartCouponDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    cartCouponDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartCouponDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/cart.coupon.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCouponList operation.
     * @callback module:api/CartApi~cartCouponListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartCouponList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cart coupon discounts.
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [couponsIds] Filter coupons by ids
     * @param {String} [storeId] Filter coupons by store id
     * @param {String} [dateStartFrom] Filter entity by date_start (greater or equal)
     * @param {String} [dateStartTo] Filter entity by date_start (less or equal)
     * @param {String} [dateEndFrom] Filter entity by date_end (greater or equal)
     * @param {String} [dateEndTo] Filter entity by date_end (less or equal)
     * @param {Boolean} [avail] Filter coupons by avail status
     * @param {String} [langId] Language id
     * @param {String} [params = 'id,code,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartCouponListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartCouponList}
     */
    cartCouponList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'coupons_ids': opts['couponsIds'],
        'store_id': opts['storeId'],
        'date_start_from': opts['dateStartFrom'],
        'date_start_to': opts['dateStartTo'],
        'date_end_from': opts['dateEndFrom'],
        'date_end_to': opts['dateEndTo'],
        'avail': opts['avail'],
        'lang_id': opts['langId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartCouponList;
      return this.apiClient.callApi(
        '/cart.coupon.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartCreate operation.
     * @callback module:api/CartApi~cartCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountCartAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add store to the account
     * @param {module:model/String} cartId Store’s identifier which you can get from cart_list method
     * @param {String} storeUrl A web address of a store that you would like to connect to API2Cart
     * @param {String} etsyClientId Etsy Client Id
     * @param {String} etsyRefreshToken Etsy Refresh token
     * @param {String} storeId Store Id
     * @param {Object} opts Optional parameters
     * @param {String} [bridgeUrl] This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
     * @param {String} [storeRoot] Absolute path to the store root directory (used with \"bridge_url\" parameter)
     * @param {String} [storeKey] Set this parameter if bridge is already uploaded to store
     * @param {String} [sharedSecret] Shared secret
     * @param {Boolean} [validateVersion = false)] Specify if api2cart should validate cart version
     * @param {Boolean} [verify = true)] Enables or disables cart's verification
     * @param {String} [dbTablesPrefix] DB tables prefix
     * @param {String} [ftpHost] FTP connection host
     * @param {String} [ftpUser] FTP User
     * @param {String} [ftpPassword] FTP Password
     * @param {Number} [ftpPort] FTP Port
     * @param {String} [ftpStoreDir] FTP Store dir
     * @param {String} [apiKey3dcart] 3DCart API Key
     * @param {String} [adminAccount] It's a BigCommerce account for which API is enabled
     * @param {String} [apiPath] BigCommerce API URL
     * @param {String} [apiKey] Bigcommerce API Key
     * @param {String} [clientId] Client ID of the requesting app
     * @param {String} [accessToken] Access token authorizing the app to access resources on behalf of a user
     * @param {String} [context] API Path section unique to the store
     * @param {String} [accessToken2] Access token authorizing the app to access resources on behalf of a user
     * @param {String} [apiKeyShopify] Shopify API Key
     * @param {String} [apiPassword] Shopify API Password
     * @param {String} [accessTokenShopify] Access token authorizing the app to access resources on behalf of a user
     * @param {String} [apiKey2] Neto API Key
     * @param {String} [apiUsername] Neto User Name
     * @param {String} [encryptedPassword] Volusion API Password
     * @param {String} [login] It's a Volusion account for which API is enabled
     * @param {String} [apiUserAdnsf] It's a AspDotNetStorefront account for which API is available
     * @param {String} [apiPass] AspDotNetStorefront API Password
     * @param {String} [privateKey] 3DCart Application Private Key
     * @param {String} [appToken] 3DCart Token from Application
     * @param {String} [etsyKeystring] Etsy keystring
     * @param {String} [etsySharedSecret] Etsy shared secret
     * @param {String} [tokenSecret] Secret token authorizing the app to access resources on behalf of a user
     * @param {String} [ebayClientId] Application ID (AppID).
     * @param {String} [ebayClientSecret] Shared Secret from eBay application
     * @param {String} [ebayRuname] The RuName value that eBay assigns to your application.
     * @param {String} [ebayAccessToken] Used to authenticate API requests.
     * @param {String} [ebayRefreshToken] Used to renew the access token.
     * @param {String} [ebayEnvironment = 'production')] eBay environment
     * @param {Number} [ebaySiteId = 0)] eBay global ID
     * @param {String} [dwClientId] Demandware client id
     * @param {String} [dwApiPass] Demandware api password
     * @param {String} [demandwareUserName] Demandware user name
     * @param {String} [demandwareUserPassword] Demandware user password
     * @param {String} [sellerId] Seller Id
     * @param {String} [amazonSecretKey] Amazon Secret Key
     * @param {String} [amazonAccessKeyId] Amazon Secret Key Id
     * @param {String} [marketplacesIds] Comma separated marketplaces ids
     * @param {String} [environment = 'production')] 
     * @param {String} [hybrisClientId] Omni Commerce Connector Client ID
     * @param {String} [hybrisClientSecret] Omni Commerce Connector Client Secret
     * @param {String} [hybrisUsername] User Name
     * @param {String} [hybrisPassword] User password
     * @param {Array.<String>} [hybrisWebsites] Websites to stores mapping data
     * @param {String} [walmartClientId] Walmart client ID
     * @param {String} [walmartClientSecret] Walmart client secret
     * @param {String} [walmartEnvironment = 'production')] Walmart environment
     * @param {String} [walmartChannelType] Walmart WM_CONSUMER.CHANNEL.TYPE header
     * @param {String} [lightspeedApiKey] LightSpeed api key
     * @param {String} [lightspeedApiSecret] LightSpeed api secret
     * @param {String} [shopwareAccessKey] Shopware access key
     * @param {String} [shopwareApiKey] Shopware api key
     * @param {String} [shopwareApiSecret] Shopware client secret access key
     * @param {String} [commercehqApiKey] CommerceHQ api key
     * @param {String} [commercehqApiPassword] CommerceHQ api password
     * @param {String} [_3dcartPrivateKey] 3DCart Private Key
     * @param {String} [_3dcartAccessToken] 3DCart Token
     * @param {String} [wcConsumerKey] Woocommerce consumer key
     * @param {String} [wcConsumerSecret] Woocommerce consumer secret
     * @param {String} [magentoConsumerKey] Magento Consumer Key
     * @param {String} [magentoConsumerSecret] Magento Consumer Secret
     * @param {String} [magentoAccessToken] Magento Access Token
     * @param {String} [magentoTokenSecret] Magento Token Secret
     * @param {String} [prestashopWebserviceKey] Prestashop webservice key
     * @param {String} [wixAppId] Wix App ID
     * @param {String} [wixAppSecretKey] Wix App Secret Key
     * @param {String} [wixRefreshToken] Wix refresh token
     * @param {String} [mercadoLibreAppId] Mercado Libre App ID
     * @param {String} [mercadoLibreAppSecretKey] Mercado Libre App Secret Key
     * @param {String} [mercadoLibreRefreshToken] Mercado Libre Refresh Token
     * @param {Number} [zidClientId] Zid Client ID
     * @param {String} [zidClientSecret] Zid Client Secret
     * @param {String} [zidAccessToken] Zid Access Token
     * @param {String} [zidAuthorization] Zid Authorization
     * @param {String} [zidRefreshToken] Zid refresh token
     * @param {module:api/CartApi~cartCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountCartAdd200Response}
     */
    cartCreate(cartId, storeUrl, etsyClientId, etsyRefreshToken, storeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartCreate");
      }
      // verify the required parameter 'storeUrl' is set
      if (storeUrl === undefined || storeUrl === null) {
        throw new Error("Missing the required parameter 'storeUrl' when calling cartCreate");
      }
      // verify the required parameter 'etsyClientId' is set
      if (etsyClientId === undefined || etsyClientId === null) {
        throw new Error("Missing the required parameter 'etsyClientId' when calling cartCreate");
      }
      // verify the required parameter 'etsyRefreshToken' is set
      if (etsyRefreshToken === undefined || etsyRefreshToken === null) {
        throw new Error("Missing the required parameter 'etsyRefreshToken' when calling cartCreate");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling cartCreate");
      }

      let pathParams = {
      };
      let queryParams = {
        'cart_id': cartId,
        'store_url': storeUrl,
        'bridge_url': opts['bridgeUrl'],
        'store_root': opts['storeRoot'],
        'store_key': opts['storeKey'],
        'shared_secret': opts['sharedSecret'],
        'validate_version': opts['validateVersion'],
        'verify': opts['verify'],
        'db_tables_prefix': opts['dbTablesPrefix'],
        'ftp_host': opts['ftpHost'],
        'ftp_user': opts['ftpUser'],
        'ftp_password': opts['ftpPassword'],
        'ftp_port': opts['ftpPort'],
        'ftp_store_dir': opts['ftpStoreDir'],
        'apiKey_3dcart': opts['apiKey3dcart'],
        'AdminAccount': opts['adminAccount'],
        'ApiPath': opts['apiPath'],
        'ApiKey': opts['apiKey'],
        'client_id': opts['clientId'],
        'accessToken': opts['accessToken'],
        'context': opts['context'],
        'access_token': opts['accessToken2'],
        'apiKey_shopify': opts['apiKeyShopify'],
        'apiPassword': opts['apiPassword'],
        'accessToken_shopify': opts['accessTokenShopify'],
        'apiKey': opts['apiKey2'],
        'apiUsername': opts['apiUsername'],
        'EncryptedPassword': opts['encryptedPassword'],
        'Login': opts['login'],
        'apiUser_adnsf': opts['apiUserAdnsf'],
        'apiPass': opts['apiPass'],
        'privateKey': opts['privateKey'],
        'appToken': opts['appToken'],
        'etsy_keystring': opts['etsyKeystring'],
        'etsy_shared_secret': opts['etsySharedSecret'],
        'tokenSecret': opts['tokenSecret'],
        'etsy_client_id': etsyClientId,
        'etsy_refresh_token': etsyRefreshToken,
        'ebay_client_id': opts['ebayClientId'],
        'ebay_client_secret': opts['ebayClientSecret'],
        'ebay_runame': opts['ebayRuname'],
        'ebay_access_token': opts['ebayAccessToken'],
        'ebay_refresh_token': opts['ebayRefreshToken'],
        'ebay_environment': opts['ebayEnvironment'],
        'ebay_site_id': opts['ebaySiteId'],
        'dw_client_id': opts['dwClientId'],
        'dw_api_pass': opts['dwApiPass'],
        'demandware_user_name': opts['demandwareUserName'],
        'demandware_user_password': opts['demandwareUserPassword'],
        'store_id': storeId,
        'seller_id': opts['sellerId'],
        'amazon_secret_key': opts['amazonSecretKey'],
        'amazon_access_key_id': opts['amazonAccessKeyId'],
        'marketplaces_ids': opts['marketplacesIds'],
        'environment': opts['environment'],
        'hybris_client_id': opts['hybrisClientId'],
        'hybris_client_secret': opts['hybrisClientSecret'],
        'hybris_username': opts['hybrisUsername'],
        'hybris_password': opts['hybrisPassword'],
        'hybris_websites': this.apiClient.buildCollectionParam(opts['hybrisWebsites'], 'csv'),
        'walmart_client_id': opts['walmartClientId'],
        'walmart_client_secret': opts['walmartClientSecret'],
        'walmart_environment': opts['walmartEnvironment'],
        'walmart_channel_type': opts['walmartChannelType'],
        'lightspeed_api_key': opts['lightspeedApiKey'],
        'lightspeed_api_secret': opts['lightspeedApiSecret'],
        'shopware_access_key': opts['shopwareAccessKey'],
        'shopware_api_key': opts['shopwareApiKey'],
        'shopware_api_secret': opts['shopwareApiSecret'],
        'commercehq_api_key': opts['commercehqApiKey'],
        'commercehq_api_password': opts['commercehqApiPassword'],
        '3dcart_private_key': opts['_3dcartPrivateKey'],
        '3dcart_access_token': opts['_3dcartAccessToken'],
        'wc_consumer_key': opts['wcConsumerKey'],
        'wc_consumer_secret': opts['wcConsumerSecret'],
        'magento_consumer_key': opts['magentoConsumerKey'],
        'magento_consumer_secret': opts['magentoConsumerSecret'],
        'magento_access_token': opts['magentoAccessToken'],
        'magento_token_secret': opts['magentoTokenSecret'],
        'prestashop_webservice_key': opts['prestashopWebserviceKey'],
        'wix_app_id': opts['wixAppId'],
        'wix_app_secret_key': opts['wixAppSecretKey'],
        'wix_refresh_token': opts['wixRefreshToken'],
        'mercado_libre_app_id': opts['mercadoLibreAppId'],
        'mercado_libre_app_secret_key': opts['mercadoLibreAppSecretKey'],
        'mercado_libre_refresh_token': opts['mercadoLibreRefreshToken'],
        'zid_client_id': opts['zidClientId'],
        'zid_client_secret': opts['zidClientSecret'],
        'zid_access_token': opts['zidAccessToken'],
        'zid_authorization': opts['zidAuthorization'],
        'zid_refresh_token': opts['zidRefreshToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountCartAdd200Response;
      return this.apiClient.callApi(
        '/cart.create.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartDelete operation.
     * @callback module:api/CartApi~cartDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove store from API2Cart
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteBridge = true)] Identifies if there is a necessity to delete bridge
     * @param {module:api/CartApi~cartDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartDelete200Response}
     */
    cartDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'delete_bridge': opts['deleteBridge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartDelete200Response;
      return this.apiClient.callApi(
        '/cart.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartDisconnect operation.
     * @callback module:api/CartApi~cartDisconnectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartDisconnect200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disconnect with the store and clear store session data.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteBridge = false)] Identifies if there is a necessity to delete bridge
     * @param {module:api/CartApi~cartDisconnectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartDisconnect200Response}
     */
    cartDisconnect(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'delete_bridge': opts['deleteBridge']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartDisconnect200Response;
      return this.apiClient.callApi(
        '/cart.disconnect.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartGiftcardAdd operation.
     * @callback module:api/CartApi~cartGiftcardAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartGiftcardAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new gift card
     * @param {Number} amount Defines the gift card amount value.
     * @param {Object} opts Optional parameters
     * @param {String} [code] Gift card code
     * @param {String} [ownerEmail] Gift card owner email
     * @param {String} [recipientEmail] Gift card recipient email
     * @param {module:api/CartApi~cartGiftcardAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartGiftcardAdd200Response}
     */
    cartGiftcardAdd(amount, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling cartGiftcardAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'amount': amount,
        'code': opts['code'],
        'owner_email': opts['ownerEmail'],
        'recipient_email': opts['recipientEmail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartGiftcardAdd200Response;
      return this.apiClient.callApi(
        '/cart.giftcard.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartGiftcardCount operation.
     * @callback module:api/CartApi~cartGiftcardCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartGiftcardCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gift cards count.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartGiftcardCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartGiftcardCount200Response}
     */
    cartGiftcardCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartGiftcardCount200Response;
      return this.apiClient.callApi(
        '/cart.giftcard.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartGiftcardList operation.
     * @callback module:api/CartApi~cartGiftcardListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartGiftCardList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gift cards list.
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [storeId] Store Id
     * @param {String} [params = 'id,code,name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartGiftcardListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartGiftCardList}
     */
    cartGiftcardList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'store_id': opts['storeId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartGiftCardList;
      return this.apiClient.callApi(
        '/cart.giftcard.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartInfo operation.
     * @callback module:api/CartApi~cartInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cart information
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'store_name,store_url,db_prefix')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartInfo200Response}
     */
    cartInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartInfo200Response;
      return this.apiClient.callApi(
        '/cart.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartList operation.
     * @callback module:api/CartApi~cartListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of supported carts
     * @param {module:api/CartApi~cartListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartList200Response}
     */
    cartList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartList200Response;
      return this.apiClient.callApi(
        '/cart.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMetaDataList operation.
     * @callback module:api/CartApi~cartMetaDataListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartMetaDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get entity meta data
     * @param {String} entityId Entity Id
     * @param {Object} opts Optional parameters
     * @param {String} [entity = 'product')] Entity
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [key] Key
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [params = 'key,value')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartMetaDataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartMetaDataList}
     */
    cartMetaDataList(entityId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cartMetaDataList");
      }

      let pathParams = {
      };
      let queryParams = {
        'entity_id': entityId,
        'entity': opts['entity'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'key': opts['key'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartMetaDataList;
      return this.apiClient.callApi(
        '/cart.meta_data.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMetaDataSet operation.
     * @callback module:api/CartApi~cartMetaDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set meta data for a specific entity
     * @param {String} entityId Entity Id
     * @param {String} key Key
     * @param {String} value Value
     * @param {String} namespace Metafield namespace
     * @param {Object} opts Optional parameters
     * @param {String} [entity = 'product')] Entity
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {module:api/CartApi~cartMetaDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAdd200Response}
     */
    cartMetaDataSet(entityId, key, value, namespace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cartMetaDataSet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cartMetaDataSet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling cartMetaDataSet");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling cartMetaDataSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'entity_id': entityId,
        'entity': opts['entity'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'key': key,
        'value': value,
        'namespace': namespace
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAdd200Response;
      return this.apiClient.callApi(
        '/cart.meta_data.set.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMetaDataUnset operation.
     * @callback module:api/CartApi~cartMetaDataUnsetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketLiveShippingServiceDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unset meta data for a specific entity
     * @param {String} entityId Entity Id
     * @param {String} key Key
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [entity = 'product')] Entity
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartMetaDataUnsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketLiveShippingServiceDelete200Response}
     */
    cartMetaDataUnset(entityId, key, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cartMetaDataUnset");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cartMetaDataUnset");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartMetaDataUnset");
      }

      let pathParams = {
      };
      let queryParams = {
        'entity_id': entityId,
        'entity': opts['entity'],
        'store_id': opts['storeId'],
        'key': key,
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketLiveShippingServiceDelete200Response;
      return this.apiClient.callApi(
        '/cart.meta_data.unset.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartMethods operation.
     * @callback module:api/CartApi~cartMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartMethods200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of cart methods
     * @param {module:api/CartApi~cartMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartMethods200Response}
     */
    cartMethods(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartMethods200Response;
      return this.apiClient.callApi(
        '/cart.methods.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartPluginList operation.
     * @callback module:api/CartApi~cartPluginListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartPluginList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of installed plugins
     * @param {Object} opts Optional parameters
     * @param {String} [storeKey] Set this parameter if bridge is already uploaded to store
     * @param {String} [storeId] Store Id
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {module:api/CartApi~cartPluginListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartPluginList200Response}
     */
    cartPluginList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_key': opts['storeKey'],
        'store_id': opts['storeId'],
        'start': opts['start'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartPluginList200Response;
      return this.apiClient.callApi(
        '/cart.plugin.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartScriptAdd operation.
     * @callback module:api/CartApi~cartScriptAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartScriptAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new script to the storefront
     * @param {Object} opts Optional parameters
     * @param {String} [name] The user-friendly script name
     * @param {String} [description] The user-friendly description
     * @param {String} [html] An html string containing exactly one `script` tag.
     * @param {String} [src] The URL of the remote script
     * @param {String} [loadMethod] The load method to use for the script
     * @param {String} [scope = 'storefront')] The page or pages on the online store where the script should be included
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartScriptAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartScriptAdd200Response}
     */
    cartScriptAdd(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'description': opts['description'],
        'html': opts['html'],
        'src': opts['src'],
        'load_method': opts['loadMethod'],
        'scope': opts['scope'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartScriptAdd200Response;
      return this.apiClient.callApi(
        '/cart.script.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartScriptDelete operation.
     * @callback module:api/CartApi~cartScriptDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BridgeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove script from the storefront
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/CartApi~cartScriptDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BridgeDelete200Response}
     */
    cartScriptDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cartScriptDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BridgeDelete200Response;
      return this.apiClient.callApi(
        '/cart.script.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartScriptList operation.
     * @callback module:api/CartApi~cartScriptListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCartScriptList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get scripts installed to the storefront
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [scriptIds] Retrieves only scripts with specific ids
     * @param {String} [storeId] Store Id
     * @param {String} [params = 'id,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartScriptListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCartScriptList}
     */
    cartScriptList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'script_ids': opts['scriptIds'],
        'store_id': opts['storeId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCartScriptList;
      return this.apiClient.callApi(
        '/cart.script.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartShippingZonesList operation.
     * @callback module:api/CartApi~cartShippingZonesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartShippingZonesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of shipping zones
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'id,name,enabled')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/CartApi~cartShippingZonesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartShippingZonesList200Response}
     */
    cartShippingZonesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartShippingZonesList200Response;
      return this.apiClient.callApi(
        '/cart.shipping_zones.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cartValidate operation.
     * @callback module:api/CartApi~cartValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartValidate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validateVersion = false)] Specify if api2cart should validate cart version
     * @param {module:api/CartApi~cartValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartValidate200Response}
     */
    cartValidate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'validate_version': opts['validateVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartValidate200Response;
      return this.apiClient.callApi(
        '/cart.validate.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
