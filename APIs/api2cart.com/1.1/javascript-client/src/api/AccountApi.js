/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountCartAdd from '../model/AccountCartAdd';
import AccountCartAdd200Response from '../model/AccountCartAdd200Response';
import AccountCartList200Response from '../model/AccountCartList200Response';
import AccountConfigUpdate200Response from '../model/AccountConfigUpdate200Response';
import AccountFailedWebhooks200Response from '../model/AccountFailedWebhooks200Response';
import AccountSupportedPlatforms200Response from '../model/AccountSupportedPlatforms200Response';

/**
* Account service.
* @module api/AccountApi
* @version 1.1
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountCartAdd operation.
     * @callback module:api/AccountApi~accountCartAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountCartAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add store to the account
     * @param {module:model/AccountCartAdd} accountCartAdd 
     * @param {module:api/AccountApi~accountCartAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountCartAdd200Response}
     */
    accountCartAdd(accountCartAdd, callback) {
      let postBody = accountCartAdd;
      // verify the required parameter 'accountCartAdd' is set
      if (accountCartAdd === undefined || accountCartAdd === null) {
        throw new Error("Missing the required parameter 'accountCartAdd' when calling accountCartAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountCartAdd200Response;
      return this.apiClient.callApi(
        '/account.cart.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountCartList operation.
     * @callback module:api/AccountApi~accountCartListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountCartList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of carts.
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [requestFromDate] Retrieve entities from their creation date
     * @param {String} [requestToDate] Retrieve entities to their creation date
     * @param {String} [storeUrl] A web address of a store
     * @param {String} [storeKey] Find store by store key
     * @param {module:api/AccountApi~accountCartListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountCartList200Response}
     */
    accountCartList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params'],
        'exclude': opts['exclude'],
        'request_from_date': opts['requestFromDate'],
        'request_to_date': opts['requestToDate'],
        'store_url': opts['storeUrl'],
        'store_key': opts['storeKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountCartList200Response;
      return this.apiClient.callApi(
        '/account.cart.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountConfigUpdate operation.
     * @callback module:api/AccountApi~accountConfigUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update configs in the API2Cart database.
     * @param {Object} opts Optional parameters
     * @param {String} [newStoreKey] Update store key
     * @param {String} [bridgeUrl] This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
     * @param {String} [storeRoot] Absolute path to the store root directory (used with \"bridge_url\" parameter)
     * @param {String} [dbTablesPrefix] DB tables prefix
     * @param {String} [_3dcartPrivateKey] 3DCart Private Key
     * @param {String} [_3dcartAccessToken] 3DCart Token
     * @param {String} [_3dcartapiApiKey] 3DCart API Key
     * @param {String} [amazonSpClientId] Amazon SP API app client id
     * @param {String} [amazonSpClientSecret] Amazon SP API app client secret
     * @param {String} [amazonSpAwsUserKeyId] Amazon AWS user access key ID
     * @param {String} [amazonSpAwsUserSecret] Amazon AWS user secret access key
     * @param {String} [amazonSpAwsRegion] Amazon AWS Region
     * @param {String} [amazonSpAwsRoleArn] Amazon AWS Role ARN
     * @param {String} [amazonSpRefreshToken] Amazon SP API OAuth refresh token
     * @param {String} [amazonSpApiEnvironment = 'production')] Amazon SP API environment
     * @param {String} [amazonAccessToken] MWS Auth Token. Access token authorizing the app to access resources on behalf of a user
     * @param {String} [amazonSellerId] Amazon Seller ID (Merchant token)
     * @param {String} [amazonMarketplacesIds] Amazon Marketplace IDs comma separated string
     * @param {String} [amazonSecretKey] Amazon Secret Key
     * @param {String} [amazonAccessKeyId] Amazon Secret Key Id
     * @param {String} [aspdotnetstorefrontApiUser] It's a AspDotNetStorefront account for which API is available
     * @param {String} [aspdotnetstorefrontApiPass] AspDotNetStorefront API Password
     * @param {String} [bigcommerceapiAdminAccount] It's a BigCommerce account for which API is enabled
     * @param {String} [bigcommerceapiApiPath] BigCommerce API URL
     * @param {String} [bigcommerceapiApiKey] Bigcommerce API Key
     * @param {String} [bigcommerceapiClientId] Client ID of the requesting app
     * @param {String} [bigcommerceapiAccessToken] Access token authorizing the app to access resources on behalf of a user
     * @param {String} [bigcommerceapiContext] API Path section unique to the store
     * @param {String} [demandwareClientId] Demandware client id
     * @param {String} [demandwareApiPassword] Demandware api password
     * @param {String} [demandwareUserName] Demandware user name
     * @param {String} [demandwareUserPassword] Demandware user password
     * @param {String} [ebayClientId] Application ID (AppID).
     * @param {String} [ebayClientSecret] Shared Secret from eBay application
     * @param {String} [ebayRuname] The RuName value that eBay assigns to your application.
     * @param {String} [ebayAccessToken] Used to authenticate API requests.
     * @param {String} [ebayRefreshToken] Used to renew the access token.
     * @param {String} [ebayEnvironment] eBay environment
     * @param {Number} [ebaySiteId = 0)] eBay global ID
     * @param {String} [ecwidAcessToken] Access token authorizing the app to access resources on behalf of a user
     * @param {String} [ecwidStoreId] Store Id
     * @param {String} [etsyKeystring] Etsy keystring
     * @param {String} [etsySharedSecret] Etsy shared secret
     * @param {String} [etsyAccessToken] Access token authorizing the app to access resources on behalf of a user
     * @param {String} [etsyTokenSecret] Secret token authorizing the app to access resources on behalf of a user
     * @param {String} [etsyClientId] Etsy Client Id
     * @param {String} [etsyRefreshToken] Etsy Refresh token
     * @param {String} [netoApiKey] Neto API Key
     * @param {String} [netoApiUsername] Neto User Name
     * @param {String} [shopifyApiKey] Shopify API Key
     * @param {String} [shopifyApiPassword] Shopify API Password
     * @param {String} [shopifySharedSecret] Shared secret
     * @param {String} [shopifyAccessToken] Access token authorizing the app to access resources on behalf of a user
     * @param {String} [shopwareAccessKey] Shopware access key
     * @param {String} [shopwareApiKey] Shopware api key
     * @param {String} [shopwareApiSecret] Shopware client secret access key
     * @param {String} [volusionLogin] It's a Volusion account for which API is enabled
     * @param {String} [volusionPassword] Volusion API Password
     * @param {String} [walmartClientId] Walmart client ID
     * @param {String} [walmartClientSecret] Walmart client secret
     * @param {String} [walmartEnvironment = 'production')] Walmart environment
     * @param {String} [walmartChannelType] Walmart WM_CONSUMER.CHANNEL.TYPE header
     * @param {String} [squarespaceApiKey] Squarespace API Key
     * @param {String} [hybrisClientId] Omni Commerce Connector Client ID
     * @param {String} [hybrisClientSecret] Omni Commerce Connector Client Secret
     * @param {String} [hybrisUsername] User Name
     * @param {String} [hybrisPassword] User password
     * @param {Array.<String>} [hybrisWebsites] Websites to stores mapping data
     * @param {String} [lightspeedApiKey] LightSpeed api key
     * @param {String} [lightspeedApiSecret] LightSpeed api secret
     * @param {String} [commercehqApiKey] CommerceHQ api key
     * @param {String} [commercehqApiPassword] CommerceHQ api password
     * @param {String} [wcConsumerKey] Woocommerce consumer key
     * @param {String} [wcConsumerSecret] Woocommerce consumer secret
     * @param {String} [magentoConsumerKey] Magento Consumer Key
     * @param {String} [magentoConsumerSecret] Magento Consumer Secret
     * @param {String} [magentoAccessToken] Magento Access Token
     * @param {String} [magentoTokenSecret] Magento Token Secret
     * @param {String} [prestashopWebserviceKey] Prestashop webservice key
     * @param {String} [wixAppId] Wix App ID
     * @param {String} [wixAppSecretKey] Wix App Secret Key
     * @param {String} [wixRefreshToken] Wix refresh token
     * @param {String} [mercadoLibreAppId] Mercado Libre App ID
     * @param {String} [mercadoLibreAppSecretKey] Mercado Libre App Secret Key
     * @param {String} [mercadoLibreRefreshToken] Mercado Libre Refresh Token
     * @param {Number} [zidClientId] Zid Client ID
     * @param {String} [zidClientSecret] Zid Client Secret
     * @param {String} [zidAccessToken] Zid Access Token
     * @param {String} [zidAuthorization] Zid Authorization
     * @param {String} [zidRefreshToken] Zid refresh token
     * @param {module:api/AccountApi~accountConfigUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    accountConfigUpdate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'new_store_key': opts['newStoreKey'],
        'bridge_url': opts['bridgeUrl'],
        'store_root': opts['storeRoot'],
        'db_tables_prefix': opts['dbTablesPrefix'],
        '3dcart_private_key': opts['_3dcartPrivateKey'],
        '3dcart_access_token': opts['_3dcartAccessToken'],
        '3dcartapi_api_key': opts['_3dcartapiApiKey'],
        'amazon_sp_client_id': opts['amazonSpClientId'],
        'amazon_sp_client_secret': opts['amazonSpClientSecret'],
        'amazon_sp_aws_user_key_id': opts['amazonSpAwsUserKeyId'],
        'amazon_sp_aws_user_secret': opts['amazonSpAwsUserSecret'],
        'amazon_sp_aws_region': opts['amazonSpAwsRegion'],
        'amazon_sp_aws_role_arn': opts['amazonSpAwsRoleArn'],
        'amazon_sp_refresh_token': opts['amazonSpRefreshToken'],
        'amazon_sp_api_environment': opts['amazonSpApiEnvironment'],
        'amazon_access_token': opts['amazonAccessToken'],
        'amazon_seller_id': opts['amazonSellerId'],
        'amazon_marketplaces_ids': opts['amazonMarketplacesIds'],
        'amazon_secret_key': opts['amazonSecretKey'],
        'amazon_access_key_id': opts['amazonAccessKeyId'],
        'aspdotnetstorefront_api_user': opts['aspdotnetstorefrontApiUser'],
        'aspdotnetstorefront_api_pass': opts['aspdotnetstorefrontApiPass'],
        'bigcommerceapi_admin_account': opts['bigcommerceapiAdminAccount'],
        'bigcommerceapi_api_path': opts['bigcommerceapiApiPath'],
        'bigcommerceapi_api_key': opts['bigcommerceapiApiKey'],
        'bigcommerceapi_client_id': opts['bigcommerceapiClientId'],
        'bigcommerceapi_access_token': opts['bigcommerceapiAccessToken'],
        'bigcommerceapi_context': opts['bigcommerceapiContext'],
        'demandware_client_id': opts['demandwareClientId'],
        'demandware_api_password': opts['demandwareApiPassword'],
        'demandware_user_name': opts['demandwareUserName'],
        'demandware_user_password': opts['demandwareUserPassword'],
        'ebay_client_id': opts['ebayClientId'],
        'ebay_client_secret': opts['ebayClientSecret'],
        'ebay_runame': opts['ebayRuname'],
        'ebay_access_token': opts['ebayAccessToken'],
        'ebay_refresh_token': opts['ebayRefreshToken'],
        'ebay_environment': opts['ebayEnvironment'],
        'ebay_site_id': opts['ebaySiteId'],
        'ecwid_acess_token': opts['ecwidAcessToken'],
        'ecwid_store_id': opts['ecwidStoreId'],
        'etsy_keystring': opts['etsyKeystring'],
        'etsy_shared_secret': opts['etsySharedSecret'],
        'etsy_access_token': opts['etsyAccessToken'],
        'etsy_token_secret': opts['etsyTokenSecret'],
        'etsy_client_id': opts['etsyClientId'],
        'etsy_refresh_token': opts['etsyRefreshToken'],
        'neto_api_key': opts['netoApiKey'],
        'neto_api_username': opts['netoApiUsername'],
        'shopify_api_key': opts['shopifyApiKey'],
        'shopify_api_password': opts['shopifyApiPassword'],
        'shopify_shared_secret': opts['shopifySharedSecret'],
        'shopify_access_token': opts['shopifyAccessToken'],
        'shopware_access_key': opts['shopwareAccessKey'],
        'shopware_api_key': opts['shopwareApiKey'],
        'shopware_api_secret': opts['shopwareApiSecret'],
        'volusion_login': opts['volusionLogin'],
        'volusion_password': opts['volusionPassword'],
        'walmart_client_id': opts['walmartClientId'],
        'walmart_client_secret': opts['walmartClientSecret'],
        'walmart_environment': opts['walmartEnvironment'],
        'walmart_channel_type': opts['walmartChannelType'],
        'squarespace_api_key': opts['squarespaceApiKey'],
        'hybris_client_id': opts['hybrisClientId'],
        'hybris_client_secret': opts['hybrisClientSecret'],
        'hybris_username': opts['hybrisUsername'],
        'hybris_password': opts['hybrisPassword'],
        'hybris_websites': this.apiClient.buildCollectionParam(opts['hybrisWebsites'], 'csv'),
        'lightspeed_api_key': opts['lightspeedApiKey'],
        'lightspeed_api_secret': opts['lightspeedApiSecret'],
        'commercehq_api_key': opts['commercehqApiKey'],
        'commercehq_api_password': opts['commercehqApiPassword'],
        'wc_consumer_key': opts['wcConsumerKey'],
        'wc_consumer_secret': opts['wcConsumerSecret'],
        'magento_consumer_key': opts['magentoConsumerKey'],
        'magento_consumer_secret': opts['magentoConsumerSecret'],
        'magento_access_token': opts['magentoAccessToken'],
        'magento_token_secret': opts['magentoTokenSecret'],
        'prestashop_webservice_key': opts['prestashopWebserviceKey'],
        'wix_app_id': opts['wixAppId'],
        'wix_app_secret_key': opts['wixAppSecretKey'],
        'wix_refresh_token': opts['wixRefreshToken'],
        'mercado_libre_app_id': opts['mercadoLibreAppId'],
        'mercado_libre_app_secret_key': opts['mercadoLibreAppSecretKey'],
        'mercado_libre_refresh_token': opts['mercadoLibreRefreshToken'],
        'zid_client_id': opts['zidClientId'],
        'zid_client_secret': opts['zidClientSecret'],
        'zid_access_token': opts['zidAccessToken'],
        'zid_authorization': opts['zidAuthorization'],
        'zid_refresh_token': opts['zidRefreshToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/account.config.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountFailedWebhooks operation.
     * @callback module:api/AccountApi~accountFailedWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountFailedWebhooks200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List webhooks that was not delivered to the callback.
     * @param {Object} opts Optional parameters
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {String} [ids] List of сomma-separated webhook ids
     * @param {module:api/AccountApi~accountFailedWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountFailedWebhooks200Response}
     */
    accountFailedWebhooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'start': opts['start'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountFailedWebhooks200Response;
      return this.apiClient.callApi(
        '/account.failed_webhooks.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountSupportedPlatforms operation.
     * @callback module:api/AccountApi~accountSupportedPlatformsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountSupportedPlatforms200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of supported platforms
     * @param {module:api/AccountApi~accountSupportedPlatformsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountSupportedPlatforms200Response}
     */
    accountSupportedPlatforms(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountSupportedPlatforms200Response;
      return this.apiClient.callApi(
        '/account.supported_platforms.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
