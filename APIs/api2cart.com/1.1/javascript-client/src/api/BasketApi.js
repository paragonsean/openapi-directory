/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BasketInfo200Response from '../model/BasketInfo200Response';
import BasketItemAdd200Response from '../model/BasketItemAdd200Response';
import BasketLiveShippingServiceCreate200Response from '../model/BasketLiveShippingServiceCreate200Response';
import BasketLiveShippingServiceDelete200Response from '../model/BasketLiveShippingServiceDelete200Response';
import BasketLiveShippingServiceList200Response from '../model/BasketLiveShippingServiceList200Response';

/**
* Basket service.
* @module api/BasketApi
* @version 1.1
*/
export default class BasketApi {

    /**
    * Constructs a new BasketApi. 
    * @alias module:api/BasketApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the basketInfo operation.
     * @callback module:api/BasketApi~basketInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve basket information.
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/BasketApi~basketInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketInfo200Response}
     */
    basketInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling basketInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketInfo200Response;
      return this.apiClient.callApi(
        '/basket.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketItemAdd operation.
     * @callback module:api/BasketApi~basketItemAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketItemAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add item to basket
     * @param {String} customerId Retrieves orders specified by customer id
     * @param {String} productId Defines id of the product which should be added to the basket
     * @param {Object} opts Optional parameters
     * @param {String} [variantId] Defines product's variants specified by variant id
     * @param {Number} [quantity = 0)] Defines new items quantity
     * @param {String} [storeId] Store Id
     * @param {module:api/BasketApi~basketItemAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketItemAdd200Response}
     */
    basketItemAdd(customerId, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling basketItemAdd");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling basketItemAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'customer_id': customerId,
        'product_id': productId,
        'variant_id': opts['variantId'],
        'quantity': opts['quantity'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketItemAdd200Response;
      return this.apiClient.callApi(
        '/basket.item.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketLiveShippingServiceCreate operation.
     * @callback module:api/BasketApi~basketLiveShippingServiceCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketLiveShippingServiceCreate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create live shipping rate service.
     * @param {String} name Shipping Service Name
     * @param {String} callback Callback url that returns shipping rates. It should be able to accept POST requests with json data.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/BasketApi~basketLiveShippingServiceCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketLiveShippingServiceCreate200Response}
     */
    basketLiveShippingServiceCreate(name, callback, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketLiveShippingServiceCreate");
      }
      // verify the required parameter 'callback' is set
      if (callback === undefined || callback === null) {
        throw new Error("Missing the required parameter 'callback' when calling basketLiveShippingServiceCreate");
      }

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'name': name,
        'callback': callback
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketLiveShippingServiceCreate200Response;
      return this.apiClient.callApi(
        '/basket.live_shipping_service.create.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketLiveShippingServiceDelete operation.
     * @callback module:api/BasketApi~basketLiveShippingServiceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketLiveShippingServiceDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete live shipping rate service.
     * @param {Number} id Entity id
     * @param {module:api/BasketApi~basketLiveShippingServiceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketLiveShippingServiceDelete200Response}
     */
    basketLiveShippingServiceDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling basketLiveShippingServiceDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketLiveShippingServiceDelete200Response;
      return this.apiClient.callApi(
        '/basket.live_shipping_service.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketLiveShippingServiceList operation.
     * @callback module:api/BasketApi~basketLiveShippingServiceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasketLiveShippingServiceList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of live shipping rate services.
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {module:api/BasketApi~basketLiveShippingServiceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasketLiveShippingServiceList200Response}
     */
    basketLiveShippingServiceList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'start': opts['start'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketLiveShippingServiceList200Response;
      return this.apiClient.callApi(
        '/basket.live_shipping_service.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
