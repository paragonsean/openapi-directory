/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountConfigUpdate200Response from '../model/AccountConfigUpdate200Response';
import ModelResponseOrderAbandonedList from '../model/ModelResponseOrderAbandonedList';
import ModelResponseOrderList from '../model/ModelResponseOrderList';
import ModelResponseOrderPreestimateShippingList from '../model/ModelResponseOrderPreestimateShippingList';
import ModelResponseOrderShipmentList from '../model/ModelResponseOrderShipmentList';
import ModelResponseOrderTransactionList from '../model/ModelResponseOrderTransactionList';
import OrderAdd from '../model/OrderAdd';
import OrderAdd200Response from '../model/OrderAdd200Response';
import OrderCount200Response from '../model/OrderCount200Response';
import OrderFinancialStatusList200Response from '../model/OrderFinancialStatusList200Response';
import OrderFind200Response from '../model/OrderFind200Response';
import OrderFulfillmentStatusList200Response from '../model/OrderFulfillmentStatusList200Response';
import OrderInfo200Response from '../model/OrderInfo200Response';
import OrderPreestimateShippingList from '../model/OrderPreestimateShippingList';
import OrderRefundAdd from '../model/OrderRefundAdd';
import OrderRefundAdd200Response from '../model/OrderRefundAdd200Response';
import OrderShipmentAdd from '../model/OrderShipmentAdd';
import OrderShipmentAdd200Response from '../model/OrderShipmentAdd200Response';
import OrderShipmentDelete200Response from '../model/OrderShipmentDelete200Response';
import OrderShipmentTrackingAdd from '../model/OrderShipmentTrackingAdd';
import OrderShipmentTrackingAdd200Response from '../model/OrderShipmentTrackingAdd200Response';
import OrderShipmentUpdate from '../model/OrderShipmentUpdate';
import OrderStatusList200Response from '../model/OrderStatusList200Response';

/**
* Order service.
* @module api/OrderApi
* @version 1.1
*/
export default class OrderApi {

    /**
    * Constructs a new OrderApi. 
    * @alias module:api/OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the orderAbandonedList operation.
     * @callback module:api/OrderApi~orderAbandonedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderAbandonedList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of orders that were left by customers before completing the order.
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] Retrieves orders specified by customer id
     * @param {String} [customerEmail] Retrieves orders specified by customer email
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {Boolean} [skipEmptyEmail = false)] Filter empty emails
     * @param {String} [storeId] Store Id
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {String} [params = 'customer,totals,items')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/OrderApi~orderAbandonedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderAbandonedList}
     */
    orderAbandonedList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'customer_id': opts['customerId'],
        'customer_email': opts['customerEmail'],
        'created_to': opts['createdTo'],
        'created_from': opts['createdFrom'],
        'modified_to': opts['modifiedTo'],
        'modified_from': opts['modifiedFrom'],
        'skip_empty_email': opts['skipEmptyEmail'],
        'store_id': opts['storeId'],
        'page_cursor': opts['pageCursor'],
        'count': opts['count'],
        'start': opts['start'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderAbandonedList;
      return this.apiClient.callApi(
        '/order.abandoned.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderAdd operation.
     * @callback module:api/OrderApi~orderAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new order to the cart.
     * @param {module:model/OrderAdd} orderAdd 
     * @param {module:api/OrderApi~orderAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderAdd200Response}
     */
    orderAdd(orderAdd, callback) {
      let postBody = orderAdd;
      // verify the required parameter 'orderAdd' is set
      if (orderAdd === undefined || orderAdd === null) {
        throw new Error("Missing the required parameter 'orderAdd' when calling orderAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderAdd200Response;
      return this.apiClient.callApi(
        '/order.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderCount operation.
     * @callback module:api/OrderApi~orderCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count orders in store
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] Counts orders quantity specified by customer id
     * @param {String} [customerEmail] Counts orders quantity specified by customer email
     * @param {String} [orderStatus] Counts orders quantity specified by order status
     * @param {Array.<String>} [orderStatusIds] Retrieves orders specified by order statuses
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [storeId] Counts orders quantity specified by store id
     * @param {String} [ids] Counts orders specified by ids
     * @param {String} [orderIds] Counts orders specified by order ids
     * @param {String} [ebayOrderStatus] Counts orders quantity specified by order status
     * @param {String} [financialStatus] Counts orders quantity specified by financial status
     * @param {String} [fulfillmentStatus] Create order with fulfillment status
     * @param {String} [shippingMethod] Retrieve entities according to shipping method
     * @param {String} [deliveryMethod] Retrieves order with delivery method
     * @param {String} [shipNodeType] Retrieves order with ship node type
     * @param {module:api/OrderApi~orderCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderCount200Response}
     */
    orderCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'customer_id': opts['customerId'],
        'customer_email': opts['customerEmail'],
        'order_status': opts['orderStatus'],
        'order_status_ids': this.apiClient.buildCollectionParam(opts['orderStatusIds'], 'csv'),
        'created_to': opts['createdTo'],
        'created_from': opts['createdFrom'],
        'modified_to': opts['modifiedTo'],
        'modified_from': opts['modifiedFrom'],
        'store_id': opts['storeId'],
        'ids': opts['ids'],
        'order_ids': opts['orderIds'],
        'ebay_order_status': opts['ebayOrderStatus'],
        'financial_status': opts['financialStatus'],
        'fulfillment_status': opts['fulfillmentStatus'],
        'shipping_method': opts['shippingMethod'],
        'delivery_method': opts['deliveryMethod'],
        'ship_node_type': opts['shipNodeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderCount200Response;
      return this.apiClient.callApi(
        '/order.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderFinancialStatusList operation.
     * @callback module:api/OrderApi~orderFinancialStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderFinancialStatusList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of financial statuses
     * @param {module:api/OrderApi~orderFinancialStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderFinancialStatusList200Response}
     */
    orderFinancialStatusList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderFinancialStatusList200Response;
      return this.apiClient.callApi(
        '/order.financial_status.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderFind operation.
     * @callback module:api/OrderApi~orderFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] Retrieves orders specified by customer id
     * @param {String} [customerEmail] Retrieves orders specified by customer email
     * @param {String} [orderStatus] Retrieves orders specified by order status
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'order_id,customer,totals,address,items,bundles,status')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [financialStatus] Retrieves orders specified by financial status
     * @param {module:api/OrderApi~orderFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderFind200Response}
     */
    orderFind(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'customer_id': opts['customerId'],
        'customer_email': opts['customerEmail'],
        'order_status': opts['orderStatus'],
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'created_to': opts['createdTo'],
        'created_from': opts['createdFrom'],
        'modified_to': opts['modifiedTo'],
        'modified_from': opts['modifiedFrom'],
        'financial_status': opts['financialStatus']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderFind200Response;
      return this.apiClient.callApi(
        '/order.find.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderFulfillmentStatusList operation.
     * @callback module:api/OrderApi~orderFulfillmentStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderFulfillmentStatusList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of fulfillment statuses
     * @param {module:api/OrderApi~orderFulfillmentStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderFulfillmentStatusList200Response}
     */
    orderFulfillmentStatusList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderFulfillmentStatusList200Response;
      return this.apiClient.callApi(
        '/order.fulfillment_status.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderInfo operation.
     * @callback module:api/OrderApi~orderInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Info about a specific order by ID
     * @param {Object} opts Optional parameters
     * @param {String} [orderId] Retrieves order’s info specified by order id
     * @param {String} [id] Retrieves order info specified by id
     * @param {String} [params = 'order_id,customer,totals,address,items,bundles,status')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Defines store id where the order should be found
     * @param {Boolean} [enableCache = false)] If the value is 'true' and order exist in our cache, we will return order.info response from cache
     * @param {module:api/OrderApi~orderInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderInfo200Response}
     */
    orderInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_id': opts['orderId'],
        'id': opts['id'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'store_id': opts['storeId'],
        'enable_cache': opts['enableCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderInfo200Response;
      return this.apiClient.callApi(
        '/order.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderList operation.
     * @callback module:api/OrderApi~orderListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of orders from store.
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] Retrieves orders specified by customer id
     * @param {String} [customerEmail] Retrieves orders specified by customer email
     * @param {String} [phone] Filter orders by customer's phone number
     * @param {String} [orderStatus] Retrieves orders specified by order status
     * @param {Array.<String>} [orderStatusIds] Retrieves orders specified by order statuses
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve orders via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [sortBy = 'order_id')] Set field to sort by
     * @param {String} [sortDirection = 'asc')] Set sorting direction
     * @param {String} [params = 'order_id,customer,totals,address,items,bundles,status')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [storeId] Store Id
     * @param {String} [ids] Retrieves orders specified by ids
     * @param {String} [orderIds] Retrieves orders specified by order ids
     * @param {String} [ebayOrderStatus] Retrieves orders specified by order status
     * @param {String} [basketId] Retrieves order’s info specified by basket id.
     * @param {String} [financialStatus] Retrieves orders specified by financial status
     * @param {String} [fulfillmentStatus] Create order with fulfillment status
     * @param {String} [shippingMethod] Retrieve entities according to shipping method
     * @param {String} [skipOrderIds] Skipped orders by ids
     * @param {Number} [sinceId] Retrieve entities starting from the specified id.
     * @param {Boolean} [isDeleted] Filter deleted orders
     * @param {String} [shippingCountryIso3] Retrieve entities according to shipping country
     * @param {Boolean} [enableCache = false)] If the value is 'true', we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
     * @param {String} [deliveryMethod] Retrieves order with delivery method
     * @param {String} [shipNodeType] Retrieves order with ship node type
     * @param {String} [currencyId] Currency Id
     * @param {module:api/OrderApi~orderListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderList}
     */
    orderList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'customer_id': opts['customerId'],
        'customer_email': opts['customerEmail'],
        'phone': opts['phone'],
        'order_status': opts['orderStatus'],
        'order_status_ids': this.apiClient.buildCollectionParam(opts['orderStatusIds'], 'csv'),
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'created_to': opts['createdTo'],
        'created_from': opts['createdFrom'],
        'modified_to': opts['modifiedTo'],
        'modified_from': opts['modifiedFrom'],
        'store_id': opts['storeId'],
        'ids': opts['ids'],
        'order_ids': opts['orderIds'],
        'ebay_order_status': opts['ebayOrderStatus'],
        'basket_id': opts['basketId'],
        'financial_status': opts['financialStatus'],
        'fulfillment_status': opts['fulfillmentStatus'],
        'shipping_method': opts['shippingMethod'],
        'skip_order_ids': opts['skipOrderIds'],
        'since_id': opts['sinceId'],
        'is_deleted': opts['isDeleted'],
        'shipping_country_iso3': opts['shippingCountryIso3'],
        'enable_cache': opts['enableCache'],
        'delivery_method': opts['deliveryMethod'],
        'ship_node_type': opts['shipNodeType'],
        'currency_id': opts['currencyId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderList;
      return this.apiClient.callApi(
        '/order.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderPreestimateShippingList operation.
     * @callback module:api/OrderApi~orderPreestimateShippingListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderPreestimateShippingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of order preestimated shipping methods
     * @param {module:model/OrderPreestimateShippingList} orderPreestimateShippingList 
     * @param {module:api/OrderApi~orderPreestimateShippingListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderPreestimateShippingList}
     */
    orderPreestimateShippingList(orderPreestimateShippingList, callback) {
      let postBody = orderPreestimateShippingList;
      // verify the required parameter 'orderPreestimateShippingList' is set
      if (orderPreestimateShippingList === undefined || orderPreestimateShippingList === null) {
        throw new Error("Missing the required parameter 'orderPreestimateShippingList' when calling orderPreestimateShippingList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderPreestimateShippingList;
      return this.apiClient.callApi(
        '/order.preestimate_shipping.list.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderRefundAdd operation.
     * @callback module:api/OrderApi~orderRefundAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderRefundAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a refund to the order.
     * @param {module:model/OrderRefundAdd} orderRefundAdd 
     * @param {module:api/OrderApi~orderRefundAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderRefundAdd200Response}
     */
    orderRefundAdd(orderRefundAdd, callback) {
      let postBody = orderRefundAdd;
      // verify the required parameter 'orderRefundAdd' is set
      if (orderRefundAdd === undefined || orderRefundAdd === null) {
        throw new Error("Missing the required parameter 'orderRefundAdd' when calling orderRefundAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderRefundAdd200Response;
      return this.apiClient.callApi(
        '/order.refund.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentAdd operation.
     * @callback module:api/OrderApi~orderShipmentAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderShipmentAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a shipment to the order.
     * @param {module:model/OrderShipmentAdd} orderShipmentAdd 
     * @param {module:api/OrderApi~orderShipmentAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderShipmentAdd200Response}
     */
    orderShipmentAdd(orderShipmentAdd, callback) {
      let postBody = orderShipmentAdd;
      // verify the required parameter 'orderShipmentAdd' is set
      if (orderShipmentAdd === undefined || orderShipmentAdd === null) {
        throw new Error("Missing the required parameter 'orderShipmentAdd' when calling orderShipmentAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderShipmentAdd200Response;
      return this.apiClient.callApi(
        '/order.shipment.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentDelete operation.
     * @callback module:api/OrderApi~orderShipmentDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderShipmentDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete order's shipment.
     * @param {String} shipmentId Shipment id indicates the number of delivery
     * @param {String} orderId Defines the order for which the shipment will be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/OrderApi~orderShipmentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderShipmentDelete200Response}
     */
    orderShipmentDelete(shipmentId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling orderShipmentDelete");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderShipmentDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'shipment_id': shipmentId,
        'order_id': orderId,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderShipmentDelete200Response;
      return this.apiClient.callApi(
        '/order.shipment.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentInfo operation.
     * @callback module:api/OrderApi~orderShipmentInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderShipmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information of shipment.
     * @param {String} id Entity id
     * @param {String} orderId Defines the order id
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {String} [params = 'id,order_id,items,tracking_numbers')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Store Id
     * @param {module:api/OrderApi~orderShipmentInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderShipmentList}
     */
    orderShipmentInfo(id, orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling orderShipmentInfo");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderShipmentInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'order_id': orderId,
        'start': opts['start'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderShipmentList;
      return this.apiClient.callApi(
        '/order.shipment.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentList operation.
     * @callback module:api/OrderApi~orderShipmentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderShipmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of shipments by orders.
     * @param {String} orderId Retrieves shipments specified by order id
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'id,order_id,items,tracking_numbers')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [storeId] Store Id
     * @param {module:api/OrderApi~orderShipmentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderShipmentList}
     */
    orderShipmentList(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderShipmentList");
      }

      let pathParams = {
      };
      let queryParams = {
        'order_id': orderId,
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderShipmentList;
      return this.apiClient.callApi(
        '/order.shipment.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentTrackingAdd operation.
     * @callback module:api/OrderApi~orderShipmentTrackingAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderShipmentTrackingAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add order shipment's tracking info.
     * @param {module:model/OrderShipmentTrackingAdd} orderShipmentTrackingAdd 
     * @param {module:api/OrderApi~orderShipmentTrackingAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderShipmentTrackingAdd200Response}
     */
    orderShipmentTrackingAdd(orderShipmentTrackingAdd, callback) {
      let postBody = orderShipmentTrackingAdd;
      // verify the required parameter 'orderShipmentTrackingAdd' is set
      if (orderShipmentTrackingAdd === undefined || orderShipmentTrackingAdd === null) {
        throw new Error("Missing the required parameter 'orderShipmentTrackingAdd' when calling orderShipmentTrackingAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderShipmentTrackingAdd200Response;
      return this.apiClient.callApi(
        '/order.shipment.tracking.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderShipmentUpdate operation.
     * @callback module:api/OrderApi~orderShipmentUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update order's shipment information.
     * @param {module:model/OrderShipmentUpdate} orderShipmentUpdate 
     * @param {module:api/OrderApi~orderShipmentUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    orderShipmentUpdate(orderShipmentUpdate, callback) {
      let postBody = orderShipmentUpdate;
      // verify the required parameter 'orderShipmentUpdate' is set
      if (orderShipmentUpdate === undefined || orderShipmentUpdate === null) {
        throw new Error("Missing the required parameter 'orderShipmentUpdate' when calling orderShipmentUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/order.shipment.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderStatusList operation.
     * @callback module:api/OrderApi~orderStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatusList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of statuses
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/OrderApi~orderStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStatusList200Response}
     */
    orderStatusList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderStatusList200Response;
      return this.apiClient.callApi(
        '/order.status.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderTransactionList operation.
     * @callback module:api/OrderApi~orderTransactionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseOrderTransactionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve list of order transaction
     * @param {String} orderIds Retrieves order transactions specified by order ids
     * @param {Object} opts Optional parameters
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [storeId] Store Id
     * @param {String} [params = 'id,order_id,amount,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {module:api/OrderApi~orderTransactionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseOrderTransactionList}
     */
    orderTransactionList(orderIds, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderIds' is set
      if (orderIds === undefined || orderIds === null) {
        throw new Error("Missing the required parameter 'orderIds' when calling orderTransactionList");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'order_ids': orderIds,
        'store_id': opts['storeId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'page_cursor': opts['pageCursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseOrderTransactionList;
      return this.apiClient.callApi(
        '/order.transaction.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the orderUpdate operation.
     * @callback module:api/OrderApi~orderUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing order.
     * @param {String} orderId Defines the orders specified by order id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Defines store id where the order should be found
     * @param {String} [orderStatus] Defines new order's status
     * @param {String} [comment] Specifies order comment
     * @param {String} [adminComment] Specifies admin's order comment
     * @param {String} [adminPrivateComment] Specifies private admin's order comment
     * @param {String} [dateModified] Specifies order's  modification date
     * @param {String} [dateFinished] Specifies order's  finished date
     * @param {String} [financialStatus] Update order financial status to specified
     * @param {String} [fulfillmentStatus] Create order with fulfillment status
     * @param {String} [orderPaymentMethod] Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
     * @param {Boolean} [sendNotifications = false)] Send notifications to customer after order was created
     * @param {module:api/OrderApi~orderUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    orderUpdate(orderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling orderUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'order_id': orderId,
        'store_id': opts['storeId'],
        'order_status': opts['orderStatus'],
        'comment': opts['comment'],
        'admin_comment': opts['adminComment'],
        'admin_private_comment': opts['adminPrivateComment'],
        'date_modified': opts['dateModified'],
        'date_finished': opts['dateFinished'],
        'financial_status': opts['financialStatus'],
        'fulfillment_status': opts['fulfillmentStatus'],
        'order_payment_method': opts['orderPaymentMethod'],
        'send_notifications': opts['sendNotifications']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/order.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
