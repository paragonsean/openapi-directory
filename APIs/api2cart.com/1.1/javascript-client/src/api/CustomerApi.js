/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomerAdd from '../model/CustomerAdd';
import CustomerAdd200Response from '../model/CustomerAdd200Response';
import CustomerCount200Response from '../model/CustomerCount200Response';
import CustomerFind200Response from '../model/CustomerFind200Response';
import CustomerGroupAdd200Response from '../model/CustomerGroupAdd200Response';
import CustomerInfo200Response from '../model/CustomerInfo200Response';
import CustomerUpdate from '../model/CustomerUpdate';
import CustomerUpdate200Response from '../model/CustomerUpdate200Response';
import CustomerWishlistList200Response from '../model/CustomerWishlistList200Response';
import ModelResponseCustomerAttributeList from '../model/ModelResponseCustomerAttributeList';
import ModelResponseCustomerGroupList from '../model/ModelResponseCustomerGroupList';
import ModelResponseCustomerList from '../model/ModelResponseCustomerList';

/**
* Customer service.
* @module api/CustomerApi
* @version 1.1
*/
export default class CustomerApi {

    /**
    * Constructs a new CustomerApi. 
    * @alias module:api/CustomerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the customerAdd operation.
     * @callback module:api/CustomerApi~customerAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add customer into store.
     * @param {module:model/CustomerAdd} customerAdd 
     * @param {module:api/CustomerApi~customerAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerAdd200Response}
     */
    customerAdd(customerAdd, callback) {
      let postBody = customerAdd;
      // verify the required parameter 'customerAdd' is set
      if (customerAdd === undefined || customerAdd === null) {
        throw new Error("Missing the required parameter 'customerAdd' when calling customerAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerAdd200Response;
      return this.apiClient.callApi(
        '/customer.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerAttributeList operation.
     * @callback module:api/CustomerApi~customerAttributeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCustomerAttributeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes for specific customer
     * @param {String} customerId Retrieves orders specified by customer id
     * @param {Object} opts Optional parameters
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/CustomerApi~customerAttributeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCustomerAttributeList}
     */
    customerAttributeList(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerAttributeList");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'customer_id': customerId,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCustomerAttributeList;
      return this.apiClient.callApi(
        '/customer.attribute.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerCount operation.
     * @callback module:api/CustomerApi~customerCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get number of customers from store.
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] Customer group_id
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [storeId] Counts customer specified by store id
     * @param {String} [customerListId] The numeric ID of the customer list in Demandware.
     * @param {Boolean} [avail = true)] Defines category's visibility status
     * @param {module:api/CustomerApi~customerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerCount200Response}
     */
    customerCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'group_id': opts['groupId'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'store_id': opts['storeId'],
        'customer_list_id': opts['customerListId'],
        'avail': opts['avail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerCount200Response;
      return this.apiClient.callApi(
        '/customer.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerFind operation.
     * @callback module:api/CustomerApi~customerFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find customers in store.
     * @param {String} findValue Entity search that is specified by some value
     * @param {Object} opts Optional parameters
     * @param {String} [findWhere = 'email')] Entity search that is specified by the comma-separated unique fields
     * @param {String} [findParams = 'whole_words')] Entity search that is specified by comma-separated parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/CustomerApi~customerFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerFind200Response}
     */
    customerFind(findValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'findValue' is set
      if (findValue === undefined || findValue === null) {
        throw new Error("Missing the required parameter 'findValue' when calling customerFind");
      }

      let pathParams = {
      };
      let queryParams = {
        'find_value': findValue,
        'find_where': opts['findWhere'],
        'find_params': opts['findParams'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerFind200Response;
      return this.apiClient.callApi(
        '/customer.find.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGroupAdd operation.
     * @callback module:api/CustomerApi~customerGroupAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerGroupAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create customer group.
     * @param {String} name Customer group name
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [storesIds] Assign customer group to the stores that is specified by comma-separated stores' id
     * @param {module:api/CustomerApi~customerGroupAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerGroupAdd200Response}
     */
    customerGroupAdd(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling customerGroupAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'store_id': opts['storeId'],
        'stores_ids': opts['storesIds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerGroupAdd200Response;
      return this.apiClient.callApi(
        '/customer.group.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerGroupList operation.
     * @callback module:api/CustomerApi~customerGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCustomerGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of customers groups.
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [groupIds] Groups that will be assigned to a customer
     * @param {String} [params = 'id,name,additional_fields')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/CustomerApi~customerGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCustomerGroupList}
     */
    customerGroupList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'group_ids': opts['groupIds'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCustomerGroupList;
      return this.apiClient.callApi(
        '/customer.group.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerInfo operation.
     * @callback module:api/CustomerApi~customerInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customers' details from store.
     * @param {String} id Retrieves customer's info specified by customer id
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'id,email,first_name,last_name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Retrieves customer info specified by store id
     * @param {module:api/CustomerApi~customerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerInfo200Response}
     */
    customerInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling customerInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerInfo200Response;
      return this.apiClient.callApi(
        '/customer.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerList operation.
     * @callback module:api/CustomerApi~customerListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseCustomerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of customers from store.
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [params = 'id,email,first_name,last_name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [groupId] Customer group_id
     * @param {String} [storeId] Retrieves customers specified by store id
     * @param {String} [customerListId] The numeric ID of the customer list in Demandware.
     * @param {Boolean} [avail = true)] Defines category's visibility status
     * @param {module:api/CustomerApi~customerListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseCustomerList}
     */
    customerList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'group_id': opts['groupId'],
        'store_id': opts['storeId'],
        'customer_list_id': opts['customerListId'],
        'avail': opts['avail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseCustomerList;
      return this.apiClient.callApi(
        '/customer.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerUpdate operation.
     * @callback module:api/CustomerApi~customerUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update information of customer in store.
     * @param {module:model/CustomerUpdate} customerUpdate 
     * @param {module:api/CustomerApi~customerUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerUpdate200Response}
     */
    customerUpdate(customerUpdate, callback) {
      let postBody = customerUpdate;
      // verify the required parameter 'customerUpdate' is set
      if (customerUpdate === undefined || customerUpdate === null) {
        throw new Error("Missing the required parameter 'customerUpdate' when calling customerUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerUpdate200Response;
      return this.apiClient.callApi(
        '/customer.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the customerWishlistList operation.
     * @callback module:api/CustomerApi~customerWishlistListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerWishlistList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Wish List of customer from the store.
     * @param {String} customerId Retrieves orders specified by customer id
     * @param {Object} opts Optional parameters
     * @param {String} [id] Entity id
     * @param {String} [storeId] Store Id
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [responseFields = '{return_code,return_message,pagination,result}')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/CustomerApi~customerWishlistListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerWishlistList200Response}
     */
    customerWishlistList(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customerWishlistList");
      }

      let pathParams = {
      };
      let queryParams = {
        'customer_id': customerId,
        'id': opts['id'],
        'store_id': opts['storeId'],
        'start': opts['start'],
        'count': opts['count'],
        'page_cursor': opts['pageCursor'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerWishlistList200Response;
      return this.apiClient.callApi(
        '/customer.wishlist.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
