/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeAdd200Response from '../model/AttributeAdd200Response';
import AttributeDelete200Response from '../model/AttributeDelete200Response';
import ProductImageUpdate200Response from '../model/ProductImageUpdate200Response';
import WebhookCount200Response from '../model/WebhookCount200Response';
import WebhookEvents200Response from '../model/WebhookEvents200Response';
import WebhookList200Response from '../model/WebhookList200Response';

/**
* Webhook service.
* @module api/WebhookApi
* @version 1.1
*/
export default class WebhookApi {

    /**
    * Constructs a new WebhookApi. 
    * @alias module:api/WebhookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webhookCount operation.
     * @callback module:api/WebhookApi~webhookCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count registered webhooks on the store.
     * @param {Object} opts Optional parameters
     * @param {String} [entity] The entity you want to filter webhooks by (e.g. order or product)
     * @param {String} [action] The action you want to filter webhooks by (e.g. order or product)
     * @param {Boolean} [active] The webhook status you want to filter webhooks by
     * @param {module:api/WebhookApi~webhookCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookCount200Response}
     */
    webhookCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'entity': opts['entity'],
        'action': opts['action'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookCount200Response;
      return this.apiClient.callApi(
        '/webhook.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookCreate operation.
     * @callback module:api/WebhookApi~webhookCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create webhook on the store and subscribe to it.
     * @param {String} entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)
     * @param {String} action Specify what action (event) will trigger the webhook (e.g add, delete, or update)
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Callback url that returns shipping rates. It should be able to accept POST requests with json data.
     * @param {String} [label] The name you give to the webhook
     * @param {String} [fields = 'force_all')] Fields the webhook should send
     * @param {Boolean} [active = true)] Webhook status
     * @param {String} [storeId] Defines store id where the webhook should be assigned
     * @param {module:api/WebhookApi~webhookCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAdd200Response}
     */
    webhookCreate(entity, action, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling webhookCreate");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling webhookCreate");
      }

      let pathParams = {
      };
      let queryParams = {
        'entity': entity,
        'action': action,
        'callback': opts['callback'],
        'label': opts['label'],
        'fields': opts['fields'],
        'active': opts['active'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAdd200Response;
      return this.apiClient.callApi(
        '/webhook.create.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookDelete operation.
     * @callback module:api/WebhookApi~webhookDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete registered webhook on the store.
     * @param {String} id Webhook id
     * @param {module:api/WebhookApi~webhookDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    webhookDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhookDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/webhook.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookEvents operation.
     * @callback module:api/WebhookApi~webhookEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookEvents200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Webhooks that are available on this store.
     * @param {module:api/WebhookApi~webhookEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookEvents200Response}
     */
    webhookEvents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookEvents200Response;
      return this.apiClient.callApi(
        '/webhook.events.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookList operation.
     * @callback module:api/WebhookApi~webhookListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List registered webhook on the store.
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'id,entity,action,callback')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [entity] The entity you want to filter webhooks by (e.g. order or product)
     * @param {String} [action] The action you want to filter webhooks by (e.g. add, update, or delete)
     * @param {Boolean} [active] The webhook status you want to filter webhooks by
     * @param {String} [ids] List of —Åomma-separated webhook ids
     * @param {module:api/WebhookApi~webhookListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookList200Response}
     */
    webhookList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params'],
        'start': opts['start'],
        'count': opts['count'],
        'entity': opts['entity'],
        'action': opts['action'],
        'active': opts['active'],
        'ids': opts['ids']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookList200Response;
      return this.apiClient.callApi(
        '/webhook.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookUpdate operation.
     * @callback module:api/WebhookApi~webhookUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImageUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Webhooks parameters.
     * @param {String} id Webhook id
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Callback url that returns shipping rates. It should be able to accept POST requests with json data.
     * @param {String} [label] The name you give to the webhook
     * @param {String} [fields] Fields the webhook should send
     * @param {Boolean} [active] Webhook status
     * @param {module:api/WebhookApi~webhookUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImageUpdate200Response}
     */
    webhookUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling webhookUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'callback': opts['callback'],
        'label': opts['label'],
        'fields': opts['fields'],
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductImageUpdate200Response;
      return this.apiClient.callApi(
        '/webhook.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
