/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributeAdd200Response from '../model/AttributeAdd200Response';
import AttributeAssignGroup200Response from '../model/AttributeAssignGroup200Response';
import AttributeAttributesetList200Response from '../model/AttributeAttributesetList200Response';
import AttributeCount200Response from '../model/AttributeCount200Response';
import AttributeDelete200Response from '../model/AttributeDelete200Response';
import AttributeInfo200Response from '../model/AttributeInfo200Response';
import AttributeTypeList200Response from '../model/AttributeTypeList200Response';
import AttributeUnassignGroup200Response from '../model/AttributeUnassignGroup200Response';
import AttributeUpdate200Response from '../model/AttributeUpdate200Response';
import ModelResponseAttributeList from '../model/ModelResponseAttributeList';

/**
* Attribute service.
* @module api/AttributeApi
* @version 1.1
*/
export default class AttributeApi {

    /**
    * Constructs a new AttributeApi. 
    * @alias module:api/AttributeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attributeAdd operation.
     * @callback module:api/AttributeApi~attributeAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new attribute
     * @param {module:model/String} type Defines attribute's type
     * @param {String} name Defines attributes's name
     * @param {Object} opts Optional parameters
     * @param {String} [code] Entity code
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {Boolean} [visible = false)] Set visibility status
     * @param {Boolean} [required = false)] Defines if the option is required
     * @param {Number} [position = 0)] Attribute`s position
     * @param {String} [attributeGroupId] Filter by attribute_group_id
     * @param {String} [isGlobal = 'Store')] Attribute saving scope
     * @param {Boolean} [isSearchable = false)] Use attribute in Quick Search
     * @param {String} [isFilterable = 'false')] Use In Layered Navigation
     * @param {Boolean} [isComparable = false)] Comparable on Front-end
     * @param {Boolean} [isHtmlAllowedOnFront = false)] Allow HTML Tags on Frontend
     * @param {Boolean} [isFilterableInSearch = false)] Use In Search Results Layered Navigation
     * @param {Boolean} [isConfigurable = false)] Use To Create Configurable Product
     * @param {Boolean} [isVisibleInAdvancedSearch = false)] Use in Advanced Search
     * @param {Boolean} [isUsedForPromoRules = false)] Use for Promo Rule Conditions
     * @param {Boolean} [usedInProductListing = false)] Used in Product Listing
     * @param {Boolean} [usedForSortBy = false)] Used for Sorting in Product Listing
     * @param {String} [applyTo = 'all_types')] Types of products which can have this attribute
     * @param {module:api/AttributeApi~attributeAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAdd200Response}
     */
    attributeAdd(type, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling attributeAdd");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling attributeAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'code': opts['code'],
        'name': name,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'visible': opts['visible'],
        'required': opts['required'],
        'position': opts['position'],
        'attribute_group_id': opts['attributeGroupId'],
        'is_global': opts['isGlobal'],
        'is_searchable': opts['isSearchable'],
        'is_filterable': opts['isFilterable'],
        'is_comparable': opts['isComparable'],
        'is_html_allowed_on_front': opts['isHtmlAllowedOnFront'],
        'is_filterable_in_search': opts['isFilterableInSearch'],
        'is_configurable': opts['isConfigurable'],
        'is_visible_in_advanced_search': opts['isVisibleInAdvancedSearch'],
        'is_used_for_promo_rules': opts['isUsedForPromoRules'],
        'used_in_product_listing': opts['usedInProductListing'],
        'used_for_sort_by': opts['usedForSortBy'],
        'apply_to': opts['applyTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAdd200Response;
      return this.apiClient.callApi(
        '/attribute.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeAssignGroup operation.
     * @callback module:api/AttributeApi~attributeAssignGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAssignGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign attribute to the group
     * @param {String} id Entity id
     * @param {String} groupId Attribute group_id
     * @param {Object} opts Optional parameters
     * @param {String} [attributeSetId] Attribute set id
     * @param {module:api/AttributeApi~attributeAssignGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAssignGroup200Response}
     */
    attributeAssignGroup(id, groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributeAssignGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling attributeAssignGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'group_id': groupId,
        'attribute_set_id': opts['attributeSetId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAssignGroup200Response;
      return this.apiClient.callApi(
        '/attribute.assign.group.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeAssignSet operation.
     * @callback module:api/AttributeApi~attributeAssignSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAssignGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign attribute to the attribute set
     * @param {String} id Entity id
     * @param {String} attributeSetId Attribute set id
     * @param {Object} opts Optional parameters
     * @param {String} [groupId] Attribute group_id
     * @param {module:api/AttributeApi~attributeAssignSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAssignGroup200Response}
     */
    attributeAssignSet(id, attributeSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributeAssignSet");
      }
      // verify the required parameter 'attributeSetId' is set
      if (attributeSetId === undefined || attributeSetId === null) {
        throw new Error("Missing the required parameter 'attributeSetId' when calling attributeAssignSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'group_id': opts['groupId'],
        'attribute_set_id': attributeSetId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAssignGroup200Response;
      return this.apiClient.callApi(
        '/attribute.assign.set.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeAttributesetList operation.
     * @callback module:api/AttributeApi~attributeAttributesetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAttributesetList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attribute_set list
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'id,name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/AttributeApi~attributeAttributesetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAttributesetList200Response}
     */
    attributeAttributesetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAttributesetList200Response;
      return this.apiClient.callApi(
        '/attribute.attributeset.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeCount operation.
     * @callback module:api/AttributeApi~attributeCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes count
     * @param {Object} opts Optional parameters
     * @param {String} [type] Defines attribute's type
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {Boolean} [visible] Filter items by visibility status
     * @param {Boolean} [required] Defines if the option is required
     * @param {Boolean} [system] True if attribute is system
     * @param {module:api/AttributeApi~attributeCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeCount200Response}
     */
    attributeCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'visible': opts['visible'],
        'required': opts['required'],
        'system': opts['system']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeCount200Response;
      return this.apiClient.callApi(
        '/attribute.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeDelete operation.
     * @callback module:api/AttributeApi~attributeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attribute from store
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/AttributeApi~attributeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    attributeDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributeDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'store_id': opts['storeId'],
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/attribute.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeGroupList operation.
     * @callback module:api/AttributeApi~attributeGroupListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeAttributesetList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attribute group list
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [langId] Language id
     * @param {String} [params = 'id,name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [attributeSetId] Attribute set id
     * @param {module:api/AttributeApi~attributeGroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeAttributesetList200Response}
     */
    attributeGroupList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'lang_id': opts['langId'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields'],
        'attribute_set_id': opts['attributeSetId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeAttributesetList200Response;
      return this.apiClient.callApi(
        '/attribute.group.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeInfo operation.
     * @callback module:api/AttributeApi~attributeInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attribute info
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/AttributeApi~attributeInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeInfo200Response}
     */
    attributeInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributeInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeInfo200Response;
      return this.apiClient.callApi(
        '/attribute.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeList operation.
     * @callback module:api/AttributeApi~attributeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseAttributeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attributes list
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [type] Defines attribute's type
     * @param {String} [attributeIds] Filter attributes by ids
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Retrieves attributes on specified language id
     * @param {String} [params = 'id,name,code,type')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {Boolean} [visible] Filter items by visibility status
     * @param {Boolean} [required] Defines if the option is required
     * @param {Boolean} [system] True if attribute is system
     * @param {module:api/AttributeApi~attributeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseAttributeList}
     */
    attributeList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'type': opts['type'],
        'attribute_ids': opts['attributeIds'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields'],
        'visible': opts['visible'],
        'required': opts['required'],
        'system': opts['system']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseAttributeList;
      return this.apiClient.callApi(
        '/attribute.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeTypeList operation.
     * @callback module:api/AttributeApi~attributeTypeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeTypeList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of supported attributes types
     * @param {module:api/AttributeApi~attributeTypeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeTypeList200Response}
     */
    attributeTypeList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeTypeList200Response;
      return this.apiClient.callApi(
        '/attribute.type.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeUnassignGroup operation.
     * @callback module:api/AttributeApi~attributeUnassignGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeUnassignGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassign attribute from group
     * @param {String} id Entity id
     * @param {String} groupId Customer group_id
     * @param {module:api/AttributeApi~attributeUnassignGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeUnassignGroup200Response}
     */
    attributeUnassignGroup(id, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributeUnassignGroup");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling attributeUnassignGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'group_id': groupId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeUnassignGroup200Response;
      return this.apiClient.callApi(
        '/attribute.unassign.group.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeUnassignSet operation.
     * @callback module:api/AttributeApi~attributeUnassignSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeUnassignGroup200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassign attribute from attribute set
     * @param {String} id Entity id
     * @param {String} attributeSetId Attribute set id
     * @param {module:api/AttributeApi~attributeUnassignSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeUnassignGroup200Response}
     */
    attributeUnassignSet(id, attributeSetId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributeUnassignSet");
      }
      // verify the required parameter 'attributeSetId' is set
      if (attributeSetId === undefined || attributeSetId === null) {
        throw new Error("Missing the required parameter 'attributeSetId' when calling attributeUnassignSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'attribute_set_id': attributeSetId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeUnassignGroup200Response;
      return this.apiClient.callApi(
        '/attribute.unassign.set.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attributeUpdate operation.
     * @callback module:api/AttributeApi~attributeUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update attribute data
     * @param {String} id Entity id
     * @param {String} name Defines new attributes's name
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {module:api/AttributeApi~attributeUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeUpdate200Response}
     */
    attributeUpdate(id, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attributeUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling attributeUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'name': name,
        'store_id': opts['storeId'],
        'lang_id': opts['langId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeUpdate200Response;
      return this.apiClient.callApi(
        '/attribute.update.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
