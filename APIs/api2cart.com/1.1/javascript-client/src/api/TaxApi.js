/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TaxClassInfo200Response from '../model/TaxClassInfo200Response';

/**
* Tax service.
* @module api/TaxApi
* @version 1.1
*/
export default class TaxApi {

    /**
    * Constructs a new TaxApi. 
    * @alias module:api/TaxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the taxClassInfo operation.
     * @callback module:api/TaxApi~taxClassInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxClassInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get info about tax
     * @param {String} taxClassId Retrieves taxes specified by class id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [params = 'tax_class_id,name,avail')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/TaxApi~taxClassInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxClassInfo200Response}
     */
    taxClassInfo(taxClassId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxClassId' is set
      if (taxClassId === undefined || taxClassId === null) {
        throw new Error("Missing the required parameter 'taxClassId' when calling taxClassInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'tax_class_id': taxClassId,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaxClassInfo200Response;
      return this.apiClient.callApi(
        '/tax.class.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
