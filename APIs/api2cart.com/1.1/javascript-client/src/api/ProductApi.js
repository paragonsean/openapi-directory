/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountConfigUpdate200Response from '../model/AccountConfigUpdate200Response';
import AttributeDelete200Response from '../model/AttributeDelete200Response';
import CartConfigUpdate200Response from '../model/CartConfigUpdate200Response';
import CartValidate200Response from '../model/CartValidate200Response';
import ModelResponseProductAttributeList from '../model/ModelResponseProductAttributeList';
import ModelResponseProductChildItemList from '../model/ModelResponseProductChildItemList';
import ModelResponseProductList from '../model/ModelResponseProductList';
import ProductAdd from '../model/ProductAdd';
import ProductAdd200Response from '../model/ProductAdd200Response';
import ProductAttributeValueSet200Response from '../model/ProductAttributeValueSet200Response';
import ProductAttributeValueUnset200Response from '../model/ProductAttributeValueUnset200Response';
import ProductBrandList200Response from '../model/ProductBrandList200Response';
import ProductChildItemFind200Response from '../model/ProductChildItemFind200Response';
import ProductChildItemInfo200Response from '../model/ProductChildItemInfo200Response';
import ProductCount200Response from '../model/ProductCount200Response';
import ProductCurrencyAdd200Response from '../model/ProductCurrencyAdd200Response';
import ProductCurrencyList200Response from '../model/ProductCurrencyList200Response';
import ProductDelete200Response from '../model/ProductDelete200Response';
import ProductFind200Response from '../model/ProductFind200Response';
import ProductImageAdd from '../model/ProductImageAdd';
import ProductImageAdd200Response from '../model/ProductImageAdd200Response';
import ProductImageUpdate200Response from '../model/ProductImageUpdate200Response';
import ProductInfo200Response from '../model/ProductInfo200Response';
import ProductManufacturerAdd200Response from '../model/ProductManufacturerAdd200Response';
import ProductOptionAdd200Response from '../model/ProductOptionAdd200Response';
import ProductOptionAssign200Response from '../model/ProductOptionAssign200Response';
import ProductOptionList200Response from '../model/ProductOptionList200Response';
import ProductOptionValueAdd200Response from '../model/ProductOptionValueAdd200Response';
import ProductOptionValueAssign200Response from '../model/ProductOptionValueAssign200Response';
import ProductPriceAdd from '../model/ProductPriceAdd';
import ProductPriceUpdate from '../model/ProductPriceUpdate';
import ProductReviewList200Response from '../model/ProductReviewList200Response';
import ProductTaxAdd from '../model/ProductTaxAdd';
import ProductTaxAdd200Response from '../model/ProductTaxAdd200Response';
import ProductUpdate from '../model/ProductUpdate';
import ProductVariantAdd from '../model/ProductVariantAdd';
import ProductVariantAdd200Response from '../model/ProductVariantAdd200Response';
import ProductVariantCount200Response from '../model/ProductVariantCount200Response';
import ProductVariantImageAdd from '../model/ProductVariantImageAdd';
import ProductVariantList200Response from '../model/ProductVariantList200Response';
import ProductVariantPriceAdd from '../model/ProductVariantPriceAdd';
import ProductVariantPriceUpdate from '../model/ProductVariantPriceUpdate';
import ProductVariantUpdate from '../model/ProductVariantUpdate';

/**
* Product service.
* @module api/ProductApi
* @version 1.1
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:api/ProductApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productAdd operation.
     * @callback module:api/ProductApi~productAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new product to store.
     * @param {module:model/ProductAdd} productAdd 
     * @param {module:api/ProductApi~productAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductAdd200Response}
     */
    productAdd(productAdd, callback) {
      let postBody = productAdd;
      // verify the required parameter 'productAdd' is set
      if (productAdd === undefined || productAdd === null) {
        throw new Error("Missing the required parameter 'productAdd' when calling productAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductAdd200Response;
      return this.apiClient.callApi(
        '/product.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAttributeList operation.
     * @callback module:api/ProductApi~productAttributeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductAttributeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of attributes and values.
     * @param {String} productId Retrieves attributes specified by product id
     * @param {Object} opts Optional parameters
     * @param {String} [attributeId] Retrieves info for specified attribute_id
     * @param {String} [variantId] Defines product's variants specified by variant id
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [attributeGroupId] Filter by attribute_group_id
     * @param {String} [setName] Retrieves attributes specified by set_name in Magento
     * @param {String} [langId] Retrieves attributes specified by language id
     * @param {String} [storeId] Retrieves attributes specified by store id
     * @param {String} [sortBy = 'attribute_id')] Set field to sort by
     * @param {String} [sortDirection = 'asc')] Set sorting direction
     * @param {String} [params = 'attribute_id,name')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {module:api/ProductApi~productAttributeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductAttributeList}
     */
    productAttributeList(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productAttributeList");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'attribute_id': opts['attributeId'],
        'variant_id': opts['variantId'],
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'attribute_group_id': opts['attributeGroupId'],
        'set_name': opts['setName'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductAttributeList;
      return this.apiClient.callApi(
        '/product.attribute.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAttributeValueSet operation.
     * @callback module:api/ProductApi~productAttributeValueSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductAttributeValueSet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set attribute value to product.
     * @param {String} productId Defines product id where the attribute should be added
     * @param {Object} opts Optional parameters
     * @param {String} [attributeId] Filter by attribute_id
     * @param {String} [attributeGroupId] Filter by attribute_group_id
     * @param {String} [attributeName] Define attribute name
     * @param {String} [value] Define attribute value
     * @param {Number} [valueId] Define attribute value id
     * @param {String} [langId] Language id
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productAttributeValueSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductAttributeValueSet200Response}
     */
    productAttributeValueSet(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productAttributeValueSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'attribute_id': opts['attributeId'],
        'attribute_group_id': opts['attributeGroupId'],
        'attribute_name': opts['attributeName'],
        'value': opts['value'],
        'value_id': opts['valueId'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductAttributeValueSet200Response;
      return this.apiClient.callApi(
        '/product.attribute.value.set.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productAttributeValueUnset operation.
     * @callback module:api/ProductApi~productAttributeValueUnsetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductAttributeValueUnset200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes attribute value for a product.
     * @param {String} productId Product id
     * @param {String} attributeId Attribute Id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {Boolean} [includeDefault = false)] Boolean, whether or not to unset default value of the attribute, if applicable
     * @param {Boolean} [reindex = true)] Is reindex required
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productAttributeValueUnsetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductAttributeValueUnset200Response}
     */
    productAttributeValueUnset(productId, attributeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productAttributeValueUnset");
      }
      // verify the required parameter 'attributeId' is set
      if (attributeId === undefined || attributeId === null) {
        throw new Error("Missing the required parameter 'attributeId' when calling productAttributeValueUnset");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'attribute_id': attributeId,
        'store_id': opts['storeId'],
        'include_default': opts['includeDefault'],
        'reindex': opts['reindex'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductAttributeValueUnset200Response;
      return this.apiClient.callApi(
        '/product.attribute.value.unset.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productBrandList operation.
     * @callback module:api/ProductApi~productBrandListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductBrandList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of brands from your store.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'id,name,short_description,active,url')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [brandIds] Retrieves brands specified by brand ids
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/ProductApi~productBrandListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductBrandList200Response}
     */
    productBrandList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'brand_ids': opts['brandIds'],
        'exclude': opts['exclude'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductBrandList200Response;
      return this.apiClient.callApi(
        '/product.brand.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productChildItemFind operation.
     * @callback module:api/ProductApi~productChildItemFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductChildItemFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search product child item (bundled item or configurable product variant) in store catalog.
     * @param {String} findValue Entity search that is specified by some value
     * @param {Object} opts Optional parameters
     * @param {String} [findWhere = 'name')] Entity search that is specified by the comma-separated unique fields
     * @param {String} [findParams = 'whole_words')] Entity search that is specified by comma-separated parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productChildItemFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductChildItemFind200Response}
     */
    productChildItemFind(findValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'findValue' is set
      if (findValue === undefined || findValue === null) {
        throw new Error("Missing the required parameter 'findValue' when calling productChildItemFind");
      }

      let pathParams = {
      };
      let queryParams = {
        'find_value': findValue,
        'find_where': opts['findWhere'],
        'find_params': opts['findParams'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductChildItemFind200Response;
      return this.apiClient.callApi(
        '/product.child_item.find.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productChildItemInfo operation.
     * @callback module:api/ProductApi~productChildItemInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductChildItemInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get child for specific product.
     * @param {String} productId Filter by parent product id
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [currencyId] Currency Id
     * @param {module:api/ProductApi~productChildItemInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductChildItemInfo200Response}
     */
    productChildItemInfo(productId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productChildItemInfo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productChildItemInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'product_id': productId,
        'id': id,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductChildItemInfo200Response;
      return this.apiClient.callApi(
        '/product.child_item.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productChildItemList operation.
     * @callback module:api/ProductApi~productChildItemListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductChildItemList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get child items list of specific product(s).
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve products child items via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'force_all')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [productId] Filter by parent product id
     * @param {String} [productIds] Filter by parent product ids
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {String} [currencyId] Currency Id
     * @param {Boolean} [availSale] Specifies the set of available/not available products for sale
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {module:api/ProductApi~productChildItemListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductChildItemList}
     */
    productChildItemList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'product_id': opts['productId'],
        'product_ids': opts['productIds'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId'],
        'avail_sale': opts['availSale'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductChildItemList;
      return this.apiClient.callApi(
        '/product.child_item.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCount operation.
     * @callback module:api/ProductApi~productCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count products in store.
     * @param {Object} opts Optional parameters
     * @param {String} [categoryId] Counts products specified by category id
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {Boolean} [availView] Specifies the set of visible/invisible products
     * @param {Boolean} [availSale] Specifies the set of available/not available products for sale
     * @param {String} [storeId] Counts products specified by store id
     * @param {String} [langId] Counts products specified by language id
     * @param {String} [productIds] Counts products specified by product ids
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {String} [brandName] Retrieves brands specified by brand name
     * @param {Array.<String>} [productAttributes] Defines product attributes
     * @param {String} [status] Defines product's status
     * @param {String} [type] Defines products's type
     * @param {module:api/ProductApi~productCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCount200Response}
     */
    productCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category_id': opts['categoryId'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'avail_view': opts['availView'],
        'avail_sale': opts['availSale'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'product_ids': opts['productIds'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache'],
        'brand_name': opts['brandName'],
        'product_attributes': this.apiClient.buildCollectionParam(opts['productAttributes'], 'csv'),
        'status': opts['status'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCount200Response;
      return this.apiClient.callApi(
        '/product.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCurrencyAdd operation.
     * @callback module:api/ProductApi~productCurrencyAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCurrencyAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add currency and/or set default in store
     * @param {String} iso3 Specifies standardized currency code
     * @param {Number} rate Defines the numerical identifier against to the major currency
     * @param {Object} opts Optional parameters
     * @param {String} [name] Defines currency's name
     * @param {Boolean} [avail = true)] Specifies whether the currency is available
     * @param {String} [symbolLeft] Defines the symbol that is located before the currency
     * @param {String} [symbolRight] Defines the symbol that is located after the currency
     * @param {Boolean} [_default = false)] Specifies currency's default meaning
     * @param {module:api/ProductApi~productCurrencyAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCurrencyAdd200Response}
     */
    productCurrencyAdd(iso3, rate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'iso3' is set
      if (iso3 === undefined || iso3 === null) {
        throw new Error("Missing the required parameter 'iso3' when calling productCurrencyAdd");
      }
      // verify the required parameter 'rate' is set
      if (rate === undefined || rate === null) {
        throw new Error("Missing the required parameter 'rate' when calling productCurrencyAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'iso3': iso3,
        'rate': rate,
        'name': opts['name'],
        'avail': opts['avail'],
        'symbol_left': opts['symbolLeft'],
        'symbol_right': opts['symbolRight'],
        'default': opts['_default']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCurrencyAdd200Response;
      return this.apiClient.callApi(
        '/product.currency.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productCurrencyList operation.
     * @callback module:api/ProductApi~productCurrencyListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductCurrencyList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of currencies
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'name,iso3,default,avail')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {Boolean} [_default] Specifies the set of default/not default currencies
     * @param {Boolean} [avail] Specifies the set of available/not available currencies
     * @param {module:api/ProductApi~productCurrencyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductCurrencyList200Response}
     */
    productCurrencyList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'page_cursor': opts['pageCursor'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields'],
        'default': opts['_default'],
        'avail': opts['avail']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCurrencyList200Response;
      return this.apiClient.callApi(
        '/product.currency.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDelete operation.
     * @callback module:api/ProductApi~productDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Product delete
     * @param {String} id Product id that will be removed
     * @param {module:api/ProductApi~productDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductDelete200Response}
     */
    productDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductDelete200Response;
      return this.apiClient.callApi(
        '/product.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productFields operation.
     * @callback module:api/ProductApi~productFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all available fields for product item in store.
     * @param {module:api/ProductApi~productFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartConfigUpdate200Response}
     */
    productFields(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CartConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.fields.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productFind operation.
     * @callback module:api/ProductApi~productFindCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductFind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search product in store catalog. \"Apple\" is specified here by default.
     * @param {String} findValue Entity search that is specified by some value
     * @param {Object} opts Optional parameters
     * @param {String} [findWhere = 'name')] Entity search that is specified by the comma-separated unique fields
     * @param {String} [findParams = 'whole_words')] Entity search that is specified by comma-separated parameters
     * @param {String} [findWhat = 'product')] Parameter's value specifies the entity that has to be found
     * @param {String} [langId] Search products specified by language id
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductFind200Response}
     */
    productFind(findValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'findValue' is set
      if (findValue === undefined || findValue === null) {
        throw new Error("Missing the required parameter 'findValue' when calling productFind");
      }

      let pathParams = {
      };
      let queryParams = {
        'find_value': findValue,
        'find_where': opts['findWhere'],
        'find_params': opts['findParams'],
        'find_what': opts['findWhat'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductFind200Response;
      return this.apiClient.callApi(
        '/product.find.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productImageAdd operation.
     * @callback module:api/ProductApi~productImageAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImageAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add image to product
     * @param {module:model/ProductImageAdd} productImageAdd 
     * @param {module:api/ProductApi~productImageAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImageAdd200Response}
     */
    productImageAdd(productImageAdd, callback) {
      let postBody = productImageAdd;
      // verify the required parameter 'productImageAdd' is set
      if (productImageAdd === undefined || productImageAdd === null) {
        throw new Error("Missing the required parameter 'productImageAdd' when calling productImageAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductImageAdd200Response;
      return this.apiClient.callApi(
        '/product.image.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productImageDelete operation.
     * @callback module:api/ProductApi~productImageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete image
     * @param {String} productId Defines product id where the image should be deleted
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productImageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productImageDelete(productId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productImageDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productImageDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.image.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productImageUpdate operation.
     * @callback module:api/ProductApi~productImageUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImageUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update details of image
     * @param {String} productId Defines product id where the image should be updated
     * @param {String} id Defines image update specified by image id
     * @param {Object} opts Optional parameters
     * @param {String} [variantIds] Defines product's variants ids
     * @param {String} [imageName] Defines image's name
     * @param {String} [type = 'additional')] Defines image's types that are specified by comma-separated list
     * @param {String} [label] Defines alternative text that has to be attached to the picture
     * @param {Number} [position] Defines image’s position in the list
     * @param {String} [storeId] Store Id
     * @param {String} [langId] Language id
     * @param {Boolean} [hidden] Define is hide image
     * @param {module:api/ProductApi~productImageUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImageUpdate200Response}
     */
    productImageUpdate(productId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productImageUpdate");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productImageUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'variant_ids': opts['variantIds'],
        'image_name': opts['imageName'],
        'type': opts['type'],
        'label': opts['label'],
        'position': opts['position'],
        'id': id,
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'hidden': opts['hidden']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductImageUpdate200Response;
      return this.apiClient.callApi(
        '/product.image.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productInfo operation.
     * @callback module:api/ProductApi~productInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product info about product ID *** or specify other product ID.
     * @param {String} id Retrieves product's info specified by product id
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'id,name,description,price,categories_ids')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Retrieves product info specified by store id
     * @param {String} [langId] Retrieves product info specified by language id
     * @param {String} [currencyId] Currency Id
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {module:api/ProductApi~productInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductInfo200Response}
     */
    productInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductInfo200Response;
      return this.apiClient.callApi(
        '/product.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productList operation.
     * @callback module:api/ProductApi~productListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelResponseProductList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of products from your store. Returns 10 products by default.
     * @param {Object} opts Optional parameters
     * @param {String} [pageCursor] Used to retrieve products via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'id,name,description,price,categories_ids')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [categoryId] Retrieves products specified by category id
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {Boolean} [availView] Specifies the set of visible/invisible products
     * @param {Boolean} [availSale] Specifies the set of available/not available products for sale
     * @param {String} [storeId] Retrieves products specified by store id
     * @param {String} [langId] Retrieves products specified by language id
     * @param {String} [currencyId] Currency Id
     * @param {String} [productIds] Retrieves products specified by product ids
     * @param {Number} [sinceId] Retrieve entities starting from the specified id.
     * @param {String} [reportRequestId] Report request id
     * @param {Boolean} [disableReportCache = false)] Disable report cache for current request
     * @param {String} [sortBy = 'id')] Set field to sort by
     * @param {String} [sortDirection = 'asc')] Set sorting direction
     * @param {String} [sku] Filter by product's sku
     * @param {Boolean} [disableCache = false)] Disable cache for current request
     * @param {String} [brandName] Retrieves brands specified by brand name
     * @param {Array.<String>} [productAttributes] Defines product attributes
     * @param {String} [status] Defines product's status
     * @param {String} [type] Defines products's type
     * @param {module:api/ProductApi~productListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelResponseProductList}
     */
    productList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page_cursor': opts['pageCursor'],
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'response_fields': opts['responseFields'],
        'exclude': opts['exclude'],
        'category_id': opts['categoryId'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'avail_view': opts['availView'],
        'avail_sale': opts['availSale'],
        'store_id': opts['storeId'],
        'lang_id': opts['langId'],
        'currency_id': opts['currencyId'],
        'product_ids': opts['productIds'],
        'since_id': opts['sinceId'],
        'report_request_id': opts['reportRequestId'],
        'disable_report_cache': opts['disableReportCache'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
        'sku': opts['sku'],
        'disable_cache': opts['disableCache'],
        'brand_name': opts['brandName'],
        'product_attributes': this.apiClient.buildCollectionParam(opts['productAttributes'], 'csv'),
        'status': opts['status'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelResponseProductList;
      return this.apiClient.callApi(
        '/product.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productManufacturerAdd operation.
     * @callback module:api/ProductApi~productManufacturerAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductManufacturerAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add manufacturer to store and assign to product
     * @param {String} productId Defines products specified by product id
     * @param {String} manufacturer Defines product’s manufacturer's name
     * @param {module:api/ProductApi~productManufacturerAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductManufacturerAdd200Response}
     */
    productManufacturerAdd(productId, manufacturer, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productManufacturerAdd");
      }
      // verify the required parameter 'manufacturer' is set
      if (manufacturer === undefined || manufacturer === null) {
        throw new Error("Missing the required parameter 'manufacturer' when calling productManufacturerAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'manufacturer': manufacturer
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductManufacturerAdd200Response;
      return this.apiClient.callApi(
        '/product.manufacturer.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionAdd operation.
     * @callback module:api/ProductApi~productOptionAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add product option from store.
     * @param {String} name Defines option's name
     * @param {module:model/String} type Defines option's type that has to be added
     * @param {Object} opts Optional parameters
     * @param {String} [productId] Defines product id where the option should be added
     * @param {String} [defaultOptionValue] Defines default option value that has to be added
     * @param {String} [optionValues] Defines option values that has to be added
     * @param {String} [description] Defines option's description
     * @param {Boolean} [avail = true)] Defines whether the option is available
     * @param {Number} [sortOrder = 0)] Sort number in the list
     * @param {Boolean} [required = false)] Defines if the option is required
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionAdd200Response}
     */
    productOptionAdd(name, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling productOptionAdd");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling productOptionAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'type': type,
        'product_id': opts['productId'],
        'default_option_value': opts['defaultOptionValue'],
        'option_values': opts['optionValues'],
        'description': opts['description'],
        'avail': opts['avail'],
        'sort_order': opts['sortOrder'],
        'required': opts['required'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionAdd200Response;
      return this.apiClient.callApi(
        '/product.option.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionAssign operation.
     * @callback module:api/ProductApi~productOptionAssignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionAssign200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign option from product.
     * @param {String} productId Defines product id where the option should be assigned
     * @param {String} optionId Defines option id which has to be assigned
     * @param {Object} opts Optional parameters
     * @param {Boolean} [required = false)] Defines if the option is required
     * @param {Number} [sortOrder = 0)] Sort number in the list
     * @param {String} [optionValues] Defines option values that has to be assigned
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionAssignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionAssign200Response}
     */
    productOptionAssign(productId, optionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionAssign");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionAssign");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'option_id': optionId,
        'required': opts['required'],
        'sort_order': opts['sortOrder'],
        'option_values': opts['optionValues'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionAssign200Response;
      return this.apiClient.callApi(
        '/product.option.assign.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionList operation.
     * @callback module:api/ProductApi~productOptionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of options.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'id,name,description')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [productId] Retrieves products' options specified by product id
     * @param {String} [langId] Language id
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productOptionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionList200Response}
     */
    productOptionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields'],
        'product_id': opts['productId'],
        'lang_id': opts['langId'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionList200Response;
      return this.apiClient.callApi(
        '/product.option.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionValueAdd operation.
     * @callback module:api/ProductApi~productOptionValueAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionValueAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add product option item from option.
     * @param {String} productId Defines product id where the option value should be added
     * @param {String} optionId Defines option id where the value has to be added
     * @param {String} optionValue Defines option value that has to be added
     * @param {Object} opts Optional parameters
     * @param {Number} [sortOrder = 0)] Sort number in the list
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionValueAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionValueAdd200Response}
     */
    productOptionValueAdd(productId, optionId, optionValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionValueAdd");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionValueAdd");
      }
      // verify the required parameter 'optionValue' is set
      if (optionValue === undefined || optionValue === null) {
        throw new Error("Missing the required parameter 'optionValue' when calling productOptionValueAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'option_id': optionId,
        'option_value': optionValue,
        'sort_order': opts['sortOrder'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionValueAdd200Response;
      return this.apiClient.callApi(
        '/product.option.value.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionValueAssign operation.
     * @callback module:api/ProductApi~productOptionValueAssignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductOptionValueAssign200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign product option item from product.
     * @param {Number} productOptionId Defines product's option id where the value has to be assigned
     * @param {Number} optionValueId Defines value id that has to be assigned
     * @param {Object} opts Optional parameters
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionValueAssignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductOptionValueAssign200Response}
     */
    productOptionValueAssign(productOptionId, optionValueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productOptionId' is set
      if (productOptionId === undefined || productOptionId === null) {
        throw new Error("Missing the required parameter 'productOptionId' when calling productOptionValueAssign");
      }
      // verify the required parameter 'optionValueId' is set
      if (optionValueId === undefined || optionValueId === null) {
        throw new Error("Missing the required parameter 'optionValueId' when calling productOptionValueAssign");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_option_id': productOptionId,
        'option_value_id': optionValueId,
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductOptionValueAssign200Response;
      return this.apiClient.callApi(
        '/product.option.value.assign.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productOptionValueUpdate operation.
     * @callback module:api/ProductApi~productOptionValueUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update product option item from option.
     * @param {String} productId Defines product id where the option value should be updated
     * @param {String} optionId Defines option id where the value has to be updated
     * @param {Number} optionValueId Defines value id that has to be assigned
     * @param {String} optionValue Defines option value that has to be added
     * @param {Object} opts Optional parameters
     * @param {Number} [price] Defines new product option price
     * @param {Number} [quantity] Defines new products' options quantity
     * @param {Boolean} [clearCache = true)] Is cache clear required
     * @param {module:api/ProductApi~productOptionValueUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productOptionValueUpdate(productId, optionId, optionValueId, optionValue, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productOptionValueUpdate");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling productOptionValueUpdate");
      }
      // verify the required parameter 'optionValueId' is set
      if (optionValueId === undefined || optionValueId === null) {
        throw new Error("Missing the required parameter 'optionValueId' when calling productOptionValueUpdate");
      }
      // verify the required parameter 'optionValue' is set
      if (optionValue === undefined || optionValue === null) {
        throw new Error("Missing the required parameter 'optionValue' when calling productOptionValueUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'option_id': optionId,
        'option_value_id': optionValueId,
        'option_value': optionValue,
        'price': opts['price'],
        'quantity': opts['quantity'],
        'clear_cache': opts['clearCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.option.value.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPriceAdd operation.
     * @callback module:api/ProductApi~productPriceAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartValidate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add some prices to the product.
     * @param {module:model/ProductPriceAdd} productPriceAdd 
     * @param {module:api/ProductApi~productPriceAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartValidate200Response}
     */
    productPriceAdd(productPriceAdd, callback) {
      let postBody = productPriceAdd;
      // verify the required parameter 'productPriceAdd' is set
      if (productPriceAdd === undefined || productPriceAdd === null) {
        throw new Error("Missing the required parameter 'productPriceAdd' when calling productPriceAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartValidate200Response;
      return this.apiClient.callApi(
        '/product.price.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPriceDelete operation.
     * @callback module:api/ProductApi~productPriceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete some prices of the product
     * @param {String} productId Defines the product where the price has to be deleted
     * @param {Object} opts Optional parameters
     * @param {String} [groupPrices] Defines product's group prices
     * @param {module:api/ProductApi~productPriceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productPriceDelete(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productPriceDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'group_prices': opts['groupPrices']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.price.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPriceUpdate operation.
     * @callback module:api/ProductApi~productPriceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some prices of the product.
     * @param {module:model/ProductPriceUpdate} productPriceUpdate 
     * @param {module:api/ProductApi~productPriceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productPriceUpdate(productPriceUpdate, callback) {
      let postBody = productPriceUpdate;
      // verify the required parameter 'productPriceUpdate' is set
      if (productPriceUpdate === undefined || productPriceUpdate === null) {
        throw new Error("Missing the required parameter 'productPriceUpdate' when calling productPriceUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.price.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productReviewList operation.
     * @callback module:api/ProductApi~productReviewListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductReviewList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reviews of a specific product.
     * @param {String} productId Product id
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {String} [pageCursor] Used to retrieve entities via cursor-based pagination (it can't be used with any other filtering parameter)
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [ids] Retrieves reviews specified by ids
     * @param {String} [storeId] Store Id
     * @param {String} [status] Defines status
     * @param {String} [params = 'id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [responseFields] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {module:api/ProductApi~productReviewListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductReviewList200Response}
     */
    productReviewList(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productReviewList");
      }

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'page_cursor': opts['pageCursor'],
        'count': opts['count'],
        'product_id': productId,
        'ids': opts['ids'],
        'store_id': opts['storeId'],
        'status': opts['status'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'response_fields': opts['responseFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductReviewList200Response;
      return this.apiClient.callApi(
        '/product.review.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productStoreAssign operation.
     * @callback module:api/ProductApi~productStoreAssignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign product to store
     * @param {String} productId Defines id of the product which should be assigned to a store
     * @param {String} storeId Defines id of the store product should be assigned to
     * @param {module:api/ProductApi~productStoreAssignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productStoreAssign(productId, storeId, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productStoreAssign");
      }
      // verify the required parameter 'storeId' is set
      if (storeId === undefined || storeId === null) {
        throw new Error("Missing the required parameter 'storeId' when calling productStoreAssign");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'store_id': storeId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.store.assign.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productTaxAdd operation.
     * @callback module:api/ProductApi~productTaxAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductTaxAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tax class and tax rate to store and assign to product.
     * @param {module:model/ProductTaxAdd} productTaxAdd 
     * @param {module:api/ProductApi~productTaxAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductTaxAdd200Response}
     */
    productTaxAdd(productTaxAdd, callback) {
      let postBody = productTaxAdd;
      // verify the required parameter 'productTaxAdd' is set
      if (productTaxAdd === undefined || productTaxAdd === null) {
        throw new Error("Missing the required parameter 'productTaxAdd' when calling productTaxAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductTaxAdd200Response;
      return this.apiClient.callApi(
        '/product.tax.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productUpdate operation.
     * @callback module:api/ProductApi~productUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update price and quantity for a specific product
     * @param {module:model/ProductUpdate} productUpdate 
     * @param {module:api/ProductApi~productUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productUpdate(productUpdate, callback) {
      let postBody = productUpdate;
      // verify the required parameter 'productUpdate' is set
      if (productUpdate === undefined || productUpdate === null) {
        throw new Error("Missing the required parameter 'productUpdate' when calling productUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantAdd operation.
     * @callback module:api/ProductApi~productVariantAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductVariantAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add variant to product.
     * @param {module:model/ProductVariantAdd} productVariantAdd 
     * @param {module:api/ProductApi~productVariantAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductVariantAdd200Response}
     */
    productVariantAdd(productVariantAdd, callback) {
      let postBody = productVariantAdd;
      // verify the required parameter 'productVariantAdd' is set
      if (productVariantAdd === undefined || productVariantAdd === null) {
        throw new Error("Missing the required parameter 'productVariantAdd' when calling productVariantAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductVariantAdd200Response;
      return this.apiClient.callApi(
        '/product.variant.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantCount operation.
     * @callback module:api/ProductApi~productVariantCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductVariantCount200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get count variants.
     * @param {String} productId Retrieves products' variants specified by product id
     * @param {Object} opts Optional parameters
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [categoryId] Counts products’ variants specified by category id
     * @param {String} [storeId] Retrieves variants specified by store id
     * @param {module:api/ProductApi~productVariantCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductVariantCount200Response}
     */
    productVariantCount(productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productVariantCount");
      }

      let pathParams = {
      };
      let queryParams = {
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'category_id': opts['categoryId'],
        'product_id': productId,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductVariantCount200Response;
      return this.apiClient.callApi(
        '/product.variant.count.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantDelete operation.
     * @callback module:api/ProductApi~productVariantDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete variant.
     * @param {String} id Defines variant removal, specified by variant id
     * @param {String} productId Defines product's id where the variant has to be deleted
     * @param {module:api/ProductApi~productVariantDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productVariantDelete(id, productId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productVariantDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productVariantDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'product_id': productId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.variant.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantImageAdd operation.
     * @callback module:api/ProductApi~productVariantImageAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductImageAdd200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add image to product
     * @param {module:model/ProductVariantImageAdd} productVariantImageAdd 
     * @param {module:api/ProductApi~productVariantImageAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductImageAdd200Response}
     */
    productVariantImageAdd(productVariantImageAdd, callback) {
      let postBody = productVariantImageAdd;
      // verify the required parameter 'productVariantImageAdd' is set
      if (productVariantImageAdd === undefined || productVariantImageAdd === null) {
        throw new Error("Missing the required parameter 'productVariantImageAdd' when calling productVariantImageAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductImageAdd200Response;
      return this.apiClient.callApi(
        '/product.variant.image.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantImageDelete operation.
     * @callback module:api/ProductApi~productVariantImageDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete  image to product
     * @param {String} productId Defines product id where the variant image should be deleted
     * @param {Number} productVariantId Defines product's variants specified by variant id
     * @param {String} id Entity id
     * @param {Object} opts Optional parameters
     * @param {String} [storeId] Store Id
     * @param {module:api/ProductApi~productVariantImageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productVariantImageDelete(productId, productVariantId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productVariantImageDelete");
      }
      // verify the required parameter 'productVariantId' is set
      if (productVariantId === undefined || productVariantId === null) {
        throw new Error("Missing the required parameter 'productVariantId' when calling productVariantImageDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productVariantImageDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_id': productId,
        'product_variant_id': productVariantId,
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.variant.image.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantInfo operation.
     * @callback module:api/ProductApi~productVariantInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductInfo200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get variant info. This method is deprecated, and its development is stopped. Please use \"product.child_item.info\" instead.
     * @param {String} id Retrieves variant's info specified by variant id
     * @param {Object} opts Optional parameters
     * @param {String} [params = 'id,name,description,price')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [storeId] Retrieves variant info specified by store id
     * @param {module:api/ProductApi~productVariantInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductInfo200Response}
     */
    productVariantInfo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productVariantInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'params': opts['params'],
        'exclude': opts['exclude'],
        'id': id,
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductInfo200Response;
      return this.apiClient.callApi(
        '/product.variant.info.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantList operation.
     * @callback module:api/ProductApi~productVariantListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductVariantList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of variants. This method is deprecated, and its development is stopped. Please use \"product.child_item.list\" instead.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] This parameter sets the number from which you want to get entities
     * @param {Number} [count = 10)] This parameter sets the entity amount that has to be retrieved. Max allowed count=250
     * @param {String} [params = 'id,name,description,price')] Set this parameter in order to choose which entity fields you want to retrieve
     * @param {String} [exclude] Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all
     * @param {String} [createdFrom] Retrieve entities from their creation date
     * @param {String} [createdTo] Retrieve entities to their creation date
     * @param {String} [modifiedFrom] Retrieve entities from their modification date
     * @param {String} [modifiedTo] Retrieve entities to their modification date
     * @param {String} [categoryId] Retrieves products’ variants specified by category id
     * @param {String} [productId] Retrieves products' variants specified by product id
     * @param {String} [storeId] Retrieves variants specified by store id
     * @param {module:api/ProductApi~productVariantListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductVariantList200Response}
     */
    productVariantList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'count': opts['count'],
        'params': opts['params'],
        'exclude': opts['exclude'],
        'created_from': opts['createdFrom'],
        'created_to': opts['createdTo'],
        'modified_from': opts['modifiedFrom'],
        'modified_to': opts['modifiedTo'],
        'category_id': opts['categoryId'],
        'product_id': opts['productId'],
        'store_id': opts['storeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductVariantList200Response;
      return this.apiClient.callApi(
        '/product.variant.list.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantPriceAdd operation.
     * @callback module:api/ProductApi~productVariantPriceAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CartValidate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add some prices to the product variant.
     * @param {module:model/ProductVariantPriceAdd} productVariantPriceAdd 
     * @param {module:api/ProductApi~productVariantPriceAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CartValidate200Response}
     */
    productVariantPriceAdd(productVariantPriceAdd, callback) {
      let postBody = productVariantPriceAdd;
      // verify the required parameter 'productVariantPriceAdd' is set
      if (productVariantPriceAdd === undefined || productVariantPriceAdd === null) {
        throw new Error("Missing the required parameter 'productVariantPriceAdd' when calling productVariantPriceAdd");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartValidate200Response;
      return this.apiClient.callApi(
        '/product.variant.price.add.json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantPriceDelete operation.
     * @callback module:api/ProductApi~productVariantPriceDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributeDelete200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete some prices of the product variant.
     * @param {String} id Defines the variant where the price has to be deleted
     * @param {String} productId Product id
     * @param {String} groupPrices Defines variants's group prices
     * @param {module:api/ProductApi~productVariantPriceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributeDelete200Response}
     */
    productVariantPriceDelete(id, productId, groupPrices, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling productVariantPriceDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productVariantPriceDelete");
      }
      // verify the required parameter 'groupPrices' is set
      if (groupPrices === undefined || groupPrices === null) {
        throw new Error("Missing the required parameter 'groupPrices' when calling productVariantPriceDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'product_id': productId,
        'group_prices': groupPrices
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributeDelete200Response;
      return this.apiClient.callApi(
        '/product.variant.price.delete.json', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantPriceUpdate operation.
     * @callback module:api/ProductApi~productVariantPriceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update some prices of the product variant.
     * @param {module:model/ProductVariantPriceUpdate} productVariantPriceUpdate 
     * @param {module:api/ProductApi~productVariantPriceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productVariantPriceUpdate(productVariantPriceUpdate, callback) {
      let postBody = productVariantPriceUpdate;
      // verify the required parameter 'productVariantPriceUpdate' is set
      if (productVariantPriceUpdate === undefined || productVariantPriceUpdate === null) {
        throw new Error("Missing the required parameter 'productVariantPriceUpdate' when calling productVariantPriceUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.variant.price.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productVariantUpdate operation.
     * @callback module:api/ProductApi~productVariantUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountConfigUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update variant.
     * @param {module:model/ProductVariantUpdate} productVariantUpdate 
     * @param {module:api/ProductApi~productVariantUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountConfigUpdate200Response}
     */
    productVariantUpdate(productVariantUpdate, callback) {
      let postBody = productVariantUpdate;
      // verify the required parameter 'productVariantUpdate' is set
      if (productVariantUpdate === undefined || productVariantUpdate === null) {
        throw new Error("Missing the required parameter 'productVariantUpdate' when calling productVariantUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'store_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountConfigUpdate200Response;
      return this.apiClient.callApi(
        '/product.variant.update.json', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
