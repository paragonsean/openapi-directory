/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerApi2Cart);
  }
}(this, function(expect, SwaggerApi2Cart) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerApi2Cart.CartApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CartApi', function() {
    describe('bridgeDownload', function() {
      it('should call bridgeDownload successfully', function(done) {
        //uncomment below and update the code to test bridgeDownload
        //instance.bridgeDownload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartBridge', function() {
      it('should call cartBridge successfully', function(done) {
        //uncomment below and update the code to test cartBridge
        //instance.cartBridge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCatalogPriceRulesCount', function() {
      it('should call cartCatalogPriceRulesCount successfully', function(done) {
        //uncomment below and update the code to test cartCatalogPriceRulesCount
        //instance.cartCatalogPriceRulesCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCatalogPriceRulesList', function() {
      it('should call cartCatalogPriceRulesList successfully', function(done) {
        //uncomment below and update the code to test cartCatalogPriceRulesList
        //instance.cartCatalogPriceRulesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartClearCache', function() {
      it('should call cartClearCache successfully', function(done) {
        //uncomment below and update the code to test cartClearCache
        //instance.cartClearCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartConfig', function() {
      it('should call cartConfig successfully', function(done) {
        //uncomment below and update the code to test cartConfig
        //instance.cartConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartConfigUpdate', function() {
      it('should call cartConfigUpdate successfully', function(done) {
        //uncomment below and update the code to test cartConfigUpdate
        //instance.cartConfigUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCouponAdd', function() {
      it('should call cartCouponAdd successfully', function(done) {
        //uncomment below and update the code to test cartCouponAdd
        //instance.cartCouponAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCouponConditionAdd', function() {
      it('should call cartCouponConditionAdd successfully', function(done) {
        //uncomment below and update the code to test cartCouponConditionAdd
        //instance.cartCouponConditionAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCouponCount', function() {
      it('should call cartCouponCount successfully', function(done) {
        //uncomment below and update the code to test cartCouponCount
        //instance.cartCouponCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCouponDelete', function() {
      it('should call cartCouponDelete successfully', function(done) {
        //uncomment below and update the code to test cartCouponDelete
        //instance.cartCouponDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCouponList', function() {
      it('should call cartCouponList successfully', function(done) {
        //uncomment below and update the code to test cartCouponList
        //instance.cartCouponList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartCreate', function() {
      it('should call cartCreate successfully', function(done) {
        //uncomment below and update the code to test cartCreate
        //instance.cartCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartDelete', function() {
      it('should call cartDelete successfully', function(done) {
        //uncomment below and update the code to test cartDelete
        //instance.cartDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartDisconnect', function() {
      it('should call cartDisconnect successfully', function(done) {
        //uncomment below and update the code to test cartDisconnect
        //instance.cartDisconnect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartGiftcardAdd', function() {
      it('should call cartGiftcardAdd successfully', function(done) {
        //uncomment below and update the code to test cartGiftcardAdd
        //instance.cartGiftcardAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartGiftcardCount', function() {
      it('should call cartGiftcardCount successfully', function(done) {
        //uncomment below and update the code to test cartGiftcardCount
        //instance.cartGiftcardCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartGiftcardList', function() {
      it('should call cartGiftcardList successfully', function(done) {
        //uncomment below and update the code to test cartGiftcardList
        //instance.cartGiftcardList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartInfo', function() {
      it('should call cartInfo successfully', function(done) {
        //uncomment below and update the code to test cartInfo
        //instance.cartInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartList', function() {
      it('should call cartList successfully', function(done) {
        //uncomment below and update the code to test cartList
        //instance.cartList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartMetaDataList', function() {
      it('should call cartMetaDataList successfully', function(done) {
        //uncomment below and update the code to test cartMetaDataList
        //instance.cartMetaDataList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartMetaDataSet', function() {
      it('should call cartMetaDataSet successfully', function(done) {
        //uncomment below and update the code to test cartMetaDataSet
        //instance.cartMetaDataSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartMetaDataUnset', function() {
      it('should call cartMetaDataUnset successfully', function(done) {
        //uncomment below and update the code to test cartMetaDataUnset
        //instance.cartMetaDataUnset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartMethods', function() {
      it('should call cartMethods successfully', function(done) {
        //uncomment below and update the code to test cartMethods
        //instance.cartMethods(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartPluginList', function() {
      it('should call cartPluginList successfully', function(done) {
        //uncomment below and update the code to test cartPluginList
        //instance.cartPluginList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartScriptAdd', function() {
      it('should call cartScriptAdd successfully', function(done) {
        //uncomment below and update the code to test cartScriptAdd
        //instance.cartScriptAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartScriptDelete', function() {
      it('should call cartScriptDelete successfully', function(done) {
        //uncomment below and update the code to test cartScriptDelete
        //instance.cartScriptDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartScriptList', function() {
      it('should call cartScriptList successfully', function(done) {
        //uncomment below and update the code to test cartScriptList
        //instance.cartScriptList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartShippingZonesList', function() {
      it('should call cartShippingZonesList successfully', function(done) {
        //uncomment below and update the code to test cartShippingZonesList
        //instance.cartShippingZonesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cartValidate', function() {
      it('should call cartValidate successfully', function(done) {
        //uncomment below and update the code to test cartValidate
        //instance.cartValidate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
