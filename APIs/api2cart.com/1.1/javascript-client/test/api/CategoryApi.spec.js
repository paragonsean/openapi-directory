/**
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwaggerApi2Cart);
  }
}(this, function(expect, SwaggerApi2Cart) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwaggerApi2Cart.CategoryApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CategoryApi', function() {
    describe('categoryAdd', function() {
      it('should call categoryAdd successfully', function(done) {
        //uncomment below and update the code to test categoryAdd
        //instance.categoryAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryAssign', function() {
      it('should call categoryAssign successfully', function(done) {
        //uncomment below and update the code to test categoryAssign
        //instance.categoryAssign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryCount', function() {
      it('should call categoryCount successfully', function(done) {
        //uncomment below and update the code to test categoryCount
        //instance.categoryCount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryDelete', function() {
      it('should call categoryDelete successfully', function(done) {
        //uncomment below and update the code to test categoryDelete
        //instance.categoryDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryFind', function() {
      it('should call categoryFind successfully', function(done) {
        //uncomment below and update the code to test categoryFind
        //instance.categoryFind(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryImageAdd', function() {
      it('should call categoryImageAdd successfully', function(done) {
        //uncomment below and update the code to test categoryImageAdd
        //instance.categoryImageAdd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryImageDelete', function() {
      it('should call categoryImageDelete successfully', function(done) {
        //uncomment below and update the code to test categoryImageDelete
        //instance.categoryImageDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryInfo', function() {
      it('should call categoryInfo successfully', function(done) {
        //uncomment below and update the code to test categoryInfo
        //instance.categoryInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryList', function() {
      it('should call categoryList successfully', function(done) {
        //uncomment below and update the code to test categoryList
        //instance.categoryList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryUnassign', function() {
      it('should call categoryUnassign successfully', function(done) {
        //uncomment below and update the code to test categoryUnassign
        //instance.categoryUnassign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoryUpdate', function() {
      it('should call categoryUpdate successfully', function(done) {
        //uncomment below and update the code to test categoryUpdate
        //instance.categoryUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
