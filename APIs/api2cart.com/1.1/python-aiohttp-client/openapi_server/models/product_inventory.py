# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductInventory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, in_stock: bool=None, priority: int=None, quantity: float=None, warehouse_id: str=None):
        """ProductInventory - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this ProductInventory.
        :param custom_fields: The custom_fields of this ProductInventory.
        :param in_stock: The in_stock of this ProductInventory.
        :param priority: The priority of this ProductInventory.
        :param quantity: The quantity of this ProductInventory.
        :param warehouse_id: The warehouse_id of this ProductInventory.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'in_stock': bool,
            'priority': int,
            'quantity': float,
            'warehouse_id': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'in_stock': 'in_stock',
            'priority': 'priority',
            'quantity': 'quantity',
            'warehouse_id': 'warehouse_id'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._in_stock = in_stock
        self._priority = priority
        self._quantity = quantity
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductInventory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product_Inventory of this ProductInventory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ProductInventory.


        :return: The additional_fields of this ProductInventory.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ProductInventory.


        :param additional_fields: The additional_fields of this ProductInventory.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProductInventory.


        :return: The custom_fields of this ProductInventory.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProductInventory.


        :param custom_fields: The custom_fields of this ProductInventory.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def in_stock(self):
        """Gets the in_stock of this ProductInventory.


        :return: The in_stock of this ProductInventory.
        :rtype: bool
        """
        return self._in_stock

    @in_stock.setter
    def in_stock(self, in_stock):
        """Sets the in_stock of this ProductInventory.


        :param in_stock: The in_stock of this ProductInventory.
        :type in_stock: bool
        """

        self._in_stock = in_stock

    @property
    def priority(self):
        """Gets the priority of this ProductInventory.


        :return: The priority of this ProductInventory.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ProductInventory.


        :param priority: The priority of this ProductInventory.
        :type priority: int
        """

        self._priority = priority

    @property
    def quantity(self):
        """Gets the quantity of this ProductInventory.


        :return: The quantity of this ProductInventory.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductInventory.


        :param quantity: The quantity of this ProductInventory.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ProductInventory.


        :return: The warehouse_id of this ProductInventory.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ProductInventory.


        :param warehouse_id: The warehouse_id of this ProductInventory.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id
