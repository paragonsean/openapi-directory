# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_item_option import OrderItemOption
from openapi_server import util


class OrderItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, barcode: str=None, custom_fields: object=None, discount_amount: float=None, model: str=None, name: str=None, options: List[OrderItemOption]=None, order_product_id: str=None, parent_order_product_id: str=None, price: float=None, price_inc_tax: float=None, product_id: str=None, quantity: float=None, tax_percent: float=None, tax_value: float=None, tax_value_after_discount: float=None, total_price: float=None, variant_id: str=None, weight: float=None, weight_unit: str=None):
        """OrderItem - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this OrderItem.
        :param barcode: The barcode of this OrderItem.
        :param custom_fields: The custom_fields of this OrderItem.
        :param discount_amount: The discount_amount of this OrderItem.
        :param model: The model of this OrderItem.
        :param name: The name of this OrderItem.
        :param options: The options of this OrderItem.
        :param order_product_id: The order_product_id of this OrderItem.
        :param parent_order_product_id: The parent_order_product_id of this OrderItem.
        :param price: The price of this OrderItem.
        :param price_inc_tax: The price_inc_tax of this OrderItem.
        :param product_id: The product_id of this OrderItem.
        :param quantity: The quantity of this OrderItem.
        :param tax_percent: The tax_percent of this OrderItem.
        :param tax_value: The tax_value of this OrderItem.
        :param tax_value_after_discount: The tax_value_after_discount of this OrderItem.
        :param total_price: The total_price of this OrderItem.
        :param variant_id: The variant_id of this OrderItem.
        :param weight: The weight of this OrderItem.
        :param weight_unit: The weight_unit of this OrderItem.
        """
        self.openapi_types = {
            'additional_fields': object,
            'barcode': str,
            'custom_fields': object,
            'discount_amount': float,
            'model': str,
            'name': str,
            'options': List[OrderItemOption],
            'order_product_id': str,
            'parent_order_product_id': str,
            'price': float,
            'price_inc_tax': float,
            'product_id': str,
            'quantity': float,
            'tax_percent': float,
            'tax_value': float,
            'tax_value_after_discount': float,
            'total_price': float,
            'variant_id': str,
            'weight': float,
            'weight_unit': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'barcode': 'barcode',
            'custom_fields': 'custom_fields',
            'discount_amount': 'discount_amount',
            'model': 'model',
            'name': 'name',
            'options': 'options',
            'order_product_id': 'order_product_id',
            'parent_order_product_id': 'parent_order_product_id',
            'price': 'price',
            'price_inc_tax': 'price_inc_tax',
            'product_id': 'product_id',
            'quantity': 'quantity',
            'tax_percent': 'tax_percent',
            'tax_value': 'tax_value',
            'tax_value_after_discount': 'tax_value_after_discount',
            'total_price': 'total_price',
            'variant_id': 'variant_id',
            'weight': 'weight',
            'weight_unit': 'weight_unit'
        }

        self._additional_fields = additional_fields
        self._barcode = barcode
        self._custom_fields = custom_fields
        self._discount_amount = discount_amount
        self._model = model
        self._name = name
        self._options = options
        self._order_product_id = order_product_id
        self._parent_order_product_id = parent_order_product_id
        self._price = price
        self._price_inc_tax = price_inc_tax
        self._product_id = product_id
        self._quantity = quantity
        self._tax_percent = tax_percent
        self._tax_value = tax_value
        self._tax_value_after_discount = tax_value_after_discount
        self._total_price = total_price
        self._variant_id = variant_id
        self._weight = weight
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_Item of this OrderItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this OrderItem.


        :return: The additional_fields of this OrderItem.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this OrderItem.


        :param additional_fields: The additional_fields of this OrderItem.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def barcode(self):
        """Gets the barcode of this OrderItem.


        :return: The barcode of this OrderItem.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this OrderItem.


        :param barcode: The barcode of this OrderItem.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderItem.


        :return: The custom_fields of this OrderItem.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderItem.


        :param custom_fields: The custom_fields of this OrderItem.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def discount_amount(self):
        """Gets the discount_amount of this OrderItem.


        :return: The discount_amount of this OrderItem.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this OrderItem.


        :param discount_amount: The discount_amount of this OrderItem.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def model(self):
        """Gets the model of this OrderItem.


        :return: The model of this OrderItem.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this OrderItem.


        :param model: The model of this OrderItem.
        :type model: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this OrderItem.


        :return: The name of this OrderItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderItem.


        :param name: The name of this OrderItem.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this OrderItem.


        :return: The options of this OrderItem.
        :rtype: List[OrderItemOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this OrderItem.


        :param options: The options of this OrderItem.
        :type options: List[OrderItemOption]
        """

        self._options = options

    @property
    def order_product_id(self):
        """Gets the order_product_id of this OrderItem.


        :return: The order_product_id of this OrderItem.
        :rtype: str
        """
        return self._order_product_id

    @order_product_id.setter
    def order_product_id(self, order_product_id):
        """Sets the order_product_id of this OrderItem.


        :param order_product_id: The order_product_id of this OrderItem.
        :type order_product_id: str
        """

        self._order_product_id = order_product_id

    @property
    def parent_order_product_id(self):
        """Gets the parent_order_product_id of this OrderItem.


        :return: The parent_order_product_id of this OrderItem.
        :rtype: str
        """
        return self._parent_order_product_id

    @parent_order_product_id.setter
    def parent_order_product_id(self, parent_order_product_id):
        """Sets the parent_order_product_id of this OrderItem.


        :param parent_order_product_id: The parent_order_product_id of this OrderItem.
        :type parent_order_product_id: str
        """

        self._parent_order_product_id = parent_order_product_id

    @property
    def price(self):
        """Gets the price of this OrderItem.


        :return: The price of this OrderItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderItem.


        :param price: The price of this OrderItem.
        :type price: float
        """

        self._price = price

    @property
    def price_inc_tax(self):
        """Gets the price_inc_tax of this OrderItem.


        :return: The price_inc_tax of this OrderItem.
        :rtype: float
        """
        return self._price_inc_tax

    @price_inc_tax.setter
    def price_inc_tax(self, price_inc_tax):
        """Sets the price_inc_tax of this OrderItem.


        :param price_inc_tax: The price_inc_tax of this OrderItem.
        :type price_inc_tax: float
        """

        self._price_inc_tax = price_inc_tax

    @property
    def product_id(self):
        """Gets the product_id of this OrderItem.


        :return: The product_id of this OrderItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this OrderItem.


        :param product_id: The product_id of this OrderItem.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this OrderItem.


        :return: The quantity of this OrderItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderItem.


        :param quantity: The quantity of this OrderItem.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def tax_percent(self):
        """Gets the tax_percent of this OrderItem.


        :return: The tax_percent of this OrderItem.
        :rtype: float
        """
        return self._tax_percent

    @tax_percent.setter
    def tax_percent(self, tax_percent):
        """Sets the tax_percent of this OrderItem.


        :param tax_percent: The tax_percent of this OrderItem.
        :type tax_percent: float
        """

        self._tax_percent = tax_percent

    @property
    def tax_value(self):
        """Gets the tax_value of this OrderItem.


        :return: The tax_value of this OrderItem.
        :rtype: float
        """
        return self._tax_value

    @tax_value.setter
    def tax_value(self, tax_value):
        """Sets the tax_value of this OrderItem.


        :param tax_value: The tax_value of this OrderItem.
        :type tax_value: float
        """

        self._tax_value = tax_value

    @property
    def tax_value_after_discount(self):
        """Gets the tax_value_after_discount of this OrderItem.


        :return: The tax_value_after_discount of this OrderItem.
        :rtype: float
        """
        return self._tax_value_after_discount

    @tax_value_after_discount.setter
    def tax_value_after_discount(self, tax_value_after_discount):
        """Sets the tax_value_after_discount of this OrderItem.


        :param tax_value_after_discount: The tax_value_after_discount of this OrderItem.
        :type tax_value_after_discount: float
        """

        self._tax_value_after_discount = tax_value_after_discount

    @property
    def total_price(self):
        """Gets the total_price of this OrderItem.


        :return: The total_price of this OrderItem.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this OrderItem.


        :param total_price: The total_price of this OrderItem.
        :type total_price: float
        """

        self._total_price = total_price

    @property
    def variant_id(self):
        """Gets the variant_id of this OrderItem.


        :return: The variant_id of this OrderItem.
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this OrderItem.


        :param variant_id: The variant_id of this OrderItem.
        :type variant_id: str
        """

        self._variant_id = variant_id

    @property
    def weight(self):
        """Gets the weight of this OrderItem.


        :return: The weight of this OrderItem.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this OrderItem.


        :param weight: The weight of this OrderItem.
        :type weight: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this OrderItem.


        :return: The weight_unit of this OrderItem.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this OrderItem.


        :param weight_unit: The weight_unit of this OrderItem.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit
