# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductVariantImageAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, image_name: str=None, label: str=None, mime: str=None, option_id: str=None, position: int=0, product_id: str=None, product_variant_id: int=None, store_id: str=None, type: str='base', url: str=None):
        """ProductVariantImageAdd - a model defined in OpenAPI

        :param content: The content of this ProductVariantImageAdd.
        :param image_name: The image_name of this ProductVariantImageAdd.
        :param label: The label of this ProductVariantImageAdd.
        :param mime: The mime of this ProductVariantImageAdd.
        :param option_id: The option_id of this ProductVariantImageAdd.
        :param position: The position of this ProductVariantImageAdd.
        :param product_id: The product_id of this ProductVariantImageAdd.
        :param product_variant_id: The product_variant_id of this ProductVariantImageAdd.
        :param store_id: The store_id of this ProductVariantImageAdd.
        :param type: The type of this ProductVariantImageAdd.
        :param url: The url of this ProductVariantImageAdd.
        """
        self.openapi_types = {
            'content': str,
            'image_name': str,
            'label': str,
            'mime': str,
            'option_id': str,
            'position': int,
            'product_id': str,
            'product_variant_id': int,
            'store_id': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'content': 'content',
            'image_name': 'image_name',
            'label': 'label',
            'mime': 'mime',
            'option_id': 'option_id',
            'position': 'position',
            'product_id': 'product_id',
            'product_variant_id': 'product_variant_id',
            'store_id': 'store_id',
            'type': 'type',
            'url': 'url'
        }

        self._content = content
        self._image_name = image_name
        self._label = label
        self._mime = mime
        self._option_id = option_id
        self._position = position
        self._product_id = product_id
        self._product_variant_id = product_variant_id
        self._store_id = store_id
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductVariantImageAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductVariantImageAdd of this ProductVariantImageAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ProductVariantImageAdd.

        Content(body) encoded in base64 of image file

        :return: The content of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ProductVariantImageAdd.

        Content(body) encoded in base64 of image file

        :param content: The content of this ProductVariantImageAdd.
        :type content: str
        """

        self._content = content

    @property
    def image_name(self):
        """Gets the image_name of this ProductVariantImageAdd.

        Defines image's name

        :return: The image_name of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ProductVariantImageAdd.

        Defines image's name

        :param image_name: The image_name of this ProductVariantImageAdd.
        :type image_name: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")

        self._image_name = image_name

    @property
    def label(self):
        """Gets the label of this ProductVariantImageAdd.

        Defines alternative text that has to be attached to the picture

        :return: The label of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ProductVariantImageAdd.

        Defines alternative text that has to be attached to the picture

        :param label: The label of this ProductVariantImageAdd.
        :type label: str
        """

        self._label = label

    @property
    def mime(self):
        """Gets the mime of this ProductVariantImageAdd.

        Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.

        :return: The mime of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """Sets the mime of this ProductVariantImageAdd.

        Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.

        :param mime: The mime of this ProductVariantImageAdd.
        :type mime: str
        """

        self._mime = mime

    @property
    def option_id(self):
        """Gets the option_id of this ProductVariantImageAdd.

        Defines option id of the product variant for which the image will be added

        :return: The option_id of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """Sets the option_id of this ProductVariantImageAdd.

        Defines option id of the product variant for which the image will be added

        :param option_id: The option_id of this ProductVariantImageAdd.
        :type option_id: str
        """

        self._option_id = option_id

    @property
    def position(self):
        """Gets the position of this ProductVariantImageAdd.

        Defines image’s position in the list

        :return: The position of this ProductVariantImageAdd.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ProductVariantImageAdd.

        Defines image’s position in the list

        :param position: The position of this ProductVariantImageAdd.
        :type position: int
        """

        self._position = position

    @property
    def product_id(self):
        """Gets the product_id of this ProductVariantImageAdd.

        Defines product id where the variant image has to be added

        :return: The product_id of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductVariantImageAdd.

        Defines product id where the variant image has to be added

        :param product_id: The product_id of this ProductVariantImageAdd.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_variant_id(self):
        """Gets the product_variant_id of this ProductVariantImageAdd.

        Defines product's variants specified by variant id

        :return: The product_variant_id of this ProductVariantImageAdd.
        :rtype: int
        """
        return self._product_variant_id

    @product_variant_id.setter
    def product_variant_id(self, product_variant_id):
        """Sets the product_variant_id of this ProductVariantImageAdd.

        Defines product's variants specified by variant id

        :param product_variant_id: The product_variant_id of this ProductVariantImageAdd.
        :type product_variant_id: int
        """
        if product_variant_id is None:
            raise ValueError("Invalid value for `product_variant_id`, must not be `None`")

        self._product_variant_id = product_variant_id

    @property
    def store_id(self):
        """Gets the store_id of this ProductVariantImageAdd.

        Store Id

        :return: The store_id of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ProductVariantImageAdd.

        Store Id

        :param store_id: The store_id of this ProductVariantImageAdd.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def type(self):
        """Gets the type of this ProductVariantImageAdd.

        Defines image's types that are specified by comma-separated list

        :return: The type of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductVariantImageAdd.

        Defines image's types that are specified by comma-separated list

        :param type: The type of this ProductVariantImageAdd.
        :type type: str
        """
        allowed_values = ["small", "base", "additional", "thumbnail"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this ProductVariantImageAdd.

        Defines URL of the image that has to be added

        :return: The url of this ProductVariantImageAdd.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductVariantImageAdd.

        Defines URL of the image that has to be added

        :param url: The url of this ProductVariantImageAdd.
        :type url: str
        """

        self._url = url
