# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_price_update_group_prices_inner import ProductPriceUpdateGroupPricesInner
from openapi_server import util


class ProductPriceUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_prices: List[ProductPriceUpdateGroupPricesInner]=None, product_id: str=None):
        """ProductPriceUpdate - a model defined in OpenAPI

        :param group_prices: The group_prices of this ProductPriceUpdate.
        :param product_id: The product_id of this ProductPriceUpdate.
        """
        self.openapi_types = {
            'group_prices': List[ProductPriceUpdateGroupPricesInner],
            'product_id': str
        }

        self.attribute_map = {
            'group_prices': 'group_prices',
            'product_id': 'product_id'
        }

        self._group_prices = group_prices
        self._product_id = product_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPriceUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPriceUpdate of this ProductPriceUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_prices(self):
        """Gets the group_prices of this ProductPriceUpdate.

        Defines product's group prices

        :return: The group_prices of this ProductPriceUpdate.
        :rtype: List[ProductPriceUpdateGroupPricesInner]
        """
        return self._group_prices

    @group_prices.setter
    def group_prices(self, group_prices):
        """Sets the group_prices of this ProductPriceUpdate.

        Defines product's group prices

        :param group_prices: The group_prices of this ProductPriceUpdate.
        :type group_prices: List[ProductPriceUpdateGroupPricesInner]
        """

        self._group_prices = group_prices

    @property
    def product_id(self):
        """Gets the product_id of this ProductPriceUpdate.

        Defines the product where the price has to be updated

        :return: The product_id of this ProductPriceUpdate.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductPriceUpdate.

        Defines the product where the price has to be updated

        :param product_id: The product_id of this ProductPriceUpdate.
        :type product_id: str
        """

        self._product_id = product_id
