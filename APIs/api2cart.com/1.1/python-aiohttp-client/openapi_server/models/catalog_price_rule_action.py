# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coupon_condition import CouponCondition
from openapi_server import util


class CatalogPriceRuleAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, apply_to: str=None, conditions: List[CouponCondition]=None, currency_code: str=None, custom_fields: object=None, include_tax: bool=None, quantity: float=None, scope: str=None, type: str=None, value: float=None):
        """CatalogPriceRuleAction - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this CatalogPriceRuleAction.
        :param apply_to: The apply_to of this CatalogPriceRuleAction.
        :param conditions: The conditions of this CatalogPriceRuleAction.
        :param currency_code: The currency_code of this CatalogPriceRuleAction.
        :param custom_fields: The custom_fields of this CatalogPriceRuleAction.
        :param include_tax: The include_tax of this CatalogPriceRuleAction.
        :param quantity: The quantity of this CatalogPriceRuleAction.
        :param scope: The scope of this CatalogPriceRuleAction.
        :param type: The type of this CatalogPriceRuleAction.
        :param value: The value of this CatalogPriceRuleAction.
        """
        self.openapi_types = {
            'additional_fields': object,
            'apply_to': str,
            'conditions': List[CouponCondition],
            'currency_code': str,
            'custom_fields': object,
            'include_tax': bool,
            'quantity': float,
            'scope': str,
            'type': str,
            'value': float
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'apply_to': 'apply_to',
            'conditions': 'conditions',
            'currency_code': 'currency_code',
            'custom_fields': 'custom_fields',
            'include_tax': 'include_tax',
            'quantity': 'quantity',
            'scope': 'scope',
            'type': 'type',
            'value': 'value'
        }

        self._additional_fields = additional_fields
        self._apply_to = apply_to
        self._conditions = conditions
        self._currency_code = currency_code
        self._custom_fields = custom_fields
        self._include_tax = include_tax
        self._quantity = quantity
        self._scope = scope
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogPriceRuleAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogPriceRule_Action of this CatalogPriceRuleAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CatalogPriceRuleAction.


        :return: The additional_fields of this CatalogPriceRuleAction.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CatalogPriceRuleAction.


        :param additional_fields: The additional_fields of this CatalogPriceRuleAction.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def apply_to(self):
        """Gets the apply_to of this CatalogPriceRuleAction.


        :return: The apply_to of this CatalogPriceRuleAction.
        :rtype: str
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this CatalogPriceRuleAction.


        :param apply_to: The apply_to of this CatalogPriceRuleAction.
        :type apply_to: str
        """

        self._apply_to = apply_to

    @property
    def conditions(self):
        """Gets the conditions of this CatalogPriceRuleAction.


        :return: The conditions of this CatalogPriceRuleAction.
        :rtype: List[CouponCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CatalogPriceRuleAction.


        :param conditions: The conditions of this CatalogPriceRuleAction.
        :type conditions: List[CouponCondition]
        """

        self._conditions = conditions

    @property
    def currency_code(self):
        """Gets the currency_code of this CatalogPriceRuleAction.


        :return: The currency_code of this CatalogPriceRuleAction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CatalogPriceRuleAction.


        :param currency_code: The currency_code of this CatalogPriceRuleAction.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CatalogPriceRuleAction.


        :return: The custom_fields of this CatalogPriceRuleAction.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CatalogPriceRuleAction.


        :param custom_fields: The custom_fields of this CatalogPriceRuleAction.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def include_tax(self):
        """Gets the include_tax of this CatalogPriceRuleAction.


        :return: The include_tax of this CatalogPriceRuleAction.
        :rtype: bool
        """
        return self._include_tax

    @include_tax.setter
    def include_tax(self, include_tax):
        """Sets the include_tax of this CatalogPriceRuleAction.


        :param include_tax: The include_tax of this CatalogPriceRuleAction.
        :type include_tax: bool
        """

        self._include_tax = include_tax

    @property
    def quantity(self):
        """Gets the quantity of this CatalogPriceRuleAction.


        :return: The quantity of this CatalogPriceRuleAction.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CatalogPriceRuleAction.


        :param quantity: The quantity of this CatalogPriceRuleAction.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def scope(self):
        """Gets the scope of this CatalogPriceRuleAction.


        :return: The scope of this CatalogPriceRuleAction.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CatalogPriceRuleAction.


        :param scope: The scope of this CatalogPriceRuleAction.
        :type scope: str
        """

        self._scope = scope

    @property
    def type(self):
        """Gets the type of this CatalogPriceRuleAction.


        :return: The type of this CatalogPriceRuleAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogPriceRuleAction.


        :param type: The type of this CatalogPriceRuleAction.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this CatalogPriceRuleAction.


        :return: The value of this CatalogPriceRuleAction.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CatalogPriceRuleAction.


        :param value: The value of this CatalogPriceRuleAction.
        :type value: float
        """

        self._value = value
