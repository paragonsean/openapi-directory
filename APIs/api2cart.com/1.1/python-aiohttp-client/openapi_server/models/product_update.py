# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backorder_status: str=None, barcode: str=None, categories_ids: str=None, clear_cache: bool=True, cost_price: float=None, country_of_origin: str=None, description: str=None, disable_report_cache: bool=False, gtin: str=None, harmonized_system_code: str=None, height: float=None, id: str=None, in_stock: bool=None, increase_quantity: float=None, lang_id: str=None, length: float=None, manage_stock: bool=None, manufacturer: str=None, manufacturer_id: str=None, meta_description: str=None, meta_keywords: str=None, meta_title: str=None, model: str=None, name: str=None, old_price: float=None, price: float=None, product_class: str=None, quantity: float=None, reduce_quantity: float=None, reindex: bool=True, report_request_id: str=None, reserve_quantity: float=None, retail_price: float=None, search_keywords: str=None, seo_url: str=None, short_description: str=None, sku: str=None, special_price: float=None, sprice_create: str=None, sprice_expire: str=None, status: str=None, store_id: str=None, tags: str=None, taxable: bool=True, visible: str=None, warehouse_id: str=None, weight: float=None, width: float=None):
        """ProductUpdate - a model defined in OpenAPI

        :param backorder_status: The backorder_status of this ProductUpdate.
        :param barcode: The barcode of this ProductUpdate.
        :param categories_ids: The categories_ids of this ProductUpdate.
        :param clear_cache: The clear_cache of this ProductUpdate.
        :param cost_price: The cost_price of this ProductUpdate.
        :param country_of_origin: The country_of_origin of this ProductUpdate.
        :param description: The description of this ProductUpdate.
        :param disable_report_cache: The disable_report_cache of this ProductUpdate.
        :param gtin: The gtin of this ProductUpdate.
        :param harmonized_system_code: The harmonized_system_code of this ProductUpdate.
        :param height: The height of this ProductUpdate.
        :param id: The id of this ProductUpdate.
        :param in_stock: The in_stock of this ProductUpdate.
        :param increase_quantity: The increase_quantity of this ProductUpdate.
        :param lang_id: The lang_id of this ProductUpdate.
        :param length: The length of this ProductUpdate.
        :param manage_stock: The manage_stock of this ProductUpdate.
        :param manufacturer: The manufacturer of this ProductUpdate.
        :param manufacturer_id: The manufacturer_id of this ProductUpdate.
        :param meta_description: The meta_description of this ProductUpdate.
        :param meta_keywords: The meta_keywords of this ProductUpdate.
        :param meta_title: The meta_title of this ProductUpdate.
        :param model: The model of this ProductUpdate.
        :param name: The name of this ProductUpdate.
        :param old_price: The old_price of this ProductUpdate.
        :param price: The price of this ProductUpdate.
        :param product_class: The product_class of this ProductUpdate.
        :param quantity: The quantity of this ProductUpdate.
        :param reduce_quantity: The reduce_quantity of this ProductUpdate.
        :param reindex: The reindex of this ProductUpdate.
        :param report_request_id: The report_request_id of this ProductUpdate.
        :param reserve_quantity: The reserve_quantity of this ProductUpdate.
        :param retail_price: The retail_price of this ProductUpdate.
        :param search_keywords: The search_keywords of this ProductUpdate.
        :param seo_url: The seo_url of this ProductUpdate.
        :param short_description: The short_description of this ProductUpdate.
        :param sku: The sku of this ProductUpdate.
        :param special_price: The special_price of this ProductUpdate.
        :param sprice_create: The sprice_create of this ProductUpdate.
        :param sprice_expire: The sprice_expire of this ProductUpdate.
        :param status: The status of this ProductUpdate.
        :param store_id: The store_id of this ProductUpdate.
        :param tags: The tags of this ProductUpdate.
        :param taxable: The taxable of this ProductUpdate.
        :param visible: The visible of this ProductUpdate.
        :param warehouse_id: The warehouse_id of this ProductUpdate.
        :param weight: The weight of this ProductUpdate.
        :param width: The width of this ProductUpdate.
        """
        self.openapi_types = {
            'backorder_status': str,
            'barcode': str,
            'categories_ids': str,
            'clear_cache': bool,
            'cost_price': float,
            'country_of_origin': str,
            'description': str,
            'disable_report_cache': bool,
            'gtin': str,
            'harmonized_system_code': str,
            'height': float,
            'id': str,
            'in_stock': bool,
            'increase_quantity': float,
            'lang_id': str,
            'length': float,
            'manage_stock': bool,
            'manufacturer': str,
            'manufacturer_id': str,
            'meta_description': str,
            'meta_keywords': str,
            'meta_title': str,
            'model': str,
            'name': str,
            'old_price': float,
            'price': float,
            'product_class': str,
            'quantity': float,
            'reduce_quantity': float,
            'reindex': bool,
            'report_request_id': str,
            'reserve_quantity': float,
            'retail_price': float,
            'search_keywords': str,
            'seo_url': str,
            'short_description': str,
            'sku': str,
            'special_price': float,
            'sprice_create': str,
            'sprice_expire': str,
            'status': str,
            'store_id': str,
            'tags': str,
            'taxable': bool,
            'visible': str,
            'warehouse_id': str,
            'weight': float,
            'width': float
        }

        self.attribute_map = {
            'backorder_status': 'backorder_status',
            'barcode': 'barcode',
            'categories_ids': 'categories_ids',
            'clear_cache': 'clear_cache',
            'cost_price': 'cost_price',
            'country_of_origin': 'country_of_origin',
            'description': 'description',
            'disable_report_cache': 'disable_report_cache',
            'gtin': 'gtin',
            'harmonized_system_code': 'harmonized_system_code',
            'height': 'height',
            'id': 'id',
            'in_stock': 'in_stock',
            'increase_quantity': 'increase_quantity',
            'lang_id': 'lang_id',
            'length': 'length',
            'manage_stock': 'manage_stock',
            'manufacturer': 'manufacturer',
            'manufacturer_id': 'manufacturer_id',
            'meta_description': 'meta_description',
            'meta_keywords': 'meta_keywords',
            'meta_title': 'meta_title',
            'model': 'model',
            'name': 'name',
            'old_price': 'old_price',
            'price': 'price',
            'product_class': 'product_class',
            'quantity': 'quantity',
            'reduce_quantity': 'reduce_quantity',
            'reindex': 'reindex',
            'report_request_id': 'report_request_id',
            'reserve_quantity': 'reserve_quantity',
            'retail_price': 'retail_price',
            'search_keywords': 'search_keywords',
            'seo_url': 'seo_url',
            'short_description': 'short_description',
            'sku': 'sku',
            'special_price': 'special_price',
            'sprice_create': 'sprice_create',
            'sprice_expire': 'sprice_expire',
            'status': 'status',
            'store_id': 'store_id',
            'tags': 'tags',
            'taxable': 'taxable',
            'visible': 'visible',
            'warehouse_id': 'warehouse_id',
            'weight': 'weight',
            'width': 'width'
        }

        self._backorder_status = backorder_status
        self._barcode = barcode
        self._categories_ids = categories_ids
        self._clear_cache = clear_cache
        self._cost_price = cost_price
        self._country_of_origin = country_of_origin
        self._description = description
        self._disable_report_cache = disable_report_cache
        self._gtin = gtin
        self._harmonized_system_code = harmonized_system_code
        self._height = height
        self._id = id
        self._in_stock = in_stock
        self._increase_quantity = increase_quantity
        self._lang_id = lang_id
        self._length = length
        self._manage_stock = manage_stock
        self._manufacturer = manufacturer
        self._manufacturer_id = manufacturer_id
        self._meta_description = meta_description
        self._meta_keywords = meta_keywords
        self._meta_title = meta_title
        self._model = model
        self._name = name
        self._old_price = old_price
        self._price = price
        self._product_class = product_class
        self._quantity = quantity
        self._reduce_quantity = reduce_quantity
        self._reindex = reindex
        self._report_request_id = report_request_id
        self._reserve_quantity = reserve_quantity
        self._retail_price = retail_price
        self._search_keywords = search_keywords
        self._seo_url = seo_url
        self._short_description = short_description
        self._sku = sku
        self._special_price = special_price
        self._sprice_create = sprice_create
        self._sprice_expire = sprice_expire
        self._status = status
        self._store_id = store_id
        self._tags = tags
        self._taxable = taxable
        self._visible = visible
        self._warehouse_id = warehouse_id
        self._weight = weight
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductUpdate of this ProductUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backorder_status(self):
        """Gets the backorder_status of this ProductUpdate.

        Set backorder status

        :return: The backorder_status of this ProductUpdate.
        :rtype: str
        """
        return self._backorder_status

    @backorder_status.setter
    def backorder_status(self, backorder_status):
        """Sets the backorder_status of this ProductUpdate.

        Set backorder status

        :param backorder_status: The backorder_status of this ProductUpdate.
        :type backorder_status: str
        """

        self._backorder_status = backorder_status

    @property
    def barcode(self):
        """Gets the barcode of this ProductUpdate.

        A barcode is a unique code composed of numbers used as a product identifier.

        :return: The barcode of this ProductUpdate.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductUpdate.

        A barcode is a unique code composed of numbers used as a product identifier.

        :param barcode: The barcode of this ProductUpdate.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def categories_ids(self):
        """Gets the categories_ids of this ProductUpdate.

        Defines product add that is specified by comma-separated categories id

        :return: The categories_ids of this ProductUpdate.
        :rtype: str
        """
        return self._categories_ids

    @categories_ids.setter
    def categories_ids(self, categories_ids):
        """Sets the categories_ids of this ProductUpdate.

        Defines product add that is specified by comma-separated categories id

        :param categories_ids: The categories_ids of this ProductUpdate.
        :type categories_ids: str
        """

        self._categories_ids = categories_ids

    @property
    def clear_cache(self):
        """Gets the clear_cache of this ProductUpdate.

        Is cache clear required

        :return: The clear_cache of this ProductUpdate.
        :rtype: bool
        """
        return self._clear_cache

    @clear_cache.setter
    def clear_cache(self, clear_cache):
        """Sets the clear_cache of this ProductUpdate.

        Is cache clear required

        :param clear_cache: The clear_cache of this ProductUpdate.
        :type clear_cache: bool
        """

        self._clear_cache = clear_cache

    @property
    def cost_price(self):
        """Gets the cost_price of this ProductUpdate.

        Defines new product's cost price

        :return: The cost_price of this ProductUpdate.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this ProductUpdate.

        Defines new product's cost price

        :param cost_price: The cost_price of this ProductUpdate.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this ProductUpdate.

        The country where the inventory item was made

        :return: The country_of_origin of this ProductUpdate.
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this ProductUpdate.

        The country where the inventory item was made

        :param country_of_origin: The country_of_origin of this ProductUpdate.
        :type country_of_origin: str
        """

        self._country_of_origin = country_of_origin

    @property
    def description(self):
        """Gets the description of this ProductUpdate.

        Defines new product's description

        :return: The description of this ProductUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductUpdate.

        Defines new product's description

        :param description: The description of this ProductUpdate.
        :type description: str
        """

        self._description = description

    @property
    def disable_report_cache(self):
        """Gets the disable_report_cache of this ProductUpdate.

        Disable report cache for current request

        :return: The disable_report_cache of this ProductUpdate.
        :rtype: bool
        """
        return self._disable_report_cache

    @disable_report_cache.setter
    def disable_report_cache(self, disable_report_cache):
        """Sets the disable_report_cache of this ProductUpdate.

        Disable report cache for current request

        :param disable_report_cache: The disable_report_cache of this ProductUpdate.
        :type disable_report_cache: bool
        """

        self._disable_report_cache = disable_report_cache

    @property
    def gtin(self):
        """Gets the gtin of this ProductUpdate.

        Global Trade Item Number. An GTIN is an identifier for trade items.

        :return: The gtin of this ProductUpdate.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ProductUpdate.

        Global Trade Item Number. An GTIN is an identifier for trade items.

        :param gtin: The gtin of this ProductUpdate.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def harmonized_system_code(self):
        """Gets the harmonized_system_code of this ProductUpdate.

        Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes

        :return: The harmonized_system_code of this ProductUpdate.
        :rtype: str
        """
        return self._harmonized_system_code

    @harmonized_system_code.setter
    def harmonized_system_code(self, harmonized_system_code):
        """Sets the harmonized_system_code of this ProductUpdate.

        Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes

        :param harmonized_system_code: The harmonized_system_code of this ProductUpdate.
        :type harmonized_system_code: str
        """

        self._harmonized_system_code = harmonized_system_code

    @property
    def height(self):
        """Gets the height of this ProductUpdate.

        Defines product's height

        :return: The height of this ProductUpdate.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ProductUpdate.

        Defines product's height

        :param height: The height of this ProductUpdate.
        :type height: float
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this ProductUpdate.

        Defines product id that has to be updated

        :return: The id of this ProductUpdate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductUpdate.

        Defines product id that has to be updated

        :param id: The id of this ProductUpdate.
        :type id: str
        """

        self._id = id

    @property
    def in_stock(self):
        """Gets the in_stock of this ProductUpdate.

        Set stock status

        :return: The in_stock of this ProductUpdate.
        :rtype: bool
        """
        return self._in_stock

    @in_stock.setter
    def in_stock(self, in_stock):
        """Sets the in_stock of this ProductUpdate.

        Set stock status

        :param in_stock: The in_stock of this ProductUpdate.
        :type in_stock: bool
        """

        self._in_stock = in_stock

    @property
    def increase_quantity(self):
        """Gets the increase_quantity of this ProductUpdate.

        Defines the incremental changes in product quantity

        :return: The increase_quantity of this ProductUpdate.
        :rtype: float
        """
        return self._increase_quantity

    @increase_quantity.setter
    def increase_quantity(self, increase_quantity):
        """Sets the increase_quantity of this ProductUpdate.

        Defines the incremental changes in product quantity

        :param increase_quantity: The increase_quantity of this ProductUpdate.
        :type increase_quantity: float
        """

        self._increase_quantity = increase_quantity

    @property
    def lang_id(self):
        """Gets the lang_id of this ProductUpdate.

        Language id

        :return: The lang_id of this ProductUpdate.
        :rtype: str
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ProductUpdate.

        Language id

        :param lang_id: The lang_id of this ProductUpdate.
        :type lang_id: str
        """

        self._lang_id = lang_id

    @property
    def length(self):
        """Gets the length of this ProductUpdate.

        Defines product's length

        :return: The length of this ProductUpdate.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ProductUpdate.

        Defines product's length

        :param length: The length of this ProductUpdate.
        :type length: float
        """

        self._length = length

    @property
    def manage_stock(self):
        """Gets the manage_stock of this ProductUpdate.

        Defines inventory tracking for product

        :return: The manage_stock of this ProductUpdate.
        :rtype: bool
        """
        return self._manage_stock

    @manage_stock.setter
    def manage_stock(self, manage_stock):
        """Sets the manage_stock of this ProductUpdate.

        Defines inventory tracking for product

        :param manage_stock: The manage_stock of this ProductUpdate.
        :type manage_stock: bool
        """

        self._manage_stock = manage_stock

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductUpdate.

        Defines product's manufacturer

        :return: The manufacturer of this ProductUpdate.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductUpdate.

        Defines product's manufacturer

        :param manufacturer: The manufacturer of this ProductUpdate.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_id(self):
        """Gets the manufacturer_id of this ProductUpdate.

        Defines product's manufacturer by manufacturer_id

        :return: The manufacturer_id of this ProductUpdate.
        :rtype: str
        """
        return self._manufacturer_id

    @manufacturer_id.setter
    def manufacturer_id(self, manufacturer_id):
        """Sets the manufacturer_id of this ProductUpdate.

        Defines product's manufacturer by manufacturer_id

        :param manufacturer_id: The manufacturer_id of this ProductUpdate.
        :type manufacturer_id: str
        """

        self._manufacturer_id = manufacturer_id

    @property
    def meta_description(self):
        """Gets the meta_description of this ProductUpdate.

        Defines unique meta description of a entity

        :return: The meta_description of this ProductUpdate.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ProductUpdate.

        Defines unique meta description of a entity

        :param meta_description: The meta_description of this ProductUpdate.
        :type meta_description: str
        """

        self._meta_description = meta_description

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this ProductUpdate.

        Defines unique meta keywords for each entity

        :return: The meta_keywords of this ProductUpdate.
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this ProductUpdate.

        Defines unique meta keywords for each entity

        :param meta_keywords: The meta_keywords of this ProductUpdate.
        :type meta_keywords: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_title(self):
        """Gets the meta_title of this ProductUpdate.

        Defines unique meta title for each entity

        :return: The meta_title of this ProductUpdate.
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this ProductUpdate.

        Defines unique meta title for each entity

        :param meta_title: The meta_title of this ProductUpdate.
        :type meta_title: str
        """

        self._meta_title = meta_title

    @property
    def model(self):
        """Gets the model of this ProductUpdate.

        Defines product model that has to be updated

        :return: The model of this ProductUpdate.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProductUpdate.

        Defines product model that has to be updated

        :param model: The model of this ProductUpdate.
        :type model: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this ProductUpdate.

        Defines product's name that has to be updated

        :return: The name of this ProductUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductUpdate.

        Defines product's name that has to be updated

        :param name: The name of this ProductUpdate.
        :type name: str
        """

        self._name = name

    @property
    def old_price(self):
        """Gets the old_price of this ProductUpdate.

        Defines product's old price

        :return: The old_price of this ProductUpdate.
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ProductUpdate.

        Defines product's old price

        :param old_price: The old_price of this ProductUpdate.
        :type old_price: float
        """

        self._old_price = old_price

    @property
    def price(self):
        """Gets the price of this ProductUpdate.

        Defines new product's price

        :return: The price of this ProductUpdate.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductUpdate.

        Defines new product's price

        :param price: The price of this ProductUpdate.
        :type price: float
        """

        self._price = price

    @property
    def product_class(self):
        """Gets the product_class of this ProductUpdate.

        A categorization for the product

        :return: The product_class of this ProductUpdate.
        :rtype: str
        """
        return self._product_class

    @product_class.setter
    def product_class(self, product_class):
        """Sets the product_class of this ProductUpdate.

        A categorization for the product

        :param product_class: The product_class of this ProductUpdate.
        :type product_class: str
        """

        self._product_class = product_class

    @property
    def quantity(self):
        """Gets the quantity of this ProductUpdate.

        Defines new product's quantity

        :return: The quantity of this ProductUpdate.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductUpdate.

        Defines new product's quantity

        :param quantity: The quantity of this ProductUpdate.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def reduce_quantity(self):
        """Gets the reduce_quantity of this ProductUpdate.

        Defines the decrement changes in product quantity

        :return: The reduce_quantity of this ProductUpdate.
        :rtype: float
        """
        return self._reduce_quantity

    @reduce_quantity.setter
    def reduce_quantity(self, reduce_quantity):
        """Sets the reduce_quantity of this ProductUpdate.

        Defines the decrement changes in product quantity

        :param reduce_quantity: The reduce_quantity of this ProductUpdate.
        :type reduce_quantity: float
        """

        self._reduce_quantity = reduce_quantity

    @property
    def reindex(self):
        """Gets the reindex of this ProductUpdate.

        Is reindex required

        :return: The reindex of this ProductUpdate.
        :rtype: bool
        """
        return self._reindex

    @reindex.setter
    def reindex(self, reindex):
        """Sets the reindex of this ProductUpdate.

        Is reindex required

        :param reindex: The reindex of this ProductUpdate.
        :type reindex: bool
        """

        self._reindex = reindex

    @property
    def report_request_id(self):
        """Gets the report_request_id of this ProductUpdate.

        Report request id

        :return: The report_request_id of this ProductUpdate.
        :rtype: str
        """
        return self._report_request_id

    @report_request_id.setter
    def report_request_id(self, report_request_id):
        """Sets the report_request_id of this ProductUpdate.

        Report request id

        :param report_request_id: The report_request_id of this ProductUpdate.
        :type report_request_id: str
        """

        self._report_request_id = report_request_id

    @property
    def reserve_quantity(self):
        """Gets the reserve_quantity of this ProductUpdate.

        This parameter allows to reserve/unreserve product quantity.

        :return: The reserve_quantity of this ProductUpdate.
        :rtype: float
        """
        return self._reserve_quantity

    @reserve_quantity.setter
    def reserve_quantity(self, reserve_quantity):
        """Sets the reserve_quantity of this ProductUpdate.

        This parameter allows to reserve/unreserve product quantity.

        :param reserve_quantity: The reserve_quantity of this ProductUpdate.
        :type reserve_quantity: float
        """

        self._reserve_quantity = reserve_quantity

    @property
    def retail_price(self):
        """Gets the retail_price of this ProductUpdate.

        Defines new product's retail price

        :return: The retail_price of this ProductUpdate.
        :rtype: float
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this ProductUpdate.

        Defines new product's retail price

        :param retail_price: The retail_price of this ProductUpdate.
        :type retail_price: float
        """

        self._retail_price = retail_price

    @property
    def search_keywords(self):
        """Gets the search_keywords of this ProductUpdate.

        Defines unique search keywords

        :return: The search_keywords of this ProductUpdate.
        :rtype: str
        """
        return self._search_keywords

    @search_keywords.setter
    def search_keywords(self, search_keywords):
        """Sets the search_keywords of this ProductUpdate.

        Defines unique search keywords

        :param search_keywords: The search_keywords of this ProductUpdate.
        :type search_keywords: str
        """

        self._search_keywords = search_keywords

    @property
    def seo_url(self):
        """Gets the seo_url of this ProductUpdate.

        Defines unique URL for SEO

        :return: The seo_url of this ProductUpdate.
        :rtype: str
        """
        return self._seo_url

    @seo_url.setter
    def seo_url(self, seo_url):
        """Sets the seo_url of this ProductUpdate.

        Defines unique URL for SEO

        :param seo_url: The seo_url of this ProductUpdate.
        :type seo_url: str
        """

        self._seo_url = seo_url

    @property
    def short_description(self):
        """Gets the short_description of this ProductUpdate.

        Defines short description

        :return: The short_description of this ProductUpdate.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductUpdate.

        Defines short description

        :param short_description: The short_description of this ProductUpdate.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def sku(self):
        """Gets the sku of this ProductUpdate.

        Defines new product's sku

        :return: The sku of this ProductUpdate.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductUpdate.

        Defines new product's sku

        :param sku: The sku of this ProductUpdate.
        :type sku: str
        """

        self._sku = sku

    @property
    def special_price(self):
        """Gets the special_price of this ProductUpdate.

        Defines new product's special price

        :return: The special_price of this ProductUpdate.
        :rtype: float
        """
        return self._special_price

    @special_price.setter
    def special_price(self, special_price):
        """Sets the special_price of this ProductUpdate.

        Defines new product's special price

        :param special_price: The special_price of this ProductUpdate.
        :type special_price: float
        """

        self._special_price = special_price

    @property
    def sprice_create(self):
        """Gets the sprice_create of this ProductUpdate.

        Defines the date of special price creation

        :return: The sprice_create of this ProductUpdate.
        :rtype: str
        """
        return self._sprice_create

    @sprice_create.setter
    def sprice_create(self, sprice_create):
        """Sets the sprice_create of this ProductUpdate.

        Defines the date of special price creation

        :param sprice_create: The sprice_create of this ProductUpdate.
        :type sprice_create: str
        """

        self._sprice_create = sprice_create

    @property
    def sprice_expire(self):
        """Gets the sprice_expire of this ProductUpdate.

        Defines the term of special price offer duration

        :return: The sprice_expire of this ProductUpdate.
        :rtype: str
        """
        return self._sprice_expire

    @sprice_expire.setter
    def sprice_expire(self, sprice_expire):
        """Sets the sprice_expire of this ProductUpdate.

        Defines the term of special price offer duration

        :param sprice_expire: The sprice_expire of this ProductUpdate.
        :type sprice_expire: str
        """

        self._sprice_expire = sprice_expire

    @property
    def status(self):
        """Gets the status of this ProductUpdate.

        Defines product's status

        :return: The status of this ProductUpdate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductUpdate.

        Defines product's status

        :param status: The status of this ProductUpdate.
        :type status: str
        """

        self._status = status

    @property
    def store_id(self):
        """Gets the store_id of this ProductUpdate.

        Defines store id where the product should be found

        :return: The store_id of this ProductUpdate.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ProductUpdate.

        Defines store id where the product should be found

        :param store_id: The store_id of this ProductUpdate.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def tags(self):
        """Gets the tags of this ProductUpdate.

        Product tags

        :return: The tags of this ProductUpdate.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProductUpdate.

        Product tags

        :param tags: The tags of this ProductUpdate.
        :type tags: str
        """

        self._tags = tags

    @property
    def taxable(self):
        """Gets the taxable of this ProductUpdate.

        Specifies whether a tax is charged

        :return: The taxable of this ProductUpdate.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this ProductUpdate.

        Specifies whether a tax is charged

        :param taxable: The taxable of this ProductUpdate.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def visible(self):
        """Gets the visible of this ProductUpdate.

        Set visibility status

        :return: The visible of this ProductUpdate.
        :rtype: str
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ProductUpdate.

        Set visibility status

        :param visible: The visible of this ProductUpdate.
        :type visible: str
        """

        self._visible = visible

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ProductUpdate.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :return: The warehouse_id of this ProductUpdate.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ProductUpdate.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :param warehouse_id: The warehouse_id of this ProductUpdate.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id

    @property
    def weight(self):
        """Gets the weight of this ProductUpdate.

        Weight

        :return: The weight of this ProductUpdate.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProductUpdate.

        Weight

        :param weight: The weight of this ProductUpdate.
        :type weight: float
        """

        self._weight = weight

    @property
    def width(self):
        """Gets the width of this ProductUpdate.

        Defines product's width

        :return: The width of this ProductUpdate.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ProductUpdate.

        Defines product's width

        :param width: The width of this ProductUpdate.
        :type width: float
        """

        self._width = width
