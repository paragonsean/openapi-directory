# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoreAttributeGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, assigned_attribute_ids: List[str]=None, attribute_set_id: str=None, custom_fields: object=None, id: str=None, name: str=None, position: int=None):
        """StoreAttributeGroup - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this StoreAttributeGroup.
        :param assigned_attribute_ids: The assigned_attribute_ids of this StoreAttributeGroup.
        :param attribute_set_id: The attribute_set_id of this StoreAttributeGroup.
        :param custom_fields: The custom_fields of this StoreAttributeGroup.
        :param id: The id of this StoreAttributeGroup.
        :param name: The name of this StoreAttributeGroup.
        :param position: The position of this StoreAttributeGroup.
        """
        self.openapi_types = {
            'additional_fields': object,
            'assigned_attribute_ids': List[str],
            'attribute_set_id': str,
            'custom_fields': object,
            'id': str,
            'name': str,
            'position': int
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'assigned_attribute_ids': 'assigned_attribute_ids',
            'attribute_set_id': 'attribute_set_id',
            'custom_fields': 'custom_fields',
            'id': 'id',
            'name': 'name',
            'position': 'position'
        }

        self._additional_fields = additional_fields
        self._assigned_attribute_ids = assigned_attribute_ids
        self._attribute_set_id = attribute_set_id
        self._custom_fields = custom_fields
        self._id = id
        self._name = name
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreAttributeGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreAttribute_Group of this StoreAttributeGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this StoreAttributeGroup.


        :return: The additional_fields of this StoreAttributeGroup.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this StoreAttributeGroup.


        :param additional_fields: The additional_fields of this StoreAttributeGroup.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def assigned_attribute_ids(self):
        """Gets the assigned_attribute_ids of this StoreAttributeGroup.


        :return: The assigned_attribute_ids of this StoreAttributeGroup.
        :rtype: List[str]
        """
        return self._assigned_attribute_ids

    @assigned_attribute_ids.setter
    def assigned_attribute_ids(self, assigned_attribute_ids):
        """Sets the assigned_attribute_ids of this StoreAttributeGroup.


        :param assigned_attribute_ids: The assigned_attribute_ids of this StoreAttributeGroup.
        :type assigned_attribute_ids: List[str]
        """

        self._assigned_attribute_ids = assigned_attribute_ids

    @property
    def attribute_set_id(self):
        """Gets the attribute_set_id of this StoreAttributeGroup.


        :return: The attribute_set_id of this StoreAttributeGroup.
        :rtype: str
        """
        return self._attribute_set_id

    @attribute_set_id.setter
    def attribute_set_id(self, attribute_set_id):
        """Sets the attribute_set_id of this StoreAttributeGroup.


        :param attribute_set_id: The attribute_set_id of this StoreAttributeGroup.
        :type attribute_set_id: str
        """

        self._attribute_set_id = attribute_set_id

    @property
    def custom_fields(self):
        """Gets the custom_fields of this StoreAttributeGroup.


        :return: The custom_fields of this StoreAttributeGroup.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this StoreAttributeGroup.


        :param custom_fields: The custom_fields of this StoreAttributeGroup.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this StoreAttributeGroup.


        :return: The id of this StoreAttributeGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreAttributeGroup.


        :param id: The id of this StoreAttributeGroup.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this StoreAttributeGroup.


        :return: The name of this StoreAttributeGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoreAttributeGroup.


        :param name: The name of this StoreAttributeGroup.
        :type name: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this StoreAttributeGroup.


        :return: The position of this StoreAttributeGroup.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this StoreAttributeGroup.


        :param position: The position of this StoreAttributeGroup.
        :type position: int
        """

        self._position = position
