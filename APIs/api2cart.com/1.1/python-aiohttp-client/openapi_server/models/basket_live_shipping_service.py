# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BasketLiveShippingService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, callback: str=None, callback_err_cnt: int=None, custom_fields: object=None, enabled_on_store: bool=None, id: str=None, name: str=None):
        """BasketLiveShippingService - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this BasketLiveShippingService.
        :param callback: The callback of this BasketLiveShippingService.
        :param callback_err_cnt: The callback_err_cnt of this BasketLiveShippingService.
        :param custom_fields: The custom_fields of this BasketLiveShippingService.
        :param enabled_on_store: The enabled_on_store of this BasketLiveShippingService.
        :param id: The id of this BasketLiveShippingService.
        :param name: The name of this BasketLiveShippingService.
        """
        self.openapi_types = {
            'additional_fields': object,
            'callback': str,
            'callback_err_cnt': int,
            'custom_fields': object,
            'enabled_on_store': bool,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'callback': 'callback',
            'callback_err_cnt': 'callback_err_cnt',
            'custom_fields': 'custom_fields',
            'enabled_on_store': 'enabled_on_store',
            'id': 'id',
            'name': 'name'
        }

        self._additional_fields = additional_fields
        self._callback = callback
        self._callback_err_cnt = callback_err_cnt
        self._custom_fields = custom_fields
        self._enabled_on_store = enabled_on_store
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasketLiveShippingService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Basket_LiveShippingService of this BasketLiveShippingService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this BasketLiveShippingService.


        :return: The additional_fields of this BasketLiveShippingService.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this BasketLiveShippingService.


        :param additional_fields: The additional_fields of this BasketLiveShippingService.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def callback(self):
        """Gets the callback of this BasketLiveShippingService.


        :return: The callback of this BasketLiveShippingService.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this BasketLiveShippingService.


        :param callback: The callback of this BasketLiveShippingService.
        :type callback: str
        """

        self._callback = callback

    @property
    def callback_err_cnt(self):
        """Gets the callback_err_cnt of this BasketLiveShippingService.


        :return: The callback_err_cnt of this BasketLiveShippingService.
        :rtype: int
        """
        return self._callback_err_cnt

    @callback_err_cnt.setter
    def callback_err_cnt(self, callback_err_cnt):
        """Sets the callback_err_cnt of this BasketLiveShippingService.


        :param callback_err_cnt: The callback_err_cnt of this BasketLiveShippingService.
        :type callback_err_cnt: int
        """

        self._callback_err_cnt = callback_err_cnt

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BasketLiveShippingService.


        :return: The custom_fields of this BasketLiveShippingService.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BasketLiveShippingService.


        :param custom_fields: The custom_fields of this BasketLiveShippingService.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def enabled_on_store(self):
        """Gets the enabled_on_store of this BasketLiveShippingService.


        :return: The enabled_on_store of this BasketLiveShippingService.
        :rtype: bool
        """
        return self._enabled_on_store

    @enabled_on_store.setter
    def enabled_on_store(self, enabled_on_store):
        """Sets the enabled_on_store of this BasketLiveShippingService.


        :param enabled_on_store: The enabled_on_store of this BasketLiveShippingService.
        :type enabled_on_store: bool
        """

        self._enabled_on_store = enabled_on_store

    @property
    def id(self):
        """Gets the id of this BasketLiveShippingService.


        :return: The id of this BasketLiveShippingService.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasketLiveShippingService.


        :param id: The id of this BasketLiveShippingService.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BasketLiveShippingService.


        :return: The name of this BasketLiveShippingService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasketLiveShippingService.


        :param name: The name of this BasketLiveShippingService.
        :type name: str
        """

        self._name = name
