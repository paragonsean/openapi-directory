# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_add_note_attributes_inner import OrderAddNoteAttributesInner
from openapi_server.models.order_add_order_item_inner import OrderAddOrderItemInner
from openapi_server import util


class OrderAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_comment: str=None, admin_private_comment: str=None, bill_address_1: str=None, bill_address_2: str=None, bill_city: str=None, bill_company: str=None, bill_country: str=None, bill_fax: str=None, bill_first_name: str=None, bill_last_name: str=None, bill_phone: str=None, bill_postcode: str=None, bill_state: str=None, channel_id: str=None, clear_cache: bool=True, comment: str=None, coupon_discount: float=None, coupons: List[str]=None, create_invoice: bool=False, currency: str=None, customer_birthday: str=None, customer_email: str=None, customer_fax: str=None, customer_first_name: str=None, customer_last_name: str=None, customer_phone: str=None, _date: str=None, date_finished: str=None, date_modified: str=None, discount: float=None, external_source: str=None, financial_status: str=None, fulfillment_status: str=None, gift_certificate_discount: float=None, id: str=None, inventory_behaviour: str='bypass', note_attributes: List[OrderAddNoteAttributesInner]=None, order_id: str=None, order_item: List[OrderAddOrderItemInner]=None, order_payment_method: str=None, order_shipping_method: str=None, order_status: str=None, prices_inc_tax: bool=False, send_admin_notifications: bool=False, send_notifications: bool=False, shipp_address_1: str=None, shipp_address_2: str=None, shipp_city: str=None, shipp_company: str=None, shipp_country: str=None, shipp_fax: str=None, shipp_first_name: str=None, shipp_last_name: str=None, shipp_phone: str=None, shipp_postcode: str=None, shipp_state: str=None, shipping_price: float=0, shipping_tax: float=None, store_id: str=None, subtotal_price: float=None, tags: str=None, tax_price: float=0, total_paid: float=None, total_price: float=None, total_weight: int=None, transaction_id: str=None):
        """OrderAdd - a model defined in OpenAPI

        :param admin_comment: The admin_comment of this OrderAdd.
        :param admin_private_comment: The admin_private_comment of this OrderAdd.
        :param bill_address_1: The bill_address_1 of this OrderAdd.
        :param bill_address_2: The bill_address_2 of this OrderAdd.
        :param bill_city: The bill_city of this OrderAdd.
        :param bill_company: The bill_company of this OrderAdd.
        :param bill_country: The bill_country of this OrderAdd.
        :param bill_fax: The bill_fax of this OrderAdd.
        :param bill_first_name: The bill_first_name of this OrderAdd.
        :param bill_last_name: The bill_last_name of this OrderAdd.
        :param bill_phone: The bill_phone of this OrderAdd.
        :param bill_postcode: The bill_postcode of this OrderAdd.
        :param bill_state: The bill_state of this OrderAdd.
        :param channel_id: The channel_id of this OrderAdd.
        :param clear_cache: The clear_cache of this OrderAdd.
        :param comment: The comment of this OrderAdd.
        :param coupon_discount: The coupon_discount of this OrderAdd.
        :param coupons: The coupons of this OrderAdd.
        :param create_invoice: The create_invoice of this OrderAdd.
        :param currency: The currency of this OrderAdd.
        :param customer_birthday: The customer_birthday of this OrderAdd.
        :param customer_email: The customer_email of this OrderAdd.
        :param customer_fax: The customer_fax of this OrderAdd.
        :param customer_first_name: The customer_first_name of this OrderAdd.
        :param customer_last_name: The customer_last_name of this OrderAdd.
        :param customer_phone: The customer_phone of this OrderAdd.
        :param _date: The _date of this OrderAdd.
        :param date_finished: The date_finished of this OrderAdd.
        :param date_modified: The date_modified of this OrderAdd.
        :param discount: The discount of this OrderAdd.
        :param external_source: The external_source of this OrderAdd.
        :param financial_status: The financial_status of this OrderAdd.
        :param fulfillment_status: The fulfillment_status of this OrderAdd.
        :param gift_certificate_discount: The gift_certificate_discount of this OrderAdd.
        :param id: The id of this OrderAdd.
        :param inventory_behaviour: The inventory_behaviour of this OrderAdd.
        :param note_attributes: The note_attributes of this OrderAdd.
        :param order_id: The order_id of this OrderAdd.
        :param order_item: The order_item of this OrderAdd.
        :param order_payment_method: The order_payment_method of this OrderAdd.
        :param order_shipping_method: The order_shipping_method of this OrderAdd.
        :param order_status: The order_status of this OrderAdd.
        :param prices_inc_tax: The prices_inc_tax of this OrderAdd.
        :param send_admin_notifications: The send_admin_notifications of this OrderAdd.
        :param send_notifications: The send_notifications of this OrderAdd.
        :param shipp_address_1: The shipp_address_1 of this OrderAdd.
        :param shipp_address_2: The shipp_address_2 of this OrderAdd.
        :param shipp_city: The shipp_city of this OrderAdd.
        :param shipp_company: The shipp_company of this OrderAdd.
        :param shipp_country: The shipp_country of this OrderAdd.
        :param shipp_fax: The shipp_fax of this OrderAdd.
        :param shipp_first_name: The shipp_first_name of this OrderAdd.
        :param shipp_last_name: The shipp_last_name of this OrderAdd.
        :param shipp_phone: The shipp_phone of this OrderAdd.
        :param shipp_postcode: The shipp_postcode of this OrderAdd.
        :param shipp_state: The shipp_state of this OrderAdd.
        :param shipping_price: The shipping_price of this OrderAdd.
        :param shipping_tax: The shipping_tax of this OrderAdd.
        :param store_id: The store_id of this OrderAdd.
        :param subtotal_price: The subtotal_price of this OrderAdd.
        :param tags: The tags of this OrderAdd.
        :param tax_price: The tax_price of this OrderAdd.
        :param total_paid: The total_paid of this OrderAdd.
        :param total_price: The total_price of this OrderAdd.
        :param total_weight: The total_weight of this OrderAdd.
        :param transaction_id: The transaction_id of this OrderAdd.
        """
        self.openapi_types = {
            'admin_comment': str,
            'admin_private_comment': str,
            'bill_address_1': str,
            'bill_address_2': str,
            'bill_city': str,
            'bill_company': str,
            'bill_country': str,
            'bill_fax': str,
            'bill_first_name': str,
            'bill_last_name': str,
            'bill_phone': str,
            'bill_postcode': str,
            'bill_state': str,
            'channel_id': str,
            'clear_cache': bool,
            'comment': str,
            'coupon_discount': float,
            'coupons': List[str],
            'create_invoice': bool,
            'currency': str,
            'customer_birthday': str,
            'customer_email': str,
            'customer_fax': str,
            'customer_first_name': str,
            'customer_last_name': str,
            'customer_phone': str,
            '_date': str,
            'date_finished': str,
            'date_modified': str,
            'discount': float,
            'external_source': str,
            'financial_status': str,
            'fulfillment_status': str,
            'gift_certificate_discount': float,
            'id': str,
            'inventory_behaviour': str,
            'note_attributes': List[OrderAddNoteAttributesInner],
            'order_id': str,
            'order_item': List[OrderAddOrderItemInner],
            'order_payment_method': str,
            'order_shipping_method': str,
            'order_status': str,
            'prices_inc_tax': bool,
            'send_admin_notifications': bool,
            'send_notifications': bool,
            'shipp_address_1': str,
            'shipp_address_2': str,
            'shipp_city': str,
            'shipp_company': str,
            'shipp_country': str,
            'shipp_fax': str,
            'shipp_first_name': str,
            'shipp_last_name': str,
            'shipp_phone': str,
            'shipp_postcode': str,
            'shipp_state': str,
            'shipping_price': float,
            'shipping_tax': float,
            'store_id': str,
            'subtotal_price': float,
            'tags': str,
            'tax_price': float,
            'total_paid': float,
            'total_price': float,
            'total_weight': int,
            'transaction_id': str
        }

        self.attribute_map = {
            'admin_comment': 'admin_comment',
            'admin_private_comment': 'admin_private_comment',
            'bill_address_1': 'bill_address_1',
            'bill_address_2': 'bill_address_2',
            'bill_city': 'bill_city',
            'bill_company': 'bill_company',
            'bill_country': 'bill_country',
            'bill_fax': 'bill_fax',
            'bill_first_name': 'bill_first_name',
            'bill_last_name': 'bill_last_name',
            'bill_phone': 'bill_phone',
            'bill_postcode': 'bill_postcode',
            'bill_state': 'bill_state',
            'channel_id': 'channel_id',
            'clear_cache': 'clear_cache',
            'comment': 'comment',
            'coupon_discount': 'coupon_discount',
            'coupons': 'coupons',
            'create_invoice': 'create_invoice',
            'currency': 'currency',
            'customer_birthday': 'customer_birthday',
            'customer_email': 'customer_email',
            'customer_fax': 'customer_fax',
            'customer_first_name': 'customer_first_name',
            'customer_last_name': 'customer_last_name',
            'customer_phone': 'customer_phone',
            '_date': 'date',
            'date_finished': 'date_finished',
            'date_modified': 'date_modified',
            'discount': 'discount',
            'external_source': 'external_source',
            'financial_status': 'financial_status',
            'fulfillment_status': 'fulfillment_status',
            'gift_certificate_discount': 'gift_certificate_discount',
            'id': 'id',
            'inventory_behaviour': 'inventory_behaviour',
            'note_attributes': 'note_attributes',
            'order_id': 'order_id',
            'order_item': 'order_item',
            'order_payment_method': 'order_payment_method',
            'order_shipping_method': 'order_shipping_method',
            'order_status': 'order_status',
            'prices_inc_tax': 'prices_inc_tax',
            'send_admin_notifications': 'send_admin_notifications',
            'send_notifications': 'send_notifications',
            'shipp_address_1': 'shipp_address_1',
            'shipp_address_2': 'shipp_address_2',
            'shipp_city': 'shipp_city',
            'shipp_company': 'shipp_company',
            'shipp_country': 'shipp_country',
            'shipp_fax': 'shipp_fax',
            'shipp_first_name': 'shipp_first_name',
            'shipp_last_name': 'shipp_last_name',
            'shipp_phone': 'shipp_phone',
            'shipp_postcode': 'shipp_postcode',
            'shipp_state': 'shipp_state',
            'shipping_price': 'shipping_price',
            'shipping_tax': 'shipping_tax',
            'store_id': 'store_id',
            'subtotal_price': 'subtotal_price',
            'tags': 'tags',
            'tax_price': 'tax_price',
            'total_paid': 'total_paid',
            'total_price': 'total_price',
            'total_weight': 'total_weight',
            'transaction_id': 'transaction_id'
        }

        self._admin_comment = admin_comment
        self._admin_private_comment = admin_private_comment
        self._bill_address_1 = bill_address_1
        self._bill_address_2 = bill_address_2
        self._bill_city = bill_city
        self._bill_company = bill_company
        self._bill_country = bill_country
        self._bill_fax = bill_fax
        self._bill_first_name = bill_first_name
        self._bill_last_name = bill_last_name
        self._bill_phone = bill_phone
        self._bill_postcode = bill_postcode
        self._bill_state = bill_state
        self._channel_id = channel_id
        self._clear_cache = clear_cache
        self._comment = comment
        self._coupon_discount = coupon_discount
        self._coupons = coupons
        self._create_invoice = create_invoice
        self._currency = currency
        self._customer_birthday = customer_birthday
        self._customer_email = customer_email
        self._customer_fax = customer_fax
        self._customer_first_name = customer_first_name
        self._customer_last_name = customer_last_name
        self._customer_phone = customer_phone
        self.__date = _date
        self._date_finished = date_finished
        self._date_modified = date_modified
        self._discount = discount
        self._external_source = external_source
        self._financial_status = financial_status
        self._fulfillment_status = fulfillment_status
        self._gift_certificate_discount = gift_certificate_discount
        self._id = id
        self._inventory_behaviour = inventory_behaviour
        self._note_attributes = note_attributes
        self._order_id = order_id
        self._order_item = order_item
        self._order_payment_method = order_payment_method
        self._order_shipping_method = order_shipping_method
        self._order_status = order_status
        self._prices_inc_tax = prices_inc_tax
        self._send_admin_notifications = send_admin_notifications
        self._send_notifications = send_notifications
        self._shipp_address_1 = shipp_address_1
        self._shipp_address_2 = shipp_address_2
        self._shipp_city = shipp_city
        self._shipp_company = shipp_company
        self._shipp_country = shipp_country
        self._shipp_fax = shipp_fax
        self._shipp_first_name = shipp_first_name
        self._shipp_last_name = shipp_last_name
        self._shipp_phone = shipp_phone
        self._shipp_postcode = shipp_postcode
        self._shipp_state = shipp_state
        self._shipping_price = shipping_price
        self._shipping_tax = shipping_tax
        self._store_id = store_id
        self._subtotal_price = subtotal_price
        self._tags = tags
        self._tax_price = tax_price
        self._total_paid = total_paid
        self._total_price = total_price
        self._total_weight = total_weight
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderAdd of this OrderAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_comment(self):
        """Gets the admin_comment of this OrderAdd.

        Specifies admin's order comment

        :return: The admin_comment of this OrderAdd.
        :rtype: str
        """
        return self._admin_comment

    @admin_comment.setter
    def admin_comment(self, admin_comment):
        """Sets the admin_comment of this OrderAdd.

        Specifies admin's order comment

        :param admin_comment: The admin_comment of this OrderAdd.
        :type admin_comment: str
        """

        self._admin_comment = admin_comment

    @property
    def admin_private_comment(self):
        """Gets the admin_private_comment of this OrderAdd.

        Specifies private admin's order comment

        :return: The admin_private_comment of this OrderAdd.
        :rtype: str
        """
        return self._admin_private_comment

    @admin_private_comment.setter
    def admin_private_comment(self, admin_private_comment):
        """Sets the admin_private_comment of this OrderAdd.

        Specifies private admin's order comment

        :param admin_private_comment: The admin_private_comment of this OrderAdd.
        :type admin_private_comment: str
        """

        self._admin_private_comment = admin_private_comment

    @property
    def bill_address_1(self):
        """Gets the bill_address_1 of this OrderAdd.

        Specifies first billing address

        :return: The bill_address_1 of this OrderAdd.
        :rtype: str
        """
        return self._bill_address_1

    @bill_address_1.setter
    def bill_address_1(self, bill_address_1):
        """Sets the bill_address_1 of this OrderAdd.

        Specifies first billing address

        :param bill_address_1: The bill_address_1 of this OrderAdd.
        :type bill_address_1: str
        """
        if bill_address_1 is None:
            raise ValueError("Invalid value for `bill_address_1`, must not be `None`")

        self._bill_address_1 = bill_address_1

    @property
    def bill_address_2(self):
        """Gets the bill_address_2 of this OrderAdd.

        Specifies second billing address

        :return: The bill_address_2 of this OrderAdd.
        :rtype: str
        """
        return self._bill_address_2

    @bill_address_2.setter
    def bill_address_2(self, bill_address_2):
        """Sets the bill_address_2 of this OrderAdd.

        Specifies second billing address

        :param bill_address_2: The bill_address_2 of this OrderAdd.
        :type bill_address_2: str
        """

        self._bill_address_2 = bill_address_2

    @property
    def bill_city(self):
        """Gets the bill_city of this OrderAdd.

        Specifies billing city

        :return: The bill_city of this OrderAdd.
        :rtype: str
        """
        return self._bill_city

    @bill_city.setter
    def bill_city(self, bill_city):
        """Sets the bill_city of this OrderAdd.

        Specifies billing city

        :param bill_city: The bill_city of this OrderAdd.
        :type bill_city: str
        """
        if bill_city is None:
            raise ValueError("Invalid value for `bill_city`, must not be `None`")

        self._bill_city = bill_city

    @property
    def bill_company(self):
        """Gets the bill_company of this OrderAdd.

        Specifies billing company

        :return: The bill_company of this OrderAdd.
        :rtype: str
        """
        return self._bill_company

    @bill_company.setter
    def bill_company(self, bill_company):
        """Sets the bill_company of this OrderAdd.

        Specifies billing company

        :param bill_company: The bill_company of this OrderAdd.
        :type bill_company: str
        """

        self._bill_company = bill_company

    @property
    def bill_country(self):
        """Gets the bill_country of this OrderAdd.

        Specifies billing country code

        :return: The bill_country of this OrderAdd.
        :rtype: str
        """
        return self._bill_country

    @bill_country.setter
    def bill_country(self, bill_country):
        """Sets the bill_country of this OrderAdd.

        Specifies billing country code

        :param bill_country: The bill_country of this OrderAdd.
        :type bill_country: str
        """
        if bill_country is None:
            raise ValueError("Invalid value for `bill_country`, must not be `None`")

        self._bill_country = bill_country

    @property
    def bill_fax(self):
        """Gets the bill_fax of this OrderAdd.

        Specifies billing fax

        :return: The bill_fax of this OrderAdd.
        :rtype: str
        """
        return self._bill_fax

    @bill_fax.setter
    def bill_fax(self, bill_fax):
        """Sets the bill_fax of this OrderAdd.

        Specifies billing fax

        :param bill_fax: The bill_fax of this OrderAdd.
        :type bill_fax: str
        """

        self._bill_fax = bill_fax

    @property
    def bill_first_name(self):
        """Gets the bill_first_name of this OrderAdd.

        Specifies billing first name

        :return: The bill_first_name of this OrderAdd.
        :rtype: str
        """
        return self._bill_first_name

    @bill_first_name.setter
    def bill_first_name(self, bill_first_name):
        """Sets the bill_first_name of this OrderAdd.

        Specifies billing first name

        :param bill_first_name: The bill_first_name of this OrderAdd.
        :type bill_first_name: str
        """
        if bill_first_name is None:
            raise ValueError("Invalid value for `bill_first_name`, must not be `None`")

        self._bill_first_name = bill_first_name

    @property
    def bill_last_name(self):
        """Gets the bill_last_name of this OrderAdd.

        Specifies billing last name

        :return: The bill_last_name of this OrderAdd.
        :rtype: str
        """
        return self._bill_last_name

    @bill_last_name.setter
    def bill_last_name(self, bill_last_name):
        """Sets the bill_last_name of this OrderAdd.

        Specifies billing last name

        :param bill_last_name: The bill_last_name of this OrderAdd.
        :type bill_last_name: str
        """
        if bill_last_name is None:
            raise ValueError("Invalid value for `bill_last_name`, must not be `None`")

        self._bill_last_name = bill_last_name

    @property
    def bill_phone(self):
        """Gets the bill_phone of this OrderAdd.

        Specifies billing phone

        :return: The bill_phone of this OrderAdd.
        :rtype: str
        """
        return self._bill_phone

    @bill_phone.setter
    def bill_phone(self, bill_phone):
        """Sets the bill_phone of this OrderAdd.

        Specifies billing phone

        :param bill_phone: The bill_phone of this OrderAdd.
        :type bill_phone: str
        """

        self._bill_phone = bill_phone

    @property
    def bill_postcode(self):
        """Gets the bill_postcode of this OrderAdd.

        Specifies billing postcode

        :return: The bill_postcode of this OrderAdd.
        :rtype: str
        """
        return self._bill_postcode

    @bill_postcode.setter
    def bill_postcode(self, bill_postcode):
        """Sets the bill_postcode of this OrderAdd.

        Specifies billing postcode

        :param bill_postcode: The bill_postcode of this OrderAdd.
        :type bill_postcode: str
        """
        if bill_postcode is None:
            raise ValueError("Invalid value for `bill_postcode`, must not be `None`")

        self._bill_postcode = bill_postcode

    @property
    def bill_state(self):
        """Gets the bill_state of this OrderAdd.

        Specifies billing state code

        :return: The bill_state of this OrderAdd.
        :rtype: str
        """
        return self._bill_state

    @bill_state.setter
    def bill_state(self, bill_state):
        """Sets the bill_state of this OrderAdd.

        Specifies billing state code

        :param bill_state: The bill_state of this OrderAdd.
        :type bill_state: str
        """
        if bill_state is None:
            raise ValueError("Invalid value for `bill_state`, must not be `None`")

        self._bill_state = bill_state

    @property
    def channel_id(self):
        """Gets the channel_id of this OrderAdd.

        Channel ID

        :return: The channel_id of this OrderAdd.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this OrderAdd.

        Channel ID

        :param channel_id: The channel_id of this OrderAdd.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def clear_cache(self):
        """Gets the clear_cache of this OrderAdd.

        Is cache clear required

        :return: The clear_cache of this OrderAdd.
        :rtype: bool
        """
        return self._clear_cache

    @clear_cache.setter
    def clear_cache(self, clear_cache):
        """Sets the clear_cache of this OrderAdd.

        Is cache clear required

        :param clear_cache: The clear_cache of this OrderAdd.
        :type clear_cache: bool
        """

        self._clear_cache = clear_cache

    @property
    def comment(self):
        """Gets the comment of this OrderAdd.

        Specifies order comment

        :return: The comment of this OrderAdd.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this OrderAdd.

        Specifies order comment

        :param comment: The comment of this OrderAdd.
        :type comment: str
        """

        self._comment = comment

    @property
    def coupon_discount(self):
        """Gets the coupon_discount of this OrderAdd.

        Specifies order's coupon discount

        :return: The coupon_discount of this OrderAdd.
        :rtype: float
        """
        return self._coupon_discount

    @coupon_discount.setter
    def coupon_discount(self, coupon_discount):
        """Sets the coupon_discount of this OrderAdd.

        Specifies order's coupon discount

        :param coupon_discount: The coupon_discount of this OrderAdd.
        :type coupon_discount: float
        """

        self._coupon_discount = coupon_discount

    @property
    def coupons(self):
        """Gets the coupons of this OrderAdd.

        Coupons that will be applied to order

        :return: The coupons of this OrderAdd.
        :rtype: List[str]
        """
        return self._coupons

    @coupons.setter
    def coupons(self, coupons):
        """Sets the coupons of this OrderAdd.

        Coupons that will be applied to order

        :param coupons: The coupons of this OrderAdd.
        :type coupons: List[str]
        """
        if coupons is not None and len(coupons) < 1:
            raise ValueError("Invalid value for `coupons`, number of items must be greater than or equal to `1`")

        self._coupons = coupons

    @property
    def create_invoice(self):
        """Gets the create_invoice of this OrderAdd.

        Defines whether the invoice is created automatically along with the order

        :return: The create_invoice of this OrderAdd.
        :rtype: bool
        """
        return self._create_invoice

    @create_invoice.setter
    def create_invoice(self, create_invoice):
        """Sets the create_invoice of this OrderAdd.

        Defines whether the invoice is created automatically along with the order

        :param create_invoice: The create_invoice of this OrderAdd.
        :type create_invoice: bool
        """

        self._create_invoice = create_invoice

    @property
    def currency(self):
        """Gets the currency of this OrderAdd.

        Currency code of order

        :return: The currency of this OrderAdd.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderAdd.

        Currency code of order

        :param currency: The currency of this OrderAdd.
        :type currency: str
        """

        self._currency = currency

    @property
    def customer_birthday(self):
        """Gets the customer_birthday of this OrderAdd.

        Specifies customer’s birthday

        :return: The customer_birthday of this OrderAdd.
        :rtype: str
        """
        return self._customer_birthday

    @customer_birthday.setter
    def customer_birthday(self, customer_birthday):
        """Sets the customer_birthday of this OrderAdd.

        Specifies customer’s birthday

        :param customer_birthday: The customer_birthday of this OrderAdd.
        :type customer_birthday: str
        """

        self._customer_birthday = customer_birthday

    @property
    def customer_email(self):
        """Gets the customer_email of this OrderAdd.

        Defines the customer specified by email for whom order has to be created

        :return: The customer_email of this OrderAdd.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this OrderAdd.

        Defines the customer specified by email for whom order has to be created

        :param customer_email: The customer_email of this OrderAdd.
        :type customer_email: str
        """
        if customer_email is None:
            raise ValueError("Invalid value for `customer_email`, must not be `None`")

        self._customer_email = customer_email

    @property
    def customer_fax(self):
        """Gets the customer_fax of this OrderAdd.

        Specifies customer’s fax

        :return: The customer_fax of this OrderAdd.
        :rtype: str
        """
        return self._customer_fax

    @customer_fax.setter
    def customer_fax(self, customer_fax):
        """Sets the customer_fax of this OrderAdd.

        Specifies customer’s fax

        :param customer_fax: The customer_fax of this OrderAdd.
        :type customer_fax: str
        """

        self._customer_fax = customer_fax

    @property
    def customer_first_name(self):
        """Gets the customer_first_name of this OrderAdd.

        Specifies customer's first name

        :return: The customer_first_name of this OrderAdd.
        :rtype: str
        """
        return self._customer_first_name

    @customer_first_name.setter
    def customer_first_name(self, customer_first_name):
        """Sets the customer_first_name of this OrderAdd.

        Specifies customer's first name

        :param customer_first_name: The customer_first_name of this OrderAdd.
        :type customer_first_name: str
        """

        self._customer_first_name = customer_first_name

    @property
    def customer_last_name(self):
        """Gets the customer_last_name of this OrderAdd.

        Specifies customer’s last name

        :return: The customer_last_name of this OrderAdd.
        :rtype: str
        """
        return self._customer_last_name

    @customer_last_name.setter
    def customer_last_name(self, customer_last_name):
        """Sets the customer_last_name of this OrderAdd.

        Specifies customer’s last name

        :param customer_last_name: The customer_last_name of this OrderAdd.
        :type customer_last_name: str
        """

        self._customer_last_name = customer_last_name

    @property
    def customer_phone(self):
        """Gets the customer_phone of this OrderAdd.

        Specifies customer’s phone

        :return: The customer_phone of this OrderAdd.
        :rtype: str
        """
        return self._customer_phone

    @customer_phone.setter
    def customer_phone(self, customer_phone):
        """Sets the customer_phone of this OrderAdd.

        Specifies customer’s phone

        :param customer_phone: The customer_phone of this OrderAdd.
        :type customer_phone: str
        """

        self._customer_phone = customer_phone

    @property
    def _date(self):
        """Gets the _date of this OrderAdd.

        Specifies an order creation date in format Y-m-d H:i:s

        :return: The _date of this OrderAdd.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this OrderAdd.

        Specifies an order creation date in format Y-m-d H:i:s

        :param _date: The _date of this OrderAdd.
        :type _date: str
        """

        self.__date = _date

    @property
    def date_finished(self):
        """Gets the date_finished of this OrderAdd.

        Specifies order's  finished date

        :return: The date_finished of this OrderAdd.
        :rtype: str
        """
        return self._date_finished

    @date_finished.setter
    def date_finished(self, date_finished):
        """Sets the date_finished of this OrderAdd.

        Specifies order's  finished date

        :param date_finished: The date_finished of this OrderAdd.
        :type date_finished: str
        """

        self._date_finished = date_finished

    @property
    def date_modified(self):
        """Gets the date_modified of this OrderAdd.

        Specifies order's  modification date

        :return: The date_modified of this OrderAdd.
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this OrderAdd.

        Specifies order's  modification date

        :param date_modified: The date_modified of this OrderAdd.
        :type date_modified: str
        """

        self._date_modified = date_modified

    @property
    def discount(self):
        """Gets the discount of this OrderAdd.

        Specifies order's discount

        :return: The discount of this OrderAdd.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderAdd.

        Specifies order's discount

        :param discount: The discount of this OrderAdd.
        :type discount: float
        """

        self._discount = discount

    @property
    def external_source(self):
        """Gets the external_source of this OrderAdd.

        Identifying the system used to generate the order

        :return: The external_source of this OrderAdd.
        :rtype: str
        """
        return self._external_source

    @external_source.setter
    def external_source(self, external_source):
        """Sets the external_source of this OrderAdd.

        Identifying the system used to generate the order

        :param external_source: The external_source of this OrderAdd.
        :type external_source: str
        """

        self._external_source = external_source

    @property
    def financial_status(self):
        """Gets the financial_status of this OrderAdd.

        Create order with financial status

        :return: The financial_status of this OrderAdd.
        :rtype: str
        """
        return self._financial_status

    @financial_status.setter
    def financial_status(self, financial_status):
        """Sets the financial_status of this OrderAdd.

        Create order with financial status

        :param financial_status: The financial_status of this OrderAdd.
        :type financial_status: str
        """

        self._financial_status = financial_status

    @property
    def fulfillment_status(self):
        """Gets the fulfillment_status of this OrderAdd.

        Create order with fulfillment status

        :return: The fulfillment_status of this OrderAdd.
        :rtype: str
        """
        return self._fulfillment_status

    @fulfillment_status.setter
    def fulfillment_status(self, fulfillment_status):
        """Sets the fulfillment_status of this OrderAdd.

        Create order with fulfillment status

        :param fulfillment_status: The fulfillment_status of this OrderAdd.
        :type fulfillment_status: str
        """

        self._fulfillment_status = fulfillment_status

    @property
    def gift_certificate_discount(self):
        """Gets the gift_certificate_discount of this OrderAdd.

        Discounts for order with gift certificates

        :return: The gift_certificate_discount of this OrderAdd.
        :rtype: float
        """
        return self._gift_certificate_discount

    @gift_certificate_discount.setter
    def gift_certificate_discount(self, gift_certificate_discount):
        """Sets the gift_certificate_discount of this OrderAdd.

        Discounts for order with gift certificates

        :param gift_certificate_discount: The gift_certificate_discount of this OrderAdd.
        :type gift_certificate_discount: float
        """

        self._gift_certificate_discount = gift_certificate_discount

    @property
    def id(self):
        """Gets the id of this OrderAdd.

        Defines order's id

        :return: The id of this OrderAdd.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderAdd.

        Defines order's id

        :param id: The id of this OrderAdd.
        :type id: str
        """

        self._id = id

    @property
    def inventory_behaviour(self):
        """Gets the inventory_behaviour of this OrderAdd.

        The behaviour to use when updating inventory.<hr><div style=\"font-style:normal\">Values description:<div style=\"margin-left: 2%; padding-top: 2%\"><div style=\"font-size:85%\"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product's </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product's </br> inventory policy.</br></br></div></div></div>

        :return: The inventory_behaviour of this OrderAdd.
        :rtype: str
        """
        return self._inventory_behaviour

    @inventory_behaviour.setter
    def inventory_behaviour(self, inventory_behaviour):
        """Sets the inventory_behaviour of this OrderAdd.

        The behaviour to use when updating inventory.<hr><div style=\"font-style:normal\">Values description:<div style=\"margin-left: 2%; padding-top: 2%\"><div style=\"font-size:85%\"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product's </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product's </br> inventory policy.</br></br></div></div></div>

        :param inventory_behaviour: The inventory_behaviour of this OrderAdd.
        :type inventory_behaviour: str
        """

        self._inventory_behaviour = inventory_behaviour

    @property
    def note_attributes(self):
        """Gets the note_attributes of this OrderAdd.

        Defines note attributes

        :return: The note_attributes of this OrderAdd.
        :rtype: List[OrderAddNoteAttributesInner]
        """
        return self._note_attributes

    @note_attributes.setter
    def note_attributes(self, note_attributes):
        """Sets the note_attributes of this OrderAdd.

        Defines note attributes

        :param note_attributes: The note_attributes of this OrderAdd.
        :type note_attributes: List[OrderAddNoteAttributesInner]
        """

        self._note_attributes = note_attributes

    @property
    def order_id(self):
        """Gets the order_id of this OrderAdd.

        Defines the order id if it is supported by the cart

        :return: The order_id of this OrderAdd.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderAdd.

        Defines the order id if it is supported by the cart

        :param order_id: The order_id of this OrderAdd.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def order_item(self):
        """Gets the order_item of this OrderAdd.


        :return: The order_item of this OrderAdd.
        :rtype: List[OrderAddOrderItemInner]
        """
        return self._order_item

    @order_item.setter
    def order_item(self, order_item):
        """Sets the order_item of this OrderAdd.


        :param order_item: The order_item of this OrderAdd.
        :type order_item: List[OrderAddOrderItemInner]
        """
        if order_item is None:
            raise ValueError("Invalid value for `order_item`, must not be `None`")

        self._order_item = order_item

    @property
    def order_payment_method(self):
        """Gets the order_payment_method of this OrderAdd.

        Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'

        :return: The order_payment_method of this OrderAdd.
        :rtype: str
        """
        return self._order_payment_method

    @order_payment_method.setter
    def order_payment_method(self, order_payment_method):
        """Sets the order_payment_method of this OrderAdd.

        Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'

        :param order_payment_method: The order_payment_method of this OrderAdd.
        :type order_payment_method: str
        """

        self._order_payment_method = order_payment_method

    @property
    def order_shipping_method(self):
        """Gets the order_shipping_method of this OrderAdd.

        Defines order shipping method

        :return: The order_shipping_method of this OrderAdd.
        :rtype: str
        """
        return self._order_shipping_method

    @order_shipping_method.setter
    def order_shipping_method(self, order_shipping_method):
        """Sets the order_shipping_method of this OrderAdd.

        Defines order shipping method

        :param order_shipping_method: The order_shipping_method of this OrderAdd.
        :type order_shipping_method: str
        """

        self._order_shipping_method = order_shipping_method

    @property
    def order_status(self):
        """Gets the order_status of this OrderAdd.

        Defines order status.

        :return: The order_status of this OrderAdd.
        :rtype: str
        """
        return self._order_status

    @order_status.setter
    def order_status(self, order_status):
        """Sets the order_status of this OrderAdd.

        Defines order status.

        :param order_status: The order_status of this OrderAdd.
        :type order_status: str
        """
        if order_status is None:
            raise ValueError("Invalid value for `order_status`, must not be `None`")

        self._order_status = order_status

    @property
    def prices_inc_tax(self):
        """Gets the prices_inc_tax of this OrderAdd.

        Indicates whether prices and subtotal includes tax.

        :return: The prices_inc_tax of this OrderAdd.
        :rtype: bool
        """
        return self._prices_inc_tax

    @prices_inc_tax.setter
    def prices_inc_tax(self, prices_inc_tax):
        """Sets the prices_inc_tax of this OrderAdd.

        Indicates whether prices and subtotal includes tax.

        :param prices_inc_tax: The prices_inc_tax of this OrderAdd.
        :type prices_inc_tax: bool
        """

        self._prices_inc_tax = prices_inc_tax

    @property
    def send_admin_notifications(self):
        """Gets the send_admin_notifications of this OrderAdd.

        Notify admin when new order was created.

        :return: The send_admin_notifications of this OrderAdd.
        :rtype: bool
        """
        return self._send_admin_notifications

    @send_admin_notifications.setter
    def send_admin_notifications(self, send_admin_notifications):
        """Sets the send_admin_notifications of this OrderAdd.

        Notify admin when new order was created.

        :param send_admin_notifications: The send_admin_notifications of this OrderAdd.
        :type send_admin_notifications: bool
        """

        self._send_admin_notifications = send_admin_notifications

    @property
    def send_notifications(self):
        """Gets the send_notifications of this OrderAdd.

        Send notifications to customer after order was created

        :return: The send_notifications of this OrderAdd.
        :rtype: bool
        """
        return self._send_notifications

    @send_notifications.setter
    def send_notifications(self, send_notifications):
        """Sets the send_notifications of this OrderAdd.

        Send notifications to customer after order was created

        :param send_notifications: The send_notifications of this OrderAdd.
        :type send_notifications: bool
        """

        self._send_notifications = send_notifications

    @property
    def shipp_address_1(self):
        """Gets the shipp_address_1 of this OrderAdd.

        Specifies first shipping address

        :return: The shipp_address_1 of this OrderAdd.
        :rtype: str
        """
        return self._shipp_address_1

    @shipp_address_1.setter
    def shipp_address_1(self, shipp_address_1):
        """Sets the shipp_address_1 of this OrderAdd.

        Specifies first shipping address

        :param shipp_address_1: The shipp_address_1 of this OrderAdd.
        :type shipp_address_1: str
        """

        self._shipp_address_1 = shipp_address_1

    @property
    def shipp_address_2(self):
        """Gets the shipp_address_2 of this OrderAdd.

        Specifies second address line of a shipping street address

        :return: The shipp_address_2 of this OrderAdd.
        :rtype: str
        """
        return self._shipp_address_2

    @shipp_address_2.setter
    def shipp_address_2(self, shipp_address_2):
        """Sets the shipp_address_2 of this OrderAdd.

        Specifies second address line of a shipping street address

        :param shipp_address_2: The shipp_address_2 of this OrderAdd.
        :type shipp_address_2: str
        """

        self._shipp_address_2 = shipp_address_2

    @property
    def shipp_city(self):
        """Gets the shipp_city of this OrderAdd.

        Specifies shipping city

        :return: The shipp_city of this OrderAdd.
        :rtype: str
        """
        return self._shipp_city

    @shipp_city.setter
    def shipp_city(self, shipp_city):
        """Sets the shipp_city of this OrderAdd.

        Specifies shipping city

        :param shipp_city: The shipp_city of this OrderAdd.
        :type shipp_city: str
        """

        self._shipp_city = shipp_city

    @property
    def shipp_company(self):
        """Gets the shipp_company of this OrderAdd.

        Specifies shipping company

        :return: The shipp_company of this OrderAdd.
        :rtype: str
        """
        return self._shipp_company

    @shipp_company.setter
    def shipp_company(self, shipp_company):
        """Sets the shipp_company of this OrderAdd.

        Specifies shipping company

        :param shipp_company: The shipp_company of this OrderAdd.
        :type shipp_company: str
        """

        self._shipp_company = shipp_company

    @property
    def shipp_country(self):
        """Gets the shipp_country of this OrderAdd.

        Specifies shipping country code

        :return: The shipp_country of this OrderAdd.
        :rtype: str
        """
        return self._shipp_country

    @shipp_country.setter
    def shipp_country(self, shipp_country):
        """Sets the shipp_country of this OrderAdd.

        Specifies shipping country code

        :param shipp_country: The shipp_country of this OrderAdd.
        :type shipp_country: str
        """

        self._shipp_country = shipp_country

    @property
    def shipp_fax(self):
        """Gets the shipp_fax of this OrderAdd.

        Specifies shipping fax

        :return: The shipp_fax of this OrderAdd.
        :rtype: str
        """
        return self._shipp_fax

    @shipp_fax.setter
    def shipp_fax(self, shipp_fax):
        """Sets the shipp_fax of this OrderAdd.

        Specifies shipping fax

        :param shipp_fax: The shipp_fax of this OrderAdd.
        :type shipp_fax: str
        """

        self._shipp_fax = shipp_fax

    @property
    def shipp_first_name(self):
        """Gets the shipp_first_name of this OrderAdd.

        Specifies shipping first name

        :return: The shipp_first_name of this OrderAdd.
        :rtype: str
        """
        return self._shipp_first_name

    @shipp_first_name.setter
    def shipp_first_name(self, shipp_first_name):
        """Sets the shipp_first_name of this OrderAdd.

        Specifies shipping first name

        :param shipp_first_name: The shipp_first_name of this OrderAdd.
        :type shipp_first_name: str
        """

        self._shipp_first_name = shipp_first_name

    @property
    def shipp_last_name(self):
        """Gets the shipp_last_name of this OrderAdd.

        Specifies shipping last name

        :return: The shipp_last_name of this OrderAdd.
        :rtype: str
        """
        return self._shipp_last_name

    @shipp_last_name.setter
    def shipp_last_name(self, shipp_last_name):
        """Sets the shipp_last_name of this OrderAdd.

        Specifies shipping last name

        :param shipp_last_name: The shipp_last_name of this OrderAdd.
        :type shipp_last_name: str
        """

        self._shipp_last_name = shipp_last_name

    @property
    def shipp_phone(self):
        """Gets the shipp_phone of this OrderAdd.

        Specifies shipping phone

        :return: The shipp_phone of this OrderAdd.
        :rtype: str
        """
        return self._shipp_phone

    @shipp_phone.setter
    def shipp_phone(self, shipp_phone):
        """Sets the shipp_phone of this OrderAdd.

        Specifies shipping phone

        :param shipp_phone: The shipp_phone of this OrderAdd.
        :type shipp_phone: str
        """

        self._shipp_phone = shipp_phone

    @property
    def shipp_postcode(self):
        """Gets the shipp_postcode of this OrderAdd.

        Specifies shipping postcode

        :return: The shipp_postcode of this OrderAdd.
        :rtype: str
        """
        return self._shipp_postcode

    @shipp_postcode.setter
    def shipp_postcode(self, shipp_postcode):
        """Sets the shipp_postcode of this OrderAdd.

        Specifies shipping postcode

        :param shipp_postcode: The shipp_postcode of this OrderAdd.
        :type shipp_postcode: str
        """

        self._shipp_postcode = shipp_postcode

    @property
    def shipp_state(self):
        """Gets the shipp_state of this OrderAdd.

        Specifies shipping state code

        :return: The shipp_state of this OrderAdd.
        :rtype: str
        """
        return self._shipp_state

    @shipp_state.setter
    def shipp_state(self, shipp_state):
        """Sets the shipp_state of this OrderAdd.

        Specifies shipping state code

        :param shipp_state: The shipp_state of this OrderAdd.
        :type shipp_state: str
        """

        self._shipp_state = shipp_state

    @property
    def shipping_price(self):
        """Gets the shipping_price of this OrderAdd.

        Specifies order's shipping price

        :return: The shipping_price of this OrderAdd.
        :rtype: float
        """
        return self._shipping_price

    @shipping_price.setter
    def shipping_price(self, shipping_price):
        """Sets the shipping_price of this OrderAdd.

        Specifies order's shipping price

        :param shipping_price: The shipping_price of this OrderAdd.
        :type shipping_price: float
        """

        self._shipping_price = shipping_price

    @property
    def shipping_tax(self):
        """Gets the shipping_tax of this OrderAdd.

        Specifies order's shipping price tax

        :return: The shipping_tax of this OrderAdd.
        :rtype: float
        """
        return self._shipping_tax

    @shipping_tax.setter
    def shipping_tax(self, shipping_tax):
        """Sets the shipping_tax of this OrderAdd.

        Specifies order's shipping price tax

        :param shipping_tax: The shipping_tax of this OrderAdd.
        :type shipping_tax: float
        """

        self._shipping_tax = shipping_tax

    @property
    def store_id(self):
        """Gets the store_id of this OrderAdd.

        Defines store id where the order should be assigned

        :return: The store_id of this OrderAdd.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this OrderAdd.

        Defines store id where the order should be assigned

        :param store_id: The store_id of this OrderAdd.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def subtotal_price(self):
        """Gets the subtotal_price of this OrderAdd.

        Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts

        :return: The subtotal_price of this OrderAdd.
        :rtype: float
        """
        return self._subtotal_price

    @subtotal_price.setter
    def subtotal_price(self, subtotal_price):
        """Sets the subtotal_price of this OrderAdd.

        Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts

        :param subtotal_price: The subtotal_price of this OrderAdd.
        :type subtotal_price: float
        """

        self._subtotal_price = subtotal_price

    @property
    def tags(self):
        """Gets the tags of this OrderAdd.

        Order tags

        :return: The tags of this OrderAdd.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OrderAdd.

        Order tags

        :param tags: The tags of this OrderAdd.
        :type tags: str
        """

        self._tags = tags

    @property
    def tax_price(self):
        """Gets the tax_price of this OrderAdd.

        The value of tax cost for order

        :return: The tax_price of this OrderAdd.
        :rtype: float
        """
        return self._tax_price

    @tax_price.setter
    def tax_price(self, tax_price):
        """Sets the tax_price of this OrderAdd.

        The value of tax cost for order

        :param tax_price: The tax_price of this OrderAdd.
        :type tax_price: float
        """

        self._tax_price = tax_price

    @property
    def total_paid(self):
        """Gets the total_paid of this OrderAdd.

        Defines total paid amount for the order

        :return: The total_paid of this OrderAdd.
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this OrderAdd.

        Defines total paid amount for the order

        :param total_paid: The total_paid of this OrderAdd.
        :type total_paid: float
        """

        self._total_paid = total_paid

    @property
    def total_price(self):
        """Gets the total_price of this OrderAdd.

        Defines order's total price

        :return: The total_price of this OrderAdd.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this OrderAdd.

        Defines order's total price

        :param total_price: The total_price of this OrderAdd.
        :type total_price: float
        """

        self._total_price = total_price

    @property
    def total_weight(self):
        """Gets the total_weight of this OrderAdd.

        Defines the sum of all line item weights in grams for the order

        :return: The total_weight of this OrderAdd.
        :rtype: int
        """
        return self._total_weight

    @total_weight.setter
    def total_weight(self, total_weight):
        """Sets the total_weight of this OrderAdd.

        Defines the sum of all line item weights in grams for the order

        :param total_weight: The total_weight of this OrderAdd.
        :type total_weight: int
        """

        self._total_weight = total_weight

    @property
    def transaction_id(self):
        """Gets the transaction_id of this OrderAdd.

        Payment transaction id

        :return: The transaction_id of this OrderAdd.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this OrderAdd.

        Payment transaction id

        :param transaction_id: The transaction_id of this OrderAdd.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id
