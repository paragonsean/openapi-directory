# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductTierPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, price: float=None, qty: float=None):
        """ProductTierPrice - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this ProductTierPrice.
        :param custom_fields: The custom_fields of this ProductTierPrice.
        :param price: The price of this ProductTierPrice.
        :param qty: The qty of this ProductTierPrice.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'price': float,
            'qty': float
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'price': 'price',
            'qty': 'qty'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._price = price
        self._qty = qty

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductTierPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product_TierPrice of this ProductTierPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ProductTierPrice.


        :return: The additional_fields of this ProductTierPrice.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ProductTierPrice.


        :param additional_fields: The additional_fields of this ProductTierPrice.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProductTierPrice.


        :return: The custom_fields of this ProductTierPrice.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProductTierPrice.


        :param custom_fields: The custom_fields of this ProductTierPrice.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def price(self):
        """Gets the price of this ProductTierPrice.


        :return: The price of this ProductTierPrice.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductTierPrice.


        :param price: The price of this ProductTierPrice.
        :type price: float
        """

        self._price = price

    @property
    def qty(self):
        """Gets the qty of this ProductTierPrice.


        :return: The qty of this ProductTierPrice.
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this ProductTierPrice.


        :param qty: The qty of this ProductTierPrice.
        :type qty: float
        """

        self._qty = qty
