# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_class_rate import TaxClassRate
from openapi_server import util


class TaxClass(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, avail: bool=None, custom_fields: object=None, id: str=None, name: str=None, tax: float=None, tax_rates: List[TaxClassRate]=None, tax_type: int=None):
        """TaxClass - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this TaxClass.
        :param avail: The avail of this TaxClass.
        :param custom_fields: The custom_fields of this TaxClass.
        :param id: The id of this TaxClass.
        :param name: The name of this TaxClass.
        :param tax: The tax of this TaxClass.
        :param tax_rates: The tax_rates of this TaxClass.
        :param tax_type: The tax_type of this TaxClass.
        """
        self.openapi_types = {
            'additional_fields': object,
            'avail': bool,
            'custom_fields': object,
            'id': str,
            'name': str,
            'tax': float,
            'tax_rates': List[TaxClassRate],
            'tax_type': int
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'avail': 'avail',
            'custom_fields': 'custom_fields',
            'id': 'id',
            'name': 'name',
            'tax': 'tax',
            'tax_rates': 'tax_rates',
            'tax_type': 'tax_type'
        }

        self._additional_fields = additional_fields
        self._avail = avail
        self._custom_fields = custom_fields
        self._id = id
        self._name = name
        self._tax = tax
        self._tax_rates = tax_rates
        self._tax_type = tax_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxClass':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxClass of this TaxClass.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this TaxClass.


        :return: The additional_fields of this TaxClass.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this TaxClass.


        :param additional_fields: The additional_fields of this TaxClass.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def avail(self):
        """Gets the avail of this TaxClass.


        :return: The avail of this TaxClass.
        :rtype: bool
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this TaxClass.


        :param avail: The avail of this TaxClass.
        :type avail: bool
        """

        self._avail = avail

    @property
    def custom_fields(self):
        """Gets the custom_fields of this TaxClass.


        :return: The custom_fields of this TaxClass.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this TaxClass.


        :param custom_fields: The custom_fields of this TaxClass.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this TaxClass.


        :return: The id of this TaxClass.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxClass.


        :param id: The id of this TaxClass.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TaxClass.


        :return: The name of this TaxClass.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxClass.


        :param name: The name of this TaxClass.
        :type name: str
        """

        self._name = name

    @property
    def tax(self):
        """Gets the tax of this TaxClass.


        :return: The tax of this TaxClass.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this TaxClass.


        :param tax: The tax of this TaxClass.
        :type tax: float
        """

        self._tax = tax

    @property
    def tax_rates(self):
        """Gets the tax_rates of this TaxClass.


        :return: The tax_rates of this TaxClass.
        :rtype: List[TaxClassRate]
        """
        return self._tax_rates

    @tax_rates.setter
    def tax_rates(self, tax_rates):
        """Sets the tax_rates of this TaxClass.


        :param tax_rates: The tax_rates of this TaxClass.
        :type tax_rates: List[TaxClassRate]
        """

        self._tax_rates = tax_rates

    @property
    def tax_type(self):
        """Gets the tax_type of this TaxClass.


        :return: The tax_type of this TaxClass.
        :rtype: int
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this TaxClass.


        :param tax_type: The tax_type of this TaxClass.
        :type tax_type: int
        """

        self._tax_type = tax_type
