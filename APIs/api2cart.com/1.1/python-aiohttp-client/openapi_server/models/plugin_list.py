# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plugin import Plugin
from openapi_server import util


class PluginList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, all_plugins: int=None, custom_fields: object=None, plugins: List[Plugin]=None):
        """PluginList - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this PluginList.
        :param all_plugins: The all_plugins of this PluginList.
        :param custom_fields: The custom_fields of this PluginList.
        :param plugins: The plugins of this PluginList.
        """
        self.openapi_types = {
            'additional_fields': object,
            'all_plugins': int,
            'custom_fields': object,
            'plugins': List[Plugin]
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'all_plugins': 'all_plugins',
            'custom_fields': 'custom_fields',
            'plugins': 'plugins'
        }

        self._additional_fields = additional_fields
        self._all_plugins = all_plugins
        self._custom_fields = custom_fields
        self._plugins = plugins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PluginList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PluginList of this PluginList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this PluginList.


        :return: The additional_fields of this PluginList.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this PluginList.


        :param additional_fields: The additional_fields of this PluginList.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def all_plugins(self):
        """Gets the all_plugins of this PluginList.


        :return: The all_plugins of this PluginList.
        :rtype: int
        """
        return self._all_plugins

    @all_plugins.setter
    def all_plugins(self, all_plugins):
        """Sets the all_plugins of this PluginList.


        :param all_plugins: The all_plugins of this PluginList.
        :type all_plugins: int
        """

        self._all_plugins = all_plugins

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PluginList.


        :return: The custom_fields of this PluginList.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PluginList.


        :param custom_fields: The custom_fields of this PluginList.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def plugins(self):
        """Gets the plugins of this PluginList.


        :return: The plugins of this PluginList.
        :rtype: List[Plugin]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """Sets the plugins of this PluginList.


        :param plugins: The plugins of this PluginList.
        :type plugins: List[Plugin]
        """

        self._plugins = plugins
