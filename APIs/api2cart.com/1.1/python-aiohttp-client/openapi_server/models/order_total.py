# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderTotal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, shipping_ex_tax: float=None, subtotal_ex_tax: float=None, total: float=None, total_discount: float=None, total_paid: float=None, total_tax: float=None, wrapping_ex_tax: float=None):
        """OrderTotal - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this OrderTotal.
        :param custom_fields: The custom_fields of this OrderTotal.
        :param shipping_ex_tax: The shipping_ex_tax of this OrderTotal.
        :param subtotal_ex_tax: The subtotal_ex_tax of this OrderTotal.
        :param total: The total of this OrderTotal.
        :param total_discount: The total_discount of this OrderTotal.
        :param total_paid: The total_paid of this OrderTotal.
        :param total_tax: The total_tax of this OrderTotal.
        :param wrapping_ex_tax: The wrapping_ex_tax of this OrderTotal.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'shipping_ex_tax': float,
            'subtotal_ex_tax': float,
            'total': float,
            'total_discount': float,
            'total_paid': float,
            'total_tax': float,
            'wrapping_ex_tax': float
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'shipping_ex_tax': 'shipping_ex_tax',
            'subtotal_ex_tax': 'subtotal_ex_tax',
            'total': 'total',
            'total_discount': 'total_discount',
            'total_paid': 'total_paid',
            'total_tax': 'total_tax',
            'wrapping_ex_tax': 'wrapping_ex_tax'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._shipping_ex_tax = shipping_ex_tax
        self._subtotal_ex_tax = subtotal_ex_tax
        self._total = total
        self._total_discount = total_discount
        self._total_paid = total_paid
        self._total_tax = total_tax
        self._wrapping_ex_tax = wrapping_ex_tax

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderTotal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_Total of this OrderTotal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this OrderTotal.


        :return: The additional_fields of this OrderTotal.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this OrderTotal.


        :param additional_fields: The additional_fields of this OrderTotal.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderTotal.


        :return: The custom_fields of this OrderTotal.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderTotal.


        :param custom_fields: The custom_fields of this OrderTotal.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def shipping_ex_tax(self):
        """Gets the shipping_ex_tax of this OrderTotal.


        :return: The shipping_ex_tax of this OrderTotal.
        :rtype: float
        """
        return self._shipping_ex_tax

    @shipping_ex_tax.setter
    def shipping_ex_tax(self, shipping_ex_tax):
        """Sets the shipping_ex_tax of this OrderTotal.


        :param shipping_ex_tax: The shipping_ex_tax of this OrderTotal.
        :type shipping_ex_tax: float
        """

        self._shipping_ex_tax = shipping_ex_tax

    @property
    def subtotal_ex_tax(self):
        """Gets the subtotal_ex_tax of this OrderTotal.


        :return: The subtotal_ex_tax of this OrderTotal.
        :rtype: float
        """
        return self._subtotal_ex_tax

    @subtotal_ex_tax.setter
    def subtotal_ex_tax(self, subtotal_ex_tax):
        """Sets the subtotal_ex_tax of this OrderTotal.


        :param subtotal_ex_tax: The subtotal_ex_tax of this OrderTotal.
        :type subtotal_ex_tax: float
        """

        self._subtotal_ex_tax = subtotal_ex_tax

    @property
    def total(self):
        """Gets the total of this OrderTotal.


        :return: The total of this OrderTotal.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderTotal.


        :param total: The total of this OrderTotal.
        :type total: float
        """

        self._total = total

    @property
    def total_discount(self):
        """Gets the total_discount of this OrderTotal.


        :return: The total_discount of this OrderTotal.
        :rtype: float
        """
        return self._total_discount

    @total_discount.setter
    def total_discount(self, total_discount):
        """Sets the total_discount of this OrderTotal.


        :param total_discount: The total_discount of this OrderTotal.
        :type total_discount: float
        """

        self._total_discount = total_discount

    @property
    def total_paid(self):
        """Gets the total_paid of this OrderTotal.


        :return: The total_paid of this OrderTotal.
        :rtype: float
        """
        return self._total_paid

    @total_paid.setter
    def total_paid(self, total_paid):
        """Sets the total_paid of this OrderTotal.


        :param total_paid: The total_paid of this OrderTotal.
        :type total_paid: float
        """

        self._total_paid = total_paid

    @property
    def total_tax(self):
        """Gets the total_tax of this OrderTotal.


        :return: The total_tax of this OrderTotal.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """Sets the total_tax of this OrderTotal.


        :param total_tax: The total_tax of this OrderTotal.
        :type total_tax: float
        """

        self._total_tax = total_tax

    @property
    def wrapping_ex_tax(self):
        """Gets the wrapping_ex_tax of this OrderTotal.


        :return: The wrapping_ex_tax of this OrderTotal.
        :rtype: float
        """
        return self._wrapping_ex_tax

    @wrapping_ex_tax.setter
    def wrapping_ex_tax(self, wrapping_ex_tax):
        """Sets the wrapping_ex_tax of this OrderTotal.


        :param wrapping_ex_tax: The wrapping_ex_tax of this OrderTotal.
        :type wrapping_ex_tax: float
        """

        self._wrapping_ex_tax = wrapping_ex_tax
