# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_shipment_add_items_inner import OrderShipmentAddItemsInner
from openapi_server.models.order_shipment_add_tracking_numbers_inner import OrderShipmentAddTrackingNumbersInner
from openapi_server import util


class OrderShipmentAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjust_stock: bool=False, enable_cache: bool=False, is_shipped: bool=True, items: List[OrderShipmentAddItemsInner]=None, order_id: str=None, send_notifications: bool=False, shipment_provider: str=None, shipping_method: str=None, store_id: str=None, tracking_link: str=None, tracking_numbers: List[OrderShipmentAddTrackingNumbersInner]=None, warehouse_id: str=None):
        """OrderShipmentAdd - a model defined in OpenAPI

        :param adjust_stock: The adjust_stock of this OrderShipmentAdd.
        :param enable_cache: The enable_cache of this OrderShipmentAdd.
        :param is_shipped: The is_shipped of this OrderShipmentAdd.
        :param items: The items of this OrderShipmentAdd.
        :param order_id: The order_id of this OrderShipmentAdd.
        :param send_notifications: The send_notifications of this OrderShipmentAdd.
        :param shipment_provider: The shipment_provider of this OrderShipmentAdd.
        :param shipping_method: The shipping_method of this OrderShipmentAdd.
        :param store_id: The store_id of this OrderShipmentAdd.
        :param tracking_link: The tracking_link of this OrderShipmentAdd.
        :param tracking_numbers: The tracking_numbers of this OrderShipmentAdd.
        :param warehouse_id: The warehouse_id of this OrderShipmentAdd.
        """
        self.openapi_types = {
            'adjust_stock': bool,
            'enable_cache': bool,
            'is_shipped': bool,
            'items': List[OrderShipmentAddItemsInner],
            'order_id': str,
            'send_notifications': bool,
            'shipment_provider': str,
            'shipping_method': str,
            'store_id': str,
            'tracking_link': str,
            'tracking_numbers': List[OrderShipmentAddTrackingNumbersInner],
            'warehouse_id': str
        }

        self.attribute_map = {
            'adjust_stock': 'adjust_stock',
            'enable_cache': 'enable_cache',
            'is_shipped': 'is_shipped',
            'items': 'items',
            'order_id': 'order_id',
            'send_notifications': 'send_notifications',
            'shipment_provider': 'shipment_provider',
            'shipping_method': 'shipping_method',
            'store_id': 'store_id',
            'tracking_link': 'tracking_link',
            'tracking_numbers': 'tracking_numbers',
            'warehouse_id': 'warehouse_id'
        }

        self._adjust_stock = adjust_stock
        self._enable_cache = enable_cache
        self._is_shipped = is_shipped
        self._items = items
        self._order_id = order_id
        self._send_notifications = send_notifications
        self._shipment_provider = shipment_provider
        self._shipping_method = shipping_method
        self._store_id = store_id
        self._tracking_link = tracking_link
        self._tracking_numbers = tracking_numbers
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderShipmentAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderShipmentAdd of this OrderShipmentAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjust_stock(self):
        """Gets the adjust_stock of this OrderShipmentAdd.

        This parameter is used for adjust stock.

        :return: The adjust_stock of this OrderShipmentAdd.
        :rtype: bool
        """
        return self._adjust_stock

    @adjust_stock.setter
    def adjust_stock(self, adjust_stock):
        """Sets the adjust_stock of this OrderShipmentAdd.

        This parameter is used for adjust stock.

        :param adjust_stock: The adjust_stock of this OrderShipmentAdd.
        :type adjust_stock: bool
        """

        self._adjust_stock = adjust_stock

    @property
    def enable_cache(self):
        """Gets the enable_cache of this OrderShipmentAdd.

        If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.

        :return: The enable_cache of this OrderShipmentAdd.
        :rtype: bool
        """
        return self._enable_cache

    @enable_cache.setter
    def enable_cache(self, enable_cache):
        """Sets the enable_cache of this OrderShipmentAdd.

        If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.

        :param enable_cache: The enable_cache of this OrderShipmentAdd.
        :type enable_cache: bool
        """

        self._enable_cache = enable_cache

    @property
    def is_shipped(self):
        """Gets the is_shipped of this OrderShipmentAdd.

        Defines shipment's status

        :return: The is_shipped of this OrderShipmentAdd.
        :rtype: bool
        """
        return self._is_shipped

    @is_shipped.setter
    def is_shipped(self, is_shipped):
        """Sets the is_shipped of this OrderShipmentAdd.

        Defines shipment's status

        :param is_shipped: The is_shipped of this OrderShipmentAdd.
        :type is_shipped: bool
        """

        self._is_shipped = is_shipped

    @property
    def items(self):
        """Gets the items of this OrderShipmentAdd.

        Defines items in the order that will be shipped

        :return: The items of this OrderShipmentAdd.
        :rtype: List[OrderShipmentAddItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrderShipmentAdd.

        Defines items in the order that will be shipped

        :param items: The items of this OrderShipmentAdd.
        :type items: List[OrderShipmentAddItemsInner]
        """

        self._items = items

    @property
    def order_id(self):
        """Gets the order_id of this OrderShipmentAdd.

        Defines the order for which the shipment will be created

        :return: The order_id of this OrderShipmentAdd.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderShipmentAdd.

        Defines the order for which the shipment will be created

        :param order_id: The order_id of this OrderShipmentAdd.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def send_notifications(self):
        """Gets the send_notifications of this OrderShipmentAdd.

        Send notifications to customer after shipment was created

        :return: The send_notifications of this OrderShipmentAdd.
        :rtype: bool
        """
        return self._send_notifications

    @send_notifications.setter
    def send_notifications(self, send_notifications):
        """Sets the send_notifications of this OrderShipmentAdd.

        Send notifications to customer after shipment was created

        :param send_notifications: The send_notifications of this OrderShipmentAdd.
        :type send_notifications: bool
        """

        self._send_notifications = send_notifications

    @property
    def shipment_provider(self):
        """Gets the shipment_provider of this OrderShipmentAdd.

        Defines company name that provide tracking of shipment

        :return: The shipment_provider of this OrderShipmentAdd.
        :rtype: str
        """
        return self._shipment_provider

    @shipment_provider.setter
    def shipment_provider(self, shipment_provider):
        """Sets the shipment_provider of this OrderShipmentAdd.

        Defines company name that provide tracking of shipment

        :param shipment_provider: The shipment_provider of this OrderShipmentAdd.
        :type shipment_provider: str
        """

        self._shipment_provider = shipment_provider

    @property
    def shipping_method(self):
        """Gets the shipping_method of this OrderShipmentAdd.

        Define shipping method

        :return: The shipping_method of this OrderShipmentAdd.
        :rtype: str
        """
        return self._shipping_method

    @shipping_method.setter
    def shipping_method(self, shipping_method):
        """Sets the shipping_method of this OrderShipmentAdd.

        Define shipping method

        :param shipping_method: The shipping_method of this OrderShipmentAdd.
        :type shipping_method: str
        """

        self._shipping_method = shipping_method

    @property
    def store_id(self):
        """Gets the store_id of this OrderShipmentAdd.

        Store Id

        :return: The store_id of this OrderShipmentAdd.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this OrderShipmentAdd.

        Store Id

        :param store_id: The store_id of this OrderShipmentAdd.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def tracking_link(self):
        """Gets the tracking_link of this OrderShipmentAdd.

        Defines custom tracking link

        :return: The tracking_link of this OrderShipmentAdd.
        :rtype: str
        """
        return self._tracking_link

    @tracking_link.setter
    def tracking_link(self, tracking_link):
        """Sets the tracking_link of this OrderShipmentAdd.

        Defines custom tracking link

        :param tracking_link: The tracking_link of this OrderShipmentAdd.
        :type tracking_link: str
        """

        self._tracking_link = tracking_link

    @property
    def tracking_numbers(self):
        """Gets the tracking_numbers of this OrderShipmentAdd.

        Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"https://api2cart.com/docs/#/cart/CartInfo\">cart.info</a > method

        :return: The tracking_numbers of this OrderShipmentAdd.
        :rtype: List[OrderShipmentAddTrackingNumbersInner]
        """
        return self._tracking_numbers

    @tracking_numbers.setter
    def tracking_numbers(self, tracking_numbers):
        """Sets the tracking_numbers of this OrderShipmentAdd.

        Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"https://api2cart.com/docs/#/cart/CartInfo\">cart.info</a > method

        :param tracking_numbers: The tracking_numbers of this OrderShipmentAdd.
        :type tracking_numbers: List[OrderShipmentAddTrackingNumbersInner]
        """

        self._tracking_numbers = tracking_numbers

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this OrderShipmentAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :return: The warehouse_id of this OrderShipmentAdd.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this OrderShipmentAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :param warehouse_id: The warehouse_id of this OrderShipmentAdd.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id
