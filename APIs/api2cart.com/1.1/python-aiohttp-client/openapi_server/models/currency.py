# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, avail: bool=None, custom_fields: object=None, default: bool=None, id: str=None, iso3: str=None, name: str=None, rate: float=None, symbol_left: str=None, symbol_right: str=None):
        """Currency - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this Currency.
        :param avail: The avail of this Currency.
        :param custom_fields: The custom_fields of this Currency.
        :param default: The default of this Currency.
        :param id: The id of this Currency.
        :param iso3: The iso3 of this Currency.
        :param name: The name of this Currency.
        :param rate: The rate of this Currency.
        :param symbol_left: The symbol_left of this Currency.
        :param symbol_right: The symbol_right of this Currency.
        """
        self.openapi_types = {
            'additional_fields': object,
            'avail': bool,
            'custom_fields': object,
            'default': bool,
            'id': str,
            'iso3': str,
            'name': str,
            'rate': float,
            'symbol_left': str,
            'symbol_right': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'avail': 'avail',
            'custom_fields': 'custom_fields',
            'default': 'default',
            'id': 'id',
            'iso3': 'iso3',
            'name': 'name',
            'rate': 'rate',
            'symbol_left': 'symbol_left',
            'symbol_right': 'symbol_right'
        }

        self._additional_fields = additional_fields
        self._avail = avail
        self._custom_fields = custom_fields
        self._default = default
        self._id = id
        self._iso3 = iso3
        self._name = name
        self._rate = rate
        self._symbol_left = symbol_left
        self._symbol_right = symbol_right

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Currency.


        :return: The additional_fields of this Currency.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Currency.


        :param additional_fields: The additional_fields of this Currency.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def avail(self):
        """Gets the avail of this Currency.


        :return: The avail of this Currency.
        :rtype: bool
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this Currency.


        :param avail: The avail of this Currency.
        :type avail: bool
        """

        self._avail = avail

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Currency.


        :return: The custom_fields of this Currency.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Currency.


        :param custom_fields: The custom_fields of this Currency.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def default(self):
        """Gets the default of this Currency.


        :return: The default of this Currency.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Currency.


        :param default: The default of this Currency.
        :type default: bool
        """

        self._default = default

    @property
    def id(self):
        """Gets the id of this Currency.


        :return: The id of this Currency.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Currency.


        :param id: The id of this Currency.
        :type id: str
        """

        self._id = id

    @property
    def iso3(self):
        """Gets the iso3 of this Currency.


        :return: The iso3 of this Currency.
        :rtype: str
        """
        return self._iso3

    @iso3.setter
    def iso3(self, iso3):
        """Sets the iso3 of this Currency.


        :param iso3: The iso3 of this Currency.
        :type iso3: str
        """

        self._iso3 = iso3

    @property
    def name(self):
        """Gets the name of this Currency.


        :return: The name of this Currency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency.


        :param name: The name of this Currency.
        :type name: str
        """

        self._name = name

    @property
    def rate(self):
        """Gets the rate of this Currency.


        :return: The rate of this Currency.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this Currency.


        :param rate: The rate of this Currency.
        :type rate: float
        """

        self._rate = rate

    @property
    def symbol_left(self):
        """Gets the symbol_left of this Currency.


        :return: The symbol_left of this Currency.
        :rtype: str
        """
        return self._symbol_left

    @symbol_left.setter
    def symbol_left(self, symbol_left):
        """Sets the symbol_left of this Currency.


        :param symbol_left: The symbol_left of this Currency.
        :type symbol_left: str
        """

        self._symbol_left = symbol_left

    @property
    def symbol_right(self):
        """Gets the symbol_right of this Currency.


        :return: The symbol_right of this Currency.
        :rtype: str
        """
        return self._symbol_right

    @symbol_right.setter
    def symbol_right(self, symbol_right):
        """Sets the symbol_right of this Currency.


        :param symbol_right: The symbol_right of this Currency.
        :type symbol_right: str
        """

        self._symbol_right = symbol_right
