# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.a2_c_date_time import A2CDateTime
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, alt: str=None, avail: bool=None, create_at: A2CDateTime=None, custom_fields: object=None, file_name: str=None, http_path: str=None, id: str=None, mime_type: str=None, modified_at: A2CDateTime=None, size: int=None, sort_order: int=None, type: str=None):
        """Image - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this Image.
        :param alt: The alt of this Image.
        :param avail: The avail of this Image.
        :param create_at: The create_at of this Image.
        :param custom_fields: The custom_fields of this Image.
        :param file_name: The file_name of this Image.
        :param http_path: The http_path of this Image.
        :param id: The id of this Image.
        :param mime_type: The mime_type of this Image.
        :param modified_at: The modified_at of this Image.
        :param size: The size of this Image.
        :param sort_order: The sort_order of this Image.
        :param type: The type of this Image.
        """
        self.openapi_types = {
            'additional_fields': object,
            'alt': str,
            'avail': bool,
            'create_at': A2CDateTime,
            'custom_fields': object,
            'file_name': str,
            'http_path': str,
            'id': str,
            'mime_type': str,
            'modified_at': A2CDateTime,
            'size': int,
            'sort_order': int,
            'type': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'alt': 'alt',
            'avail': 'avail',
            'create_at': 'create_at',
            'custom_fields': 'custom_fields',
            'file_name': 'file_name',
            'http_path': 'http_path',
            'id': 'id',
            'mime_type': 'mime-type',
            'modified_at': 'modified_at',
            'size': 'size',
            'sort_order': 'sort_order',
            'type': 'type'
        }

        self._additional_fields = additional_fields
        self._alt = alt
        self._avail = avail
        self._create_at = create_at
        self._custom_fields = custom_fields
        self._file_name = file_name
        self._http_path = http_path
        self._id = id
        self._mime_type = mime_type
        self._modified_at = modified_at
        self._size = size
        self._sort_order = sort_order
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Image.


        :return: The additional_fields of this Image.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Image.


        :param additional_fields: The additional_fields of this Image.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def alt(self):
        """Gets the alt of this Image.


        :return: The alt of this Image.
        :rtype: str
        """
        return self._alt

    @alt.setter
    def alt(self, alt):
        """Sets the alt of this Image.


        :param alt: The alt of this Image.
        :type alt: str
        """

        self._alt = alt

    @property
    def avail(self):
        """Gets the avail of this Image.


        :return: The avail of this Image.
        :rtype: bool
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this Image.


        :param avail: The avail of this Image.
        :type avail: bool
        """

        self._avail = avail

    @property
    def create_at(self):
        """Gets the create_at of this Image.


        :return: The create_at of this Image.
        :rtype: A2CDateTime
        """
        return self._create_at

    @create_at.setter
    def create_at(self, create_at):
        """Sets the create_at of this Image.


        :param create_at: The create_at of this Image.
        :type create_at: A2CDateTime
        """

        self._create_at = create_at

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Image.


        :return: The custom_fields of this Image.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Image.


        :param custom_fields: The custom_fields of this Image.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def file_name(self):
        """Gets the file_name of this Image.


        :return: The file_name of this Image.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this Image.


        :param file_name: The file_name of this Image.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def http_path(self):
        """Gets the http_path of this Image.


        :return: The http_path of this Image.
        :rtype: str
        """
        return self._http_path

    @http_path.setter
    def http_path(self, http_path):
        """Sets the http_path of this Image.


        :param http_path: The http_path of this Image.
        :type http_path: str
        """

        self._http_path = http_path

    @property
    def id(self):
        """Gets the id of this Image.


        :return: The id of this Image.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Image.


        :param id: The id of this Image.
        :type id: str
        """

        self._id = id

    @property
    def mime_type(self):
        """Gets the mime_type of this Image.


        :return: The mime_type of this Image.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Image.


        :param mime_type: The mime_type of this Image.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def modified_at(self):
        """Gets the modified_at of this Image.


        :return: The modified_at of this Image.
        :rtype: A2CDateTime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Image.


        :param modified_at: The modified_at of this Image.
        :type modified_at: A2CDateTime
        """

        self._modified_at = modified_at

    @property
    def size(self):
        """Gets the size of this Image.


        :return: The size of this Image.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Image.


        :param size: The size of this Image.
        :type size: int
        """

        self._size = size

    @property
    def sort_order(self):
        """Gets the sort_order of this Image.


        :return: The sort_order of this Image.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Image.


        :param sort_order: The sort_order of this Image.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def type(self):
        """Gets the type of this Image.


        :return: The type of this Image.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Image.


        :param type: The type of this Image.
        :type type: str
        """

        self._type = type
