# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_add_group_prices_inner import ProductAddGroupPricesInner
from openapi_server import util


class ProductVariantPriceAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_prices: List[ProductAddGroupPricesInner]=None, id: str=None, product_id: str=None):
        """ProductVariantPriceAdd - a model defined in OpenAPI

        :param group_prices: The group_prices of this ProductVariantPriceAdd.
        :param id: The id of this ProductVariantPriceAdd.
        :param product_id: The product_id of this ProductVariantPriceAdd.
        """
        self.openapi_types = {
            'group_prices': List[ProductAddGroupPricesInner],
            'id': str,
            'product_id': str
        }

        self.attribute_map = {
            'group_prices': 'group_prices',
            'id': 'id',
            'product_id': 'product_id'
        }

        self._group_prices = group_prices
        self._id = id
        self._product_id = product_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductVariantPriceAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductVariantPriceAdd of this ProductVariantPriceAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_prices(self):
        """Gets the group_prices of this ProductVariantPriceAdd.

        Defines variants's group prices

        :return: The group_prices of this ProductVariantPriceAdd.
        :rtype: List[ProductAddGroupPricesInner]
        """
        return self._group_prices

    @group_prices.setter
    def group_prices(self, group_prices):
        """Sets the group_prices of this ProductVariantPriceAdd.

        Defines variants's group prices

        :param group_prices: The group_prices of this ProductVariantPriceAdd.
        :type group_prices: List[ProductAddGroupPricesInner]
        """
        if group_prices is None:
            raise ValueError("Invalid value for `group_prices`, must not be `None`")

        self._group_prices = group_prices

    @property
    def id(self):
        """Gets the id of this ProductVariantPriceAdd.

        Defines the variant to which the price has to be added

        :return: The id of this ProductVariantPriceAdd.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductVariantPriceAdd.

        Defines the variant to which the price has to be added

        :param id: The id of this ProductVariantPriceAdd.
        :type id: str
        """

        self._id = id

    @property
    def product_id(self):
        """Gets the product_id of this ProductVariantPriceAdd.

        Product id

        :return: The product_id of this ProductVariantPriceAdd.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductVariantPriceAdd.

        Product id

        :param product_id: The product_id of this ProductVariantPriceAdd.
        :type product_id: str
        """

        self._product_id = product_id
