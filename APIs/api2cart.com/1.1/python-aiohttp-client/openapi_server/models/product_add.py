# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_add_files_inner import ProductAddFilesInner
from openapi_server.models.product_add_group_prices_inner import ProductAddGroupPricesInner
from openapi_server.models.product_add_seller_profiles import ProductAddSellerProfiles
from openapi_server.models.product_add_shipping_details_inner import ProductAddShippingDetailsInner
from openapi_server.models.product_add_tier_prices_inner import ProductAddTierPricesInner
from openapi_server import util


class ProductAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, attribute_set_name: str='Default', avail_from: str=None, available_for_sale: bool=True, available_for_view: bool=True, backorder_status: str=None, barcode: str=None, best_offer: List[str]=None, brand_name: str=None, categories_ids: str=None, category_id: str=None, clear_cache: bool=True, condition: str=None, cost_price: float=None, country_of_origin: str=None, created_at: str=None, description: str=None, downloadable: bool=False, ean: str=None, files: List[ProductAddFilesInner]=None, group_prices: List[ProductAddGroupPricesInner]=None, gtin: str=None, harmonized_system_code: str=None, height: float=None, image_name: str=None, image_url: str=None, isbn: str=None, lang_id: str=None, length: float=None, listing_duration: str=None, listing_type: str='FixedPrice', manage_stock: bool=None, manufacturer: str=None, marketplace_item_properties: str='false', meta_description: str=None, meta_keywords: str=None, meta_title: str=None, model: str=None, mpn: str=None, name: str=None, old_price: float=None, ordered_count: int=0, package_details: List[str]=None, payment_methods: List[str]=None, paypal_email: str=None, price: float=None, product_class: str=None, quantity: float=0, return_accepted: bool=None, sales_tax: List[str]=None, search_keywords: str=None, seller_profiles: ProductAddSellerProfiles=None, seo_url: str=None, shipping_details: List[ProductAddShippingDetailsInner]=None, shipping_template_id: int=0, short_description: str=None, sku: str=None, special_price: float=None, specifics: List[str]=None, sprice_create: str=None, sprice_expire: str=None, sprice_modified: str=None, status: str=None, store_id: str=None, stores_ids: str='0', tags: str=None, tax_class_id: str=None, taxable: bool=True, tier_prices: List[ProductAddTierPricesInner]=None, type: str='simple', upc: str=None, url: str=None, viewed_count: int=0, visible: str=None, warehouse_id: str=None, weight: float=0, weight_unit: str=None, wholesale_price: float=None, width: float=None):
        """ProductAdd - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this ProductAdd.
        :param attribute_set_name: The attribute_set_name of this ProductAdd.
        :param avail_from: The avail_from of this ProductAdd.
        :param available_for_sale: The available_for_sale of this ProductAdd.
        :param available_for_view: The available_for_view of this ProductAdd.
        :param backorder_status: The backorder_status of this ProductAdd.
        :param barcode: The barcode of this ProductAdd.
        :param best_offer: The best_offer of this ProductAdd.
        :param brand_name: The brand_name of this ProductAdd.
        :param categories_ids: The categories_ids of this ProductAdd.
        :param category_id: The category_id of this ProductAdd.
        :param clear_cache: The clear_cache of this ProductAdd.
        :param condition: The condition of this ProductAdd.
        :param cost_price: The cost_price of this ProductAdd.
        :param country_of_origin: The country_of_origin of this ProductAdd.
        :param created_at: The created_at of this ProductAdd.
        :param description: The description of this ProductAdd.
        :param downloadable: The downloadable of this ProductAdd.
        :param ean: The ean of this ProductAdd.
        :param files: The files of this ProductAdd.
        :param group_prices: The group_prices of this ProductAdd.
        :param gtin: The gtin of this ProductAdd.
        :param harmonized_system_code: The harmonized_system_code of this ProductAdd.
        :param height: The height of this ProductAdd.
        :param image_name: The image_name of this ProductAdd.
        :param image_url: The image_url of this ProductAdd.
        :param isbn: The isbn of this ProductAdd.
        :param lang_id: The lang_id of this ProductAdd.
        :param length: The length of this ProductAdd.
        :param listing_duration: The listing_duration of this ProductAdd.
        :param listing_type: The listing_type of this ProductAdd.
        :param manage_stock: The manage_stock of this ProductAdd.
        :param manufacturer: The manufacturer of this ProductAdd.
        :param marketplace_item_properties: The marketplace_item_properties of this ProductAdd.
        :param meta_description: The meta_description of this ProductAdd.
        :param meta_keywords: The meta_keywords of this ProductAdd.
        :param meta_title: The meta_title of this ProductAdd.
        :param model: The model of this ProductAdd.
        :param mpn: The mpn of this ProductAdd.
        :param name: The name of this ProductAdd.
        :param old_price: The old_price of this ProductAdd.
        :param ordered_count: The ordered_count of this ProductAdd.
        :param package_details: The package_details of this ProductAdd.
        :param payment_methods: The payment_methods of this ProductAdd.
        :param paypal_email: The paypal_email of this ProductAdd.
        :param price: The price of this ProductAdd.
        :param product_class: The product_class of this ProductAdd.
        :param quantity: The quantity of this ProductAdd.
        :param return_accepted: The return_accepted of this ProductAdd.
        :param sales_tax: The sales_tax of this ProductAdd.
        :param search_keywords: The search_keywords of this ProductAdd.
        :param seller_profiles: The seller_profiles of this ProductAdd.
        :param seo_url: The seo_url of this ProductAdd.
        :param shipping_details: The shipping_details of this ProductAdd.
        :param shipping_template_id: The shipping_template_id of this ProductAdd.
        :param short_description: The short_description of this ProductAdd.
        :param sku: The sku of this ProductAdd.
        :param special_price: The special_price of this ProductAdd.
        :param specifics: The specifics of this ProductAdd.
        :param sprice_create: The sprice_create of this ProductAdd.
        :param sprice_expire: The sprice_expire of this ProductAdd.
        :param sprice_modified: The sprice_modified of this ProductAdd.
        :param status: The status of this ProductAdd.
        :param store_id: The store_id of this ProductAdd.
        :param stores_ids: The stores_ids of this ProductAdd.
        :param tags: The tags of this ProductAdd.
        :param tax_class_id: The tax_class_id of this ProductAdd.
        :param taxable: The taxable of this ProductAdd.
        :param tier_prices: The tier_prices of this ProductAdd.
        :param type: The type of this ProductAdd.
        :param upc: The upc of this ProductAdd.
        :param url: The url of this ProductAdd.
        :param viewed_count: The viewed_count of this ProductAdd.
        :param visible: The visible of this ProductAdd.
        :param warehouse_id: The warehouse_id of this ProductAdd.
        :param weight: The weight of this ProductAdd.
        :param weight_unit: The weight_unit of this ProductAdd.
        :param wholesale_price: The wholesale_price of this ProductAdd.
        :param width: The width of this ProductAdd.
        """
        self.openapi_types = {
            'attribute_name': str,
            'attribute_set_name': str,
            'avail_from': str,
            'available_for_sale': bool,
            'available_for_view': bool,
            'backorder_status': str,
            'barcode': str,
            'best_offer': List[str],
            'brand_name': str,
            'categories_ids': str,
            'category_id': str,
            'clear_cache': bool,
            'condition': str,
            'cost_price': float,
            'country_of_origin': str,
            'created_at': str,
            'description': str,
            'downloadable': bool,
            'ean': str,
            'files': List[ProductAddFilesInner],
            'group_prices': List[ProductAddGroupPricesInner],
            'gtin': str,
            'harmonized_system_code': str,
            'height': float,
            'image_name': str,
            'image_url': str,
            'isbn': str,
            'lang_id': str,
            'length': float,
            'listing_duration': str,
            'listing_type': str,
            'manage_stock': bool,
            'manufacturer': str,
            'marketplace_item_properties': str,
            'meta_description': str,
            'meta_keywords': str,
            'meta_title': str,
            'model': str,
            'mpn': str,
            'name': str,
            'old_price': float,
            'ordered_count': int,
            'package_details': List[str],
            'payment_methods': List[str],
            'paypal_email': str,
            'price': float,
            'product_class': str,
            'quantity': float,
            'return_accepted': bool,
            'sales_tax': List[str],
            'search_keywords': str,
            'seller_profiles': ProductAddSellerProfiles,
            'seo_url': str,
            'shipping_details': List[ProductAddShippingDetailsInner],
            'shipping_template_id': int,
            'short_description': str,
            'sku': str,
            'special_price': float,
            'specifics': List[str],
            'sprice_create': str,
            'sprice_expire': str,
            'sprice_modified': str,
            'status': str,
            'store_id': str,
            'stores_ids': str,
            'tags': str,
            'tax_class_id': str,
            'taxable': bool,
            'tier_prices': List[ProductAddTierPricesInner],
            'type': str,
            'upc': str,
            'url': str,
            'viewed_count': int,
            'visible': str,
            'warehouse_id': str,
            'weight': float,
            'weight_unit': str,
            'wholesale_price': float,
            'width': float
        }

        self.attribute_map = {
            'attribute_name': 'attribute_name',
            'attribute_set_name': 'attribute_set_name',
            'avail_from': 'avail_from',
            'available_for_sale': 'available_for_sale',
            'available_for_view': 'available_for_view',
            'backorder_status': 'backorder_status',
            'barcode': 'barcode',
            'best_offer': 'best_offer',
            'brand_name': 'brand_name',
            'categories_ids': 'categories_ids',
            'category_id': 'category_id',
            'clear_cache': 'clear_cache',
            'condition': 'condition',
            'cost_price': 'cost_price',
            'country_of_origin': 'country_of_origin',
            'created_at': 'created_at',
            'description': 'description',
            'downloadable': 'downloadable',
            'ean': 'ean',
            'files': 'files',
            'group_prices': 'group_prices',
            'gtin': 'gtin',
            'harmonized_system_code': 'harmonized_system_code',
            'height': 'height',
            'image_name': 'image_name',
            'image_url': 'image_url',
            'isbn': 'isbn',
            'lang_id': 'lang_id',
            'length': 'length',
            'listing_duration': 'listing_duration',
            'listing_type': 'listing_type',
            'manage_stock': 'manage_stock',
            'manufacturer': 'manufacturer',
            'marketplace_item_properties': 'marketplace_item_properties',
            'meta_description': 'meta_description',
            'meta_keywords': 'meta_keywords',
            'meta_title': 'meta_title',
            'model': 'model',
            'mpn': 'mpn',
            'name': 'name',
            'old_price': 'old_price',
            'ordered_count': 'ordered_count',
            'package_details': 'package_details',
            'payment_methods': 'payment_methods',
            'paypal_email': 'paypal_email',
            'price': 'price',
            'product_class': 'product_class',
            'quantity': 'quantity',
            'return_accepted': 'return_accepted',
            'sales_tax': 'sales_tax',
            'search_keywords': 'search_keywords',
            'seller_profiles': 'seller_profiles',
            'seo_url': 'seo_url',
            'shipping_details': 'shipping_details',
            'shipping_template_id': 'shipping_template_id',
            'short_description': 'short_description',
            'sku': 'sku',
            'special_price': 'special_price',
            'specifics': 'specifics',
            'sprice_create': 'sprice_create',
            'sprice_expire': 'sprice_expire',
            'sprice_modified': 'sprice_modified',
            'status': 'status',
            'store_id': 'store_id',
            'stores_ids': 'stores_ids',
            'tags': 'tags',
            'tax_class_id': 'tax_class_id',
            'taxable': 'taxable',
            'tier_prices': 'tier_prices',
            'type': 'type',
            'upc': 'upc',
            'url': 'url',
            'viewed_count': 'viewed_count',
            'visible': 'visible',
            'warehouse_id': 'warehouse_id',
            'weight': 'weight',
            'weight_unit': 'weight_unit',
            'wholesale_price': 'wholesale_price',
            'width': 'width'
        }

        self._attribute_name = attribute_name
        self._attribute_set_name = attribute_set_name
        self._avail_from = avail_from
        self._available_for_sale = available_for_sale
        self._available_for_view = available_for_view
        self._backorder_status = backorder_status
        self._barcode = barcode
        self._best_offer = best_offer
        self._brand_name = brand_name
        self._categories_ids = categories_ids
        self._category_id = category_id
        self._clear_cache = clear_cache
        self._condition = condition
        self._cost_price = cost_price
        self._country_of_origin = country_of_origin
        self._created_at = created_at
        self._description = description
        self._downloadable = downloadable
        self._ean = ean
        self._files = files
        self._group_prices = group_prices
        self._gtin = gtin
        self._harmonized_system_code = harmonized_system_code
        self._height = height
        self._image_name = image_name
        self._image_url = image_url
        self._isbn = isbn
        self._lang_id = lang_id
        self._length = length
        self._listing_duration = listing_duration
        self._listing_type = listing_type
        self._manage_stock = manage_stock
        self._manufacturer = manufacturer
        self._marketplace_item_properties = marketplace_item_properties
        self._meta_description = meta_description
        self._meta_keywords = meta_keywords
        self._meta_title = meta_title
        self._model = model
        self._mpn = mpn
        self._name = name
        self._old_price = old_price
        self._ordered_count = ordered_count
        self._package_details = package_details
        self._payment_methods = payment_methods
        self._paypal_email = paypal_email
        self._price = price
        self._product_class = product_class
        self._quantity = quantity
        self._return_accepted = return_accepted
        self._sales_tax = sales_tax
        self._search_keywords = search_keywords
        self._seller_profiles = seller_profiles
        self._seo_url = seo_url
        self._shipping_details = shipping_details
        self._shipping_template_id = shipping_template_id
        self._short_description = short_description
        self._sku = sku
        self._special_price = special_price
        self._specifics = specifics
        self._sprice_create = sprice_create
        self._sprice_expire = sprice_expire
        self._sprice_modified = sprice_modified
        self._status = status
        self._store_id = store_id
        self._stores_ids = stores_ids
        self._tags = tags
        self._tax_class_id = tax_class_id
        self._taxable = taxable
        self._tier_prices = tier_prices
        self._type = type
        self._upc = upc
        self._url = url
        self._viewed_count = viewed_count
        self._visible = visible
        self._warehouse_id = warehouse_id
        self._weight = weight
        self._weight_unit = weight_unit
        self._wholesale_price = wholesale_price
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductAdd of this ProductAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this ProductAdd.

        Defines product’s attribute name separated with a comma in Magento

        :return: The attribute_name of this ProductAdd.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this ProductAdd.

        Defines product’s attribute name separated with a comma in Magento

        :param attribute_name: The attribute_name of this ProductAdd.
        :type attribute_name: str
        """

        self._attribute_name = attribute_name

    @property
    def attribute_set_name(self):
        """Gets the attribute_set_name of this ProductAdd.

        Defines product’s attribute set name in Magento

        :return: The attribute_set_name of this ProductAdd.
        :rtype: str
        """
        return self._attribute_set_name

    @attribute_set_name.setter
    def attribute_set_name(self, attribute_set_name):
        """Sets the attribute_set_name of this ProductAdd.

        Defines product’s attribute set name in Magento

        :param attribute_set_name: The attribute_set_name of this ProductAdd.
        :type attribute_set_name: str
        """

        self._attribute_set_name = attribute_set_name

    @property
    def avail_from(self):
        """Gets the avail_from of this ProductAdd.

        Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.

        :return: The avail_from of this ProductAdd.
        :rtype: str
        """
        return self._avail_from

    @avail_from.setter
    def avail_from(self, avail_from):
        """Sets the avail_from of this ProductAdd.

        Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.

        :param avail_from: The avail_from of this ProductAdd.
        :type avail_from: str
        """

        self._avail_from = avail_from

    @property
    def available_for_sale(self):
        """Gets the available_for_sale of this ProductAdd.

        Specifies the set of visible/invisible products for sale

        :return: The available_for_sale of this ProductAdd.
        :rtype: bool
        """
        return self._available_for_sale

    @available_for_sale.setter
    def available_for_sale(self, available_for_sale):
        """Sets the available_for_sale of this ProductAdd.

        Specifies the set of visible/invisible products for sale

        :param available_for_sale: The available_for_sale of this ProductAdd.
        :type available_for_sale: bool
        """

        self._available_for_sale = available_for_sale

    @property
    def available_for_view(self):
        """Gets the available_for_view of this ProductAdd.

        Specifies the set of visible/invisible products for users

        :return: The available_for_view of this ProductAdd.
        :rtype: bool
        """
        return self._available_for_view

    @available_for_view.setter
    def available_for_view(self, available_for_view):
        """Sets the available_for_view of this ProductAdd.

        Specifies the set of visible/invisible products for users

        :param available_for_view: The available_for_view of this ProductAdd.
        :type available_for_view: bool
        """

        self._available_for_view = available_for_view

    @property
    def backorder_status(self):
        """Gets the backorder_status of this ProductAdd.

        Set backorder status

        :return: The backorder_status of this ProductAdd.
        :rtype: str
        """
        return self._backorder_status

    @backorder_status.setter
    def backorder_status(self, backorder_status):
        """Sets the backorder_status of this ProductAdd.

        Set backorder status

        :param backorder_status: The backorder_status of this ProductAdd.
        :type backorder_status: str
        """

        self._backorder_status = backorder_status

    @property
    def barcode(self):
        """Gets the barcode of this ProductAdd.

        A barcode is a unique code composed of numbers used as a product identifier.

        :return: The barcode of this ProductAdd.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductAdd.

        A barcode is a unique code composed of numbers used as a product identifier.

        :param barcode: The barcode of this ProductAdd.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def best_offer(self):
        """Gets the best_offer of this ProductAdd.

        The price at which Best Offers are automatically accepted.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>

        :return: The best_offer of this ProductAdd.
        :rtype: List[str]
        """
        return self._best_offer

    @best_offer.setter
    def best_offer(self, best_offer):
        """Sets the best_offer of this ProductAdd.

        The price at which Best Offers are automatically accepted.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">best_offer[<b>minimum_offer_price</b>] = decimal</br>best_offer[<b>auto_accept_price</b>] = decimal</br></code></div></div>

        :param best_offer: The best_offer of this ProductAdd.
        :type best_offer: List[str]
        """

        self._best_offer = best_offer

    @property
    def brand_name(self):
        """Gets the brand_name of this ProductAdd.

        Retrieves brands specified by brand name

        :return: The brand_name of this ProductAdd.
        :rtype: str
        """
        return self._brand_name

    @brand_name.setter
    def brand_name(self, brand_name):
        """Sets the brand_name of this ProductAdd.

        Retrieves brands specified by brand name

        :param brand_name: The brand_name of this ProductAdd.
        :type brand_name: str
        """

        self._brand_name = brand_name

    @property
    def categories_ids(self):
        """Gets the categories_ids of this ProductAdd.

        Defines product add that is specified by comma-separated categories id

        :return: The categories_ids of this ProductAdd.
        :rtype: str
        """
        return self._categories_ids

    @categories_ids.setter
    def categories_ids(self, categories_ids):
        """Sets the categories_ids of this ProductAdd.

        Defines product add that is specified by comma-separated categories id

        :param categories_ids: The categories_ids of this ProductAdd.
        :type categories_ids: str
        """

        self._categories_ids = categories_ids

    @property
    def category_id(self):
        """Gets the category_id of this ProductAdd.

        Defines product add that is specified by category id

        :return: The category_id of this ProductAdd.
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ProductAdd.

        Defines product add that is specified by category id

        :param category_id: The category_id of this ProductAdd.
        :type category_id: str
        """

        self._category_id = category_id

    @property
    def clear_cache(self):
        """Gets the clear_cache of this ProductAdd.

        Is cache clear required

        :return: The clear_cache of this ProductAdd.
        :rtype: bool
        """
        return self._clear_cache

    @clear_cache.setter
    def clear_cache(self, clear_cache):
        """Sets the clear_cache of this ProductAdd.

        Is cache clear required

        :param clear_cache: The clear_cache of this ProductAdd.
        :type clear_cache: bool
        """

        self._clear_cache = clear_cache

    @property
    def condition(self):
        """Gets the condition of this ProductAdd.

        The human-readable label for the condition (e.g., \"New\").

        :return: The condition of this ProductAdd.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ProductAdd.

        The human-readable label for the condition (e.g., \"New\").

        :param condition: The condition of this ProductAdd.
        :type condition: str
        """

        self._condition = condition

    @property
    def cost_price(self):
        """Gets the cost_price of this ProductAdd.

        Defines new product's cost price

        :return: The cost_price of this ProductAdd.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this ProductAdd.

        Defines new product's cost price

        :param cost_price: The cost_price of this ProductAdd.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this ProductAdd.

        The country where the inventory item was made

        :return: The country_of_origin of this ProductAdd.
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this ProductAdd.

        The country where the inventory item was made

        :param country_of_origin: The country_of_origin of this ProductAdd.
        :type country_of_origin: str
        """

        self._country_of_origin = country_of_origin

    @property
    def created_at(self):
        """Gets the created_at of this ProductAdd.

        Defines the date of entity creation

        :return: The created_at of this ProductAdd.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProductAdd.

        Defines the date of entity creation

        :param created_at: The created_at of this ProductAdd.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ProductAdd.

        Defines product's description that has to be added

        :return: The description of this ProductAdd.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductAdd.

        Defines product's description that has to be added

        :param description: The description of this ProductAdd.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def downloadable(self):
        """Gets the downloadable of this ProductAdd.

        Defines whether the product is downloadable

        :return: The downloadable of this ProductAdd.
        :rtype: bool
        """
        return self._downloadable

    @downloadable.setter
    def downloadable(self, downloadable):
        """Sets the downloadable of this ProductAdd.

        Defines whether the product is downloadable

        :param downloadable: The downloadable of this ProductAdd.
        :type downloadable: bool
        """

        self._downloadable = downloadable

    @property
    def ean(self):
        """Gets the ean of this ProductAdd.

        European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.

        :return: The ean of this ProductAdd.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this ProductAdd.

        European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.

        :param ean: The ean of this ProductAdd.
        :type ean: str
        """

        self._ean = ean

    @property
    def files(self):
        """Gets the files of this ProductAdd.

        File Url

        :return: The files of this ProductAdd.
        :rtype: List[ProductAddFilesInner]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ProductAdd.

        File Url

        :param files: The files of this ProductAdd.
        :type files: List[ProductAddFilesInner]
        """

        self._files = files

    @property
    def group_prices(self):
        """Gets the group_prices of this ProductAdd.

        Defines product's group prices

        :return: The group_prices of this ProductAdd.
        :rtype: List[ProductAddGroupPricesInner]
        """
        return self._group_prices

    @group_prices.setter
    def group_prices(self, group_prices):
        """Sets the group_prices of this ProductAdd.

        Defines product's group prices

        :param group_prices: The group_prices of this ProductAdd.
        :type group_prices: List[ProductAddGroupPricesInner]
        """

        self._group_prices = group_prices

    @property
    def gtin(self):
        """Gets the gtin of this ProductAdd.

        Global Trade Item Number. An GTIN is an identifier for trade items.

        :return: The gtin of this ProductAdd.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this ProductAdd.

        Global Trade Item Number. An GTIN is an identifier for trade items.

        :param gtin: The gtin of this ProductAdd.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def harmonized_system_code(self):
        """Gets the harmonized_system_code of this ProductAdd.

        Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes

        :return: The harmonized_system_code of this ProductAdd.
        :rtype: str
        """
        return self._harmonized_system_code

    @harmonized_system_code.setter
    def harmonized_system_code(self, harmonized_system_code):
        """Sets the harmonized_system_code of this ProductAdd.

        Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes

        :param harmonized_system_code: The harmonized_system_code of this ProductAdd.
        :type harmonized_system_code: str
        """

        self._harmonized_system_code = harmonized_system_code

    @property
    def height(self):
        """Gets the height of this ProductAdd.

        Defines product's height

        :return: The height of this ProductAdd.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ProductAdd.

        Defines product's height

        :param height: The height of this ProductAdd.
        :type height: float
        """

        self._height = height

    @property
    def image_name(self):
        """Gets the image_name of this ProductAdd.

        Defines image's name

        :return: The image_name of this ProductAdd.
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ProductAdd.

        Defines image's name

        :param image_name: The image_name of this ProductAdd.
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def image_url(self):
        """Gets the image_url of this ProductAdd.

        Image Url

        :return: The image_url of this ProductAdd.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ProductAdd.

        Image Url

        :param image_url: The image_url of this ProductAdd.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def isbn(self):
        """Gets the isbn of this ProductAdd.

        International Standard Book Number. An ISBN is a unique identifier for books.

        :return: The isbn of this ProductAdd.
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this ProductAdd.

        International Standard Book Number. An ISBN is a unique identifier for books.

        :param isbn: The isbn of this ProductAdd.
        :type isbn: str
        """

        self._isbn = isbn

    @property
    def lang_id(self):
        """Gets the lang_id of this ProductAdd.

        Language id

        :return: The lang_id of this ProductAdd.
        :rtype: str
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ProductAdd.

        Language id

        :param lang_id: The lang_id of this ProductAdd.
        :type lang_id: str
        """

        self._lang_id = lang_id

    @property
    def length(self):
        """Gets the length of this ProductAdd.

        Defines product's length

        :return: The length of this ProductAdd.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ProductAdd.

        Defines product's length

        :param length: The length of this ProductAdd.
        :type length: float
        """

        self._length = length

    @property
    def listing_duration(self):
        """Gets the listing_duration of this ProductAdd.

        Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.

        :return: The listing_duration of this ProductAdd.
        :rtype: str
        """
        return self._listing_duration

    @listing_duration.setter
    def listing_duration(self, listing_duration):
        """Sets the listing_duration of this ProductAdd.

        Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.

        :param listing_duration: The listing_duration of this ProductAdd.
        :type listing_duration: str
        """

        self._listing_duration = listing_duration

    @property
    def listing_type(self):
        """Gets the listing_type of this ProductAdd.

        Indicates the selling format of the marketplace listing.

        :return: The listing_type of this ProductAdd.
        :rtype: str
        """
        return self._listing_type

    @listing_type.setter
    def listing_type(self, listing_type):
        """Sets the listing_type of this ProductAdd.

        Indicates the selling format of the marketplace listing.

        :param listing_type: The listing_type of this ProductAdd.
        :type listing_type: str
        """

        self._listing_type = listing_type

    @property
    def manage_stock(self):
        """Gets the manage_stock of this ProductAdd.

        Defines inventory tracking for product

        :return: The manage_stock of this ProductAdd.
        :rtype: bool
        """
        return self._manage_stock

    @manage_stock.setter
    def manage_stock(self, manage_stock):
        """Sets the manage_stock of this ProductAdd.

        Defines inventory tracking for product

        :param manage_stock: The manage_stock of this ProductAdd.
        :type manage_stock: bool
        """

        self._manage_stock = manage_stock

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductAdd.

        Defines product's manufacturer

        :return: The manufacturer of this ProductAdd.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductAdd.

        Defines product's manufacturer

        :param manufacturer: The manufacturer of this ProductAdd.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def marketplace_item_properties(self):
        """Gets the marketplace_item_properties of this ProductAdd.

        String containing the JSON representation of the supplied data

        :return: The marketplace_item_properties of this ProductAdd.
        :rtype: str
        """
        return self._marketplace_item_properties

    @marketplace_item_properties.setter
    def marketplace_item_properties(self, marketplace_item_properties):
        """Sets the marketplace_item_properties of this ProductAdd.

        String containing the JSON representation of the supplied data

        :param marketplace_item_properties: The marketplace_item_properties of this ProductAdd.
        :type marketplace_item_properties: str
        """

        self._marketplace_item_properties = marketplace_item_properties

    @property
    def meta_description(self):
        """Gets the meta_description of this ProductAdd.

        Defines unique meta description of a entity

        :return: The meta_description of this ProductAdd.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ProductAdd.

        Defines unique meta description of a entity

        :param meta_description: The meta_description of this ProductAdd.
        :type meta_description: str
        """

        self._meta_description = meta_description

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this ProductAdd.

        Defines unique meta keywords for each entity

        :return: The meta_keywords of this ProductAdd.
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this ProductAdd.

        Defines unique meta keywords for each entity

        :param meta_keywords: The meta_keywords of this ProductAdd.
        :type meta_keywords: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_title(self):
        """Gets the meta_title of this ProductAdd.

        Defines unique meta title for each entity

        :return: The meta_title of this ProductAdd.
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this ProductAdd.

        Defines unique meta title for each entity

        :param meta_title: The meta_title of this ProductAdd.
        :type meta_title: str
        """

        self._meta_title = meta_title

    @property
    def model(self):
        """Gets the model of this ProductAdd.

        Defines product's model that has to be added

        :return: The model of this ProductAdd.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProductAdd.

        Defines product's model that has to be added

        :param model: The model of this ProductAdd.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def mpn(self):
        """Gets the mpn of this ProductAdd.

        Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.

        :return: The mpn of this ProductAdd.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this ProductAdd.

        Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.

        :param mpn: The mpn of this ProductAdd.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def name(self):
        """Gets the name of this ProductAdd.

        Defines product's name that has to be added

        :return: The name of this ProductAdd.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductAdd.

        Defines product's name that has to be added

        :param name: The name of this ProductAdd.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def old_price(self):
        """Gets the old_price of this ProductAdd.

        Defines product's old price

        :return: The old_price of this ProductAdd.
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this ProductAdd.

        Defines product's old price

        :param old_price: The old_price of this ProductAdd.
        :type old_price: float
        """

        self._old_price = old_price

    @property
    def ordered_count(self):
        """Gets the ordered_count of this ProductAdd.

        Defines how many times the product was ordered

        :return: The ordered_count of this ProductAdd.
        :rtype: int
        """
        return self._ordered_count

    @ordered_count.setter
    def ordered_count(self, ordered_count):
        """Sets the ordered_count of this ProductAdd.

        Defines how many times the product was ordered

        :param ordered_count: The ordered_count of this ProductAdd.
        :type ordered_count: int
        """

        self._ordered_count = ordered_count

    @property
    def package_details(self):
        """Gets the package_details of this ProductAdd.

        If the seller is subscribed to \"Business Policies\", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>

        :return: The package_details of this ProductAdd.
        :rtype: List[str]
        """
        return self._package_details

    @package_details.setter
    def package_details(self, package_details):
        """Sets the package_details of this ProductAdd.

        If the seller is subscribed to \"Business Policies\", use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">package_details[<b>measure_unit</b>] = string</br> Allowed measure_unit values: [English or Metric] </br> Default: Metric</br>package_details[<b>weigh_unit</b>] = string</br> Allowed weigh_unit values: [kg, g, lbs, oz]</br>package_details[<b>package_depth</b>] = decimal</br>package_details[<b>package_length</b>] = decimal</br>package_details[<b>package_width</b>] = decimal</br>package_details[<b>weight_major</b>] = decimal</br>package_details[<b>weight_minor</b>] = decimal</br>package_details[<b>shipping_package</b>] = string</br> See cart.info method, param `eBay_shipping_package_details`</code></div></div>

        :param package_details: The package_details of this ProductAdd.
        :type package_details: List[str]
        """

        self._package_details = package_details

    @property
    def payment_methods(self):
        """Gets the payment_methods of this ProductAdd.

        Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>

        :return: The payment_methods of this ProductAdd.
        :rtype: List[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this ProductAdd.

        Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">payment_methods[0] = string</br>payment_methods[1] = string</br></code></div></div>

        :param payment_methods: The payment_methods of this ProductAdd.
        :type payment_methods: List[str]
        """

        self._payment_methods = payment_methods

    @property
    def paypal_email(self):
        """Gets the paypal_email of this ProductAdd.

        Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.

        :return: The paypal_email of this ProductAdd.
        :rtype: str
        """
        return self._paypal_email

    @paypal_email.setter
    def paypal_email(self, paypal_email):
        """Sets the paypal_email of this ProductAdd.

        Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.

        :param paypal_email: The paypal_email of this ProductAdd.
        :type paypal_email: str
        """

        self._paypal_email = paypal_email

    @property
    def price(self):
        """Gets the price of this ProductAdd.

        Defines product's price that has to be added

        :return: The price of this ProductAdd.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductAdd.

        Defines product's price that has to be added

        :param price: The price of this ProductAdd.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def product_class(self):
        """Gets the product_class of this ProductAdd.

        A categorization for the product

        :return: The product_class of this ProductAdd.
        :rtype: str
        """
        return self._product_class

    @product_class.setter
    def product_class(self, product_class):
        """Sets the product_class of this ProductAdd.

        A categorization for the product

        :param product_class: The product_class of this ProductAdd.
        :type product_class: str
        """

        self._product_class = product_class

    @property
    def quantity(self):
        """Gets the quantity of this ProductAdd.

        Defines product's quantity that has to be added

        :return: The quantity of this ProductAdd.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductAdd.

        Defines product's quantity that has to be added

        :param quantity: The quantity of this ProductAdd.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def return_accepted(self):
        """Gets the return_accepted of this ProductAdd.

        Indicates whether the seller allows the buyer to return the item.

        :return: The return_accepted of this ProductAdd.
        :rtype: bool
        """
        return self._return_accepted

    @return_accepted.setter
    def return_accepted(self, return_accepted):
        """Sets the return_accepted of this ProductAdd.

        Indicates whether the seller allows the buyer to return the item.

        :param return_accepted: The return_accepted of this ProductAdd.
        :type return_accepted: bool
        """

        self._return_accepted = return_accepted

    @property
    def sales_tax(self):
        """Gets the sales_tax of this ProductAdd.

        Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>

        :return: The sales_tax of this ProductAdd.
        :rtype: List[str]
        """
        return self._sales_tax

    @sales_tax.setter
    def sales_tax(self, sales_tax):
        """Sets the sales_tax of this ProductAdd.

        Percent of an item's price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">sales_tax[<b>tax_percent</b>] = decimal (##.###)</br>sales_tax[<b>tax_state</b>] = string</br>sales_tax[<b>shipping_inc_in_tax</b>] = bool</br></code></div></div>

        :param sales_tax: The sales_tax of this ProductAdd.
        :type sales_tax: List[str]
        """

        self._sales_tax = sales_tax

    @property
    def search_keywords(self):
        """Gets the search_keywords of this ProductAdd.

        Defines unique search keywords

        :return: The search_keywords of this ProductAdd.
        :rtype: str
        """
        return self._search_keywords

    @search_keywords.setter
    def search_keywords(self, search_keywords):
        """Sets the search_keywords of this ProductAdd.

        Defines unique search keywords

        :param search_keywords: The search_keywords of this ProductAdd.
        :type search_keywords: str
        """

        self._search_keywords = search_keywords

    @property
    def seller_profiles(self):
        """Gets the seller_profiles of this ProductAdd.


        :return: The seller_profiles of this ProductAdd.
        :rtype: ProductAddSellerProfiles
        """
        return self._seller_profiles

    @seller_profiles.setter
    def seller_profiles(self, seller_profiles):
        """Sets the seller_profiles of this ProductAdd.


        :param seller_profiles: The seller_profiles of this ProductAdd.
        :type seller_profiles: ProductAddSellerProfiles
        """

        self._seller_profiles = seller_profiles

    @property
    def seo_url(self):
        """Gets the seo_url of this ProductAdd.

        Defines unique URL for SEO

        :return: The seo_url of this ProductAdd.
        :rtype: str
        """
        return self._seo_url

    @seo_url.setter
    def seo_url(self, seo_url):
        """Sets the seo_url of this ProductAdd.

        Defines unique URL for SEO

        :param seo_url: The seo_url of this ProductAdd.
        :type seo_url: str
        """

        self._seo_url = seo_url

    @property
    def shipping_details(self):
        """Gets the shipping_details of this ProductAdd.

        The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>

        :return: The shipping_details of this ProductAdd.
        :rtype: List[ProductAddShippingDetailsInner]
        """
        return self._shipping_details

    @shipping_details.setter
    def shipping_details(self, shipping_details):
        """Sets the shipping_details of this ProductAdd.

        The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.<hr><div style=\"font-style:normal\">Param structure:<div style=\"margin-left: 2%;\"><code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">shipping_details[0][<b>shipping_type</b>] = string </br>shipping_details[0][<b>shipping_service</b>] = string</br>shipping_details[0][<b>shipping_cost</b>] = decimal</br>shipping_details[1][<b>shipping_type</b>] = string </br>shipping_details[1][<b>shipping_service</b>] = string</br>shipping_details[1][<b>shipping_cost</b>] = decimal</br></code></div></div>

        :param shipping_details: The shipping_details of this ProductAdd.
        :type shipping_details: List[ProductAddShippingDetailsInner]
        """

        self._shipping_details = shipping_details

    @property
    def shipping_template_id(self):
        """Gets the shipping_template_id of this ProductAdd.

        The numeric ID of the shipping template associated with the products in Etsy.

        :return: The shipping_template_id of this ProductAdd.
        :rtype: int
        """
        return self._shipping_template_id

    @shipping_template_id.setter
    def shipping_template_id(self, shipping_template_id):
        """Sets the shipping_template_id of this ProductAdd.

        The numeric ID of the shipping template associated with the products in Etsy.

        :param shipping_template_id: The shipping_template_id of this ProductAdd.
        :type shipping_template_id: int
        """

        self._shipping_template_id = shipping_template_id

    @property
    def short_description(self):
        """Gets the short_description of this ProductAdd.

        Defines short description

        :return: The short_description of this ProductAdd.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductAdd.

        Defines short description

        :param short_description: The short_description of this ProductAdd.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def sku(self):
        """Gets the sku of this ProductAdd.

        Defines product's sku that has to be added

        :return: The sku of this ProductAdd.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductAdd.

        Defines product's sku that has to be added

        :param sku: The sku of this ProductAdd.
        :type sku: str
        """

        self._sku = sku

    @property
    def special_price(self):
        """Gets the special_price of this ProductAdd.

        Defines product's model that has to be added

        :return: The special_price of this ProductAdd.
        :rtype: float
        """
        return self._special_price

    @special_price.setter
    def special_price(self, special_price):
        """Sets the special_price of this ProductAdd.

        Defines product's model that has to be added

        :param special_price: The special_price of this ProductAdd.
        :type special_price: float
        """

        self._special_price = special_price

    @property
    def specifics(self):
        """Gets the specifics of this ProductAdd.

        An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         <hr>         <div style=\"font-style:normal\">Param structure:           <div style=\"margin-left: 2%;\">             <code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">               specifics[int][<b>name</b>] = string</br>               specifics[int][<b>value</b>] = string</br>             </code>           </div>         </div>

        :return: The specifics of this ProductAdd.
        :rtype: List[str]
        """
        return self._specifics

    @specifics.setter
    def specifics(self, specifics):
        """Sets the specifics of this ProductAdd.

        An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         <hr>         <div style=\"font-style:normal\">Param structure:           <div style=\"margin-left: 2%;\">             <code style=\"padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\">               specifics[int][<b>name</b>] = string</br>               specifics[int][<b>value</b>] = string</br>             </code>           </div>         </div>

        :param specifics: The specifics of this ProductAdd.
        :type specifics: List[str]
        """

        self._specifics = specifics

    @property
    def sprice_create(self):
        """Gets the sprice_create of this ProductAdd.

        Defines the date of special price creation

        :return: The sprice_create of this ProductAdd.
        :rtype: str
        """
        return self._sprice_create

    @sprice_create.setter
    def sprice_create(self, sprice_create):
        """Sets the sprice_create of this ProductAdd.

        Defines the date of special price creation

        :param sprice_create: The sprice_create of this ProductAdd.
        :type sprice_create: str
        """

        self._sprice_create = sprice_create

    @property
    def sprice_expire(self):
        """Gets the sprice_expire of this ProductAdd.

        Defines the term of special price offer duration

        :return: The sprice_expire of this ProductAdd.
        :rtype: str
        """
        return self._sprice_expire

    @sprice_expire.setter
    def sprice_expire(self, sprice_expire):
        """Sets the sprice_expire of this ProductAdd.

        Defines the term of special price offer duration

        :param sprice_expire: The sprice_expire of this ProductAdd.
        :type sprice_expire: str
        """

        self._sprice_expire = sprice_expire

    @property
    def sprice_modified(self):
        """Gets the sprice_modified of this ProductAdd.

        Defines the date of special price modification

        :return: The sprice_modified of this ProductAdd.
        :rtype: str
        """
        return self._sprice_modified

    @sprice_modified.setter
    def sprice_modified(self, sprice_modified):
        """Sets the sprice_modified of this ProductAdd.

        Defines the date of special price modification

        :param sprice_modified: The sprice_modified of this ProductAdd.
        :type sprice_modified: str
        """

        self._sprice_modified = sprice_modified

    @property
    def status(self):
        """Gets the status of this ProductAdd.

        Defines product's status

        :return: The status of this ProductAdd.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductAdd.

        Defines product's status

        :param status: The status of this ProductAdd.
        :type status: str
        """

        self._status = status

    @property
    def store_id(self):
        """Gets the store_id of this ProductAdd.

        Store Id

        :return: The store_id of this ProductAdd.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ProductAdd.

        Store Id

        :param store_id: The store_id of this ProductAdd.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def stores_ids(self):
        """Gets the stores_ids of this ProductAdd.

        Assign product to the stores that is specified by comma-separated stores' id

        :return: The stores_ids of this ProductAdd.
        :rtype: str
        """
        return self._stores_ids

    @stores_ids.setter
    def stores_ids(self, stores_ids):
        """Sets the stores_ids of this ProductAdd.

        Assign product to the stores that is specified by comma-separated stores' id

        :param stores_ids: The stores_ids of this ProductAdd.
        :type stores_ids: str
        """

        self._stores_ids = stores_ids

    @property
    def tags(self):
        """Gets the tags of this ProductAdd.

        Product tags

        :return: The tags of this ProductAdd.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProductAdd.

        Product tags

        :param tags: The tags of this ProductAdd.
        :type tags: str
        """

        self._tags = tags

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this ProductAdd.

        Defines tax classes where entity has to be added

        :return: The tax_class_id of this ProductAdd.
        :rtype: str
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this ProductAdd.

        Defines tax classes where entity has to be added

        :param tax_class_id: The tax_class_id of this ProductAdd.
        :type tax_class_id: str
        """

        self._tax_class_id = tax_class_id

    @property
    def taxable(self):
        """Gets the taxable of this ProductAdd.

        Specifies whether a tax is charged

        :return: The taxable of this ProductAdd.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this ProductAdd.

        Specifies whether a tax is charged

        :param taxable: The taxable of this ProductAdd.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def tier_prices(self):
        """Gets the tier_prices of this ProductAdd.

        Defines product's tier prices

        :return: The tier_prices of this ProductAdd.
        :rtype: List[ProductAddTierPricesInner]
        """
        return self._tier_prices

    @tier_prices.setter
    def tier_prices(self, tier_prices):
        """Sets the tier_prices of this ProductAdd.

        Defines product's tier prices

        :param tier_prices: The tier_prices of this ProductAdd.
        :type tier_prices: List[ProductAddTierPricesInner]
        """

        self._tier_prices = tier_prices

    @property
    def type(self):
        """Gets the type of this ProductAdd.

        Defines product's type

        :return: The type of this ProductAdd.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductAdd.

        Defines product's type

        :param type: The type of this ProductAdd.
        :type type: str
        """

        self._type = type

    @property
    def upc(self):
        """Gets the upc of this ProductAdd.

        Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.

        :return: The upc of this ProductAdd.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this ProductAdd.

        Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.

        :param upc: The upc of this ProductAdd.
        :type upc: str
        """

        self._upc = upc

    @property
    def url(self):
        """Gets the url of this ProductAdd.

        Defines unique product's URL

        :return: The url of this ProductAdd.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductAdd.

        Defines unique product's URL

        :param url: The url of this ProductAdd.
        :type url: str
        """

        self._url = url

    @property
    def viewed_count(self):
        """Gets the viewed_count of this ProductAdd.

        Specifies the number of product's reviews

        :return: The viewed_count of this ProductAdd.
        :rtype: int
        """
        return self._viewed_count

    @viewed_count.setter
    def viewed_count(self, viewed_count):
        """Sets the viewed_count of this ProductAdd.

        Specifies the number of product's reviews

        :param viewed_count: The viewed_count of this ProductAdd.
        :type viewed_count: int
        """

        self._viewed_count = viewed_count

    @property
    def visible(self):
        """Gets the visible of this ProductAdd.

        Set visibility status

        :return: The visible of this ProductAdd.
        :rtype: str
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ProductAdd.

        Set visibility status

        :param visible: The visible of this ProductAdd.
        :type visible: str
        """

        self._visible = visible

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ProductAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :return: The warehouse_id of this ProductAdd.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ProductAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :param warehouse_id: The warehouse_id of this ProductAdd.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id

    @property
    def weight(self):
        """Gets the weight of this ProductAdd.

        Weight

        :return: The weight of this ProductAdd.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProductAdd.

        Weight

        :param weight: The weight of this ProductAdd.
        :type weight: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this ProductAdd.

        Weight Unit

        :return: The weight_unit of this ProductAdd.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this ProductAdd.

        Weight Unit

        :param weight_unit: The weight_unit of this ProductAdd.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit

    @property
    def wholesale_price(self):
        """Gets the wholesale_price of this ProductAdd.

        Defines product's sale price

        :return: The wholesale_price of this ProductAdd.
        :rtype: float
        """
        return self._wholesale_price

    @wholesale_price.setter
    def wholesale_price(self, wholesale_price):
        """Sets the wholesale_price of this ProductAdd.

        Defines product's sale price

        :param wholesale_price: The wholesale_price of this ProductAdd.
        :type wholesale_price: float
        """

        self._wholesale_price = wholesale_price

    @property
    def width(self):
        """Gets the width of this ProductAdd.

        Defines product's width

        :return: The width of this ProductAdd.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ProductAdd.

        Defines product's width

        :param width: The width of this ProductAdd.
        :type width: float
        """

        self._width = width
