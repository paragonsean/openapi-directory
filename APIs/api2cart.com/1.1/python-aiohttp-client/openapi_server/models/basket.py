# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.a2_c_date_time import A2CDateTime
from openapi_server.models.base_customer import BaseCustomer
from openapi_server.models.basket_item import BasketItem
from openapi_server.models.currency import Currency
from openapi_server import util


class Basket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, basket_products: List[BasketItem]=None, basket_url: str=None, created_at: A2CDateTime=None, currency: Currency=None, custom_fields: object=None, customer: BaseCustomer=None, id: str=None, modified_at: A2CDateTime=None):
        """Basket - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this Basket.
        :param basket_products: The basket_products of this Basket.
        :param basket_url: The basket_url of this Basket.
        :param created_at: The created_at of this Basket.
        :param currency: The currency of this Basket.
        :param custom_fields: The custom_fields of this Basket.
        :param customer: The customer of this Basket.
        :param id: The id of this Basket.
        :param modified_at: The modified_at of this Basket.
        """
        self.openapi_types = {
            'additional_fields': object,
            'basket_products': List[BasketItem],
            'basket_url': str,
            'created_at': A2CDateTime,
            'currency': Currency,
            'custom_fields': object,
            'customer': BaseCustomer,
            'id': str,
            'modified_at': A2CDateTime
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'basket_products': 'basket_products',
            'basket_url': 'basket_url',
            'created_at': 'created_at',
            'currency': 'currency',
            'custom_fields': 'custom_fields',
            'customer': 'customer',
            'id': 'id',
            'modified_at': 'modified_at'
        }

        self._additional_fields = additional_fields
        self._basket_products = basket_products
        self._basket_url = basket_url
        self._created_at = created_at
        self._currency = currency
        self._custom_fields = custom_fields
        self._customer = customer
        self._id = id
        self._modified_at = modified_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Basket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Basket of this Basket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Basket.


        :return: The additional_fields of this Basket.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Basket.


        :param additional_fields: The additional_fields of this Basket.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def basket_products(self):
        """Gets the basket_products of this Basket.


        :return: The basket_products of this Basket.
        :rtype: List[BasketItem]
        """
        return self._basket_products

    @basket_products.setter
    def basket_products(self, basket_products):
        """Sets the basket_products of this Basket.


        :param basket_products: The basket_products of this Basket.
        :type basket_products: List[BasketItem]
        """

        self._basket_products = basket_products

    @property
    def basket_url(self):
        """Gets the basket_url of this Basket.


        :return: The basket_url of this Basket.
        :rtype: str
        """
        return self._basket_url

    @basket_url.setter
    def basket_url(self, basket_url):
        """Sets the basket_url of this Basket.


        :param basket_url: The basket_url of this Basket.
        :type basket_url: str
        """

        self._basket_url = basket_url

    @property
    def created_at(self):
        """Gets the created_at of this Basket.


        :return: The created_at of this Basket.
        :rtype: A2CDateTime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Basket.


        :param created_at: The created_at of this Basket.
        :type created_at: A2CDateTime
        """

        self._created_at = created_at

    @property
    def currency(self):
        """Gets the currency of this Basket.


        :return: The currency of this Basket.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Basket.


        :param currency: The currency of this Basket.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Basket.


        :return: The custom_fields of this Basket.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Basket.


        :param custom_fields: The custom_fields of this Basket.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer(self):
        """Gets the customer of this Basket.


        :return: The customer of this Basket.
        :rtype: BaseCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Basket.


        :param customer: The customer of this Basket.
        :type customer: BaseCustomer
        """

        self._customer = customer

    @property
    def id(self):
        """Gets the id of this Basket.


        :return: The id of this Basket.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Basket.


        :param id: The id of this Basket.
        :type id: str
        """

        self._id = id

    @property
    def modified_at(self):
        """Gets the modified_at of this Basket.


        :return: The modified_at of this Basket.
        :rtype: A2CDateTime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Basket.


        :param modified_at: The modified_at of this Basket.
        :type modified_at: A2CDateTime
        """

        self._modified_at = modified_at
