# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BaseCustomer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, email: str=None, first_name: str=None, id: str=None, last_name: str=None, phone: str=None):
        """BaseCustomer - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this BaseCustomer.
        :param custom_fields: The custom_fields of this BaseCustomer.
        :param email: The email of this BaseCustomer.
        :param first_name: The first_name of this BaseCustomer.
        :param id: The id of this BaseCustomer.
        :param last_name: The last_name of this BaseCustomer.
        :param phone: The phone of this BaseCustomer.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'email': str,
            'first_name': str,
            'id': str,
            'last_name': str,
            'phone': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'email': 'email',
            'first_name': 'first_name',
            'id': 'id',
            'last_name': 'last_name',
            'phone': 'phone'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BaseCustomer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BaseCustomer of this BaseCustomer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this BaseCustomer.


        :return: The additional_fields of this BaseCustomer.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this BaseCustomer.


        :param additional_fields: The additional_fields of this BaseCustomer.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BaseCustomer.


        :return: The custom_fields of this BaseCustomer.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BaseCustomer.


        :param custom_fields: The custom_fields of this BaseCustomer.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def email(self):
        """Gets the email of this BaseCustomer.


        :return: The email of this BaseCustomer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BaseCustomer.


        :param email: The email of this BaseCustomer.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this BaseCustomer.


        :return: The first_name of this BaseCustomer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this BaseCustomer.


        :param first_name: The first_name of this BaseCustomer.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this BaseCustomer.


        :return: The id of this BaseCustomer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseCustomer.


        :param id: The id of this BaseCustomer.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this BaseCustomer.


        :return: The last_name of this BaseCustomer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this BaseCustomer.


        :param last_name: The last_name of this BaseCustomer.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this BaseCustomer.


        :return: The phone of this BaseCustomer.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this BaseCustomer.


        :param phone: The phone of this BaseCustomer.
        :type phone: str
        """

        self._phone = phone
