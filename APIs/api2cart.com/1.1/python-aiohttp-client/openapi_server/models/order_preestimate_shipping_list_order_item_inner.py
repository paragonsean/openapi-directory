# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_preestimate_shipping_list_order_item_inner_order_item_option_inner import OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner
from openapi_server import util


class OrderPreestimateShippingListOrderItemInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order_item_id: str=None, order_item_model: str=None, order_item_option: List[OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner]=None, order_item_quantity: int=None, order_item_variant_id: str=None, order_item_weight: float=None):
        """OrderPreestimateShippingListOrderItemInner - a model defined in OpenAPI

        :param order_item_id: The order_item_id of this OrderPreestimateShippingListOrderItemInner.
        :param order_item_model: The order_item_model of this OrderPreestimateShippingListOrderItemInner.
        :param order_item_option: The order_item_option of this OrderPreestimateShippingListOrderItemInner.
        :param order_item_quantity: The order_item_quantity of this OrderPreestimateShippingListOrderItemInner.
        :param order_item_variant_id: The order_item_variant_id of this OrderPreestimateShippingListOrderItemInner.
        :param order_item_weight: The order_item_weight of this OrderPreestimateShippingListOrderItemInner.
        """
        self.openapi_types = {
            'order_item_id': str,
            'order_item_model': str,
            'order_item_option': List[OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner],
            'order_item_quantity': int,
            'order_item_variant_id': str,
            'order_item_weight': float
        }

        self.attribute_map = {
            'order_item_id': 'order_item_id',
            'order_item_model': 'order_item_model',
            'order_item_option': 'order_item_option',
            'order_item_quantity': 'order_item_quantity',
            'order_item_variant_id': 'order_item_variant_id',
            'order_item_weight': 'order_item_weight'
        }

        self._order_item_id = order_item_id
        self._order_item_model = order_item_model
        self._order_item_option = order_item_option
        self._order_item_quantity = order_item_quantity
        self._order_item_variant_id = order_item_variant_id
        self._order_item_weight = order_item_weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderPreestimateShippingListOrderItemInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderPreestimateShippingList_order_item_inner of this OrderPreestimateShippingListOrderItemInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_item_id(self):
        """Gets the order_item_id of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item id

        :return: The order_item_id of this OrderPreestimateShippingListOrderItemInner.
        :rtype: str
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item id

        :param order_item_id: The order_item_id of this OrderPreestimateShippingListOrderItemInner.
        :type order_item_id: str
        """
        if order_item_id is None:
            raise ValueError("Invalid value for `order_item_id`, must not be `None`")

        self._order_item_id = order_item_id

    @property
    def order_item_model(self):
        """Gets the order_item_model of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item model

        :return: The order_item_model of this OrderPreestimateShippingListOrderItemInner.
        :rtype: str
        """
        return self._order_item_model

    @order_item_model.setter
    def order_item_model(self, order_item_model):
        """Sets the order_item_model of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item model

        :param order_item_model: The order_item_model of this OrderPreestimateShippingListOrderItemInner.
        :type order_item_model: str
        """

        self._order_item_model = order_item_model

    @property
    def order_item_option(self):
        """Gets the order_item_option of this OrderPreestimateShippingListOrderItemInner.


        :return: The order_item_option of this OrderPreestimateShippingListOrderItemInner.
        :rtype: List[OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner]
        """
        return self._order_item_option

    @order_item_option.setter
    def order_item_option(self, order_item_option):
        """Sets the order_item_option of this OrderPreestimateShippingListOrderItemInner.


        :param order_item_option: The order_item_option of this OrderPreestimateShippingListOrderItemInner.
        :type order_item_option: List[OrderPreestimateShippingListOrderItemInnerOrderItemOptionInner]
        """

        self._order_item_option = order_item_option

    @property
    def order_item_quantity(self):
        """Gets the order_item_quantity of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item quantity

        :return: The order_item_quantity of this OrderPreestimateShippingListOrderItemInner.
        :rtype: int
        """
        return self._order_item_quantity

    @order_item_quantity.setter
    def order_item_quantity(self, order_item_quantity):
        """Sets the order_item_quantity of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item quantity

        :param order_item_quantity: The order_item_quantity of this OrderPreestimateShippingListOrderItemInner.
        :type order_item_quantity: int
        """
        if order_item_quantity is None:
            raise ValueError("Invalid value for `order_item_quantity`, must not be `None`")

        self._order_item_quantity = order_item_quantity

    @property
    def order_item_variant_id(self):
        """Gets the order_item_variant_id of this OrderPreestimateShippingListOrderItemInner.

        Ordered product variant. Where x is order item ID

        :return: The order_item_variant_id of this OrderPreestimateShippingListOrderItemInner.
        :rtype: str
        """
        return self._order_item_variant_id

    @order_item_variant_id.setter
    def order_item_variant_id(self, order_item_variant_id):
        """Sets the order_item_variant_id of this OrderPreestimateShippingListOrderItemInner.

        Ordered product variant. Where x is order item ID

        :param order_item_variant_id: The order_item_variant_id of this OrderPreestimateShippingListOrderItemInner.
        :type order_item_variant_id: str
        """

        self._order_item_variant_id = order_item_variant_id

    @property
    def order_item_weight(self):
        """Gets the order_item_weight of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item weight

        :return: The order_item_weight of this OrderPreestimateShippingListOrderItemInner.
        :rtype: float
        """
        return self._order_item_weight

    @order_item_weight.setter
    def order_item_weight(self, order_item_weight):
        """Sets the order_item_weight of this OrderPreestimateShippingListOrderItemInner.

        Defines orders specified by order item weight

        :param order_item_weight: The order_item_weight of this OrderPreestimateShippingListOrderItemInner.
        :type order_item_weight: float
        """

        self._order_item_weight = order_item_weight
