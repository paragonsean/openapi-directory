# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountCartAddHybrisWebsitesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, store_ids: List[str]=None, uid: str=None, url: str=None):
        """AccountCartAddHybrisWebsitesInner - a model defined in OpenAPI

        :param store_ids: The store_ids of this AccountCartAddHybrisWebsitesInner.
        :param uid: The uid of this AccountCartAddHybrisWebsitesInner.
        :param url: The url of this AccountCartAddHybrisWebsitesInner.
        """
        self.openapi_types = {
            'store_ids': List[str],
            'uid': str,
            'url': str
        }

        self.attribute_map = {
            'store_ids': 'storeIds',
            'uid': 'uid',
            'url': 'url'
        }

        self._store_ids = store_ids
        self._uid = uid
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountCartAddHybrisWebsitesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountCartAdd_hybris_websites_inner of this AccountCartAddHybrisWebsitesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def store_ids(self):
        """Gets the store_ids of this AccountCartAddHybrisWebsitesInner.


        :return: The store_ids of this AccountCartAddHybrisWebsitesInner.
        :rtype: List[str]
        """
        return self._store_ids

    @store_ids.setter
    def store_ids(self, store_ids):
        """Sets the store_ids of this AccountCartAddHybrisWebsitesInner.


        :param store_ids: The store_ids of this AccountCartAddHybrisWebsitesInner.
        :type store_ids: List[str]
        """
        if store_ids is None:
            raise ValueError("Invalid value for `store_ids`, must not be `None`")
        if store_ids is not None and len(store_ids) < 1:
            raise ValueError("Invalid value for `store_ids`, number of items must be greater than or equal to `1`")

        self._store_ids = store_ids

    @property
    def uid(self):
        """Gets the uid of this AccountCartAddHybrisWebsitesInner.


        :return: The uid of this AccountCartAddHybrisWebsitesInner.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this AccountCartAddHybrisWebsitesInner.


        :param uid: The uid of this AccountCartAddHybrisWebsitesInner.
        :type uid: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")

        self._uid = uid

    @property
    def url(self):
        """Gets the url of this AccountCartAddHybrisWebsitesInner.


        :return: The url of this AccountCartAddHybrisWebsitesInner.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AccountCartAddHybrisWebsitesInner.


        :param url: The url of this AccountCartAddHybrisWebsitesInner.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
