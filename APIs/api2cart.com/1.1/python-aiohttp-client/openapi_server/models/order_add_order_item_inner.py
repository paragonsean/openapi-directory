# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_add_order_item_inner_order_item_option_inner import OrderAddOrderItemInnerOrderItemOptionInner
from openapi_server.models.order_add_order_item_inner_order_item_property_inner import OrderAddOrderItemInnerOrderItemPropertyInner
from openapi_server import util


class OrderAddOrderItemInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order_item_allow_refund_items_separately: bool=None, order_item_allow_ship_items_separately: bool=None, order_item_id: str=None, order_item_model: str=None, order_item_name: str=None, order_item_option: List[OrderAddOrderItemInnerOrderItemOptionInner]=None, order_item_parent: int=None, order_item_parent_option_name: str=None, order_item_price: float=None, order_item_price_includes_tax: bool=False, order_item_property: List[OrderAddOrderItemInnerOrderItemPropertyInner]=None, order_item_quantity: int=None, order_item_tax: float=0, order_item_variant_id: str=None, order_item_weight: float=None):
        """OrderAddOrderItemInner - a model defined in OpenAPI

        :param order_item_allow_refund_items_separately: The order_item_allow_refund_items_separately of this OrderAddOrderItemInner.
        :param order_item_allow_ship_items_separately: The order_item_allow_ship_items_separately of this OrderAddOrderItemInner.
        :param order_item_id: The order_item_id of this OrderAddOrderItemInner.
        :param order_item_model: The order_item_model of this OrderAddOrderItemInner.
        :param order_item_name: The order_item_name of this OrderAddOrderItemInner.
        :param order_item_option: The order_item_option of this OrderAddOrderItemInner.
        :param order_item_parent: The order_item_parent of this OrderAddOrderItemInner.
        :param order_item_parent_option_name: The order_item_parent_option_name of this OrderAddOrderItemInner.
        :param order_item_price: The order_item_price of this OrderAddOrderItemInner.
        :param order_item_price_includes_tax: The order_item_price_includes_tax of this OrderAddOrderItemInner.
        :param order_item_property: The order_item_property of this OrderAddOrderItemInner.
        :param order_item_quantity: The order_item_quantity of this OrderAddOrderItemInner.
        :param order_item_tax: The order_item_tax of this OrderAddOrderItemInner.
        :param order_item_variant_id: The order_item_variant_id of this OrderAddOrderItemInner.
        :param order_item_weight: The order_item_weight of this OrderAddOrderItemInner.
        """
        self.openapi_types = {
            'order_item_allow_refund_items_separately': bool,
            'order_item_allow_ship_items_separately': bool,
            'order_item_id': str,
            'order_item_model': str,
            'order_item_name': str,
            'order_item_option': List[OrderAddOrderItemInnerOrderItemOptionInner],
            'order_item_parent': int,
            'order_item_parent_option_name': str,
            'order_item_price': float,
            'order_item_price_includes_tax': bool,
            'order_item_property': List[OrderAddOrderItemInnerOrderItemPropertyInner],
            'order_item_quantity': int,
            'order_item_tax': float,
            'order_item_variant_id': str,
            'order_item_weight': float
        }

        self.attribute_map = {
            'order_item_allow_refund_items_separately': 'order_item_allow_refund_items_separately',
            'order_item_allow_ship_items_separately': 'order_item_allow_ship_items_separately',
            'order_item_id': 'order_item_id',
            'order_item_model': 'order_item_model',
            'order_item_name': 'order_item_name',
            'order_item_option': 'order_item_option',
            'order_item_parent': 'order_item_parent',
            'order_item_parent_option_name': 'order_item_parent_option_name',
            'order_item_price': 'order_item_price',
            'order_item_price_includes_tax': 'order_item_price_includes_tax',
            'order_item_property': 'order_item_property',
            'order_item_quantity': 'order_item_quantity',
            'order_item_tax': 'order_item_tax',
            'order_item_variant_id': 'order_item_variant_id',
            'order_item_weight': 'order_item_weight'
        }

        self._order_item_allow_refund_items_separately = order_item_allow_refund_items_separately
        self._order_item_allow_ship_items_separately = order_item_allow_ship_items_separately
        self._order_item_id = order_item_id
        self._order_item_model = order_item_model
        self._order_item_name = order_item_name
        self._order_item_option = order_item_option
        self._order_item_parent = order_item_parent
        self._order_item_parent_option_name = order_item_parent_option_name
        self._order_item_price = order_item_price
        self._order_item_price_includes_tax = order_item_price_includes_tax
        self._order_item_property = order_item_property
        self._order_item_quantity = order_item_quantity
        self._order_item_tax = order_item_tax
        self._order_item_variant_id = order_item_variant_id
        self._order_item_weight = order_item_weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderAddOrderItemInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderAdd_order_item_inner of this OrderAddOrderItemInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_item_allow_refund_items_separately(self):
        """Gets the order_item_allow_refund_items_separately of this OrderAddOrderItemInner.

        Indicates whether subitems of the grouped/bundle product can be refunded separately

        :return: The order_item_allow_refund_items_separately of this OrderAddOrderItemInner.
        :rtype: bool
        """
        return self._order_item_allow_refund_items_separately

    @order_item_allow_refund_items_separately.setter
    def order_item_allow_refund_items_separately(self, order_item_allow_refund_items_separately):
        """Sets the order_item_allow_refund_items_separately of this OrderAddOrderItemInner.

        Indicates whether subitems of the grouped/bundle product can be refunded separately

        :param order_item_allow_refund_items_separately: The order_item_allow_refund_items_separately of this OrderAddOrderItemInner.
        :type order_item_allow_refund_items_separately: bool
        """

        self._order_item_allow_refund_items_separately = order_item_allow_refund_items_separately

    @property
    def order_item_allow_ship_items_separately(self):
        """Gets the order_item_allow_ship_items_separately of this OrderAddOrderItemInner.

        Indicates whether subitems of the grouped/bundle product can be shipped separately

        :return: The order_item_allow_ship_items_separately of this OrderAddOrderItemInner.
        :rtype: bool
        """
        return self._order_item_allow_ship_items_separately

    @order_item_allow_ship_items_separately.setter
    def order_item_allow_ship_items_separately(self, order_item_allow_ship_items_separately):
        """Sets the order_item_allow_ship_items_separately of this OrderAddOrderItemInner.

        Indicates whether subitems of the grouped/bundle product can be shipped separately

        :param order_item_allow_ship_items_separately: The order_item_allow_ship_items_separately of this OrderAddOrderItemInner.
        :type order_item_allow_ship_items_separately: bool
        """

        self._order_item_allow_ship_items_separately = order_item_allow_ship_items_separately

    @property
    def order_item_id(self):
        """Gets the order_item_id of this OrderAddOrderItemInner.

        Defines orders specified by order item id

        :return: The order_item_id of this OrderAddOrderItemInner.
        :rtype: str
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this OrderAddOrderItemInner.

        Defines orders specified by order item id

        :param order_item_id: The order_item_id of this OrderAddOrderItemInner.
        :type order_item_id: str
        """
        if order_item_id is None:
            raise ValueError("Invalid value for `order_item_id`, must not be `None`")

        self._order_item_id = order_item_id

    @property
    def order_item_model(self):
        """Gets the order_item_model of this OrderAddOrderItemInner.

        Defines orders specified by order item model

        :return: The order_item_model of this OrderAddOrderItemInner.
        :rtype: str
        """
        return self._order_item_model

    @order_item_model.setter
    def order_item_model(self, order_item_model):
        """Sets the order_item_model of this OrderAddOrderItemInner.

        Defines orders specified by order item model

        :param order_item_model: The order_item_model of this OrderAddOrderItemInner.
        :type order_item_model: str
        """

        self._order_item_model = order_item_model

    @property
    def order_item_name(self):
        """Gets the order_item_name of this OrderAddOrderItemInner.

        Defines orders specified by order item name

        :return: The order_item_name of this OrderAddOrderItemInner.
        :rtype: str
        """
        return self._order_item_name

    @order_item_name.setter
    def order_item_name(self, order_item_name):
        """Sets the order_item_name of this OrderAddOrderItemInner.

        Defines orders specified by order item name

        :param order_item_name: The order_item_name of this OrderAddOrderItemInner.
        :type order_item_name: str
        """
        if order_item_name is None:
            raise ValueError("Invalid value for `order_item_name`, must not be `None`")

        self._order_item_name = order_item_name

    @property
    def order_item_option(self):
        """Gets the order_item_option of this OrderAddOrderItemInner.


        :return: The order_item_option of this OrderAddOrderItemInner.
        :rtype: List[OrderAddOrderItemInnerOrderItemOptionInner]
        """
        return self._order_item_option

    @order_item_option.setter
    def order_item_option(self, order_item_option):
        """Sets the order_item_option of this OrderAddOrderItemInner.


        :param order_item_option: The order_item_option of this OrderAddOrderItemInner.
        :type order_item_option: List[OrderAddOrderItemInnerOrderItemOptionInner]
        """

        self._order_item_option = order_item_option

    @property
    def order_item_parent(self):
        """Gets the order_item_parent of this OrderAddOrderItemInner.

        Index of the parent grouped/bundle product

        :return: The order_item_parent of this OrderAddOrderItemInner.
        :rtype: int
        """
        return self._order_item_parent

    @order_item_parent.setter
    def order_item_parent(self, order_item_parent):
        """Sets the order_item_parent of this OrderAddOrderItemInner.

        Index of the parent grouped/bundle product

        :param order_item_parent: The order_item_parent of this OrderAddOrderItemInner.
        :type order_item_parent: int
        """

        self._order_item_parent = order_item_parent

    @property
    def order_item_parent_option_name(self):
        """Gets the order_item_parent_option_name of this OrderAddOrderItemInner.

        Option name of the parent grouped/bundle product

        :return: The order_item_parent_option_name of this OrderAddOrderItemInner.
        :rtype: str
        """
        return self._order_item_parent_option_name

    @order_item_parent_option_name.setter
    def order_item_parent_option_name(self, order_item_parent_option_name):
        """Sets the order_item_parent_option_name of this OrderAddOrderItemInner.

        Option name of the parent grouped/bundle product

        :param order_item_parent_option_name: The order_item_parent_option_name of this OrderAddOrderItemInner.
        :type order_item_parent_option_name: str
        """

        self._order_item_parent_option_name = order_item_parent_option_name

    @property
    def order_item_price(self):
        """Gets the order_item_price of this OrderAddOrderItemInner.

        Defines orders specified by order item price

        :return: The order_item_price of this OrderAddOrderItemInner.
        :rtype: float
        """
        return self._order_item_price

    @order_item_price.setter
    def order_item_price(self, order_item_price):
        """Sets the order_item_price of this OrderAddOrderItemInner.

        Defines orders specified by order item price

        :param order_item_price: The order_item_price of this OrderAddOrderItemInner.
        :type order_item_price: float
        """
        if order_item_price is None:
            raise ValueError("Invalid value for `order_item_price`, must not be `None`")

        self._order_item_price = order_item_price

    @property
    def order_item_price_includes_tax(self):
        """Gets the order_item_price_includes_tax of this OrderAddOrderItemInner.

        Defines if item price includes tax

        :return: The order_item_price_includes_tax of this OrderAddOrderItemInner.
        :rtype: bool
        """
        return self._order_item_price_includes_tax

    @order_item_price_includes_tax.setter
    def order_item_price_includes_tax(self, order_item_price_includes_tax):
        """Sets the order_item_price_includes_tax of this OrderAddOrderItemInner.

        Defines if item price includes tax

        :param order_item_price_includes_tax: The order_item_price_includes_tax of this OrderAddOrderItemInner.
        :type order_item_price_includes_tax: bool
        """

        self._order_item_price_includes_tax = order_item_price_includes_tax

    @property
    def order_item_property(self):
        """Gets the order_item_property of this OrderAddOrderItemInner.


        :return: The order_item_property of this OrderAddOrderItemInner.
        :rtype: List[OrderAddOrderItemInnerOrderItemPropertyInner]
        """
        return self._order_item_property

    @order_item_property.setter
    def order_item_property(self, order_item_property):
        """Sets the order_item_property of this OrderAddOrderItemInner.


        :param order_item_property: The order_item_property of this OrderAddOrderItemInner.
        :type order_item_property: List[OrderAddOrderItemInnerOrderItemPropertyInner]
        """

        self._order_item_property = order_item_property

    @property
    def order_item_quantity(self):
        """Gets the order_item_quantity of this OrderAddOrderItemInner.

        Defines orders specified by order item quantity

        :return: The order_item_quantity of this OrderAddOrderItemInner.
        :rtype: int
        """
        return self._order_item_quantity

    @order_item_quantity.setter
    def order_item_quantity(self, order_item_quantity):
        """Sets the order_item_quantity of this OrderAddOrderItemInner.

        Defines orders specified by order item quantity

        :param order_item_quantity: The order_item_quantity of this OrderAddOrderItemInner.
        :type order_item_quantity: int
        """
        if order_item_quantity is None:
            raise ValueError("Invalid value for `order_item_quantity`, must not be `None`")

        self._order_item_quantity = order_item_quantity

    @property
    def order_item_tax(self):
        """Gets the order_item_tax of this OrderAddOrderItemInner.

        Percentage of tax for product order

        :return: The order_item_tax of this OrderAddOrderItemInner.
        :rtype: float
        """
        return self._order_item_tax

    @order_item_tax.setter
    def order_item_tax(self, order_item_tax):
        """Sets the order_item_tax of this OrderAddOrderItemInner.

        Percentage of tax for product order

        :param order_item_tax: The order_item_tax of this OrderAddOrderItemInner.
        :type order_item_tax: float
        """

        self._order_item_tax = order_item_tax

    @property
    def order_item_variant_id(self):
        """Gets the order_item_variant_id of this OrderAddOrderItemInner.

        Ordered product variant. Where x is order item ID

        :return: The order_item_variant_id of this OrderAddOrderItemInner.
        :rtype: str
        """
        return self._order_item_variant_id

    @order_item_variant_id.setter
    def order_item_variant_id(self, order_item_variant_id):
        """Sets the order_item_variant_id of this OrderAddOrderItemInner.

        Ordered product variant. Where x is order item ID

        :param order_item_variant_id: The order_item_variant_id of this OrderAddOrderItemInner.
        :type order_item_variant_id: str
        """

        self._order_item_variant_id = order_item_variant_id

    @property
    def order_item_weight(self):
        """Gets the order_item_weight of this OrderAddOrderItemInner.

        Defines orders specified by order item weight

        :return: The order_item_weight of this OrderAddOrderItemInner.
        :rtype: float
        """
        return self._order_item_weight

    @order_item_weight.setter
    def order_item_weight(self, order_item_weight):
        """Sets the order_item_weight of this OrderAddOrderItemInner.

        Defines orders specified by order item weight

        :param order_item_weight: The order_item_weight of this OrderAddOrderItemInner.
        :type order_item_weight: float
        """

        self._order_item_weight = order_item_weight
