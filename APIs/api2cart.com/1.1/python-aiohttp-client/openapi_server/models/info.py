# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Info(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, city: str=None, country: str=None, custom_fields: object=None, email: str=None, owner: str=None, phone: str=None, state: str=None, state_code: str=None, street_address: str=None, street_address_line_2: str=None, zip_code: str=None):
        """Info - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this Info.
        :param city: The city of this Info.
        :param country: The country of this Info.
        :param custom_fields: The custom_fields of this Info.
        :param email: The email of this Info.
        :param owner: The owner of this Info.
        :param phone: The phone of this Info.
        :param state: The state of this Info.
        :param state_code: The state_code of this Info.
        :param street_address: The street_address of this Info.
        :param street_address_line_2: The street_address_line_2 of this Info.
        :param zip_code: The zip_code of this Info.
        """
        self.openapi_types = {
            'additional_fields': object,
            'city': str,
            'country': str,
            'custom_fields': object,
            'email': str,
            'owner': str,
            'phone': str,
            'state': str,
            'state_code': str,
            'street_address': str,
            'street_address_line_2': str,
            'zip_code': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'city': 'city',
            'country': 'country',
            'custom_fields': 'custom_fields',
            'email': 'email',
            'owner': 'owner',
            'phone': 'phone',
            'state': 'state',
            'state_code': 'state_code',
            'street_address': 'street_address',
            'street_address_line_2': 'street_address_line_2',
            'zip_code': 'zip_code'
        }

        self._additional_fields = additional_fields
        self._city = city
        self._country = country
        self._custom_fields = custom_fields
        self._email = email
        self._owner = owner
        self._phone = phone
        self._state = state
        self._state_code = state_code
        self._street_address = street_address
        self._street_address_line_2 = street_address_line_2
        self._zip_code = zip_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Info':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Info of this Info.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Info.


        :return: The additional_fields of this Info.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Info.


        :param additional_fields: The additional_fields of this Info.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def city(self):
        """Gets the city of this Info.


        :return: The city of this Info.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Info.


        :param city: The city of this Info.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Info.


        :return: The country of this Info.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Info.


        :param country: The country of this Info.
        :type country: str
        """

        self._country = country

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Info.


        :return: The custom_fields of this Info.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Info.


        :param custom_fields: The custom_fields of this Info.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def email(self):
        """Gets the email of this Info.


        :return: The email of this Info.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Info.


        :param email: The email of this Info.
        :type email: str
        """

        self._email = email

    @property
    def owner(self):
        """Gets the owner of this Info.


        :return: The owner of this Info.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Info.


        :param owner: The owner of this Info.
        :type owner: str
        """

        self._owner = owner

    @property
    def phone(self):
        """Gets the phone of this Info.


        :return: The phone of this Info.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Info.


        :param phone: The phone of this Info.
        :type phone: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this Info.


        :return: The state of this Info.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Info.


        :param state: The state of this Info.
        :type state: str
        """

        self._state = state

    @property
    def state_code(self):
        """Gets the state_code of this Info.


        :return: The state_code of this Info.
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Info.


        :param state_code: The state_code of this Info.
        :type state_code: str
        """

        self._state_code = state_code

    @property
    def street_address(self):
        """Gets the street_address of this Info.


        :return: The street_address of this Info.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Info.


        :param street_address: The street_address of this Info.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def street_address_line_2(self):
        """Gets the street_address_line_2 of this Info.


        :return: The street_address_line_2 of this Info.
        :rtype: str
        """
        return self._street_address_line_2

    @street_address_line_2.setter
    def street_address_line_2(self, street_address_line_2):
        """Sets the street_address_line_2 of this Info.


        :param street_address_line_2: The street_address_line_2 of this Info.
        :type street_address_line_2: str
        """

        self._street_address_line_2 = street_address_line_2

    @property
    def zip_code(self):
        """Gets the zip_code of this Info.


        :return: The zip_code of this Info.
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this Info.


        :param zip_code: The zip_code of this Info.
        :type zip_code: str
        """

        self._zip_code = zip_code
