# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CartCouponAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_amount: float=None, action_apply_to: str=None, action_condition_entity: str=None, action_condition_key: str=None, action_condition_operator: str=None, action_condition_value: str=None, action_scope: str=None, action_type: str=None, code: str=None, codes: List[str]=None, date_end: str=None, date_start: str='now', name: str=None, store_id: str=None, usage_limit: int=None, usage_limit_per_customer: int=None):
        """CartCouponAdd - a model defined in OpenAPI

        :param action_amount: The action_amount of this CartCouponAdd.
        :param action_apply_to: The action_apply_to of this CartCouponAdd.
        :param action_condition_entity: The action_condition_entity of this CartCouponAdd.
        :param action_condition_key: The action_condition_key of this CartCouponAdd.
        :param action_condition_operator: The action_condition_operator of this CartCouponAdd.
        :param action_condition_value: The action_condition_value of this CartCouponAdd.
        :param action_scope: The action_scope of this CartCouponAdd.
        :param action_type: The action_type of this CartCouponAdd.
        :param code: The code of this CartCouponAdd.
        :param codes: The codes of this CartCouponAdd.
        :param date_end: The date_end of this CartCouponAdd.
        :param date_start: The date_start of this CartCouponAdd.
        :param name: The name of this CartCouponAdd.
        :param store_id: The store_id of this CartCouponAdd.
        :param usage_limit: The usage_limit of this CartCouponAdd.
        :param usage_limit_per_customer: The usage_limit_per_customer of this CartCouponAdd.
        """
        self.openapi_types = {
            'action_amount': float,
            'action_apply_to': str,
            'action_condition_entity': str,
            'action_condition_key': str,
            'action_condition_operator': str,
            'action_condition_value': str,
            'action_scope': str,
            'action_type': str,
            'code': str,
            'codes': List[str],
            'date_end': str,
            'date_start': str,
            'name': str,
            'store_id': str,
            'usage_limit': int,
            'usage_limit_per_customer': int
        }

        self.attribute_map = {
            'action_amount': 'action_amount',
            'action_apply_to': 'action_apply_to',
            'action_condition_entity': 'action_condition_entity',
            'action_condition_key': 'action_condition_key',
            'action_condition_operator': 'action_condition_operator',
            'action_condition_value': 'action_condition_value',
            'action_scope': 'action_scope',
            'action_type': 'action_type',
            'code': 'code',
            'codes': 'codes',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'name': 'name',
            'store_id': 'store_id',
            'usage_limit': 'usage_limit',
            'usage_limit_per_customer': 'usage_limit_per_customer'
        }

        self._action_amount = action_amount
        self._action_apply_to = action_apply_to
        self._action_condition_entity = action_condition_entity
        self._action_condition_key = action_condition_key
        self._action_condition_operator = action_condition_operator
        self._action_condition_value = action_condition_value
        self._action_scope = action_scope
        self._action_type = action_type
        self._code = code
        self._codes = codes
        self._date_end = date_end
        self._date_start = date_start
        self._name = name
        self._store_id = store_id
        self._usage_limit = usage_limit
        self._usage_limit_per_customer = usage_limit_per_customer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CartCouponAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CartCouponAdd of this CartCouponAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_amount(self):
        """Gets the action_amount of this CartCouponAdd.

        Defines the discount amount value.

        :return: The action_amount of this CartCouponAdd.
        :rtype: float
        """
        return self._action_amount

    @action_amount.setter
    def action_amount(self, action_amount):
        """Sets the action_amount of this CartCouponAdd.

        Defines the discount amount value.

        :param action_amount: The action_amount of this CartCouponAdd.
        :type action_amount: float
        """
        if action_amount is None:
            raise ValueError("Invalid value for `action_amount`, must not be `None`")

        self._action_amount = action_amount

    @property
    def action_apply_to(self):
        """Gets the action_apply_to of this CartCouponAdd.

        Defines where discount should be applied

        :return: The action_apply_to of this CartCouponAdd.
        :rtype: str
        """
        return self._action_apply_to

    @action_apply_to.setter
    def action_apply_to(self, action_apply_to):
        """Sets the action_apply_to of this CartCouponAdd.

        Defines where discount should be applied

        :param action_apply_to: The action_apply_to of this CartCouponAdd.
        :type action_apply_to: str
        """
        allowed_values = ["order_total", "item_price", "shipping"]  # noqa: E501
        if action_apply_to not in allowed_values:
            raise ValueError(
                "Invalid value for `action_apply_to` ({0}), must be one of {1}"
                .format(action_apply_to, allowed_values)
            )

        self._action_apply_to = action_apply_to

    @property
    def action_condition_entity(self):
        """Gets the action_condition_entity of this CartCouponAdd.

        Defines entity for action condition.

        :return: The action_condition_entity of this CartCouponAdd.
        :rtype: str
        """
        return self._action_condition_entity

    @action_condition_entity.setter
    def action_condition_entity(self, action_condition_entity):
        """Sets the action_condition_entity of this CartCouponAdd.

        Defines entity for action condition.

        :param action_condition_entity: The action_condition_entity of this CartCouponAdd.
        :type action_condition_entity: str
        """

        self._action_condition_entity = action_condition_entity

    @property
    def action_condition_key(self):
        """Gets the action_condition_key of this CartCouponAdd.

        Defines entity attribute code for action condition.

        :return: The action_condition_key of this CartCouponAdd.
        :rtype: str
        """
        return self._action_condition_key

    @action_condition_key.setter
    def action_condition_key(self, action_condition_key):
        """Sets the action_condition_key of this CartCouponAdd.

        Defines entity attribute code for action condition.

        :param action_condition_key: The action_condition_key of this CartCouponAdd.
        :type action_condition_key: str
        """

        self._action_condition_key = action_condition_key

    @property
    def action_condition_operator(self):
        """Gets the action_condition_operator of this CartCouponAdd.

        Defines condition operator.

        :return: The action_condition_operator of this CartCouponAdd.
        :rtype: str
        """
        return self._action_condition_operator

    @action_condition_operator.setter
    def action_condition_operator(self, action_condition_operator):
        """Sets the action_condition_operator of this CartCouponAdd.

        Defines condition operator.

        :param action_condition_operator: The action_condition_operator of this CartCouponAdd.
        :type action_condition_operator: str
        """

        self._action_condition_operator = action_condition_operator

    @property
    def action_condition_value(self):
        """Gets the action_condition_value of this CartCouponAdd.

        Defines condition attribute value/s. Can be comma separated string.

        :return: The action_condition_value of this CartCouponAdd.
        :rtype: str
        """
        return self._action_condition_value

    @action_condition_value.setter
    def action_condition_value(self, action_condition_value):
        """Sets the action_condition_value of this CartCouponAdd.

        Defines condition attribute value/s. Can be comma separated string.

        :param action_condition_value: The action_condition_value of this CartCouponAdd.
        :type action_condition_value: str
        """

        self._action_condition_value = action_condition_value

    @property
    def action_scope(self):
        """Gets the action_scope of this CartCouponAdd.

        Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.

        :return: The action_scope of this CartCouponAdd.
        :rtype: str
        """
        return self._action_scope

    @action_scope.setter
    def action_scope(self, action_scope):
        """Sets the action_scope of this CartCouponAdd.

        Specify how discount should be applied. If scope=matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.

        :param action_scope: The action_scope of this CartCouponAdd.
        :type action_scope: str
        """
        allowed_values = ["order", "matching_items"]  # noqa: E501
        if action_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `action_scope` ({0}), must be one of {1}"
                .format(action_scope, allowed_values)
            )

        self._action_scope = action_scope

    @property
    def action_type(self):
        """Gets the action_type of this CartCouponAdd.

        Coupon discount type

        :return: The action_type of this CartCouponAdd.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this CartCouponAdd.

        Coupon discount type

        :param action_type: The action_type of this CartCouponAdd.
        :type action_type: str
        """
        allowed_values = ["percent", "fixed"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def code(self):
        """Gets the code of this CartCouponAdd.

        Coupon code

        :return: The code of this CartCouponAdd.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CartCouponAdd.

        Coupon code

        :param code: The code of this CartCouponAdd.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def codes(self):
        """Gets the codes of this CartCouponAdd.

        Entity codes

        :return: The codes of this CartCouponAdd.
        :rtype: List[str]
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this CartCouponAdd.

        Entity codes

        :param codes: The codes of this CartCouponAdd.
        :type codes: List[str]
        """

        self._codes = codes

    @property
    def date_end(self):
        """Gets the date_end of this CartCouponAdd.

        Defines when discount code will be expired.

        :return: The date_end of this CartCouponAdd.
        :rtype: str
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CartCouponAdd.

        Defines when discount code will be expired.

        :param date_end: The date_end of this CartCouponAdd.
        :type date_end: str
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this CartCouponAdd.

        Defines when discount code will be available.

        :return: The date_start of this CartCouponAdd.
        :rtype: str
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CartCouponAdd.

        Defines when discount code will be available.

        :param date_start: The date_start of this CartCouponAdd.
        :type date_start: str
        """

        self._date_start = date_start

    @property
    def name(self):
        """Gets the name of this CartCouponAdd.

        Coupon name

        :return: The name of this CartCouponAdd.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CartCouponAdd.

        Coupon name

        :param name: The name of this CartCouponAdd.
        :type name: str
        """

        self._name = name

    @property
    def store_id(self):
        """Gets the store_id of this CartCouponAdd.

        Store Id

        :return: The store_id of this CartCouponAdd.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CartCouponAdd.

        Store Id

        :param store_id: The store_id of this CartCouponAdd.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def usage_limit(self):
        """Gets the usage_limit of this CartCouponAdd.

        Usage limit for coupon.

        :return: The usage_limit of this CartCouponAdd.
        :rtype: int
        """
        return self._usage_limit

    @usage_limit.setter
    def usage_limit(self, usage_limit):
        """Sets the usage_limit of this CartCouponAdd.

        Usage limit for coupon.

        :param usage_limit: The usage_limit of this CartCouponAdd.
        :type usage_limit: int
        """

        self._usage_limit = usage_limit

    @property
    def usage_limit_per_customer(self):
        """Gets the usage_limit_per_customer of this CartCouponAdd.

        Usage limit per customer.

        :return: The usage_limit_per_customer of this CartCouponAdd.
        :rtype: int
        """
        return self._usage_limit_per_customer

    @usage_limit_per_customer.setter
    def usage_limit_per_customer(self, usage_limit_per_customer):
        """Sets the usage_limit_per_customer of this CartCouponAdd.

        Usage limit per customer.

        :param usage_limit_per_customer: The usage_limit_per_customer of this CartCouponAdd.
        :type usage_limit_per_customer: int
        """

        self._usage_limit_per_customer = usage_limit_per_customer
