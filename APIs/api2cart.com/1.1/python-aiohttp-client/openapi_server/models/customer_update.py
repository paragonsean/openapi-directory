# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_update_address_inner import CustomerUpdateAddressInner
from openapi_server import util


class CustomerUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: List[CustomerUpdateAddressInner]=None, email: str=None, first_name: str=None, group_id: str=None, group_ids: str=None, id: str=None, last_name: str=None, news_letter_subscription: bool=None, phone: str=None, tags: str=None):
        """CustomerUpdate - a model defined in OpenAPI

        :param address: The address of this CustomerUpdate.
        :param email: The email of this CustomerUpdate.
        :param first_name: The first_name of this CustomerUpdate.
        :param group_id: The group_id of this CustomerUpdate.
        :param group_ids: The group_ids of this CustomerUpdate.
        :param id: The id of this CustomerUpdate.
        :param last_name: The last_name of this CustomerUpdate.
        :param news_letter_subscription: The news_letter_subscription of this CustomerUpdate.
        :param phone: The phone of this CustomerUpdate.
        :param tags: The tags of this CustomerUpdate.
        """
        self.openapi_types = {
            'address': List[CustomerUpdateAddressInner],
            'email': str,
            'first_name': str,
            'group_id': str,
            'group_ids': str,
            'id': str,
            'last_name': str,
            'news_letter_subscription': bool,
            'phone': str,
            'tags': str
        }

        self.attribute_map = {
            'address': 'address',
            'email': 'email',
            'first_name': 'first_name',
            'group_id': 'group_id',
            'group_ids': 'group_ids',
            'id': 'id',
            'last_name': 'last_name',
            'news_letter_subscription': 'news_letter_subscription',
            'phone': 'phone',
            'tags': 'tags'
        }

        self._address = address
        self._email = email
        self._first_name = first_name
        self._group_id = group_id
        self._group_ids = group_ids
        self._id = id
        self._last_name = last_name
        self._news_letter_subscription = news_letter_subscription
        self._phone = phone
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerUpdate of this CustomerUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CustomerUpdate.


        :return: The address of this CustomerUpdate.
        :rtype: List[CustomerUpdateAddressInner]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CustomerUpdate.


        :param address: The address of this CustomerUpdate.
        :type address: List[CustomerUpdateAddressInner]
        """

        self._address = address

    @property
    def email(self):
        """Gets the email of this CustomerUpdate.

        Defines customer's email

        :return: The email of this CustomerUpdate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerUpdate.

        Defines customer's email

        :param email: The email of this CustomerUpdate.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this CustomerUpdate.

        Defines customer's first name

        :return: The first_name of this CustomerUpdate.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerUpdate.

        Defines customer's first name

        :param first_name: The first_name of this CustomerUpdate.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def group_id(self):
        """Gets the group_id of this CustomerUpdate.

        Customer group_id

        :return: The group_id of this CustomerUpdate.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CustomerUpdate.

        Customer group_id

        :param group_id: The group_id of this CustomerUpdate.
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def group_ids(self):
        """Gets the group_ids of this CustomerUpdate.

        Groups that will be assigned to a customer

        :return: The group_ids of this CustomerUpdate.
        :rtype: str
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this CustomerUpdate.

        Groups that will be assigned to a customer

        :param group_ids: The group_ids of this CustomerUpdate.
        :type group_ids: str
        """

        self._group_ids = group_ids

    @property
    def id(self):
        """Gets the id of this CustomerUpdate.

        Entity id

        :return: The id of this CustomerUpdate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerUpdate.

        Entity id

        :param id: The id of this CustomerUpdate.
        :type id: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this CustomerUpdate.

        Defines customer's last name

        :return: The last_name of this CustomerUpdate.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerUpdate.

        Defines customer's last name

        :param last_name: The last_name of this CustomerUpdate.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def news_letter_subscription(self):
        """Gets the news_letter_subscription of this CustomerUpdate.

        Defines whether the newsletter subscription is available for the user

        :return: The news_letter_subscription of this CustomerUpdate.
        :rtype: bool
        """
        return self._news_letter_subscription

    @news_letter_subscription.setter
    def news_letter_subscription(self, news_letter_subscription):
        """Sets the news_letter_subscription of this CustomerUpdate.

        Defines whether the newsletter subscription is available for the user

        :param news_letter_subscription: The news_letter_subscription of this CustomerUpdate.
        :type news_letter_subscription: bool
        """

        self._news_letter_subscription = news_letter_subscription

    @property
    def phone(self):
        """Gets the phone of this CustomerUpdate.

        Defines customer's phone number

        :return: The phone of this CustomerUpdate.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerUpdate.

        Defines customer's phone number

        :param phone: The phone of this CustomerUpdate.
        :type phone: str
        """

        self._phone = phone

    @property
    def tags(self):
        """Gets the tags of this CustomerUpdate.

        Customer tags

        :return: The tags of this CustomerUpdate.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CustomerUpdate.

        Customer tags

        :param tags: The tags of this CustomerUpdate.
        :type tags: str
        """

        self._tags = tags
