# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_class_zip_codes import TaxClassZipCodes
from openapi_server import util


class TaxClassStates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, code: str=None, custom_fields: object=None, id: str=None, name: str=None, tax: float=None, tax_type: int=None, zip_codes: List[TaxClassZipCodes]=None):
        """TaxClassStates - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this TaxClassStates.
        :param code: The code of this TaxClassStates.
        :param custom_fields: The custom_fields of this TaxClassStates.
        :param id: The id of this TaxClassStates.
        :param name: The name of this TaxClassStates.
        :param tax: The tax of this TaxClassStates.
        :param tax_type: The tax_type of this TaxClassStates.
        :param zip_codes: The zip_codes of this TaxClassStates.
        """
        self.openapi_types = {
            'additional_fields': object,
            'code': str,
            'custom_fields': object,
            'id': str,
            'name': str,
            'tax': float,
            'tax_type': int,
            'zip_codes': List[TaxClassZipCodes]
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'code': 'code',
            'custom_fields': 'custom_fields',
            'id': 'id',
            'name': 'name',
            'tax': 'tax',
            'tax_type': 'tax_type',
            'zip_codes': 'zip_codes'
        }

        self._additional_fields = additional_fields
        self._code = code
        self._custom_fields = custom_fields
        self._id = id
        self._name = name
        self._tax = tax
        self._tax_type = tax_type
        self._zip_codes = zip_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxClassStates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxClass_States of this TaxClassStates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this TaxClassStates.


        :return: The additional_fields of this TaxClassStates.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this TaxClassStates.


        :param additional_fields: The additional_fields of this TaxClassStates.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def code(self):
        """Gets the code of this TaxClassStates.


        :return: The code of this TaxClassStates.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TaxClassStates.


        :param code: The code of this TaxClassStates.
        :type code: str
        """

        self._code = code

    @property
    def custom_fields(self):
        """Gets the custom_fields of this TaxClassStates.


        :return: The custom_fields of this TaxClassStates.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this TaxClassStates.


        :param custom_fields: The custom_fields of this TaxClassStates.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this TaxClassStates.


        :return: The id of this TaxClassStates.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaxClassStates.


        :param id: The id of this TaxClassStates.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TaxClassStates.


        :return: The name of this TaxClassStates.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaxClassStates.


        :param name: The name of this TaxClassStates.
        :type name: str
        """

        self._name = name

    @property
    def tax(self):
        """Gets the tax of this TaxClassStates.


        :return: The tax of this TaxClassStates.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this TaxClassStates.


        :param tax: The tax of this TaxClassStates.
        :type tax: float
        """

        self._tax = tax

    @property
    def tax_type(self):
        """Gets the tax_type of this TaxClassStates.


        :return: The tax_type of this TaxClassStates.
        :rtype: int
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this TaxClassStates.


        :param tax_type: The tax_type of this TaxClassStates.
        :type tax_type: int
        """

        self._tax_type = tax_type

    @property
    def zip_codes(self):
        """Gets the zip_codes of this TaxClassStates.


        :return: The zip_codes of this TaxClassStates.
        :rtype: List[TaxClassZipCodes]
        """
        return self._zip_codes

    @zip_codes.setter
    def zip_codes(self, zip_codes):
        """Sets the zip_codes of this TaxClassStates.


        :param zip_codes: The zip_codes of this TaxClassStates.
        :type zip_codes: List[TaxClassZipCodes]
        """

        self._zip_codes = zip_codes
