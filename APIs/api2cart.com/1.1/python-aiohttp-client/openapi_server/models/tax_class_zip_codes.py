# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tax_class_zip_codes_range import TaxClassZipCodesRange
from openapi_server import util


class TaxClassZipCodes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, fields: List[TaxClassZipCodesRange]=None, is_range: bool=None, range: List[str]=None):
        """TaxClassZipCodes - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this TaxClassZipCodes.
        :param custom_fields: The custom_fields of this TaxClassZipCodes.
        :param fields: The fields of this TaxClassZipCodes.
        :param is_range: The is_range of this TaxClassZipCodes.
        :param range: The range of this TaxClassZipCodes.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'fields': List[TaxClassZipCodesRange],
            'is_range': bool,
            'range': List[str]
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'fields': 'fields',
            'is_range': 'is_range',
            'range': 'range'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._fields = fields
        self._is_range = is_range
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxClassZipCodes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaxClass_ZipCodes of this TaxClassZipCodes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this TaxClassZipCodes.


        :return: The additional_fields of this TaxClassZipCodes.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this TaxClassZipCodes.


        :param additional_fields: The additional_fields of this TaxClassZipCodes.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this TaxClassZipCodes.


        :return: The custom_fields of this TaxClassZipCodes.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this TaxClassZipCodes.


        :param custom_fields: The custom_fields of this TaxClassZipCodes.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def fields(self):
        """Gets the fields of this TaxClassZipCodes.


        :return: The fields of this TaxClassZipCodes.
        :rtype: List[TaxClassZipCodesRange]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TaxClassZipCodes.


        :param fields: The fields of this TaxClassZipCodes.
        :type fields: List[TaxClassZipCodesRange]
        """

        self._fields = fields

    @property
    def is_range(self):
        """Gets the is_range of this TaxClassZipCodes.


        :return: The is_range of this TaxClassZipCodes.
        :rtype: bool
        """
        return self._is_range

    @is_range.setter
    def is_range(self, is_range):
        """Sets the is_range of this TaxClassZipCodes.


        :param is_range: The is_range of this TaxClassZipCodes.
        :type is_range: bool
        """

        self._is_range = is_range

    @property
    def range(self):
        """Gets the range of this TaxClassZipCodes.


        :return: The range of this TaxClassZipCodes.
        :rtype: List[str]
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this TaxClassZipCodes.


        :param range: The range of this TaxClassZipCodes.
        :type range: List[str]
        """

        self._range = range
