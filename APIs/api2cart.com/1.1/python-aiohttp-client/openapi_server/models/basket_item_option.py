# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BasketItemOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, id: str=None, name: str=None, used_in_combination: bool=None, value: str=None, value_id: str=None):
        """BasketItemOption - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this BasketItemOption.
        :param custom_fields: The custom_fields of this BasketItemOption.
        :param id: The id of this BasketItemOption.
        :param name: The name of this BasketItemOption.
        :param used_in_combination: The used_in_combination of this BasketItemOption.
        :param value: The value of this BasketItemOption.
        :param value_id: The value_id of this BasketItemOption.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'id': str,
            'name': str,
            'used_in_combination': bool,
            'value': str,
            'value_id': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'id': 'id',
            'name': 'name',
            'used_in_combination': 'used_in_combination',
            'value': 'value',
            'value_id': 'value_id'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._id = id
        self._name = name
        self._used_in_combination = used_in_combination
        self._value = value
        self._value_id = value_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasketItemOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Basket_Item_Option of this BasketItemOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this BasketItemOption.


        :return: The additional_fields of this BasketItemOption.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this BasketItemOption.


        :param additional_fields: The additional_fields of this BasketItemOption.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BasketItemOption.


        :return: The custom_fields of this BasketItemOption.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BasketItemOption.


        :param custom_fields: The custom_fields of this BasketItemOption.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this BasketItemOption.


        :return: The id of this BasketItemOption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasketItemOption.


        :param id: The id of this BasketItemOption.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BasketItemOption.


        :return: The name of this BasketItemOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasketItemOption.


        :param name: The name of this BasketItemOption.
        :type name: str
        """

        self._name = name

    @property
    def used_in_combination(self):
        """Gets the used_in_combination of this BasketItemOption.


        :return: The used_in_combination of this BasketItemOption.
        :rtype: bool
        """
        return self._used_in_combination

    @used_in_combination.setter
    def used_in_combination(self, used_in_combination):
        """Sets the used_in_combination of this BasketItemOption.


        :param used_in_combination: The used_in_combination of this BasketItemOption.
        :type used_in_combination: bool
        """

        self._used_in_combination = used_in_combination

    @property
    def value(self):
        """Gets the value of this BasketItemOption.


        :return: The value of this BasketItemOption.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BasketItemOption.


        :param value: The value of this BasketItemOption.
        :type value: str
        """

        self._value = value

    @property
    def value_id(self):
        """Gets the value_id of this BasketItemOption.


        :return: The value_id of this BasketItemOption.
        :rtype: str
        """
        return self._value_id

    @value_id.setter
    def value_id(self, value_id):
        """Sets the value_id of this BasketItemOption.


        :param value_id: The value_id of this BasketItemOption.
        :type value_id: str
        """

        self._value_id = value_id
