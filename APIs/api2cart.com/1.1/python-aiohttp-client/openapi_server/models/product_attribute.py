# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, attribute_group_id: str=None, attribute_id: str=None, code: str=None, custom_fields: object=None, lang_id: str=None, name: str=None, position: int=None, product_id: str=None, required: bool=None, store_id: str=None, type: str=None, value: str=None, variant_id: str=None, visible: bool=None):
        """ProductAttribute - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this ProductAttribute.
        :param attribute_group_id: The attribute_group_id of this ProductAttribute.
        :param attribute_id: The attribute_id of this ProductAttribute.
        :param code: The code of this ProductAttribute.
        :param custom_fields: The custom_fields of this ProductAttribute.
        :param lang_id: The lang_id of this ProductAttribute.
        :param name: The name of this ProductAttribute.
        :param position: The position of this ProductAttribute.
        :param product_id: The product_id of this ProductAttribute.
        :param required: The required of this ProductAttribute.
        :param store_id: The store_id of this ProductAttribute.
        :param type: The type of this ProductAttribute.
        :param value: The value of this ProductAttribute.
        :param variant_id: The variant_id of this ProductAttribute.
        :param visible: The visible of this ProductAttribute.
        """
        self.openapi_types = {
            'additional_fields': object,
            'attribute_group_id': str,
            'attribute_id': str,
            'code': str,
            'custom_fields': object,
            'lang_id': str,
            'name': str,
            'position': int,
            'product_id': str,
            'required': bool,
            'store_id': str,
            'type': str,
            'value': str,
            'variant_id': str,
            'visible': bool
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'attribute_group_id': 'attribute_group_id',
            'attribute_id': 'attribute_id',
            'code': 'code',
            'custom_fields': 'custom_fields',
            'lang_id': 'lang_id',
            'name': 'name',
            'position': 'position',
            'product_id': 'product_id',
            'required': 'required',
            'store_id': 'store_id',
            'type': 'type',
            'value': 'value',
            'variant_id': 'variant_id',
            'visible': 'visible'
        }

        self._additional_fields = additional_fields
        self._attribute_group_id = attribute_group_id
        self._attribute_id = attribute_id
        self._code = code
        self._custom_fields = custom_fields
        self._lang_id = lang_id
        self._name = name
        self._position = position
        self._product_id = product_id
        self._required = required
        self._store_id = store_id
        self._type = type
        self._value = value
        self._variant_id = variant_id
        self._visible = visible

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product_Attribute of this ProductAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ProductAttribute.


        :return: The additional_fields of this ProductAttribute.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ProductAttribute.


        :param additional_fields: The additional_fields of this ProductAttribute.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def attribute_group_id(self):
        """Gets the attribute_group_id of this ProductAttribute.


        :return: The attribute_group_id of this ProductAttribute.
        :rtype: str
        """
        return self._attribute_group_id

    @attribute_group_id.setter
    def attribute_group_id(self, attribute_group_id):
        """Sets the attribute_group_id of this ProductAttribute.


        :param attribute_group_id: The attribute_group_id of this ProductAttribute.
        :type attribute_group_id: str
        """

        self._attribute_group_id = attribute_group_id

    @property
    def attribute_id(self):
        """Gets the attribute_id of this ProductAttribute.


        :return: The attribute_id of this ProductAttribute.
        :rtype: str
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this ProductAttribute.


        :param attribute_id: The attribute_id of this ProductAttribute.
        :type attribute_id: str
        """

        self._attribute_id = attribute_id

    @property
    def code(self):
        """Gets the code of this ProductAttribute.


        :return: The code of this ProductAttribute.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ProductAttribute.


        :param code: The code of this ProductAttribute.
        :type code: str
        """

        self._code = code

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProductAttribute.


        :return: The custom_fields of this ProductAttribute.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProductAttribute.


        :param custom_fields: The custom_fields of this ProductAttribute.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def lang_id(self):
        """Gets the lang_id of this ProductAttribute.


        :return: The lang_id of this ProductAttribute.
        :rtype: str
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ProductAttribute.


        :param lang_id: The lang_id of this ProductAttribute.
        :type lang_id: str
        """

        self._lang_id = lang_id

    @property
    def name(self):
        """Gets the name of this ProductAttribute.


        :return: The name of this ProductAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductAttribute.


        :param name: The name of this ProductAttribute.
        :type name: str
        """

        self._name = name

    @property
    def position(self):
        """Gets the position of this ProductAttribute.


        :return: The position of this ProductAttribute.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ProductAttribute.


        :param position: The position of this ProductAttribute.
        :type position: int
        """

        self._position = position

    @property
    def product_id(self):
        """Gets the product_id of this ProductAttribute.


        :return: The product_id of this ProductAttribute.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductAttribute.


        :param product_id: The product_id of this ProductAttribute.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def required(self):
        """Gets the required of this ProductAttribute.


        :return: The required of this ProductAttribute.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ProductAttribute.


        :param required: The required of this ProductAttribute.
        :type required: bool
        """

        self._required = required

    @property
    def store_id(self):
        """Gets the store_id of this ProductAttribute.


        :return: The store_id of this ProductAttribute.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ProductAttribute.


        :param store_id: The store_id of this ProductAttribute.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def type(self):
        """Gets the type of this ProductAttribute.


        :return: The type of this ProductAttribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductAttribute.


        :param type: The type of this ProductAttribute.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this ProductAttribute.


        :return: The value of this ProductAttribute.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProductAttribute.


        :param value: The value of this ProductAttribute.
        :type value: str
        """

        self._value = value

    @property
    def variant_id(self):
        """Gets the variant_id of this ProductAttribute.


        :return: The variant_id of this ProductAttribute.
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this ProductAttribute.


        :param variant_id: The variant_id of this ProductAttribute.
        :type variant_id: str
        """

        self._variant_id = variant_id

    @property
    def visible(self):
        """Gets the visible of this ProductAttribute.


        :return: The visible of this ProductAttribute.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ProductAttribute.


        :param visible: The visible of this ProductAttribute.
        :type visible: bool
        """

        self._visible = visible
