# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrderTotals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, discount: float=None, shipping: float=None, subtotal: float=None, tax: float=None, total: float=None):
        """OrderTotals - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this OrderTotals.
        :param custom_fields: The custom_fields of this OrderTotals.
        :param discount: The discount of this OrderTotals.
        :param shipping: The shipping of this OrderTotals.
        :param subtotal: The subtotal of this OrderTotals.
        :param tax: The tax of this OrderTotals.
        :param total: The total of this OrderTotals.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'discount': float,
            'shipping': float,
            'subtotal': float,
            'tax': float,
            'total': float
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'discount': 'discount',
            'shipping': 'shipping',
            'subtotal': 'subtotal',
            'tax': 'tax',
            'total': 'total'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._discount = discount
        self._shipping = shipping
        self._subtotal = subtotal
        self._tax = tax
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderTotals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Order_Totals of this OrderTotals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this OrderTotals.


        :return: The additional_fields of this OrderTotals.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this OrderTotals.


        :param additional_fields: The additional_fields of this OrderTotals.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderTotals.


        :return: The custom_fields of this OrderTotals.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderTotals.


        :param custom_fields: The custom_fields of this OrderTotals.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def discount(self):
        """Gets the discount of this OrderTotals.


        :return: The discount of this OrderTotals.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderTotals.


        :param discount: The discount of this OrderTotals.
        :type discount: float
        """

        self._discount = discount

    @property
    def shipping(self):
        """Gets the shipping of this OrderTotals.


        :return: The shipping of this OrderTotals.
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this OrderTotals.


        :param shipping: The shipping of this OrderTotals.
        :type shipping: float
        """

        self._shipping = shipping

    @property
    def subtotal(self):
        """Gets the subtotal of this OrderTotals.


        :return: The subtotal of this OrderTotals.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this OrderTotals.


        :param subtotal: The subtotal of this OrderTotals.
        :type subtotal: float
        """

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this OrderTotals.


        :return: The tax of this OrderTotals.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this OrderTotals.


        :param tax: The tax of this OrderTotals.
        :type tax: float
        """

        self._tax = tax

    @property
    def total(self):
        """Gets the total of this OrderTotals.


        :return: The total of this OrderTotals.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this OrderTotals.


        :param total: The total of this OrderTotals.
        :type total: float
        """

        self._total = total
