# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_preestimate_shipping_list_order_item_inner import OrderPreestimateShippingListOrderItemInner
from openapi_server import util


class OrderPreestimateShippingList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_email: str=None, customer_id: str=None, exclude: str=None, order_item: List[OrderPreestimateShippingListOrderItemInner]=None, params: str='force_all', shipp_address_1: str=None, shipp_city: str=None, shipp_country: str=None, shipp_postcode: str=None, shipp_state: str=None, store_id: str=None, warehouse_id: str=None):
        """OrderPreestimateShippingList - a model defined in OpenAPI

        :param customer_email: The customer_email of this OrderPreestimateShippingList.
        :param customer_id: The customer_id of this OrderPreestimateShippingList.
        :param exclude: The exclude of this OrderPreestimateShippingList.
        :param order_item: The order_item of this OrderPreestimateShippingList.
        :param params: The params of this OrderPreestimateShippingList.
        :param shipp_address_1: The shipp_address_1 of this OrderPreestimateShippingList.
        :param shipp_city: The shipp_city of this OrderPreestimateShippingList.
        :param shipp_country: The shipp_country of this OrderPreestimateShippingList.
        :param shipp_postcode: The shipp_postcode of this OrderPreestimateShippingList.
        :param shipp_state: The shipp_state of this OrderPreestimateShippingList.
        :param store_id: The store_id of this OrderPreestimateShippingList.
        :param warehouse_id: The warehouse_id of this OrderPreestimateShippingList.
        """
        self.openapi_types = {
            'customer_email': str,
            'customer_id': str,
            'exclude': str,
            'order_item': List[OrderPreestimateShippingListOrderItemInner],
            'params': str,
            'shipp_address_1': str,
            'shipp_city': str,
            'shipp_country': str,
            'shipp_postcode': str,
            'shipp_state': str,
            'store_id': str,
            'warehouse_id': str
        }

        self.attribute_map = {
            'customer_email': 'customer_email',
            'customer_id': 'customer_id',
            'exclude': 'exclude',
            'order_item': 'order_item',
            'params': 'params',
            'shipp_address_1': 'shipp_address_1',
            'shipp_city': 'shipp_city',
            'shipp_country': 'shipp_country',
            'shipp_postcode': 'shipp_postcode',
            'shipp_state': 'shipp_state',
            'store_id': 'store_id',
            'warehouse_id': 'warehouse_id'
        }

        self._customer_email = customer_email
        self._customer_id = customer_id
        self._exclude = exclude
        self._order_item = order_item
        self._params = params
        self._shipp_address_1 = shipp_address_1
        self._shipp_city = shipp_city
        self._shipp_country = shipp_country
        self._shipp_postcode = shipp_postcode
        self._shipp_state = shipp_state
        self._store_id = store_id
        self._warehouse_id = warehouse_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderPreestimateShippingList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderPreestimateShippingList of this OrderPreestimateShippingList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_email(self):
        """Gets the customer_email of this OrderPreestimateShippingList.

        Retrieves orders specified by customer email

        :return: The customer_email of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._customer_email

    @customer_email.setter
    def customer_email(self, customer_email):
        """Sets the customer_email of this OrderPreestimateShippingList.

        Retrieves orders specified by customer email

        :param customer_email: The customer_email of this OrderPreestimateShippingList.
        :type customer_email: str
        """

        self._customer_email = customer_email

    @property
    def customer_id(self):
        """Gets the customer_id of this OrderPreestimateShippingList.

        Retrieves orders specified by customer id

        :return: The customer_id of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this OrderPreestimateShippingList.

        Retrieves orders specified by customer id

        :param customer_id: The customer_id of this OrderPreestimateShippingList.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def exclude(self):
        """Gets the exclude of this OrderPreestimateShippingList.

        Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

        :return: The exclude of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this OrderPreestimateShippingList.

        Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all

        :param exclude: The exclude of this OrderPreestimateShippingList.
        :type exclude: str
        """

        self._exclude = exclude

    @property
    def order_item(self):
        """Gets the order_item of this OrderPreestimateShippingList.


        :return: The order_item of this OrderPreestimateShippingList.
        :rtype: List[OrderPreestimateShippingListOrderItemInner]
        """
        return self._order_item

    @order_item.setter
    def order_item(self, order_item):
        """Sets the order_item of this OrderPreestimateShippingList.


        :param order_item: The order_item of this OrderPreestimateShippingList.
        :type order_item: List[OrderPreestimateShippingListOrderItemInner]
        """
        if order_item is None:
            raise ValueError("Invalid value for `order_item`, must not be `None`")

        self._order_item = order_item

    @property
    def params(self):
        """Gets the params of this OrderPreestimateShippingList.

        Set this parameter in order to choose which entity fields you want to retrieve

        :return: The params of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this OrderPreestimateShippingList.

        Set this parameter in order to choose which entity fields you want to retrieve

        :param params: The params of this OrderPreestimateShippingList.
        :type params: str
        """

        self._params = params

    @property
    def shipp_address_1(self):
        """Gets the shipp_address_1 of this OrderPreestimateShippingList.

        Specifies first shipping address

        :return: The shipp_address_1 of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._shipp_address_1

    @shipp_address_1.setter
    def shipp_address_1(self, shipp_address_1):
        """Sets the shipp_address_1 of this OrderPreestimateShippingList.

        Specifies first shipping address

        :param shipp_address_1: The shipp_address_1 of this OrderPreestimateShippingList.
        :type shipp_address_1: str
        """

        self._shipp_address_1 = shipp_address_1

    @property
    def shipp_city(self):
        """Gets the shipp_city of this OrderPreestimateShippingList.

        Specifies shipping city

        :return: The shipp_city of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._shipp_city

    @shipp_city.setter
    def shipp_city(self, shipp_city):
        """Sets the shipp_city of this OrderPreestimateShippingList.

        Specifies shipping city

        :param shipp_city: The shipp_city of this OrderPreestimateShippingList.
        :type shipp_city: str
        """

        self._shipp_city = shipp_city

    @property
    def shipp_country(self):
        """Gets the shipp_country of this OrderPreestimateShippingList.

        Specifies shipping country code

        :return: The shipp_country of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._shipp_country

    @shipp_country.setter
    def shipp_country(self, shipp_country):
        """Sets the shipp_country of this OrderPreestimateShippingList.

        Specifies shipping country code

        :param shipp_country: The shipp_country of this OrderPreestimateShippingList.
        :type shipp_country: str
        """
        if shipp_country is None:
            raise ValueError("Invalid value for `shipp_country`, must not be `None`")

        self._shipp_country = shipp_country

    @property
    def shipp_postcode(self):
        """Gets the shipp_postcode of this OrderPreestimateShippingList.

        Specifies shipping postcode

        :return: The shipp_postcode of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._shipp_postcode

    @shipp_postcode.setter
    def shipp_postcode(self, shipp_postcode):
        """Sets the shipp_postcode of this OrderPreestimateShippingList.

        Specifies shipping postcode

        :param shipp_postcode: The shipp_postcode of this OrderPreestimateShippingList.
        :type shipp_postcode: str
        """

        self._shipp_postcode = shipp_postcode

    @property
    def shipp_state(self):
        """Gets the shipp_state of this OrderPreestimateShippingList.

        Specifies shipping state code

        :return: The shipp_state of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._shipp_state

    @shipp_state.setter
    def shipp_state(self, shipp_state):
        """Sets the shipp_state of this OrderPreestimateShippingList.

        Specifies shipping state code

        :param shipp_state: The shipp_state of this OrderPreestimateShippingList.
        :type shipp_state: str
        """

        self._shipp_state = shipp_state

    @property
    def store_id(self):
        """Gets the store_id of this OrderPreestimateShippingList.

        Store Id

        :return: The store_id of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this OrderPreestimateShippingList.

        Store Id

        :param store_id: The store_id of this OrderPreestimateShippingList.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this OrderPreestimateShippingList.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :return: The warehouse_id of this OrderPreestimateShippingList.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this OrderPreestimateShippingList.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :param warehouse_id: The warehouse_id of this OrderPreestimateShippingList.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id
