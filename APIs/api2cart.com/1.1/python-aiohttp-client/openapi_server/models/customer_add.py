# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_add_address_inner import CustomerAddAddressInner
from openapi_server import util


class CustomerAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: List[CustomerAddAddressInner]=None, birth_day: str=None, company: str=None, created_time: str=None, email: str=None, fax: str=None, first_name: str=None, gender: str=None, group: str=None, last_login: str=None, last_name: str=None, login: str=None, modified_time: str=None, news_letter_subscription: bool=False, password: str=None, phone: str=None, status: str='enabled', store_id: str=None, website: str=None):
        """CustomerAdd - a model defined in OpenAPI

        :param address: The address of this CustomerAdd.
        :param birth_day: The birth_day of this CustomerAdd.
        :param company: The company of this CustomerAdd.
        :param created_time: The created_time of this CustomerAdd.
        :param email: The email of this CustomerAdd.
        :param fax: The fax of this CustomerAdd.
        :param first_name: The first_name of this CustomerAdd.
        :param gender: The gender of this CustomerAdd.
        :param group: The group of this CustomerAdd.
        :param last_login: The last_login of this CustomerAdd.
        :param last_name: The last_name of this CustomerAdd.
        :param login: The login of this CustomerAdd.
        :param modified_time: The modified_time of this CustomerAdd.
        :param news_letter_subscription: The news_letter_subscription of this CustomerAdd.
        :param password: The password of this CustomerAdd.
        :param phone: The phone of this CustomerAdd.
        :param status: The status of this CustomerAdd.
        :param store_id: The store_id of this CustomerAdd.
        :param website: The website of this CustomerAdd.
        """
        self.openapi_types = {
            'address': List[CustomerAddAddressInner],
            'birth_day': str,
            'company': str,
            'created_time': str,
            'email': str,
            'fax': str,
            'first_name': str,
            'gender': str,
            'group': str,
            'last_login': str,
            'last_name': str,
            'login': str,
            'modified_time': str,
            'news_letter_subscription': bool,
            'password': str,
            'phone': str,
            'status': str,
            'store_id': str,
            'website': str
        }

        self.attribute_map = {
            'address': 'address',
            'birth_day': 'birth_day',
            'company': 'company',
            'created_time': 'created_time',
            'email': 'email',
            'fax': 'fax',
            'first_name': 'first_name',
            'gender': 'gender',
            'group': 'group',
            'last_login': 'last_login',
            'last_name': 'last_name',
            'login': 'login',
            'modified_time': 'modified_time',
            'news_letter_subscription': 'news_letter_subscription',
            'password': 'password',
            'phone': 'phone',
            'status': 'status',
            'store_id': 'store_id',
            'website': 'website'
        }

        self._address = address
        self._birth_day = birth_day
        self._company = company
        self._created_time = created_time
        self._email = email
        self._fax = fax
        self._first_name = first_name
        self._gender = gender
        self._group = group
        self._last_login = last_login
        self._last_name = last_name
        self._login = login
        self._modified_time = modified_time
        self._news_letter_subscription = news_letter_subscription
        self._password = password
        self._phone = phone
        self._status = status
        self._store_id = store_id
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerAdd of this CustomerAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this CustomerAdd.


        :return: The address of this CustomerAdd.
        :rtype: List[CustomerAddAddressInner]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CustomerAdd.


        :param address: The address of this CustomerAdd.
        :type address: List[CustomerAddAddressInner]
        """

        self._address = address

    @property
    def birth_day(self):
        """Gets the birth_day of this CustomerAdd.

        Defines customer's birthday

        :return: The birth_day of this CustomerAdd.
        :rtype: str
        """
        return self._birth_day

    @birth_day.setter
    def birth_day(self, birth_day):
        """Sets the birth_day of this CustomerAdd.

        Defines customer's birthday

        :param birth_day: The birth_day of this CustomerAdd.
        :type birth_day: str
        """

        self._birth_day = birth_day

    @property
    def company(self):
        """Gets the company of this CustomerAdd.

        Defines customer's company

        :return: The company of this CustomerAdd.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CustomerAdd.

        Defines customer's company

        :param company: The company of this CustomerAdd.
        :type company: str
        """

        self._company = company

    @property
    def created_time(self):
        """Gets the created_time of this CustomerAdd.

        Entity's date creation

        :return: The created_time of this CustomerAdd.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CustomerAdd.

        Entity's date creation

        :param created_time: The created_time of this CustomerAdd.
        :type created_time: str
        """

        self._created_time = created_time

    @property
    def email(self):
        """Gets the email of this CustomerAdd.

        Defines customer's email

        :return: The email of this CustomerAdd.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CustomerAdd.

        Defines customer's email

        :param email: The email of this CustomerAdd.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def fax(self):
        """Gets the fax of this CustomerAdd.

        Defines customer's fax

        :return: The fax of this CustomerAdd.
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this CustomerAdd.

        Defines customer's fax

        :param fax: The fax of this CustomerAdd.
        :type fax: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this CustomerAdd.

        Defines customer's first name

        :return: The first_name of this CustomerAdd.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CustomerAdd.

        Defines customer's first name

        :param first_name: The first_name of this CustomerAdd.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this CustomerAdd.

        Defines customer's gender

        :return: The gender of this CustomerAdd.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CustomerAdd.

        Defines customer's gender

        :param gender: The gender of this CustomerAdd.
        :type gender: str
        """

        self._gender = gender

    @property
    def group(self):
        """Gets the group of this CustomerAdd.

        Defines the group where the customer

        :return: The group of this CustomerAdd.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CustomerAdd.

        Defines the group where the customer

        :param group: The group of this CustomerAdd.
        :type group: str
        """

        self._group = group

    @property
    def last_login(self):
        """Gets the last_login of this CustomerAdd.

        Defines customer's last login time

        :return: The last_login of this CustomerAdd.
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this CustomerAdd.

        Defines customer's last login time

        :param last_login: The last_login of this CustomerAdd.
        :type last_login: str
        """

        self._last_login = last_login

    @property
    def last_name(self):
        """Gets the last_name of this CustomerAdd.

        Defines customer's last name

        :return: The last_name of this CustomerAdd.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CustomerAdd.

        Defines customer's last name

        :param last_name: The last_name of this CustomerAdd.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def login(self):
        """Gets the login of this CustomerAdd.

        Specifies customer's login name

        :return: The login of this CustomerAdd.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this CustomerAdd.

        Specifies customer's login name

        :param login: The login of this CustomerAdd.
        :type login: str
        """

        self._login = login

    @property
    def modified_time(self):
        """Gets the modified_time of this CustomerAdd.

        Entity's date modification

        :return: The modified_time of this CustomerAdd.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this CustomerAdd.

        Entity's date modification

        :param modified_time: The modified_time of this CustomerAdd.
        :type modified_time: str
        """

        self._modified_time = modified_time

    @property
    def news_letter_subscription(self):
        """Gets the news_letter_subscription of this CustomerAdd.

        Defines whether the newsletter subscription is available for the user

        :return: The news_letter_subscription of this CustomerAdd.
        :rtype: bool
        """
        return self._news_letter_subscription

    @news_letter_subscription.setter
    def news_letter_subscription(self, news_letter_subscription):
        """Sets the news_letter_subscription of this CustomerAdd.

        Defines whether the newsletter subscription is available for the user

        :param news_letter_subscription: The news_letter_subscription of this CustomerAdd.
        :type news_letter_subscription: bool
        """

        self._news_letter_subscription = news_letter_subscription

    @property
    def password(self):
        """Gets the password of this CustomerAdd.

        Defines customer's unique password

        :return: The password of this CustomerAdd.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CustomerAdd.

        Defines customer's unique password

        :param password: The password of this CustomerAdd.
        :type password: str
        """

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this CustomerAdd.

        Defines customer's phone number

        :return: The phone of this CustomerAdd.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CustomerAdd.

        Defines customer's phone number

        :param phone: The phone of this CustomerAdd.
        :type phone: str
        """

        self._phone = phone

    @property
    def status(self):
        """Gets the status of this CustomerAdd.

        Defines customer's status

        :return: The status of this CustomerAdd.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomerAdd.

        Defines customer's status

        :param status: The status of this CustomerAdd.
        :type status: str
        """

        self._status = status

    @property
    def store_id(self):
        """Gets the store_id of this CustomerAdd.

        Store Id

        :return: The store_id of this CustomerAdd.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CustomerAdd.

        Store Id

        :param store_id: The store_id of this CustomerAdd.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def website(self):
        """Gets the website of this CustomerAdd.

        Link to customer website

        :return: The website of this CustomerAdd.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this CustomerAdd.

        Link to customer website

        :param website: The website of this CustomerAdd.
        :type website: str
        """

        self._website = website
