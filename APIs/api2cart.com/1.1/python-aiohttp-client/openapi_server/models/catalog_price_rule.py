# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.a2_c_date_time import A2CDateTime
from openapi_server.models.catalog_price_rule_action import CatalogPriceRuleAction
from openapi_server.models.coupon_condition import CouponCondition
from openapi_server import util


class CatalogPriceRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[CatalogPriceRuleAction]=None, additional_fields: object=None, avail: bool=None, conditions: List[CouponCondition]=None, created_time: A2CDateTime=None, custom_fields: object=None, date_end: A2CDateTime=None, date_start: A2CDateTime=None, description: str=None, gid: str=None, id: str=None, name: str=None, short_description: str=None, type: str=None, usage_count: float=None, uses_per_order_limit: int=None):
        """CatalogPriceRule - a model defined in OpenAPI

        :param actions: The actions of this CatalogPriceRule.
        :param additional_fields: The additional_fields of this CatalogPriceRule.
        :param avail: The avail of this CatalogPriceRule.
        :param conditions: The conditions of this CatalogPriceRule.
        :param created_time: The created_time of this CatalogPriceRule.
        :param custom_fields: The custom_fields of this CatalogPriceRule.
        :param date_end: The date_end of this CatalogPriceRule.
        :param date_start: The date_start of this CatalogPriceRule.
        :param description: The description of this CatalogPriceRule.
        :param gid: The gid of this CatalogPriceRule.
        :param id: The id of this CatalogPriceRule.
        :param name: The name of this CatalogPriceRule.
        :param short_description: The short_description of this CatalogPriceRule.
        :param type: The type of this CatalogPriceRule.
        :param usage_count: The usage_count of this CatalogPriceRule.
        :param uses_per_order_limit: The uses_per_order_limit of this CatalogPriceRule.
        """
        self.openapi_types = {
            'actions': List[CatalogPriceRuleAction],
            'additional_fields': object,
            'avail': bool,
            'conditions': List[CouponCondition],
            'created_time': A2CDateTime,
            'custom_fields': object,
            'date_end': A2CDateTime,
            'date_start': A2CDateTime,
            'description': str,
            'gid': str,
            'id': str,
            'name': str,
            'short_description': str,
            'type': str,
            'usage_count': float,
            'uses_per_order_limit': int
        }

        self.attribute_map = {
            'actions': 'actions',
            'additional_fields': 'additional_fields',
            'avail': 'avail',
            'conditions': 'conditions',
            'created_time': 'created_time',
            'custom_fields': 'custom_fields',
            'date_end': 'date_end',
            'date_start': 'date_start',
            'description': 'description',
            'gid': 'gid',
            'id': 'id',
            'name': 'name',
            'short_description': 'short_description',
            'type': 'type',
            'usage_count': 'usage_count',
            'uses_per_order_limit': 'uses_per_order_limit'
        }

        self._actions = actions
        self._additional_fields = additional_fields
        self._avail = avail
        self._conditions = conditions
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._date_end = date_end
        self._date_start = date_start
        self._description = description
        self._gid = gid
        self._id = id
        self._name = name
        self._short_description = short_description
        self._type = type
        self._usage_count = usage_count
        self._uses_per_order_limit = uses_per_order_limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogPriceRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogPriceRule of this CatalogPriceRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this CatalogPriceRule.


        :return: The actions of this CatalogPriceRule.
        :rtype: List[CatalogPriceRuleAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this CatalogPriceRule.


        :param actions: The actions of this CatalogPriceRule.
        :type actions: List[CatalogPriceRuleAction]
        """

        self._actions = actions

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CatalogPriceRule.


        :return: The additional_fields of this CatalogPriceRule.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CatalogPriceRule.


        :param additional_fields: The additional_fields of this CatalogPriceRule.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def avail(self):
        """Gets the avail of this CatalogPriceRule.


        :return: The avail of this CatalogPriceRule.
        :rtype: bool
        """
        return self._avail

    @avail.setter
    def avail(self, avail):
        """Sets the avail of this CatalogPriceRule.


        :param avail: The avail of this CatalogPriceRule.
        :type avail: bool
        """

        self._avail = avail

    @property
    def conditions(self):
        """Gets the conditions of this CatalogPriceRule.


        :return: The conditions of this CatalogPriceRule.
        :rtype: List[CouponCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CatalogPriceRule.


        :param conditions: The conditions of this CatalogPriceRule.
        :type conditions: List[CouponCondition]
        """

        self._conditions = conditions

    @property
    def created_time(self):
        """Gets the created_time of this CatalogPriceRule.


        :return: The created_time of this CatalogPriceRule.
        :rtype: A2CDateTime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CatalogPriceRule.


        :param created_time: The created_time of this CatalogPriceRule.
        :type created_time: A2CDateTime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CatalogPriceRule.


        :return: The custom_fields of this CatalogPriceRule.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CatalogPriceRule.


        :param custom_fields: The custom_fields of this CatalogPriceRule.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def date_end(self):
        """Gets the date_end of this CatalogPriceRule.


        :return: The date_end of this CatalogPriceRule.
        :rtype: A2CDateTime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this CatalogPriceRule.


        :param date_end: The date_end of this CatalogPriceRule.
        :type date_end: A2CDateTime
        """

        self._date_end = date_end

    @property
    def date_start(self):
        """Gets the date_start of this CatalogPriceRule.


        :return: The date_start of this CatalogPriceRule.
        :rtype: A2CDateTime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this CatalogPriceRule.


        :param date_start: The date_start of this CatalogPriceRule.
        :type date_start: A2CDateTime
        """

        self._date_start = date_start

    @property
    def description(self):
        """Gets the description of this CatalogPriceRule.


        :return: The description of this CatalogPriceRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogPriceRule.


        :param description: The description of this CatalogPriceRule.
        :type description: str
        """

        self._description = description

    @property
    def gid(self):
        """Gets the gid of this CatalogPriceRule.


        :return: The gid of this CatalogPriceRule.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this CatalogPriceRule.


        :param gid: The gid of this CatalogPriceRule.
        :type gid: str
        """

        self._gid = gid

    @property
    def id(self):
        """Gets the id of this CatalogPriceRule.


        :return: The id of this CatalogPriceRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogPriceRule.


        :param id: The id of this CatalogPriceRule.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CatalogPriceRule.


        :return: The name of this CatalogPriceRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogPriceRule.


        :param name: The name of this CatalogPriceRule.
        :type name: str
        """

        self._name = name

    @property
    def short_description(self):
        """Gets the short_description of this CatalogPriceRule.


        :return: The short_description of this CatalogPriceRule.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this CatalogPriceRule.


        :param short_description: The short_description of this CatalogPriceRule.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def type(self):
        """Gets the type of this CatalogPriceRule.


        :return: The type of this CatalogPriceRule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CatalogPriceRule.


        :param type: The type of this CatalogPriceRule.
        :type type: str
        """

        self._type = type

    @property
    def usage_count(self):
        """Gets the usage_count of this CatalogPriceRule.


        :return: The usage_count of this CatalogPriceRule.
        :rtype: float
        """
        return self._usage_count

    @usage_count.setter
    def usage_count(self, usage_count):
        """Sets the usage_count of this CatalogPriceRule.


        :param usage_count: The usage_count of this CatalogPriceRule.
        :type usage_count: float
        """

        self._usage_count = usage_count

    @property
    def uses_per_order_limit(self):
        """Gets the uses_per_order_limit of this CatalogPriceRule.


        :return: The uses_per_order_limit of this CatalogPriceRule.
        :rtype: int
        """
        return self._uses_per_order_limit

    @uses_per_order_limit.setter
    def uses_per_order_limit(self, uses_per_order_limit):
        """Sets the uses_per_order_limit of this CatalogPriceRule.


        :param uses_per_order_limit: The uses_per_order_limit of this CatalogPriceRule.
        :type uses_per_order_limit: int
        """

        self._uses_per_order_limit = uses_per_order_limit
