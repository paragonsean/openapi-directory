# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.basket_item_option import BasketItemOption
from openapi_server import util


class BasketItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, id: str=None, name: str=None, options: List[BasketItemOption]=None, parent_id: str=None, price: float=None, product_id: str=None, quantity: float=None, sku: str=None, tax: float=None, variant_id: str=None, weight: float=None, weight_unit: str=None):
        """BasketItem - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this BasketItem.
        :param custom_fields: The custom_fields of this BasketItem.
        :param id: The id of this BasketItem.
        :param name: The name of this BasketItem.
        :param options: The options of this BasketItem.
        :param parent_id: The parent_id of this BasketItem.
        :param price: The price of this BasketItem.
        :param product_id: The product_id of this BasketItem.
        :param quantity: The quantity of this BasketItem.
        :param sku: The sku of this BasketItem.
        :param tax: The tax of this BasketItem.
        :param variant_id: The variant_id of this BasketItem.
        :param weight: The weight of this BasketItem.
        :param weight_unit: The weight_unit of this BasketItem.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'id': str,
            'name': str,
            'options': List[BasketItemOption],
            'parent_id': str,
            'price': float,
            'product_id': str,
            'quantity': float,
            'sku': str,
            'tax': float,
            'variant_id': str,
            'weight': float,
            'weight_unit': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'id': 'id',
            'name': 'name',
            'options': 'options',
            'parent_id': 'parent_id',
            'price': 'price',
            'product_id': 'product_id',
            'quantity': 'quantity',
            'sku': 'sku',
            'tax': 'tax',
            'variant_id': 'variant_id',
            'weight': 'weight',
            'weight_unit': 'weight_unit'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._id = id
        self._name = name
        self._options = options
        self._parent_id = parent_id
        self._price = price
        self._product_id = product_id
        self._quantity = quantity
        self._sku = sku
        self._tax = tax
        self._variant_id = variant_id
        self._weight = weight
        self._weight_unit = weight_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasketItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Basket_Item of this BasketItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this BasketItem.


        :return: The additional_fields of this BasketItem.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this BasketItem.


        :param additional_fields: The additional_fields of this BasketItem.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BasketItem.


        :return: The custom_fields of this BasketItem.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BasketItem.


        :param custom_fields: The custom_fields of this BasketItem.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this BasketItem.


        :return: The id of this BasketItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BasketItem.


        :param id: The id of this BasketItem.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BasketItem.


        :return: The name of this BasketItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasketItem.


        :param name: The name of this BasketItem.
        :type name: str
        """

        self._name = name

    @property
    def options(self):
        """Gets the options of this BasketItem.


        :return: The options of this BasketItem.
        :rtype: List[BasketItemOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this BasketItem.


        :param options: The options of this BasketItem.
        :type options: List[BasketItemOption]
        """

        self._options = options

    @property
    def parent_id(self):
        """Gets the parent_id of this BasketItem.


        :return: The parent_id of this BasketItem.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BasketItem.


        :param parent_id: The parent_id of this BasketItem.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def price(self):
        """Gets the price of this BasketItem.


        :return: The price of this BasketItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BasketItem.


        :param price: The price of this BasketItem.
        :type price: float
        """

        self._price = price

    @property
    def product_id(self):
        """Gets the product_id of this BasketItem.


        :return: The product_id of this BasketItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this BasketItem.


        :param product_id: The product_id of this BasketItem.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this BasketItem.


        :return: The quantity of this BasketItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BasketItem.


        :param quantity: The quantity of this BasketItem.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def sku(self):
        """Gets the sku of this BasketItem.


        :return: The sku of this BasketItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this BasketItem.


        :param sku: The sku of this BasketItem.
        :type sku: str
        """

        self._sku = sku

    @property
    def tax(self):
        """Gets the tax of this BasketItem.


        :return: The tax of this BasketItem.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this BasketItem.


        :param tax: The tax of this BasketItem.
        :type tax: float
        """

        self._tax = tax

    @property
    def variant_id(self):
        """Gets the variant_id of this BasketItem.


        :return: The variant_id of this BasketItem.
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this BasketItem.


        :param variant_id: The variant_id of this BasketItem.
        :type variant_id: str
        """

        self._variant_id = variant_id

    @property
    def weight(self):
        """Gets the weight of this BasketItem.


        :return: The weight of this BasketItem.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this BasketItem.


        :param weight: The weight of this BasketItem.
        :type weight: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this BasketItem.


        :return: The weight_unit of this BasketItem.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this BasketItem.


        :param weight_unit: The weight_unit of this BasketItem.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit
