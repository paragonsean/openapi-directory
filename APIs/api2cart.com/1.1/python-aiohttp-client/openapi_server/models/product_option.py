# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_option_item import ProductOptionItem
from openapi_server import util


class ProductOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, available: bool=None, custom_fields: object=None, description: str=None, id: str=None, name: str=None, option_items: List[ProductOptionItem]=None, product_option_id: str=None, required: bool=None, sort_order: int=None, type: str=None, used_in_combination: bool=None):
        """ProductOption - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this ProductOption.
        :param available: The available of this ProductOption.
        :param custom_fields: The custom_fields of this ProductOption.
        :param description: The description of this ProductOption.
        :param id: The id of this ProductOption.
        :param name: The name of this ProductOption.
        :param option_items: The option_items of this ProductOption.
        :param product_option_id: The product_option_id of this ProductOption.
        :param required: The required of this ProductOption.
        :param sort_order: The sort_order of this ProductOption.
        :param type: The type of this ProductOption.
        :param used_in_combination: The used_in_combination of this ProductOption.
        """
        self.openapi_types = {
            'additional_fields': object,
            'available': bool,
            'custom_fields': object,
            'description': str,
            'id': str,
            'name': str,
            'option_items': List[ProductOptionItem],
            'product_option_id': str,
            'required': bool,
            'sort_order': int,
            'type': str,
            'used_in_combination': bool
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'available': 'available',
            'custom_fields': 'custom_fields',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'option_items': 'option_items',
            'product_option_id': 'product_option_id',
            'required': 'required',
            'sort_order': 'sort_order',
            'type': 'type',
            'used_in_combination': 'used_in_combination'
        }

        self._additional_fields = additional_fields
        self._available = available
        self._custom_fields = custom_fields
        self._description = description
        self._id = id
        self._name = name
        self._option_items = option_items
        self._product_option_id = product_option_id
        self._required = required
        self._sort_order = sort_order
        self._type = type
        self._used_in_combination = used_in_combination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Product_Option of this ProductOption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this ProductOption.


        :return: The additional_fields of this ProductOption.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this ProductOption.


        :param additional_fields: The additional_fields of this ProductOption.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def available(self):
        """Gets the available of this ProductOption.


        :return: The available of this ProductOption.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this ProductOption.


        :param available: The available of this ProductOption.
        :type available: bool
        """

        self._available = available

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ProductOption.


        :return: The custom_fields of this ProductOption.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ProductOption.


        :param custom_fields: The custom_fields of this ProductOption.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this ProductOption.


        :return: The description of this ProductOption.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductOption.


        :param description: The description of this ProductOption.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ProductOption.


        :return: The id of this ProductOption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductOption.


        :param id: The id of this ProductOption.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductOption.


        :return: The name of this ProductOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductOption.


        :param name: The name of this ProductOption.
        :type name: str
        """

        self._name = name

    @property
    def option_items(self):
        """Gets the option_items of this ProductOption.


        :return: The option_items of this ProductOption.
        :rtype: List[ProductOptionItem]
        """
        return self._option_items

    @option_items.setter
    def option_items(self, option_items):
        """Sets the option_items of this ProductOption.


        :param option_items: The option_items of this ProductOption.
        :type option_items: List[ProductOptionItem]
        """

        self._option_items = option_items

    @property
    def product_option_id(self):
        """Gets the product_option_id of this ProductOption.


        :return: The product_option_id of this ProductOption.
        :rtype: str
        """
        return self._product_option_id

    @product_option_id.setter
    def product_option_id(self, product_option_id):
        """Sets the product_option_id of this ProductOption.


        :param product_option_id: The product_option_id of this ProductOption.
        :type product_option_id: str
        """

        self._product_option_id = product_option_id

    @property
    def required(self):
        """Gets the required of this ProductOption.


        :return: The required of this ProductOption.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ProductOption.


        :param required: The required of this ProductOption.
        :type required: bool
        """

        self._required = required

    @property
    def sort_order(self):
        """Gets the sort_order of this ProductOption.


        :return: The sort_order of this ProductOption.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ProductOption.


        :param sort_order: The sort_order of this ProductOption.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def type(self):
        """Gets the type of this ProductOption.


        :return: The type of this ProductOption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductOption.


        :param type: The type of this ProductOption.
        :type type: str
        """

        self._type = type

    @property
    def used_in_combination(self):
        """Gets the used_in_combination of this ProductOption.


        :return: The used_in_combination of this ProductOption.
        :rtype: bool
        """
        return self._used_in_combination

    @used_in_combination.setter
    def used_in_combination(self, used_in_combination):
        """Sets the used_in_combination of this ProductOption.


        :param used_in_combination: The used_in_combination of this ProductOption.
        :type used_in_combination: bool
        """

        self._used_in_combination = used_in_combination
