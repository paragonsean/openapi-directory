# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Language(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, custom_fields: object=None, id: str=None, iso_code: str=None, name: str=None):
        """Language - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this Language.
        :param custom_fields: The custom_fields of this Language.
        :param id: The id of this Language.
        :param iso_code: The iso_code of this Language.
        :param name: The name of this Language.
        """
        self.openapi_types = {
            'additional_fields': object,
            'custom_fields': object,
            'id': str,
            'iso_code': str,
            'name': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'custom_fields': 'custom_fields',
            'id': 'id',
            'iso_code': 'iso_code',
            'name': 'name'
        }

        self._additional_fields = additional_fields
        self._custom_fields = custom_fields
        self._id = id
        self._iso_code = iso_code
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Language':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Language of this Language.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Language.


        :return: The additional_fields of this Language.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Language.


        :param additional_fields: The additional_fields of this Language.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Language.


        :return: The custom_fields of this Language.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Language.


        :param custom_fields: The custom_fields of this Language.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this Language.


        :return: The id of this Language.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Language.


        :param id: The id of this Language.
        :type id: str
        """

        self._id = id

    @property
    def iso_code(self):
        """Gets the iso_code of this Language.


        :return: The iso_code of this Language.
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this Language.


        :param iso_code: The iso_code of this Language.
        :type iso_code: str
        """

        self._iso_code = iso_code

    @property
    def name(self):
        """Gets the name of this Language.


        :return: The name of this Language.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Language.


        :param name: The name of this Language.
        :type name: str
        """

        self._name = name
