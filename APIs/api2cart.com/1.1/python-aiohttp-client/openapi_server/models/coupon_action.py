# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coupon_condition import CouponCondition
from openapi_server import util


class CouponAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, amount: float=None, apply_to: str=None, conditions: List[CouponCondition]=None, currency_code: str=None, custom_fields: object=None, discount_quantity_step: int=None, discounted_quantity: float=None, include_tax: bool=None, logic_operator: str=None, scope: str=None, type: str=None):
        """CouponAction - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this CouponAction.
        :param amount: The amount of this CouponAction.
        :param apply_to: The apply_to of this CouponAction.
        :param conditions: The conditions of this CouponAction.
        :param currency_code: The currency_code of this CouponAction.
        :param custom_fields: The custom_fields of this CouponAction.
        :param discount_quantity_step: The discount_quantity_step of this CouponAction.
        :param discounted_quantity: The discounted_quantity of this CouponAction.
        :param include_tax: The include_tax of this CouponAction.
        :param logic_operator: The logic_operator of this CouponAction.
        :param scope: The scope of this CouponAction.
        :param type: The type of this CouponAction.
        """
        self.openapi_types = {
            'additional_fields': object,
            'amount': float,
            'apply_to': str,
            'conditions': List[CouponCondition],
            'currency_code': str,
            'custom_fields': object,
            'discount_quantity_step': int,
            'discounted_quantity': float,
            'include_tax': bool,
            'logic_operator': str,
            'scope': str,
            'type': str
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'amount': 'amount',
            'apply_to': 'apply_to',
            'conditions': 'conditions',
            'currency_code': 'currency_code',
            'custom_fields': 'custom_fields',
            'discount_quantity_step': 'discount_quantity_step',
            'discounted_quantity': 'discounted_quantity',
            'include_tax': 'include_tax',
            'logic_operator': 'logic_operator',
            'scope': 'scope',
            'type': 'type'
        }

        self._additional_fields = additional_fields
        self._amount = amount
        self._apply_to = apply_to
        self._conditions = conditions
        self._currency_code = currency_code
        self._custom_fields = custom_fields
        self._discount_quantity_step = discount_quantity_step
        self._discounted_quantity = discounted_quantity
        self._include_tax = include_tax
        self._logic_operator = logic_operator
        self._scope = scope
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CouponAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Coupon_Action of this CouponAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this CouponAction.


        :return: The additional_fields of this CouponAction.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this CouponAction.


        :param additional_fields: The additional_fields of this CouponAction.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def amount(self):
        """Gets the amount of this CouponAction.


        :return: The amount of this CouponAction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CouponAction.


        :param amount: The amount of this CouponAction.
        :type amount: float
        """

        self._amount = amount

    @property
    def apply_to(self):
        """Gets the apply_to of this CouponAction.


        :return: The apply_to of this CouponAction.
        :rtype: str
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this CouponAction.


        :param apply_to: The apply_to of this CouponAction.
        :type apply_to: str
        """

        self._apply_to = apply_to

    @property
    def conditions(self):
        """Gets the conditions of this CouponAction.


        :return: The conditions of this CouponAction.
        :rtype: List[CouponCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this CouponAction.


        :param conditions: The conditions of this CouponAction.
        :type conditions: List[CouponCondition]
        """

        self._conditions = conditions

    @property
    def currency_code(self):
        """Gets the currency_code of this CouponAction.


        :return: The currency_code of this CouponAction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CouponAction.


        :param currency_code: The currency_code of this CouponAction.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CouponAction.


        :return: The custom_fields of this CouponAction.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CouponAction.


        :param custom_fields: The custom_fields of this CouponAction.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def discount_quantity_step(self):
        """Gets the discount_quantity_step of this CouponAction.


        :return: The discount_quantity_step of this CouponAction.
        :rtype: int
        """
        return self._discount_quantity_step

    @discount_quantity_step.setter
    def discount_quantity_step(self, discount_quantity_step):
        """Sets the discount_quantity_step of this CouponAction.


        :param discount_quantity_step: The discount_quantity_step of this CouponAction.
        :type discount_quantity_step: int
        """

        self._discount_quantity_step = discount_quantity_step

    @property
    def discounted_quantity(self):
        """Gets the discounted_quantity of this CouponAction.


        :return: The discounted_quantity of this CouponAction.
        :rtype: float
        """
        return self._discounted_quantity

    @discounted_quantity.setter
    def discounted_quantity(self, discounted_quantity):
        """Sets the discounted_quantity of this CouponAction.


        :param discounted_quantity: The discounted_quantity of this CouponAction.
        :type discounted_quantity: float
        """

        self._discounted_quantity = discounted_quantity

    @property
    def include_tax(self):
        """Gets the include_tax of this CouponAction.


        :return: The include_tax of this CouponAction.
        :rtype: bool
        """
        return self._include_tax

    @include_tax.setter
    def include_tax(self, include_tax):
        """Sets the include_tax of this CouponAction.


        :param include_tax: The include_tax of this CouponAction.
        :type include_tax: bool
        """

        self._include_tax = include_tax

    @property
    def logic_operator(self):
        """Gets the logic_operator of this CouponAction.


        :return: The logic_operator of this CouponAction.
        :rtype: str
        """
        return self._logic_operator

    @logic_operator.setter
    def logic_operator(self, logic_operator):
        """Sets the logic_operator of this CouponAction.


        :param logic_operator: The logic_operator of this CouponAction.
        :type logic_operator: str
        """

        self._logic_operator = logic_operator

    @property
    def scope(self):
        """Gets the scope of this CouponAction.


        :return: The scope of this CouponAction.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CouponAction.


        :param scope: The scope of this CouponAction.
        :type scope: str
        """

        self._scope = scope

    @property
    def type(self):
        """Gets the type of this CouponAction.


        :return: The type of this CouponAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CouponAction.


        :param type: The type of this CouponAction.
        :type type: str
        """

        self._type = type
