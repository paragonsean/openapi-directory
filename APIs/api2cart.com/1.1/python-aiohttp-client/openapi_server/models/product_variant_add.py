# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_variant_add_attributes_inner import ProductVariantAddAttributesInner
from openapi_server import util


class ProductVariantAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: List[ProductVariantAddAttributesInner]=None, available_for_sale: bool=True, available_for_view: bool=True, barcode: str=None, clear_cache: bool=True, cost_price: float=None, country_of_origin: str=None, created_at: str=None, description: str=None, harmonized_system_code: str=None, height: float=None, lang_id: str=None, length: float=None, manage_stock: bool=None, manufacturer: str=None, meta_description: str=None, meta_keywords: str=None, meta_title: str=None, model: str=None, name: str=None, price: float=None, product_id: str=None, quantity: float=0, short_description: str=None, sku: str=None, special_price: float=None, sprice_create: str=None, sprice_expire: str=None, sprice_modified: str=None, store_id: str=None, tax_class_id: str=None, taxable: bool=True, url: str=None, warehouse_id: str=None, weight: float=0, weight_unit: str=None, width: float=None):
        """ProductVariantAdd - a model defined in OpenAPI

        :param attributes: The attributes of this ProductVariantAdd.
        :param available_for_sale: The available_for_sale of this ProductVariantAdd.
        :param available_for_view: The available_for_view of this ProductVariantAdd.
        :param barcode: The barcode of this ProductVariantAdd.
        :param clear_cache: The clear_cache of this ProductVariantAdd.
        :param cost_price: The cost_price of this ProductVariantAdd.
        :param country_of_origin: The country_of_origin of this ProductVariantAdd.
        :param created_at: The created_at of this ProductVariantAdd.
        :param description: The description of this ProductVariantAdd.
        :param harmonized_system_code: The harmonized_system_code of this ProductVariantAdd.
        :param height: The height of this ProductVariantAdd.
        :param lang_id: The lang_id of this ProductVariantAdd.
        :param length: The length of this ProductVariantAdd.
        :param manage_stock: The manage_stock of this ProductVariantAdd.
        :param manufacturer: The manufacturer of this ProductVariantAdd.
        :param meta_description: The meta_description of this ProductVariantAdd.
        :param meta_keywords: The meta_keywords of this ProductVariantAdd.
        :param meta_title: The meta_title of this ProductVariantAdd.
        :param model: The model of this ProductVariantAdd.
        :param name: The name of this ProductVariantAdd.
        :param price: The price of this ProductVariantAdd.
        :param product_id: The product_id of this ProductVariantAdd.
        :param quantity: The quantity of this ProductVariantAdd.
        :param short_description: The short_description of this ProductVariantAdd.
        :param sku: The sku of this ProductVariantAdd.
        :param special_price: The special_price of this ProductVariantAdd.
        :param sprice_create: The sprice_create of this ProductVariantAdd.
        :param sprice_expire: The sprice_expire of this ProductVariantAdd.
        :param sprice_modified: The sprice_modified of this ProductVariantAdd.
        :param store_id: The store_id of this ProductVariantAdd.
        :param tax_class_id: The tax_class_id of this ProductVariantAdd.
        :param taxable: The taxable of this ProductVariantAdd.
        :param url: The url of this ProductVariantAdd.
        :param warehouse_id: The warehouse_id of this ProductVariantAdd.
        :param weight: The weight of this ProductVariantAdd.
        :param weight_unit: The weight_unit of this ProductVariantAdd.
        :param width: The width of this ProductVariantAdd.
        """
        self.openapi_types = {
            'attributes': List[ProductVariantAddAttributesInner],
            'available_for_sale': bool,
            'available_for_view': bool,
            'barcode': str,
            'clear_cache': bool,
            'cost_price': float,
            'country_of_origin': str,
            'created_at': str,
            'description': str,
            'harmonized_system_code': str,
            'height': float,
            'lang_id': str,
            'length': float,
            'manage_stock': bool,
            'manufacturer': str,
            'meta_description': str,
            'meta_keywords': str,
            'meta_title': str,
            'model': str,
            'name': str,
            'price': float,
            'product_id': str,
            'quantity': float,
            'short_description': str,
            'sku': str,
            'special_price': float,
            'sprice_create': str,
            'sprice_expire': str,
            'sprice_modified': str,
            'store_id': str,
            'tax_class_id': str,
            'taxable': bool,
            'url': str,
            'warehouse_id': str,
            'weight': float,
            'weight_unit': str,
            'width': float
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'available_for_sale': 'available_for_sale',
            'available_for_view': 'available_for_view',
            'barcode': 'barcode',
            'clear_cache': 'clear_cache',
            'cost_price': 'cost_price',
            'country_of_origin': 'country_of_origin',
            'created_at': 'created_at',
            'description': 'description',
            'harmonized_system_code': 'harmonized_system_code',
            'height': 'height',
            'lang_id': 'lang_id',
            'length': 'length',
            'manage_stock': 'manage_stock',
            'manufacturer': 'manufacturer',
            'meta_description': 'meta_description',
            'meta_keywords': 'meta_keywords',
            'meta_title': 'meta_title',
            'model': 'model',
            'name': 'name',
            'price': 'price',
            'product_id': 'product_id',
            'quantity': 'quantity',
            'short_description': 'short_description',
            'sku': 'sku',
            'special_price': 'special_price',
            'sprice_create': 'sprice_create',
            'sprice_expire': 'sprice_expire',
            'sprice_modified': 'sprice_modified',
            'store_id': 'store_id',
            'tax_class_id': 'tax_class_id',
            'taxable': 'taxable',
            'url': 'url',
            'warehouse_id': 'warehouse_id',
            'weight': 'weight',
            'weight_unit': 'weight_unit',
            'width': 'width'
        }

        self._attributes = attributes
        self._available_for_sale = available_for_sale
        self._available_for_view = available_for_view
        self._barcode = barcode
        self._clear_cache = clear_cache
        self._cost_price = cost_price
        self._country_of_origin = country_of_origin
        self._created_at = created_at
        self._description = description
        self._harmonized_system_code = harmonized_system_code
        self._height = height
        self._lang_id = lang_id
        self._length = length
        self._manage_stock = manage_stock
        self._manufacturer = manufacturer
        self._meta_description = meta_description
        self._meta_keywords = meta_keywords
        self._meta_title = meta_title
        self._model = model
        self._name = name
        self._price = price
        self._product_id = product_id
        self._quantity = quantity
        self._short_description = short_description
        self._sku = sku
        self._special_price = special_price
        self._sprice_create = sprice_create
        self._sprice_expire = sprice_expire
        self._sprice_modified = sprice_modified
        self._store_id = store_id
        self._tax_class_id = tax_class_id
        self._taxable = taxable
        self._url = url
        self._warehouse_id = warehouse_id
        self._weight = weight
        self._weight_unit = weight_unit
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductVariantAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductVariantAdd of this ProductVariantAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this ProductVariantAdd.

        Defines variant's attributes list

        :return: The attributes of this ProductVariantAdd.
        :rtype: List[ProductVariantAddAttributesInner]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProductVariantAdd.

        Defines variant's attributes list

        :param attributes: The attributes of this ProductVariantAdd.
        :type attributes: List[ProductVariantAddAttributesInner]
        """

        self._attributes = attributes

    @property
    def available_for_sale(self):
        """Gets the available_for_sale of this ProductVariantAdd.

        Specifies the set of visible/invisible product's variants for sale

        :return: The available_for_sale of this ProductVariantAdd.
        :rtype: bool
        """
        return self._available_for_sale

    @available_for_sale.setter
    def available_for_sale(self, available_for_sale):
        """Sets the available_for_sale of this ProductVariantAdd.

        Specifies the set of visible/invisible product's variants for sale

        :param available_for_sale: The available_for_sale of this ProductVariantAdd.
        :type available_for_sale: bool
        """

        self._available_for_sale = available_for_sale

    @property
    def available_for_view(self):
        """Gets the available_for_view of this ProductVariantAdd.

        Specifies the set of visible/invisible product's variants for users

        :return: The available_for_view of this ProductVariantAdd.
        :rtype: bool
        """
        return self._available_for_view

    @available_for_view.setter
    def available_for_view(self, available_for_view):
        """Sets the available_for_view of this ProductVariantAdd.

        Specifies the set of visible/invisible product's variants for users

        :param available_for_view: The available_for_view of this ProductVariantAdd.
        :type available_for_view: bool
        """

        self._available_for_view = available_for_view

    @property
    def barcode(self):
        """Gets the barcode of this ProductVariantAdd.

        A barcode is a unique code composed of numbers used as a product identifier.

        :return: The barcode of this ProductVariantAdd.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductVariantAdd.

        A barcode is a unique code composed of numbers used as a product identifier.

        :param barcode: The barcode of this ProductVariantAdd.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def clear_cache(self):
        """Gets the clear_cache of this ProductVariantAdd.

        Is cache clear required

        :return: The clear_cache of this ProductVariantAdd.
        :rtype: bool
        """
        return self._clear_cache

    @clear_cache.setter
    def clear_cache(self, clear_cache):
        """Sets the clear_cache of this ProductVariantAdd.

        Is cache clear required

        :param clear_cache: The clear_cache of this ProductVariantAdd.
        :type clear_cache: bool
        """

        self._clear_cache = clear_cache

    @property
    def cost_price(self):
        """Gets the cost_price of this ProductVariantAdd.

        Defines new product's cost price

        :return: The cost_price of this ProductVariantAdd.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this ProductVariantAdd.

        Defines new product's cost price

        :param cost_price: The cost_price of this ProductVariantAdd.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def country_of_origin(self):
        """Gets the country_of_origin of this ProductVariantAdd.

        The country where the inventory item was made

        :return: The country_of_origin of this ProductVariantAdd.
        :rtype: str
        """
        return self._country_of_origin

    @country_of_origin.setter
    def country_of_origin(self, country_of_origin):
        """Sets the country_of_origin of this ProductVariantAdd.

        The country where the inventory item was made

        :param country_of_origin: The country_of_origin of this ProductVariantAdd.
        :type country_of_origin: str
        """

        self._country_of_origin = country_of_origin

    @property
    def created_at(self):
        """Gets the created_at of this ProductVariantAdd.

        Defines the date of entity creation

        :return: The created_at of this ProductVariantAdd.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProductVariantAdd.

        Defines the date of entity creation

        :param created_at: The created_at of this ProductVariantAdd.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ProductVariantAdd.

        Specifies variant's description

        :return: The description of this ProductVariantAdd.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductVariantAdd.

        Specifies variant's description

        :param description: The description of this ProductVariantAdd.
        :type description: str
        """

        self._description = description

    @property
    def harmonized_system_code(self):
        """Gets the harmonized_system_code of this ProductVariantAdd.

        Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes

        :return: The harmonized_system_code of this ProductVariantAdd.
        :rtype: str
        """
        return self._harmonized_system_code

    @harmonized_system_code.setter
    def harmonized_system_code(self, harmonized_system_code):
        """Sets the harmonized_system_code of this ProductVariantAdd.

        Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes

        :param harmonized_system_code: The harmonized_system_code of this ProductVariantAdd.
        :type harmonized_system_code: str
        """

        self._harmonized_system_code = harmonized_system_code

    @property
    def height(self):
        """Gets the height of this ProductVariantAdd.

        Defines product's height

        :return: The height of this ProductVariantAdd.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ProductVariantAdd.

        Defines product's height

        :param height: The height of this ProductVariantAdd.
        :type height: float
        """

        self._height = height

    @property
    def lang_id(self):
        """Gets the lang_id of this ProductVariantAdd.

        Language id

        :return: The lang_id of this ProductVariantAdd.
        :rtype: str
        """
        return self._lang_id

    @lang_id.setter
    def lang_id(self, lang_id):
        """Sets the lang_id of this ProductVariantAdd.

        Language id

        :param lang_id: The lang_id of this ProductVariantAdd.
        :type lang_id: str
        """

        self._lang_id = lang_id

    @property
    def length(self):
        """Gets the length of this ProductVariantAdd.

        Defines product's length

        :return: The length of this ProductVariantAdd.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ProductVariantAdd.

        Defines product's length

        :param length: The length of this ProductVariantAdd.
        :type length: float
        """

        self._length = length

    @property
    def manage_stock(self):
        """Gets the manage_stock of this ProductVariantAdd.

        Defines inventory tracking for product variant

        :return: The manage_stock of this ProductVariantAdd.
        :rtype: bool
        """
        return self._manage_stock

    @manage_stock.setter
    def manage_stock(self, manage_stock):
        """Sets the manage_stock of this ProductVariantAdd.

        Defines inventory tracking for product variant

        :param manage_stock: The manage_stock of this ProductVariantAdd.
        :type manage_stock: bool
        """

        self._manage_stock = manage_stock

    @property
    def manufacturer(self):
        """Gets the manufacturer of this ProductVariantAdd.

        Specifies the product variant's manufacturer

        :return: The manufacturer of this ProductVariantAdd.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this ProductVariantAdd.

        Specifies the product variant's manufacturer

        :param manufacturer: The manufacturer of this ProductVariantAdd.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def meta_description(self):
        """Gets the meta_description of this ProductVariantAdd.

        Defines unique meta description of a entity

        :return: The meta_description of this ProductVariantAdd.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this ProductVariantAdd.

        Defines unique meta description of a entity

        :param meta_description: The meta_description of this ProductVariantAdd.
        :type meta_description: str
        """

        self._meta_description = meta_description

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this ProductVariantAdd.

        Defines unique meta keywords for each entity

        :return: The meta_keywords of this ProductVariantAdd.
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this ProductVariantAdd.

        Defines unique meta keywords for each entity

        :param meta_keywords: The meta_keywords of this ProductVariantAdd.
        :type meta_keywords: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_title(self):
        """Gets the meta_title of this ProductVariantAdd.

        Defines unique meta title for each entity

        :return: The meta_title of this ProductVariantAdd.
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this ProductVariantAdd.

        Defines unique meta title for each entity

        :param meta_title: The meta_title of this ProductVariantAdd.
        :type meta_title: str
        """

        self._meta_title = meta_title

    @property
    def model(self):
        """Gets the model of this ProductVariantAdd.

        Specifies variant's model that has to be added

        :return: The model of this ProductVariantAdd.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProductVariantAdd.

        Specifies variant's model that has to be added

        :param model: The model of this ProductVariantAdd.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")

        self._model = model

    @property
    def name(self):
        """Gets the name of this ProductVariantAdd.

        Defines variant's name that has to be added

        :return: The name of this ProductVariantAdd.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductVariantAdd.

        Defines variant's name that has to be added

        :param name: The name of this ProductVariantAdd.
        :type name: str
        """

        self._name = name

    @property
    def price(self):
        """Gets the price of this ProductVariantAdd.

        Defines new product's variant price

        :return: The price of this ProductVariantAdd.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductVariantAdd.

        Defines new product's variant price

        :param price: The price of this ProductVariantAdd.
        :type price: float
        """

        self._price = price

    @property
    def product_id(self):
        """Gets the product_id of this ProductVariantAdd.

        Defines product's id where the variant has to be added

        :return: The product_id of this ProductVariantAdd.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductVariantAdd.

        Defines product's id where the variant has to be added

        :param product_id: The product_id of this ProductVariantAdd.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this ProductVariantAdd.

        Defines product variant's quantity that has to be added

        :return: The quantity of this ProductVariantAdd.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductVariantAdd.

        Defines product variant's quantity that has to be added

        :param quantity: The quantity of this ProductVariantAdd.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def short_description(self):
        """Gets the short_description of this ProductVariantAdd.

        Defines short description

        :return: The short_description of this ProductVariantAdd.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductVariantAdd.

        Defines short description

        :param short_description: The short_description of this ProductVariantAdd.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def sku(self):
        """Gets the sku of this ProductVariantAdd.

        Defines variant's sku that has to be added

        :return: The sku of this ProductVariantAdd.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductVariantAdd.

        Defines variant's sku that has to be added

        :param sku: The sku of this ProductVariantAdd.
        :type sku: str
        """

        self._sku = sku

    @property
    def special_price(self):
        """Gets the special_price of this ProductVariantAdd.

        Specifies variant's model that has to be added

        :return: The special_price of this ProductVariantAdd.
        :rtype: float
        """
        return self._special_price

    @special_price.setter
    def special_price(self, special_price):
        """Sets the special_price of this ProductVariantAdd.

        Specifies variant's model that has to be added

        :param special_price: The special_price of this ProductVariantAdd.
        :type special_price: float
        """

        self._special_price = special_price

    @property
    def sprice_create(self):
        """Gets the sprice_create of this ProductVariantAdd.

        Defines the date of special price creation

        :return: The sprice_create of this ProductVariantAdd.
        :rtype: str
        """
        return self._sprice_create

    @sprice_create.setter
    def sprice_create(self, sprice_create):
        """Sets the sprice_create of this ProductVariantAdd.

        Defines the date of special price creation

        :param sprice_create: The sprice_create of this ProductVariantAdd.
        :type sprice_create: str
        """

        self._sprice_create = sprice_create

    @property
    def sprice_expire(self):
        """Gets the sprice_expire of this ProductVariantAdd.

        Defines the term of special price offer duration

        :return: The sprice_expire of this ProductVariantAdd.
        :rtype: str
        """
        return self._sprice_expire

    @sprice_expire.setter
    def sprice_expire(self, sprice_expire):
        """Sets the sprice_expire of this ProductVariantAdd.

        Defines the term of special price offer duration

        :param sprice_expire: The sprice_expire of this ProductVariantAdd.
        :type sprice_expire: str
        """

        self._sprice_expire = sprice_expire

    @property
    def sprice_modified(self):
        """Gets the sprice_modified of this ProductVariantAdd.

        Defines the date of special price modification

        :return: The sprice_modified of this ProductVariantAdd.
        :rtype: str
        """
        return self._sprice_modified

    @sprice_modified.setter
    def sprice_modified(self, sprice_modified):
        """Sets the sprice_modified of this ProductVariantAdd.

        Defines the date of special price modification

        :param sprice_modified: The sprice_modified of this ProductVariantAdd.
        :type sprice_modified: str
        """

        self._sprice_modified = sprice_modified

    @property
    def store_id(self):
        """Gets the store_id of this ProductVariantAdd.

        Add variants specified by store id

        :return: The store_id of this ProductVariantAdd.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ProductVariantAdd.

        Add variants specified by store id

        :param store_id: The store_id of this ProductVariantAdd.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this ProductVariantAdd.

        Defines tax classes where entity has to be added

        :return: The tax_class_id of this ProductVariantAdd.
        :rtype: str
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this ProductVariantAdd.

        Defines tax classes where entity has to be added

        :param tax_class_id: The tax_class_id of this ProductVariantAdd.
        :type tax_class_id: str
        """

        self._tax_class_id = tax_class_id

    @property
    def taxable(self):
        """Gets the taxable of this ProductVariantAdd.

        Specifies whether a tax is charged

        :return: The taxable of this ProductVariantAdd.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this ProductVariantAdd.

        Specifies whether a tax is charged

        :param taxable: The taxable of this ProductVariantAdd.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def url(self):
        """Gets the url of this ProductVariantAdd.

        Defines unique product variant's URL

        :return: The url of this ProductVariantAdd.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductVariantAdd.

        Defines unique product variant's URL

        :param url: The url of this ProductVariantAdd.
        :type url: str
        """

        self._url = url

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ProductVariantAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :return: The warehouse_id of this ProductVariantAdd.
        :rtype: str
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ProductVariantAdd.

        This parameter is used for selecting a warehouse where you need to set/modify a product quantity.

        :param warehouse_id: The warehouse_id of this ProductVariantAdd.
        :type warehouse_id: str
        """

        self._warehouse_id = warehouse_id

    @property
    def weight(self):
        """Gets the weight of this ProductVariantAdd.

        Weight

        :return: The weight of this ProductVariantAdd.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProductVariantAdd.

        Weight

        :param weight: The weight of this ProductVariantAdd.
        :type weight: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this ProductVariantAdd.

        Weight Unit

        :return: The weight_unit of this ProductVariantAdd.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this ProductVariantAdd.

        Weight Unit

        :param weight_unit: The weight_unit of this ProductVariantAdd.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit

    @property
    def width(self):
        """Gets the width of this ProductVariantAdd.

        Defines product's width

        :return: The width of this ProductVariantAdd.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ProductVariantAdd.

        Defines product's width

        :param width: The width of this ProductVariantAdd.
        :type width: float
        """

        self._width = width
