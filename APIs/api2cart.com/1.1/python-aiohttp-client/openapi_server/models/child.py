# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.a2_c_date_time import A2CDateTime
from openapi_server.models.discount import Discount
from openapi_server.models.image import Image
from openapi_server.models.product_advanced_price import ProductAdvancedPrice
from openapi_server.models.product_child_item_combination import ProductChildItemCombination
from openapi_server.models.product_inventory import ProductInventory
from openapi_server import util


class Child(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: object=None, advanced_price: List[ProductAdvancedPrice]=None, allow_backorders: bool=None, avail_for_sale: bool=None, combination: List[ProductChildItemCombination]=None, cost_price: float=None, created_time: A2CDateTime=None, custom_fields: object=None, default_price: float=None, default_qty_in_pack: float=None, dimensions_unit: str=None, discounts: List[Discount]=None, ean: str=None, full_description: str=None, gtin: str=None, height: float=None, id: str=None, images: List[Image]=None, in_stock: bool=None, inventory: List[ProductInventory]=None, inventory_level: float=None, is_qty_in_pack_fixed: bool=None, isbn: str=None, length: float=None, list_price: float=None, manage_stock: bool=None, meta_description: str=None, meta_keywords: str=None, meta_title: str=None, min_quantity: float=None, modified_time: A2CDateTime=None, mpn: str=None, name: str=None, parent_id: str=None, short_description: str=None, sku: str=None, sort_order: int=None, tax_class_id: str=None, upc: str=None, url: str=None, weight: float=None, weight_unit: str=None, wholesale_price: float=None, width: float=None):
        """Child - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this Child.
        :param advanced_price: The advanced_price of this Child.
        :param allow_backorders: The allow_backorders of this Child.
        :param avail_for_sale: The avail_for_sale of this Child.
        :param combination: The combination of this Child.
        :param cost_price: The cost_price of this Child.
        :param created_time: The created_time of this Child.
        :param custom_fields: The custom_fields of this Child.
        :param default_price: The default_price of this Child.
        :param default_qty_in_pack: The default_qty_in_pack of this Child.
        :param dimensions_unit: The dimensions_unit of this Child.
        :param discounts: The discounts of this Child.
        :param ean: The ean of this Child.
        :param full_description: The full_description of this Child.
        :param gtin: The gtin of this Child.
        :param height: The height of this Child.
        :param id: The id of this Child.
        :param images: The images of this Child.
        :param in_stock: The in_stock of this Child.
        :param inventory: The inventory of this Child.
        :param inventory_level: The inventory_level of this Child.
        :param is_qty_in_pack_fixed: The is_qty_in_pack_fixed of this Child.
        :param isbn: The isbn of this Child.
        :param length: The length of this Child.
        :param list_price: The list_price of this Child.
        :param manage_stock: The manage_stock of this Child.
        :param meta_description: The meta_description of this Child.
        :param meta_keywords: The meta_keywords of this Child.
        :param meta_title: The meta_title of this Child.
        :param min_quantity: The min_quantity of this Child.
        :param modified_time: The modified_time of this Child.
        :param mpn: The mpn of this Child.
        :param name: The name of this Child.
        :param parent_id: The parent_id of this Child.
        :param short_description: The short_description of this Child.
        :param sku: The sku of this Child.
        :param sort_order: The sort_order of this Child.
        :param tax_class_id: The tax_class_id of this Child.
        :param upc: The upc of this Child.
        :param url: The url of this Child.
        :param weight: The weight of this Child.
        :param weight_unit: The weight_unit of this Child.
        :param wholesale_price: The wholesale_price of this Child.
        :param width: The width of this Child.
        """
        self.openapi_types = {
            'additional_fields': object,
            'advanced_price': List[ProductAdvancedPrice],
            'allow_backorders': bool,
            'avail_for_sale': bool,
            'combination': List[ProductChildItemCombination],
            'cost_price': float,
            'created_time': A2CDateTime,
            'custom_fields': object,
            'default_price': float,
            'default_qty_in_pack': float,
            'dimensions_unit': str,
            'discounts': List[Discount],
            'ean': str,
            'full_description': str,
            'gtin': str,
            'height': float,
            'id': str,
            'images': List[Image],
            'in_stock': bool,
            'inventory': List[ProductInventory],
            'inventory_level': float,
            'is_qty_in_pack_fixed': bool,
            'isbn': str,
            'length': float,
            'list_price': float,
            'manage_stock': bool,
            'meta_description': str,
            'meta_keywords': str,
            'meta_title': str,
            'min_quantity': float,
            'modified_time': A2CDateTime,
            'mpn': str,
            'name': str,
            'parent_id': str,
            'short_description': str,
            'sku': str,
            'sort_order': int,
            'tax_class_id': str,
            'upc': str,
            'url': str,
            'weight': float,
            'weight_unit': str,
            'wholesale_price': float,
            'width': float
        }

        self.attribute_map = {
            'additional_fields': 'additional_fields',
            'advanced_price': 'advanced_price',
            'allow_backorders': 'allow_backorders',
            'avail_for_sale': 'avail_for_sale',
            'combination': 'combination',
            'cost_price': 'cost_price',
            'created_time': 'created_time',
            'custom_fields': 'custom_fields',
            'default_price': 'default_price',
            'default_qty_in_pack': 'default_qty_in_pack',
            'dimensions_unit': 'dimensions_unit',
            'discounts': 'discounts',
            'ean': 'ean',
            'full_description': 'full_description',
            'gtin': 'gtin',
            'height': 'height',
            'id': 'id',
            'images': 'images',
            'in_stock': 'in_stock',
            'inventory': 'inventory',
            'inventory_level': 'inventory_level',
            'is_qty_in_pack_fixed': 'is_qty_in_pack_fixed',
            'isbn': 'isbn',
            'length': 'length',
            'list_price': 'list_price',
            'manage_stock': 'manage_stock',
            'meta_description': 'meta_description',
            'meta_keywords': 'meta_keywords',
            'meta_title': 'meta_title',
            'min_quantity': 'min_quantity',
            'modified_time': 'modified_time',
            'mpn': 'mpn',
            'name': 'name',
            'parent_id': 'parent_id',
            'short_description': 'short_description',
            'sku': 'sku',
            'sort_order': 'sort_order',
            'tax_class_id': 'tax_class_id',
            'upc': 'upc',
            'url': 'url',
            'weight': 'weight',
            'weight_unit': 'weight_unit',
            'wholesale_price': 'wholesale_price',
            'width': 'width'
        }

        self._additional_fields = additional_fields
        self._advanced_price = advanced_price
        self._allow_backorders = allow_backorders
        self._avail_for_sale = avail_for_sale
        self._combination = combination
        self._cost_price = cost_price
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._default_price = default_price
        self._default_qty_in_pack = default_qty_in_pack
        self._dimensions_unit = dimensions_unit
        self._discounts = discounts
        self._ean = ean
        self._full_description = full_description
        self._gtin = gtin
        self._height = height
        self._id = id
        self._images = images
        self._in_stock = in_stock
        self._inventory = inventory
        self._inventory_level = inventory_level
        self._is_qty_in_pack_fixed = is_qty_in_pack_fixed
        self._isbn = isbn
        self._length = length
        self._list_price = list_price
        self._manage_stock = manage_stock
        self._meta_description = meta_description
        self._meta_keywords = meta_keywords
        self._meta_title = meta_title
        self._min_quantity = min_quantity
        self._modified_time = modified_time
        self._mpn = mpn
        self._name = name
        self._parent_id = parent_id
        self._short_description = short_description
        self._sku = sku
        self._sort_order = sort_order
        self._tax_class_id = tax_class_id
        self._upc = upc
        self._url = url
        self._weight = weight
        self._weight_unit = weight_unit
        self._wholesale_price = wholesale_price
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Child':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Child of this Child.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Child.


        :return: The additional_fields of this Child.
        :rtype: object
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Child.


        :param additional_fields: The additional_fields of this Child.
        :type additional_fields: object
        """

        self._additional_fields = additional_fields

    @property
    def advanced_price(self):
        """Gets the advanced_price of this Child.


        :return: The advanced_price of this Child.
        :rtype: List[ProductAdvancedPrice]
        """
        return self._advanced_price

    @advanced_price.setter
    def advanced_price(self, advanced_price):
        """Sets the advanced_price of this Child.


        :param advanced_price: The advanced_price of this Child.
        :type advanced_price: List[ProductAdvancedPrice]
        """

        self._advanced_price = advanced_price

    @property
    def allow_backorders(self):
        """Gets the allow_backorders of this Child.


        :return: The allow_backorders of this Child.
        :rtype: bool
        """
        return self._allow_backorders

    @allow_backorders.setter
    def allow_backorders(self, allow_backorders):
        """Sets the allow_backorders of this Child.


        :param allow_backorders: The allow_backorders of this Child.
        :type allow_backorders: bool
        """

        self._allow_backorders = allow_backorders

    @property
    def avail_for_sale(self):
        """Gets the avail_for_sale of this Child.


        :return: The avail_for_sale of this Child.
        :rtype: bool
        """
        return self._avail_for_sale

    @avail_for_sale.setter
    def avail_for_sale(self, avail_for_sale):
        """Sets the avail_for_sale of this Child.


        :param avail_for_sale: The avail_for_sale of this Child.
        :type avail_for_sale: bool
        """

        self._avail_for_sale = avail_for_sale

    @property
    def combination(self):
        """Gets the combination of this Child.


        :return: The combination of this Child.
        :rtype: List[ProductChildItemCombination]
        """
        return self._combination

    @combination.setter
    def combination(self, combination):
        """Sets the combination of this Child.


        :param combination: The combination of this Child.
        :type combination: List[ProductChildItemCombination]
        """

        self._combination = combination

    @property
    def cost_price(self):
        """Gets the cost_price of this Child.


        :return: The cost_price of this Child.
        :rtype: float
        """
        return self._cost_price

    @cost_price.setter
    def cost_price(self, cost_price):
        """Sets the cost_price of this Child.


        :param cost_price: The cost_price of this Child.
        :type cost_price: float
        """

        self._cost_price = cost_price

    @property
    def created_time(self):
        """Gets the created_time of this Child.


        :return: The created_time of this Child.
        :rtype: A2CDateTime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Child.


        :param created_time: The created_time of this Child.
        :type created_time: A2CDateTime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Child.


        :return: The custom_fields of this Child.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Child.


        :param custom_fields: The custom_fields of this Child.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def default_price(self):
        """Gets the default_price of this Child.


        :return: The default_price of this Child.
        :rtype: float
        """
        return self._default_price

    @default_price.setter
    def default_price(self, default_price):
        """Sets the default_price of this Child.


        :param default_price: The default_price of this Child.
        :type default_price: float
        """

        self._default_price = default_price

    @property
    def default_qty_in_pack(self):
        """Gets the default_qty_in_pack of this Child.


        :return: The default_qty_in_pack of this Child.
        :rtype: float
        """
        return self._default_qty_in_pack

    @default_qty_in_pack.setter
    def default_qty_in_pack(self, default_qty_in_pack):
        """Sets the default_qty_in_pack of this Child.


        :param default_qty_in_pack: The default_qty_in_pack of this Child.
        :type default_qty_in_pack: float
        """

        self._default_qty_in_pack = default_qty_in_pack

    @property
    def dimensions_unit(self):
        """Gets the dimensions_unit of this Child.


        :return: The dimensions_unit of this Child.
        :rtype: str
        """
        return self._dimensions_unit

    @dimensions_unit.setter
    def dimensions_unit(self, dimensions_unit):
        """Sets the dimensions_unit of this Child.


        :param dimensions_unit: The dimensions_unit of this Child.
        :type dimensions_unit: str
        """

        self._dimensions_unit = dimensions_unit

    @property
    def discounts(self):
        """Gets the discounts of this Child.


        :return: The discounts of this Child.
        :rtype: List[Discount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Child.


        :param discounts: The discounts of this Child.
        :type discounts: List[Discount]
        """

        self._discounts = discounts

    @property
    def ean(self):
        """Gets the ean of this Child.


        :return: The ean of this Child.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Child.


        :param ean: The ean of this Child.
        :type ean: str
        """

        self._ean = ean

    @property
    def full_description(self):
        """Gets the full_description of this Child.


        :return: The full_description of this Child.
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this Child.


        :param full_description: The full_description of this Child.
        :type full_description: str
        """

        self._full_description = full_description

    @property
    def gtin(self):
        """Gets the gtin of this Child.


        :return: The gtin of this Child.
        :rtype: str
        """
        return self._gtin

    @gtin.setter
    def gtin(self, gtin):
        """Sets the gtin of this Child.


        :param gtin: The gtin of this Child.
        :type gtin: str
        """

        self._gtin = gtin

    @property
    def height(self):
        """Gets the height of this Child.


        :return: The height of this Child.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Child.


        :param height: The height of this Child.
        :type height: float
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Child.


        :return: The id of this Child.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Child.


        :param id: The id of this Child.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this Child.


        :return: The images of this Child.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Child.


        :param images: The images of this Child.
        :type images: List[Image]
        """

        self._images = images

    @property
    def in_stock(self):
        """Gets the in_stock of this Child.


        :return: The in_stock of this Child.
        :rtype: bool
        """
        return self._in_stock

    @in_stock.setter
    def in_stock(self, in_stock):
        """Sets the in_stock of this Child.


        :param in_stock: The in_stock of this Child.
        :type in_stock: bool
        """

        self._in_stock = in_stock

    @property
    def inventory(self):
        """Gets the inventory of this Child.


        :return: The inventory of this Child.
        :rtype: List[ProductInventory]
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this Child.


        :param inventory: The inventory of this Child.
        :type inventory: List[ProductInventory]
        """

        self._inventory = inventory

    @property
    def inventory_level(self):
        """Gets the inventory_level of this Child.


        :return: The inventory_level of this Child.
        :rtype: float
        """
        return self._inventory_level

    @inventory_level.setter
    def inventory_level(self, inventory_level):
        """Sets the inventory_level of this Child.


        :param inventory_level: The inventory_level of this Child.
        :type inventory_level: float
        """

        self._inventory_level = inventory_level

    @property
    def is_qty_in_pack_fixed(self):
        """Gets the is_qty_in_pack_fixed of this Child.


        :return: The is_qty_in_pack_fixed of this Child.
        :rtype: bool
        """
        return self._is_qty_in_pack_fixed

    @is_qty_in_pack_fixed.setter
    def is_qty_in_pack_fixed(self, is_qty_in_pack_fixed):
        """Sets the is_qty_in_pack_fixed of this Child.


        :param is_qty_in_pack_fixed: The is_qty_in_pack_fixed of this Child.
        :type is_qty_in_pack_fixed: bool
        """

        self._is_qty_in_pack_fixed = is_qty_in_pack_fixed

    @property
    def isbn(self):
        """Gets the isbn of this Child.


        :return: The isbn of this Child.
        :rtype: str
        """
        return self._isbn

    @isbn.setter
    def isbn(self, isbn):
        """Sets the isbn of this Child.


        :param isbn: The isbn of this Child.
        :type isbn: str
        """

        self._isbn = isbn

    @property
    def length(self):
        """Gets the length of this Child.


        :return: The length of this Child.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Child.


        :param length: The length of this Child.
        :type length: float
        """

        self._length = length

    @property
    def list_price(self):
        """Gets the list_price of this Child.


        :return: The list_price of this Child.
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this Child.


        :param list_price: The list_price of this Child.
        :type list_price: float
        """

        self._list_price = list_price

    @property
    def manage_stock(self):
        """Gets the manage_stock of this Child.


        :return: The manage_stock of this Child.
        :rtype: bool
        """
        return self._manage_stock

    @manage_stock.setter
    def manage_stock(self, manage_stock):
        """Sets the manage_stock of this Child.


        :param manage_stock: The manage_stock of this Child.
        :type manage_stock: bool
        """

        self._manage_stock = manage_stock

    @property
    def meta_description(self):
        """Gets the meta_description of this Child.


        :return: The meta_description of this Child.
        :rtype: str
        """
        return self._meta_description

    @meta_description.setter
    def meta_description(self, meta_description):
        """Sets the meta_description of this Child.


        :param meta_description: The meta_description of this Child.
        :type meta_description: str
        """

        self._meta_description = meta_description

    @property
    def meta_keywords(self):
        """Gets the meta_keywords of this Child.


        :return: The meta_keywords of this Child.
        :rtype: str
        """
        return self._meta_keywords

    @meta_keywords.setter
    def meta_keywords(self, meta_keywords):
        """Sets the meta_keywords of this Child.


        :param meta_keywords: The meta_keywords of this Child.
        :type meta_keywords: str
        """

        self._meta_keywords = meta_keywords

    @property
    def meta_title(self):
        """Gets the meta_title of this Child.


        :return: The meta_title of this Child.
        :rtype: str
        """
        return self._meta_title

    @meta_title.setter
    def meta_title(self, meta_title):
        """Sets the meta_title of this Child.


        :param meta_title: The meta_title of this Child.
        :type meta_title: str
        """

        self._meta_title = meta_title

    @property
    def min_quantity(self):
        """Gets the min_quantity of this Child.


        :return: The min_quantity of this Child.
        :rtype: float
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this Child.


        :param min_quantity: The min_quantity of this Child.
        :type min_quantity: float
        """

        self._min_quantity = min_quantity

    @property
    def modified_time(self):
        """Gets the modified_time of this Child.


        :return: The modified_time of this Child.
        :rtype: A2CDateTime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Child.


        :param modified_time: The modified_time of this Child.
        :type modified_time: A2CDateTime
        """

        self._modified_time = modified_time

    @property
    def mpn(self):
        """Gets the mpn of this Child.


        :return: The mpn of this Child.
        :rtype: str
        """
        return self._mpn

    @mpn.setter
    def mpn(self, mpn):
        """Sets the mpn of this Child.


        :param mpn: The mpn of this Child.
        :type mpn: str
        """

        self._mpn = mpn

    @property
    def name(self):
        """Gets the name of this Child.


        :return: The name of this Child.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Child.


        :param name: The name of this Child.
        :type name: str
        """

        self._name = name

    @property
    def parent_id(self):
        """Gets the parent_id of this Child.


        :return: The parent_id of this Child.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Child.


        :param parent_id: The parent_id of this Child.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def short_description(self):
        """Gets the short_description of this Child.


        :return: The short_description of this Child.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Child.


        :param short_description: The short_description of this Child.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def sku(self):
        """Gets the sku of this Child.


        :return: The sku of this Child.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Child.


        :param sku: The sku of this Child.
        :type sku: str
        """

        self._sku = sku

    @property
    def sort_order(self):
        """Gets the sort_order of this Child.


        :return: The sort_order of this Child.
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Child.


        :param sort_order: The sort_order of this Child.
        :type sort_order: int
        """

        self._sort_order = sort_order

    @property
    def tax_class_id(self):
        """Gets the tax_class_id of this Child.


        :return: The tax_class_id of this Child.
        :rtype: str
        """
        return self._tax_class_id

    @tax_class_id.setter
    def tax_class_id(self, tax_class_id):
        """Sets the tax_class_id of this Child.


        :param tax_class_id: The tax_class_id of this Child.
        :type tax_class_id: str
        """

        self._tax_class_id = tax_class_id

    @property
    def upc(self):
        """Gets the upc of this Child.


        :return: The upc of this Child.
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this Child.


        :param upc: The upc of this Child.
        :type upc: str
        """

        self._upc = upc

    @property
    def url(self):
        """Gets the url of this Child.


        :return: The url of this Child.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Child.


        :param url: The url of this Child.
        :type url: str
        """

        self._url = url

    @property
    def weight(self):
        """Gets the weight of this Child.


        :return: The weight of this Child.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Child.


        :param weight: The weight of this Child.
        :type weight: float
        """

        self._weight = weight

    @property
    def weight_unit(self):
        """Gets the weight_unit of this Child.


        :return: The weight_unit of this Child.
        :rtype: str
        """
        return self._weight_unit

    @weight_unit.setter
    def weight_unit(self, weight_unit):
        """Sets the weight_unit of this Child.


        :param weight_unit: The weight_unit of this Child.
        :type weight_unit: str
        """

        self._weight_unit = weight_unit

    @property
    def wholesale_price(self):
        """Gets the wholesale_price of this Child.


        :return: The wholesale_price of this Child.
        :rtype: float
        """
        return self._wholesale_price

    @wholesale_price.setter
    def wholesale_price(self, wholesale_price):
        """Sets the wholesale_price of this Child.


        :param wholesale_price: The wholesale_price of this Child.
        :type wholesale_price: float
        """

        self._wholesale_price = wholesale_price

    @property
    def width(self):
        """Gets the width of this Child.


        :return: The width of this Child.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Child.


        :param width: The width of this Child.
        :type width: float
        """

        self._width = width
