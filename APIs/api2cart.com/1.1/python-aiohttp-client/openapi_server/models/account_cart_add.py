# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_cart_add_hybris_websites_inner import AccountCartAddHybrisWebsitesInner
from openapi_server import util


class AccountCartAdd(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _3dcart_access_token: str=None, _3dcart_private_key: str=None, _3dcartapi_api_key: str=None, amazon_access_key_id: str=None, amazon_access_token: str=None, amazon_marketplaces_ids: str=None, amazon_secret_key: str=None, amazon_seller_id: str=None, amazon_sp_api_environment: str='production', amazon_sp_aws_region: str=None, amazon_sp_aws_role_arn: str=None, amazon_sp_aws_user_key_id: str=None, amazon_sp_aws_user_secret: str=None, amazon_sp_client_id: str=None, amazon_sp_client_secret: str=None, amazon_sp_refresh_token: str=None, aspdotnetstorefront_api_pass: str=None, aspdotnetstorefront_api_user: str=None, bigcommerceapi_access_token: str=None, bigcommerceapi_admin_account: str=None, bigcommerceapi_api_key: str=None, bigcommerceapi_api_path: str=None, bigcommerceapi_client_id: str=None, bigcommerceapi_context: str=None, bridge_url: str=None, cart_id: str=None, commercehq_api_key: str=None, commercehq_api_password: str=None, db_tables_prefix: str=None, demandware_api_password: str=None, demandware_client_id: str=None, demandware_user_name: str=None, demandware_user_password: str=None, ebay_access_token: str=None, ebay_client_id: str=None, ebay_client_secret: str=None, ebay_environment: str='production', ebay_refresh_token: str=None, ebay_runame: str=None, ebay_site_id: int=0, ecwid_acess_token: str=None, ecwid_store_id: str=None, etsy_access_token: str=None, etsy_client_id: str=None, etsy_keystring: str=None, etsy_refresh_token: str=None, etsy_shared_secret: str=None, etsy_token_secret: str=None, ftp_host: str=None, ftp_password: str=None, ftp_port: int=None, ftp_store_dir: str=None, ftp_user: str=None, hybris_client_id: str=None, hybris_client_secret: str=None, hybris_password: str=None, hybris_username: str=None, hybris_websites: List[AccountCartAddHybrisWebsitesInner]=None, lightspeed_api_key: str=None, lightspeed_api_secret: str=None, magento_access_token: str=None, magento_consumer_key: str=None, magento_consumer_secret: str=None, magento_token_secret: str=None, mercado_libre_app_id: str=None, mercado_libre_app_secret_key: str=None, mercado_libre_refresh_token: str=None, neto_api_key: str=None, neto_api_username: str=None, prestashop_webservice_key: str=None, shopify_access_token: str=None, shopify_api_key: str=None, shopify_api_password: str=None, shopify_shared_secret: str=None, shopware_access_key: str=None, shopware_api_key: str=None, shopware_api_secret: str=None, squarespace_api_key: str=None, store_key: str=None, store_root: str=None, store_url: str=None, validate_version: bool=False, verify: bool=True, volusion_login: str=None, volusion_password: str=None, walmart_channel_type: str=None, walmart_client_id: str=None, walmart_client_secret: str=None, walmart_environment: str='production', wc_consumer_key: str=None, wc_consumer_secret: str=None, wix_app_id: str=None, wix_app_secret_key: str=None, wix_refresh_token: str=None, zid_access_token: str=None, zid_authorization: str=None, zid_client_id: int=None, zid_client_secret: str=None, zid_refresh_token: str=None):
        """AccountCartAdd - a model defined in OpenAPI

        :param _3dcart_access_token: The _3dcart_access_token of this AccountCartAdd.
        :param _3dcart_private_key: The _3dcart_private_key of this AccountCartAdd.
        :param _3dcartapi_api_key: The _3dcartapi_api_key of this AccountCartAdd.
        :param amazon_access_key_id: The amazon_access_key_id of this AccountCartAdd.
        :param amazon_access_token: The amazon_access_token of this AccountCartAdd.
        :param amazon_marketplaces_ids: The amazon_marketplaces_ids of this AccountCartAdd.
        :param amazon_secret_key: The amazon_secret_key of this AccountCartAdd.
        :param amazon_seller_id: The amazon_seller_id of this AccountCartAdd.
        :param amazon_sp_api_environment: The amazon_sp_api_environment of this AccountCartAdd.
        :param amazon_sp_aws_region: The amazon_sp_aws_region of this AccountCartAdd.
        :param amazon_sp_aws_role_arn: The amazon_sp_aws_role_arn of this AccountCartAdd.
        :param amazon_sp_aws_user_key_id: The amazon_sp_aws_user_key_id of this AccountCartAdd.
        :param amazon_sp_aws_user_secret: The amazon_sp_aws_user_secret of this AccountCartAdd.
        :param amazon_sp_client_id: The amazon_sp_client_id of this AccountCartAdd.
        :param amazon_sp_client_secret: The amazon_sp_client_secret of this AccountCartAdd.
        :param amazon_sp_refresh_token: The amazon_sp_refresh_token of this AccountCartAdd.
        :param aspdotnetstorefront_api_pass: The aspdotnetstorefront_api_pass of this AccountCartAdd.
        :param aspdotnetstorefront_api_user: The aspdotnetstorefront_api_user of this AccountCartAdd.
        :param bigcommerceapi_access_token: The bigcommerceapi_access_token of this AccountCartAdd.
        :param bigcommerceapi_admin_account: The bigcommerceapi_admin_account of this AccountCartAdd.
        :param bigcommerceapi_api_key: The bigcommerceapi_api_key of this AccountCartAdd.
        :param bigcommerceapi_api_path: The bigcommerceapi_api_path of this AccountCartAdd.
        :param bigcommerceapi_client_id: The bigcommerceapi_client_id of this AccountCartAdd.
        :param bigcommerceapi_context: The bigcommerceapi_context of this AccountCartAdd.
        :param bridge_url: The bridge_url of this AccountCartAdd.
        :param cart_id: The cart_id of this AccountCartAdd.
        :param commercehq_api_key: The commercehq_api_key of this AccountCartAdd.
        :param commercehq_api_password: The commercehq_api_password of this AccountCartAdd.
        :param db_tables_prefix: The db_tables_prefix of this AccountCartAdd.
        :param demandware_api_password: The demandware_api_password of this AccountCartAdd.
        :param demandware_client_id: The demandware_client_id of this AccountCartAdd.
        :param demandware_user_name: The demandware_user_name of this AccountCartAdd.
        :param demandware_user_password: The demandware_user_password of this AccountCartAdd.
        :param ebay_access_token: The ebay_access_token of this AccountCartAdd.
        :param ebay_client_id: The ebay_client_id of this AccountCartAdd.
        :param ebay_client_secret: The ebay_client_secret of this AccountCartAdd.
        :param ebay_environment: The ebay_environment of this AccountCartAdd.
        :param ebay_refresh_token: The ebay_refresh_token of this AccountCartAdd.
        :param ebay_runame: The ebay_runame of this AccountCartAdd.
        :param ebay_site_id: The ebay_site_id of this AccountCartAdd.
        :param ecwid_acess_token: The ecwid_acess_token of this AccountCartAdd.
        :param ecwid_store_id: The ecwid_store_id of this AccountCartAdd.
        :param etsy_access_token: The etsy_access_token of this AccountCartAdd.
        :param etsy_client_id: The etsy_client_id of this AccountCartAdd.
        :param etsy_keystring: The etsy_keystring of this AccountCartAdd.
        :param etsy_refresh_token: The etsy_refresh_token of this AccountCartAdd.
        :param etsy_shared_secret: The etsy_shared_secret of this AccountCartAdd.
        :param etsy_token_secret: The etsy_token_secret of this AccountCartAdd.
        :param ftp_host: The ftp_host of this AccountCartAdd.
        :param ftp_password: The ftp_password of this AccountCartAdd.
        :param ftp_port: The ftp_port of this AccountCartAdd.
        :param ftp_store_dir: The ftp_store_dir of this AccountCartAdd.
        :param ftp_user: The ftp_user of this AccountCartAdd.
        :param hybris_client_id: The hybris_client_id of this AccountCartAdd.
        :param hybris_client_secret: The hybris_client_secret of this AccountCartAdd.
        :param hybris_password: The hybris_password of this AccountCartAdd.
        :param hybris_username: The hybris_username of this AccountCartAdd.
        :param hybris_websites: The hybris_websites of this AccountCartAdd.
        :param lightspeed_api_key: The lightspeed_api_key of this AccountCartAdd.
        :param lightspeed_api_secret: The lightspeed_api_secret of this AccountCartAdd.
        :param magento_access_token: The magento_access_token of this AccountCartAdd.
        :param magento_consumer_key: The magento_consumer_key of this AccountCartAdd.
        :param magento_consumer_secret: The magento_consumer_secret of this AccountCartAdd.
        :param magento_token_secret: The magento_token_secret of this AccountCartAdd.
        :param mercado_libre_app_id: The mercado_libre_app_id of this AccountCartAdd.
        :param mercado_libre_app_secret_key: The mercado_libre_app_secret_key of this AccountCartAdd.
        :param mercado_libre_refresh_token: The mercado_libre_refresh_token of this AccountCartAdd.
        :param neto_api_key: The neto_api_key of this AccountCartAdd.
        :param neto_api_username: The neto_api_username of this AccountCartAdd.
        :param prestashop_webservice_key: The prestashop_webservice_key of this AccountCartAdd.
        :param shopify_access_token: The shopify_access_token of this AccountCartAdd.
        :param shopify_api_key: The shopify_api_key of this AccountCartAdd.
        :param shopify_api_password: The shopify_api_password of this AccountCartAdd.
        :param shopify_shared_secret: The shopify_shared_secret of this AccountCartAdd.
        :param shopware_access_key: The shopware_access_key of this AccountCartAdd.
        :param shopware_api_key: The shopware_api_key of this AccountCartAdd.
        :param shopware_api_secret: The shopware_api_secret of this AccountCartAdd.
        :param squarespace_api_key: The squarespace_api_key of this AccountCartAdd.
        :param store_key: The store_key of this AccountCartAdd.
        :param store_root: The store_root of this AccountCartAdd.
        :param store_url: The store_url of this AccountCartAdd.
        :param validate_version: The validate_version of this AccountCartAdd.
        :param verify: The verify of this AccountCartAdd.
        :param volusion_login: The volusion_login of this AccountCartAdd.
        :param volusion_password: The volusion_password of this AccountCartAdd.
        :param walmart_channel_type: The walmart_channel_type of this AccountCartAdd.
        :param walmart_client_id: The walmart_client_id of this AccountCartAdd.
        :param walmart_client_secret: The walmart_client_secret of this AccountCartAdd.
        :param walmart_environment: The walmart_environment of this AccountCartAdd.
        :param wc_consumer_key: The wc_consumer_key of this AccountCartAdd.
        :param wc_consumer_secret: The wc_consumer_secret of this AccountCartAdd.
        :param wix_app_id: The wix_app_id of this AccountCartAdd.
        :param wix_app_secret_key: The wix_app_secret_key of this AccountCartAdd.
        :param wix_refresh_token: The wix_refresh_token of this AccountCartAdd.
        :param zid_access_token: The zid_access_token of this AccountCartAdd.
        :param zid_authorization: The zid_authorization of this AccountCartAdd.
        :param zid_client_id: The zid_client_id of this AccountCartAdd.
        :param zid_client_secret: The zid_client_secret of this AccountCartAdd.
        :param zid_refresh_token: The zid_refresh_token of this AccountCartAdd.
        """
        self.openapi_types = {
            '_3dcart_access_token': str,
            '_3dcart_private_key': str,
            '_3dcartapi_api_key': str,
            'amazon_access_key_id': str,
            'amazon_access_token': str,
            'amazon_marketplaces_ids': str,
            'amazon_secret_key': str,
            'amazon_seller_id': str,
            'amazon_sp_api_environment': str,
            'amazon_sp_aws_region': str,
            'amazon_sp_aws_role_arn': str,
            'amazon_sp_aws_user_key_id': str,
            'amazon_sp_aws_user_secret': str,
            'amazon_sp_client_id': str,
            'amazon_sp_client_secret': str,
            'amazon_sp_refresh_token': str,
            'aspdotnetstorefront_api_pass': str,
            'aspdotnetstorefront_api_user': str,
            'bigcommerceapi_access_token': str,
            'bigcommerceapi_admin_account': str,
            'bigcommerceapi_api_key': str,
            'bigcommerceapi_api_path': str,
            'bigcommerceapi_client_id': str,
            'bigcommerceapi_context': str,
            'bridge_url': str,
            'cart_id': str,
            'commercehq_api_key': str,
            'commercehq_api_password': str,
            'db_tables_prefix': str,
            'demandware_api_password': str,
            'demandware_client_id': str,
            'demandware_user_name': str,
            'demandware_user_password': str,
            'ebay_access_token': str,
            'ebay_client_id': str,
            'ebay_client_secret': str,
            'ebay_environment': str,
            'ebay_refresh_token': str,
            'ebay_runame': str,
            'ebay_site_id': int,
            'ecwid_acess_token': str,
            'ecwid_store_id': str,
            'etsy_access_token': str,
            'etsy_client_id': str,
            'etsy_keystring': str,
            'etsy_refresh_token': str,
            'etsy_shared_secret': str,
            'etsy_token_secret': str,
            'ftp_host': str,
            'ftp_password': str,
            'ftp_port': int,
            'ftp_store_dir': str,
            'ftp_user': str,
            'hybris_client_id': str,
            'hybris_client_secret': str,
            'hybris_password': str,
            'hybris_username': str,
            'hybris_websites': List[AccountCartAddHybrisWebsitesInner],
            'lightspeed_api_key': str,
            'lightspeed_api_secret': str,
            'magento_access_token': str,
            'magento_consumer_key': str,
            'magento_consumer_secret': str,
            'magento_token_secret': str,
            'mercado_libre_app_id': str,
            'mercado_libre_app_secret_key': str,
            'mercado_libre_refresh_token': str,
            'neto_api_key': str,
            'neto_api_username': str,
            'prestashop_webservice_key': str,
            'shopify_access_token': str,
            'shopify_api_key': str,
            'shopify_api_password': str,
            'shopify_shared_secret': str,
            'shopware_access_key': str,
            'shopware_api_key': str,
            'shopware_api_secret': str,
            'squarespace_api_key': str,
            'store_key': str,
            'store_root': str,
            'store_url': str,
            'validate_version': bool,
            'verify': bool,
            'volusion_login': str,
            'volusion_password': str,
            'walmart_channel_type': str,
            'walmart_client_id': str,
            'walmart_client_secret': str,
            'walmart_environment': str,
            'wc_consumer_key': str,
            'wc_consumer_secret': str,
            'wix_app_id': str,
            'wix_app_secret_key': str,
            'wix_refresh_token': str,
            'zid_access_token': str,
            'zid_authorization': str,
            'zid_client_id': int,
            'zid_client_secret': str,
            'zid_refresh_token': str
        }

        self.attribute_map = {
            '_3dcart_access_token': '3dcart_access_token',
            '_3dcart_private_key': '3dcart_private_key',
            '_3dcartapi_api_key': '3dcartapi_api_key',
            'amazon_access_key_id': 'amazon_access_key_id',
            'amazon_access_token': 'amazon_access_token',
            'amazon_marketplaces_ids': 'amazon_marketplaces_ids',
            'amazon_secret_key': 'amazon_secret_key',
            'amazon_seller_id': 'amazon_seller_id',
            'amazon_sp_api_environment': 'amazon_sp_api_environment',
            'amazon_sp_aws_region': 'amazon_sp_aws_region',
            'amazon_sp_aws_role_arn': 'amazon_sp_aws_role_arn',
            'amazon_sp_aws_user_key_id': 'amazon_sp_aws_user_key_id',
            'amazon_sp_aws_user_secret': 'amazon_sp_aws_user_secret',
            'amazon_sp_client_id': 'amazon_sp_client_id',
            'amazon_sp_client_secret': 'amazon_sp_client_secret',
            'amazon_sp_refresh_token': 'amazon_sp_refresh_token',
            'aspdotnetstorefront_api_pass': 'aspdotnetstorefront_api_pass',
            'aspdotnetstorefront_api_user': 'aspdotnetstorefront_api_user',
            'bigcommerceapi_access_token': 'bigcommerceapi_access_token',
            'bigcommerceapi_admin_account': 'bigcommerceapi_admin_account',
            'bigcommerceapi_api_key': 'bigcommerceapi_api_key',
            'bigcommerceapi_api_path': 'bigcommerceapi_api_path',
            'bigcommerceapi_client_id': 'bigcommerceapi_client_id',
            'bigcommerceapi_context': 'bigcommerceapi_context',
            'bridge_url': 'bridge_url',
            'cart_id': 'cart_id',
            'commercehq_api_key': 'commercehq_api_key',
            'commercehq_api_password': 'commercehq_api_password',
            'db_tables_prefix': 'db_tables_prefix',
            'demandware_api_password': 'demandware_api_password',
            'demandware_client_id': 'demandware_client_id',
            'demandware_user_name': 'demandware_user_name',
            'demandware_user_password': 'demandware_user_password',
            'ebay_access_token': 'ebay_access_token',
            'ebay_client_id': 'ebay_client_id',
            'ebay_client_secret': 'ebay_client_secret',
            'ebay_environment': 'ebay_environment',
            'ebay_refresh_token': 'ebay_refresh_token',
            'ebay_runame': 'ebay_runame',
            'ebay_site_id': 'ebay_site_id',
            'ecwid_acess_token': 'ecwid_acess_token',
            'ecwid_store_id': 'ecwid_store_id',
            'etsy_access_token': 'etsy_access_token',
            'etsy_client_id': 'etsy_client_id',
            'etsy_keystring': 'etsy_keystring',
            'etsy_refresh_token': 'etsy_refresh_token',
            'etsy_shared_secret': 'etsy_shared_secret',
            'etsy_token_secret': 'etsy_token_secret',
            'ftp_host': 'ftp_host',
            'ftp_password': 'ftp_password',
            'ftp_port': 'ftp_port',
            'ftp_store_dir': 'ftp_store_dir',
            'ftp_user': 'ftp_user',
            'hybris_client_id': 'hybris_client_id',
            'hybris_client_secret': 'hybris_client_secret',
            'hybris_password': 'hybris_password',
            'hybris_username': 'hybris_username',
            'hybris_websites': 'hybris_websites',
            'lightspeed_api_key': 'lightspeed_api_key',
            'lightspeed_api_secret': 'lightspeed_api_secret',
            'magento_access_token': 'magento_access_token',
            'magento_consumer_key': 'magento_consumer_key',
            'magento_consumer_secret': 'magento_consumer_secret',
            'magento_token_secret': 'magento_token_secret',
            'mercado_libre_app_id': 'mercado_libre_app_id',
            'mercado_libre_app_secret_key': 'mercado_libre_app_secret_key',
            'mercado_libre_refresh_token': 'mercado_libre_refresh_token',
            'neto_api_key': 'neto_api_key',
            'neto_api_username': 'neto_api_username',
            'prestashop_webservice_key': 'prestashop_webservice_key',
            'shopify_access_token': 'shopify_access_token',
            'shopify_api_key': 'shopify_api_key',
            'shopify_api_password': 'shopify_api_password',
            'shopify_shared_secret': 'shopify_shared_secret',
            'shopware_access_key': 'shopware_access_key',
            'shopware_api_key': 'shopware_api_key',
            'shopware_api_secret': 'shopware_api_secret',
            'squarespace_api_key': 'squarespace_api_key',
            'store_key': 'store_key',
            'store_root': 'store_root',
            'store_url': 'store_url',
            'validate_version': 'validate_version',
            'verify': 'verify',
            'volusion_login': 'volusion_login',
            'volusion_password': 'volusion_password',
            'walmart_channel_type': 'walmart_channel_type',
            'walmart_client_id': 'walmart_client_id',
            'walmart_client_secret': 'walmart_client_secret',
            'walmart_environment': 'walmart_environment',
            'wc_consumer_key': 'wc_consumer_key',
            'wc_consumer_secret': 'wc_consumer_secret',
            'wix_app_id': 'wix_app_id',
            'wix_app_secret_key': 'wix_app_secret_key',
            'wix_refresh_token': 'wix_refresh_token',
            'zid_access_token': 'zid_access_token',
            'zid_authorization': 'zid_authorization',
            'zid_client_id': 'zid_client_id',
            'zid_client_secret': 'zid_client_secret',
            'zid_refresh_token': 'zid_refresh_token'
        }

        self.__3dcart_access_token = _3dcart_access_token
        self.__3dcart_private_key = _3dcart_private_key
        self.__3dcartapi_api_key = _3dcartapi_api_key
        self._amazon_access_key_id = amazon_access_key_id
        self._amazon_access_token = amazon_access_token
        self._amazon_marketplaces_ids = amazon_marketplaces_ids
        self._amazon_secret_key = amazon_secret_key
        self._amazon_seller_id = amazon_seller_id
        self._amazon_sp_api_environment = amazon_sp_api_environment
        self._amazon_sp_aws_region = amazon_sp_aws_region
        self._amazon_sp_aws_role_arn = amazon_sp_aws_role_arn
        self._amazon_sp_aws_user_key_id = amazon_sp_aws_user_key_id
        self._amazon_sp_aws_user_secret = amazon_sp_aws_user_secret
        self._amazon_sp_client_id = amazon_sp_client_id
        self._amazon_sp_client_secret = amazon_sp_client_secret
        self._amazon_sp_refresh_token = amazon_sp_refresh_token
        self._aspdotnetstorefront_api_pass = aspdotnetstorefront_api_pass
        self._aspdotnetstorefront_api_user = aspdotnetstorefront_api_user
        self._bigcommerceapi_access_token = bigcommerceapi_access_token
        self._bigcommerceapi_admin_account = bigcommerceapi_admin_account
        self._bigcommerceapi_api_key = bigcommerceapi_api_key
        self._bigcommerceapi_api_path = bigcommerceapi_api_path
        self._bigcommerceapi_client_id = bigcommerceapi_client_id
        self._bigcommerceapi_context = bigcommerceapi_context
        self._bridge_url = bridge_url
        self._cart_id = cart_id
        self._commercehq_api_key = commercehq_api_key
        self._commercehq_api_password = commercehq_api_password
        self._db_tables_prefix = db_tables_prefix
        self._demandware_api_password = demandware_api_password
        self._demandware_client_id = demandware_client_id
        self._demandware_user_name = demandware_user_name
        self._demandware_user_password = demandware_user_password
        self._ebay_access_token = ebay_access_token
        self._ebay_client_id = ebay_client_id
        self._ebay_client_secret = ebay_client_secret
        self._ebay_environment = ebay_environment
        self._ebay_refresh_token = ebay_refresh_token
        self._ebay_runame = ebay_runame
        self._ebay_site_id = ebay_site_id
        self._ecwid_acess_token = ecwid_acess_token
        self._ecwid_store_id = ecwid_store_id
        self._etsy_access_token = etsy_access_token
        self._etsy_client_id = etsy_client_id
        self._etsy_keystring = etsy_keystring
        self._etsy_refresh_token = etsy_refresh_token
        self._etsy_shared_secret = etsy_shared_secret
        self._etsy_token_secret = etsy_token_secret
        self._ftp_host = ftp_host
        self._ftp_password = ftp_password
        self._ftp_port = ftp_port
        self._ftp_store_dir = ftp_store_dir
        self._ftp_user = ftp_user
        self._hybris_client_id = hybris_client_id
        self._hybris_client_secret = hybris_client_secret
        self._hybris_password = hybris_password
        self._hybris_username = hybris_username
        self._hybris_websites = hybris_websites
        self._lightspeed_api_key = lightspeed_api_key
        self._lightspeed_api_secret = lightspeed_api_secret
        self._magento_access_token = magento_access_token
        self._magento_consumer_key = magento_consumer_key
        self._magento_consumer_secret = magento_consumer_secret
        self._magento_token_secret = magento_token_secret
        self._mercado_libre_app_id = mercado_libre_app_id
        self._mercado_libre_app_secret_key = mercado_libre_app_secret_key
        self._mercado_libre_refresh_token = mercado_libre_refresh_token
        self._neto_api_key = neto_api_key
        self._neto_api_username = neto_api_username
        self._prestashop_webservice_key = prestashop_webservice_key
        self._shopify_access_token = shopify_access_token
        self._shopify_api_key = shopify_api_key
        self._shopify_api_password = shopify_api_password
        self._shopify_shared_secret = shopify_shared_secret
        self._shopware_access_key = shopware_access_key
        self._shopware_api_key = shopware_api_key
        self._shopware_api_secret = shopware_api_secret
        self._squarespace_api_key = squarespace_api_key
        self._store_key = store_key
        self._store_root = store_root
        self._store_url = store_url
        self._validate_version = validate_version
        self._verify = verify
        self._volusion_login = volusion_login
        self._volusion_password = volusion_password
        self._walmart_channel_type = walmart_channel_type
        self._walmart_client_id = walmart_client_id
        self._walmart_client_secret = walmart_client_secret
        self._walmart_environment = walmart_environment
        self._wc_consumer_key = wc_consumer_key
        self._wc_consumer_secret = wc_consumer_secret
        self._wix_app_id = wix_app_id
        self._wix_app_secret_key = wix_app_secret_key
        self._wix_refresh_token = wix_refresh_token
        self._zid_access_token = zid_access_token
        self._zid_authorization = zid_authorization
        self._zid_client_id = zid_client_id
        self._zid_client_secret = zid_client_secret
        self._zid_refresh_token = zid_refresh_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountCartAdd':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountCartAdd of this AccountCartAdd.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _3dcart_access_token(self):
        """Gets the _3dcart_access_token of this AccountCartAdd.

        3DCart Token

        :return: The _3dcart_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self.__3dcart_access_token

    @_3dcart_access_token.setter
    def _3dcart_access_token(self, _3dcart_access_token):
        """Sets the _3dcart_access_token of this AccountCartAdd.

        3DCart Token

        :param _3dcart_access_token: The _3dcart_access_token of this AccountCartAdd.
        :type _3dcart_access_token: str
        """

        self.__3dcart_access_token = _3dcart_access_token

    @property
    def _3dcart_private_key(self):
        """Gets the _3dcart_private_key of this AccountCartAdd.

        3DCart Private Key

        :return: The _3dcart_private_key of this AccountCartAdd.
        :rtype: str
        """
        return self.__3dcart_private_key

    @_3dcart_private_key.setter
    def _3dcart_private_key(self, _3dcart_private_key):
        """Sets the _3dcart_private_key of this AccountCartAdd.

        3DCart Private Key

        :param _3dcart_private_key: The _3dcart_private_key of this AccountCartAdd.
        :type _3dcart_private_key: str
        """

        self.__3dcart_private_key = _3dcart_private_key

    @property
    def _3dcartapi_api_key(self):
        """Gets the _3dcartapi_api_key of this AccountCartAdd.

        3DCart API Key

        :return: The _3dcartapi_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self.__3dcartapi_api_key

    @_3dcartapi_api_key.setter
    def _3dcartapi_api_key(self, _3dcartapi_api_key):
        """Sets the _3dcartapi_api_key of this AccountCartAdd.

        3DCart API Key

        :param _3dcartapi_api_key: The _3dcartapi_api_key of this AccountCartAdd.
        :type _3dcartapi_api_key: str
        """

        self.__3dcartapi_api_key = _3dcartapi_api_key

    @property
    def amazon_access_key_id(self):
        """Gets the amazon_access_key_id of this AccountCartAdd.

        Amazon Secret Key Id

        :return: The amazon_access_key_id of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_access_key_id

    @amazon_access_key_id.setter
    def amazon_access_key_id(self, amazon_access_key_id):
        """Sets the amazon_access_key_id of this AccountCartAdd.

        Amazon Secret Key Id

        :param amazon_access_key_id: The amazon_access_key_id of this AccountCartAdd.
        :type amazon_access_key_id: str
        """

        self._amazon_access_key_id = amazon_access_key_id

    @property
    def amazon_access_token(self):
        """Gets the amazon_access_token of this AccountCartAdd.

        MWS Auth Token. Access token authorizing the app to access resources on behalf of a user

        :return: The amazon_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_access_token

    @amazon_access_token.setter
    def amazon_access_token(self, amazon_access_token):
        """Sets the amazon_access_token of this AccountCartAdd.

        MWS Auth Token. Access token authorizing the app to access resources on behalf of a user

        :param amazon_access_token: The amazon_access_token of this AccountCartAdd.
        :type amazon_access_token: str
        """

        self._amazon_access_token = amazon_access_token

    @property
    def amazon_marketplaces_ids(self):
        """Gets the amazon_marketplaces_ids of this AccountCartAdd.

        Amazon Marketplace IDs comma separated string

        :return: The amazon_marketplaces_ids of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_marketplaces_ids

    @amazon_marketplaces_ids.setter
    def amazon_marketplaces_ids(self, amazon_marketplaces_ids):
        """Sets the amazon_marketplaces_ids of this AccountCartAdd.

        Amazon Marketplace IDs comma separated string

        :param amazon_marketplaces_ids: The amazon_marketplaces_ids of this AccountCartAdd.
        :type amazon_marketplaces_ids: str
        """

        self._amazon_marketplaces_ids = amazon_marketplaces_ids

    @property
    def amazon_secret_key(self):
        """Gets the amazon_secret_key of this AccountCartAdd.

        Amazon Secret Key

        :return: The amazon_secret_key of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_secret_key

    @amazon_secret_key.setter
    def amazon_secret_key(self, amazon_secret_key):
        """Sets the amazon_secret_key of this AccountCartAdd.

        Amazon Secret Key

        :param amazon_secret_key: The amazon_secret_key of this AccountCartAdd.
        :type amazon_secret_key: str
        """

        self._amazon_secret_key = amazon_secret_key

    @property
    def amazon_seller_id(self):
        """Gets the amazon_seller_id of this AccountCartAdd.

        Amazon Seller ID (Merchant token)

        :return: The amazon_seller_id of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_seller_id

    @amazon_seller_id.setter
    def amazon_seller_id(self, amazon_seller_id):
        """Sets the amazon_seller_id of this AccountCartAdd.

        Amazon Seller ID (Merchant token)

        :param amazon_seller_id: The amazon_seller_id of this AccountCartAdd.
        :type amazon_seller_id: str
        """

        self._amazon_seller_id = amazon_seller_id

    @property
    def amazon_sp_api_environment(self):
        """Gets the amazon_sp_api_environment of this AccountCartAdd.

        Amazon SP API environment

        :return: The amazon_sp_api_environment of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_api_environment

    @amazon_sp_api_environment.setter
    def amazon_sp_api_environment(self, amazon_sp_api_environment):
        """Sets the amazon_sp_api_environment of this AccountCartAdd.

        Amazon SP API environment

        :param amazon_sp_api_environment: The amazon_sp_api_environment of this AccountCartAdd.
        :type amazon_sp_api_environment: str
        """

        self._amazon_sp_api_environment = amazon_sp_api_environment

    @property
    def amazon_sp_aws_region(self):
        """Gets the amazon_sp_aws_region of this AccountCartAdd.

        Amazon AWS Region

        :return: The amazon_sp_aws_region of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_aws_region

    @amazon_sp_aws_region.setter
    def amazon_sp_aws_region(self, amazon_sp_aws_region):
        """Sets the amazon_sp_aws_region of this AccountCartAdd.

        Amazon AWS Region

        :param amazon_sp_aws_region: The amazon_sp_aws_region of this AccountCartAdd.
        :type amazon_sp_aws_region: str
        """
        allowed_values = ["eu-west-1", "us-east-1", "us-west-2"]  # noqa: E501
        if amazon_sp_aws_region not in allowed_values:
            raise ValueError(
                "Invalid value for `amazon_sp_aws_region` ({0}), must be one of {1}"
                .format(amazon_sp_aws_region, allowed_values)
            )

        self._amazon_sp_aws_region = amazon_sp_aws_region

    @property
    def amazon_sp_aws_role_arn(self):
        """Gets the amazon_sp_aws_role_arn of this AccountCartAdd.

        Amazon AWS Role ARN

        :return: The amazon_sp_aws_role_arn of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_aws_role_arn

    @amazon_sp_aws_role_arn.setter
    def amazon_sp_aws_role_arn(self, amazon_sp_aws_role_arn):
        """Sets the amazon_sp_aws_role_arn of this AccountCartAdd.

        Amazon AWS Role ARN

        :param amazon_sp_aws_role_arn: The amazon_sp_aws_role_arn of this AccountCartAdd.
        :type amazon_sp_aws_role_arn: str
        """
        if amazon_sp_aws_role_arn is None:
            raise ValueError("Invalid value for `amazon_sp_aws_role_arn`, must not be `None`")

        self._amazon_sp_aws_role_arn = amazon_sp_aws_role_arn

    @property
    def amazon_sp_aws_user_key_id(self):
        """Gets the amazon_sp_aws_user_key_id of this AccountCartAdd.

        Amazon AWS user access key ID

        :return: The amazon_sp_aws_user_key_id of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_aws_user_key_id

    @amazon_sp_aws_user_key_id.setter
    def amazon_sp_aws_user_key_id(self, amazon_sp_aws_user_key_id):
        """Sets the amazon_sp_aws_user_key_id of this AccountCartAdd.

        Amazon AWS user access key ID

        :param amazon_sp_aws_user_key_id: The amazon_sp_aws_user_key_id of this AccountCartAdd.
        :type amazon_sp_aws_user_key_id: str
        """
        if amazon_sp_aws_user_key_id is None:
            raise ValueError("Invalid value for `amazon_sp_aws_user_key_id`, must not be `None`")

        self._amazon_sp_aws_user_key_id = amazon_sp_aws_user_key_id

    @property
    def amazon_sp_aws_user_secret(self):
        """Gets the amazon_sp_aws_user_secret of this AccountCartAdd.

        Amazon AWS user secret access key

        :return: The amazon_sp_aws_user_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_aws_user_secret

    @amazon_sp_aws_user_secret.setter
    def amazon_sp_aws_user_secret(self, amazon_sp_aws_user_secret):
        """Sets the amazon_sp_aws_user_secret of this AccountCartAdd.

        Amazon AWS user secret access key

        :param amazon_sp_aws_user_secret: The amazon_sp_aws_user_secret of this AccountCartAdd.
        :type amazon_sp_aws_user_secret: str
        """
        if amazon_sp_aws_user_secret is None:
            raise ValueError("Invalid value for `amazon_sp_aws_user_secret`, must not be `None`")

        self._amazon_sp_aws_user_secret = amazon_sp_aws_user_secret

    @property
    def amazon_sp_client_id(self):
        """Gets the amazon_sp_client_id of this AccountCartAdd.

        Amazon SP API app client id

        :return: The amazon_sp_client_id of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_client_id

    @amazon_sp_client_id.setter
    def amazon_sp_client_id(self, amazon_sp_client_id):
        """Sets the amazon_sp_client_id of this AccountCartAdd.

        Amazon SP API app client id

        :param amazon_sp_client_id: The amazon_sp_client_id of this AccountCartAdd.
        :type amazon_sp_client_id: str
        """
        if amazon_sp_client_id is None:
            raise ValueError("Invalid value for `amazon_sp_client_id`, must not be `None`")

        self._amazon_sp_client_id = amazon_sp_client_id

    @property
    def amazon_sp_client_secret(self):
        """Gets the amazon_sp_client_secret of this AccountCartAdd.

        Amazon SP API app client secret

        :return: The amazon_sp_client_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_client_secret

    @amazon_sp_client_secret.setter
    def amazon_sp_client_secret(self, amazon_sp_client_secret):
        """Sets the amazon_sp_client_secret of this AccountCartAdd.

        Amazon SP API app client secret

        :param amazon_sp_client_secret: The amazon_sp_client_secret of this AccountCartAdd.
        :type amazon_sp_client_secret: str
        """
        if amazon_sp_client_secret is None:
            raise ValueError("Invalid value for `amazon_sp_client_secret`, must not be `None`")

        self._amazon_sp_client_secret = amazon_sp_client_secret

    @property
    def amazon_sp_refresh_token(self):
        """Gets the amazon_sp_refresh_token of this AccountCartAdd.

        Amazon SP API OAuth refresh token

        :return: The amazon_sp_refresh_token of this AccountCartAdd.
        :rtype: str
        """
        return self._amazon_sp_refresh_token

    @amazon_sp_refresh_token.setter
    def amazon_sp_refresh_token(self, amazon_sp_refresh_token):
        """Sets the amazon_sp_refresh_token of this AccountCartAdd.

        Amazon SP API OAuth refresh token

        :param amazon_sp_refresh_token: The amazon_sp_refresh_token of this AccountCartAdd.
        :type amazon_sp_refresh_token: str
        """
        if amazon_sp_refresh_token is None:
            raise ValueError("Invalid value for `amazon_sp_refresh_token`, must not be `None`")

        self._amazon_sp_refresh_token = amazon_sp_refresh_token

    @property
    def aspdotnetstorefront_api_pass(self):
        """Gets the aspdotnetstorefront_api_pass of this AccountCartAdd.

        AspDotNetStorefront API Password

        :return: The aspdotnetstorefront_api_pass of this AccountCartAdd.
        :rtype: str
        """
        return self._aspdotnetstorefront_api_pass

    @aspdotnetstorefront_api_pass.setter
    def aspdotnetstorefront_api_pass(self, aspdotnetstorefront_api_pass):
        """Sets the aspdotnetstorefront_api_pass of this AccountCartAdd.

        AspDotNetStorefront API Password

        :param aspdotnetstorefront_api_pass: The aspdotnetstorefront_api_pass of this AccountCartAdd.
        :type aspdotnetstorefront_api_pass: str
        """

        self._aspdotnetstorefront_api_pass = aspdotnetstorefront_api_pass

    @property
    def aspdotnetstorefront_api_user(self):
        """Gets the aspdotnetstorefront_api_user of this AccountCartAdd.

        It's a AspDotNetStorefront account for which API is available

        :return: The aspdotnetstorefront_api_user of this AccountCartAdd.
        :rtype: str
        """
        return self._aspdotnetstorefront_api_user

    @aspdotnetstorefront_api_user.setter
    def aspdotnetstorefront_api_user(self, aspdotnetstorefront_api_user):
        """Sets the aspdotnetstorefront_api_user of this AccountCartAdd.

        It's a AspDotNetStorefront account for which API is available

        :param aspdotnetstorefront_api_user: The aspdotnetstorefront_api_user of this AccountCartAdd.
        :type aspdotnetstorefront_api_user: str
        """

        self._aspdotnetstorefront_api_user = aspdotnetstorefront_api_user

    @property
    def bigcommerceapi_access_token(self):
        """Gets the bigcommerceapi_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :return: The bigcommerceapi_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self._bigcommerceapi_access_token

    @bigcommerceapi_access_token.setter
    def bigcommerceapi_access_token(self, bigcommerceapi_access_token):
        """Sets the bigcommerceapi_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :param bigcommerceapi_access_token: The bigcommerceapi_access_token of this AccountCartAdd.
        :type bigcommerceapi_access_token: str
        """

        self._bigcommerceapi_access_token = bigcommerceapi_access_token

    @property
    def bigcommerceapi_admin_account(self):
        """Gets the bigcommerceapi_admin_account of this AccountCartAdd.

        It's a BigCommerce account for which API is enabled

        :return: The bigcommerceapi_admin_account of this AccountCartAdd.
        :rtype: str
        """
        return self._bigcommerceapi_admin_account

    @bigcommerceapi_admin_account.setter
    def bigcommerceapi_admin_account(self, bigcommerceapi_admin_account):
        """Sets the bigcommerceapi_admin_account of this AccountCartAdd.

        It's a BigCommerce account for which API is enabled

        :param bigcommerceapi_admin_account: The bigcommerceapi_admin_account of this AccountCartAdd.
        :type bigcommerceapi_admin_account: str
        """

        self._bigcommerceapi_admin_account = bigcommerceapi_admin_account

    @property
    def bigcommerceapi_api_key(self):
        """Gets the bigcommerceapi_api_key of this AccountCartAdd.

        Bigcommerce API Key

        :return: The bigcommerceapi_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self._bigcommerceapi_api_key

    @bigcommerceapi_api_key.setter
    def bigcommerceapi_api_key(self, bigcommerceapi_api_key):
        """Sets the bigcommerceapi_api_key of this AccountCartAdd.

        Bigcommerce API Key

        :param bigcommerceapi_api_key: The bigcommerceapi_api_key of this AccountCartAdd.
        :type bigcommerceapi_api_key: str
        """

        self._bigcommerceapi_api_key = bigcommerceapi_api_key

    @property
    def bigcommerceapi_api_path(self):
        """Gets the bigcommerceapi_api_path of this AccountCartAdd.

        BigCommerce API URL

        :return: The bigcommerceapi_api_path of this AccountCartAdd.
        :rtype: str
        """
        return self._bigcommerceapi_api_path

    @bigcommerceapi_api_path.setter
    def bigcommerceapi_api_path(self, bigcommerceapi_api_path):
        """Sets the bigcommerceapi_api_path of this AccountCartAdd.

        BigCommerce API URL

        :param bigcommerceapi_api_path: The bigcommerceapi_api_path of this AccountCartAdd.
        :type bigcommerceapi_api_path: str
        """

        self._bigcommerceapi_api_path = bigcommerceapi_api_path

    @property
    def bigcommerceapi_client_id(self):
        """Gets the bigcommerceapi_client_id of this AccountCartAdd.

        Client ID of the requesting app

        :return: The bigcommerceapi_client_id of this AccountCartAdd.
        :rtype: str
        """
        return self._bigcommerceapi_client_id

    @bigcommerceapi_client_id.setter
    def bigcommerceapi_client_id(self, bigcommerceapi_client_id):
        """Sets the bigcommerceapi_client_id of this AccountCartAdd.

        Client ID of the requesting app

        :param bigcommerceapi_client_id: The bigcommerceapi_client_id of this AccountCartAdd.
        :type bigcommerceapi_client_id: str
        """

        self._bigcommerceapi_client_id = bigcommerceapi_client_id

    @property
    def bigcommerceapi_context(self):
        """Gets the bigcommerceapi_context of this AccountCartAdd.

        API Path section unique to the store

        :return: The bigcommerceapi_context of this AccountCartAdd.
        :rtype: str
        """
        return self._bigcommerceapi_context

    @bigcommerceapi_context.setter
    def bigcommerceapi_context(self, bigcommerceapi_context):
        """Sets the bigcommerceapi_context of this AccountCartAdd.

        API Path section unique to the store

        :param bigcommerceapi_context: The bigcommerceapi_context of this AccountCartAdd.
        :type bigcommerceapi_context: str
        """

        self._bigcommerceapi_context = bigcommerceapi_context

    @property
    def bridge_url(self):
        """Gets the bridge_url of this AccountCartAdd.

        This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)

        :return: The bridge_url of this AccountCartAdd.
        :rtype: str
        """
        return self._bridge_url

    @bridge_url.setter
    def bridge_url(self, bridge_url):
        """Sets the bridge_url of this AccountCartAdd.

        This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)

        :param bridge_url: The bridge_url of this AccountCartAdd.
        :type bridge_url: str
        """

        self._bridge_url = bridge_url

    @property
    def cart_id(self):
        """Gets the cart_id of this AccountCartAdd.

        Store’s identifier which you can get from cart_list method

        :return: The cart_id of this AccountCartAdd.
        :rtype: str
        """
        return self._cart_id

    @cart_id.setter
    def cart_id(self, cart_id):
        """Sets the cart_id of this AccountCartAdd.

        Store’s identifier which you can get from cart_list method

        :param cart_id: The cart_id of this AccountCartAdd.
        :type cart_id: str
        """
        allowed_values = ["3DCart", "3DCartApi", "AceShop", "AmazonSP", "Amazon", "AspDotNetStorefront", "BigcommerceApi", "Creloaded", "CommerceHQ", "Cscart", "Cubecart", "Demandware", "EBay", "Ecwid", "Etsy", "EtsyAPIv3", "Gambio", "JooCart", "Magento1212", "Magento2Api", "MijoShop", "Neto", "Opencart14", "LightSpeed", "Oscmax2", "Oscommerce22ms2", "Oxid", "Pinnacle", "Prestashop", "PrestashopApi", "SSPremium", "Shopify", "Squarespace", "Shopware", "ShopwareApi", "Tomatocart", "Ubercart", "Virtuemart", "Volusion", "WPecommerce", "Walmart", "WebAsyst", "Woocommerce", "WoocommerceApi", "Wix", "Xcart", "Xtcommerce", "XtcommerceVeyton", "Zencart137", "Hybris", "MercadoLibre", "Zid", "Zoey"]  # noqa: E501
        if cart_id not in allowed_values:
            raise ValueError(
                "Invalid value for `cart_id` ({0}), must be one of {1}"
                .format(cart_id, allowed_values)
            )

        self._cart_id = cart_id

    @property
    def commercehq_api_key(self):
        """Gets the commercehq_api_key of this AccountCartAdd.

        CommerceHQ api key

        :return: The commercehq_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self._commercehq_api_key

    @commercehq_api_key.setter
    def commercehq_api_key(self, commercehq_api_key):
        """Sets the commercehq_api_key of this AccountCartAdd.

        CommerceHQ api key

        :param commercehq_api_key: The commercehq_api_key of this AccountCartAdd.
        :type commercehq_api_key: str
        """

        self._commercehq_api_key = commercehq_api_key

    @property
    def commercehq_api_password(self):
        """Gets the commercehq_api_password of this AccountCartAdd.

        CommerceHQ api password

        :return: The commercehq_api_password of this AccountCartAdd.
        :rtype: str
        """
        return self._commercehq_api_password

    @commercehq_api_password.setter
    def commercehq_api_password(self, commercehq_api_password):
        """Sets the commercehq_api_password of this AccountCartAdd.

        CommerceHQ api password

        :param commercehq_api_password: The commercehq_api_password of this AccountCartAdd.
        :type commercehq_api_password: str
        """

        self._commercehq_api_password = commercehq_api_password

    @property
    def db_tables_prefix(self):
        """Gets the db_tables_prefix of this AccountCartAdd.

        DB tables prefix

        :return: The db_tables_prefix of this AccountCartAdd.
        :rtype: str
        """
        return self._db_tables_prefix

    @db_tables_prefix.setter
    def db_tables_prefix(self, db_tables_prefix):
        """Sets the db_tables_prefix of this AccountCartAdd.

        DB tables prefix

        :param db_tables_prefix: The db_tables_prefix of this AccountCartAdd.
        :type db_tables_prefix: str
        """

        self._db_tables_prefix = db_tables_prefix

    @property
    def demandware_api_password(self):
        """Gets the demandware_api_password of this AccountCartAdd.

        Demandware api password

        :return: The demandware_api_password of this AccountCartAdd.
        :rtype: str
        """
        return self._demandware_api_password

    @demandware_api_password.setter
    def demandware_api_password(self, demandware_api_password):
        """Sets the demandware_api_password of this AccountCartAdd.

        Demandware api password

        :param demandware_api_password: The demandware_api_password of this AccountCartAdd.
        :type demandware_api_password: str
        """

        self._demandware_api_password = demandware_api_password

    @property
    def demandware_client_id(self):
        """Gets the demandware_client_id of this AccountCartAdd.

        Demandware client id

        :return: The demandware_client_id of this AccountCartAdd.
        :rtype: str
        """
        return self._demandware_client_id

    @demandware_client_id.setter
    def demandware_client_id(self, demandware_client_id):
        """Sets the demandware_client_id of this AccountCartAdd.

        Demandware client id

        :param demandware_client_id: The demandware_client_id of this AccountCartAdd.
        :type demandware_client_id: str
        """

        self._demandware_client_id = demandware_client_id

    @property
    def demandware_user_name(self):
        """Gets the demandware_user_name of this AccountCartAdd.

        Demandware user name

        :return: The demandware_user_name of this AccountCartAdd.
        :rtype: str
        """
        return self._demandware_user_name

    @demandware_user_name.setter
    def demandware_user_name(self, demandware_user_name):
        """Sets the demandware_user_name of this AccountCartAdd.

        Demandware user name

        :param demandware_user_name: The demandware_user_name of this AccountCartAdd.
        :type demandware_user_name: str
        """

        self._demandware_user_name = demandware_user_name

    @property
    def demandware_user_password(self):
        """Gets the demandware_user_password of this AccountCartAdd.

        Demandware user password

        :return: The demandware_user_password of this AccountCartAdd.
        :rtype: str
        """
        return self._demandware_user_password

    @demandware_user_password.setter
    def demandware_user_password(self, demandware_user_password):
        """Sets the demandware_user_password of this AccountCartAdd.

        Demandware user password

        :param demandware_user_password: The demandware_user_password of this AccountCartAdd.
        :type demandware_user_password: str
        """

        self._demandware_user_password = demandware_user_password

    @property
    def ebay_access_token(self):
        """Gets the ebay_access_token of this AccountCartAdd.

        Used to authenticate API requests.

        :return: The ebay_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self._ebay_access_token

    @ebay_access_token.setter
    def ebay_access_token(self, ebay_access_token):
        """Sets the ebay_access_token of this AccountCartAdd.

        Used to authenticate API requests.

        :param ebay_access_token: The ebay_access_token of this AccountCartAdd.
        :type ebay_access_token: str
        """

        self._ebay_access_token = ebay_access_token

    @property
    def ebay_client_id(self):
        """Gets the ebay_client_id of this AccountCartAdd.

        Application ID (AppID).

        :return: The ebay_client_id of this AccountCartAdd.
        :rtype: str
        """
        return self._ebay_client_id

    @ebay_client_id.setter
    def ebay_client_id(self, ebay_client_id):
        """Sets the ebay_client_id of this AccountCartAdd.

        Application ID (AppID).

        :param ebay_client_id: The ebay_client_id of this AccountCartAdd.
        :type ebay_client_id: str
        """

        self._ebay_client_id = ebay_client_id

    @property
    def ebay_client_secret(self):
        """Gets the ebay_client_secret of this AccountCartAdd.

        Shared Secret from eBay application

        :return: The ebay_client_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._ebay_client_secret

    @ebay_client_secret.setter
    def ebay_client_secret(self, ebay_client_secret):
        """Sets the ebay_client_secret of this AccountCartAdd.

        Shared Secret from eBay application

        :param ebay_client_secret: The ebay_client_secret of this AccountCartAdd.
        :type ebay_client_secret: str
        """

        self._ebay_client_secret = ebay_client_secret

    @property
    def ebay_environment(self):
        """Gets the ebay_environment of this AccountCartAdd.

        eBay environment

        :return: The ebay_environment of this AccountCartAdd.
        :rtype: str
        """
        return self._ebay_environment

    @ebay_environment.setter
    def ebay_environment(self, ebay_environment):
        """Sets the ebay_environment of this AccountCartAdd.

        eBay environment

        :param ebay_environment: The ebay_environment of this AccountCartAdd.
        :type ebay_environment: str
        """

        self._ebay_environment = ebay_environment

    @property
    def ebay_refresh_token(self):
        """Gets the ebay_refresh_token of this AccountCartAdd.

        Used to renew the access token.

        :return: The ebay_refresh_token of this AccountCartAdd.
        :rtype: str
        """
        return self._ebay_refresh_token

    @ebay_refresh_token.setter
    def ebay_refresh_token(self, ebay_refresh_token):
        """Sets the ebay_refresh_token of this AccountCartAdd.

        Used to renew the access token.

        :param ebay_refresh_token: The ebay_refresh_token of this AccountCartAdd.
        :type ebay_refresh_token: str
        """

        self._ebay_refresh_token = ebay_refresh_token

    @property
    def ebay_runame(self):
        """Gets the ebay_runame of this AccountCartAdd.

        The RuName value that eBay assigns to your application.

        :return: The ebay_runame of this AccountCartAdd.
        :rtype: str
        """
        return self._ebay_runame

    @ebay_runame.setter
    def ebay_runame(self, ebay_runame):
        """Sets the ebay_runame of this AccountCartAdd.

        The RuName value that eBay assigns to your application.

        :param ebay_runame: The ebay_runame of this AccountCartAdd.
        :type ebay_runame: str
        """

        self._ebay_runame = ebay_runame

    @property
    def ebay_site_id(self):
        """Gets the ebay_site_id of this AccountCartAdd.

        eBay global ID

        :return: The ebay_site_id of this AccountCartAdd.
        :rtype: int
        """
        return self._ebay_site_id

    @ebay_site_id.setter
    def ebay_site_id(self, ebay_site_id):
        """Sets the ebay_site_id of this AccountCartAdd.

        eBay global ID

        :param ebay_site_id: The ebay_site_id of this AccountCartAdd.
        :type ebay_site_id: int
        """

        self._ebay_site_id = ebay_site_id

    @property
    def ecwid_acess_token(self):
        """Gets the ecwid_acess_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :return: The ecwid_acess_token of this AccountCartAdd.
        :rtype: str
        """
        return self._ecwid_acess_token

    @ecwid_acess_token.setter
    def ecwid_acess_token(self, ecwid_acess_token):
        """Sets the ecwid_acess_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :param ecwid_acess_token: The ecwid_acess_token of this AccountCartAdd.
        :type ecwid_acess_token: str
        """

        self._ecwid_acess_token = ecwid_acess_token

    @property
    def ecwid_store_id(self):
        """Gets the ecwid_store_id of this AccountCartAdd.

        Store Id

        :return: The ecwid_store_id of this AccountCartAdd.
        :rtype: str
        """
        return self._ecwid_store_id

    @ecwid_store_id.setter
    def ecwid_store_id(self, ecwid_store_id):
        """Sets the ecwid_store_id of this AccountCartAdd.

        Store Id

        :param ecwid_store_id: The ecwid_store_id of this AccountCartAdd.
        :type ecwid_store_id: str
        """

        self._ecwid_store_id = ecwid_store_id

    @property
    def etsy_access_token(self):
        """Gets the etsy_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :return: The etsy_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self._etsy_access_token

    @etsy_access_token.setter
    def etsy_access_token(self, etsy_access_token):
        """Sets the etsy_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :param etsy_access_token: The etsy_access_token of this AccountCartAdd.
        :type etsy_access_token: str
        """

        self._etsy_access_token = etsy_access_token

    @property
    def etsy_client_id(self):
        """Gets the etsy_client_id of this AccountCartAdd.

        Etsy Client Id

        :return: The etsy_client_id of this AccountCartAdd.
        :rtype: str
        """
        return self._etsy_client_id

    @etsy_client_id.setter
    def etsy_client_id(self, etsy_client_id):
        """Sets the etsy_client_id of this AccountCartAdd.

        Etsy Client Id

        :param etsy_client_id: The etsy_client_id of this AccountCartAdd.
        :type etsy_client_id: str
        """
        if etsy_client_id is None:
            raise ValueError("Invalid value for `etsy_client_id`, must not be `None`")

        self._etsy_client_id = etsy_client_id

    @property
    def etsy_keystring(self):
        """Gets the etsy_keystring of this AccountCartAdd.

        Etsy keystring

        :return: The etsy_keystring of this AccountCartAdd.
        :rtype: str
        """
        return self._etsy_keystring

    @etsy_keystring.setter
    def etsy_keystring(self, etsy_keystring):
        """Sets the etsy_keystring of this AccountCartAdd.

        Etsy keystring

        :param etsy_keystring: The etsy_keystring of this AccountCartAdd.
        :type etsy_keystring: str
        """

        self._etsy_keystring = etsy_keystring

    @property
    def etsy_refresh_token(self):
        """Gets the etsy_refresh_token of this AccountCartAdd.

        Etsy Refresh token

        :return: The etsy_refresh_token of this AccountCartAdd.
        :rtype: str
        """
        return self._etsy_refresh_token

    @etsy_refresh_token.setter
    def etsy_refresh_token(self, etsy_refresh_token):
        """Sets the etsy_refresh_token of this AccountCartAdd.

        Etsy Refresh token

        :param etsy_refresh_token: The etsy_refresh_token of this AccountCartAdd.
        :type etsy_refresh_token: str
        """
        if etsy_refresh_token is None:
            raise ValueError("Invalid value for `etsy_refresh_token`, must not be `None`")

        self._etsy_refresh_token = etsy_refresh_token

    @property
    def etsy_shared_secret(self):
        """Gets the etsy_shared_secret of this AccountCartAdd.

        Etsy shared secret

        :return: The etsy_shared_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._etsy_shared_secret

    @etsy_shared_secret.setter
    def etsy_shared_secret(self, etsy_shared_secret):
        """Sets the etsy_shared_secret of this AccountCartAdd.

        Etsy shared secret

        :param etsy_shared_secret: The etsy_shared_secret of this AccountCartAdd.
        :type etsy_shared_secret: str
        """

        self._etsy_shared_secret = etsy_shared_secret

    @property
    def etsy_token_secret(self):
        """Gets the etsy_token_secret of this AccountCartAdd.

        Secret token authorizing the app to access resources on behalf of a user

        :return: The etsy_token_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._etsy_token_secret

    @etsy_token_secret.setter
    def etsy_token_secret(self, etsy_token_secret):
        """Sets the etsy_token_secret of this AccountCartAdd.

        Secret token authorizing the app to access resources on behalf of a user

        :param etsy_token_secret: The etsy_token_secret of this AccountCartAdd.
        :type etsy_token_secret: str
        """

        self._etsy_token_secret = etsy_token_secret

    @property
    def ftp_host(self):
        """Gets the ftp_host of this AccountCartAdd.

        FTP connection host

        :return: The ftp_host of this AccountCartAdd.
        :rtype: str
        """
        return self._ftp_host

    @ftp_host.setter
    def ftp_host(self, ftp_host):
        """Sets the ftp_host of this AccountCartAdd.

        FTP connection host

        :param ftp_host: The ftp_host of this AccountCartAdd.
        :type ftp_host: str
        """

        self._ftp_host = ftp_host

    @property
    def ftp_password(self):
        """Gets the ftp_password of this AccountCartAdd.

        FTP Password

        :return: The ftp_password of this AccountCartAdd.
        :rtype: str
        """
        return self._ftp_password

    @ftp_password.setter
    def ftp_password(self, ftp_password):
        """Sets the ftp_password of this AccountCartAdd.

        FTP Password

        :param ftp_password: The ftp_password of this AccountCartAdd.
        :type ftp_password: str
        """

        self._ftp_password = ftp_password

    @property
    def ftp_port(self):
        """Gets the ftp_port of this AccountCartAdd.

        FTP Port

        :return: The ftp_port of this AccountCartAdd.
        :rtype: int
        """
        return self._ftp_port

    @ftp_port.setter
    def ftp_port(self, ftp_port):
        """Sets the ftp_port of this AccountCartAdd.

        FTP Port

        :param ftp_port: The ftp_port of this AccountCartAdd.
        :type ftp_port: int
        """

        self._ftp_port = ftp_port

    @property
    def ftp_store_dir(self):
        """Gets the ftp_store_dir of this AccountCartAdd.

        FTP Store dir

        :return: The ftp_store_dir of this AccountCartAdd.
        :rtype: str
        """
        return self._ftp_store_dir

    @ftp_store_dir.setter
    def ftp_store_dir(self, ftp_store_dir):
        """Sets the ftp_store_dir of this AccountCartAdd.

        FTP Store dir

        :param ftp_store_dir: The ftp_store_dir of this AccountCartAdd.
        :type ftp_store_dir: str
        """

        self._ftp_store_dir = ftp_store_dir

    @property
    def ftp_user(self):
        """Gets the ftp_user of this AccountCartAdd.

        FTP User

        :return: The ftp_user of this AccountCartAdd.
        :rtype: str
        """
        return self._ftp_user

    @ftp_user.setter
    def ftp_user(self, ftp_user):
        """Sets the ftp_user of this AccountCartAdd.

        FTP User

        :param ftp_user: The ftp_user of this AccountCartAdd.
        :type ftp_user: str
        """

        self._ftp_user = ftp_user

    @property
    def hybris_client_id(self):
        """Gets the hybris_client_id of this AccountCartAdd.

        Omni Commerce Connector Client ID

        :return: The hybris_client_id of this AccountCartAdd.
        :rtype: str
        """
        return self._hybris_client_id

    @hybris_client_id.setter
    def hybris_client_id(self, hybris_client_id):
        """Sets the hybris_client_id of this AccountCartAdd.

        Omni Commerce Connector Client ID

        :param hybris_client_id: The hybris_client_id of this AccountCartAdd.
        :type hybris_client_id: str
        """

        self._hybris_client_id = hybris_client_id

    @property
    def hybris_client_secret(self):
        """Gets the hybris_client_secret of this AccountCartAdd.

        Omni Commerce Connector Client Secret

        :return: The hybris_client_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._hybris_client_secret

    @hybris_client_secret.setter
    def hybris_client_secret(self, hybris_client_secret):
        """Sets the hybris_client_secret of this AccountCartAdd.

        Omni Commerce Connector Client Secret

        :param hybris_client_secret: The hybris_client_secret of this AccountCartAdd.
        :type hybris_client_secret: str
        """

        self._hybris_client_secret = hybris_client_secret

    @property
    def hybris_password(self):
        """Gets the hybris_password of this AccountCartAdd.

        User password

        :return: The hybris_password of this AccountCartAdd.
        :rtype: str
        """
        return self._hybris_password

    @hybris_password.setter
    def hybris_password(self, hybris_password):
        """Sets the hybris_password of this AccountCartAdd.

        User password

        :param hybris_password: The hybris_password of this AccountCartAdd.
        :type hybris_password: str
        """

        self._hybris_password = hybris_password

    @property
    def hybris_username(self):
        """Gets the hybris_username of this AccountCartAdd.

        User Name

        :return: The hybris_username of this AccountCartAdd.
        :rtype: str
        """
        return self._hybris_username

    @hybris_username.setter
    def hybris_username(self, hybris_username):
        """Sets the hybris_username of this AccountCartAdd.

        User Name

        :param hybris_username: The hybris_username of this AccountCartAdd.
        :type hybris_username: str
        """

        self._hybris_username = hybris_username

    @property
    def hybris_websites(self):
        """Gets the hybris_websites of this AccountCartAdd.

        Websites to stores mapping data

        :return: The hybris_websites of this AccountCartAdd.
        :rtype: List[AccountCartAddHybrisWebsitesInner]
        """
        return self._hybris_websites

    @hybris_websites.setter
    def hybris_websites(self, hybris_websites):
        """Sets the hybris_websites of this AccountCartAdd.

        Websites to stores mapping data

        :param hybris_websites: The hybris_websites of this AccountCartAdd.
        :type hybris_websites: List[AccountCartAddHybrisWebsitesInner]
        """
        if hybris_websites is not None and len(hybris_websites) < 1:
            raise ValueError("Invalid value for `hybris_websites`, number of items must be greater than or equal to `1`")

        self._hybris_websites = hybris_websites

    @property
    def lightspeed_api_key(self):
        """Gets the lightspeed_api_key of this AccountCartAdd.

        LightSpeed api key

        :return: The lightspeed_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self._lightspeed_api_key

    @lightspeed_api_key.setter
    def lightspeed_api_key(self, lightspeed_api_key):
        """Sets the lightspeed_api_key of this AccountCartAdd.

        LightSpeed api key

        :param lightspeed_api_key: The lightspeed_api_key of this AccountCartAdd.
        :type lightspeed_api_key: str
        """

        self._lightspeed_api_key = lightspeed_api_key

    @property
    def lightspeed_api_secret(self):
        """Gets the lightspeed_api_secret of this AccountCartAdd.

        LightSpeed api secret

        :return: The lightspeed_api_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._lightspeed_api_secret

    @lightspeed_api_secret.setter
    def lightspeed_api_secret(self, lightspeed_api_secret):
        """Sets the lightspeed_api_secret of this AccountCartAdd.

        LightSpeed api secret

        :param lightspeed_api_secret: The lightspeed_api_secret of this AccountCartAdd.
        :type lightspeed_api_secret: str
        """

        self._lightspeed_api_secret = lightspeed_api_secret

    @property
    def magento_access_token(self):
        """Gets the magento_access_token of this AccountCartAdd.

        Magento Access Token

        :return: The magento_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self._magento_access_token

    @magento_access_token.setter
    def magento_access_token(self, magento_access_token):
        """Sets the magento_access_token of this AccountCartAdd.

        Magento Access Token

        :param magento_access_token: The magento_access_token of this AccountCartAdd.
        :type magento_access_token: str
        """

        self._magento_access_token = magento_access_token

    @property
    def magento_consumer_key(self):
        """Gets the magento_consumer_key of this AccountCartAdd.

        Magento Consumer Key

        :return: The magento_consumer_key of this AccountCartAdd.
        :rtype: str
        """
        return self._magento_consumer_key

    @magento_consumer_key.setter
    def magento_consumer_key(self, magento_consumer_key):
        """Sets the magento_consumer_key of this AccountCartAdd.

        Magento Consumer Key

        :param magento_consumer_key: The magento_consumer_key of this AccountCartAdd.
        :type magento_consumer_key: str
        """

        self._magento_consumer_key = magento_consumer_key

    @property
    def magento_consumer_secret(self):
        """Gets the magento_consumer_secret of this AccountCartAdd.

        Magento Consumer Secret

        :return: The magento_consumer_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._magento_consumer_secret

    @magento_consumer_secret.setter
    def magento_consumer_secret(self, magento_consumer_secret):
        """Sets the magento_consumer_secret of this AccountCartAdd.

        Magento Consumer Secret

        :param magento_consumer_secret: The magento_consumer_secret of this AccountCartAdd.
        :type magento_consumer_secret: str
        """

        self._magento_consumer_secret = magento_consumer_secret

    @property
    def magento_token_secret(self):
        """Gets the magento_token_secret of this AccountCartAdd.

        Magento Token Secret

        :return: The magento_token_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._magento_token_secret

    @magento_token_secret.setter
    def magento_token_secret(self, magento_token_secret):
        """Sets the magento_token_secret of this AccountCartAdd.

        Magento Token Secret

        :param magento_token_secret: The magento_token_secret of this AccountCartAdd.
        :type magento_token_secret: str
        """

        self._magento_token_secret = magento_token_secret

    @property
    def mercado_libre_app_id(self):
        """Gets the mercado_libre_app_id of this AccountCartAdd.

        Mercado Libre App ID

        :return: The mercado_libre_app_id of this AccountCartAdd.
        :rtype: str
        """
        return self._mercado_libre_app_id

    @mercado_libre_app_id.setter
    def mercado_libre_app_id(self, mercado_libre_app_id):
        """Sets the mercado_libre_app_id of this AccountCartAdd.

        Mercado Libre App ID

        :param mercado_libre_app_id: The mercado_libre_app_id of this AccountCartAdd.
        :type mercado_libre_app_id: str
        """

        self._mercado_libre_app_id = mercado_libre_app_id

    @property
    def mercado_libre_app_secret_key(self):
        """Gets the mercado_libre_app_secret_key of this AccountCartAdd.

        Mercado Libre App Secret Key

        :return: The mercado_libre_app_secret_key of this AccountCartAdd.
        :rtype: str
        """
        return self._mercado_libre_app_secret_key

    @mercado_libre_app_secret_key.setter
    def mercado_libre_app_secret_key(self, mercado_libre_app_secret_key):
        """Sets the mercado_libre_app_secret_key of this AccountCartAdd.

        Mercado Libre App Secret Key

        :param mercado_libre_app_secret_key: The mercado_libre_app_secret_key of this AccountCartAdd.
        :type mercado_libre_app_secret_key: str
        """

        self._mercado_libre_app_secret_key = mercado_libre_app_secret_key

    @property
    def mercado_libre_refresh_token(self):
        """Gets the mercado_libre_refresh_token of this AccountCartAdd.

        Mercado Libre Refresh Token

        :return: The mercado_libre_refresh_token of this AccountCartAdd.
        :rtype: str
        """
        return self._mercado_libre_refresh_token

    @mercado_libre_refresh_token.setter
    def mercado_libre_refresh_token(self, mercado_libre_refresh_token):
        """Sets the mercado_libre_refresh_token of this AccountCartAdd.

        Mercado Libre Refresh Token

        :param mercado_libre_refresh_token: The mercado_libre_refresh_token of this AccountCartAdd.
        :type mercado_libre_refresh_token: str
        """

        self._mercado_libre_refresh_token = mercado_libre_refresh_token

    @property
    def neto_api_key(self):
        """Gets the neto_api_key of this AccountCartAdd.

        Neto API Key

        :return: The neto_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self._neto_api_key

    @neto_api_key.setter
    def neto_api_key(self, neto_api_key):
        """Sets the neto_api_key of this AccountCartAdd.

        Neto API Key

        :param neto_api_key: The neto_api_key of this AccountCartAdd.
        :type neto_api_key: str
        """

        self._neto_api_key = neto_api_key

    @property
    def neto_api_username(self):
        """Gets the neto_api_username of this AccountCartAdd.

        Neto User Name

        :return: The neto_api_username of this AccountCartAdd.
        :rtype: str
        """
        return self._neto_api_username

    @neto_api_username.setter
    def neto_api_username(self, neto_api_username):
        """Sets the neto_api_username of this AccountCartAdd.

        Neto User Name

        :param neto_api_username: The neto_api_username of this AccountCartAdd.
        :type neto_api_username: str
        """

        self._neto_api_username = neto_api_username

    @property
    def prestashop_webservice_key(self):
        """Gets the prestashop_webservice_key of this AccountCartAdd.

        Prestashop webservice key

        :return: The prestashop_webservice_key of this AccountCartAdd.
        :rtype: str
        """
        return self._prestashop_webservice_key

    @prestashop_webservice_key.setter
    def prestashop_webservice_key(self, prestashop_webservice_key):
        """Sets the prestashop_webservice_key of this AccountCartAdd.

        Prestashop webservice key

        :param prestashop_webservice_key: The prestashop_webservice_key of this AccountCartAdd.
        :type prestashop_webservice_key: str
        """

        self._prestashop_webservice_key = prestashop_webservice_key

    @property
    def shopify_access_token(self):
        """Gets the shopify_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :return: The shopify_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self._shopify_access_token

    @shopify_access_token.setter
    def shopify_access_token(self, shopify_access_token):
        """Sets the shopify_access_token of this AccountCartAdd.

        Access token authorizing the app to access resources on behalf of a user

        :param shopify_access_token: The shopify_access_token of this AccountCartAdd.
        :type shopify_access_token: str
        """

        self._shopify_access_token = shopify_access_token

    @property
    def shopify_api_key(self):
        """Gets the shopify_api_key of this AccountCartAdd.

        Shopify API Key

        :return: The shopify_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self._shopify_api_key

    @shopify_api_key.setter
    def shopify_api_key(self, shopify_api_key):
        """Sets the shopify_api_key of this AccountCartAdd.

        Shopify API Key

        :param shopify_api_key: The shopify_api_key of this AccountCartAdd.
        :type shopify_api_key: str
        """

        self._shopify_api_key = shopify_api_key

    @property
    def shopify_api_password(self):
        """Gets the shopify_api_password of this AccountCartAdd.

        Shopify API Password

        :return: The shopify_api_password of this AccountCartAdd.
        :rtype: str
        """
        return self._shopify_api_password

    @shopify_api_password.setter
    def shopify_api_password(self, shopify_api_password):
        """Sets the shopify_api_password of this AccountCartAdd.

        Shopify API Password

        :param shopify_api_password: The shopify_api_password of this AccountCartAdd.
        :type shopify_api_password: str
        """

        self._shopify_api_password = shopify_api_password

    @property
    def shopify_shared_secret(self):
        """Gets the shopify_shared_secret of this AccountCartAdd.

        Shared secret

        :return: The shopify_shared_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._shopify_shared_secret

    @shopify_shared_secret.setter
    def shopify_shared_secret(self, shopify_shared_secret):
        """Sets the shopify_shared_secret of this AccountCartAdd.

        Shared secret

        :param shopify_shared_secret: The shopify_shared_secret of this AccountCartAdd.
        :type shopify_shared_secret: str
        """

        self._shopify_shared_secret = shopify_shared_secret

    @property
    def shopware_access_key(self):
        """Gets the shopware_access_key of this AccountCartAdd.

        Shopware access key

        :return: The shopware_access_key of this AccountCartAdd.
        :rtype: str
        """
        return self._shopware_access_key

    @shopware_access_key.setter
    def shopware_access_key(self, shopware_access_key):
        """Sets the shopware_access_key of this AccountCartAdd.

        Shopware access key

        :param shopware_access_key: The shopware_access_key of this AccountCartAdd.
        :type shopware_access_key: str
        """

        self._shopware_access_key = shopware_access_key

    @property
    def shopware_api_key(self):
        """Gets the shopware_api_key of this AccountCartAdd.

        Shopware api key

        :return: The shopware_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self._shopware_api_key

    @shopware_api_key.setter
    def shopware_api_key(self, shopware_api_key):
        """Sets the shopware_api_key of this AccountCartAdd.

        Shopware api key

        :param shopware_api_key: The shopware_api_key of this AccountCartAdd.
        :type shopware_api_key: str
        """

        self._shopware_api_key = shopware_api_key

    @property
    def shopware_api_secret(self):
        """Gets the shopware_api_secret of this AccountCartAdd.

        Shopware client secret access key

        :return: The shopware_api_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._shopware_api_secret

    @shopware_api_secret.setter
    def shopware_api_secret(self, shopware_api_secret):
        """Sets the shopware_api_secret of this AccountCartAdd.

        Shopware client secret access key

        :param shopware_api_secret: The shopware_api_secret of this AccountCartAdd.
        :type shopware_api_secret: str
        """

        self._shopware_api_secret = shopware_api_secret

    @property
    def squarespace_api_key(self):
        """Gets the squarespace_api_key of this AccountCartAdd.

        Squarespace API Key

        :return: The squarespace_api_key of this AccountCartAdd.
        :rtype: str
        """
        return self._squarespace_api_key

    @squarespace_api_key.setter
    def squarespace_api_key(self, squarespace_api_key):
        """Sets the squarespace_api_key of this AccountCartAdd.

        Squarespace API Key

        :param squarespace_api_key: The squarespace_api_key of this AccountCartAdd.
        :type squarespace_api_key: str
        """

        self._squarespace_api_key = squarespace_api_key

    @property
    def store_key(self):
        """Gets the store_key of this AccountCartAdd.

        Set this parameter if bridge is already uploaded to store

        :return: The store_key of this AccountCartAdd.
        :rtype: str
        """
        return self._store_key

    @store_key.setter
    def store_key(self, store_key):
        """Sets the store_key of this AccountCartAdd.

        Set this parameter if bridge is already uploaded to store

        :param store_key: The store_key of this AccountCartAdd.
        :type store_key: str
        """

        self._store_key = store_key

    @property
    def store_root(self):
        """Gets the store_root of this AccountCartAdd.

        Absolute path to the store root directory (used with \"bridge_url\" parameter)

        :return: The store_root of this AccountCartAdd.
        :rtype: str
        """
        return self._store_root

    @store_root.setter
    def store_root(self, store_root):
        """Sets the store_root of this AccountCartAdd.

        Absolute path to the store root directory (used with \"bridge_url\" parameter)

        :param store_root: The store_root of this AccountCartAdd.
        :type store_root: str
        """

        self._store_root = store_root

    @property
    def store_url(self):
        """Gets the store_url of this AccountCartAdd.

        A web address of a store that you would like to connect to API2Cart

        :return: The store_url of this AccountCartAdd.
        :rtype: str
        """
        return self._store_url

    @store_url.setter
    def store_url(self, store_url):
        """Sets the store_url of this AccountCartAdd.

        A web address of a store that you would like to connect to API2Cart

        :param store_url: The store_url of this AccountCartAdd.
        :type store_url: str
        """
        if store_url is None:
            raise ValueError("Invalid value for `store_url`, must not be `None`")

        self._store_url = store_url

    @property
    def validate_version(self):
        """Gets the validate_version of this AccountCartAdd.

        Specify if api2cart should validate cart version

        :return: The validate_version of this AccountCartAdd.
        :rtype: bool
        """
        return self._validate_version

    @validate_version.setter
    def validate_version(self, validate_version):
        """Sets the validate_version of this AccountCartAdd.

        Specify if api2cart should validate cart version

        :param validate_version: The validate_version of this AccountCartAdd.
        :type validate_version: bool
        """

        self._validate_version = validate_version

    @property
    def verify(self):
        """Gets the verify of this AccountCartAdd.

        Enables or disables cart's verification

        :return: The verify of this AccountCartAdd.
        :rtype: bool
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this AccountCartAdd.

        Enables or disables cart's verification

        :param verify: The verify of this AccountCartAdd.
        :type verify: bool
        """

        self._verify = verify

    @property
    def volusion_login(self):
        """Gets the volusion_login of this AccountCartAdd.

        It's a Volusion account for which API is enabled

        :return: The volusion_login of this AccountCartAdd.
        :rtype: str
        """
        return self._volusion_login

    @volusion_login.setter
    def volusion_login(self, volusion_login):
        """Sets the volusion_login of this AccountCartAdd.

        It's a Volusion account for which API is enabled

        :param volusion_login: The volusion_login of this AccountCartAdd.
        :type volusion_login: str
        """

        self._volusion_login = volusion_login

    @property
    def volusion_password(self):
        """Gets the volusion_password of this AccountCartAdd.

        Volusion API Password

        :return: The volusion_password of this AccountCartAdd.
        :rtype: str
        """
        return self._volusion_password

    @volusion_password.setter
    def volusion_password(self, volusion_password):
        """Sets the volusion_password of this AccountCartAdd.

        Volusion API Password

        :param volusion_password: The volusion_password of this AccountCartAdd.
        :type volusion_password: str
        """

        self._volusion_password = volusion_password

    @property
    def walmart_channel_type(self):
        """Gets the walmart_channel_type of this AccountCartAdd.

        Walmart WM_CONSUMER.CHANNEL.TYPE header

        :return: The walmart_channel_type of this AccountCartAdd.
        :rtype: str
        """
        return self._walmart_channel_type

    @walmart_channel_type.setter
    def walmart_channel_type(self, walmart_channel_type):
        """Sets the walmart_channel_type of this AccountCartAdd.

        Walmart WM_CONSUMER.CHANNEL.TYPE header

        :param walmart_channel_type: The walmart_channel_type of this AccountCartAdd.
        :type walmart_channel_type: str
        """

        self._walmart_channel_type = walmart_channel_type

    @property
    def walmart_client_id(self):
        """Gets the walmart_client_id of this AccountCartAdd.

        Walmart client ID

        :return: The walmart_client_id of this AccountCartAdd.
        :rtype: str
        """
        return self._walmart_client_id

    @walmart_client_id.setter
    def walmart_client_id(self, walmart_client_id):
        """Sets the walmart_client_id of this AccountCartAdd.

        Walmart client ID

        :param walmart_client_id: The walmart_client_id of this AccountCartAdd.
        :type walmart_client_id: str
        """

        self._walmart_client_id = walmart_client_id

    @property
    def walmart_client_secret(self):
        """Gets the walmart_client_secret of this AccountCartAdd.

        Walmart client secret

        :return: The walmart_client_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._walmart_client_secret

    @walmart_client_secret.setter
    def walmart_client_secret(self, walmart_client_secret):
        """Sets the walmart_client_secret of this AccountCartAdd.

        Walmart client secret

        :param walmart_client_secret: The walmart_client_secret of this AccountCartAdd.
        :type walmart_client_secret: str
        """

        self._walmart_client_secret = walmart_client_secret

    @property
    def walmart_environment(self):
        """Gets the walmart_environment of this AccountCartAdd.

        Walmart environment

        :return: The walmart_environment of this AccountCartAdd.
        :rtype: str
        """
        return self._walmart_environment

    @walmart_environment.setter
    def walmart_environment(self, walmart_environment):
        """Sets the walmart_environment of this AccountCartAdd.

        Walmart environment

        :param walmart_environment: The walmart_environment of this AccountCartAdd.
        :type walmart_environment: str
        """

        self._walmart_environment = walmart_environment

    @property
    def wc_consumer_key(self):
        """Gets the wc_consumer_key of this AccountCartAdd.

        Woocommerce consumer key

        :return: The wc_consumer_key of this AccountCartAdd.
        :rtype: str
        """
        return self._wc_consumer_key

    @wc_consumer_key.setter
    def wc_consumer_key(self, wc_consumer_key):
        """Sets the wc_consumer_key of this AccountCartAdd.

        Woocommerce consumer key

        :param wc_consumer_key: The wc_consumer_key of this AccountCartAdd.
        :type wc_consumer_key: str
        """

        self._wc_consumer_key = wc_consumer_key

    @property
    def wc_consumer_secret(self):
        """Gets the wc_consumer_secret of this AccountCartAdd.

        Woocommerce consumer secret

        :return: The wc_consumer_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._wc_consumer_secret

    @wc_consumer_secret.setter
    def wc_consumer_secret(self, wc_consumer_secret):
        """Sets the wc_consumer_secret of this AccountCartAdd.

        Woocommerce consumer secret

        :param wc_consumer_secret: The wc_consumer_secret of this AccountCartAdd.
        :type wc_consumer_secret: str
        """

        self._wc_consumer_secret = wc_consumer_secret

    @property
    def wix_app_id(self):
        """Gets the wix_app_id of this AccountCartAdd.

        Wix App ID

        :return: The wix_app_id of this AccountCartAdd.
        :rtype: str
        """
        return self._wix_app_id

    @wix_app_id.setter
    def wix_app_id(self, wix_app_id):
        """Sets the wix_app_id of this AccountCartAdd.

        Wix App ID

        :param wix_app_id: The wix_app_id of this AccountCartAdd.
        :type wix_app_id: str
        """

        self._wix_app_id = wix_app_id

    @property
    def wix_app_secret_key(self):
        """Gets the wix_app_secret_key of this AccountCartAdd.

        Wix App Secret Key

        :return: The wix_app_secret_key of this AccountCartAdd.
        :rtype: str
        """
        return self._wix_app_secret_key

    @wix_app_secret_key.setter
    def wix_app_secret_key(self, wix_app_secret_key):
        """Sets the wix_app_secret_key of this AccountCartAdd.

        Wix App Secret Key

        :param wix_app_secret_key: The wix_app_secret_key of this AccountCartAdd.
        :type wix_app_secret_key: str
        """

        self._wix_app_secret_key = wix_app_secret_key

    @property
    def wix_refresh_token(self):
        """Gets the wix_refresh_token of this AccountCartAdd.

        Wix refresh token

        :return: The wix_refresh_token of this AccountCartAdd.
        :rtype: str
        """
        return self._wix_refresh_token

    @wix_refresh_token.setter
    def wix_refresh_token(self, wix_refresh_token):
        """Sets the wix_refresh_token of this AccountCartAdd.

        Wix refresh token

        :param wix_refresh_token: The wix_refresh_token of this AccountCartAdd.
        :type wix_refresh_token: str
        """

        self._wix_refresh_token = wix_refresh_token

    @property
    def zid_access_token(self):
        """Gets the zid_access_token of this AccountCartAdd.

        Zid Access Token

        :return: The zid_access_token of this AccountCartAdd.
        :rtype: str
        """
        return self._zid_access_token

    @zid_access_token.setter
    def zid_access_token(self, zid_access_token):
        """Sets the zid_access_token of this AccountCartAdd.

        Zid Access Token

        :param zid_access_token: The zid_access_token of this AccountCartAdd.
        :type zid_access_token: str
        """

        self._zid_access_token = zid_access_token

    @property
    def zid_authorization(self):
        """Gets the zid_authorization of this AccountCartAdd.

        Zid Authorization

        :return: The zid_authorization of this AccountCartAdd.
        :rtype: str
        """
        return self._zid_authorization

    @zid_authorization.setter
    def zid_authorization(self, zid_authorization):
        """Sets the zid_authorization of this AccountCartAdd.

        Zid Authorization

        :param zid_authorization: The zid_authorization of this AccountCartAdd.
        :type zid_authorization: str
        """

        self._zid_authorization = zid_authorization

    @property
    def zid_client_id(self):
        """Gets the zid_client_id of this AccountCartAdd.

        Zid Client ID

        :return: The zid_client_id of this AccountCartAdd.
        :rtype: int
        """
        return self._zid_client_id

    @zid_client_id.setter
    def zid_client_id(self, zid_client_id):
        """Sets the zid_client_id of this AccountCartAdd.

        Zid Client ID

        :param zid_client_id: The zid_client_id of this AccountCartAdd.
        :type zid_client_id: int
        """

        self._zid_client_id = zid_client_id

    @property
    def zid_client_secret(self):
        """Gets the zid_client_secret of this AccountCartAdd.

        Zid Client Secret

        :return: The zid_client_secret of this AccountCartAdd.
        :rtype: str
        """
        return self._zid_client_secret

    @zid_client_secret.setter
    def zid_client_secret(self, zid_client_secret):
        """Sets the zid_client_secret of this AccountCartAdd.

        Zid Client Secret

        :param zid_client_secret: The zid_client_secret of this AccountCartAdd.
        :type zid_client_secret: str
        """

        self._zid_client_secret = zid_client_secret

    @property
    def zid_refresh_token(self):
        """Gets the zid_refresh_token of this AccountCartAdd.

        Zid refresh token

        :return: The zid_refresh_token of this AccountCartAdd.
        :rtype: str
        """
        return self._zid_refresh_token

    @zid_refresh_token.setter
    def zid_refresh_token(self, zid_refresh_token):
        """Sets the zid_refresh_token of this AccountCartAdd.

        Zid refresh token

        :param zid_refresh_token: The zid_refresh_token of this AccountCartAdd.
        :type zid_refresh_token: str
        """

        self._zid_refresh_token = zid_refresh_token
