/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Carrier;
import org.openapitools.client.model.CartChannel;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.Info;
import org.openapitools.client.model.Language;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CartStoreInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CartStoreInfo {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_CARRIER_INFO = "carrier_info";
  @SerializedName(SERIALIZED_NAME_CARRIER_INFO)
  private List<Carrier> carrierInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<CartChannel> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_DEFAULT_WAREHOUSE_ID = "default_warehouse_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_WAREHOUSE_ID)
  private String defaultWarehouseId;

  public static final String SERIALIZED_NAME_DIMENSION_UNIT = "dimension_unit";
  @SerializedName(SERIALIZED_NAME_DIMENSION_UNIT)
  private String dimensionUnit;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MULTI_STORE_URL = "multi_store_url";
  @SerializedName(SERIALIZED_NAME_MULTI_STORE_URL)
  private String multiStoreUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRICES_INCLUDE_TAX = "prices_include_tax";
  @SerializedName(SERIALIZED_NAME_PRICES_INCLUDE_TAX)
  private Boolean pricesIncludeTax;

  public static final String SERIALIZED_NAME_ROOT_CATEGORY_ID = "root_category_id";
  @SerializedName(SERIALIZED_NAME_ROOT_CATEGORY_ID)
  private String rootCategoryId;

  public static final String SERIALIZED_NAME_STORE_CURRENCIES = "store_currencies";
  @SerializedName(SERIALIZED_NAME_STORE_CURRENCIES)
  private List<Currency> storeCurrencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_STORE_LANGUAGES = "store_languages";
  @SerializedName(SERIALIZED_NAME_STORE_LANGUAGES)
  private List<Language> storeLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_OWNER_INFO = "store_owner_info";
  @SerializedName(SERIALIZED_NAME_STORE_OWNER_INFO)
  private Info storeOwnerInfo;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_WEIGHT_UNIT = "weight_unit";
  @SerializedName(SERIALIZED_NAME_WEIGHT_UNIT)
  private String weightUnit;

  public CartStoreInfo() {
  }

  public CartStoreInfo active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public CartStoreInfo additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public CartStoreInfo carrierInfo(List<Carrier> carrierInfo) {
    this.carrierInfo = carrierInfo;
    return this;
  }

  public CartStoreInfo addCarrierInfoItem(Carrier carrierInfoItem) {
    if (this.carrierInfo == null) {
      this.carrierInfo = new ArrayList<>();
    }
    this.carrierInfo.add(carrierInfoItem);
    return this;
  }

  /**
   * Get carrierInfo
   * @return carrierInfo
   */
  @javax.annotation.Nullable
  public List<Carrier> getCarrierInfo() {
    return carrierInfo;
  }

  public void setCarrierInfo(List<Carrier> carrierInfo) {
    this.carrierInfo = carrierInfo;
  }


  public CartStoreInfo channels(List<CartChannel> channels) {
    this.channels = channels;
    return this;
  }

  public CartStoreInfo addChannelsItem(CartChannel channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * Get channels
   * @return channels
   */
  @javax.annotation.Nullable
  public List<CartChannel> getChannels() {
    return channels;
  }

  public void setChannels(List<CartChannel> channels) {
    this.channels = channels;
  }


  public CartStoreInfo country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CartStoreInfo currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public CartStoreInfo customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public CartStoreInfo defaultWarehouseId(String defaultWarehouseId) {
    this.defaultWarehouseId = defaultWarehouseId;
    return this;
  }

  /**
   * Get defaultWarehouseId
   * @return defaultWarehouseId
   */
  @javax.annotation.Nullable
  public String getDefaultWarehouseId() {
    return defaultWarehouseId;
  }

  public void setDefaultWarehouseId(String defaultWarehouseId) {
    this.defaultWarehouseId = defaultWarehouseId;
  }


  public CartStoreInfo dimensionUnit(String dimensionUnit) {
    this.dimensionUnit = dimensionUnit;
    return this;
  }

  /**
   * Get dimensionUnit
   * @return dimensionUnit
   */
  @javax.annotation.Nullable
  public String getDimensionUnit() {
    return dimensionUnit;
  }

  public void setDimensionUnit(String dimensionUnit) {
    this.dimensionUnit = dimensionUnit;
  }


  public CartStoreInfo language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public CartStoreInfo multiStoreUrl(String multiStoreUrl) {
    this.multiStoreUrl = multiStoreUrl;
    return this;
  }

  /**
   * Get multiStoreUrl
   * @return multiStoreUrl
   */
  @javax.annotation.Nullable
  public String getMultiStoreUrl() {
    return multiStoreUrl;
  }

  public void setMultiStoreUrl(String multiStoreUrl) {
    this.multiStoreUrl = multiStoreUrl;
  }


  public CartStoreInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CartStoreInfo pricesIncludeTax(Boolean pricesIncludeTax) {
    this.pricesIncludeTax = pricesIncludeTax;
    return this;
  }

  /**
   * Get pricesIncludeTax
   * @return pricesIncludeTax
   */
  @javax.annotation.Nullable
  public Boolean getPricesIncludeTax() {
    return pricesIncludeTax;
  }

  public void setPricesIncludeTax(Boolean pricesIncludeTax) {
    this.pricesIncludeTax = pricesIncludeTax;
  }


  public CartStoreInfo rootCategoryId(String rootCategoryId) {
    this.rootCategoryId = rootCategoryId;
    return this;
  }

  /**
   * Get rootCategoryId
   * @return rootCategoryId
   */
  @javax.annotation.Nullable
  public String getRootCategoryId() {
    return rootCategoryId;
  }

  public void setRootCategoryId(String rootCategoryId) {
    this.rootCategoryId = rootCategoryId;
  }


  public CartStoreInfo storeCurrencies(List<Currency> storeCurrencies) {
    this.storeCurrencies = storeCurrencies;
    return this;
  }

  public CartStoreInfo addStoreCurrenciesItem(Currency storeCurrenciesItem) {
    if (this.storeCurrencies == null) {
      this.storeCurrencies = new ArrayList<>();
    }
    this.storeCurrencies.add(storeCurrenciesItem);
    return this;
  }

  /**
   * Get storeCurrencies
   * @return storeCurrencies
   */
  @javax.annotation.Nullable
  public List<Currency> getStoreCurrencies() {
    return storeCurrencies;
  }

  public void setStoreCurrencies(List<Currency> storeCurrencies) {
    this.storeCurrencies = storeCurrencies;
  }


  public CartStoreInfo storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Get storeId
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public CartStoreInfo storeLanguages(List<Language> storeLanguages) {
    this.storeLanguages = storeLanguages;
    return this;
  }

  public CartStoreInfo addStoreLanguagesItem(Language storeLanguagesItem) {
    if (this.storeLanguages == null) {
      this.storeLanguages = new ArrayList<>();
    }
    this.storeLanguages.add(storeLanguagesItem);
    return this;
  }

  /**
   * Get storeLanguages
   * @return storeLanguages
   */
  @javax.annotation.Nullable
  public List<Language> getStoreLanguages() {
    return storeLanguages;
  }

  public void setStoreLanguages(List<Language> storeLanguages) {
    this.storeLanguages = storeLanguages;
  }


  public CartStoreInfo storeOwnerInfo(Info storeOwnerInfo) {
    this.storeOwnerInfo = storeOwnerInfo;
    return this;
  }

  /**
   * Get storeOwnerInfo
   * @return storeOwnerInfo
   */
  @javax.annotation.Nullable
  public Info getStoreOwnerInfo() {
    return storeOwnerInfo;
  }

  public void setStoreOwnerInfo(Info storeOwnerInfo) {
    this.storeOwnerInfo = storeOwnerInfo;
  }


  public CartStoreInfo timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public CartStoreInfo weightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
    return this;
  }

  /**
   * Get weightUnit
   * @return weightUnit
   */
  @javax.annotation.Nullable
  public String getWeightUnit() {
    return weightUnit;
  }

  public void setWeightUnit(String weightUnit) {
    this.weightUnit = weightUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartStoreInfo cartStoreInfo = (CartStoreInfo) o;
    return Objects.equals(this.active, cartStoreInfo.active) &&
        Objects.equals(this.additionalFields, cartStoreInfo.additionalFields) &&
        Objects.equals(this.carrierInfo, cartStoreInfo.carrierInfo) &&
        Objects.equals(this.channels, cartStoreInfo.channels) &&
        Objects.equals(this.country, cartStoreInfo.country) &&
        Objects.equals(this.currency, cartStoreInfo.currency) &&
        Objects.equals(this.customFields, cartStoreInfo.customFields) &&
        Objects.equals(this.defaultWarehouseId, cartStoreInfo.defaultWarehouseId) &&
        Objects.equals(this.dimensionUnit, cartStoreInfo.dimensionUnit) &&
        Objects.equals(this.language, cartStoreInfo.language) &&
        Objects.equals(this.multiStoreUrl, cartStoreInfo.multiStoreUrl) &&
        Objects.equals(this.name, cartStoreInfo.name) &&
        Objects.equals(this.pricesIncludeTax, cartStoreInfo.pricesIncludeTax) &&
        Objects.equals(this.rootCategoryId, cartStoreInfo.rootCategoryId) &&
        Objects.equals(this.storeCurrencies, cartStoreInfo.storeCurrencies) &&
        Objects.equals(this.storeId, cartStoreInfo.storeId) &&
        Objects.equals(this.storeLanguages, cartStoreInfo.storeLanguages) &&
        Objects.equals(this.storeOwnerInfo, cartStoreInfo.storeOwnerInfo) &&
        Objects.equals(this.timezone, cartStoreInfo.timezone) &&
        Objects.equals(this.weightUnit, cartStoreInfo.weightUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, additionalFields, carrierInfo, channels, country, currency, customFields, defaultWarehouseId, dimensionUnit, language, multiStoreUrl, name, pricesIncludeTax, rootCategoryId, storeCurrencies, storeId, storeLanguages, storeOwnerInfo, timezone, weightUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartStoreInfo {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    carrierInfo: ").append(toIndentedString(carrierInfo)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    defaultWarehouseId: ").append(toIndentedString(defaultWarehouseId)).append("\n");
    sb.append("    dimensionUnit: ").append(toIndentedString(dimensionUnit)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    multiStoreUrl: ").append(toIndentedString(multiStoreUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pricesIncludeTax: ").append(toIndentedString(pricesIncludeTax)).append("\n");
    sb.append("    rootCategoryId: ").append(toIndentedString(rootCategoryId)).append("\n");
    sb.append("    storeCurrencies: ").append(toIndentedString(storeCurrencies)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    storeLanguages: ").append(toIndentedString(storeLanguages)).append("\n");
    sb.append("    storeOwnerInfo: ").append(toIndentedString(storeOwnerInfo)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    weightUnit: ").append(toIndentedString(weightUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("additional_fields");
    openapiFields.add("carrier_info");
    openapiFields.add("channels");
    openapiFields.add("country");
    openapiFields.add("currency");
    openapiFields.add("custom_fields");
    openapiFields.add("default_warehouse_id");
    openapiFields.add("dimension_unit");
    openapiFields.add("language");
    openapiFields.add("multi_store_url");
    openapiFields.add("name");
    openapiFields.add("prices_include_tax");
    openapiFields.add("root_category_id");
    openapiFields.add("store_currencies");
    openapiFields.add("store_id");
    openapiFields.add("store_languages");
    openapiFields.add("store_owner_info");
    openapiFields.add("timezone");
    openapiFields.add("weight_unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CartStoreInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartStoreInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartStoreInfo is not found in the empty JSON string", CartStoreInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CartStoreInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartStoreInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("carrier_info") != null && !jsonObj.get("carrier_info").isJsonNull()) {
        JsonArray jsonArraycarrierInfo = jsonObj.getAsJsonArray("carrier_info");
        if (jsonArraycarrierInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("carrier_info").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `carrier_info` to be an array in the JSON string but got `%s`", jsonObj.get("carrier_info").toString()));
          }

          // validate the optional field `carrier_info` (array)
          for (int i = 0; i < jsonArraycarrierInfo.size(); i++) {
            Carrier.validateJsonElement(jsonArraycarrierInfo.get(i));
          };
        }
      }
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull()) {
        JsonArray jsonArraychannels = jsonObj.getAsJsonArray("channels");
        if (jsonArraychannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("channels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
          }

          // validate the optional field `channels` (array)
          for (int i = 0; i < jsonArraychannels.size(); i++) {
            CartChannel.validateJsonElement(jsonArraychannels.get(i));
          };
        }
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("default_warehouse_id") != null && !jsonObj.get("default_warehouse_id").isJsonNull()) && !jsonObj.get("default_warehouse_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_warehouse_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_warehouse_id").toString()));
      }
      if ((jsonObj.get("dimension_unit") != null && !jsonObj.get("dimension_unit").isJsonNull()) && !jsonObj.get("dimension_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimension_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimension_unit").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("multi_store_url") != null && !jsonObj.get("multi_store_url").isJsonNull()) && !jsonObj.get("multi_store_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multi_store_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multi_store_url").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("root_category_id") != null && !jsonObj.get("root_category_id").isJsonNull()) && !jsonObj.get("root_category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `root_category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("root_category_id").toString()));
      }
      if (jsonObj.get("store_currencies") != null && !jsonObj.get("store_currencies").isJsonNull()) {
        JsonArray jsonArraystoreCurrencies = jsonObj.getAsJsonArray("store_currencies");
        if (jsonArraystoreCurrencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("store_currencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `store_currencies` to be an array in the JSON string but got `%s`", jsonObj.get("store_currencies").toString()));
          }

          // validate the optional field `store_currencies` (array)
          for (int i = 0; i < jsonArraystoreCurrencies.size(); i++) {
            Currency.validateJsonElement(jsonArraystoreCurrencies.get(i));
          };
        }
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      if (jsonObj.get("store_languages") != null && !jsonObj.get("store_languages").isJsonNull()) {
        JsonArray jsonArraystoreLanguages = jsonObj.getAsJsonArray("store_languages");
        if (jsonArraystoreLanguages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("store_languages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `store_languages` to be an array in the JSON string but got `%s`", jsonObj.get("store_languages").toString()));
          }

          // validate the optional field `store_languages` (array)
          for (int i = 0; i < jsonArraystoreLanguages.size(); i++) {
            Language.validateJsonElement(jsonArraystoreLanguages.get(i));
          };
        }
      }
      // validate the optional field `store_owner_info`
      if (jsonObj.get("store_owner_info") != null && !jsonObj.get("store_owner_info").isJsonNull()) {
        Info.validateJsonElement(jsonObj.get("store_owner_info"));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("weight_unit") != null && !jsonObj.get("weight_unit").isJsonNull()) && !jsonObj.get("weight_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weight_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weight_unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartStoreInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartStoreInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartStoreInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartStoreInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CartStoreInfo>() {
           @Override
           public void write(JsonWriter out, CartStoreInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartStoreInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CartStoreInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CartStoreInfo
   * @throws IOException if the JSON string is invalid with respect to CartStoreInfo
   */
  public static CartStoreInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartStoreInfo.class);
  }

  /**
   * Convert an instance of CartStoreInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

