/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CouponCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CouponAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CouponAction {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_APPLY_TO = "apply_to";
  @SerializedName(SERIALIZED_NAME_APPLY_TO)
  private String applyTo;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<CouponCondition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_DISCOUNT_QUANTITY_STEP = "discount_quantity_step";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_QUANTITY_STEP)
  private Integer discountQuantityStep;

  public static final String SERIALIZED_NAME_DISCOUNTED_QUANTITY = "discounted_quantity";
  @SerializedName(SERIALIZED_NAME_DISCOUNTED_QUANTITY)
  private BigDecimal discountedQuantity;

  public static final String SERIALIZED_NAME_INCLUDE_TAX = "include_tax";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TAX)
  private Boolean includeTax;

  public static final String SERIALIZED_NAME_LOGIC_OPERATOR = "logic_operator";
  @SerializedName(SERIALIZED_NAME_LOGIC_OPERATOR)
  private String logicOperator;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public CouponAction() {
  }

  public CouponAction additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public CouponAction amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public CouponAction applyTo(String applyTo) {
    this.applyTo = applyTo;
    return this;
  }

  /**
   * Get applyTo
   * @return applyTo
   */
  @javax.annotation.Nullable
  public String getApplyTo() {
    return applyTo;
  }

  public void setApplyTo(String applyTo) {
    this.applyTo = applyTo;
  }


  public CouponAction conditions(List<CouponCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public CouponAction addConditionsItem(CouponCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<CouponCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<CouponCondition> conditions) {
    this.conditions = conditions;
  }


  public CouponAction currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CouponAction customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public CouponAction discountQuantityStep(Integer discountQuantityStep) {
    this.discountQuantityStep = discountQuantityStep;
    return this;
  }

  /**
   * Get discountQuantityStep
   * @return discountQuantityStep
   */
  @javax.annotation.Nullable
  public Integer getDiscountQuantityStep() {
    return discountQuantityStep;
  }

  public void setDiscountQuantityStep(Integer discountQuantityStep) {
    this.discountQuantityStep = discountQuantityStep;
  }


  public CouponAction discountedQuantity(BigDecimal discountedQuantity) {
    this.discountedQuantity = discountedQuantity;
    return this;
  }

  /**
   * Get discountedQuantity
   * @return discountedQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getDiscountedQuantity() {
    return discountedQuantity;
  }

  public void setDiscountedQuantity(BigDecimal discountedQuantity) {
    this.discountedQuantity = discountedQuantity;
  }


  public CouponAction includeTax(Boolean includeTax) {
    this.includeTax = includeTax;
    return this;
  }

  /**
   * Get includeTax
   * @return includeTax
   */
  @javax.annotation.Nullable
  public Boolean getIncludeTax() {
    return includeTax;
  }

  public void setIncludeTax(Boolean includeTax) {
    this.includeTax = includeTax;
  }


  public CouponAction logicOperator(String logicOperator) {
    this.logicOperator = logicOperator;
    return this;
  }

  /**
   * Get logicOperator
   * @return logicOperator
   */
  @javax.annotation.Nullable
  public String getLogicOperator() {
    return logicOperator;
  }

  public void setLogicOperator(String logicOperator) {
    this.logicOperator = logicOperator;
  }


  public CouponAction scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public CouponAction type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CouponAction couponAction = (CouponAction) o;
    return Objects.equals(this.additionalFields, couponAction.additionalFields) &&
        Objects.equals(this.amount, couponAction.amount) &&
        Objects.equals(this.applyTo, couponAction.applyTo) &&
        Objects.equals(this.conditions, couponAction.conditions) &&
        Objects.equals(this.currencyCode, couponAction.currencyCode) &&
        Objects.equals(this.customFields, couponAction.customFields) &&
        Objects.equals(this.discountQuantityStep, couponAction.discountQuantityStep) &&
        Objects.equals(this.discountedQuantity, couponAction.discountedQuantity) &&
        Objects.equals(this.includeTax, couponAction.includeTax) &&
        Objects.equals(this.logicOperator, couponAction.logicOperator) &&
        Objects.equals(this.scope, couponAction.scope) &&
        Objects.equals(this.type, couponAction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, amount, applyTo, conditions, currencyCode, customFields, discountQuantityStep, discountedQuantity, includeTax, logicOperator, scope, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CouponAction {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    applyTo: ").append(toIndentedString(applyTo)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    discountQuantityStep: ").append(toIndentedString(discountQuantityStep)).append("\n");
    sb.append("    discountedQuantity: ").append(toIndentedString(discountedQuantity)).append("\n");
    sb.append("    includeTax: ").append(toIndentedString(includeTax)).append("\n");
    sb.append("    logicOperator: ").append(toIndentedString(logicOperator)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("amount");
    openapiFields.add("apply_to");
    openapiFields.add("conditions");
    openapiFields.add("currency_code");
    openapiFields.add("custom_fields");
    openapiFields.add("discount_quantity_step");
    openapiFields.add("discounted_quantity");
    openapiFields.add("include_tax");
    openapiFields.add("logic_operator");
    openapiFields.add("scope");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CouponAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CouponAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CouponAction is not found in the empty JSON string", CouponAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CouponAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CouponAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apply_to") != null && !jsonObj.get("apply_to").isJsonNull()) && !jsonObj.get("apply_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apply_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apply_to").toString()));
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            CouponCondition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("logic_operator") != null && !jsonObj.get("logic_operator").isJsonNull()) && !jsonObj.get("logic_operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logic_operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logic_operator").toString()));
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CouponAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CouponAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CouponAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CouponAction.class));

       return (TypeAdapter<T>) new TypeAdapter<CouponAction>() {
           @Override
           public void write(JsonWriter out, CouponAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CouponAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CouponAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CouponAction
   * @throws IOException if the JSON string is invalid with respect to CouponAction
   */
  public static CouponAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CouponAction.class);
  }

  /**
   * Convert an instance of CouponAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

