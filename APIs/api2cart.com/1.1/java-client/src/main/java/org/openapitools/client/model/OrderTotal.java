/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderTotal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderTotal {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_SHIPPING_EX_TAX = "shipping_ex_tax";
  @SerializedName(SERIALIZED_NAME_SHIPPING_EX_TAX)
  private BigDecimal shippingExTax;

  public static final String SERIALIZED_NAME_SUBTOTAL_EX_TAX = "subtotal_ex_tax";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_EX_TAX)
  private BigDecimal subtotalExTax;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_TOTAL_DISCOUNT = "total_discount";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISCOUNT)
  private BigDecimal totalDiscount;

  public static final String SERIALIZED_NAME_TOTAL_PAID = "total_paid";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAID)
  private BigDecimal totalPaid;

  public static final String SERIALIZED_NAME_TOTAL_TAX = "total_tax";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAX)
  private BigDecimal totalTax;

  public static final String SERIALIZED_NAME_WRAPPING_EX_TAX = "wrapping_ex_tax";
  @SerializedName(SERIALIZED_NAME_WRAPPING_EX_TAX)
  private BigDecimal wrappingExTax;

  public OrderTotal() {
  }

  public OrderTotal additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public OrderTotal customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public OrderTotal shippingExTax(BigDecimal shippingExTax) {
    this.shippingExTax = shippingExTax;
    return this;
  }

  /**
   * Get shippingExTax
   * @return shippingExTax
   */
  @javax.annotation.Nullable
  public BigDecimal getShippingExTax() {
    return shippingExTax;
  }

  public void setShippingExTax(BigDecimal shippingExTax) {
    this.shippingExTax = shippingExTax;
  }


  public OrderTotal subtotalExTax(BigDecimal subtotalExTax) {
    this.subtotalExTax = subtotalExTax;
    return this;
  }

  /**
   * Get subtotalExTax
   * @return subtotalExTax
   */
  @javax.annotation.Nullable
  public BigDecimal getSubtotalExTax() {
    return subtotalExTax;
  }

  public void setSubtotalExTax(BigDecimal subtotalExTax) {
    this.subtotalExTax = subtotalExTax;
  }


  public OrderTotal total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public OrderTotal totalDiscount(BigDecimal totalDiscount) {
    this.totalDiscount = totalDiscount;
    return this;
  }

  /**
   * Get totalDiscount
   * @return totalDiscount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalDiscount() {
    return totalDiscount;
  }

  public void setTotalDiscount(BigDecimal totalDiscount) {
    this.totalDiscount = totalDiscount;
  }


  public OrderTotal totalPaid(BigDecimal totalPaid) {
    this.totalPaid = totalPaid;
    return this;
  }

  /**
   * Get totalPaid
   * @return totalPaid
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalPaid() {
    return totalPaid;
  }

  public void setTotalPaid(BigDecimal totalPaid) {
    this.totalPaid = totalPaid;
  }


  public OrderTotal totalTax(BigDecimal totalTax) {
    this.totalTax = totalTax;
    return this;
  }

  /**
   * Get totalTax
   * @return totalTax
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalTax() {
    return totalTax;
  }

  public void setTotalTax(BigDecimal totalTax) {
    this.totalTax = totalTax;
  }


  public OrderTotal wrappingExTax(BigDecimal wrappingExTax) {
    this.wrappingExTax = wrappingExTax;
    return this;
  }

  /**
   * Get wrappingExTax
   * @return wrappingExTax
   */
  @javax.annotation.Nullable
  public BigDecimal getWrappingExTax() {
    return wrappingExTax;
  }

  public void setWrappingExTax(BigDecimal wrappingExTax) {
    this.wrappingExTax = wrappingExTax;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderTotal orderTotal = (OrderTotal) o;
    return Objects.equals(this.additionalFields, orderTotal.additionalFields) &&
        Objects.equals(this.customFields, orderTotal.customFields) &&
        Objects.equals(this.shippingExTax, orderTotal.shippingExTax) &&
        Objects.equals(this.subtotalExTax, orderTotal.subtotalExTax) &&
        Objects.equals(this.total, orderTotal.total) &&
        Objects.equals(this.totalDiscount, orderTotal.totalDiscount) &&
        Objects.equals(this.totalPaid, orderTotal.totalPaid) &&
        Objects.equals(this.totalTax, orderTotal.totalTax) &&
        Objects.equals(this.wrappingExTax, orderTotal.wrappingExTax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, customFields, shippingExTax, subtotalExTax, total, totalDiscount, totalPaid, totalTax, wrappingExTax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderTotal {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    shippingExTax: ").append(toIndentedString(shippingExTax)).append("\n");
    sb.append("    subtotalExTax: ").append(toIndentedString(subtotalExTax)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDiscount: ").append(toIndentedString(totalDiscount)).append("\n");
    sb.append("    totalPaid: ").append(toIndentedString(totalPaid)).append("\n");
    sb.append("    totalTax: ").append(toIndentedString(totalTax)).append("\n");
    sb.append("    wrappingExTax: ").append(toIndentedString(wrappingExTax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("custom_fields");
    openapiFields.add("shipping_ex_tax");
    openapiFields.add("subtotal_ex_tax");
    openapiFields.add("total");
    openapiFields.add("total_discount");
    openapiFields.add("total_paid");
    openapiFields.add("total_tax");
    openapiFields.add("wrapping_ex_tax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderTotal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderTotal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderTotal is not found in the empty JSON string", OrderTotal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderTotal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderTotal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderTotal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderTotal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderTotal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderTotal.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderTotal>() {
           @Override
           public void write(JsonWriter out, OrderTotal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderTotal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderTotal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderTotal
   * @throws IOException if the JSON string is invalid with respect to OrderTotal
   */
  public static OrderTotal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderTotal.class);
  }

  /**
   * Convert an instance of OrderTotal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

