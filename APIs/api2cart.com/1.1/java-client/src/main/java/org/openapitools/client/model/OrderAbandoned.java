/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.A2CDateTime;
import org.openapitools.client.model.BaseCustomer;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.OrderItem;
import org.openapitools.client.model.OrderTotals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderAbandoned
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderAbandoned {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_BASKET_ID = "basket_id";
  @SerializedName(SERIALIZED_NAME_BASKET_ID)
  private String basketId;

  public static final String SERIALIZED_NAME_BASKET_URL = "basket_url";
  @SerializedName(SERIALIZED_NAME_BASKET_URL)
  private String basketUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private A2CDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private BaseCustomer customer;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private A2CDateTime modifiedAt;

  public static final String SERIALIZED_NAME_ORDER_PRODUCTS = "order_products";
  @SerializedName(SERIALIZED_NAME_ORDER_PRODUCTS)
  private List<OrderItem> orderProducts = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private OrderTotals totals;

  public OrderAbandoned() {
  }

  public OrderAbandoned additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public OrderAbandoned basketId(String basketId) {
    this.basketId = basketId;
    return this;
  }

  /**
   * Get basketId
   * @return basketId
   */
  @javax.annotation.Nullable
  public String getBasketId() {
    return basketId;
  }

  public void setBasketId(String basketId) {
    this.basketId = basketId;
  }


  public OrderAbandoned basketUrl(String basketUrl) {
    this.basketUrl = basketUrl;
    return this;
  }

  /**
   * Get basketUrl
   * @return basketUrl
   */
  @javax.annotation.Nullable
  public String getBasketUrl() {
    return basketUrl;
  }

  public void setBasketUrl(String basketUrl) {
    this.basketUrl = basketUrl;
  }


  public OrderAbandoned createdAt(A2CDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public A2CDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(A2CDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OrderAbandoned currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public OrderAbandoned customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public OrderAbandoned customer(BaseCustomer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public BaseCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(BaseCustomer customer) {
    this.customer = customer;
  }


  public OrderAbandoned id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderAbandoned modifiedAt(A2CDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Get modifiedAt
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public A2CDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(A2CDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public OrderAbandoned orderProducts(List<OrderItem> orderProducts) {
    this.orderProducts = orderProducts;
    return this;
  }

  public OrderAbandoned addOrderProductsItem(OrderItem orderProductsItem) {
    if (this.orderProducts == null) {
      this.orderProducts = new ArrayList<>();
    }
    this.orderProducts.add(orderProductsItem);
    return this;
  }

  /**
   * Get orderProducts
   * @return orderProducts
   */
  @javax.annotation.Nullable
  public List<OrderItem> getOrderProducts() {
    return orderProducts;
  }

  public void setOrderProducts(List<OrderItem> orderProducts) {
    this.orderProducts = orderProducts;
  }


  public OrderAbandoned totals(OrderTotals totals) {
    this.totals = totals;
    return this;
  }

  /**
   * Get totals
   * @return totals
   */
  @javax.annotation.Nullable
  public OrderTotals getTotals() {
    return totals;
  }

  public void setTotals(OrderTotals totals) {
    this.totals = totals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderAbandoned orderAbandoned = (OrderAbandoned) o;
    return Objects.equals(this.additionalFields, orderAbandoned.additionalFields) &&
        Objects.equals(this.basketId, orderAbandoned.basketId) &&
        Objects.equals(this.basketUrl, orderAbandoned.basketUrl) &&
        Objects.equals(this.createdAt, orderAbandoned.createdAt) &&
        Objects.equals(this.currency, orderAbandoned.currency) &&
        Objects.equals(this.customFields, orderAbandoned.customFields) &&
        Objects.equals(this.customer, orderAbandoned.customer) &&
        Objects.equals(this.id, orderAbandoned.id) &&
        Objects.equals(this.modifiedAt, orderAbandoned.modifiedAt) &&
        Objects.equals(this.orderProducts, orderAbandoned.orderProducts) &&
        Objects.equals(this.totals, orderAbandoned.totals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, basketId, basketUrl, createdAt, currency, customFields, customer, id, modifiedAt, orderProducts, totals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderAbandoned {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    basketId: ").append(toIndentedString(basketId)).append("\n");
    sb.append("    basketUrl: ").append(toIndentedString(basketUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    orderProducts: ").append(toIndentedString(orderProducts)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("basket_id");
    openapiFields.add("basket_url");
    openapiFields.add("created_at");
    openapiFields.add("currency");
    openapiFields.add("custom_fields");
    openapiFields.add("customer");
    openapiFields.add("id");
    openapiFields.add("modified_at");
    openapiFields.add("order_products");
    openapiFields.add("totals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderAbandoned
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderAbandoned.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderAbandoned is not found in the empty JSON string", OrderAbandoned.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderAbandoned.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderAbandoned` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("basket_id") != null && !jsonObj.get("basket_id").isJsonNull()) && !jsonObj.get("basket_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basket_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basket_id").toString()));
      }
      if ((jsonObj.get("basket_url") != null && !jsonObj.get("basket_url").isJsonNull()) && !jsonObj.get("basket_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basket_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basket_url").toString()));
      }
      // validate the optional field `created_at`
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("created_at"));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        BaseCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `modified_at`
      if (jsonObj.get("modified_at") != null && !jsonObj.get("modified_at").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("modified_at"));
      }
      if (jsonObj.get("order_products") != null && !jsonObj.get("order_products").isJsonNull()) {
        JsonArray jsonArrayorderProducts = jsonObj.getAsJsonArray("order_products");
        if (jsonArrayorderProducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_products` to be an array in the JSON string but got `%s`", jsonObj.get("order_products").toString()));
          }

          // validate the optional field `order_products` (array)
          for (int i = 0; i < jsonArrayorderProducts.size(); i++) {
            OrderItem.validateJsonElement(jsonArrayorderProducts.get(i));
          };
        }
      }
      // validate the optional field `totals`
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull()) {
        OrderTotals.validateJsonElement(jsonObj.get("totals"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderAbandoned.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderAbandoned' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderAbandoned> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderAbandoned.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderAbandoned>() {
           @Override
           public void write(JsonWriter out, OrderAbandoned value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderAbandoned read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderAbandoned given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderAbandoned
   * @throws IOException if the JSON string is invalid with respect to OrderAbandoned
   */
  public static OrderAbandoned fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderAbandoned.class);
  }

  /**
   * Convert an instance of OrderAbandoned to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

