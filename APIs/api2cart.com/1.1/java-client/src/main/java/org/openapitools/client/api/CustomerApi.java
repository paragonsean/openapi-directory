/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomerAdd;
import org.openapitools.client.model.CustomerAdd200Response;
import org.openapitools.client.model.CustomerCount200Response;
import org.openapitools.client.model.CustomerFind200Response;
import org.openapitools.client.model.CustomerGroupAdd200Response;
import org.openapitools.client.model.CustomerInfo200Response;
import org.openapitools.client.model.CustomerUpdate;
import org.openapitools.client.model.CustomerUpdate200Response;
import org.openapitools.client.model.CustomerWishlistList200Response;
import org.openapitools.client.model.ModelResponseCustomerAttributeList;
import org.openapitools.client.model.ModelResponseCustomerGroupList;
import org.openapitools.client.model.ModelResponseCustomerList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customerAdd
     * @param customerAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerAddCall(CustomerAdd customerAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerAdd;

        // create path and map variables
        String localVarPath = "/customer.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerAddValidateBeforeCall(CustomerAdd customerAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerAdd' is set
        if (customerAdd == null) {
            throw new ApiException("Missing the required parameter 'customerAdd' when calling customerAdd(Async)");
        }

        return customerAddCall(customerAdd, _callback);

    }

    /**
     * 
     * Add customer into store.
     * @param customerAdd  (required)
     * @return CustomerAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CustomerAdd200Response customerAdd(CustomerAdd customerAdd) throws ApiException {
        ApiResponse<CustomerAdd200Response> localVarResp = customerAddWithHttpInfo(customerAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add customer into store.
     * @param customerAdd  (required)
     * @return ApiResponse&lt;CustomerAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerAdd200Response> customerAddWithHttpInfo(CustomerAdd customerAdd) throws ApiException {
        okhttp3.Call localVarCall = customerAddValidateBeforeCall(customerAdd, null);
        Type localVarReturnType = new TypeToken<CustomerAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add customer into store.
     * @param customerAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerAddAsync(CustomerAdd customerAdd, final ApiCallback<CustomerAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerAddValidateBeforeCall(customerAdd, _callback);
        Type localVarReturnType = new TypeToken<CustomerAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerAttributeList
     * @param customerId Retrieves orders specified by customer id (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerAttributeListCall(String customerId, Integer count, String pageCursor, String storeId, String langId, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.attribute.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerAttributeListValidateBeforeCall(String customerId, Integer count, String pageCursor, String storeId, String langId, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerAttributeList(Async)");
        }

        return customerAttributeListCall(customerId, count, pageCursor, storeId, langId, params, exclude, responseFields, _callback);

    }

    /**
     * 
     * Get attributes for specific customer
     * @param customerId Retrieves orders specified by customer id (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ModelResponseCustomerAttributeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCustomerAttributeList customerAttributeList(String customerId, Integer count, String pageCursor, String storeId, String langId, String params, String exclude, String responseFields) throws ApiException {
        ApiResponse<ModelResponseCustomerAttributeList> localVarResp = customerAttributeListWithHttpInfo(customerId, count, pageCursor, storeId, langId, params, exclude, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Get attributes for specific customer
     * @param customerId Retrieves orders specified by customer id (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse&lt;ModelResponseCustomerAttributeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCustomerAttributeList> customerAttributeListWithHttpInfo(String customerId, Integer count, String pageCursor, String storeId, String langId, String params, String exclude, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = customerAttributeListValidateBeforeCall(customerId, count, pageCursor, storeId, langId, params, exclude, responseFields, null);
        Type localVarReturnType = new TypeToken<ModelResponseCustomerAttributeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get attributes for specific customer
     * @param customerId Retrieves orders specified by customer id (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerAttributeListAsync(String customerId, Integer count, String pageCursor, String storeId, String langId, String params, String exclude, String responseFields, final ApiCallback<ModelResponseCustomerAttributeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerAttributeListValidateBeforeCall(customerId, count, pageCursor, storeId, langId, params, exclude, responseFields, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCustomerAttributeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerCount
     * @param groupId Customer group_id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Counts customer specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCountCall(String groupId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, String customerListId, Boolean avail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (customerListId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_list_id", customerListId));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerCountValidateBeforeCall(String groupId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, String customerListId, Boolean avail, final ApiCallback _callback) throws ApiException {
        return customerCountCall(groupId, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, customerListId, avail, _callback);

    }

    /**
     * 
     * Get number of customers from store.
     * @param groupId Customer group_id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Counts customer specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return CustomerCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CustomerCount200Response customerCount(String groupId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, String customerListId, Boolean avail) throws ApiException {
        ApiResponse<CustomerCount200Response> localVarResp = customerCountWithHttpInfo(groupId, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, customerListId, avail);
        return localVarResp.getData();
    }

    /**
     * 
     * Get number of customers from store.
     * @param groupId Customer group_id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Counts customer specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ApiResponse&lt;CustomerCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerCount200Response> customerCountWithHttpInfo(String groupId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, String customerListId, Boolean avail) throws ApiException {
        okhttp3.Call localVarCall = customerCountValidateBeforeCall(groupId, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, customerListId, avail, null);
        Type localVarReturnType = new TypeToken<CustomerCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get number of customers from store.
     * @param groupId Customer group_id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Counts customer specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerCountAsync(String groupId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, String customerListId, Boolean avail, final ApiCallback<CustomerCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerCountValidateBeforeCall(groupId, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, customerListId, avail, _callback);
        Type localVarReturnType = new TypeToken<CustomerCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerFind
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to email)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerFindCall(String findValue, String findWhere, String findParams, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.find.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (findValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_value", findValue));
        }

        if (findWhere != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_where", findWhere));
        }

        if (findParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_params", findParams));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerFindValidateBeforeCall(String findValue, String findWhere, String findParams, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'findValue' is set
        if (findValue == null) {
            throw new ApiException("Missing the required parameter 'findValue' when calling customerFind(Async)");
        }

        return customerFindCall(findValue, findWhere, findParams, storeId, _callback);

    }

    /**
     * 
     * Find customers in store.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to email)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @return CustomerFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CustomerFind200Response customerFind(String findValue, String findWhere, String findParams, String storeId) throws ApiException {
        ApiResponse<CustomerFind200Response> localVarResp = customerFindWithHttpInfo(findValue, findWhere, findParams, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Find customers in store.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to email)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;CustomerFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerFind200Response> customerFindWithHttpInfo(String findValue, String findWhere, String findParams, String storeId) throws ApiException {
        okhttp3.Call localVarCall = customerFindValidateBeforeCall(findValue, findWhere, findParams, storeId, null);
        Type localVarReturnType = new TypeToken<CustomerFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find customers in store.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to email)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerFindAsync(String findValue, String findWhere, String findParams, String storeId, final ApiCallback<CustomerFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerFindValidateBeforeCall(findValue, findWhere, findParams, storeId, _callback);
        Type localVarReturnType = new TypeToken<CustomerFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerGroupAdd
     * @param name Customer group name (required)
     * @param storeId Store Id (optional)
     * @param storesIds Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerGroupAddCall(String name, String storeId, String storesIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.group.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (storesIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stores_ids", storesIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerGroupAddValidateBeforeCall(String name, String storeId, String storesIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling customerGroupAdd(Async)");
        }

        return customerGroupAddCall(name, storeId, storesIds, _callback);

    }

    /**
     * 
     * Create customer group.
     * @param name Customer group name (required)
     * @param storeId Store Id (optional)
     * @param storesIds Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)
     * @return CustomerGroupAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CustomerGroupAdd200Response customerGroupAdd(String name, String storeId, String storesIds) throws ApiException {
        ApiResponse<CustomerGroupAdd200Response> localVarResp = customerGroupAddWithHttpInfo(name, storeId, storesIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Create customer group.
     * @param name Customer group name (required)
     * @param storeId Store Id (optional)
     * @param storesIds Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)
     * @return ApiResponse&lt;CustomerGroupAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerGroupAdd200Response> customerGroupAddWithHttpInfo(String name, String storeId, String storesIds) throws ApiException {
        okhttp3.Call localVarCall = customerGroupAddValidateBeforeCall(name, storeId, storesIds, null);
        Type localVarReturnType = new TypeToken<CustomerGroupAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create customer group.
     * @param name Customer group name (required)
     * @param storeId Store Id (optional)
     * @param storesIds Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerGroupAddAsync(String name, String storeId, String storesIds, final ApiCallback<CustomerGroupAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerGroupAddValidateBeforeCall(name, storeId, storesIds, _callback);
        Type localVarReturnType = new TypeToken<CustomerGroupAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerGroupList
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param groupIds Groups that will be assigned to a customer (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,additional_fields)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerGroupListCall(String pageCursor, Integer start, Integer count, String storeId, String langId, String groupIds, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.group.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (groupIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_ids", groupIds));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerGroupListValidateBeforeCall(String pageCursor, Integer start, Integer count, String storeId, String langId, String groupIds, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        return customerGroupListCall(pageCursor, start, count, storeId, langId, groupIds, params, exclude, responseFields, _callback);

    }

    /**
     * 
     * Get list of customers groups.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param groupIds Groups that will be assigned to a customer (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,additional_fields)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ModelResponseCustomerGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCustomerGroupList customerGroupList(String pageCursor, Integer start, Integer count, String storeId, String langId, String groupIds, String params, String exclude, String responseFields) throws ApiException {
        ApiResponse<ModelResponseCustomerGroupList> localVarResp = customerGroupListWithHttpInfo(pageCursor, start, count, storeId, langId, groupIds, params, exclude, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of customers groups.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param groupIds Groups that will be assigned to a customer (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,additional_fields)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse&lt;ModelResponseCustomerGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCustomerGroupList> customerGroupListWithHttpInfo(String pageCursor, Integer start, Integer count, String storeId, String langId, String groupIds, String params, String exclude, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = customerGroupListValidateBeforeCall(pageCursor, start, count, storeId, langId, groupIds, params, exclude, responseFields, null);
        Type localVarReturnType = new TypeToken<ModelResponseCustomerGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of customers groups.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param groupIds Groups that will be assigned to a customer (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,additional_fields)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerGroupListAsync(String pageCursor, Integer start, Integer count, String storeId, String langId, String groupIds, String params, String exclude, String responseFields, final ApiCallback<ModelResponseCustomerGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerGroupListValidateBeforeCall(pageCursor, start, count, storeId, langId, groupIds, params, exclude, responseFields, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCustomerGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerInfo
     * @param id Retrieves customer&#39;s info specified by customer id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves customer info specified by store id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerInfoCall(String id, String params, String responseFields, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerInfoValidateBeforeCall(String id, String params, String responseFields, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerInfo(Async)");
        }

        return customerInfoCall(id, params, responseFields, exclude, storeId, _callback);

    }

    /**
     * 
     * Get customers&#39; details from store.
     * @param id Retrieves customer&#39;s info specified by customer id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves customer info specified by store id (optional)
     * @return CustomerInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CustomerInfo200Response customerInfo(String id, String params, String responseFields, String exclude, String storeId) throws ApiException {
        ApiResponse<CustomerInfo200Response> localVarResp = customerInfoWithHttpInfo(id, params, responseFields, exclude, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get customers&#39; details from store.
     * @param id Retrieves customer&#39;s info specified by customer id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves customer info specified by store id (optional)
     * @return ApiResponse&lt;CustomerInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerInfo200Response> customerInfoWithHttpInfo(String id, String params, String responseFields, String exclude, String storeId) throws ApiException {
        okhttp3.Call localVarCall = customerInfoValidateBeforeCall(id, params, responseFields, exclude, storeId, null);
        Type localVarReturnType = new TypeToken<CustomerInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get customers&#39; details from store.
     * @param id Retrieves customer&#39;s info specified by customer id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves customer info specified by store id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerInfoAsync(String id, String params, String responseFields, String exclude, String storeId, final ApiCallback<CustomerInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerInfoValidateBeforeCall(id, params, responseFields, exclude, storeId, _callback);
        Type localVarReturnType = new TypeToken<CustomerInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerList
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param groupId Customer group_id (optional)
     * @param storeId Retrieves customers specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerListCall(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String params, String responseFields, String exclude, String groupId, String storeId, String customerListId, Boolean avail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (customerListId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_list_id", customerListId));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerListValidateBeforeCall(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String params, String responseFields, String exclude, String groupId, String storeId, String customerListId, Boolean avail, final ApiCallback _callback) throws ApiException {
        return customerListCall(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, params, responseFields, exclude, groupId, storeId, customerListId, avail, _callback);

    }

    /**
     * 
     * Get list of customers from store.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param groupId Customer group_id (optional)
     * @param storeId Retrieves customers specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ModelResponseCustomerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCustomerList customerList(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String params, String responseFields, String exclude, String groupId, String storeId, String customerListId, Boolean avail) throws ApiException {
        ApiResponse<ModelResponseCustomerList> localVarResp = customerListWithHttpInfo(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, params, responseFields, exclude, groupId, storeId, customerListId, avail);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of customers from store.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param groupId Customer group_id (optional)
     * @param storeId Retrieves customers specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ApiResponse&lt;ModelResponseCustomerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCustomerList> customerListWithHttpInfo(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String params, String responseFields, String exclude, String groupId, String storeId, String customerListId, Boolean avail) throws ApiException {
        okhttp3.Call localVarCall = customerListValidateBeforeCall(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, params, responseFields, exclude, groupId, storeId, customerListId, avail, null);
        Type localVarReturnType = new TypeToken<ModelResponseCustomerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of customers from store.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,email,first_name,last_name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param groupId Customer group_id (optional)
     * @param storeId Retrieves customers specified by store id (optional)
     * @param customerListId The numeric ID of the customer list in Demandware. (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerListAsync(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String params, String responseFields, String exclude, String groupId, String storeId, String customerListId, Boolean avail, final ApiCallback<ModelResponseCustomerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerListValidateBeforeCall(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, params, responseFields, exclude, groupId, storeId, customerListId, avail, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCustomerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerUpdate
     * @param customerUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerUpdateCall(CustomerUpdate customerUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customerUpdate;

        // create path and map variables
        String localVarPath = "/customer.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerUpdateValidateBeforeCall(CustomerUpdate customerUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerUpdate' is set
        if (customerUpdate == null) {
            throw new ApiException("Missing the required parameter 'customerUpdate' when calling customerUpdate(Async)");
        }

        return customerUpdateCall(customerUpdate, _callback);

    }

    /**
     * 
     * Update information of customer in store.
     * @param customerUpdate  (required)
     * @return CustomerUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CustomerUpdate200Response customerUpdate(CustomerUpdate customerUpdate) throws ApiException {
        ApiResponse<CustomerUpdate200Response> localVarResp = customerUpdateWithHttpInfo(customerUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update information of customer in store.
     * @param customerUpdate  (required)
     * @return ApiResponse&lt;CustomerUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerUpdate200Response> customerUpdateWithHttpInfo(CustomerUpdate customerUpdate) throws ApiException {
        okhttp3.Call localVarCall = customerUpdateValidateBeforeCall(customerUpdate, null);
        Type localVarReturnType = new TypeToken<CustomerUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update information of customer in store.
     * @param customerUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerUpdateAsync(CustomerUpdate customerUpdate, final ApiCallback<CustomerUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerUpdateValidateBeforeCall(customerUpdate, _callback);
        Type localVarReturnType = new TypeToken<CustomerUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customerWishlistList
     * @param customerId Retrieves orders specified by customer id (required)
     * @param id Entity id (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to {return_code,return_message,pagination,result})
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerWishlistListCall(String customerId, String id, String storeId, Integer start, Integer count, String pageCursor, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/customer.wishlist.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customerWishlistListValidateBeforeCall(String customerId, String id, String storeId, Integer start, Integer count, String pageCursor, String responseFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling customerWishlistList(Async)");
        }

        return customerWishlistListCall(customerId, id, storeId, start, count, pageCursor, responseFields, _callback);

    }

    /**
     * 
     * Get a Wish List of customer from the store.
     * @param customerId Retrieves orders specified by customer id (required)
     * @param id Entity id (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to {return_code,return_message,pagination,result})
     * @return CustomerWishlistList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CustomerWishlistList200Response customerWishlistList(String customerId, String id, String storeId, Integer start, Integer count, String pageCursor, String responseFields) throws ApiException {
        ApiResponse<CustomerWishlistList200Response> localVarResp = customerWishlistListWithHttpInfo(customerId, id, storeId, start, count, pageCursor, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Wish List of customer from the store.
     * @param customerId Retrieves orders specified by customer id (required)
     * @param id Entity id (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to {return_code,return_message,pagination,result})
     * @return ApiResponse&lt;CustomerWishlistList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerWishlistList200Response> customerWishlistListWithHttpInfo(String customerId, String id, String storeId, Integer start, Integer count, String pageCursor, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = customerWishlistListValidateBeforeCall(customerId, id, storeId, start, count, pageCursor, responseFields, null);
        Type localVarReturnType = new TypeToken<CustomerWishlistList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Wish List of customer from the store.
     * @param customerId Retrieves orders specified by customer id (required)
     * @param id Entity id (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to {return_code,return_message,pagination,result})
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customerWishlistListAsync(String customerId, String id, String storeId, Integer start, Integer count, String pageCursor, String responseFields, final ApiCallback<CustomerWishlistList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = customerWishlistListValidateBeforeCall(customerId, id, storeId, start, count, pageCursor, responseFields, _callback);
        Type localVarReturnType = new TypeToken<CustomerWishlistList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
