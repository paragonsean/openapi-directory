/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.BridgeDelete200Response;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CategoryAdd200Response;
import org.openapitools.client.model.CategoryCount200Response;
import org.openapitools.client.model.CategoryFind200Response;
import org.openapitools.client.model.CategoryImageAdd200Response;
import org.openapitools.client.model.CategoryInfo200Response;
import org.openapitools.client.model.ModelResponseCategoryList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CategoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categoryAdd
     * @param name Defines category&#39;s name that has to be added (required)
     * @param parentId Adds categories specified by parent id (optional)
     * @param storesIds Create category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param createdTime Entity&#39;s date creation (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryAddCall(String name, String parentId, String storesIds, String storeId, String langId, Boolean avail, Integer sortOrder, String createdTime, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (storesIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stores_ids", storesIds));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (createdTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_time", createdTime));
        }

        if (modifiedTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_time", modifiedTime));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (metaTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta_title", metaTitle));
        }

        if (metaDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta_description", metaDescription));
        }

        if (metaKeywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta_keywords", metaKeywords));
        }

        if (seoUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seo_url", seoUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryAddValidateBeforeCall(String name, String parentId, String storesIds, String storeId, String langId, Boolean avail, Integer sortOrder, String createdTime, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling categoryAdd(Async)");
        }

        return categoryAddCall(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, _callback);

    }

    /**
     * 
     * Add new category in store
     * @param name Defines category&#39;s name that has to be added (required)
     * @param parentId Adds categories specified by parent id (optional)
     * @param storesIds Create category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param createdTime Entity&#39;s date creation (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @return CategoryAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CategoryAdd200Response categoryAdd(String name, String parentId, String storesIds, String storeId, String langId, Boolean avail, Integer sortOrder, String createdTime, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl) throws ApiException {
        ApiResponse<CategoryAdd200Response> localVarResp = categoryAddWithHttpInfo(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Add new category in store
     * @param name Defines category&#39;s name that has to be added (required)
     * @param parentId Adds categories specified by parent id (optional)
     * @param storesIds Create category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param createdTime Entity&#39;s date creation (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @return ApiResponse&lt;CategoryAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryAdd200Response> categoryAddWithHttpInfo(String name, String parentId, String storesIds, String storeId, String langId, Boolean avail, Integer sortOrder, String createdTime, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl) throws ApiException {
        okhttp3.Call localVarCall = categoryAddValidateBeforeCall(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, null);
        Type localVarReturnType = new TypeToken<CategoryAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add new category in store
     * @param name Defines category&#39;s name that has to be added (required)
     * @param parentId Adds categories specified by parent id (optional)
     * @param storesIds Create category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param createdTime Entity&#39;s date creation (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryAddAsync(String name, String parentId, String storesIds, String storeId, String langId, Boolean avail, Integer sortOrder, String createdTime, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, final ApiCallback<CategoryAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryAddValidateBeforeCall(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, _callback);
        Type localVarReturnType = new TypeToken<CategoryAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryAssign
     * @param productId Defines category assign to the product, specified by product id (required)
     * @param categoryId Defines category assign, specified by category id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryAssignCall(String productId, String categoryId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.assign.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryAssignValidateBeforeCall(String productId, String categoryId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling categoryAssign(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoryAssign(Async)");
        }

        return categoryAssignCall(productId, categoryId, storeId, _callback);

    }

    /**
     * 
     * Assign category to product
     * @param productId Defines category assign to the product, specified by product id (required)
     * @param categoryId Defines category assign, specified by category id (required)
     * @param storeId Store Id (optional)
     * @return CartConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartConfigUpdate200Response categoryAssign(String productId, String categoryId, String storeId) throws ApiException {
        ApiResponse<CartConfigUpdate200Response> localVarResp = categoryAssignWithHttpInfo(productId, categoryId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Assign category to product
     * @param productId Defines category assign to the product, specified by product id (required)
     * @param categoryId Defines category assign, specified by category id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;CartConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartConfigUpdate200Response> categoryAssignWithHttpInfo(String productId, String categoryId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = categoryAssignValidateBeforeCall(productId, categoryId, storeId, null);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign category to product
     * @param productId Defines category assign to the product, specified by product id (required)
     * @param categoryId Defines category assign, specified by category id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryAssignAsync(String productId, String categoryId, String storeId, final ApiCallback<CartConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryAssignValidateBeforeCall(productId, categoryId, storeId, _callback);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryCount
     * @param parentId Counts categories specified by parent id (optional)
     * @param storeId Counts category specified by store id (optional)
     * @param langId Counts category specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryCountCall(String parentId, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryCountValidateBeforeCall(String parentId, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, final ApiCallback _callback) throws ApiException {
        return categoryCountCall(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, _callback);

    }

    /**
     * 
     * Count categories in store.
     * @param parentId Counts categories specified by parent id (optional)
     * @param storeId Counts category specified by store id (optional)
     * @param langId Counts category specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return CategoryCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CategoryCount200Response categoryCount(String parentId, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail) throws ApiException {
        ApiResponse<CategoryCount200Response> localVarResp = categoryCountWithHttpInfo(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail);
        return localVarResp.getData();
    }

    /**
     * 
     * Count categories in store.
     * @param parentId Counts categories specified by parent id (optional)
     * @param storeId Counts category specified by store id (optional)
     * @param langId Counts category specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ApiResponse&lt;CategoryCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryCount200Response> categoryCountWithHttpInfo(String parentId, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail) throws ApiException {
        okhttp3.Call localVarCall = categoryCountValidateBeforeCall(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, null);
        Type localVarReturnType = new TypeToken<CategoryCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count categories in store.
     * @param parentId Counts categories specified by parent id (optional)
     * @param storeId Counts category specified by store id (optional)
     * @param langId Counts category specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryCountAsync(String parentId, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, final ApiCallback<CategoryCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryCountValidateBeforeCall(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, _callback);
        Type localVarReturnType = new TypeToken<CategoryCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryDelete
     * @param id Defines category removal, specified by category id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoryDelete(Async)");
        }

        return categoryDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete category in store
     * @param id Defines category removal, specified by category id (required)
     * @return BridgeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BridgeDelete200Response categoryDelete(String id) throws ApiException {
        ApiResponse<BridgeDelete200Response> localVarResp = categoryDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete category in store
     * @param id Defines category removal, specified by category id (required)
     * @return ApiResponse&lt;BridgeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BridgeDelete200Response> categoryDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = categoryDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BridgeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete category in store
     * @param id Defines category removal, specified by category id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryDeleteAsync(String id, final ApiCallback<BridgeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BridgeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryFind
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryFindCall(String findValue, String findWhere, String findParams, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.find.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (findValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_value", findValue));
        }

        if (findWhere != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_where", findWhere));
        }

        if (findParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_params", findParams));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryFindValidateBeforeCall(String findValue, String findWhere, String findParams, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'findValue' is set
        if (findValue == null) {
            throw new ApiException("Missing the required parameter 'findValue' when calling categoryFind(Async)");
        }

        return categoryFindCall(findValue, findWhere, findParams, storeId, langId, _callback);

    }

    /**
     * 
     * Search category in store. \&quot;Laptop\&quot; is specified here by default.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return CategoryFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CategoryFind200Response categoryFind(String findValue, String findWhere, String findParams, String storeId, String langId) throws ApiException {
        ApiResponse<CategoryFind200Response> localVarResp = categoryFindWithHttpInfo(findValue, findWhere, findParams, storeId, langId);
        return localVarResp.getData();
    }

    /**
     * 
     * Search category in store. \&quot;Laptop\&quot; is specified here by default.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return ApiResponse&lt;CategoryFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryFind200Response> categoryFindWithHttpInfo(String findValue, String findWhere, String findParams, String storeId, String langId) throws ApiException {
        okhttp3.Call localVarCall = categoryFindValidateBeforeCall(findValue, findWhere, findParams, storeId, langId, null);
        Type localVarReturnType = new TypeToken<CategoryFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search category in store. \&quot;Laptop\&quot; is specified here by default.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryFindAsync(String findValue, String findWhere, String findParams, String storeId, String langId, final ApiCallback<CategoryFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryFindValidateBeforeCall(findValue, findWhere, findParams, storeId, langId, _callback);
        Type localVarReturnType = new TypeToken<CategoryFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryImageAdd
     * @param categoryId Defines category id where the image should be added (required)
     * @param imageName Defines image&#39;s name (required)
     * @param url Defines URL of the image that has to be added (required)
     * @param type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param position Defines image’s position in the list (optional, default to 0)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryImageAddCall(String categoryId, String imageName, String url, String type, String label, String mime, Integer position, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.image.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (imageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_name", imageName));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (mime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mime", mime));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryImageAddValidateBeforeCall(String categoryId, String imageName, String url, String type, String label, String mime, Integer position, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoryImageAdd(Async)");
        }

        // verify the required parameter 'imageName' is set
        if (imageName == null) {
            throw new ApiException("Missing the required parameter 'imageName' when calling categoryImageAdd(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling categoryImageAdd(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling categoryImageAdd(Async)");
        }

        return categoryImageAddCall(categoryId, imageName, url, type, label, mime, position, storeId, _callback);

    }

    /**
     * 
     * Add image to category
     * @param categoryId Defines category id where the image should be added (required)
     * @param imageName Defines image&#39;s name (required)
     * @param url Defines URL of the image that has to be added (required)
     * @param type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param position Defines image’s position in the list (optional, default to 0)
     * @param storeId Store Id (optional)
     * @return CategoryImageAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CategoryImageAdd200Response categoryImageAdd(String categoryId, String imageName, String url, String type, String label, String mime, Integer position, String storeId) throws ApiException {
        ApiResponse<CategoryImageAdd200Response> localVarResp = categoryImageAddWithHttpInfo(categoryId, imageName, url, type, label, mime, position, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Add image to category
     * @param categoryId Defines category id where the image should be added (required)
     * @param imageName Defines image&#39;s name (required)
     * @param url Defines URL of the image that has to be added (required)
     * @param type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param position Defines image’s position in the list (optional, default to 0)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;CategoryImageAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryImageAdd200Response> categoryImageAddWithHttpInfo(String categoryId, String imageName, String url, String type, String label, String mime, Integer position, String storeId) throws ApiException {
        okhttp3.Call localVarCall = categoryImageAddValidateBeforeCall(categoryId, imageName, url, type, label, mime, position, storeId, null);
        Type localVarReturnType = new TypeToken<CategoryImageAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add image to category
     * @param categoryId Defines category id where the image should be added (required)
     * @param imageName Defines image&#39;s name (required)
     * @param url Defines URL of the image that has to be added (required)
     * @param type Defines image&#39;s types that are specified by comma-separated list (required)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type. (optional)
     * @param position Defines image’s position in the list (optional, default to 0)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryImageAddAsync(String categoryId, String imageName, String url, String type, String label, String mime, Integer position, String storeId, final ApiCallback<CategoryImageAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryImageAddValidateBeforeCall(categoryId, imageName, url, type, label, mime, position, storeId, _callback);
        Type localVarReturnType = new TypeToken<CategoryImageAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryImageDelete
     * @param categoryId Defines category id where the image should be deleted (required)
     * @param imageId Define image id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryImageDeleteCall(String categoryId, String imageId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.image.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_id", imageId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryImageDeleteValidateBeforeCall(String categoryId, String imageId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoryImageDelete(Async)");
        }

        // verify the required parameter 'imageId' is set
        if (imageId == null) {
            throw new ApiException("Missing the required parameter 'imageId' when calling categoryImageDelete(Async)");
        }

        return categoryImageDeleteCall(categoryId, imageId, storeId, _callback);

    }

    /**
     * 
     * Delete image
     * @param categoryId Defines category id where the image should be deleted (required)
     * @param imageId Define image id (required)
     * @param storeId Store Id (optional)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response categoryImageDelete(String categoryId, String imageId, String storeId) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = categoryImageDeleteWithHttpInfo(categoryId, imageId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete image
     * @param categoryId Defines category id where the image should be deleted (required)
     * @param imageId Define image id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> categoryImageDeleteWithHttpInfo(String categoryId, String imageId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = categoryImageDeleteValidateBeforeCall(categoryId, imageId, storeId, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete image
     * @param categoryId Defines category id where the image should be deleted (required)
     * @param imageId Define image id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryImageDeleteAsync(String categoryId, String imageId, String storeId, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryImageDeleteValidateBeforeCall(categoryId, imageId, storeId, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryInfo
     * @param id Retrieves category&#39;s info specified by category id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves category info  specified by store id (optional)
     * @param langId Retrieves category info  specified by language id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryInfoCall(String id, String params, String responseFields, String exclude, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryInfoValidateBeforeCall(String id, String params, String responseFields, String exclude, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoryInfo(Async)");
        }

        return categoryInfoCall(id, params, responseFields, exclude, storeId, langId, _callback);

    }

    /**
     * 
     * Get category info about category ID*** or specify other category ID.
     * @param id Retrieves category&#39;s info specified by category id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves category info  specified by store id (optional)
     * @param langId Retrieves category info  specified by language id (optional)
     * @return CategoryInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CategoryInfo200Response categoryInfo(String id, String params, String responseFields, String exclude, String storeId, String langId) throws ApiException {
        ApiResponse<CategoryInfo200Response> localVarResp = categoryInfoWithHttpInfo(id, params, responseFields, exclude, storeId, langId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get category info about category ID*** or specify other category ID.
     * @param id Retrieves category&#39;s info specified by category id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves category info  specified by store id (optional)
     * @param langId Retrieves category info  specified by language id (optional)
     * @return ApiResponse&lt;CategoryInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryInfo200Response> categoryInfoWithHttpInfo(String id, String params, String responseFields, String exclude, String storeId, String langId) throws ApiException {
        okhttp3.Call localVarCall = categoryInfoValidateBeforeCall(id, params, responseFields, exclude, storeId, langId, null);
        Type localVarReturnType = new TypeToken<CategoryInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get category info about category ID*** or specify other category ID.
     * @param id Retrieves category&#39;s info specified by category id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves category info  specified by store id (optional)
     * @param langId Retrieves category info  specified by language id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryInfoAsync(String id, String params, String responseFields, String exclude, String storeId, String langId, final ApiCallback<CategoryInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryInfoValidateBeforeCall(id, params, responseFields, exclude, storeId, langId, _callback);
        Type localVarReturnType = new TypeToken<CategoryInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param parentId Retrieves categories specified by parent id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves categories specified by store id (optional)
     * @param langId Retrieves categorys specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryListCall(Integer start, Integer count, String pageCursor, String parentId, String params, String responseFields, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryListValidateBeforeCall(Integer start, Integer count, String pageCursor, String parentId, String params, String responseFields, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, final ApiCallback _callback) throws ApiException {
        return categoryListCall(start, count, pageCursor, parentId, params, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, _callback);

    }

    /**
     * 
     * Get list of categories from store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param parentId Retrieves categories specified by parent id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves categories specified by store id (optional)
     * @param langId Retrieves categorys specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ModelResponseCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCategoryList categoryList(Integer start, Integer count, String pageCursor, String parentId, String params, String responseFields, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail) throws ApiException {
        ApiResponse<ModelResponseCategoryList> localVarResp = categoryListWithHttpInfo(start, count, pageCursor, parentId, params, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of categories from store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param parentId Retrieves categories specified by parent id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves categories specified by store id (optional)
     * @param langId Retrieves categorys specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ApiResponse&lt;ModelResponseCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCategoryList> categoryListWithHttpInfo(Integer start, Integer count, String pageCursor, String parentId, String params, String responseFields, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail) throws ApiException {
        okhttp3.Call localVarCall = categoryListValidateBeforeCall(start, count, pageCursor, parentId, params, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, null);
        Type localVarReturnType = new TypeToken<ModelResponseCategoryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of categories from store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param parentId Retrieves categories specified by parent id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,parent_id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves categories specified by store id (optional)
     * @param langId Retrieves categorys specified by language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryListAsync(Integer start, Integer count, String pageCursor, String parentId, String params, String responseFields, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, final ApiCallback<ModelResponseCategoryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryListValidateBeforeCall(start, count, pageCursor, parentId, params, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCategoryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryUnassign
     * @param categoryId Defines category unassign, specified by category id (required)
     * @param productId Defines category unassign to the product, specified by product id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryUnassignCall(String categoryId, String productId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.unassign.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryUnassignValidateBeforeCall(String categoryId, String productId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling categoryUnassign(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling categoryUnassign(Async)");
        }

        return categoryUnassignCall(categoryId, productId, storeId, _callback);

    }

    /**
     * 
     * Unassign category to product
     * @param categoryId Defines category unassign, specified by category id (required)
     * @param productId Defines category unassign to the product, specified by product id (required)
     * @param storeId Store Id (optional)
     * @return CartConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartConfigUpdate200Response categoryUnassign(String categoryId, String productId, String storeId) throws ApiException {
        ApiResponse<CartConfigUpdate200Response> localVarResp = categoryUnassignWithHttpInfo(categoryId, productId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Unassign category to product
     * @param categoryId Defines category unassign, specified by category id (required)
     * @param productId Defines category unassign to the product, specified by product id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;CartConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartConfigUpdate200Response> categoryUnassignWithHttpInfo(String categoryId, String productId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = categoryUnassignValidateBeforeCall(categoryId, productId, storeId, null);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unassign category to product
     * @param categoryId Defines category unassign, specified by category id (required)
     * @param productId Defines category unassign to the product, specified by product id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryUnassignAsync(String categoryId, String productId, String storeId, final ApiCallback<CartConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryUnassignValidateBeforeCall(categoryId, productId, storeId, _callback);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoryUpdate
     * @param id Defines category update specified by category id (required)
     * @param name Defines new category’s name (optional)
     * @param parentId Defines new parent category id (optional)
     * @param storesIds Update category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param avail Defines category&#39;s visibility status (optional)
     * @param sortOrder Sort number in the list (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines new category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryUpdateCall(String id, String name, String parentId, String storesIds, Boolean avail, Integer sortOrder, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (parentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_id", parentId));
        }

        if (storesIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stores_ids", storesIds));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (modifiedTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_time", modifiedTime));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (metaTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta_title", metaTitle));
        }

        if (metaDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta_description", metaDescription));
        }

        if (metaKeywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("meta_keywords", metaKeywords));
        }

        if (seoUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seo_url", seoUrl));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryUpdateValidateBeforeCall(String id, String name, String parentId, String storesIds, Boolean avail, Integer sortOrder, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoryUpdate(Async)");
        }

        return categoryUpdateCall(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId, _callback);

    }

    /**
     * 
     * Update category in store
     * @param id Defines category update specified by category id (required)
     * @param name Defines new category’s name (optional)
     * @param parentId Defines new parent category id (optional)
     * @param storesIds Update category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param avail Defines category&#39;s visibility status (optional)
     * @param sortOrder Sort number in the list (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines new category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response categoryUpdate(String id, String name, String parentId, String storesIds, Boolean avail, Integer sortOrder, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, String langId, String storeId) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = categoryUpdateWithHttpInfo(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Update category in store
     * @param id Defines category update specified by category id (required)
     * @param name Defines new category’s name (optional)
     * @param parentId Defines new parent category id (optional)
     * @param storesIds Update category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param avail Defines category&#39;s visibility status (optional)
     * @param sortOrder Sort number in the list (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines new category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> categoryUpdateWithHttpInfo(String id, String name, String parentId, String storesIds, Boolean avail, Integer sortOrder, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, String langId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = categoryUpdateValidateBeforeCall(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update category in store
     * @param id Defines category update specified by category id (required)
     * @param name Defines new category’s name (optional)
     * @param parentId Defines new parent category id (optional)
     * @param storesIds Update category in the stores that is specified by comma-separated stores&#39; id (optional, default to 0)
     * @param avail Defines category&#39;s visibility status (optional)
     * @param sortOrder Sort number in the list (optional)
     * @param modifiedTime Entity&#39;s date modification (optional)
     * @param description Defines new category&#39;s description (optional)
     * @param metaTitle Defines unique meta title for each entity (optional)
     * @param metaDescription Defines unique meta description of a entity (optional)
     * @param metaKeywords Defines unique meta keywords for each entity (optional)
     * @param seoUrl Defines unique category&#39;s URL for SEO (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryUpdateAsync(String id, String name, String parentId, String storesIds, Boolean avail, Integer sortOrder, String modifiedTime, String description, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, String langId, String storeId, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryUpdateValidateBeforeCall(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
