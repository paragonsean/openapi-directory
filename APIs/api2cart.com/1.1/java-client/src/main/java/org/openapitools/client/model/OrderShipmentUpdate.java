/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderShipmentAddTrackingNumbersInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderShipmentUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderShipmentUpdate {
  public static final String SERIALIZED_NAME_IS_SHIPPED = "is_shipped";
  @SerializedName(SERIALIZED_NAME_IS_SHIPPED)
  private Boolean isShipped = true;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_REPLACE = "replace";
  @SerializedName(SERIALIZED_NAME_REPLACE)
  private Boolean replace = true;

  public static final String SERIALIZED_NAME_SHIPMENT_ID = "shipment_id";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_ID)
  private String shipmentId;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_TRACKING_LINK = "tracking_link";
  @SerializedName(SERIALIZED_NAME_TRACKING_LINK)
  private String trackingLink;

  public static final String SERIALIZED_NAME_TRACKING_NUMBERS = "tracking_numbers";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBERS)
  private List<OrderShipmentAddTrackingNumbersInner> trackingNumbers = new ArrayList<>();

  public OrderShipmentUpdate() {
  }

  public OrderShipmentUpdate isShipped(Boolean isShipped) {
    this.isShipped = isShipped;
    return this;
  }

  /**
   * Defines shipment&#39;s status
   * @return isShipped
   */
  @javax.annotation.Nullable
  public Boolean getIsShipped() {
    return isShipped;
  }

  public void setIsShipped(Boolean isShipped) {
    this.isShipped = isShipped;
  }


  public OrderShipmentUpdate orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Defines the order that will be updated
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public OrderShipmentUpdate replace(Boolean replace) {
    this.replace = replace;
    return this;
  }

  /**
   * Allows rewrite tracking numbers
   * @return replace
   */
  @javax.annotation.Nullable
  public Boolean getReplace() {
    return replace;
  }

  public void setReplace(Boolean replace) {
    this.replace = replace;
  }


  public OrderShipmentUpdate shipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
    return this;
  }

  /**
   * Shipment id indicates the number of delivery
   * @return shipmentId
   */
  @javax.annotation.Nonnull
  public String getShipmentId() {
    return shipmentId;
  }

  public void setShipmentId(String shipmentId) {
    this.shipmentId = shipmentId;
  }


  public OrderShipmentUpdate storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Store Id
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public OrderShipmentUpdate trackingLink(String trackingLink) {
    this.trackingLink = trackingLink;
    return this;
  }

  /**
   * Defines custom tracking link
   * @return trackingLink
   */
  @javax.annotation.Nullable
  public String getTrackingLink() {
    return trackingLink;
  }

  public void setTrackingLink(String trackingLink) {
    this.trackingLink = trackingLink;
  }


  public OrderShipmentUpdate trackingNumbers(List<OrderShipmentAddTrackingNumbersInner> trackingNumbers) {
    this.trackingNumbers = trackingNumbers;
    return this;
  }

  public OrderShipmentUpdate addTrackingNumbersItem(OrderShipmentAddTrackingNumbersInner trackingNumbersItem) {
    if (this.trackingNumbers == null) {
      this.trackingNumbers = new ArrayList<>();
    }
    this.trackingNumbers.add(trackingNumbersItem);
    return this;
  }

  /**
   * Defines shipment&#39;s tracking numbers that have to be added&lt;/br&gt; How set tracking numbers to appropriate carrier:&lt;ul&gt;&lt;li&gt;tracking_numbers[]&#x3D;a2c.demo1,a2c.demo2 - set default carrier&lt;/li&gt;&lt;li&gt;tracking_numbers[&lt;b&gt;carrier_id&lt;/b&gt;]&#x3D;a2c.demo - set appropriate carrier&lt;/li&gt;&lt;/ul&gt;To get the list of carriers IDs that are available in your store, use the &lt;a href &#x3D; \&quot;https://api2cart.com/docs/#/cart/CartInfo\&quot;&gt;cart.info&lt;/a &gt; method
   * @return trackingNumbers
   */
  @javax.annotation.Nullable
  public List<OrderShipmentAddTrackingNumbersInner> getTrackingNumbers() {
    return trackingNumbers;
  }

  public void setTrackingNumbers(List<OrderShipmentAddTrackingNumbersInner> trackingNumbers) {
    this.trackingNumbers = trackingNumbers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderShipmentUpdate orderShipmentUpdate = (OrderShipmentUpdate) o;
    return Objects.equals(this.isShipped, orderShipmentUpdate.isShipped) &&
        Objects.equals(this.orderId, orderShipmentUpdate.orderId) &&
        Objects.equals(this.replace, orderShipmentUpdate.replace) &&
        Objects.equals(this.shipmentId, orderShipmentUpdate.shipmentId) &&
        Objects.equals(this.storeId, orderShipmentUpdate.storeId) &&
        Objects.equals(this.trackingLink, orderShipmentUpdate.trackingLink) &&
        Objects.equals(this.trackingNumbers, orderShipmentUpdate.trackingNumbers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isShipped, orderId, replace, shipmentId, storeId, trackingLink, trackingNumbers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderShipmentUpdate {\n");
    sb.append("    isShipped: ").append(toIndentedString(isShipped)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    replace: ").append(toIndentedString(replace)).append("\n");
    sb.append("    shipmentId: ").append(toIndentedString(shipmentId)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    trackingLink: ").append(toIndentedString(trackingLink)).append("\n");
    sb.append("    trackingNumbers: ").append(toIndentedString(trackingNumbers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_shipped");
    openapiFields.add("order_id");
    openapiFields.add("replace");
    openapiFields.add("shipment_id");
    openapiFields.add("store_id");
    openapiFields.add("tracking_link");
    openapiFields.add("tracking_numbers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("shipment_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderShipmentUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderShipmentUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderShipmentUpdate is not found in the empty JSON string", OrderShipmentUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderShipmentUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderShipmentUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderShipmentUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if (!jsonObj.get("shipment_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipment_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipment_id").toString()));
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      if ((jsonObj.get("tracking_link") != null && !jsonObj.get("tracking_link").isJsonNull()) && !jsonObj.get("tracking_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_link").toString()));
      }
      if (jsonObj.get("tracking_numbers") != null && !jsonObj.get("tracking_numbers").isJsonNull()) {
        JsonArray jsonArraytrackingNumbers = jsonObj.getAsJsonArray("tracking_numbers");
        if (jsonArraytrackingNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracking_numbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracking_numbers` to be an array in the JSON string but got `%s`", jsonObj.get("tracking_numbers").toString()));
          }

          // validate the optional field `tracking_numbers` (array)
          for (int i = 0; i < jsonArraytrackingNumbers.size(); i++) {
            OrderShipmentAddTrackingNumbersInner.validateJsonElement(jsonArraytrackingNumbers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderShipmentUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderShipmentUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderShipmentUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderShipmentUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderShipmentUpdate>() {
           @Override
           public void write(JsonWriter out, OrderShipmentUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderShipmentUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderShipmentUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderShipmentUpdate
   * @throws IOException if the JSON string is invalid with respect to OrderShipmentUpdate
   */
  public static OrderShipmentUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderShipmentUpdate.class);
  }

  /**
   * Convert an instance of OrderShipmentUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

