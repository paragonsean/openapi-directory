/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Product;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResponseProductListResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseProductListResult {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_PRODUCT = "product";
  @SerializedName(SERIALIZED_NAME_PRODUCT)
  private List<Product> product = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCTS_COUNT = "products_count";
  @SerializedName(SERIALIZED_NAME_PRODUCTS_COUNT)
  private Integer productsCount;

  public ResponseProductListResult() {
  }

  public ResponseProductListResult additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public ResponseProductListResult customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public ResponseProductListResult product(List<Product> product) {
    this.product = product;
    return this;
  }

  public ResponseProductListResult addProductItem(Product productItem) {
    if (this.product == null) {
      this.product = new ArrayList<>();
    }
    this.product.add(productItem);
    return this;
  }

  /**
   * Get product
   * @return product
   */
  @javax.annotation.Nullable
  public List<Product> getProduct() {
    return product;
  }

  public void setProduct(List<Product> product) {
    this.product = product;
  }


  public ResponseProductListResult productsCount(Integer productsCount) {
    this.productsCount = productsCount;
    return this;
  }

  /**
   * Get productsCount
   * @return productsCount
   */
  @javax.annotation.Nullable
  public Integer getProductsCount() {
    return productsCount;
  }

  public void setProductsCount(Integer productsCount) {
    this.productsCount = productsCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseProductListResult responseProductListResult = (ResponseProductListResult) o;
    return Objects.equals(this.additionalFields, responseProductListResult.additionalFields) &&
        Objects.equals(this.customFields, responseProductListResult.customFields) &&
        Objects.equals(this.product, responseProductListResult.product) &&
        Objects.equals(this.productsCount, responseProductListResult.productsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, customFields, product, productsCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseProductListResult {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    productsCount: ").append(toIndentedString(productsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("custom_fields");
    openapiFields.add("product");
    openapiFields.add("products_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseProductListResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseProductListResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseProductListResult is not found in the empty JSON string", ResponseProductListResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseProductListResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseProductListResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("product") != null && !jsonObj.get("product").isJsonNull()) {
        JsonArray jsonArrayproduct = jsonObj.getAsJsonArray("product");
        if (jsonArrayproduct != null) {
          // ensure the json data is an array
          if (!jsonObj.get("product").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `product` to be an array in the JSON string but got `%s`", jsonObj.get("product").toString()));
          }

          // validate the optional field `product` (array)
          for (int i = 0; i < jsonArrayproduct.size(); i++) {
            Product.validateJsonElement(jsonArrayproduct.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseProductListResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseProductListResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseProductListResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseProductListResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseProductListResult>() {
           @Override
           public void write(JsonWriter out, ResponseProductListResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseProductListResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseProductListResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseProductListResult
   * @throws IOException if the JSON string is invalid with respect to ResponseProductListResult
   */
  public static ResponseProductListResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseProductListResult.class);
  }

  /**
   * Convert an instance of ResponseProductListResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

