/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductOptionItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductOption {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTION_ITEMS = "option_items";
  @SerializedName(SERIALIZED_NAME_OPTION_ITEMS)
  private List<ProductOptionItem> optionItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_OPTION_ID = "product_option_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_OPTION_ID)
  private String productOptionId;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sort_order";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USED_IN_COMBINATION = "used_in_combination";
  @SerializedName(SERIALIZED_NAME_USED_IN_COMBINATION)
  private Boolean usedInCombination;

  public ProductOption() {
  }

  public ProductOption additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public ProductOption available(Boolean available) {
    this.available = available;
    return this;
  }

  /**
   * Get available
   * @return available
   */
  @javax.annotation.Nullable
  public Boolean getAvailable() {
    return available;
  }

  public void setAvailable(Boolean available) {
    this.available = available;
  }


  public ProductOption customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public ProductOption description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProductOption id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProductOption name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProductOption optionItems(List<ProductOptionItem> optionItems) {
    this.optionItems = optionItems;
    return this;
  }

  public ProductOption addOptionItemsItem(ProductOptionItem optionItemsItem) {
    if (this.optionItems == null) {
      this.optionItems = new ArrayList<>();
    }
    this.optionItems.add(optionItemsItem);
    return this;
  }

  /**
   * Get optionItems
   * @return optionItems
   */
  @javax.annotation.Nullable
  public List<ProductOptionItem> getOptionItems() {
    return optionItems;
  }

  public void setOptionItems(List<ProductOptionItem> optionItems) {
    this.optionItems = optionItems;
  }


  public ProductOption productOptionId(String productOptionId) {
    this.productOptionId = productOptionId;
    return this;
  }

  /**
   * Get productOptionId
   * @return productOptionId
   */
  @javax.annotation.Nullable
  public String getProductOptionId() {
    return productOptionId;
  }

  public void setProductOptionId(String productOptionId) {
    this.productOptionId = productOptionId;
  }


  public ProductOption required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public ProductOption sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }


  public ProductOption type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ProductOption usedInCombination(Boolean usedInCombination) {
    this.usedInCombination = usedInCombination;
    return this;
  }

  /**
   * Get usedInCombination
   * @return usedInCombination
   */
  @javax.annotation.Nullable
  public Boolean getUsedInCombination() {
    return usedInCombination;
  }

  public void setUsedInCombination(Boolean usedInCombination) {
    this.usedInCombination = usedInCombination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductOption productOption = (ProductOption) o;
    return Objects.equals(this.additionalFields, productOption.additionalFields) &&
        Objects.equals(this.available, productOption.available) &&
        Objects.equals(this.customFields, productOption.customFields) &&
        Objects.equals(this.description, productOption.description) &&
        Objects.equals(this.id, productOption.id) &&
        Objects.equals(this.name, productOption.name) &&
        Objects.equals(this.optionItems, productOption.optionItems) &&
        Objects.equals(this.productOptionId, productOption.productOptionId) &&
        Objects.equals(this.required, productOption.required) &&
        Objects.equals(this.sortOrder, productOption.sortOrder) &&
        Objects.equals(this.type, productOption.type) &&
        Objects.equals(this.usedInCombination, productOption.usedInCombination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, available, customFields, description, id, name, optionItems, productOptionId, required, sortOrder, type, usedInCombination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductOption {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optionItems: ").append(toIndentedString(optionItems)).append("\n");
    sb.append("    productOptionId: ").append(toIndentedString(productOptionId)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usedInCombination: ").append(toIndentedString(usedInCombination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("available");
    openapiFields.add("custom_fields");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("option_items");
    openapiFields.add("product_option_id");
    openapiFields.add("required");
    openapiFields.add("sort_order");
    openapiFields.add("type");
    openapiFields.add("used_in_combination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductOption
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductOption is not found in the empty JSON string", ProductOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("option_items") != null && !jsonObj.get("option_items").isJsonNull()) {
        JsonArray jsonArrayoptionItems = jsonObj.getAsJsonArray("option_items");
        if (jsonArrayoptionItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("option_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `option_items` to be an array in the JSON string but got `%s`", jsonObj.get("option_items").toString()));
          }

          // validate the optional field `option_items` (array)
          for (int i = 0; i < jsonArrayoptionItems.size(); i++) {
            ProductOptionItem.validateJsonElement(jsonArrayoptionItems.get(i));
          };
        }
      }
      if ((jsonObj.get("product_option_id") != null && !jsonObj.get("product_option_id").isJsonNull()) && !jsonObj.get("product_option_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_option_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_option_id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductOption.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductOption>() {
           @Override
           public void write(JsonWriter out, ProductOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductOption given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductOption
   * @throws IOException if the JSON string is invalid with respect to ProductOption
   */
  public static ProductOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductOption.class);
  }

  /**
   * Convert an instance of ProductOption to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

