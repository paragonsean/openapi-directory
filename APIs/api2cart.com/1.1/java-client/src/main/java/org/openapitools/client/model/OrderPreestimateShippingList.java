/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderPreestimateShippingListOrderItemInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderPreestimateShippingList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderPreestimateShippingList {
  public static final String SERIALIZED_NAME_CUSTOMER_EMAIL = "customer_email";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_EMAIL)
  private String customerEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_EXCLUDE = "exclude";
  @SerializedName(SERIALIZED_NAME_EXCLUDE)
  private String exclude;

  public static final String SERIALIZED_NAME_ORDER_ITEM = "order_item";
  @SerializedName(SERIALIZED_NAME_ORDER_ITEM)
  private List<OrderPreestimateShippingListOrderItemInner> orderItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private String params = "force_all";

  public static final String SERIALIZED_NAME_SHIPP_ADDRESS1 = "shipp_address_1";
  @SerializedName(SERIALIZED_NAME_SHIPP_ADDRESS1)
  private String shippAddress1;

  public static final String SERIALIZED_NAME_SHIPP_CITY = "shipp_city";
  @SerializedName(SERIALIZED_NAME_SHIPP_CITY)
  private String shippCity;

  public static final String SERIALIZED_NAME_SHIPP_COUNTRY = "shipp_country";
  @SerializedName(SERIALIZED_NAME_SHIPP_COUNTRY)
  private String shippCountry;

  public static final String SERIALIZED_NAME_SHIPP_POSTCODE = "shipp_postcode";
  @SerializedName(SERIALIZED_NAME_SHIPP_POSTCODE)
  private String shippPostcode;

  public static final String SERIALIZED_NAME_SHIPP_STATE = "shipp_state";
  @SerializedName(SERIALIZED_NAME_SHIPP_STATE)
  private String shippState;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouse_id";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public OrderPreestimateShippingList() {
  }

  public OrderPreestimateShippingList customerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
    return this;
  }

  /**
   * Retrieves orders specified by customer email
   * @return customerEmail
   */
  @javax.annotation.Nullable
  public String getCustomerEmail() {
    return customerEmail;
  }

  public void setCustomerEmail(String customerEmail) {
    this.customerEmail = customerEmail;
  }


  public OrderPreestimateShippingList customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Retrieves orders specified by customer id
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public OrderPreestimateShippingList exclude(String exclude) {
    this.exclude = exclude;
    return this;
  }

  /**
   * Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @return exclude
   */
  @javax.annotation.Nullable
  public String getExclude() {
    return exclude;
  }

  public void setExclude(String exclude) {
    this.exclude = exclude;
  }


  public OrderPreestimateShippingList orderItem(List<OrderPreestimateShippingListOrderItemInner> orderItem) {
    this.orderItem = orderItem;
    return this;
  }

  public OrderPreestimateShippingList addOrderItemItem(OrderPreestimateShippingListOrderItemInner orderItemItem) {
    if (this.orderItem == null) {
      this.orderItem = new ArrayList<>();
    }
    this.orderItem.add(orderItemItem);
    return this;
  }

  /**
   * Get orderItem
   * @return orderItem
   */
  @javax.annotation.Nonnull
  public List<OrderPreestimateShippingListOrderItemInner> getOrderItem() {
    return orderItem;
  }

  public void setOrderItem(List<OrderPreestimateShippingListOrderItemInner> orderItem) {
    this.orderItem = orderItem;
  }


  public OrderPreestimateShippingList params(String params) {
    this.params = params;
    return this;
  }

  /**
   * Set this parameter in order to choose which entity fields you want to retrieve
   * @return params
   */
  @javax.annotation.Nullable
  public String getParams() {
    return params;
  }

  public void setParams(String params) {
    this.params = params;
  }


  public OrderPreestimateShippingList shippAddress1(String shippAddress1) {
    this.shippAddress1 = shippAddress1;
    return this;
  }

  /**
   * Specifies first shipping address
   * @return shippAddress1
   */
  @javax.annotation.Nullable
  public String getShippAddress1() {
    return shippAddress1;
  }

  public void setShippAddress1(String shippAddress1) {
    this.shippAddress1 = shippAddress1;
  }


  public OrderPreestimateShippingList shippCity(String shippCity) {
    this.shippCity = shippCity;
    return this;
  }

  /**
   * Specifies shipping city
   * @return shippCity
   */
  @javax.annotation.Nullable
  public String getShippCity() {
    return shippCity;
  }

  public void setShippCity(String shippCity) {
    this.shippCity = shippCity;
  }


  public OrderPreestimateShippingList shippCountry(String shippCountry) {
    this.shippCountry = shippCountry;
    return this;
  }

  /**
   * Specifies shipping country code
   * @return shippCountry
   */
  @javax.annotation.Nonnull
  public String getShippCountry() {
    return shippCountry;
  }

  public void setShippCountry(String shippCountry) {
    this.shippCountry = shippCountry;
  }


  public OrderPreestimateShippingList shippPostcode(String shippPostcode) {
    this.shippPostcode = shippPostcode;
    return this;
  }

  /**
   * Specifies shipping postcode
   * @return shippPostcode
   */
  @javax.annotation.Nullable
  public String getShippPostcode() {
    return shippPostcode;
  }

  public void setShippPostcode(String shippPostcode) {
    this.shippPostcode = shippPostcode;
  }


  public OrderPreestimateShippingList shippState(String shippState) {
    this.shippState = shippState;
    return this;
  }

  /**
   * Specifies shipping state code
   * @return shippState
   */
  @javax.annotation.Nullable
  public String getShippState() {
    return shippState;
  }

  public void setShippState(String shippState) {
    this.shippState = shippState;
  }


  public OrderPreestimateShippingList storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Store Id
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public OrderPreestimateShippingList warehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
    return this;
  }

  /**
   * This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
   * @return warehouseId
   */
  @javax.annotation.Nullable
  public String getWarehouseId() {
    return warehouseId;
  }

  public void setWarehouseId(String warehouseId) {
    this.warehouseId = warehouseId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderPreestimateShippingList orderPreestimateShippingList = (OrderPreestimateShippingList) o;
    return Objects.equals(this.customerEmail, orderPreestimateShippingList.customerEmail) &&
        Objects.equals(this.customerId, orderPreestimateShippingList.customerId) &&
        Objects.equals(this.exclude, orderPreestimateShippingList.exclude) &&
        Objects.equals(this.orderItem, orderPreestimateShippingList.orderItem) &&
        Objects.equals(this.params, orderPreestimateShippingList.params) &&
        Objects.equals(this.shippAddress1, orderPreestimateShippingList.shippAddress1) &&
        Objects.equals(this.shippCity, orderPreestimateShippingList.shippCity) &&
        Objects.equals(this.shippCountry, orderPreestimateShippingList.shippCountry) &&
        Objects.equals(this.shippPostcode, orderPreestimateShippingList.shippPostcode) &&
        Objects.equals(this.shippState, orderPreestimateShippingList.shippState) &&
        Objects.equals(this.storeId, orderPreestimateShippingList.storeId) &&
        Objects.equals(this.warehouseId, orderPreestimateShippingList.warehouseId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerEmail, customerId, exclude, orderItem, params, shippAddress1, shippCity, shippCountry, shippPostcode, shippState, storeId, warehouseId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderPreestimateShippingList {\n");
    sb.append("    customerEmail: ").append(toIndentedString(customerEmail)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    orderItem: ").append(toIndentedString(orderItem)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    shippAddress1: ").append(toIndentedString(shippAddress1)).append("\n");
    sb.append("    shippCity: ").append(toIndentedString(shippCity)).append("\n");
    sb.append("    shippCountry: ").append(toIndentedString(shippCountry)).append("\n");
    sb.append("    shippPostcode: ").append(toIndentedString(shippPostcode)).append("\n");
    sb.append("    shippState: ").append(toIndentedString(shippState)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer_email");
    openapiFields.add("customer_id");
    openapiFields.add("exclude");
    openapiFields.add("order_item");
    openapiFields.add("params");
    openapiFields.add("shipp_address_1");
    openapiFields.add("shipp_city");
    openapiFields.add("shipp_country");
    openapiFields.add("shipp_postcode");
    openapiFields.add("shipp_state");
    openapiFields.add("store_id");
    openapiFields.add("warehouse_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("order_item");
    openapiRequiredFields.add("shipp_country");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderPreestimateShippingList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderPreestimateShippingList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderPreestimateShippingList is not found in the empty JSON string", OrderPreestimateShippingList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderPreestimateShippingList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderPreestimateShippingList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderPreestimateShippingList.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customer_email") != null && !jsonObj.get("customer_email").isJsonNull()) && !jsonObj.get("customer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_email").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("exclude") != null && !jsonObj.get("exclude").isJsonNull()) && !jsonObj.get("exclude").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclude").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("order_item").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_item` to be an array in the JSON string but got `%s`", jsonObj.get("order_item").toString()));
      }

      JsonArray jsonArrayorderItem = jsonObj.getAsJsonArray("order_item");
      // validate the required field `order_item` (array)
      for (int i = 0; i < jsonArrayorderItem.size(); i++) {
        OrderPreestimateShippingListOrderItemInner.validateJsonElement(jsonArrayorderItem.get(i));
      };
      if ((jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) && !jsonObj.get("params").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be a primitive type in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
      if ((jsonObj.get("shipp_address_1") != null && !jsonObj.get("shipp_address_1").isJsonNull()) && !jsonObj.get("shipp_address_1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipp_address_1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipp_address_1").toString()));
      }
      if ((jsonObj.get("shipp_city") != null && !jsonObj.get("shipp_city").isJsonNull()) && !jsonObj.get("shipp_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipp_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipp_city").toString()));
      }
      if (!jsonObj.get("shipp_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipp_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipp_country").toString()));
      }
      if ((jsonObj.get("shipp_postcode") != null && !jsonObj.get("shipp_postcode").isJsonNull()) && !jsonObj.get("shipp_postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipp_postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipp_postcode").toString()));
      }
      if ((jsonObj.get("shipp_state") != null && !jsonObj.get("shipp_state").isJsonNull()) && !jsonObj.get("shipp_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipp_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipp_state").toString()));
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      if ((jsonObj.get("warehouse_id") != null && !jsonObj.get("warehouse_id").isJsonNull()) && !jsonObj.get("warehouse_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderPreestimateShippingList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderPreestimateShippingList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderPreestimateShippingList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderPreestimateShippingList.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderPreestimateShippingList>() {
           @Override
           public void write(JsonWriter out, OrderPreestimateShippingList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderPreestimateShippingList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderPreestimateShippingList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderPreestimateShippingList
   * @throws IOException if the JSON string is invalid with respect to OrderPreestimateShippingList
   */
  public static OrderPreestimateShippingList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderPreestimateShippingList.class);
  }

  /**
   * Convert an instance of OrderPreestimateShippingList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

