/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Image;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Brand
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Brand {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private String createdTime;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_FULL_DESCRIPTION = "full_description";
  @SerializedName(SERIALIZED_NAME_FULL_DESCRIPTION)
  private String fullDescription;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<Image> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_META_DESCRIPTION = "meta_description";
  @SerializedName(SERIALIZED_NAME_META_DESCRIPTION)
  private String metaDescription;

  public static final String SERIALIZED_NAME_META_KEYWORDS = "meta_keywords";
  @SerializedName(SERIALIZED_NAME_META_KEYWORDS)
  private String metaKeywords;

  public static final String SERIALIZED_NAME_META_TITLE = "meta_title";
  @SerializedName(SERIALIZED_NAME_META_TITLE)
  private String metaTitle;

  public static final String SERIALIZED_NAME_MODIFIED_TIME = "modified_time";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME)
  private String modifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "short_description";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_STORES_IDS = "stores_ids";
  @SerializedName(SERIALIZED_NAME_STORES_IDS)
  private List<String> storesIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Brand() {
  }

  public Brand active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Brand additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public Brand createdTime(String createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public String getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(String createdTime) {
    this.createdTime = createdTime;
  }


  public Brand customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public Brand fullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
    return this;
  }

  /**
   * Get fullDescription
   * @return fullDescription
   */
  @javax.annotation.Nullable
  public String getFullDescription() {
    return fullDescription;
  }

  public void setFullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
  }


  public Brand id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Brand images(List<Image> images) {
    this.images = images;
    return this;
  }

  public Brand addImagesItem(Image imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public List<Image> getImages() {
    return images;
  }

  public void setImages(List<Image> images) {
    this.images = images;
  }


  public Brand metaDescription(String metaDescription) {
    this.metaDescription = metaDescription;
    return this;
  }

  /**
   * Get metaDescription
   * @return metaDescription
   */
  @javax.annotation.Nullable
  public String getMetaDescription() {
    return metaDescription;
  }

  public void setMetaDescription(String metaDescription) {
    this.metaDescription = metaDescription;
  }


  public Brand metaKeywords(String metaKeywords) {
    this.metaKeywords = metaKeywords;
    return this;
  }

  /**
   * Get metaKeywords
   * @return metaKeywords
   */
  @javax.annotation.Nullable
  public String getMetaKeywords() {
    return metaKeywords;
  }

  public void setMetaKeywords(String metaKeywords) {
    this.metaKeywords = metaKeywords;
  }


  public Brand metaTitle(String metaTitle) {
    this.metaTitle = metaTitle;
    return this;
  }

  /**
   * Get metaTitle
   * @return metaTitle
   */
  @javax.annotation.Nullable
  public String getMetaTitle() {
    return metaTitle;
  }

  public void setMetaTitle(String metaTitle) {
    this.metaTitle = metaTitle;
  }


  public Brand modifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
    return this;
  }

  /**
   * Get modifiedTime
   * @return modifiedTime
   */
  @javax.annotation.Nullable
  public String getModifiedTime() {
    return modifiedTime;
  }

  public void setModifiedTime(String modifiedTime) {
    this.modifiedTime = modifiedTime;
  }


  public Brand name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Brand shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Get shortDescription
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public Brand storesIds(List<String> storesIds) {
    this.storesIds = storesIds;
    return this;
  }

  public Brand addStoresIdsItem(String storesIdsItem) {
    if (this.storesIds == null) {
      this.storesIds = new ArrayList<>();
    }
    this.storesIds.add(storesIdsItem);
    return this;
  }

  /**
   * Get storesIds
   * @return storesIds
   */
  @javax.annotation.Nullable
  public List<String> getStoresIds() {
    return storesIds;
  }

  public void setStoresIds(List<String> storesIds) {
    this.storesIds = storesIds;
  }


  public Brand url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Brand brand = (Brand) o;
    return Objects.equals(this.active, brand.active) &&
        Objects.equals(this.additionalFields, brand.additionalFields) &&
        Objects.equals(this.createdTime, brand.createdTime) &&
        Objects.equals(this.customFields, brand.customFields) &&
        Objects.equals(this.fullDescription, brand.fullDescription) &&
        Objects.equals(this.id, brand.id) &&
        Objects.equals(this.images, brand.images) &&
        Objects.equals(this.metaDescription, brand.metaDescription) &&
        Objects.equals(this.metaKeywords, brand.metaKeywords) &&
        Objects.equals(this.metaTitle, brand.metaTitle) &&
        Objects.equals(this.modifiedTime, brand.modifiedTime) &&
        Objects.equals(this.name, brand.name) &&
        Objects.equals(this.shortDescription, brand.shortDescription) &&
        Objects.equals(this.storesIds, brand.storesIds) &&
        Objects.equals(this.url, brand.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, additionalFields, createdTime, customFields, fullDescription, id, images, metaDescription, metaKeywords, metaTitle, modifiedTime, name, shortDescription, storesIds, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Brand {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    fullDescription: ").append(toIndentedString(fullDescription)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    metaDescription: ").append(toIndentedString(metaDescription)).append("\n");
    sb.append("    metaKeywords: ").append(toIndentedString(metaKeywords)).append("\n");
    sb.append("    metaTitle: ").append(toIndentedString(metaTitle)).append("\n");
    sb.append("    modifiedTime: ").append(toIndentedString(modifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    storesIds: ").append(toIndentedString(storesIds)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("additional_fields");
    openapiFields.add("created_time");
    openapiFields.add("custom_fields");
    openapiFields.add("full_description");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("meta_description");
    openapiFields.add("meta_keywords");
    openapiFields.add("meta_title");
    openapiFields.add("modified_time");
    openapiFields.add("name");
    openapiFields.add("short_description");
    openapiFields.add("stores_ids");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Brand
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Brand.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Brand is not found in the empty JSON string", Brand.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Brand.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Brand` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) && !jsonObj.get("created_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_time").toString()));
      }
      if ((jsonObj.get("full_description") != null && !jsonObj.get("full_description").isJsonNull()) && !jsonObj.get("full_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            Image.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("meta_description") != null && !jsonObj.get("meta_description").isJsonNull()) && !jsonObj.get("meta_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_description").toString()));
      }
      if ((jsonObj.get("meta_keywords") != null && !jsonObj.get("meta_keywords").isJsonNull()) && !jsonObj.get("meta_keywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_keywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_keywords").toString()));
      }
      if ((jsonObj.get("meta_title") != null && !jsonObj.get("meta_title").isJsonNull()) && !jsonObj.get("meta_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meta_title").toString()));
      }
      if ((jsonObj.get("modified_time") != null && !jsonObj.get("modified_time").isJsonNull()) && !jsonObj.get("modified_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_time").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("short_description") != null && !jsonObj.get("short_description").isJsonNull()) && !jsonObj.get("short_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stores_ids") != null && !jsonObj.get("stores_ids").isJsonNull() && !jsonObj.get("stores_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stores_ids` to be an array in the JSON string but got `%s`", jsonObj.get("stores_ids").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Brand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Brand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Brand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Brand.class));

       return (TypeAdapter<T>) new TypeAdapter<Brand>() {
           @Override
           public void write(JsonWriter out, Brand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Brand read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Brand given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Brand
   * @throws IOException if the JSON string is invalid with respect to Brand
   */
  public static Brand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Brand.class);
  }

  /**
   * Convert an instance of Brand to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

