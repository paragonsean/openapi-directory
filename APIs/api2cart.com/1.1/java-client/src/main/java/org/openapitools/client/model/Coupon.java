/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.A2CDateTime;
import org.openapitools.client.model.CouponAction;
import org.openapitools.client.model.CouponCode;
import org.openapitools.client.model.CouponCondition;
import org.openapitools.client.model.CouponHistory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Coupon
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Coupon {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<CouponAction> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_AVAIL = "avail";
  @SerializedName(SERIALIZED_NAME_AVAIL)
  private Boolean avail;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CODES = "codes";
  @SerializedName(SERIALIZED_NAME_CODES)
  private List<CouponCode> codes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<CouponCondition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_DATE_END = "date_end";
  @SerializedName(SERIALIZED_NAME_DATE_END)
  private A2CDateTime dateEnd;

  public static final String SERIALIZED_NAME_DATE_START = "date_start";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private A2CDateTime dateStart;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGIC_OPERATOR = "logic_operator";
  @SerializedName(SERIALIZED_NAME_LOGIC_OPERATOR)
  private String logicOperator;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_USAGE_HISTORY = "usage_history";
  @SerializedName(SERIALIZED_NAME_USAGE_HISTORY)
  private List<CouponHistory> usageHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_USAGE_LIMIT = "usage_limit";
  @SerializedName(SERIALIZED_NAME_USAGE_LIMIT)
  private Integer usageLimit;

  public static final String SERIALIZED_NAME_USAGE_LIMIT_PER_CUSTOMER = "usage_limit_per_customer";
  @SerializedName(SERIALIZED_NAME_USAGE_LIMIT_PER_CUSTOMER)
  private Integer usageLimitPerCustomer;

  public static final String SERIALIZED_NAME_USED_TIMES = "used_times";
  @SerializedName(SERIALIZED_NAME_USED_TIMES)
  private Integer usedTimes;

  public Coupon() {
  }

  public Coupon actions(List<CouponAction> actions) {
    this.actions = actions;
    return this;
  }

  public Coupon addActionsItem(CouponAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<CouponAction> getActions() {
    return actions;
  }

  public void setActions(List<CouponAction> actions) {
    this.actions = actions;
  }


  public Coupon additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public Coupon avail(Boolean avail) {
    this.avail = avail;
    return this;
  }

  /**
   * Get avail
   * @return avail
   */
  @javax.annotation.Nullable
  public Boolean getAvail() {
    return avail;
  }

  public void setAvail(Boolean avail) {
    this.avail = avail;
  }


  public Coupon code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Coupon codes(List<CouponCode> codes) {
    this.codes = codes;
    return this;
  }

  public Coupon addCodesItem(CouponCode codesItem) {
    if (this.codes == null) {
      this.codes = new ArrayList<>();
    }
    this.codes.add(codesItem);
    return this;
  }

  /**
   * Get codes
   * @return codes
   */
  @javax.annotation.Nullable
  public List<CouponCode> getCodes() {
    return codes;
  }

  public void setCodes(List<CouponCode> codes) {
    this.codes = codes;
  }


  public Coupon conditions(List<CouponCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public Coupon addConditionsItem(CouponCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<CouponCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<CouponCondition> conditions) {
    this.conditions = conditions;
  }


  public Coupon customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public Coupon dateEnd(A2CDateTime dateEnd) {
    this.dateEnd = dateEnd;
    return this;
  }

  /**
   * Get dateEnd
   * @return dateEnd
   */
  @javax.annotation.Nullable
  public A2CDateTime getDateEnd() {
    return dateEnd;
  }

  public void setDateEnd(A2CDateTime dateEnd) {
    this.dateEnd = dateEnd;
  }


  public Coupon dateStart(A2CDateTime dateStart) {
    this.dateStart = dateStart;
    return this;
  }

  /**
   * Get dateStart
   * @return dateStart
   */
  @javax.annotation.Nullable
  public A2CDateTime getDateStart() {
    return dateStart;
  }

  public void setDateStart(A2CDateTime dateStart) {
    this.dateStart = dateStart;
  }


  public Coupon description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Coupon id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Coupon logicOperator(String logicOperator) {
    this.logicOperator = logicOperator;
    return this;
  }

  /**
   * Get logicOperator
   * @return logicOperator
   */
  @javax.annotation.Nullable
  public String getLogicOperator() {
    return logicOperator;
  }

  public void setLogicOperator(String logicOperator) {
    this.logicOperator = logicOperator;
  }


  public Coupon name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Coupon priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public Coupon usageHistory(List<CouponHistory> usageHistory) {
    this.usageHistory = usageHistory;
    return this;
  }

  public Coupon addUsageHistoryItem(CouponHistory usageHistoryItem) {
    if (this.usageHistory == null) {
      this.usageHistory = new ArrayList<>();
    }
    this.usageHistory.add(usageHistoryItem);
    return this;
  }

  /**
   * Get usageHistory
   * @return usageHistory
   */
  @javax.annotation.Nullable
  public List<CouponHistory> getUsageHistory() {
    return usageHistory;
  }

  public void setUsageHistory(List<CouponHistory> usageHistory) {
    this.usageHistory = usageHistory;
  }


  public Coupon usageLimit(Integer usageLimit) {
    this.usageLimit = usageLimit;
    return this;
  }

  /**
   * Get usageLimit
   * @return usageLimit
   */
  @javax.annotation.Nullable
  public Integer getUsageLimit() {
    return usageLimit;
  }

  public void setUsageLimit(Integer usageLimit) {
    this.usageLimit = usageLimit;
  }


  public Coupon usageLimitPerCustomer(Integer usageLimitPerCustomer) {
    this.usageLimitPerCustomer = usageLimitPerCustomer;
    return this;
  }

  /**
   * Get usageLimitPerCustomer
   * @return usageLimitPerCustomer
   */
  @javax.annotation.Nullable
  public Integer getUsageLimitPerCustomer() {
    return usageLimitPerCustomer;
  }

  public void setUsageLimitPerCustomer(Integer usageLimitPerCustomer) {
    this.usageLimitPerCustomer = usageLimitPerCustomer;
  }


  public Coupon usedTimes(Integer usedTimes) {
    this.usedTimes = usedTimes;
    return this;
  }

  /**
   * Get usedTimes
   * @return usedTimes
   */
  @javax.annotation.Nullable
  public Integer getUsedTimes() {
    return usedTimes;
  }

  public void setUsedTimes(Integer usedTimes) {
    this.usedTimes = usedTimes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Coupon coupon = (Coupon) o;
    return Objects.equals(this.actions, coupon.actions) &&
        Objects.equals(this.additionalFields, coupon.additionalFields) &&
        Objects.equals(this.avail, coupon.avail) &&
        Objects.equals(this.code, coupon.code) &&
        Objects.equals(this.codes, coupon.codes) &&
        Objects.equals(this.conditions, coupon.conditions) &&
        Objects.equals(this.customFields, coupon.customFields) &&
        Objects.equals(this.dateEnd, coupon.dateEnd) &&
        Objects.equals(this.dateStart, coupon.dateStart) &&
        Objects.equals(this.description, coupon.description) &&
        Objects.equals(this.id, coupon.id) &&
        Objects.equals(this.logicOperator, coupon.logicOperator) &&
        Objects.equals(this.name, coupon.name) &&
        Objects.equals(this.priority, coupon.priority) &&
        Objects.equals(this.usageHistory, coupon.usageHistory) &&
        Objects.equals(this.usageLimit, coupon.usageLimit) &&
        Objects.equals(this.usageLimitPerCustomer, coupon.usageLimitPerCustomer) &&
        Objects.equals(this.usedTimes, coupon.usedTimes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, additionalFields, avail, code, codes, conditions, customFields, dateEnd, dateStart, description, id, logicOperator, name, priority, usageHistory, usageLimit, usageLimitPerCustomer, usedTimes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Coupon {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    avail: ").append(toIndentedString(avail)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codes: ").append(toIndentedString(codes)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dateEnd: ").append(toIndentedString(dateEnd)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logicOperator: ").append(toIndentedString(logicOperator)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    usageHistory: ").append(toIndentedString(usageHistory)).append("\n");
    sb.append("    usageLimit: ").append(toIndentedString(usageLimit)).append("\n");
    sb.append("    usageLimitPerCustomer: ").append(toIndentedString(usageLimitPerCustomer)).append("\n");
    sb.append("    usedTimes: ").append(toIndentedString(usedTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("additional_fields");
    openapiFields.add("avail");
    openapiFields.add("code");
    openapiFields.add("codes");
    openapiFields.add("conditions");
    openapiFields.add("custom_fields");
    openapiFields.add("date_end");
    openapiFields.add("date_start");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("logic_operator");
    openapiFields.add("name");
    openapiFields.add("priority");
    openapiFields.add("usage_history");
    openapiFields.add("usage_limit");
    openapiFields.add("usage_limit_per_customer");
    openapiFields.add("used_times");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Coupon
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Coupon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Coupon is not found in the empty JSON string", Coupon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Coupon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Coupon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            CouponAction.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (jsonObj.get("codes") != null && !jsonObj.get("codes").isJsonNull()) {
        JsonArray jsonArraycodes = jsonObj.getAsJsonArray("codes");
        if (jsonArraycodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("codes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `codes` to be an array in the JSON string but got `%s`", jsonObj.get("codes").toString()));
          }

          // validate the optional field `codes` (array)
          for (int i = 0; i < jsonArraycodes.size(); i++) {
            CouponCode.validateJsonElement(jsonArraycodes.get(i));
          };
        }
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            CouponCondition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      // validate the optional field `date_end`
      if (jsonObj.get("date_end") != null && !jsonObj.get("date_end").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("date_end"));
      }
      // validate the optional field `date_start`
      if (jsonObj.get("date_start") != null && !jsonObj.get("date_start").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("date_start"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logic_operator") != null && !jsonObj.get("logic_operator").isJsonNull()) && !jsonObj.get("logic_operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logic_operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logic_operator").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("usage_history") != null && !jsonObj.get("usage_history").isJsonNull()) {
        JsonArray jsonArrayusageHistory = jsonObj.getAsJsonArray("usage_history");
        if (jsonArrayusageHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usage_history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usage_history` to be an array in the JSON string but got `%s`", jsonObj.get("usage_history").toString()));
          }

          // validate the optional field `usage_history` (array)
          for (int i = 0; i < jsonArrayusageHistory.size(); i++) {
            CouponHistory.validateJsonElement(jsonArrayusageHistory.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Coupon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Coupon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Coupon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Coupon.class));

       return (TypeAdapter<T>) new TypeAdapter<Coupon>() {
           @Override
           public void write(JsonWriter out, Coupon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Coupon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Coupon given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Coupon
   * @throws IOException if the JSON string is invalid with respect to Coupon
   */
  public static Coupon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Coupon.class);
  }

  /**
   * Convert an instance of Coupon to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

