/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.ModelResponseOrderAbandonedList;
import org.openapitools.client.model.ModelResponseOrderList;
import org.openapitools.client.model.ModelResponseOrderPreestimateShippingList;
import org.openapitools.client.model.ModelResponseOrderShipmentList;
import org.openapitools.client.model.ModelResponseOrderTransactionList;
import org.openapitools.client.model.OrderAdd;
import org.openapitools.client.model.OrderAdd200Response;
import org.openapitools.client.model.OrderCount200Response;
import org.openapitools.client.model.OrderFinancialStatusList200Response;
import org.openapitools.client.model.OrderFind200Response;
import org.openapitools.client.model.OrderFulfillmentStatusList200Response;
import org.openapitools.client.model.OrderInfo200Response;
import org.openapitools.client.model.OrderPreestimateShippingList;
import org.openapitools.client.model.OrderRefundAdd;
import org.openapitools.client.model.OrderRefundAdd200Response;
import org.openapitools.client.model.OrderShipmentAdd;
import org.openapitools.client.model.OrderShipmentAdd200Response;
import org.openapitools.client.model.OrderShipmentDelete200Response;
import org.openapitools.client.model.OrderShipmentTrackingAdd;
import org.openapitools.client.model.OrderShipmentTrackingAdd200Response;
import org.openapitools.client.model.OrderShipmentUpdate;
import org.openapitools.client.model.OrderStatusList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for orderAbandonedList
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param skipEmptyEmail Filter empty emails (optional, default to false)
     * @param storeId Store Id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to customer,totals,items)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderAbandonedListCall(String customerId, String customerEmail, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, Boolean skipEmptyEmail, String storeId, String pageCursor, Integer count, Integer start, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.abandoned.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_email", customerEmail));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (skipEmptyEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_empty_email", skipEmptyEmail));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderAbandonedListValidateBeforeCall(String customerId, String customerEmail, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, Boolean skipEmptyEmail, String storeId, String pageCursor, Integer count, Integer start, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        return orderAbandonedListCall(customerId, customerEmail, createdTo, createdFrom, modifiedTo, modifiedFrom, skipEmptyEmail, storeId, pageCursor, count, start, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get list of orders that were left by customers before completing the order.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param skipEmptyEmail Filter empty emails (optional, default to false)
     * @param storeId Store Id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to customer,totals,items)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseOrderAbandonedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseOrderAbandonedList orderAbandonedList(String customerId, String customerEmail, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, Boolean skipEmptyEmail, String storeId, String pageCursor, Integer count, Integer start, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<ModelResponseOrderAbandonedList> localVarResp = orderAbandonedListWithHttpInfo(customerId, customerEmail, createdTo, createdFrom, modifiedTo, modifiedFrom, skipEmptyEmail, storeId, pageCursor, count, start, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of orders that were left by customers before completing the order.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param skipEmptyEmail Filter empty emails (optional, default to false)
     * @param storeId Store Id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to customer,totals,items)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;ModelResponseOrderAbandonedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseOrderAbandonedList> orderAbandonedListWithHttpInfo(String customerId, String customerEmail, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, Boolean skipEmptyEmail, String storeId, String pageCursor, Integer count, Integer start, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = orderAbandonedListValidateBeforeCall(customerId, customerEmail, createdTo, createdFrom, modifiedTo, modifiedFrom, skipEmptyEmail, storeId, pageCursor, count, start, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<ModelResponseOrderAbandonedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of orders that were left by customers before completing the order.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param skipEmptyEmail Filter empty emails (optional, default to false)
     * @param storeId Store Id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to customer,totals,items)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderAbandonedListAsync(String customerId, String customerEmail, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, Boolean skipEmptyEmail, String storeId, String pageCursor, Integer count, Integer start, String params, String responseFields, String exclude, final ApiCallback<ModelResponseOrderAbandonedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderAbandonedListValidateBeforeCall(customerId, customerEmail, createdTo, createdFrom, modifiedTo, modifiedFrom, skipEmptyEmail, storeId, pageCursor, count, start, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseOrderAbandonedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderAdd
     * @param orderAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderAddCall(OrderAdd orderAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderAdd;

        // create path and map variables
        String localVarPath = "/order.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderAddValidateBeforeCall(OrderAdd orderAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderAdd' is set
        if (orderAdd == null) {
            throw new ApiException("Missing the required parameter 'orderAdd' when calling orderAdd(Async)");
        }

        return orderAddCall(orderAdd, _callback);

    }

    /**
     * 
     * Add a new order to the cart.
     * @param orderAdd  (required)
     * @return OrderAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderAdd200Response orderAdd(OrderAdd orderAdd) throws ApiException {
        ApiResponse<OrderAdd200Response> localVarResp = orderAddWithHttpInfo(orderAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a new order to the cart.
     * @param orderAdd  (required)
     * @return ApiResponse&lt;OrderAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderAdd200Response> orderAddWithHttpInfo(OrderAdd orderAdd) throws ApiException {
        okhttp3.Call localVarCall = orderAddValidateBeforeCall(orderAdd, null);
        Type localVarReturnType = new TypeToken<OrderAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a new order to the cart.
     * @param orderAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderAddAsync(OrderAdd orderAdd, final ApiCallback<OrderAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderAddValidateBeforeCall(orderAdd, _callback);
        Type localVarReturnType = new TypeToken<OrderAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderCount
     * @param customerId Counts orders quantity specified by customer id (optional)
     * @param customerEmail Counts orders quantity specified by customer email (optional)
     * @param orderStatus Counts orders quantity specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Counts orders quantity specified by store id (optional)
     * @param ids Counts orders specified by ids (optional)
     * @param orderIds Counts orders specified by order ids (optional)
     * @param ebayOrderStatus Counts orders quantity specified by order status (optional)
     * @param financialStatus Counts orders quantity specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderCountCall(String customerId, String customerEmail, String orderStatus, List<String> orderStatusIds, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String financialStatus, String fulfillmentStatus, String shippingMethod, String deliveryMethod, String shipNodeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_email", customerEmail));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_status", orderStatus));
        }

        if (orderStatusIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "order_status_ids", orderStatusIds));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (orderIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_ids", orderIds));
        }

        if (ebayOrderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_order_status", ebayOrderStatus));
        }

        if (financialStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("financial_status", financialStatus));
        }

        if (fulfillmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillment_status", fulfillmentStatus));
        }

        if (shippingMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipping_method", shippingMethod));
        }

        if (deliveryMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery_method", deliveryMethod));
        }

        if (shipNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_node_type", shipNodeType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderCountValidateBeforeCall(String customerId, String customerEmail, String orderStatus, List<String> orderStatusIds, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String financialStatus, String fulfillmentStatus, String shippingMethod, String deliveryMethod, String shipNodeType, final ApiCallback _callback) throws ApiException {
        return orderCountCall(customerId, customerEmail, orderStatus, orderStatusIds, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, financialStatus, fulfillmentStatus, shippingMethod, deliveryMethod, shipNodeType, _callback);

    }

    /**
     * 
     * Count orders in store
     * @param customerId Counts orders quantity specified by customer id (optional)
     * @param customerEmail Counts orders quantity specified by customer email (optional)
     * @param orderStatus Counts orders quantity specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Counts orders quantity specified by store id (optional)
     * @param ids Counts orders specified by ids (optional)
     * @param orderIds Counts orders specified by order ids (optional)
     * @param ebayOrderStatus Counts orders quantity specified by order status (optional)
     * @param financialStatus Counts orders quantity specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @return OrderCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderCount200Response orderCount(String customerId, String customerEmail, String orderStatus, List<String> orderStatusIds, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String financialStatus, String fulfillmentStatus, String shippingMethod, String deliveryMethod, String shipNodeType) throws ApiException {
        ApiResponse<OrderCount200Response> localVarResp = orderCountWithHttpInfo(customerId, customerEmail, orderStatus, orderStatusIds, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, financialStatus, fulfillmentStatus, shippingMethod, deliveryMethod, shipNodeType);
        return localVarResp.getData();
    }

    /**
     * 
     * Count orders in store
     * @param customerId Counts orders quantity specified by customer id (optional)
     * @param customerEmail Counts orders quantity specified by customer email (optional)
     * @param orderStatus Counts orders quantity specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Counts orders quantity specified by store id (optional)
     * @param ids Counts orders specified by ids (optional)
     * @param orderIds Counts orders specified by order ids (optional)
     * @param ebayOrderStatus Counts orders quantity specified by order status (optional)
     * @param financialStatus Counts orders quantity specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @return ApiResponse&lt;OrderCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderCount200Response> orderCountWithHttpInfo(String customerId, String customerEmail, String orderStatus, List<String> orderStatusIds, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String financialStatus, String fulfillmentStatus, String shippingMethod, String deliveryMethod, String shipNodeType) throws ApiException {
        okhttp3.Call localVarCall = orderCountValidateBeforeCall(customerId, customerEmail, orderStatus, orderStatusIds, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, financialStatus, fulfillmentStatus, shippingMethod, deliveryMethod, shipNodeType, null);
        Type localVarReturnType = new TypeToken<OrderCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count orders in store
     * @param customerId Counts orders quantity specified by customer id (optional)
     * @param customerEmail Counts orders quantity specified by customer email (optional)
     * @param orderStatus Counts orders quantity specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Counts orders quantity specified by store id (optional)
     * @param ids Counts orders specified by ids (optional)
     * @param orderIds Counts orders specified by order ids (optional)
     * @param ebayOrderStatus Counts orders quantity specified by order status (optional)
     * @param financialStatus Counts orders quantity specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderCountAsync(String customerId, String customerEmail, String orderStatus, List<String> orderStatusIds, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String financialStatus, String fulfillmentStatus, String shippingMethod, String deliveryMethod, String shipNodeType, final ApiCallback<OrderCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderCountValidateBeforeCall(customerId, customerEmail, orderStatus, orderStatusIds, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, financialStatus, fulfillmentStatus, shippingMethod, deliveryMethod, shipNodeType, _callback);
        Type localVarReturnType = new TypeToken<OrderCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderFinancialStatusList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderFinancialStatusListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.financial_status.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderFinancialStatusListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return orderFinancialStatusListCall(_callback);

    }

    /**
     * 
     * Retrieve list of financial statuses
     * @return OrderFinancialStatusList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderFinancialStatusList200Response orderFinancialStatusList() throws ApiException {
        ApiResponse<OrderFinancialStatusList200Response> localVarResp = orderFinancialStatusListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve list of financial statuses
     * @return ApiResponse&lt;OrderFinancialStatusList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderFinancialStatusList200Response> orderFinancialStatusListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = orderFinancialStatusListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrderFinancialStatusList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve list of financial statuses
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderFinancialStatusListAsync(final ApiCallback<OrderFinancialStatusList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderFinancialStatusListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrderFinancialStatusList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderFind
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call orderFindCall(String customerId, String customerEmail, String orderStatus, Integer start, Integer count, String params, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String financialStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.find.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_email", customerEmail));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_status", orderStatus));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (financialStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("financial_status", financialStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderFindValidateBeforeCall(String customerId, String customerEmail, String orderStatus, Integer start, Integer count, String params, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String financialStatus, final ApiCallback _callback) throws ApiException {
        return orderFindCall(customerId, customerEmail, orderStatus, start, count, params, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, financialStatus, _callback);

    }

    /**
     * 
     * This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @return OrderFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public OrderFind200Response orderFind(String customerId, String customerEmail, String orderStatus, Integer start, Integer count, String params, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String financialStatus) throws ApiException {
        ApiResponse<OrderFind200Response> localVarResp = orderFindWithHttpInfo(customerId, customerEmail, orderStatus, start, count, params, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, financialStatus);
        return localVarResp.getData();
    }

    /**
     * 
     * This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @return ApiResponse&lt;OrderFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<OrderFind200Response> orderFindWithHttpInfo(String customerId, String customerEmail, String orderStatus, Integer start, Integer count, String params, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String financialStatus) throws ApiException {
        okhttp3.Call localVarCall = orderFindValidateBeforeCall(customerId, customerEmail, orderStatus, start, count, params, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, financialStatus, null);
        Type localVarReturnType = new TypeToken<OrderFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call orderFindAsync(String customerId, String customerEmail, String orderStatus, Integer start, Integer count, String params, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String financialStatus, final ApiCallback<OrderFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderFindValidateBeforeCall(customerId, customerEmail, orderStatus, start, count, params, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, financialStatus, _callback);
        Type localVarReturnType = new TypeToken<OrderFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderFulfillmentStatusList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderFulfillmentStatusListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.fulfillment_status.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderFulfillmentStatusListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return orderFulfillmentStatusListCall(_callback);

    }

    /**
     * 
     * Retrieve list of fulfillment statuses
     * @return OrderFulfillmentStatusList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderFulfillmentStatusList200Response orderFulfillmentStatusList() throws ApiException {
        ApiResponse<OrderFulfillmentStatusList200Response> localVarResp = orderFulfillmentStatusListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve list of fulfillment statuses
     * @return ApiResponse&lt;OrderFulfillmentStatusList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderFulfillmentStatusList200Response> orderFulfillmentStatusListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = orderFulfillmentStatusListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrderFulfillmentStatusList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve list of fulfillment statuses
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderFulfillmentStatusListAsync(final ApiCallback<OrderFulfillmentStatusList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderFulfillmentStatusListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrderFulfillmentStatusList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderInfo
     * @param orderId Retrieves order’s info specified by order id (optional)
     * @param id Retrieves order info specified by id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Defines store id where the order should be found (optional)
     * @param enableCache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderInfoCall(String orderId, String id, String params, String responseFields, String exclude, String storeId, Boolean enableCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_id", orderId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (enableCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable_cache", enableCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderInfoValidateBeforeCall(String orderId, String id, String params, String responseFields, String exclude, String storeId, Boolean enableCache, final ApiCallback _callback) throws ApiException {
        return orderInfoCall(orderId, id, params, responseFields, exclude, storeId, enableCache, _callback);

    }

    /**
     * 
     * Info about a specific order by ID
     * @param orderId Retrieves order’s info specified by order id (optional)
     * @param id Retrieves order info specified by id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Defines store id where the order should be found (optional)
     * @param enableCache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @return OrderInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderInfo200Response orderInfo(String orderId, String id, String params, String responseFields, String exclude, String storeId, Boolean enableCache) throws ApiException {
        ApiResponse<OrderInfo200Response> localVarResp = orderInfoWithHttpInfo(orderId, id, params, responseFields, exclude, storeId, enableCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Info about a specific order by ID
     * @param orderId Retrieves order’s info specified by order id (optional)
     * @param id Retrieves order info specified by id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Defines store id where the order should be found (optional)
     * @param enableCache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @return ApiResponse&lt;OrderInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderInfo200Response> orderInfoWithHttpInfo(String orderId, String id, String params, String responseFields, String exclude, String storeId, Boolean enableCache) throws ApiException {
        okhttp3.Call localVarCall = orderInfoValidateBeforeCall(orderId, id, params, responseFields, exclude, storeId, enableCache, null);
        Type localVarReturnType = new TypeToken<OrderInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Info about a specific order by ID
     * @param orderId Retrieves order’s info specified by order id (optional)
     * @param id Retrieves order info specified by id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Defines store id where the order should be found (optional)
     * @param enableCache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderInfoAsync(String orderId, String id, String params, String responseFields, String exclude, String storeId, Boolean enableCache, final ApiCallback<OrderInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderInfoValidateBeforeCall(orderId, id, params, responseFields, exclude, storeId, enableCache, _callback);
        Type localVarReturnType = new TypeToken<OrderInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderList
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param phone Filter orders by customer&#39;s phone number (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param sortBy Set field to sort by (optional, default to order_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Store Id (optional)
     * @param ids Retrieves orders specified by ids (optional)
     * @param orderIds Retrieves orders specified by order ids (optional)
     * @param ebayOrderStatus Retrieves orders specified by order status (optional)
     * @param basketId Retrieves order’s info specified by basket id. (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param skipOrderIds Skipped orders by ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param isDeleted Filter deleted orders (optional)
     * @param shippingCountryIso3 Retrieve entities according to shipping country (optional)
     * @param enableCache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @param currencyId Currency Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderListCall(String customerId, String customerEmail, String phone, String orderStatus, List<String> orderStatusIds, Integer start, Integer count, String pageCursor, String sortBy, String sortDirection, String params, String responseFields, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String basketId, String financialStatus, String fulfillmentStatus, String shippingMethod, String skipOrderIds, Integer sinceId, Boolean isDeleted, String shippingCountryIso3, Boolean enableCache, String deliveryMethod, String shipNodeType, String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (customerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_email", customerEmail));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_status", orderStatus));
        }

        if (orderStatusIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "order_status_ids", orderStatusIds));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (orderIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_ids", orderIds));
        }

        if (ebayOrderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_order_status", ebayOrderStatus));
        }

        if (basketId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("basket_id", basketId));
        }

        if (financialStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("financial_status", financialStatus));
        }

        if (fulfillmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillment_status", fulfillmentStatus));
        }

        if (shippingMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipping_method", shippingMethod));
        }

        if (skipOrderIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_order_ids", skipOrderIds));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (isDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_deleted", isDeleted));
        }

        if (shippingCountryIso3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipping_country_iso3", shippingCountryIso3));
        }

        if (enableCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enable_cache", enableCache));
        }

        if (deliveryMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delivery_method", deliveryMethod));
        }

        if (shipNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_node_type", shipNodeType));
        }

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_id", currencyId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderListValidateBeforeCall(String customerId, String customerEmail, String phone, String orderStatus, List<String> orderStatusIds, Integer start, Integer count, String pageCursor, String sortBy, String sortDirection, String params, String responseFields, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String basketId, String financialStatus, String fulfillmentStatus, String shippingMethod, String skipOrderIds, Integer sinceId, Boolean isDeleted, String shippingCountryIso3, Boolean enableCache, String deliveryMethod, String shipNodeType, String currencyId, final ApiCallback _callback) throws ApiException {
        return orderListCall(customerId, customerEmail, phone, orderStatus, orderStatusIds, start, count, pageCursor, sortBy, sortDirection, params, responseFields, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, basketId, financialStatus, fulfillmentStatus, shippingMethod, skipOrderIds, sinceId, isDeleted, shippingCountryIso3, enableCache, deliveryMethod, shipNodeType, currencyId, _callback);

    }

    /**
     * 
     * Get list of orders from store.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param phone Filter orders by customer&#39;s phone number (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param sortBy Set field to sort by (optional, default to order_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Store Id (optional)
     * @param ids Retrieves orders specified by ids (optional)
     * @param orderIds Retrieves orders specified by order ids (optional)
     * @param ebayOrderStatus Retrieves orders specified by order status (optional)
     * @param basketId Retrieves order’s info specified by basket id. (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param skipOrderIds Skipped orders by ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param isDeleted Filter deleted orders (optional)
     * @param shippingCountryIso3 Retrieve entities according to shipping country (optional)
     * @param enableCache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @param currencyId Currency Id (optional)
     * @return ModelResponseOrderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseOrderList orderList(String customerId, String customerEmail, String phone, String orderStatus, List<String> orderStatusIds, Integer start, Integer count, String pageCursor, String sortBy, String sortDirection, String params, String responseFields, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String basketId, String financialStatus, String fulfillmentStatus, String shippingMethod, String skipOrderIds, Integer sinceId, Boolean isDeleted, String shippingCountryIso3, Boolean enableCache, String deliveryMethod, String shipNodeType, String currencyId) throws ApiException {
        ApiResponse<ModelResponseOrderList> localVarResp = orderListWithHttpInfo(customerId, customerEmail, phone, orderStatus, orderStatusIds, start, count, pageCursor, sortBy, sortDirection, params, responseFields, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, basketId, financialStatus, fulfillmentStatus, shippingMethod, skipOrderIds, sinceId, isDeleted, shippingCountryIso3, enableCache, deliveryMethod, shipNodeType, currencyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of orders from store.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param phone Filter orders by customer&#39;s phone number (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param sortBy Set field to sort by (optional, default to order_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Store Id (optional)
     * @param ids Retrieves orders specified by ids (optional)
     * @param orderIds Retrieves orders specified by order ids (optional)
     * @param ebayOrderStatus Retrieves orders specified by order status (optional)
     * @param basketId Retrieves order’s info specified by basket id. (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param skipOrderIds Skipped orders by ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param isDeleted Filter deleted orders (optional)
     * @param shippingCountryIso3 Retrieve entities according to shipping country (optional)
     * @param enableCache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @param currencyId Currency Id (optional)
     * @return ApiResponse&lt;ModelResponseOrderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseOrderList> orderListWithHttpInfo(String customerId, String customerEmail, String phone, String orderStatus, List<String> orderStatusIds, Integer start, Integer count, String pageCursor, String sortBy, String sortDirection, String params, String responseFields, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String basketId, String financialStatus, String fulfillmentStatus, String shippingMethod, String skipOrderIds, Integer sinceId, Boolean isDeleted, String shippingCountryIso3, Boolean enableCache, String deliveryMethod, String shipNodeType, String currencyId) throws ApiException {
        okhttp3.Call localVarCall = orderListValidateBeforeCall(customerId, customerEmail, phone, orderStatus, orderStatusIds, start, count, pageCursor, sortBy, sortDirection, params, responseFields, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, basketId, financialStatus, fulfillmentStatus, shippingMethod, skipOrderIds, sinceId, isDeleted, shippingCountryIso3, enableCache, deliveryMethod, shipNodeType, currencyId, null);
        Type localVarReturnType = new TypeToken<ModelResponseOrderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of orders from store.
     * @param customerId Retrieves orders specified by customer id (optional)
     * @param customerEmail Retrieves orders specified by customer email (optional)
     * @param phone Filter orders by customer&#39;s phone number (optional)
     * @param orderStatus Retrieves orders specified by order status (optional)
     * @param orderStatusIds Retrieves orders specified by order statuses (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param sortBy Set field to sort by (optional, default to order_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to order_id,customer,totals,address,items,bundles,status)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param storeId Store Id (optional)
     * @param ids Retrieves orders specified by ids (optional)
     * @param orderIds Retrieves orders specified by order ids (optional)
     * @param ebayOrderStatus Retrieves orders specified by order status (optional)
     * @param basketId Retrieves order’s info specified by basket id. (optional)
     * @param financialStatus Retrieves orders specified by financial status (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param shippingMethod Retrieve entities according to shipping method (optional)
     * @param skipOrderIds Skipped orders by ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param isDeleted Filter deleted orders (optional)
     * @param shippingCountryIso3 Retrieve entities according to shipping country (optional)
     * @param enableCache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
     * @param deliveryMethod Retrieves order with delivery method (optional)
     * @param shipNodeType Retrieves order with ship node type (optional)
     * @param currencyId Currency Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderListAsync(String customerId, String customerEmail, String phone, String orderStatus, List<String> orderStatusIds, Integer start, Integer count, String pageCursor, String sortBy, String sortDirection, String params, String responseFields, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String basketId, String financialStatus, String fulfillmentStatus, String shippingMethod, String skipOrderIds, Integer sinceId, Boolean isDeleted, String shippingCountryIso3, Boolean enableCache, String deliveryMethod, String shipNodeType, String currencyId, final ApiCallback<ModelResponseOrderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderListValidateBeforeCall(customerId, customerEmail, phone, orderStatus, orderStatusIds, start, count, pageCursor, sortBy, sortDirection, params, responseFields, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, basketId, financialStatus, fulfillmentStatus, shippingMethod, skipOrderIds, sinceId, isDeleted, shippingCountryIso3, enableCache, deliveryMethod, shipNodeType, currencyId, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseOrderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderPreestimateShippingList
     * @param orderPreestimateShippingList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderPreestimateShippingListCall(OrderPreestimateShippingList orderPreestimateShippingList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderPreestimateShippingList;

        // create path and map variables
        String localVarPath = "/order.preestimate_shipping.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderPreestimateShippingListValidateBeforeCall(OrderPreestimateShippingList orderPreestimateShippingList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderPreestimateShippingList' is set
        if (orderPreestimateShippingList == null) {
            throw new ApiException("Missing the required parameter 'orderPreestimateShippingList' when calling orderPreestimateShippingList(Async)");
        }

        return orderPreestimateShippingListCall(orderPreestimateShippingList, _callback);

    }

    /**
     * 
     * Retrieve list of order preestimated shipping methods
     * @param orderPreestimateShippingList  (required)
     * @return ModelResponseOrderPreestimateShippingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseOrderPreestimateShippingList orderPreestimateShippingList(OrderPreestimateShippingList orderPreestimateShippingList) throws ApiException {
        ApiResponse<ModelResponseOrderPreestimateShippingList> localVarResp = orderPreestimateShippingListWithHttpInfo(orderPreestimateShippingList);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve list of order preestimated shipping methods
     * @param orderPreestimateShippingList  (required)
     * @return ApiResponse&lt;ModelResponseOrderPreestimateShippingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseOrderPreestimateShippingList> orderPreestimateShippingListWithHttpInfo(OrderPreestimateShippingList orderPreestimateShippingList) throws ApiException {
        okhttp3.Call localVarCall = orderPreestimateShippingListValidateBeforeCall(orderPreestimateShippingList, null);
        Type localVarReturnType = new TypeToken<ModelResponseOrderPreestimateShippingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve list of order preestimated shipping methods
     * @param orderPreestimateShippingList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderPreestimateShippingListAsync(OrderPreestimateShippingList orderPreestimateShippingList, final ApiCallback<ModelResponseOrderPreestimateShippingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderPreestimateShippingListValidateBeforeCall(orderPreestimateShippingList, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseOrderPreestimateShippingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderRefundAdd
     * @param orderRefundAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderRefundAddCall(OrderRefundAdd orderRefundAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderRefundAdd;

        // create path and map variables
        String localVarPath = "/order.refund.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderRefundAddValidateBeforeCall(OrderRefundAdd orderRefundAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderRefundAdd' is set
        if (orderRefundAdd == null) {
            throw new ApiException("Missing the required parameter 'orderRefundAdd' when calling orderRefundAdd(Async)");
        }

        return orderRefundAddCall(orderRefundAdd, _callback);

    }

    /**
     * 
     * Add a refund to the order.
     * @param orderRefundAdd  (required)
     * @return OrderRefundAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderRefundAdd200Response orderRefundAdd(OrderRefundAdd orderRefundAdd) throws ApiException {
        ApiResponse<OrderRefundAdd200Response> localVarResp = orderRefundAddWithHttpInfo(orderRefundAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a refund to the order.
     * @param orderRefundAdd  (required)
     * @return ApiResponse&lt;OrderRefundAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderRefundAdd200Response> orderRefundAddWithHttpInfo(OrderRefundAdd orderRefundAdd) throws ApiException {
        okhttp3.Call localVarCall = orderRefundAddValidateBeforeCall(orderRefundAdd, null);
        Type localVarReturnType = new TypeToken<OrderRefundAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a refund to the order.
     * @param orderRefundAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderRefundAddAsync(OrderRefundAdd orderRefundAdd, final ApiCallback<OrderRefundAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderRefundAddValidateBeforeCall(orderRefundAdd, _callback);
        Type localVarReturnType = new TypeToken<OrderRefundAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderShipmentAdd
     * @param orderShipmentAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentAddCall(OrderShipmentAdd orderShipmentAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderShipmentAdd;

        // create path and map variables
        String localVarPath = "/order.shipment.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderShipmentAddValidateBeforeCall(OrderShipmentAdd orderShipmentAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderShipmentAdd' is set
        if (orderShipmentAdd == null) {
            throw new ApiException("Missing the required parameter 'orderShipmentAdd' when calling orderShipmentAdd(Async)");
        }

        return orderShipmentAddCall(orderShipmentAdd, _callback);

    }

    /**
     * 
     * Add a shipment to the order.
     * @param orderShipmentAdd  (required)
     * @return OrderShipmentAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderShipmentAdd200Response orderShipmentAdd(OrderShipmentAdd orderShipmentAdd) throws ApiException {
        ApiResponse<OrderShipmentAdd200Response> localVarResp = orderShipmentAddWithHttpInfo(orderShipmentAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a shipment to the order.
     * @param orderShipmentAdd  (required)
     * @return ApiResponse&lt;OrderShipmentAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderShipmentAdd200Response> orderShipmentAddWithHttpInfo(OrderShipmentAdd orderShipmentAdd) throws ApiException {
        okhttp3.Call localVarCall = orderShipmentAddValidateBeforeCall(orderShipmentAdd, null);
        Type localVarReturnType = new TypeToken<OrderShipmentAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a shipment to the order.
     * @param orderShipmentAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentAddAsync(OrderShipmentAdd orderShipmentAdd, final ApiCallback<OrderShipmentAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderShipmentAddValidateBeforeCall(orderShipmentAdd, _callback);
        Type localVarReturnType = new TypeToken<OrderShipmentAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderShipmentDelete
     * @param shipmentId Shipment id indicates the number of delivery (required)
     * @param orderId Defines the order for which the shipment will be deleted (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentDeleteCall(String shipmentId, String orderId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.shipment.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipment_id", shipmentId));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_id", orderId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderShipmentDeleteValidateBeforeCall(String shipmentId, String orderId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling orderShipmentDelete(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderShipmentDelete(Async)");
        }

        return orderShipmentDeleteCall(shipmentId, orderId, storeId, _callback);

    }

    /**
     * 
     * Delete order&#39;s shipment.
     * @param shipmentId Shipment id indicates the number of delivery (required)
     * @param orderId Defines the order for which the shipment will be deleted (required)
     * @param storeId Store Id (optional)
     * @return OrderShipmentDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderShipmentDelete200Response orderShipmentDelete(String shipmentId, String orderId, String storeId) throws ApiException {
        ApiResponse<OrderShipmentDelete200Response> localVarResp = orderShipmentDeleteWithHttpInfo(shipmentId, orderId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete order&#39;s shipment.
     * @param shipmentId Shipment id indicates the number of delivery (required)
     * @param orderId Defines the order for which the shipment will be deleted (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;OrderShipmentDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderShipmentDelete200Response> orderShipmentDeleteWithHttpInfo(String shipmentId, String orderId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = orderShipmentDeleteValidateBeforeCall(shipmentId, orderId, storeId, null);
        Type localVarReturnType = new TypeToken<OrderShipmentDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete order&#39;s shipment.
     * @param shipmentId Shipment id indicates the number of delivery (required)
     * @param orderId Defines the order for which the shipment will be deleted (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentDeleteAsync(String shipmentId, String orderId, String storeId, final ApiCallback<OrderShipmentDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderShipmentDeleteValidateBeforeCall(shipmentId, orderId, storeId, _callback);
        Type localVarReturnType = new TypeToken<OrderShipmentDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderShipmentInfo
     * @param id Entity id (required)
     * @param orderId Defines the order id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentInfoCall(String id, String orderId, Integer start, String params, String responseFields, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.shipment.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_id", orderId));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderShipmentInfoValidateBeforeCall(String id, String orderId, Integer start, String params, String responseFields, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling orderShipmentInfo(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderShipmentInfo(Async)");
        }

        return orderShipmentInfoCall(id, orderId, start, params, responseFields, exclude, storeId, _callback);

    }

    /**
     * 
     * Get information of shipment.
     * @param id Entity id (required)
     * @param orderId Defines the order id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @return ModelResponseOrderShipmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseOrderShipmentList orderShipmentInfo(String id, String orderId, Integer start, String params, String responseFields, String exclude, String storeId) throws ApiException {
        ApiResponse<ModelResponseOrderShipmentList> localVarResp = orderShipmentInfoWithHttpInfo(id, orderId, start, params, responseFields, exclude, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information of shipment.
     * @param id Entity id (required)
     * @param orderId Defines the order id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;ModelResponseOrderShipmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseOrderShipmentList> orderShipmentInfoWithHttpInfo(String id, String orderId, Integer start, String params, String responseFields, String exclude, String storeId) throws ApiException {
        okhttp3.Call localVarCall = orderShipmentInfoValidateBeforeCall(id, orderId, start, params, responseFields, exclude, storeId, null);
        Type localVarReturnType = new TypeToken<ModelResponseOrderShipmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information of shipment.
     * @param id Entity id (required)
     * @param orderId Defines the order id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentInfoAsync(String id, String orderId, Integer start, String params, String responseFields, String exclude, String storeId, final ApiCallback<ModelResponseOrderShipmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderShipmentInfoValidateBeforeCall(id, orderId, start, params, responseFields, exclude, storeId, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseOrderShipmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderShipmentList
     * @param orderId Retrieves shipments specified by order id (required)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentListCall(String orderId, String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.shipment.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_id", orderId));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderShipmentListValidateBeforeCall(String orderId, String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderShipmentList(Async)");
        }

        return orderShipmentListCall(orderId, pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, _callback);

    }

    /**
     * 
     * Get list of shipments by orders.
     * @param orderId Retrieves shipments specified by order id (required)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Store Id (optional)
     * @return ModelResponseOrderShipmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseOrderShipmentList orderShipmentList(String orderId, String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId) throws ApiException {
        ApiResponse<ModelResponseOrderShipmentList> localVarResp = orderShipmentListWithHttpInfo(orderId, pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of shipments by orders.
     * @param orderId Retrieves shipments specified by order id (required)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;ModelResponseOrderShipmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseOrderShipmentList> orderShipmentListWithHttpInfo(String orderId, String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId) throws ApiException {
        okhttp3.Call localVarCall = orderShipmentListValidateBeforeCall(orderId, pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, null);
        Type localVarReturnType = new TypeToken<ModelResponseOrderShipmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of shipments by orders.
     * @param orderId Retrieves shipments specified by order id (required)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,items,tracking_numbers)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentListAsync(String orderId, String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, final ApiCallback<ModelResponseOrderShipmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderShipmentListValidateBeforeCall(orderId, pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseOrderShipmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderShipmentTrackingAdd
     * @param orderShipmentTrackingAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentTrackingAddCall(OrderShipmentTrackingAdd orderShipmentTrackingAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderShipmentTrackingAdd;

        // create path and map variables
        String localVarPath = "/order.shipment.tracking.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderShipmentTrackingAddValidateBeforeCall(OrderShipmentTrackingAdd orderShipmentTrackingAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderShipmentTrackingAdd' is set
        if (orderShipmentTrackingAdd == null) {
            throw new ApiException("Missing the required parameter 'orderShipmentTrackingAdd' when calling orderShipmentTrackingAdd(Async)");
        }

        return orderShipmentTrackingAddCall(orderShipmentTrackingAdd, _callback);

    }

    /**
     * 
     * Add order shipment&#39;s tracking info.
     * @param orderShipmentTrackingAdd  (required)
     * @return OrderShipmentTrackingAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderShipmentTrackingAdd200Response orderShipmentTrackingAdd(OrderShipmentTrackingAdd orderShipmentTrackingAdd) throws ApiException {
        ApiResponse<OrderShipmentTrackingAdd200Response> localVarResp = orderShipmentTrackingAddWithHttpInfo(orderShipmentTrackingAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add order shipment&#39;s tracking info.
     * @param orderShipmentTrackingAdd  (required)
     * @return ApiResponse&lt;OrderShipmentTrackingAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderShipmentTrackingAdd200Response> orderShipmentTrackingAddWithHttpInfo(OrderShipmentTrackingAdd orderShipmentTrackingAdd) throws ApiException {
        okhttp3.Call localVarCall = orderShipmentTrackingAddValidateBeforeCall(orderShipmentTrackingAdd, null);
        Type localVarReturnType = new TypeToken<OrderShipmentTrackingAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add order shipment&#39;s tracking info.
     * @param orderShipmentTrackingAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentTrackingAddAsync(OrderShipmentTrackingAdd orderShipmentTrackingAdd, final ApiCallback<OrderShipmentTrackingAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderShipmentTrackingAddValidateBeforeCall(orderShipmentTrackingAdd, _callback);
        Type localVarReturnType = new TypeToken<OrderShipmentTrackingAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderShipmentUpdate
     * @param orderShipmentUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentUpdateCall(OrderShipmentUpdate orderShipmentUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orderShipmentUpdate;

        // create path and map variables
        String localVarPath = "/order.shipment.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderShipmentUpdateValidateBeforeCall(OrderShipmentUpdate orderShipmentUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderShipmentUpdate' is set
        if (orderShipmentUpdate == null) {
            throw new ApiException("Missing the required parameter 'orderShipmentUpdate' when calling orderShipmentUpdate(Async)");
        }

        return orderShipmentUpdateCall(orderShipmentUpdate, _callback);

    }

    /**
     * 
     * Update order&#39;s shipment information.
     * @param orderShipmentUpdate  (required)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response orderShipmentUpdate(OrderShipmentUpdate orderShipmentUpdate) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = orderShipmentUpdateWithHttpInfo(orderShipmentUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update order&#39;s shipment information.
     * @param orderShipmentUpdate  (required)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> orderShipmentUpdateWithHttpInfo(OrderShipmentUpdate orderShipmentUpdate) throws ApiException {
        okhttp3.Call localVarCall = orderShipmentUpdateValidateBeforeCall(orderShipmentUpdate, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update order&#39;s shipment information.
     * @param orderShipmentUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderShipmentUpdateAsync(OrderShipmentUpdate orderShipmentUpdate, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderShipmentUpdateValidateBeforeCall(orderShipmentUpdate, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderStatusList
     * @param storeId Store Id (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderStatusListCall(String storeId, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.status.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderStatusListValidateBeforeCall(String storeId, String responseFields, final ApiCallback _callback) throws ApiException {
        return orderStatusListCall(storeId, responseFields, _callback);

    }

    /**
     * 
     * Retrieve list of statuses
     * @param storeId Store Id (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return OrderStatusList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OrderStatusList200Response orderStatusList(String storeId, String responseFields) throws ApiException {
        ApiResponse<OrderStatusList200Response> localVarResp = orderStatusListWithHttpInfo(storeId, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve list of statuses
     * @param storeId Store Id (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse&lt;OrderStatusList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderStatusList200Response> orderStatusListWithHttpInfo(String storeId, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = orderStatusListValidateBeforeCall(storeId, responseFields, null);
        Type localVarReturnType = new TypeToken<OrderStatusList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve list of statuses
     * @param storeId Store Id (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderStatusListAsync(String storeId, String responseFields, final ApiCallback<OrderStatusList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderStatusListValidateBeforeCall(storeId, responseFields, _callback);
        Type localVarReturnType = new TypeToken<OrderStatusList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderTransactionList
     * @param orderIds Retrieves order transactions specified by order ids (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,amount,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderTransactionListCall(String orderIds, Integer count, String storeId, String params, String responseFields, String exclude, String pageCursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.transaction.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (orderIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_ids", orderIds));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderTransactionListValidateBeforeCall(String orderIds, Integer count, String storeId, String params, String responseFields, String exclude, String pageCursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderIds' is set
        if (orderIds == null) {
            throw new ApiException("Missing the required parameter 'orderIds' when calling orderTransactionList(Async)");
        }

        return orderTransactionListCall(orderIds, count, storeId, params, responseFields, exclude, pageCursor, _callback);

    }

    /**
     * 
     * Retrieve list of order transaction
     * @param orderIds Retrieves order transactions specified by order ids (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,amount,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @return ModelResponseOrderTransactionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseOrderTransactionList orderTransactionList(String orderIds, Integer count, String storeId, String params, String responseFields, String exclude, String pageCursor) throws ApiException {
        ApiResponse<ModelResponseOrderTransactionList> localVarResp = orderTransactionListWithHttpInfo(orderIds, count, storeId, params, responseFields, exclude, pageCursor);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve list of order transaction
     * @param orderIds Retrieves order transactions specified by order ids (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,amount,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @return ApiResponse&lt;ModelResponseOrderTransactionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseOrderTransactionList> orderTransactionListWithHttpInfo(String orderIds, Integer count, String storeId, String params, String responseFields, String exclude, String pageCursor) throws ApiException {
        okhttp3.Call localVarCall = orderTransactionListValidateBeforeCall(orderIds, count, storeId, params, responseFields, exclude, pageCursor, null);
        Type localVarReturnType = new TypeToken<ModelResponseOrderTransactionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve list of order transaction
     * @param orderIds Retrieves order transactions specified by order ids (required)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,order_id,amount,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderTransactionListAsync(String orderIds, Integer count, String storeId, String params, String responseFields, String exclude, String pageCursor, final ApiCallback<ModelResponseOrderTransactionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderTransactionListValidateBeforeCall(orderIds, count, storeId, params, responseFields, exclude, pageCursor, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseOrderTransactionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orderUpdate
     * @param orderId Defines the orders specified by order id (required)
     * @param storeId Defines store id where the order should be found (optional)
     * @param orderStatus Defines new order&#39;s status (optional)
     * @param comment Specifies order comment (optional)
     * @param adminComment Specifies admin&#39;s order comment (optional)
     * @param adminPrivateComment Specifies private admin&#39;s order comment (optional)
     * @param dateModified Specifies order&#39;s  modification date (optional)
     * @param dateFinished Specifies order&#39;s  finished date (optional)
     * @param financialStatus Update order financial status to specified (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param orderPaymentMethod Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param sendNotifications Send notifications to customer after order was created (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderUpdateCall(String orderId, String storeId, String orderStatus, String comment, String adminComment, String adminPrivateComment, String dateModified, String dateFinished, String financialStatus, String fulfillmentStatus, String orderPaymentMethod, Boolean sendNotifications, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/order.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_id", orderId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (orderStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_status", orderStatus));
        }

        if (comment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment", comment));
        }

        if (adminComment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("admin_comment", adminComment));
        }

        if (adminPrivateComment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("admin_private_comment", adminPrivateComment));
        }

        if (dateModified != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_modified", dateModified));
        }

        if (dateFinished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_finished", dateFinished));
        }

        if (financialStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("financial_status", financialStatus));
        }

        if (fulfillmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fulfillment_status", fulfillmentStatus));
        }

        if (orderPaymentMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_payment_method", orderPaymentMethod));
        }

        if (sendNotifications != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("send_notifications", sendNotifications));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderUpdateValidateBeforeCall(String orderId, String storeId, String orderStatus, String comment, String adminComment, String adminPrivateComment, String dateModified, String dateFinished, String financialStatus, String fulfillmentStatus, String orderPaymentMethod, Boolean sendNotifications, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling orderUpdate(Async)");
        }

        return orderUpdateCall(orderId, storeId, orderStatus, comment, adminComment, adminPrivateComment, dateModified, dateFinished, financialStatus, fulfillmentStatus, orderPaymentMethod, sendNotifications, _callback);

    }

    /**
     * 
     * Update existing order.
     * @param orderId Defines the orders specified by order id (required)
     * @param storeId Defines store id where the order should be found (optional)
     * @param orderStatus Defines new order&#39;s status (optional)
     * @param comment Specifies order comment (optional)
     * @param adminComment Specifies admin&#39;s order comment (optional)
     * @param adminPrivateComment Specifies private admin&#39;s order comment (optional)
     * @param dateModified Specifies order&#39;s  modification date (optional)
     * @param dateFinished Specifies order&#39;s  finished date (optional)
     * @param financialStatus Update order financial status to specified (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param orderPaymentMethod Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param sendNotifications Send notifications to customer after order was created (optional, default to false)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response orderUpdate(String orderId, String storeId, String orderStatus, String comment, String adminComment, String adminPrivateComment, String dateModified, String dateFinished, String financialStatus, String fulfillmentStatus, String orderPaymentMethod, Boolean sendNotifications) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = orderUpdateWithHttpInfo(orderId, storeId, orderStatus, comment, adminComment, adminPrivateComment, dateModified, dateFinished, financialStatus, fulfillmentStatus, orderPaymentMethod, sendNotifications);
        return localVarResp.getData();
    }

    /**
     * 
     * Update existing order.
     * @param orderId Defines the orders specified by order id (required)
     * @param storeId Defines store id where the order should be found (optional)
     * @param orderStatus Defines new order&#39;s status (optional)
     * @param comment Specifies order comment (optional)
     * @param adminComment Specifies admin&#39;s order comment (optional)
     * @param adminPrivateComment Specifies private admin&#39;s order comment (optional)
     * @param dateModified Specifies order&#39;s  modification date (optional)
     * @param dateFinished Specifies order&#39;s  finished date (optional)
     * @param financialStatus Update order financial status to specified (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param orderPaymentMethod Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param sendNotifications Send notifications to customer after order was created (optional, default to false)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> orderUpdateWithHttpInfo(String orderId, String storeId, String orderStatus, String comment, String adminComment, String adminPrivateComment, String dateModified, String dateFinished, String financialStatus, String fulfillmentStatus, String orderPaymentMethod, Boolean sendNotifications) throws ApiException {
        okhttp3.Call localVarCall = orderUpdateValidateBeforeCall(orderId, storeId, orderStatus, comment, adminComment, adminPrivateComment, dateModified, dateFinished, financialStatus, fulfillmentStatus, orderPaymentMethod, sendNotifications, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update existing order.
     * @param orderId Defines the orders specified by order id (required)
     * @param storeId Defines store id where the order should be found (optional)
     * @param orderStatus Defines new order&#39;s status (optional)
     * @param comment Specifies order comment (optional)
     * @param adminComment Specifies admin&#39;s order comment (optional)
     * @param adminPrivateComment Specifies private admin&#39;s order comment (optional)
     * @param dateModified Specifies order&#39;s  modification date (optional)
     * @param dateFinished Specifies order&#39;s  finished date (optional)
     * @param financialStatus Update order financial status to specified (optional)
     * @param fulfillmentStatus Create order with fulfillment status (optional)
     * @param orderPaymentMethod Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
     * @param sendNotifications Send notifications to customer after order was created (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orderUpdateAsync(String orderId, String storeId, String orderStatus, String comment, String adminComment, String adminPrivateComment, String dateModified, String dateFinished, String financialStatus, String fulfillmentStatus, String orderPaymentMethod, Boolean sendNotifications, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = orderUpdateValidateBeforeCall(orderId, storeId, orderStatus, comment, adminComment, adminPrivateComment, dateModified, dateFinished, financialStatus, fulfillmentStatus, orderPaymentMethod, sendNotifications, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
