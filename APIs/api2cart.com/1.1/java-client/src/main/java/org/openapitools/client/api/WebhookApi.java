/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttributeAdd200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.ProductImageUpdate200Response;
import org.openapitools.client.model.WebhookCount200Response;
import org.openapitools.client.model.WebhookEvents200Response;
import org.openapitools.client.model.WebhookList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for webhookCount
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. order or product) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookCountCall(String entity, String action, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookCountValidateBeforeCall(String entity, String action, Boolean active, final ApiCallback _callback) throws ApiException {
        return webhookCountCall(entity, action, active, _callback);

    }

    /**
     * 
     * Count registered webhooks on the store.
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. order or product) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @return WebhookCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WebhookCount200Response webhookCount(String entity, String action, Boolean active) throws ApiException {
        ApiResponse<WebhookCount200Response> localVarResp = webhookCountWithHttpInfo(entity, action, active);
        return localVarResp.getData();
    }

    /**
     * 
     * Count registered webhooks on the store.
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. order or product) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @return ApiResponse&lt;WebhookCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookCount200Response> webhookCountWithHttpInfo(String entity, String action, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = webhookCountValidateBeforeCall(entity, action, active, null);
        Type localVarReturnType = new TypeToken<WebhookCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count registered webhooks on the store.
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. order or product) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookCountAsync(String entity, String action, Boolean active, final ApiCallback<WebhookCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookCountValidateBeforeCall(entity, action, active, _callback);
        Type localVarReturnType = new TypeToken<WebhookCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookCreate
     * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) (required)
     * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update) (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional, default to force_all)
     * @param active Webhook status (optional, default to true)
     * @param storeId Defines store id where the webhook should be assigned (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookCreateCall(String entity, String action, String paramCallback, String label, String fields, Boolean active, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook.create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookCreateValidateBeforeCall(String entity, String action, String paramCallback, String label, String fields, Boolean active, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling webhookCreate(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling webhookCreate(Async)");
        }

        return webhookCreateCall(entity, action, paramCallback, label, fields, active, storeId, _callback);

    }

    /**
     * 
     * Create webhook on the store and subscribe to it.
     * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) (required)
     * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update) (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional, default to force_all)
     * @param active Webhook status (optional, default to true)
     * @param storeId Defines store id where the webhook should be assigned (optional)
     * @return AttributeAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeAdd200Response webhookCreate(String entity, String action, String paramCallback, String label, String fields, Boolean active, String storeId) throws ApiException {
        ApiResponse<AttributeAdd200Response> localVarResp = webhookCreateWithHttpInfo(entity, action, paramCallback, label, fields, active, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Create webhook on the store and subscribe to it.
     * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) (required)
     * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update) (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional, default to force_all)
     * @param active Webhook status (optional, default to true)
     * @param storeId Defines store id where the webhook should be assigned (optional)
     * @return ApiResponse&lt;AttributeAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeAdd200Response> webhookCreateWithHttpInfo(String entity, String action, String paramCallback, String label, String fields, Boolean active, String storeId) throws ApiException {
        okhttp3.Call localVarCall = webhookCreateValidateBeforeCall(entity, action, paramCallback, label, fields, active, storeId, null);
        Type localVarReturnType = new TypeToken<AttributeAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create webhook on the store and subscribe to it.
     * @param entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) (required)
     * @param action Specify what action (event) will trigger the webhook (e.g add, delete, or update) (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional, default to force_all)
     * @param active Webhook status (optional, default to true)
     * @param storeId Defines store id where the webhook should be assigned (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookCreateAsync(String entity, String action, String paramCallback, String label, String fields, Boolean active, String storeId, final ApiCallback<AttributeAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookCreateValidateBeforeCall(entity, action, paramCallback, label, fields, active, storeId, _callback);
        Type localVarReturnType = new TypeToken<AttributeAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookDelete
     * @param id Webhook id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webhookDelete(Async)");
        }

        return webhookDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete registered webhook on the store.
     * @param id Webhook id (required)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response webhookDelete(String id) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = webhookDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete registered webhook on the store.
     * @param id Webhook id (required)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> webhookDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = webhookDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete registered webhook on the store.
     * @param id Webhook id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookDeleteAsync(String id, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookEvents
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEventsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook.events.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookEventsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return webhookEventsCall(_callback);

    }

    /**
     * 
     * List all Webhooks that are available on this store.
     * @return WebhookEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WebhookEvents200Response webhookEvents() throws ApiException {
        ApiResponse<WebhookEvents200Response> localVarResp = webhookEventsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * List all Webhooks that are available on this store.
     * @return ApiResponse&lt;WebhookEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEvents200Response> webhookEventsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = webhookEventsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all Webhooks that are available on this store.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEventsAsync(final ApiCallback<WebhookEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookEventsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookList
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,entity,action,callback)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param ids List of сomma-separated webhook ids (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookListCall(String params, Integer start, Integer count, String entity, String action, Boolean active, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookListValidateBeforeCall(String params, Integer start, Integer count, String entity, String action, Boolean active, String ids, final ApiCallback _callback) throws ApiException {
        return webhookListCall(params, start, count, entity, action, active, ids, _callback);

    }

    /**
     * 
     * List registered webhook on the store.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,entity,action,callback)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return WebhookList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WebhookList200Response webhookList(String params, Integer start, Integer count, String entity, String action, Boolean active, String ids) throws ApiException {
        ApiResponse<WebhookList200Response> localVarResp = webhookListWithHttpInfo(params, start, count, entity, action, active, ids);
        return localVarResp.getData();
    }

    /**
     * 
     * List registered webhook on the store.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,entity,action,callback)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return ApiResponse&lt;WebhookList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookList200Response> webhookListWithHttpInfo(String params, Integer start, Integer count, String entity, String action, Boolean active, String ids) throws ApiException {
        okhttp3.Call localVarCall = webhookListValidateBeforeCall(params, start, count, entity, action, active, ids, null);
        Type localVarReturnType = new TypeToken<WebhookList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List registered webhook on the store.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,entity,action,callback)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param entity The entity you want to filter webhooks by (e.g. order or product) (optional)
     * @param action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
     * @param active The webhook status you want to filter webhooks by (optional)
     * @param ids List of сomma-separated webhook ids (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookListAsync(String params, Integer start, Integer count, String entity, String action, Boolean active, String ids, final ApiCallback<WebhookList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookListValidateBeforeCall(params, start, count, entity, action, active, ids, _callback);
        Type localVarReturnType = new TypeToken<WebhookList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookUpdate
     * @param id Webhook id (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional)
     * @param active Webhook status (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookUpdateCall(String id, String paramCallback, String label, String fields, Boolean active, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhook.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookUpdateValidateBeforeCall(String id, String paramCallback, String label, String fields, Boolean active, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling webhookUpdate(Async)");
        }

        return webhookUpdateCall(id, paramCallback, label, fields, active, _callback);

    }

    /**
     * 
     * Update Webhooks parameters.
     * @param id Webhook id (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional)
     * @param active Webhook status (optional)
     * @return ProductImageUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductImageUpdate200Response webhookUpdate(String id, String paramCallback, String label, String fields, Boolean active) throws ApiException {
        ApiResponse<ProductImageUpdate200Response> localVarResp = webhookUpdateWithHttpInfo(id, paramCallback, label, fields, active);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Webhooks parameters.
     * @param id Webhook id (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional)
     * @param active Webhook status (optional)
     * @return ApiResponse&lt;ProductImageUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductImageUpdate200Response> webhookUpdateWithHttpInfo(String id, String paramCallback, String label, String fields, Boolean active) throws ApiException {
        okhttp3.Call localVarCall = webhookUpdateValidateBeforeCall(id, paramCallback, label, fields, active, null);
        Type localVarReturnType = new TypeToken<ProductImageUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Webhooks parameters.
     * @param id Webhook id (required)
     * @param paramCallback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
     * @param label The name you give to the webhook (optional)
     * @param fields Fields the webhook should send (optional)
     * @param active Webhook status (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookUpdateAsync(String id, String paramCallback, String label, String fields, Boolean active, final ApiCallback<ProductImageUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookUpdateValidateBeforeCall(id, paramCallback, label, fields, active, _callback);
        Type localVarReturnType = new TypeToken<ProductImageUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
