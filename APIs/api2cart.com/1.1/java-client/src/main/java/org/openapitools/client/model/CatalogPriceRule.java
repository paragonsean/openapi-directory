/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.A2CDateTime;
import org.openapitools.client.model.CatalogPriceRuleAction;
import org.openapitools.client.model.CouponCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CatalogPriceRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CatalogPriceRule {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<CatalogPriceRuleAction> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_AVAIL = "avail";
  @SerializedName(SERIALIZED_NAME_AVAIL)
  private Boolean avail;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<CouponCondition> conditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private A2CDateTime createdTime;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_DATE_END = "date_end";
  @SerializedName(SERIALIZED_NAME_DATE_END)
  private A2CDateTime dateEnd;

  public static final String SERIALIZED_NAME_DATE_START = "date_start";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private A2CDateTime dateStart;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHORT_DESCRIPTION = "short_description";
  @SerializedName(SERIALIZED_NAME_SHORT_DESCRIPTION)
  private String shortDescription;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USAGE_COUNT = "usage_count";
  @SerializedName(SERIALIZED_NAME_USAGE_COUNT)
  private BigDecimal usageCount;

  public static final String SERIALIZED_NAME_USES_PER_ORDER_LIMIT = "uses_per_order_limit";
  @SerializedName(SERIALIZED_NAME_USES_PER_ORDER_LIMIT)
  private Integer usesPerOrderLimit;

  public CatalogPriceRule() {
  }

  public CatalogPriceRule actions(List<CatalogPriceRuleAction> actions) {
    this.actions = actions;
    return this;
  }

  public CatalogPriceRule addActionsItem(CatalogPriceRuleAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<CatalogPriceRuleAction> getActions() {
    return actions;
  }

  public void setActions(List<CatalogPriceRuleAction> actions) {
    this.actions = actions;
  }


  public CatalogPriceRule additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public CatalogPriceRule avail(Boolean avail) {
    this.avail = avail;
    return this;
  }

  /**
   * Get avail
   * @return avail
   */
  @javax.annotation.Nullable
  public Boolean getAvail() {
    return avail;
  }

  public void setAvail(Boolean avail) {
    this.avail = avail;
  }


  public CatalogPriceRule conditions(List<CouponCondition> conditions) {
    this.conditions = conditions;
    return this;
  }

  public CatalogPriceRule addConditionsItem(CouponCondition conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<CouponCondition> getConditions() {
    return conditions;
  }

  public void setConditions(List<CouponCondition> conditions) {
    this.conditions = conditions;
  }


  public CatalogPriceRule createdTime(A2CDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public A2CDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(A2CDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public CatalogPriceRule customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public CatalogPriceRule dateEnd(A2CDateTime dateEnd) {
    this.dateEnd = dateEnd;
    return this;
  }

  /**
   * Get dateEnd
   * @return dateEnd
   */
  @javax.annotation.Nullable
  public A2CDateTime getDateEnd() {
    return dateEnd;
  }

  public void setDateEnd(A2CDateTime dateEnd) {
    this.dateEnd = dateEnd;
  }


  public CatalogPriceRule dateStart(A2CDateTime dateStart) {
    this.dateStart = dateStart;
    return this;
  }

  /**
   * Get dateStart
   * @return dateStart
   */
  @javax.annotation.Nullable
  public A2CDateTime getDateStart() {
    return dateStart;
  }

  public void setDateStart(A2CDateTime dateStart) {
    this.dateStart = dateStart;
  }


  public CatalogPriceRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CatalogPriceRule gid(String gid) {
    this.gid = gid;
    return this;
  }

  /**
   * Get gid
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }

  public void setGid(String gid) {
    this.gid = gid;
  }


  public CatalogPriceRule id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CatalogPriceRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CatalogPriceRule shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Get shortDescription
   * @return shortDescription
   */
  @javax.annotation.Nullable
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public CatalogPriceRule type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public CatalogPriceRule usageCount(BigDecimal usageCount) {
    this.usageCount = usageCount;
    return this;
  }

  /**
   * Get usageCount
   * @return usageCount
   */
  @javax.annotation.Nullable
  public BigDecimal getUsageCount() {
    return usageCount;
  }

  public void setUsageCount(BigDecimal usageCount) {
    this.usageCount = usageCount;
  }


  public CatalogPriceRule usesPerOrderLimit(Integer usesPerOrderLimit) {
    this.usesPerOrderLimit = usesPerOrderLimit;
    return this;
  }

  /**
   * Get usesPerOrderLimit
   * @return usesPerOrderLimit
   */
  @javax.annotation.Nullable
  public Integer getUsesPerOrderLimit() {
    return usesPerOrderLimit;
  }

  public void setUsesPerOrderLimit(Integer usesPerOrderLimit) {
    this.usesPerOrderLimit = usesPerOrderLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogPriceRule catalogPriceRule = (CatalogPriceRule) o;
    return Objects.equals(this.actions, catalogPriceRule.actions) &&
        Objects.equals(this.additionalFields, catalogPriceRule.additionalFields) &&
        Objects.equals(this.avail, catalogPriceRule.avail) &&
        Objects.equals(this.conditions, catalogPriceRule.conditions) &&
        Objects.equals(this.createdTime, catalogPriceRule.createdTime) &&
        Objects.equals(this.customFields, catalogPriceRule.customFields) &&
        Objects.equals(this.dateEnd, catalogPriceRule.dateEnd) &&
        Objects.equals(this.dateStart, catalogPriceRule.dateStart) &&
        Objects.equals(this.description, catalogPriceRule.description) &&
        Objects.equals(this.gid, catalogPriceRule.gid) &&
        Objects.equals(this.id, catalogPriceRule.id) &&
        Objects.equals(this.name, catalogPriceRule.name) &&
        Objects.equals(this.shortDescription, catalogPriceRule.shortDescription) &&
        Objects.equals(this.type, catalogPriceRule.type) &&
        Objects.equals(this.usageCount, catalogPriceRule.usageCount) &&
        Objects.equals(this.usesPerOrderLimit, catalogPriceRule.usesPerOrderLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, additionalFields, avail, conditions, createdTime, customFields, dateEnd, dateStart, description, gid, id, name, shortDescription, type, usageCount, usesPerOrderLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogPriceRule {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    avail: ").append(toIndentedString(avail)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dateEnd: ").append(toIndentedString(dateEnd)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usageCount: ").append(toIndentedString(usageCount)).append("\n");
    sb.append("    usesPerOrderLimit: ").append(toIndentedString(usesPerOrderLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("additional_fields");
    openapiFields.add("avail");
    openapiFields.add("conditions");
    openapiFields.add("created_time");
    openapiFields.add("custom_fields");
    openapiFields.add("date_end");
    openapiFields.add("date_start");
    openapiFields.add("description");
    openapiFields.add("gid");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("short_description");
    openapiFields.add("type");
    openapiFields.add("usage_count");
    openapiFields.add("uses_per_order_limit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CatalogPriceRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CatalogPriceRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CatalogPriceRule is not found in the empty JSON string", CatalogPriceRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CatalogPriceRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CatalogPriceRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            CatalogPriceRuleAction.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        JsonArray jsonArrayconditions = jsonObj.getAsJsonArray("conditions");
        if (jsonArrayconditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
          }

          // validate the optional field `conditions` (array)
          for (int i = 0; i < jsonArrayconditions.size(); i++) {
            CouponCondition.validateJsonElement(jsonArrayconditions.get(i));
          };
        }
      }
      // validate the optional field `created_time`
      if (jsonObj.get("created_time") != null && !jsonObj.get("created_time").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("created_time"));
      }
      // validate the optional field `date_end`
      if (jsonObj.get("date_end") != null && !jsonObj.get("date_end").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("date_end"));
      }
      // validate the optional field `date_start`
      if (jsonObj.get("date_start") != null && !jsonObj.get("date_start").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("date_start"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("short_description") != null && !jsonObj.get("short_description").isJsonNull()) && !jsonObj.get("short_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_description").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CatalogPriceRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CatalogPriceRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CatalogPriceRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CatalogPriceRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CatalogPriceRule>() {
           @Override
           public void write(JsonWriter out, CatalogPriceRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CatalogPriceRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CatalogPriceRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CatalogPriceRule
   * @throws IOException if the JSON string is invalid with respect to CatalogPriceRule
   */
  public static CatalogPriceRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CatalogPriceRule.class);
  }

  /**
   * Convert an instance of CatalogPriceRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

