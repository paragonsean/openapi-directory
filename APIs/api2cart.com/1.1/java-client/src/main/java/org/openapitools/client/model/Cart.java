/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CartShippingZone;
import org.openapitools.client.model.CartStoreInfo;
import org.openapitools.client.model.CartWarehouse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Cart
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Cart {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_DB_PREFIX = "db_prefix";
  @SerializedName(SERIALIZED_NAME_DB_PREFIX)
  private String dbPrefix;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHIPPING_ZONES = "shipping_zones";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ZONES)
  private List<CartShippingZone> shippingZones = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORES_INFO = "stores_info";
  @SerializedName(SERIALIZED_NAME_STORES_INFO)
  private List<CartStoreInfo> storesInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_WAREHOUSES = "warehouses";
  @SerializedName(SERIALIZED_NAME_WAREHOUSES)
  private List<CartWarehouse> warehouses = new ArrayList<>();

  public Cart() {
  }

  public Cart additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public Cart customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public Cart dbPrefix(String dbPrefix) {
    this.dbPrefix = dbPrefix;
    return this;
  }

  /**
   * Get dbPrefix
   * @return dbPrefix
   */
  @javax.annotation.Nullable
  public String getDbPrefix() {
    return dbPrefix;
  }

  public void setDbPrefix(String dbPrefix) {
    this.dbPrefix = dbPrefix;
  }


  public Cart name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Cart shippingZones(List<CartShippingZone> shippingZones) {
    this.shippingZones = shippingZones;
    return this;
  }

  public Cart addShippingZonesItem(CartShippingZone shippingZonesItem) {
    if (this.shippingZones == null) {
      this.shippingZones = new ArrayList<>();
    }
    this.shippingZones.add(shippingZonesItem);
    return this;
  }

  /**
   * Get shippingZones
   * @return shippingZones
   */
  @javax.annotation.Nullable
  public List<CartShippingZone> getShippingZones() {
    return shippingZones;
  }

  public void setShippingZones(List<CartShippingZone> shippingZones) {
    this.shippingZones = shippingZones;
  }


  public Cart storesInfo(List<CartStoreInfo> storesInfo) {
    this.storesInfo = storesInfo;
    return this;
  }

  public Cart addStoresInfoItem(CartStoreInfo storesInfoItem) {
    if (this.storesInfo == null) {
      this.storesInfo = new ArrayList<>();
    }
    this.storesInfo.add(storesInfoItem);
    return this;
  }

  /**
   * Get storesInfo
   * @return storesInfo
   */
  @javax.annotation.Nullable
  public List<CartStoreInfo> getStoresInfo() {
    return storesInfo;
  }

  public void setStoresInfo(List<CartStoreInfo> storesInfo) {
    this.storesInfo = storesInfo;
  }


  public Cart url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Cart version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public Cart warehouses(List<CartWarehouse> warehouses) {
    this.warehouses = warehouses;
    return this;
  }

  public Cart addWarehousesItem(CartWarehouse warehousesItem) {
    if (this.warehouses == null) {
      this.warehouses = new ArrayList<>();
    }
    this.warehouses.add(warehousesItem);
    return this;
  }

  /**
   * Get warehouses
   * @return warehouses
   */
  @javax.annotation.Nullable
  public List<CartWarehouse> getWarehouses() {
    return warehouses;
  }

  public void setWarehouses(List<CartWarehouse> warehouses) {
    this.warehouses = warehouses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return Objects.equals(this.additionalFields, cart.additionalFields) &&
        Objects.equals(this.customFields, cart.customFields) &&
        Objects.equals(this.dbPrefix, cart.dbPrefix) &&
        Objects.equals(this.name, cart.name) &&
        Objects.equals(this.shippingZones, cart.shippingZones) &&
        Objects.equals(this.storesInfo, cart.storesInfo) &&
        Objects.equals(this.url, cart.url) &&
        Objects.equals(this.version, cart.version) &&
        Objects.equals(this.warehouses, cart.warehouses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, customFields, dbPrefix, name, shippingZones, storesInfo, url, version, warehouses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    dbPrefix: ").append(toIndentedString(dbPrefix)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shippingZones: ").append(toIndentedString(shippingZones)).append("\n");
    sb.append("    storesInfo: ").append(toIndentedString(storesInfo)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    warehouses: ").append(toIndentedString(warehouses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("custom_fields");
    openapiFields.add("db_prefix");
    openapiFields.add("name");
    openapiFields.add("shipping_zones");
    openapiFields.add("stores_info");
    openapiFields.add("url");
    openapiFields.add("version");
    openapiFields.add("warehouses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Cart
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Cart.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Cart is not found in the empty JSON string", Cart.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Cart.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Cart` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("db_prefix") != null && !jsonObj.get("db_prefix").isJsonNull()) && !jsonObj.get("db_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_prefix").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("shipping_zones") != null && !jsonObj.get("shipping_zones").isJsonNull()) {
        JsonArray jsonArrayshippingZones = jsonObj.getAsJsonArray("shipping_zones");
        if (jsonArrayshippingZones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipping_zones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_zones` to be an array in the JSON string but got `%s`", jsonObj.get("shipping_zones").toString()));
          }

          // validate the optional field `shipping_zones` (array)
          for (int i = 0; i < jsonArrayshippingZones.size(); i++) {
            CartShippingZone.validateJsonElement(jsonArrayshippingZones.get(i));
          };
        }
      }
      if (jsonObj.get("stores_info") != null && !jsonObj.get("stores_info").isJsonNull()) {
        JsonArray jsonArraystoresInfo = jsonObj.getAsJsonArray("stores_info");
        if (jsonArraystoresInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stores_info").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stores_info` to be an array in the JSON string but got `%s`", jsonObj.get("stores_info").toString()));
          }

          // validate the optional field `stores_info` (array)
          for (int i = 0; i < jsonArraystoresInfo.size(); i++) {
            CartStoreInfo.validateJsonElement(jsonArraystoresInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (jsonObj.get("warehouses") != null && !jsonObj.get("warehouses").isJsonNull()) {
        JsonArray jsonArraywarehouses = jsonObj.getAsJsonArray("warehouses");
        if (jsonArraywarehouses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warehouses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warehouses` to be an array in the JSON string but got `%s`", jsonObj.get("warehouses").toString()));
          }

          // validate the optional field `warehouses` (array)
          for (int i = 0; i < jsonArraywarehouses.size(); i++) {
            CartWarehouse.validateJsonElement(jsonArraywarehouses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Cart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Cart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Cart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Cart.class));

       return (TypeAdapter<T>) new TypeAdapter<Cart>() {
           @Override
           public void write(JsonWriter out, Cart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Cart read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Cart given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Cart
   * @throws IOException if the JSON string is invalid with respect to Cart
   */
  public static Cart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Cart.class);
  }

  /**
   * Convert an instance of Cart to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

