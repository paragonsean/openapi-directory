/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AttributeAdd200Response;
import org.openapitools.client.model.AttributeAssignGroup200Response;
import org.openapitools.client.model.AttributeAttributesetList200Response;
import org.openapitools.client.model.AttributeCount200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.AttributeInfo200Response;
import org.openapitools.client.model.AttributeTypeList200Response;
import org.openapitools.client.model.AttributeUnassignGroup200Response;
import org.openapitools.client.model.AttributeUpdate200Response;
import org.openapitools.client.model.ModelResponseAttributeList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttributeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttributeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttributeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for attributeAdd
     * @param type Defines attribute&#39;s type (required)
     * @param name Defines attributes&#39;s name (required)
     * @param code Entity code (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Set visibility status (optional, default to false)
     * @param required Defines if the option is required (optional, default to false)
     * @param position Attribute&#x60;s position (optional, default to 0)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param isGlobal Attribute saving scope (optional, default to Store)
     * @param isSearchable Use attribute in Quick Search (optional, default to false)
     * @param isFilterable Use In Layered Navigation (optional, default to false)
     * @param isComparable Comparable on Front-end (optional, default to false)
     * @param isHtmlAllowedOnFront Allow HTML Tags on Frontend (optional, default to false)
     * @param isFilterableInSearch Use In Search Results Layered Navigation (optional, default to false)
     * @param isConfigurable Use To Create Configurable Product (optional, default to false)
     * @param isVisibleInAdvancedSearch Use in Advanced Search (optional, default to false)
     * @param isUsedForPromoRules Use for Promo Rule Conditions (optional, default to false)
     * @param usedInProductListing Used in Product Listing (optional, default to false)
     * @param usedForSortBy Used for Sorting in Product Listing (optional, default to false)
     * @param applyTo Types of products which can have this attribute (optional, default to all_types)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAddCall(String type, String name, String code, String storeId, String langId, Boolean visible, Boolean required, Integer position, String attributeGroupId, String isGlobal, Boolean isSearchable, String isFilterable, Boolean isComparable, Boolean isHtmlAllowedOnFront, Boolean isFilterableInSearch, Boolean isConfigurable, Boolean isVisibleInAdvancedSearch, Boolean isUsedForPromoRules, Boolean usedInProductListing, Boolean usedForSortBy, String applyTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (visible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visible", visible));
        }

        if (required != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("required", required));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (attributeGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_group_id", attributeGroupId));
        }

        if (isGlobal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_global", isGlobal));
        }

        if (isSearchable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_searchable", isSearchable));
        }

        if (isFilterable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_filterable", isFilterable));
        }

        if (isComparable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_comparable", isComparable));
        }

        if (isHtmlAllowedOnFront != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_html_allowed_on_front", isHtmlAllowedOnFront));
        }

        if (isFilterableInSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_filterable_in_search", isFilterableInSearch));
        }

        if (isConfigurable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_configurable", isConfigurable));
        }

        if (isVisibleInAdvancedSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_visible_in_advanced_search", isVisibleInAdvancedSearch));
        }

        if (isUsedForPromoRules != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_used_for_promo_rules", isUsedForPromoRules));
        }

        if (usedInProductListing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("used_in_product_listing", usedInProductListing));
        }

        if (usedForSortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("used_for_sort_by", usedForSortBy));
        }

        if (applyTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apply_to", applyTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeAddValidateBeforeCall(String type, String name, String code, String storeId, String langId, Boolean visible, Boolean required, Integer position, String attributeGroupId, String isGlobal, Boolean isSearchable, String isFilterable, Boolean isComparable, Boolean isHtmlAllowedOnFront, Boolean isFilterableInSearch, Boolean isConfigurable, Boolean isVisibleInAdvancedSearch, Boolean isUsedForPromoRules, Boolean usedInProductListing, Boolean usedForSortBy, String applyTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling attributeAdd(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling attributeAdd(Async)");
        }

        return attributeAddCall(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo, _callback);

    }

    /**
     * 
     * Add new attribute
     * @param type Defines attribute&#39;s type (required)
     * @param name Defines attributes&#39;s name (required)
     * @param code Entity code (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Set visibility status (optional, default to false)
     * @param required Defines if the option is required (optional, default to false)
     * @param position Attribute&#x60;s position (optional, default to 0)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param isGlobal Attribute saving scope (optional, default to Store)
     * @param isSearchable Use attribute in Quick Search (optional, default to false)
     * @param isFilterable Use In Layered Navigation (optional, default to false)
     * @param isComparable Comparable on Front-end (optional, default to false)
     * @param isHtmlAllowedOnFront Allow HTML Tags on Frontend (optional, default to false)
     * @param isFilterableInSearch Use In Search Results Layered Navigation (optional, default to false)
     * @param isConfigurable Use To Create Configurable Product (optional, default to false)
     * @param isVisibleInAdvancedSearch Use in Advanced Search (optional, default to false)
     * @param isUsedForPromoRules Use for Promo Rule Conditions (optional, default to false)
     * @param usedInProductListing Used in Product Listing (optional, default to false)
     * @param usedForSortBy Used for Sorting in Product Listing (optional, default to false)
     * @param applyTo Types of products which can have this attribute (optional, default to all_types)
     * @return AttributeAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeAdd200Response attributeAdd(String type, String name, String code, String storeId, String langId, Boolean visible, Boolean required, Integer position, String attributeGroupId, String isGlobal, Boolean isSearchable, String isFilterable, Boolean isComparable, Boolean isHtmlAllowedOnFront, Boolean isFilterableInSearch, Boolean isConfigurable, Boolean isVisibleInAdvancedSearch, Boolean isUsedForPromoRules, Boolean usedInProductListing, Boolean usedForSortBy, String applyTo) throws ApiException {
        ApiResponse<AttributeAdd200Response> localVarResp = attributeAddWithHttpInfo(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo);
        return localVarResp.getData();
    }

    /**
     * 
     * Add new attribute
     * @param type Defines attribute&#39;s type (required)
     * @param name Defines attributes&#39;s name (required)
     * @param code Entity code (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Set visibility status (optional, default to false)
     * @param required Defines if the option is required (optional, default to false)
     * @param position Attribute&#x60;s position (optional, default to 0)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param isGlobal Attribute saving scope (optional, default to Store)
     * @param isSearchable Use attribute in Quick Search (optional, default to false)
     * @param isFilterable Use In Layered Navigation (optional, default to false)
     * @param isComparable Comparable on Front-end (optional, default to false)
     * @param isHtmlAllowedOnFront Allow HTML Tags on Frontend (optional, default to false)
     * @param isFilterableInSearch Use In Search Results Layered Navigation (optional, default to false)
     * @param isConfigurable Use To Create Configurable Product (optional, default to false)
     * @param isVisibleInAdvancedSearch Use in Advanced Search (optional, default to false)
     * @param isUsedForPromoRules Use for Promo Rule Conditions (optional, default to false)
     * @param usedInProductListing Used in Product Listing (optional, default to false)
     * @param usedForSortBy Used for Sorting in Product Listing (optional, default to false)
     * @param applyTo Types of products which can have this attribute (optional, default to all_types)
     * @return ApiResponse&lt;AttributeAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeAdd200Response> attributeAddWithHttpInfo(String type, String name, String code, String storeId, String langId, Boolean visible, Boolean required, Integer position, String attributeGroupId, String isGlobal, Boolean isSearchable, String isFilterable, Boolean isComparable, Boolean isHtmlAllowedOnFront, Boolean isFilterableInSearch, Boolean isConfigurable, Boolean isVisibleInAdvancedSearch, Boolean isUsedForPromoRules, Boolean usedInProductListing, Boolean usedForSortBy, String applyTo) throws ApiException {
        okhttp3.Call localVarCall = attributeAddValidateBeforeCall(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo, null);
        Type localVarReturnType = new TypeToken<AttributeAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add new attribute
     * @param type Defines attribute&#39;s type (required)
     * @param name Defines attributes&#39;s name (required)
     * @param code Entity code (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Set visibility status (optional, default to false)
     * @param required Defines if the option is required (optional, default to false)
     * @param position Attribute&#x60;s position (optional, default to 0)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param isGlobal Attribute saving scope (optional, default to Store)
     * @param isSearchable Use attribute in Quick Search (optional, default to false)
     * @param isFilterable Use In Layered Navigation (optional, default to false)
     * @param isComparable Comparable on Front-end (optional, default to false)
     * @param isHtmlAllowedOnFront Allow HTML Tags on Frontend (optional, default to false)
     * @param isFilterableInSearch Use In Search Results Layered Navigation (optional, default to false)
     * @param isConfigurable Use To Create Configurable Product (optional, default to false)
     * @param isVisibleInAdvancedSearch Use in Advanced Search (optional, default to false)
     * @param isUsedForPromoRules Use for Promo Rule Conditions (optional, default to false)
     * @param usedInProductListing Used in Product Listing (optional, default to false)
     * @param usedForSortBy Used for Sorting in Product Listing (optional, default to false)
     * @param applyTo Types of products which can have this attribute (optional, default to all_types)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAddAsync(String type, String name, String code, String storeId, String langId, Boolean visible, Boolean required, Integer position, String attributeGroupId, String isGlobal, Boolean isSearchable, String isFilterable, Boolean isComparable, Boolean isHtmlAllowedOnFront, Boolean isFilterableInSearch, Boolean isConfigurable, Boolean isVisibleInAdvancedSearch, Boolean isUsedForPromoRules, Boolean usedInProductListing, Boolean usedForSortBy, String applyTo, final ApiCallback<AttributeAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeAddValidateBeforeCall(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo, _callback);
        Type localVarReturnType = new TypeToken<AttributeAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeAssignGroup
     * @param id Entity id (required)
     * @param groupId Attribute group_id (required)
     * @param attributeSetId Attribute set id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAssignGroupCall(String id, String groupId, String attributeSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.assign.group.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (attributeSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_set_id", attributeSetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeAssignGroupValidateBeforeCall(String id, String groupId, String attributeSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attributeAssignGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling attributeAssignGroup(Async)");
        }

        return attributeAssignGroupCall(id, groupId, attributeSetId, _callback);

    }

    /**
     * 
     * Assign attribute to the group
     * @param id Entity id (required)
     * @param groupId Attribute group_id (required)
     * @param attributeSetId Attribute set id (optional)
     * @return AttributeAssignGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeAssignGroup200Response attributeAssignGroup(String id, String groupId, String attributeSetId) throws ApiException {
        ApiResponse<AttributeAssignGroup200Response> localVarResp = attributeAssignGroupWithHttpInfo(id, groupId, attributeSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Assign attribute to the group
     * @param id Entity id (required)
     * @param groupId Attribute group_id (required)
     * @param attributeSetId Attribute set id (optional)
     * @return ApiResponse&lt;AttributeAssignGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeAssignGroup200Response> attributeAssignGroupWithHttpInfo(String id, String groupId, String attributeSetId) throws ApiException {
        okhttp3.Call localVarCall = attributeAssignGroupValidateBeforeCall(id, groupId, attributeSetId, null);
        Type localVarReturnType = new TypeToken<AttributeAssignGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign attribute to the group
     * @param id Entity id (required)
     * @param groupId Attribute group_id (required)
     * @param attributeSetId Attribute set id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAssignGroupAsync(String id, String groupId, String attributeSetId, final ApiCallback<AttributeAssignGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeAssignGroupValidateBeforeCall(id, groupId, attributeSetId, _callback);
        Type localVarReturnType = new TypeToken<AttributeAssignGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeAssignSet
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @param groupId Attribute group_id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAssignSetCall(String id, String attributeSetId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.assign.set.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (attributeSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_set_id", attributeSetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeAssignSetValidateBeforeCall(String id, String attributeSetId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attributeAssignSet(Async)");
        }

        // verify the required parameter 'attributeSetId' is set
        if (attributeSetId == null) {
            throw new ApiException("Missing the required parameter 'attributeSetId' when calling attributeAssignSet(Async)");
        }

        return attributeAssignSetCall(id, attributeSetId, groupId, _callback);

    }

    /**
     * 
     * Assign attribute to the attribute set
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @param groupId Attribute group_id (optional)
     * @return AttributeAssignGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeAssignGroup200Response attributeAssignSet(String id, String attributeSetId, String groupId) throws ApiException {
        ApiResponse<AttributeAssignGroup200Response> localVarResp = attributeAssignSetWithHttpInfo(id, attributeSetId, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Assign attribute to the attribute set
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @param groupId Attribute group_id (optional)
     * @return ApiResponse&lt;AttributeAssignGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeAssignGroup200Response> attributeAssignSetWithHttpInfo(String id, String attributeSetId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = attributeAssignSetValidateBeforeCall(id, attributeSetId, groupId, null);
        Type localVarReturnType = new TypeToken<AttributeAssignGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign attribute to the attribute set
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @param groupId Attribute group_id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAssignSetAsync(String id, String attributeSetId, String groupId, final ApiCallback<AttributeAssignGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeAssignSetValidateBeforeCall(id, attributeSetId, groupId, _callback);
        Type localVarReturnType = new TypeToken<AttributeAssignGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeAttributesetList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAttributesetListCall(Integer start, Integer count, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.attributeset.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeAttributesetListValidateBeforeCall(Integer start, Integer count, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        return attributeAttributesetListCall(start, count, params, exclude, responseFields, _callback);

    }

    /**
     * 
     * Get attribute_set list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return AttributeAttributesetList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeAttributesetList200Response attributeAttributesetList(Integer start, Integer count, String params, String exclude, String responseFields) throws ApiException {
        ApiResponse<AttributeAttributesetList200Response> localVarResp = attributeAttributesetListWithHttpInfo(start, count, params, exclude, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Get attribute_set list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse&lt;AttributeAttributesetList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeAttributesetList200Response> attributeAttributesetListWithHttpInfo(Integer start, Integer count, String params, String exclude, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = attributeAttributesetListValidateBeforeCall(start, count, params, exclude, responseFields, null);
        Type localVarReturnType = new TypeToken<AttributeAttributesetList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get attribute_set list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeAttributesetListAsync(Integer start, Integer count, String params, String exclude, String responseFields, final ApiCallback<AttributeAttributesetList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeAttributesetListValidateBeforeCall(start, count, params, exclude, responseFields, _callback);
        Type localVarReturnType = new TypeToken<AttributeAttributesetList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeCount
     * @param type Defines attribute&#39;s type (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeCountCall(String type, String storeId, String langId, Boolean visible, Boolean required, Boolean system, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (visible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visible", visible));
        }

        if (required != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("required", required));
        }

        if (system != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("system", system));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeCountValidateBeforeCall(String type, String storeId, String langId, Boolean visible, Boolean required, Boolean system, final ApiCallback _callback) throws ApiException {
        return attributeCountCall(type, storeId, langId, visible, required, system, _callback);

    }

    /**
     * 
     * Get attributes count
     * @param type Defines attribute&#39;s type (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @return AttributeCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeCount200Response attributeCount(String type, String storeId, String langId, Boolean visible, Boolean required, Boolean system) throws ApiException {
        ApiResponse<AttributeCount200Response> localVarResp = attributeCountWithHttpInfo(type, storeId, langId, visible, required, system);
        return localVarResp.getData();
    }

    /**
     * 
     * Get attributes count
     * @param type Defines attribute&#39;s type (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @return ApiResponse&lt;AttributeCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeCount200Response> attributeCountWithHttpInfo(String type, String storeId, String langId, Boolean visible, Boolean required, Boolean system) throws ApiException {
        okhttp3.Call localVarCall = attributeCountValidateBeforeCall(type, storeId, langId, visible, required, system, null);
        Type localVarReturnType = new TypeToken<AttributeCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get attributes count
     * @param type Defines attribute&#39;s type (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeCountAsync(String type, String storeId, String langId, Boolean visible, Boolean required, Boolean system, final ApiCallback<AttributeCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeCountValidateBeforeCall(type, storeId, langId, visible, required, system, _callback);
        Type localVarReturnType = new TypeToken<AttributeCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeDelete
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeDeleteCall(String id, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeDeleteValidateBeforeCall(String id, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attributeDelete(Async)");
        }

        return attributeDeleteCall(id, storeId, _callback);

    }

    /**
     * 
     * Delete attribute from store
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response attributeDelete(String id, String storeId) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = attributeDeleteWithHttpInfo(id, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete attribute from store
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> attributeDeleteWithHttpInfo(String id, String storeId) throws ApiException {
        okhttp3.Call localVarCall = attributeDeleteValidateBeforeCall(id, storeId, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete attribute from store
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeDeleteAsync(String id, String storeId, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeDeleteValidateBeforeCall(id, storeId, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeGroupList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param attributeSetId Attribute set id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGroupListCall(Integer start, Integer count, String langId, String params, String exclude, String responseFields, String attributeSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.group.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (attributeSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_set_id", attributeSetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeGroupListValidateBeforeCall(Integer start, Integer count, String langId, String params, String exclude, String responseFields, String attributeSetId, final ApiCallback _callback) throws ApiException {
        return attributeGroupListCall(start, count, langId, params, exclude, responseFields, attributeSetId, _callback);

    }

    /**
     * 
     * Get attribute group list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param attributeSetId Attribute set id (optional)
     * @return AttributeAttributesetList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeAttributesetList200Response attributeGroupList(Integer start, Integer count, String langId, String params, String exclude, String responseFields, String attributeSetId) throws ApiException {
        ApiResponse<AttributeAttributesetList200Response> localVarResp = attributeGroupListWithHttpInfo(start, count, langId, params, exclude, responseFields, attributeSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get attribute group list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param attributeSetId Attribute set id (optional)
     * @return ApiResponse&lt;AttributeAttributesetList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeAttributesetList200Response> attributeGroupListWithHttpInfo(Integer start, Integer count, String langId, String params, String exclude, String responseFields, String attributeSetId) throws ApiException {
        okhttp3.Call localVarCall = attributeGroupListValidateBeforeCall(start, count, langId, params, exclude, responseFields, attributeSetId, null);
        Type localVarReturnType = new TypeToken<AttributeAttributesetList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get attribute group list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param attributeSetId Attribute set id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeGroupListAsync(Integer start, Integer count, String langId, String params, String exclude, String responseFields, String attributeSetId, final ApiCallback<AttributeAttributesetList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeGroupListValidateBeforeCall(start, count, langId, params, exclude, responseFields, attributeSetId, _callback);
        Type localVarReturnType = new TypeToken<AttributeAttributesetList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeInfo
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeInfoCall(String id, String storeId, String langId, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeInfoValidateBeforeCall(String id, String storeId, String langId, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attributeInfo(Async)");
        }

        return attributeInfoCall(id, storeId, langId, params, exclude, responseFields, _callback);

    }

    /**
     * 
     * Get attribute info
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return AttributeInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeInfo200Response attributeInfo(String id, String storeId, String langId, String params, String exclude, String responseFields) throws ApiException {
        ApiResponse<AttributeInfo200Response> localVarResp = attributeInfoWithHttpInfo(id, storeId, langId, params, exclude, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Get attribute info
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse&lt;AttributeInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeInfo200Response> attributeInfoWithHttpInfo(String id, String storeId, String langId, String params, String exclude, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = attributeInfoValidateBeforeCall(id, storeId, langId, params, exclude, responseFields, null);
        Type localVarReturnType = new TypeToken<AttributeInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get attribute info
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeInfoAsync(String id, String storeId, String langId, String params, String exclude, String responseFields, final ApiCallback<AttributeInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeInfoValidateBeforeCall(id, storeId, langId, params, exclude, responseFields, _callback);
        Type localVarReturnType = new TypeToken<AttributeInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param type Defines attribute&#39;s type (optional)
     * @param attributeIds Filter attributes by ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Retrieves attributes on specified language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,code,type)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeListCall(Integer start, Integer count, String type, String attributeIds, String storeId, String langId, String params, String exclude, String responseFields, Boolean visible, Boolean required, Boolean system, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (attributeIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_ids", attributeIds));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (visible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visible", visible));
        }

        if (required != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("required", required));
        }

        if (system != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("system", system));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeListValidateBeforeCall(Integer start, Integer count, String type, String attributeIds, String storeId, String langId, String params, String exclude, String responseFields, Boolean visible, Boolean required, Boolean system, final ApiCallback _callback) throws ApiException {
        return attributeListCall(start, count, type, attributeIds, storeId, langId, params, exclude, responseFields, visible, required, system, _callback);

    }

    /**
     * 
     * Get attributes list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param type Defines attribute&#39;s type (optional)
     * @param attributeIds Filter attributes by ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Retrieves attributes on specified language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,code,type)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @return ModelResponseAttributeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseAttributeList attributeList(Integer start, Integer count, String type, String attributeIds, String storeId, String langId, String params, String exclude, String responseFields, Boolean visible, Boolean required, Boolean system) throws ApiException {
        ApiResponse<ModelResponseAttributeList> localVarResp = attributeListWithHttpInfo(start, count, type, attributeIds, storeId, langId, params, exclude, responseFields, visible, required, system);
        return localVarResp.getData();
    }

    /**
     * 
     * Get attributes list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param type Defines attribute&#39;s type (optional)
     * @param attributeIds Filter attributes by ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Retrieves attributes on specified language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,code,type)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @return ApiResponse&lt;ModelResponseAttributeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseAttributeList> attributeListWithHttpInfo(Integer start, Integer count, String type, String attributeIds, String storeId, String langId, String params, String exclude, String responseFields, Boolean visible, Boolean required, Boolean system) throws ApiException {
        okhttp3.Call localVarCall = attributeListValidateBeforeCall(start, count, type, attributeIds, storeId, langId, params, exclude, responseFields, visible, required, system, null);
        Type localVarReturnType = new TypeToken<ModelResponseAttributeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get attributes list
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param type Defines attribute&#39;s type (optional)
     * @param attributeIds Filter attributes by ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Retrieves attributes on specified language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,code,type)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param visible Filter items by visibility status (optional)
     * @param required Defines if the option is required (optional)
     * @param system True if attribute is system (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeListAsync(Integer start, Integer count, String type, String attributeIds, String storeId, String langId, String params, String exclude, String responseFields, Boolean visible, Boolean required, Boolean system, final ApiCallback<ModelResponseAttributeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeListValidateBeforeCall(start, count, type, attributeIds, storeId, langId, params, exclude, responseFields, visible, required, system, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseAttributeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeTypeList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeTypeListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.type.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeTypeListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return attributeTypeListCall(_callback);

    }

    /**
     * 
     * Get list of supported attributes types
     * @return AttributeTypeList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeTypeList200Response attributeTypeList() throws ApiException {
        ApiResponse<AttributeTypeList200Response> localVarResp = attributeTypeListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of supported attributes types
     * @return ApiResponse&lt;AttributeTypeList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeTypeList200Response> attributeTypeListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = attributeTypeListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AttributeTypeList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of supported attributes types
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeTypeListAsync(final ApiCallback<AttributeTypeList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeTypeListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AttributeTypeList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeUnassignGroup
     * @param id Entity id (required)
     * @param groupId Customer group_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUnassignGroupCall(String id, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.unassign.group.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeUnassignGroupValidateBeforeCall(String id, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attributeUnassignGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling attributeUnassignGroup(Async)");
        }

        return attributeUnassignGroupCall(id, groupId, _callback);

    }

    /**
     * 
     * Unassign attribute from group
     * @param id Entity id (required)
     * @param groupId Customer group_id (required)
     * @return AttributeUnassignGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeUnassignGroup200Response attributeUnassignGroup(String id, String groupId) throws ApiException {
        ApiResponse<AttributeUnassignGroup200Response> localVarResp = attributeUnassignGroupWithHttpInfo(id, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * Unassign attribute from group
     * @param id Entity id (required)
     * @param groupId Customer group_id (required)
     * @return ApiResponse&lt;AttributeUnassignGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeUnassignGroup200Response> attributeUnassignGroupWithHttpInfo(String id, String groupId) throws ApiException {
        okhttp3.Call localVarCall = attributeUnassignGroupValidateBeforeCall(id, groupId, null);
        Type localVarReturnType = new TypeToken<AttributeUnassignGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unassign attribute from group
     * @param id Entity id (required)
     * @param groupId Customer group_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUnassignGroupAsync(String id, String groupId, final ApiCallback<AttributeUnassignGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeUnassignGroupValidateBeforeCall(id, groupId, _callback);
        Type localVarReturnType = new TypeToken<AttributeUnassignGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeUnassignSet
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUnassignSetCall(String id, String attributeSetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.unassign.set.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (attributeSetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_set_id", attributeSetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeUnassignSetValidateBeforeCall(String id, String attributeSetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attributeUnassignSet(Async)");
        }

        // verify the required parameter 'attributeSetId' is set
        if (attributeSetId == null) {
            throw new ApiException("Missing the required parameter 'attributeSetId' when calling attributeUnassignSet(Async)");
        }

        return attributeUnassignSetCall(id, attributeSetId, _callback);

    }

    /**
     * 
     * Unassign attribute from attribute set
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @return AttributeUnassignGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeUnassignGroup200Response attributeUnassignSet(String id, String attributeSetId) throws ApiException {
        ApiResponse<AttributeUnassignGroup200Response> localVarResp = attributeUnassignSetWithHttpInfo(id, attributeSetId);
        return localVarResp.getData();
    }

    /**
     * 
     * Unassign attribute from attribute set
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @return ApiResponse&lt;AttributeUnassignGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeUnassignGroup200Response> attributeUnassignSetWithHttpInfo(String id, String attributeSetId) throws ApiException {
        okhttp3.Call localVarCall = attributeUnassignSetValidateBeforeCall(id, attributeSetId, null);
        Type localVarReturnType = new TypeToken<AttributeUnassignGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unassign attribute from attribute set
     * @param id Entity id (required)
     * @param attributeSetId Attribute set id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUnassignSetAsync(String id, String attributeSetId, final ApiCallback<AttributeUnassignGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeUnassignSetValidateBeforeCall(id, attributeSetId, _callback);
        Type localVarReturnType = new TypeToken<AttributeUnassignGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attributeUpdate
     * @param id Entity id (required)
     * @param name Defines new attributes&#39;s name (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUpdateCall(String id, String name, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attribute.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attributeUpdateValidateBeforeCall(String id, String name, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling attributeUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling attributeUpdate(Async)");
        }

        return attributeUpdateCall(id, name, storeId, langId, _callback);

    }

    /**
     * 
     * Update attribute data
     * @param id Entity id (required)
     * @param name Defines new attributes&#39;s name (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return AttributeUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeUpdate200Response attributeUpdate(String id, String name, String storeId, String langId) throws ApiException {
        ApiResponse<AttributeUpdate200Response> localVarResp = attributeUpdateWithHttpInfo(id, name, storeId, langId);
        return localVarResp.getData();
    }

    /**
     * 
     * Update attribute data
     * @param id Entity id (required)
     * @param name Defines new attributes&#39;s name (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return ApiResponse&lt;AttributeUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeUpdate200Response> attributeUpdateWithHttpInfo(String id, String name, String storeId, String langId) throws ApiException {
        okhttp3.Call localVarCall = attributeUpdateValidateBeforeCall(id, name, storeId, langId, null);
        Type localVarReturnType = new TypeToken<AttributeUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update attribute data
     * @param id Entity id (required)
     * @param name Defines new attributes&#39;s name (required)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attributeUpdateAsync(String id, String name, String storeId, String langId, final ApiCallback<AttributeUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = attributeUpdateValidateBeforeCall(id, name, storeId, langId, _callback);
        Type localVarReturnType = new TypeToken<AttributeUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
