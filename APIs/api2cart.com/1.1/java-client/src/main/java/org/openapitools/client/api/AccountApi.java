/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountCartAdd;
import org.openapitools.client.model.AccountCartAdd200Response;
import org.openapitools.client.model.AccountCartList200Response;
import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AccountFailedWebhooks200Response;
import org.openapitools.client.model.AccountSupportedPlatforms200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountCartAdd
     * @param accountCartAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCartAddCall(AccountCartAdd accountCartAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountCartAdd;

        // create path and map variables
        String localVarPath = "/account.cart.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountCartAddValidateBeforeCall(AccountCartAdd accountCartAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountCartAdd' is set
        if (accountCartAdd == null) {
            throw new ApiException("Missing the required parameter 'accountCartAdd' when calling accountCartAdd(Async)");
        }

        return accountCartAddCall(accountCartAdd, _callback);

    }

    /**
     * 
     * Add store to the account
     * @param accountCartAdd  (required)
     * @return AccountCartAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountCartAdd200Response accountCartAdd(AccountCartAdd accountCartAdd) throws ApiException {
        ApiResponse<AccountCartAdd200Response> localVarResp = accountCartAddWithHttpInfo(accountCartAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add store to the account
     * @param accountCartAdd  (required)
     * @return ApiResponse&lt;AccountCartAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountCartAdd200Response> accountCartAddWithHttpInfo(AccountCartAdd accountCartAdd) throws ApiException {
        okhttp3.Call localVarCall = accountCartAddValidateBeforeCall(accountCartAdd, null);
        Type localVarReturnType = new TypeToken<AccountCartAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add store to the account
     * @param accountCartAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCartAddAsync(AccountCartAdd accountCartAdd, final ApiCallback<AccountCartAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountCartAddValidateBeforeCall(accountCartAdd, _callback);
        Type localVarReturnType = new TypeToken<AccountCartAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountCartList
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param requestFromDate Retrieve entities from their creation date (optional)
     * @param requestToDate Retrieve entities to their creation date (optional)
     * @param storeUrl A web address of a store (optional)
     * @param storeKey Find store by store key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCartListCall(String params, String exclude, String requestFromDate, String requestToDate, String storeUrl, String storeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account.cart.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (requestFromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_from_date", requestFromDate));
        }

        if (requestToDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_to_date", requestToDate));
        }

        if (storeUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_url", storeUrl));
        }

        if (storeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_key", storeKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountCartListValidateBeforeCall(String params, String exclude, String requestFromDate, String requestToDate, String storeUrl, String storeKey, final ApiCallback _callback) throws ApiException {
        return accountCartListCall(params, exclude, requestFromDate, requestToDate, storeUrl, storeKey, _callback);

    }

    /**
     * 
     * Get list of carts.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param requestFromDate Retrieve entities from their creation date (optional)
     * @param requestToDate Retrieve entities to their creation date (optional)
     * @param storeUrl A web address of a store (optional)
     * @param storeKey Find store by store key (optional)
     * @return AccountCartList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountCartList200Response accountCartList(String params, String exclude, String requestFromDate, String requestToDate, String storeUrl, String storeKey) throws ApiException {
        ApiResponse<AccountCartList200Response> localVarResp = accountCartListWithHttpInfo(params, exclude, requestFromDate, requestToDate, storeUrl, storeKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of carts.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param requestFromDate Retrieve entities from their creation date (optional)
     * @param requestToDate Retrieve entities to their creation date (optional)
     * @param storeUrl A web address of a store (optional)
     * @param storeKey Find store by store key (optional)
     * @return ApiResponse&lt;AccountCartList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountCartList200Response> accountCartListWithHttpInfo(String params, String exclude, String requestFromDate, String requestToDate, String storeUrl, String storeKey) throws ApiException {
        okhttp3.Call localVarCall = accountCartListValidateBeforeCall(params, exclude, requestFromDate, requestToDate, storeUrl, storeKey, null);
        Type localVarReturnType = new TypeToken<AccountCartList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of carts.
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param requestFromDate Retrieve entities from their creation date (optional)
     * @param requestToDate Retrieve entities to their creation date (optional)
     * @param storeUrl A web address of a store (optional)
     * @param storeKey Find store by store key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountCartListAsync(String params, String exclude, String requestFromDate, String requestToDate, String storeUrl, String storeKey, final ApiCallback<AccountCartList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountCartListValidateBeforeCall(params, exclude, requestFromDate, requestToDate, storeUrl, storeKey, _callback);
        Type localVarReturnType = new TypeToken<AccountCartList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountConfigUpdate
     * @param newStoreKey Update store key (optional)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param _3dcartapiApiKey 3DCart API Key (optional)
     * @param amazonSpClientId Amazon SP API app client id (optional)
     * @param amazonSpClientSecret Amazon SP API app client secret (optional)
     * @param amazonSpAwsUserKeyId Amazon AWS user access key ID (optional)
     * @param amazonSpAwsUserSecret Amazon AWS user secret access key (optional)
     * @param amazonSpAwsRegion Amazon AWS Region (optional)
     * @param amazonSpAwsRoleArn Amazon AWS Role ARN (optional)
     * @param amazonSpRefreshToken Amazon SP API OAuth refresh token (optional)
     * @param amazonSpApiEnvironment Amazon SP API environment (optional, default to production)
     * @param amazonAccessToken MWS Auth Token. Access token authorizing the app to access resources on behalf of a user (optional)
     * @param amazonSellerId Amazon Seller ID (Merchant token) (optional)
     * @param amazonMarketplacesIds Amazon Marketplace IDs comma separated string (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password (optional)
     * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param bigcommerceapiApiPath BigCommerce API URL (optional)
     * @param bigcommerceapiApiKey Bigcommerce API Key (optional)
     * @param bigcommerceapiClientId Client ID of the requesting app (optional)
     * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param bigcommerceapiContext API Path section unique to the store (optional)
     * @param demandwareClientId Demandware client id (optional)
     * @param demandwareApiPassword Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param ecwidStoreId Store Id (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyClientId Etsy Client Id (optional)
     * @param etsyRefreshToken Etsy Refresh token (optional)
     * @param netoApiKey Neto API Key (optional)
     * @param netoApiUsername Neto User Name (optional)
     * @param shopifyApiKey Shopify API Key (optional)
     * @param shopifyApiPassword Shopify API Password (optional)
     * @param shopifySharedSecret Shared secret (optional)
     * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param volusionLogin It&#39;s a Volusion account for which API is enabled (optional)
     * @param volusionPassword Volusion API Password (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param squarespaceApiKey Squarespace API Key (optional)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountConfigUpdateCall(String newStoreKey, String bridgeUrl, String storeRoot, String dbTablesPrefix, String _3dcartPrivateKey, String _3dcartAccessToken, String _3dcartapiApiKey, String amazonSpClientId, String amazonSpClientSecret, String amazonSpAwsUserKeyId, String amazonSpAwsUserSecret, String amazonSpAwsRegion, String amazonSpAwsRoleArn, String amazonSpRefreshToken, String amazonSpApiEnvironment, String amazonAccessToken, String amazonSellerId, String amazonMarketplacesIds, String amazonSecretKey, String amazonAccessKeyId, String aspdotnetstorefrontApiUser, String aspdotnetstorefrontApiPass, String bigcommerceapiAdminAccount, String bigcommerceapiApiPath, String bigcommerceapiApiKey, String bigcommerceapiClientId, String bigcommerceapiAccessToken, String bigcommerceapiContext, String demandwareClientId, String demandwareApiPassword, String demandwareUserName, String demandwareUserPassword, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String ecwidAcessToken, String ecwidStoreId, String etsyKeystring, String etsySharedSecret, String etsyAccessToken, String etsyTokenSecret, String etsyClientId, String etsyRefreshToken, String netoApiKey, String netoApiUsername, String shopifyApiKey, String shopifyApiPassword, String shopifySharedSecret, String shopifyAccessToken, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String volusionLogin, String volusionPassword, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String squarespaceApiKey, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String lightspeedApiKey, String lightspeedApiSecret, String commercehqApiKey, String commercehqApiPassword, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account.config.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newStoreKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("new_store_key", newStoreKey));
        }

        if (bridgeUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_url", bridgeUrl));
        }

        if (storeRoot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_root", storeRoot));
        }

        if (dbTablesPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("db_tables_prefix", dbTablesPrefix));
        }

        if (_3dcartPrivateKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("3dcart_private_key", _3dcartPrivateKey));
        }

        if (_3dcartAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("3dcart_access_token", _3dcartAccessToken));
        }

        if (_3dcartapiApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("3dcartapi_api_key", _3dcartapiApiKey));
        }

        if (amazonSpClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_client_id", amazonSpClientId));
        }

        if (amazonSpClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_client_secret", amazonSpClientSecret));
        }

        if (amazonSpAwsUserKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_aws_user_key_id", amazonSpAwsUserKeyId));
        }

        if (amazonSpAwsUserSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_aws_user_secret", amazonSpAwsUserSecret));
        }

        if (amazonSpAwsRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_aws_region", amazonSpAwsRegion));
        }

        if (amazonSpAwsRoleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_aws_role_arn", amazonSpAwsRoleArn));
        }

        if (amazonSpRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_refresh_token", amazonSpRefreshToken));
        }

        if (amazonSpApiEnvironment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_sp_api_environment", amazonSpApiEnvironment));
        }

        if (amazonAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_access_token", amazonAccessToken));
        }

        if (amazonSellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_seller_id", amazonSellerId));
        }

        if (amazonMarketplacesIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_marketplaces_ids", amazonMarketplacesIds));
        }

        if (amazonSecretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_secret_key", amazonSecretKey));
        }

        if (amazonAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_access_key_id", amazonAccessKeyId));
        }

        if (aspdotnetstorefrontApiUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspdotnetstorefront_api_user", aspdotnetstorefrontApiUser));
        }

        if (aspdotnetstorefrontApiPass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspdotnetstorefront_api_pass", aspdotnetstorefrontApiPass));
        }

        if (bigcommerceapiAdminAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bigcommerceapi_admin_account", bigcommerceapiAdminAccount));
        }

        if (bigcommerceapiApiPath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bigcommerceapi_api_path", bigcommerceapiApiPath));
        }

        if (bigcommerceapiApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bigcommerceapi_api_key", bigcommerceapiApiKey));
        }

        if (bigcommerceapiClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bigcommerceapi_client_id", bigcommerceapiClientId));
        }

        if (bigcommerceapiAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bigcommerceapi_access_token", bigcommerceapiAccessToken));
        }

        if (bigcommerceapiContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bigcommerceapi_context", bigcommerceapiContext));
        }

        if (demandwareClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("demandware_client_id", demandwareClientId));
        }

        if (demandwareApiPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("demandware_api_password", demandwareApiPassword));
        }

        if (demandwareUserName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("demandware_user_name", demandwareUserName));
        }

        if (demandwareUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("demandware_user_password", demandwareUserPassword));
        }

        if (ebayClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_client_id", ebayClientId));
        }

        if (ebayClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_client_secret", ebayClientSecret));
        }

        if (ebayRuname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_runame", ebayRuname));
        }

        if (ebayAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_access_token", ebayAccessToken));
        }

        if (ebayRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_refresh_token", ebayRefreshToken));
        }

        if (ebayEnvironment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_environment", ebayEnvironment));
        }

        if (ebaySiteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_site_id", ebaySiteId));
        }

        if (ecwidAcessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ecwid_acess_token", ecwidAcessToken));
        }

        if (ecwidStoreId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ecwid_store_id", ecwidStoreId));
        }

        if (etsyKeystring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_keystring", etsyKeystring));
        }

        if (etsySharedSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_shared_secret", etsySharedSecret));
        }

        if (etsyAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_access_token", etsyAccessToken));
        }

        if (etsyTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_token_secret", etsyTokenSecret));
        }

        if (etsyClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_client_id", etsyClientId));
        }

        if (etsyRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_refresh_token", etsyRefreshToken));
        }

        if (netoApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("neto_api_key", netoApiKey));
        }

        if (netoApiUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("neto_api_username", netoApiUsername));
        }

        if (shopifyApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopify_api_key", shopifyApiKey));
        }

        if (shopifyApiPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopify_api_password", shopifyApiPassword));
        }

        if (shopifySharedSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopify_shared_secret", shopifySharedSecret));
        }

        if (shopifyAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopify_access_token", shopifyAccessToken));
        }

        if (shopwareAccessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopware_access_key", shopwareAccessKey));
        }

        if (shopwareApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopware_api_key", shopwareApiKey));
        }

        if (shopwareApiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopware_api_secret", shopwareApiSecret));
        }

        if (volusionLogin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("volusion_login", volusionLogin));
        }

        if (volusionPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("volusion_password", volusionPassword));
        }

        if (walmartClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_client_id", walmartClientId));
        }

        if (walmartClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_client_secret", walmartClientSecret));
        }

        if (walmartEnvironment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_environment", walmartEnvironment));
        }

        if (walmartChannelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_channel_type", walmartChannelType));
        }

        if (squarespaceApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("squarespace_api_key", squarespaceApiKey));
        }

        if (hybrisClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_client_id", hybrisClientId));
        }

        if (hybrisClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_client_secret", hybrisClientSecret));
        }

        if (hybrisUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_username", hybrisUsername));
        }

        if (hybrisPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_password", hybrisPassword));
        }

        if (hybrisWebsites != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "hybris_websites", hybrisWebsites));
        }

        if (lightspeedApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lightspeed_api_key", lightspeedApiKey));
        }

        if (lightspeedApiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lightspeed_api_secret", lightspeedApiSecret));
        }

        if (commercehqApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commercehq_api_key", commercehqApiKey));
        }

        if (commercehqApiPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commercehq_api_password", commercehqApiPassword));
        }

        if (wcConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wc_consumer_key", wcConsumerKey));
        }

        if (wcConsumerSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wc_consumer_secret", wcConsumerSecret));
        }

        if (magentoConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_consumer_key", magentoConsumerKey));
        }

        if (magentoConsumerSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_consumer_secret", magentoConsumerSecret));
        }

        if (magentoAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_access_token", magentoAccessToken));
        }

        if (magentoTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_token_secret", magentoTokenSecret));
        }

        if (prestashopWebserviceKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prestashop_webservice_key", prestashopWebserviceKey));
        }

        if (wixAppId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wix_app_id", wixAppId));
        }

        if (wixAppSecretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wix_app_secret_key", wixAppSecretKey));
        }

        if (wixRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wix_refresh_token", wixRefreshToken));
        }

        if (mercadoLibreAppId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mercado_libre_app_id", mercadoLibreAppId));
        }

        if (mercadoLibreAppSecretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mercado_libre_app_secret_key", mercadoLibreAppSecretKey));
        }

        if (mercadoLibreRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mercado_libre_refresh_token", mercadoLibreRefreshToken));
        }

        if (zidClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_client_id", zidClientId));
        }

        if (zidClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_client_secret", zidClientSecret));
        }

        if (zidAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_access_token", zidAccessToken));
        }

        if (zidAuthorization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_authorization", zidAuthorization));
        }

        if (zidRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_refresh_token", zidRefreshToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountConfigUpdateValidateBeforeCall(String newStoreKey, String bridgeUrl, String storeRoot, String dbTablesPrefix, String _3dcartPrivateKey, String _3dcartAccessToken, String _3dcartapiApiKey, String amazonSpClientId, String amazonSpClientSecret, String amazonSpAwsUserKeyId, String amazonSpAwsUserSecret, String amazonSpAwsRegion, String amazonSpAwsRoleArn, String amazonSpRefreshToken, String amazonSpApiEnvironment, String amazonAccessToken, String amazonSellerId, String amazonMarketplacesIds, String amazonSecretKey, String amazonAccessKeyId, String aspdotnetstorefrontApiUser, String aspdotnetstorefrontApiPass, String bigcommerceapiAdminAccount, String bigcommerceapiApiPath, String bigcommerceapiApiKey, String bigcommerceapiClientId, String bigcommerceapiAccessToken, String bigcommerceapiContext, String demandwareClientId, String demandwareApiPassword, String demandwareUserName, String demandwareUserPassword, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String ecwidAcessToken, String ecwidStoreId, String etsyKeystring, String etsySharedSecret, String etsyAccessToken, String etsyTokenSecret, String etsyClientId, String etsyRefreshToken, String netoApiKey, String netoApiUsername, String shopifyApiKey, String shopifyApiPassword, String shopifySharedSecret, String shopifyAccessToken, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String volusionLogin, String volusionPassword, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String squarespaceApiKey, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String lightspeedApiKey, String lightspeedApiSecret, String commercehqApiKey, String commercehqApiPassword, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, final ApiCallback _callback) throws ApiException {
        return accountConfigUpdateCall(newStoreKey, bridgeUrl, storeRoot, dbTablesPrefix, _3dcartPrivateKey, _3dcartAccessToken, _3dcartapiApiKey, amazonSpClientId, amazonSpClientSecret, amazonSpAwsUserKeyId, amazonSpAwsUserSecret, amazonSpAwsRegion, amazonSpAwsRoleArn, amazonSpRefreshToken, amazonSpApiEnvironment, amazonAccessToken, amazonSellerId, amazonMarketplacesIds, amazonSecretKey, amazonAccessKeyId, aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount, bigcommerceapiApiPath, bigcommerceapiApiKey, bigcommerceapiClientId, bigcommerceapiAccessToken, bigcommerceapiContext, demandwareClientId, demandwareApiPassword, demandwareUserName, demandwareUserPassword, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, ecwidAcessToken, ecwidStoreId, etsyKeystring, etsySharedSecret, etsyAccessToken, etsyTokenSecret, etsyClientId, etsyRefreshToken, netoApiKey, netoApiUsername, shopifyApiKey, shopifyApiPassword, shopifySharedSecret, shopifyAccessToken, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, volusionLogin, volusionPassword, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, squarespaceApiKey, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, lightspeedApiKey, lightspeedApiSecret, commercehqApiKey, commercehqApiPassword, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, _callback);

    }

    /**
     * 
     * Update configs in the API2Cart database.
     * @param newStoreKey Update store key (optional)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param _3dcartapiApiKey 3DCart API Key (optional)
     * @param amazonSpClientId Amazon SP API app client id (optional)
     * @param amazonSpClientSecret Amazon SP API app client secret (optional)
     * @param amazonSpAwsUserKeyId Amazon AWS user access key ID (optional)
     * @param amazonSpAwsUserSecret Amazon AWS user secret access key (optional)
     * @param amazonSpAwsRegion Amazon AWS Region (optional)
     * @param amazonSpAwsRoleArn Amazon AWS Role ARN (optional)
     * @param amazonSpRefreshToken Amazon SP API OAuth refresh token (optional)
     * @param amazonSpApiEnvironment Amazon SP API environment (optional, default to production)
     * @param amazonAccessToken MWS Auth Token. Access token authorizing the app to access resources on behalf of a user (optional)
     * @param amazonSellerId Amazon Seller ID (Merchant token) (optional)
     * @param amazonMarketplacesIds Amazon Marketplace IDs comma separated string (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password (optional)
     * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param bigcommerceapiApiPath BigCommerce API URL (optional)
     * @param bigcommerceapiApiKey Bigcommerce API Key (optional)
     * @param bigcommerceapiClientId Client ID of the requesting app (optional)
     * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param bigcommerceapiContext API Path section unique to the store (optional)
     * @param demandwareClientId Demandware client id (optional)
     * @param demandwareApiPassword Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param ecwidStoreId Store Id (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyClientId Etsy Client Id (optional)
     * @param etsyRefreshToken Etsy Refresh token (optional)
     * @param netoApiKey Neto API Key (optional)
     * @param netoApiUsername Neto User Name (optional)
     * @param shopifyApiKey Shopify API Key (optional)
     * @param shopifyApiPassword Shopify API Password (optional)
     * @param shopifySharedSecret Shared secret (optional)
     * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param volusionLogin It&#39;s a Volusion account for which API is enabled (optional)
     * @param volusionPassword Volusion API Password (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param squarespaceApiKey Squarespace API Key (optional)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response accountConfigUpdate(String newStoreKey, String bridgeUrl, String storeRoot, String dbTablesPrefix, String _3dcartPrivateKey, String _3dcartAccessToken, String _3dcartapiApiKey, String amazonSpClientId, String amazonSpClientSecret, String amazonSpAwsUserKeyId, String amazonSpAwsUserSecret, String amazonSpAwsRegion, String amazonSpAwsRoleArn, String amazonSpRefreshToken, String amazonSpApiEnvironment, String amazonAccessToken, String amazonSellerId, String amazonMarketplacesIds, String amazonSecretKey, String amazonAccessKeyId, String aspdotnetstorefrontApiUser, String aspdotnetstorefrontApiPass, String bigcommerceapiAdminAccount, String bigcommerceapiApiPath, String bigcommerceapiApiKey, String bigcommerceapiClientId, String bigcommerceapiAccessToken, String bigcommerceapiContext, String demandwareClientId, String demandwareApiPassword, String demandwareUserName, String demandwareUserPassword, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String ecwidAcessToken, String ecwidStoreId, String etsyKeystring, String etsySharedSecret, String etsyAccessToken, String etsyTokenSecret, String etsyClientId, String etsyRefreshToken, String netoApiKey, String netoApiUsername, String shopifyApiKey, String shopifyApiPassword, String shopifySharedSecret, String shopifyAccessToken, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String volusionLogin, String volusionPassword, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String squarespaceApiKey, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String lightspeedApiKey, String lightspeedApiSecret, String commercehqApiKey, String commercehqApiPassword, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = accountConfigUpdateWithHttpInfo(newStoreKey, bridgeUrl, storeRoot, dbTablesPrefix, _3dcartPrivateKey, _3dcartAccessToken, _3dcartapiApiKey, amazonSpClientId, amazonSpClientSecret, amazonSpAwsUserKeyId, amazonSpAwsUserSecret, amazonSpAwsRegion, amazonSpAwsRoleArn, amazonSpRefreshToken, amazonSpApiEnvironment, amazonAccessToken, amazonSellerId, amazonMarketplacesIds, amazonSecretKey, amazonAccessKeyId, aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount, bigcommerceapiApiPath, bigcommerceapiApiKey, bigcommerceapiClientId, bigcommerceapiAccessToken, bigcommerceapiContext, demandwareClientId, demandwareApiPassword, demandwareUserName, demandwareUserPassword, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, ecwidAcessToken, ecwidStoreId, etsyKeystring, etsySharedSecret, etsyAccessToken, etsyTokenSecret, etsyClientId, etsyRefreshToken, netoApiKey, netoApiUsername, shopifyApiKey, shopifyApiPassword, shopifySharedSecret, shopifyAccessToken, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, volusionLogin, volusionPassword, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, squarespaceApiKey, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, lightspeedApiKey, lightspeedApiSecret, commercehqApiKey, commercehqApiPassword, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Update configs in the API2Cart database.
     * @param newStoreKey Update store key (optional)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param _3dcartapiApiKey 3DCart API Key (optional)
     * @param amazonSpClientId Amazon SP API app client id (optional)
     * @param amazonSpClientSecret Amazon SP API app client secret (optional)
     * @param amazonSpAwsUserKeyId Amazon AWS user access key ID (optional)
     * @param amazonSpAwsUserSecret Amazon AWS user secret access key (optional)
     * @param amazonSpAwsRegion Amazon AWS Region (optional)
     * @param amazonSpAwsRoleArn Amazon AWS Role ARN (optional)
     * @param amazonSpRefreshToken Amazon SP API OAuth refresh token (optional)
     * @param amazonSpApiEnvironment Amazon SP API environment (optional, default to production)
     * @param amazonAccessToken MWS Auth Token. Access token authorizing the app to access resources on behalf of a user (optional)
     * @param amazonSellerId Amazon Seller ID (Merchant token) (optional)
     * @param amazonMarketplacesIds Amazon Marketplace IDs comma separated string (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password (optional)
     * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param bigcommerceapiApiPath BigCommerce API URL (optional)
     * @param bigcommerceapiApiKey Bigcommerce API Key (optional)
     * @param bigcommerceapiClientId Client ID of the requesting app (optional)
     * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param bigcommerceapiContext API Path section unique to the store (optional)
     * @param demandwareClientId Demandware client id (optional)
     * @param demandwareApiPassword Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param ecwidStoreId Store Id (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyClientId Etsy Client Id (optional)
     * @param etsyRefreshToken Etsy Refresh token (optional)
     * @param netoApiKey Neto API Key (optional)
     * @param netoApiUsername Neto User Name (optional)
     * @param shopifyApiKey Shopify API Key (optional)
     * @param shopifyApiPassword Shopify API Password (optional)
     * @param shopifySharedSecret Shared secret (optional)
     * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param volusionLogin It&#39;s a Volusion account for which API is enabled (optional)
     * @param volusionPassword Volusion API Password (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param squarespaceApiKey Squarespace API Key (optional)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> accountConfigUpdateWithHttpInfo(String newStoreKey, String bridgeUrl, String storeRoot, String dbTablesPrefix, String _3dcartPrivateKey, String _3dcartAccessToken, String _3dcartapiApiKey, String amazonSpClientId, String amazonSpClientSecret, String amazonSpAwsUserKeyId, String amazonSpAwsUserSecret, String amazonSpAwsRegion, String amazonSpAwsRoleArn, String amazonSpRefreshToken, String amazonSpApiEnvironment, String amazonAccessToken, String amazonSellerId, String amazonMarketplacesIds, String amazonSecretKey, String amazonAccessKeyId, String aspdotnetstorefrontApiUser, String aspdotnetstorefrontApiPass, String bigcommerceapiAdminAccount, String bigcommerceapiApiPath, String bigcommerceapiApiKey, String bigcommerceapiClientId, String bigcommerceapiAccessToken, String bigcommerceapiContext, String demandwareClientId, String demandwareApiPassword, String demandwareUserName, String demandwareUserPassword, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String ecwidAcessToken, String ecwidStoreId, String etsyKeystring, String etsySharedSecret, String etsyAccessToken, String etsyTokenSecret, String etsyClientId, String etsyRefreshToken, String netoApiKey, String netoApiUsername, String shopifyApiKey, String shopifyApiPassword, String shopifySharedSecret, String shopifyAccessToken, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String volusionLogin, String volusionPassword, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String squarespaceApiKey, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String lightspeedApiKey, String lightspeedApiSecret, String commercehqApiKey, String commercehqApiPassword, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken) throws ApiException {
        okhttp3.Call localVarCall = accountConfigUpdateValidateBeforeCall(newStoreKey, bridgeUrl, storeRoot, dbTablesPrefix, _3dcartPrivateKey, _3dcartAccessToken, _3dcartapiApiKey, amazonSpClientId, amazonSpClientSecret, amazonSpAwsUserKeyId, amazonSpAwsUserSecret, amazonSpAwsRegion, amazonSpAwsRoleArn, amazonSpRefreshToken, amazonSpApiEnvironment, amazonAccessToken, amazonSellerId, amazonMarketplacesIds, amazonSecretKey, amazonAccessKeyId, aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount, bigcommerceapiApiPath, bigcommerceapiApiKey, bigcommerceapiClientId, bigcommerceapiAccessToken, bigcommerceapiContext, demandwareClientId, demandwareApiPassword, demandwareUserName, demandwareUserPassword, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, ecwidAcessToken, ecwidStoreId, etsyKeystring, etsySharedSecret, etsyAccessToken, etsyTokenSecret, etsyClientId, etsyRefreshToken, netoApiKey, netoApiUsername, shopifyApiKey, shopifyApiPassword, shopifySharedSecret, shopifyAccessToken, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, volusionLogin, volusionPassword, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, squarespaceApiKey, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, lightspeedApiKey, lightspeedApiSecret, commercehqApiKey, commercehqApiPassword, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update configs in the API2Cart database.
     * @param newStoreKey Update store key (optional)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param _3dcartapiApiKey 3DCart API Key (optional)
     * @param amazonSpClientId Amazon SP API app client id (optional)
     * @param amazonSpClientSecret Amazon SP API app client secret (optional)
     * @param amazonSpAwsUserKeyId Amazon AWS user access key ID (optional)
     * @param amazonSpAwsUserSecret Amazon AWS user secret access key (optional)
     * @param amazonSpAwsRegion Amazon AWS Region (optional)
     * @param amazonSpAwsRoleArn Amazon AWS Role ARN (optional)
     * @param amazonSpRefreshToken Amazon SP API OAuth refresh token (optional)
     * @param amazonSpApiEnvironment Amazon SP API environment (optional, default to production)
     * @param amazonAccessToken MWS Auth Token. Access token authorizing the app to access resources on behalf of a user (optional)
     * @param amazonSellerId Amazon Seller ID (Merchant token) (optional)
     * @param amazonMarketplacesIds Amazon Marketplace IDs comma separated string (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password (optional)
     * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param bigcommerceapiApiPath BigCommerce API URL (optional)
     * @param bigcommerceapiApiKey Bigcommerce API Key (optional)
     * @param bigcommerceapiClientId Client ID of the requesting app (optional)
     * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param bigcommerceapiContext API Path section unique to the store (optional)
     * @param demandwareClientId Demandware client id (optional)
     * @param demandwareApiPassword Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param ecwidStoreId Store Id (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param etsyClientId Etsy Client Id (optional)
     * @param etsyRefreshToken Etsy Refresh token (optional)
     * @param netoApiKey Neto API Key (optional)
     * @param netoApiUsername Neto User Name (optional)
     * @param shopifyApiKey Shopify API Key (optional)
     * @param shopifyApiPassword Shopify API Password (optional)
     * @param shopifySharedSecret Shared secret (optional)
     * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param volusionLogin It&#39;s a Volusion account for which API is enabled (optional)
     * @param volusionPassword Volusion API Password (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param squarespaceApiKey Squarespace API Key (optional)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountConfigUpdateAsync(String newStoreKey, String bridgeUrl, String storeRoot, String dbTablesPrefix, String _3dcartPrivateKey, String _3dcartAccessToken, String _3dcartapiApiKey, String amazonSpClientId, String amazonSpClientSecret, String amazonSpAwsUserKeyId, String amazonSpAwsUserSecret, String amazonSpAwsRegion, String amazonSpAwsRoleArn, String amazonSpRefreshToken, String amazonSpApiEnvironment, String amazonAccessToken, String amazonSellerId, String amazonMarketplacesIds, String amazonSecretKey, String amazonAccessKeyId, String aspdotnetstorefrontApiUser, String aspdotnetstorefrontApiPass, String bigcommerceapiAdminAccount, String bigcommerceapiApiPath, String bigcommerceapiApiKey, String bigcommerceapiClientId, String bigcommerceapiAccessToken, String bigcommerceapiContext, String demandwareClientId, String demandwareApiPassword, String demandwareUserName, String demandwareUserPassword, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String ecwidAcessToken, String ecwidStoreId, String etsyKeystring, String etsySharedSecret, String etsyAccessToken, String etsyTokenSecret, String etsyClientId, String etsyRefreshToken, String netoApiKey, String netoApiUsername, String shopifyApiKey, String shopifyApiPassword, String shopifySharedSecret, String shopifyAccessToken, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String volusionLogin, String volusionPassword, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String squarespaceApiKey, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String lightspeedApiKey, String lightspeedApiSecret, String commercehqApiKey, String commercehqApiPassword, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountConfigUpdateValidateBeforeCall(newStoreKey, bridgeUrl, storeRoot, dbTablesPrefix, _3dcartPrivateKey, _3dcartAccessToken, _3dcartapiApiKey, amazonSpClientId, amazonSpClientSecret, amazonSpAwsUserKeyId, amazonSpAwsUserSecret, amazonSpAwsRegion, amazonSpAwsRoleArn, amazonSpRefreshToken, amazonSpApiEnvironment, amazonAccessToken, amazonSellerId, amazonMarketplacesIds, amazonSecretKey, amazonAccessKeyId, aspdotnetstorefrontApiUser, aspdotnetstorefrontApiPass, bigcommerceapiAdminAccount, bigcommerceapiApiPath, bigcommerceapiApiKey, bigcommerceapiClientId, bigcommerceapiAccessToken, bigcommerceapiContext, demandwareClientId, demandwareApiPassword, demandwareUserName, demandwareUserPassword, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, ecwidAcessToken, ecwidStoreId, etsyKeystring, etsySharedSecret, etsyAccessToken, etsyTokenSecret, etsyClientId, etsyRefreshToken, netoApiKey, netoApiUsername, shopifyApiKey, shopifyApiPassword, shopifySharedSecret, shopifyAccessToken, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, volusionLogin, volusionPassword, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, squarespaceApiKey, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, lightspeedApiKey, lightspeedApiSecret, commercehqApiKey, commercehqApiPassword, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountFailedWebhooks
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param ids List of сomma-separated webhook ids (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountFailedWebhooksCall(Integer count, Integer start, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account.failed_webhooks.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountFailedWebhooksValidateBeforeCall(Integer count, Integer start, String ids, final ApiCallback _callback) throws ApiException {
        return accountFailedWebhooksCall(count, start, ids, _callback);

    }

    /**
     * 
     * List webhooks that was not delivered to the callback.
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return AccountFailedWebhooks200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountFailedWebhooks200Response accountFailedWebhooks(Integer count, Integer start, String ids) throws ApiException {
        ApiResponse<AccountFailedWebhooks200Response> localVarResp = accountFailedWebhooksWithHttpInfo(count, start, ids);
        return localVarResp.getData();
    }

    /**
     * 
     * List webhooks that was not delivered to the callback.
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param ids List of сomma-separated webhook ids (optional)
     * @return ApiResponse&lt;AccountFailedWebhooks200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountFailedWebhooks200Response> accountFailedWebhooksWithHttpInfo(Integer count, Integer start, String ids) throws ApiException {
        okhttp3.Call localVarCall = accountFailedWebhooksValidateBeforeCall(count, start, ids, null);
        Type localVarReturnType = new TypeToken<AccountFailedWebhooks200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List webhooks that was not delivered to the callback.
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param ids List of сomma-separated webhook ids (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountFailedWebhooksAsync(Integer count, Integer start, String ids, final ApiCallback<AccountFailedWebhooks200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountFailedWebhooksValidateBeforeCall(count, start, ids, _callback);
        Type localVarReturnType = new TypeToken<AccountFailedWebhooks200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountSupportedPlatforms
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSupportedPlatformsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account.supported_platforms.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountSupportedPlatformsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return accountSupportedPlatformsCall(_callback);

    }

    /**
     * 
     * Get list of supported platforms
     * @return AccountSupportedPlatforms200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountSupportedPlatforms200Response accountSupportedPlatforms() throws ApiException {
        ApiResponse<AccountSupportedPlatforms200Response> localVarResp = accountSupportedPlatformsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of supported platforms
     * @return ApiResponse&lt;AccountSupportedPlatforms200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountSupportedPlatforms200Response> accountSupportedPlatformsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = accountSupportedPlatformsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountSupportedPlatforms200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of supported platforms
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountSupportedPlatformsAsync(final ApiCallback<AccountSupportedPlatforms200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountSupportedPlatformsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountSupportedPlatforms200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
