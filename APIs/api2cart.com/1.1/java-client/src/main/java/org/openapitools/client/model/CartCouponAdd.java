/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CartCouponAdd
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CartCouponAdd {
  public static final String SERIALIZED_NAME_ACTION_AMOUNT = "action_amount";
  @SerializedName(SERIALIZED_NAME_ACTION_AMOUNT)
  private BigDecimal actionAmount;

  /**
   * Defines where discount should be applied
   */
  @JsonAdapter(ActionApplyToEnum.Adapter.class)
  public enum ActionApplyToEnum {
    ORDER_TOTAL("order_total"),
    
    ITEM_PRICE("item_price"),
    
    SHIPPING("shipping");

    private String value;

    ActionApplyToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionApplyToEnum fromValue(String value) {
      for (ActionApplyToEnum b : ActionApplyToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionApplyToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionApplyToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionApplyToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionApplyToEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionApplyToEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_APPLY_TO = "action_apply_to";
  @SerializedName(SERIALIZED_NAME_ACTION_APPLY_TO)
  private ActionApplyToEnum actionApplyTo;

  public static final String SERIALIZED_NAME_ACTION_CONDITION_ENTITY = "action_condition_entity";
  @SerializedName(SERIALIZED_NAME_ACTION_CONDITION_ENTITY)
  private String actionConditionEntity;

  public static final String SERIALIZED_NAME_ACTION_CONDITION_KEY = "action_condition_key";
  @SerializedName(SERIALIZED_NAME_ACTION_CONDITION_KEY)
  private String actionConditionKey;

  public static final String SERIALIZED_NAME_ACTION_CONDITION_OPERATOR = "action_condition_operator";
  @SerializedName(SERIALIZED_NAME_ACTION_CONDITION_OPERATOR)
  private String actionConditionOperator;

  public static final String SERIALIZED_NAME_ACTION_CONDITION_VALUE = "action_condition_value";
  @SerializedName(SERIALIZED_NAME_ACTION_CONDITION_VALUE)
  private String actionConditionValue;

  /**
   * Specify how discount should be applied. If scope&#x3D;matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
   */
  @JsonAdapter(ActionScopeEnum.Adapter.class)
  public enum ActionScopeEnum {
    ORDER("order"),
    
    MATCHING_ITEMS("matching_items");

    private String value;

    ActionScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionScopeEnum fromValue(String value) {
      for (ActionScopeEnum b : ActionScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_SCOPE = "action_scope";
  @SerializedName(SERIALIZED_NAME_ACTION_SCOPE)
  private ActionScopeEnum actionScope;

  /**
   * Coupon discount type
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    PERCENT("percent"),
    
    FIXED("fixed");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_TYPE = "action_type";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private ActionTypeEnum actionType;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CODES = "codes";
  @SerializedName(SERIALIZED_NAME_CODES)
  private List<String> codes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_END = "date_end";
  @SerializedName(SERIALIZED_NAME_DATE_END)
  private String dateEnd;

  public static final String SERIALIZED_NAME_DATE_START = "date_start";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private String dateStart = "now";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_USAGE_LIMIT = "usage_limit";
  @SerializedName(SERIALIZED_NAME_USAGE_LIMIT)
  private Integer usageLimit;

  public static final String SERIALIZED_NAME_USAGE_LIMIT_PER_CUSTOMER = "usage_limit_per_customer";
  @SerializedName(SERIALIZED_NAME_USAGE_LIMIT_PER_CUSTOMER)
  private Integer usageLimitPerCustomer;

  public CartCouponAdd() {
  }

  public CartCouponAdd actionAmount(BigDecimal actionAmount) {
    this.actionAmount = actionAmount;
    return this;
  }

  /**
   * Defines the discount amount value.
   * @return actionAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getActionAmount() {
    return actionAmount;
  }

  public void setActionAmount(BigDecimal actionAmount) {
    this.actionAmount = actionAmount;
  }


  public CartCouponAdd actionApplyTo(ActionApplyToEnum actionApplyTo) {
    this.actionApplyTo = actionApplyTo;
    return this;
  }

  /**
   * Defines where discount should be applied
   * @return actionApplyTo
   */
  @javax.annotation.Nonnull
  public ActionApplyToEnum getActionApplyTo() {
    return actionApplyTo;
  }

  public void setActionApplyTo(ActionApplyToEnum actionApplyTo) {
    this.actionApplyTo = actionApplyTo;
  }


  public CartCouponAdd actionConditionEntity(String actionConditionEntity) {
    this.actionConditionEntity = actionConditionEntity;
    return this;
  }

  /**
   * Defines entity for action condition.
   * @return actionConditionEntity
   */
  @javax.annotation.Nullable
  public String getActionConditionEntity() {
    return actionConditionEntity;
  }

  public void setActionConditionEntity(String actionConditionEntity) {
    this.actionConditionEntity = actionConditionEntity;
  }


  public CartCouponAdd actionConditionKey(String actionConditionKey) {
    this.actionConditionKey = actionConditionKey;
    return this;
  }

  /**
   * Defines entity attribute code for action condition.
   * @return actionConditionKey
   */
  @javax.annotation.Nullable
  public String getActionConditionKey() {
    return actionConditionKey;
  }

  public void setActionConditionKey(String actionConditionKey) {
    this.actionConditionKey = actionConditionKey;
  }


  public CartCouponAdd actionConditionOperator(String actionConditionOperator) {
    this.actionConditionOperator = actionConditionOperator;
    return this;
  }

  /**
   * Defines condition operator.
   * @return actionConditionOperator
   */
  @javax.annotation.Nullable
  public String getActionConditionOperator() {
    return actionConditionOperator;
  }

  public void setActionConditionOperator(String actionConditionOperator) {
    this.actionConditionOperator = actionConditionOperator;
  }


  public CartCouponAdd actionConditionValue(String actionConditionValue) {
    this.actionConditionValue = actionConditionValue;
    return this;
  }

  /**
   * Defines condition attribute value/s. Can be comma separated string.
   * @return actionConditionValue
   */
  @javax.annotation.Nullable
  public String getActionConditionValue() {
    return actionConditionValue;
  }

  public void setActionConditionValue(String actionConditionValue) {
    this.actionConditionValue = actionConditionValue;
  }


  public CartCouponAdd actionScope(ActionScopeEnum actionScope) {
    this.actionScope = actionScope;
    return this;
  }

  /**
   * Specify how discount should be applied. If scope&#x3D;matching_items, then discount will be applied to each of the items that match action conditions. Scope order means that discount will be applied once.
   * @return actionScope
   */
  @javax.annotation.Nonnull
  public ActionScopeEnum getActionScope() {
    return actionScope;
  }

  public void setActionScope(ActionScopeEnum actionScope) {
    this.actionScope = actionScope;
  }


  public CartCouponAdd actionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Coupon discount type
   * @return actionType
   */
  @javax.annotation.Nonnull
  public ActionTypeEnum getActionType() {
    return actionType;
  }

  public void setActionType(ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public CartCouponAdd code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Coupon code
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CartCouponAdd codes(List<String> codes) {
    this.codes = codes;
    return this;
  }

  public CartCouponAdd addCodesItem(String codesItem) {
    if (this.codes == null) {
      this.codes = new ArrayList<>();
    }
    this.codes.add(codesItem);
    return this;
  }

  /**
   * Entity codes
   * @return codes
   */
  @javax.annotation.Nullable
  public List<String> getCodes() {
    return codes;
  }

  public void setCodes(List<String> codes) {
    this.codes = codes;
  }


  public CartCouponAdd dateEnd(String dateEnd) {
    this.dateEnd = dateEnd;
    return this;
  }

  /**
   * Defines when discount code will be expired.
   * @return dateEnd
   */
  @javax.annotation.Nullable
  public String getDateEnd() {
    return dateEnd;
  }

  public void setDateEnd(String dateEnd) {
    this.dateEnd = dateEnd;
  }


  public CartCouponAdd dateStart(String dateStart) {
    this.dateStart = dateStart;
    return this;
  }

  /**
   * Defines when discount code will be available.
   * @return dateStart
   */
  @javax.annotation.Nullable
  public String getDateStart() {
    return dateStart;
  }

  public void setDateStart(String dateStart) {
    this.dateStart = dateStart;
  }


  public CartCouponAdd name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Coupon name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CartCouponAdd storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Store Id
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public CartCouponAdd usageLimit(Integer usageLimit) {
    this.usageLimit = usageLimit;
    return this;
  }

  /**
   * Usage limit for coupon.
   * @return usageLimit
   */
  @javax.annotation.Nullable
  public Integer getUsageLimit() {
    return usageLimit;
  }

  public void setUsageLimit(Integer usageLimit) {
    this.usageLimit = usageLimit;
  }


  public CartCouponAdd usageLimitPerCustomer(Integer usageLimitPerCustomer) {
    this.usageLimitPerCustomer = usageLimitPerCustomer;
    return this;
  }

  /**
   * Usage limit per customer.
   * @return usageLimitPerCustomer
   */
  @javax.annotation.Nullable
  public Integer getUsageLimitPerCustomer() {
    return usageLimitPerCustomer;
  }

  public void setUsageLimitPerCustomer(Integer usageLimitPerCustomer) {
    this.usageLimitPerCustomer = usageLimitPerCustomer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CartCouponAdd cartCouponAdd = (CartCouponAdd) o;
    return Objects.equals(this.actionAmount, cartCouponAdd.actionAmount) &&
        Objects.equals(this.actionApplyTo, cartCouponAdd.actionApplyTo) &&
        Objects.equals(this.actionConditionEntity, cartCouponAdd.actionConditionEntity) &&
        Objects.equals(this.actionConditionKey, cartCouponAdd.actionConditionKey) &&
        Objects.equals(this.actionConditionOperator, cartCouponAdd.actionConditionOperator) &&
        Objects.equals(this.actionConditionValue, cartCouponAdd.actionConditionValue) &&
        Objects.equals(this.actionScope, cartCouponAdd.actionScope) &&
        Objects.equals(this.actionType, cartCouponAdd.actionType) &&
        Objects.equals(this.code, cartCouponAdd.code) &&
        Objects.equals(this.codes, cartCouponAdd.codes) &&
        Objects.equals(this.dateEnd, cartCouponAdd.dateEnd) &&
        Objects.equals(this.dateStart, cartCouponAdd.dateStart) &&
        Objects.equals(this.name, cartCouponAdd.name) &&
        Objects.equals(this.storeId, cartCouponAdd.storeId) &&
        Objects.equals(this.usageLimit, cartCouponAdd.usageLimit) &&
        Objects.equals(this.usageLimitPerCustomer, cartCouponAdd.usageLimitPerCustomer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionAmount, actionApplyTo, actionConditionEntity, actionConditionKey, actionConditionOperator, actionConditionValue, actionScope, actionType, code, codes, dateEnd, dateStart, name, storeId, usageLimit, usageLimitPerCustomer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CartCouponAdd {\n");
    sb.append("    actionAmount: ").append(toIndentedString(actionAmount)).append("\n");
    sb.append("    actionApplyTo: ").append(toIndentedString(actionApplyTo)).append("\n");
    sb.append("    actionConditionEntity: ").append(toIndentedString(actionConditionEntity)).append("\n");
    sb.append("    actionConditionKey: ").append(toIndentedString(actionConditionKey)).append("\n");
    sb.append("    actionConditionOperator: ").append(toIndentedString(actionConditionOperator)).append("\n");
    sb.append("    actionConditionValue: ").append(toIndentedString(actionConditionValue)).append("\n");
    sb.append("    actionScope: ").append(toIndentedString(actionScope)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codes: ").append(toIndentedString(codes)).append("\n");
    sb.append("    dateEnd: ").append(toIndentedString(dateEnd)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    usageLimit: ").append(toIndentedString(usageLimit)).append("\n");
    sb.append("    usageLimitPerCustomer: ").append(toIndentedString(usageLimitPerCustomer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action_amount");
    openapiFields.add("action_apply_to");
    openapiFields.add("action_condition_entity");
    openapiFields.add("action_condition_key");
    openapiFields.add("action_condition_operator");
    openapiFields.add("action_condition_value");
    openapiFields.add("action_scope");
    openapiFields.add("action_type");
    openapiFields.add("code");
    openapiFields.add("codes");
    openapiFields.add("date_end");
    openapiFields.add("date_start");
    openapiFields.add("name");
    openapiFields.add("store_id");
    openapiFields.add("usage_limit");
    openapiFields.add("usage_limit_per_customer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action_amount");
    openapiRequiredFields.add("action_apply_to");
    openapiRequiredFields.add("action_scope");
    openapiRequiredFields.add("action_type");
    openapiRequiredFields.add("code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CartCouponAdd
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CartCouponAdd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CartCouponAdd is not found in the empty JSON string", CartCouponAdd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CartCouponAdd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CartCouponAdd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CartCouponAdd.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action_apply_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_apply_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_apply_to").toString()));
      }
      // validate the required field `action_apply_to`
      ActionApplyToEnum.validateJsonElement(jsonObj.get("action_apply_to"));
      if ((jsonObj.get("action_condition_entity") != null && !jsonObj.get("action_condition_entity").isJsonNull()) && !jsonObj.get("action_condition_entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_condition_entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_condition_entity").toString()));
      }
      if ((jsonObj.get("action_condition_key") != null && !jsonObj.get("action_condition_key").isJsonNull()) && !jsonObj.get("action_condition_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_condition_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_condition_key").toString()));
      }
      if ((jsonObj.get("action_condition_operator") != null && !jsonObj.get("action_condition_operator").isJsonNull()) && !jsonObj.get("action_condition_operator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_condition_operator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_condition_operator").toString()));
      }
      if ((jsonObj.get("action_condition_value") != null && !jsonObj.get("action_condition_value").isJsonNull()) && !jsonObj.get("action_condition_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_condition_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_condition_value").toString()));
      }
      if (!jsonObj.get("action_scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_scope").toString()));
      }
      // validate the required field `action_scope`
      ActionScopeEnum.validateJsonElement(jsonObj.get("action_scope"));
      if (!jsonObj.get("action_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_type").toString()));
      }
      // validate the required field `action_type`
      ActionTypeEnum.validateJsonElement(jsonObj.get("action_type"));
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("codes") != null && !jsonObj.get("codes").isJsonNull() && !jsonObj.get("codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `codes` to be an array in the JSON string but got `%s`", jsonObj.get("codes").toString()));
      }
      if ((jsonObj.get("date_end") != null && !jsonObj.get("date_end").isJsonNull()) && !jsonObj.get("date_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_end").toString()));
      }
      if ((jsonObj.get("date_start") != null && !jsonObj.get("date_start").isJsonNull()) && !jsonObj.get("date_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_start").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CartCouponAdd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CartCouponAdd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CartCouponAdd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CartCouponAdd.class));

       return (TypeAdapter<T>) new TypeAdapter<CartCouponAdd>() {
           @Override
           public void write(JsonWriter out, CartCouponAdd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CartCouponAdd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CartCouponAdd given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CartCouponAdd
   * @throws IOException if the JSON string is invalid with respect to CartCouponAdd
   */
  public static CartCouponAdd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CartCouponAdd.class);
  }

  /**
   * Convert an instance of CartCouponAdd to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

