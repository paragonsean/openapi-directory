/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CartValidate200Response;
import org.openapitools.client.model.ModelResponseProductAttributeList;
import org.openapitools.client.model.ModelResponseProductChildItemList;
import org.openapitools.client.model.ModelResponseProductList;
import org.openapitools.client.model.ProductAdd;
import org.openapitools.client.model.ProductAdd200Response;
import org.openapitools.client.model.ProductAttributeValueSet200Response;
import org.openapitools.client.model.ProductAttributeValueUnset200Response;
import org.openapitools.client.model.ProductBrandList200Response;
import org.openapitools.client.model.ProductChildItemFind200Response;
import org.openapitools.client.model.ProductChildItemInfo200Response;
import org.openapitools.client.model.ProductCount200Response;
import org.openapitools.client.model.ProductCurrencyAdd200Response;
import org.openapitools.client.model.ProductCurrencyList200Response;
import org.openapitools.client.model.ProductDelete200Response;
import org.openapitools.client.model.ProductFind200Response;
import org.openapitools.client.model.ProductImageAdd;
import org.openapitools.client.model.ProductImageAdd200Response;
import org.openapitools.client.model.ProductImageUpdate200Response;
import org.openapitools.client.model.ProductInfo200Response;
import org.openapitools.client.model.ProductManufacturerAdd200Response;
import org.openapitools.client.model.ProductOptionAdd200Response;
import org.openapitools.client.model.ProductOptionAssign200Response;
import org.openapitools.client.model.ProductOptionList200Response;
import org.openapitools.client.model.ProductOptionValueAdd200Response;
import org.openapitools.client.model.ProductOptionValueAssign200Response;
import org.openapitools.client.model.ProductPriceAdd;
import org.openapitools.client.model.ProductPriceUpdate;
import org.openapitools.client.model.ProductReviewList200Response;
import org.openapitools.client.model.ProductTaxAdd;
import org.openapitools.client.model.ProductTaxAdd200Response;
import org.openapitools.client.model.ProductUpdate;
import org.openapitools.client.model.ProductVariantAdd;
import org.openapitools.client.model.ProductVariantAdd200Response;
import org.openapitools.client.model.ProductVariantCount200Response;
import org.openapitools.client.model.ProductVariantImageAdd;
import org.openapitools.client.model.ProductVariantList200Response;
import org.openapitools.client.model.ProductVariantPriceAdd;
import org.openapitools.client.model.ProductVariantPriceUpdate;
import org.openapitools.client.model.ProductVariantUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productAdd
     * @param productAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAddCall(ProductAdd productAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productAdd;

        // create path and map variables
        String localVarPath = "/product.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productAddValidateBeforeCall(ProductAdd productAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productAdd' is set
        if (productAdd == null) {
            throw new ApiException("Missing the required parameter 'productAdd' when calling productAdd(Async)");
        }

        return productAddCall(productAdd, _callback);

    }

    /**
     * 
     * Add new product to store.
     * @param productAdd  (required)
     * @return ProductAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductAdd200Response productAdd(ProductAdd productAdd) throws ApiException {
        ApiResponse<ProductAdd200Response> localVarResp = productAddWithHttpInfo(productAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add new product to store.
     * @param productAdd  (required)
     * @return ApiResponse&lt;ProductAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAdd200Response> productAddWithHttpInfo(ProductAdd productAdd) throws ApiException {
        okhttp3.Call localVarCall = productAddValidateBeforeCall(productAdd, null);
        Type localVarReturnType = new TypeToken<ProductAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add new product to store.
     * @param productAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAddAsync(ProductAdd productAdd, final ApiCallback<ProductAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productAddValidateBeforeCall(productAdd, _callback);
        Type localVarReturnType = new TypeToken<ProductAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productAttributeList
     * @param productId Retrieves attributes specified by product id (required)
     * @param attributeId Retrieves info for specified attribute_id (optional)
     * @param variantId Defines product&#39;s variants specified by variant id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param setName Retrieves attributes specified by set_name in Magento (optional)
     * @param langId Retrieves attributes specified by language id (optional)
     * @param storeId Retrieves attributes specified by store id (optional)
     * @param sortBy Set field to sort by (optional, default to attribute_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to attribute_id,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAttributeListCall(String productId, String attributeId, String variantId, String pageCursor, Integer start, Integer count, String attributeGroupId, String setName, String langId, String storeId, String sortBy, String sortDirection, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.attribute.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (attributeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_id", attributeId));
        }

        if (variantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variant_id", variantId));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (attributeGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_group_id", attributeGroupId));
        }

        if (setName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("set_name", setName));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productAttributeListValidateBeforeCall(String productId, String attributeId, String variantId, String pageCursor, Integer start, Integer count, String attributeGroupId, String setName, String langId, String storeId, String sortBy, String sortDirection, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productAttributeList(Async)");
        }

        return productAttributeListCall(productId, attributeId, variantId, pageCursor, start, count, attributeGroupId, setName, langId, storeId, sortBy, sortDirection, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get list of attributes and values.
     * @param productId Retrieves attributes specified by product id (required)
     * @param attributeId Retrieves info for specified attribute_id (optional)
     * @param variantId Defines product&#39;s variants specified by variant id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param setName Retrieves attributes specified by set_name in Magento (optional)
     * @param langId Retrieves attributes specified by language id (optional)
     * @param storeId Retrieves attributes specified by store id (optional)
     * @param sortBy Set field to sort by (optional, default to attribute_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to attribute_id,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseProductAttributeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseProductAttributeList productAttributeList(String productId, String attributeId, String variantId, String pageCursor, Integer start, Integer count, String attributeGroupId, String setName, String langId, String storeId, String sortBy, String sortDirection, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<ModelResponseProductAttributeList> localVarResp = productAttributeListWithHttpInfo(productId, attributeId, variantId, pageCursor, start, count, attributeGroupId, setName, langId, storeId, sortBy, sortDirection, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of attributes and values.
     * @param productId Retrieves attributes specified by product id (required)
     * @param attributeId Retrieves info for specified attribute_id (optional)
     * @param variantId Defines product&#39;s variants specified by variant id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param setName Retrieves attributes specified by set_name in Magento (optional)
     * @param langId Retrieves attributes specified by language id (optional)
     * @param storeId Retrieves attributes specified by store id (optional)
     * @param sortBy Set field to sort by (optional, default to attribute_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to attribute_id,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;ModelResponseProductAttributeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseProductAttributeList> productAttributeListWithHttpInfo(String productId, String attributeId, String variantId, String pageCursor, Integer start, Integer count, String attributeGroupId, String setName, String langId, String storeId, String sortBy, String sortDirection, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = productAttributeListValidateBeforeCall(productId, attributeId, variantId, pageCursor, start, count, attributeGroupId, setName, langId, storeId, sortBy, sortDirection, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<ModelResponseProductAttributeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of attributes and values.
     * @param productId Retrieves attributes specified by product id (required)
     * @param attributeId Retrieves info for specified attribute_id (optional)
     * @param variantId Defines product&#39;s variants specified by variant id (optional)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param setName Retrieves attributes specified by set_name in Magento (optional)
     * @param langId Retrieves attributes specified by language id (optional)
     * @param storeId Retrieves attributes specified by store id (optional)
     * @param sortBy Set field to sort by (optional, default to attribute_id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to attribute_id,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAttributeListAsync(String productId, String attributeId, String variantId, String pageCursor, Integer start, Integer count, String attributeGroupId, String setName, String langId, String storeId, String sortBy, String sortDirection, String params, String responseFields, String exclude, final ApiCallback<ModelResponseProductAttributeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = productAttributeListValidateBeforeCall(productId, attributeId, variantId, pageCursor, start, count, attributeGroupId, setName, langId, storeId, sortBy, sortDirection, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseProductAttributeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productAttributeValueSet
     * @param productId Defines product id where the attribute should be added (required)
     * @param attributeId Filter by attribute_id (optional)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param attributeName Define attribute name (optional)
     * @param value Define attribute value (optional)
     * @param valueId Define attribute value id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAttributeValueSetCall(String productId, String attributeId, String attributeGroupId, String attributeName, String value, Integer valueId, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.attribute.value.set.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (attributeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_id", attributeId));
        }

        if (attributeGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_group_id", attributeGroupId));
        }

        if (attributeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_name", attributeName));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (valueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value_id", valueId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productAttributeValueSetValidateBeforeCall(String productId, String attributeId, String attributeGroupId, String attributeName, String value, Integer valueId, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productAttributeValueSet(Async)");
        }

        return productAttributeValueSetCall(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId, _callback);

    }

    /**
     * 
     * Set attribute value to product.
     * @param productId Defines product id where the attribute should be added (required)
     * @param attributeId Filter by attribute_id (optional)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param attributeName Define attribute name (optional)
     * @param value Define attribute value (optional)
     * @param valueId Define attribute value id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @return ProductAttributeValueSet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeValueSet200Response productAttributeValueSet(String productId, String attributeId, String attributeGroupId, String attributeName, String value, Integer valueId, String langId, String storeId) throws ApiException {
        ApiResponse<ProductAttributeValueSet200Response> localVarResp = productAttributeValueSetWithHttpInfo(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Set attribute value to product.
     * @param productId Defines product id where the attribute should be added (required)
     * @param attributeId Filter by attribute_id (optional)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param attributeName Define attribute name (optional)
     * @param value Define attribute value (optional)
     * @param valueId Define attribute value id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;ProductAttributeValueSet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeValueSet200Response> productAttributeValueSetWithHttpInfo(String productId, String attributeId, String attributeGroupId, String attributeName, String value, Integer valueId, String langId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productAttributeValueSetValidateBeforeCall(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId, null);
        Type localVarReturnType = new TypeToken<ProductAttributeValueSet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set attribute value to product.
     * @param productId Defines product id where the attribute should be added (required)
     * @param attributeId Filter by attribute_id (optional)
     * @param attributeGroupId Filter by attribute_group_id (optional)
     * @param attributeName Define attribute name (optional)
     * @param value Define attribute value (optional)
     * @param valueId Define attribute value id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAttributeValueSetAsync(String productId, String attributeId, String attributeGroupId, String attributeName, String value, Integer valueId, String langId, String storeId, final ApiCallback<ProductAttributeValueSet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productAttributeValueSetValidateBeforeCall(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeValueSet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productAttributeValueUnset
     * @param productId Product id (required)
     * @param attributeId Attribute Id (required)
     * @param storeId Store Id (optional)
     * @param includeDefault Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)
     * @param reindex Is reindex required (optional, default to true)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAttributeValueUnsetCall(String productId, String attributeId, String storeId, Boolean includeDefault, Boolean reindex, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.attribute.value.unset.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (attributeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attribute_id", attributeId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (includeDefault != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_default", includeDefault));
        }

        if (reindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reindex", reindex));
        }

        if (clearCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clear_cache", clearCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productAttributeValueUnsetValidateBeforeCall(String productId, String attributeId, String storeId, Boolean includeDefault, Boolean reindex, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productAttributeValueUnset(Async)");
        }

        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling productAttributeValueUnset(Async)");
        }

        return productAttributeValueUnsetCall(productId, attributeId, storeId, includeDefault, reindex, clearCache, _callback);

    }

    /**
     * 
     * Removes attribute value for a product.
     * @param productId Product id (required)
     * @param attributeId Attribute Id (required)
     * @param storeId Store Id (optional)
     * @param includeDefault Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)
     * @param reindex Is reindex required (optional, default to true)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ProductAttributeValueUnset200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductAttributeValueUnset200Response productAttributeValueUnset(String productId, String attributeId, String storeId, Boolean includeDefault, Boolean reindex, Boolean clearCache) throws ApiException {
        ApiResponse<ProductAttributeValueUnset200Response> localVarResp = productAttributeValueUnsetWithHttpInfo(productId, attributeId, storeId, includeDefault, reindex, clearCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes attribute value for a product.
     * @param productId Product id (required)
     * @param attributeId Attribute Id (required)
     * @param storeId Store Id (optional)
     * @param includeDefault Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)
     * @param reindex Is reindex required (optional, default to true)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ApiResponse&lt;ProductAttributeValueUnset200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductAttributeValueUnset200Response> productAttributeValueUnsetWithHttpInfo(String productId, String attributeId, String storeId, Boolean includeDefault, Boolean reindex, Boolean clearCache) throws ApiException {
        okhttp3.Call localVarCall = productAttributeValueUnsetValidateBeforeCall(productId, attributeId, storeId, includeDefault, reindex, clearCache, null);
        Type localVarReturnType = new TypeToken<ProductAttributeValueUnset200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes attribute value for a product.
     * @param productId Product id (required)
     * @param attributeId Attribute Id (required)
     * @param storeId Store Id (optional)
     * @param includeDefault Boolean, whether or not to unset default value of the attribute, if applicable (optional, default to false)
     * @param reindex Is reindex required (optional, default to true)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productAttributeValueUnsetAsync(String productId, String attributeId, String storeId, Boolean includeDefault, Boolean reindex, Boolean clearCache, final ApiCallback<ProductAttributeValueUnset200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productAttributeValueUnsetValidateBeforeCall(productId, attributeId, storeId, includeDefault, reindex, clearCache, _callback);
        Type localVarReturnType = new TypeToken<ProductAttributeValueUnset200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productBrandList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,short_description,active,url)
     * @param brandIds Retrieves brands specified by brand ids (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productBrandListCall(Integer start, Integer count, String params, String brandIds, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.brand.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (brandIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brand_ids", brandIds));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productBrandListValidateBeforeCall(Integer start, Integer count, String params, String brandIds, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String responseFields, final ApiCallback _callback) throws ApiException {
        return productBrandListCall(start, count, params, brandIds, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, _callback);

    }

    /**
     * 
     * Get list of brands from your store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,short_description,active,url)
     * @param brandIds Retrieves brands specified by brand ids (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ProductBrandList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductBrandList200Response productBrandList(Integer start, Integer count, String params, String brandIds, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String responseFields) throws ApiException {
        ApiResponse<ProductBrandList200Response> localVarResp = productBrandListWithHttpInfo(start, count, params, brandIds, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of brands from your store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,short_description,active,url)
     * @param brandIds Retrieves brands specified by brand ids (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse&lt;ProductBrandList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductBrandList200Response> productBrandListWithHttpInfo(Integer start, Integer count, String params, String brandIds, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = productBrandListValidateBeforeCall(start, count, params, brandIds, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, null);
        Type localVarReturnType = new TypeToken<ProductBrandList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of brands from your store.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,short_description,active,url)
     * @param brandIds Retrieves brands specified by brand ids (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productBrandListAsync(Integer start, Integer count, String params, String brandIds, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String responseFields, final ApiCallback<ProductBrandList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productBrandListValidateBeforeCall(start, count, params, brandIds, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields, _callback);
        Type localVarReturnType = new TypeToken<ProductBrandList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productChildItemFind
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChildItemFindCall(String findValue, String findWhere, String findParams, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.child_item.find.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (findValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_value", findValue));
        }

        if (findWhere != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_where", findWhere));
        }

        if (findParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_params", findParams));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productChildItemFindValidateBeforeCall(String findValue, String findWhere, String findParams, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'findValue' is set
        if (findValue == null) {
            throw new ApiException("Missing the required parameter 'findValue' when calling productChildItemFind(Async)");
        }

        return productChildItemFindCall(findValue, findWhere, findParams, storeId, _callback);

    }

    /**
     * 
     * Search product child item (bundled item or configurable product variant) in store catalog.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @return ProductChildItemFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductChildItemFind200Response productChildItemFind(String findValue, String findWhere, String findParams, String storeId) throws ApiException {
        ApiResponse<ProductChildItemFind200Response> localVarResp = productChildItemFindWithHttpInfo(findValue, findWhere, findParams, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Search product child item (bundled item or configurable product variant) in store catalog.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;ProductChildItemFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductChildItemFind200Response> productChildItemFindWithHttpInfo(String findValue, String findWhere, String findParams, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productChildItemFindValidateBeforeCall(findValue, findWhere, findParams, storeId, null);
        Type localVarReturnType = new TypeToken<ProductChildItemFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search product child item (bundled item or configurable product variant) in store catalog.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChildItemFindAsync(String findValue, String findWhere, String findParams, String storeId, final ApiCallback<ProductChildItemFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productChildItemFindValidateBeforeCall(findValue, findWhere, findParams, storeId, _callback);
        Type localVarReturnType = new TypeToken<ProductChildItemFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productChildItemInfo
     * @param productId Filter by parent product id (required)
     * @param id Entity id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChildItemInfoCall(String productId, String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.child_item.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_id", currencyId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productChildItemInfoValidateBeforeCall(String productId, String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productChildItemInfo(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productChildItemInfo(Async)");
        }

        return productChildItemInfoCall(productId, id, params, responseFields, exclude, storeId, langId, currencyId, _callback);

    }

    /**
     * 
     * Get child for specific product.
     * @param productId Filter by parent product id (required)
     * @param id Entity id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @return ProductChildItemInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductChildItemInfo200Response productChildItemInfo(String productId, String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId) throws ApiException {
        ApiResponse<ProductChildItemInfo200Response> localVarResp = productChildItemInfoWithHttpInfo(productId, id, params, responseFields, exclude, storeId, langId, currencyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get child for specific product.
     * @param productId Filter by parent product id (required)
     * @param id Entity id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @return ApiResponse&lt;ProductChildItemInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductChildItemInfo200Response> productChildItemInfoWithHttpInfo(String productId, String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId) throws ApiException {
        okhttp3.Call localVarCall = productChildItemInfoValidateBeforeCall(productId, id, params, responseFields, exclude, storeId, langId, currencyId, null);
        Type localVarReturnType = new TypeToken<ProductChildItemInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get child for specific product.
     * @param productId Filter by parent product id (required)
     * @param id Entity id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChildItemInfoAsync(String productId, String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, final ApiCallback<ProductChildItemInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productChildItemInfoValidateBeforeCall(productId, id, params, responseFields, exclude, storeId, langId, currencyId, _callback);
        Type localVarReturnType = new TypeToken<ProductChildItemInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productChildItemList
     * @param pageCursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param productId Filter by parent product id (optional)
     * @param productIds Filter by parent product ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChildItemListCall(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String productId, String productIds, String storeId, String langId, String currencyId, Boolean availSale, String reportRequestId, Boolean disableReportCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.child_item.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (productIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_ids", productIds));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_id", currencyId));
        }

        if (availSale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail_sale", availSale));
        }

        if (reportRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_request_id", reportRequestId));
        }

        if (disableReportCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable_report_cache", disableReportCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productChildItemListValidateBeforeCall(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String productId, String productIds, String storeId, String langId, String currencyId, Boolean availSale, String reportRequestId, Boolean disableReportCache, final ApiCallback _callback) throws ApiException {
        return productChildItemListCall(pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, productId, productIds, storeId, langId, currencyId, availSale, reportRequestId, disableReportCache, _callback);

    }

    /**
     * 
     * Get child items list of specific product(s).
     * @param pageCursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param productId Filter by parent product id (optional)
     * @param productIds Filter by parent product ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ModelResponseProductChildItemList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseProductChildItemList productChildItemList(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String productId, String productIds, String storeId, String langId, String currencyId, Boolean availSale, String reportRequestId, Boolean disableReportCache) throws ApiException {
        ApiResponse<ModelResponseProductChildItemList> localVarResp = productChildItemListWithHttpInfo(pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, productId, productIds, storeId, langId, currencyId, availSale, reportRequestId, disableReportCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Get child items list of specific product(s).
     * @param pageCursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param productId Filter by parent product id (optional)
     * @param productIds Filter by parent product ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ApiResponse&lt;ModelResponseProductChildItemList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseProductChildItemList> productChildItemListWithHttpInfo(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String productId, String productIds, String storeId, String langId, String currencyId, Boolean availSale, String reportRequestId, Boolean disableReportCache) throws ApiException {
        okhttp3.Call localVarCall = productChildItemListValidateBeforeCall(pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, productId, productIds, storeId, langId, currencyId, availSale, reportRequestId, disableReportCache, null);
        Type localVarReturnType = new TypeToken<ModelResponseProductChildItemList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get child items list of specific product(s).
     * @param pageCursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to force_all)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param productId Filter by parent product id (optional)
     * @param productIds Filter by parent product ids (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param currencyId Currency Id (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productChildItemListAsync(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String productId, String productIds, String storeId, String langId, String currencyId, Boolean availSale, String reportRequestId, Boolean disableReportCache, final ApiCallback<ModelResponseProductChildItemList> _callback) throws ApiException {

        okhttp3.Call localVarCall = productChildItemListValidateBeforeCall(pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, productId, productIds, storeId, langId, currencyId, availSale, reportRequestId, disableReportCache, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseProductChildItemList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCount
     * @param categoryId Counts products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Counts products specified by store id (optional)
     * @param langId Counts products specified by language id (optional)
     * @param productIds Counts products specified by product ids (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountCall(String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String productIds, String reportRequestId, Boolean disableReportCache, String brandName, List<String> productAttributes, String status, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (availView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail_view", availView));
        }

        if (availSale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail_sale", availSale));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (productIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_ids", productIds));
        }

        if (reportRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_request_id", reportRequestId));
        }

        if (disableReportCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable_report_cache", disableReportCache));
        }

        if (brandName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brand_name", brandName));
        }

        if (productAttributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "product_attributes", productAttributes));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCountValidateBeforeCall(String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String productIds, String reportRequestId, Boolean disableReportCache, String brandName, List<String> productAttributes, String status, String type, final ApiCallback _callback) throws ApiException {
        return productCountCall(categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, productIds, reportRequestId, disableReportCache, brandName, productAttributes, status, type, _callback);

    }

    /**
     * 
     * Count products in store.
     * @param categoryId Counts products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Counts products specified by store id (optional)
     * @param langId Counts products specified by language id (optional)
     * @param productIds Counts products specified by product ids (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @return ProductCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductCount200Response productCount(String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String productIds, String reportRequestId, Boolean disableReportCache, String brandName, List<String> productAttributes, String status, String type) throws ApiException {
        ApiResponse<ProductCount200Response> localVarResp = productCountWithHttpInfo(categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, productIds, reportRequestId, disableReportCache, brandName, productAttributes, status, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Count products in store.
     * @param categoryId Counts products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Counts products specified by store id (optional)
     * @param langId Counts products specified by language id (optional)
     * @param productIds Counts products specified by product ids (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @return ApiResponse&lt;ProductCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCount200Response> productCountWithHttpInfo(String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String productIds, String reportRequestId, Boolean disableReportCache, String brandName, List<String> productAttributes, String status, String type) throws ApiException {
        okhttp3.Call localVarCall = productCountValidateBeforeCall(categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, productIds, reportRequestId, disableReportCache, brandName, productAttributes, status, type, null);
        Type localVarReturnType = new TypeToken<ProductCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count products in store.
     * @param categoryId Counts products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Counts products specified by store id (optional)
     * @param langId Counts products specified by language id (optional)
     * @param productIds Counts products specified by product ids (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCountAsync(String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String productIds, String reportRequestId, Boolean disableReportCache, String brandName, List<String> productAttributes, String status, String type, final ApiCallback<ProductCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCountValidateBeforeCall(categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, productIds, reportRequestId, disableReportCache, brandName, productAttributes, status, type, _callback);
        Type localVarReturnType = new TypeToken<ProductCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCurrencyAdd
     * @param iso3 Specifies standardized currency code (required)
     * @param rate Defines the numerical identifier against to the major currency (required)
     * @param name Defines currency&#39;s name (optional)
     * @param avail Specifies whether the currency is available (optional, default to true)
     * @param symbolLeft Defines the symbol that is located before the currency (optional)
     * @param symbolRight Defines the symbol that is located after the currency (optional)
     * @param _default Specifies currency&#39;s default meaning (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCurrencyAddCall(String iso3, BigDecimal rate, String name, Boolean avail, String symbolLeft, String symbolRight, Boolean _default, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.currency.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iso3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iso3", iso3));
        }

        if (rate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rate", rate));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        if (symbolLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol_left", symbolLeft));
        }

        if (symbolRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol_right", symbolRight));
        }

        if (_default != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("default", _default));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCurrencyAddValidateBeforeCall(String iso3, BigDecimal rate, String name, Boolean avail, String symbolLeft, String symbolRight, Boolean _default, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iso3' is set
        if (iso3 == null) {
            throw new ApiException("Missing the required parameter 'iso3' when calling productCurrencyAdd(Async)");
        }

        // verify the required parameter 'rate' is set
        if (rate == null) {
            throw new ApiException("Missing the required parameter 'rate' when calling productCurrencyAdd(Async)");
        }

        return productCurrencyAddCall(iso3, rate, name, avail, symbolLeft, symbolRight, _default, _callback);

    }

    /**
     * 
     * Add currency and/or set default in store
     * @param iso3 Specifies standardized currency code (required)
     * @param rate Defines the numerical identifier against to the major currency (required)
     * @param name Defines currency&#39;s name (optional)
     * @param avail Specifies whether the currency is available (optional, default to true)
     * @param symbolLeft Defines the symbol that is located before the currency (optional)
     * @param symbolRight Defines the symbol that is located after the currency (optional)
     * @param _default Specifies currency&#39;s default meaning (optional, default to false)
     * @return ProductCurrencyAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductCurrencyAdd200Response productCurrencyAdd(String iso3, BigDecimal rate, String name, Boolean avail, String symbolLeft, String symbolRight, Boolean _default) throws ApiException {
        ApiResponse<ProductCurrencyAdd200Response> localVarResp = productCurrencyAddWithHttpInfo(iso3, rate, name, avail, symbolLeft, symbolRight, _default);
        return localVarResp.getData();
    }

    /**
     * 
     * Add currency and/or set default in store
     * @param iso3 Specifies standardized currency code (required)
     * @param rate Defines the numerical identifier against to the major currency (required)
     * @param name Defines currency&#39;s name (optional)
     * @param avail Specifies whether the currency is available (optional, default to true)
     * @param symbolLeft Defines the symbol that is located before the currency (optional)
     * @param symbolRight Defines the symbol that is located after the currency (optional)
     * @param _default Specifies currency&#39;s default meaning (optional, default to false)
     * @return ApiResponse&lt;ProductCurrencyAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCurrencyAdd200Response> productCurrencyAddWithHttpInfo(String iso3, BigDecimal rate, String name, Boolean avail, String symbolLeft, String symbolRight, Boolean _default) throws ApiException {
        okhttp3.Call localVarCall = productCurrencyAddValidateBeforeCall(iso3, rate, name, avail, symbolLeft, symbolRight, _default, null);
        Type localVarReturnType = new TypeToken<ProductCurrencyAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add currency and/or set default in store
     * @param iso3 Specifies standardized currency code (required)
     * @param rate Defines the numerical identifier against to the major currency (required)
     * @param name Defines currency&#39;s name (optional)
     * @param avail Specifies whether the currency is available (optional, default to true)
     * @param symbolLeft Defines the symbol that is located before the currency (optional)
     * @param symbolRight Defines the symbol that is located after the currency (optional)
     * @param _default Specifies currency&#39;s default meaning (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCurrencyAddAsync(String iso3, BigDecimal rate, String name, Boolean avail, String symbolLeft, String symbolRight, Boolean _default, final ApiCallback<ProductCurrencyAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCurrencyAddValidateBeforeCall(iso3, rate, name, avail, symbolLeft, symbolRight, _default, _callback);
        Type localVarReturnType = new TypeToken<ProductCurrencyAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productCurrencyList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to name,iso3,default,avail)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _default Specifies the set of default/not default currencies (optional)
     * @param avail Specifies the set of available/not available currencies (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCurrencyListCall(Integer start, Integer count, String params, String pageCursor, String exclude, String responseFields, Boolean _default, Boolean avail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.currency.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (_default != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("default", _default));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productCurrencyListValidateBeforeCall(Integer start, Integer count, String params, String pageCursor, String exclude, String responseFields, Boolean _default, Boolean avail, final ApiCallback _callback) throws ApiException {
        return productCurrencyListCall(start, count, params, pageCursor, exclude, responseFields, _default, avail, _callback);

    }

    /**
     * 
     * Get list of currencies
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to name,iso3,default,avail)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _default Specifies the set of default/not default currencies (optional)
     * @param avail Specifies the set of available/not available currencies (optional)
     * @return ProductCurrencyList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductCurrencyList200Response productCurrencyList(Integer start, Integer count, String params, String pageCursor, String exclude, String responseFields, Boolean _default, Boolean avail) throws ApiException {
        ApiResponse<ProductCurrencyList200Response> localVarResp = productCurrencyListWithHttpInfo(start, count, params, pageCursor, exclude, responseFields, _default, avail);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of currencies
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to name,iso3,default,avail)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _default Specifies the set of default/not default currencies (optional)
     * @param avail Specifies the set of available/not available currencies (optional)
     * @return ApiResponse&lt;ProductCurrencyList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductCurrencyList200Response> productCurrencyListWithHttpInfo(Integer start, Integer count, String params, String pageCursor, String exclude, String responseFields, Boolean _default, Boolean avail) throws ApiException {
        okhttp3.Call localVarCall = productCurrencyListValidateBeforeCall(start, count, params, pageCursor, exclude, responseFields, _default, avail, null);
        Type localVarReturnType = new TypeToken<ProductCurrencyList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of currencies
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to name,iso3,default,avail)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _default Specifies the set of default/not default currencies (optional)
     * @param avail Specifies the set of available/not available currencies (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productCurrencyListAsync(Integer start, Integer count, String params, String pageCursor, String exclude, String responseFields, Boolean _default, Boolean avail, final ApiCallback<ProductCurrencyList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productCurrencyListValidateBeforeCall(start, count, params, pageCursor, exclude, responseFields, _default, avail, _callback);
        Type localVarReturnType = new TypeToken<ProductCurrencyList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productDelete
     * @param id Product id that will be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productDelete(Async)");
        }

        return productDeleteCall(id, _callback);

    }

    /**
     * 
     * Product delete
     * @param id Product id that will be removed (required)
     * @return ProductDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductDelete200Response productDelete(String id) throws ApiException {
        ApiResponse<ProductDelete200Response> localVarResp = productDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Product delete
     * @param id Product id that will be removed (required)
     * @return ApiResponse&lt;ProductDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductDelete200Response> productDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = productDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProductDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Product delete
     * @param id Product id that will be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productDeleteAsync(String id, final ApiCallback<ProductDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProductDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productFields
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.fields.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return productFieldsCall(_callback);

    }

    /**
     * 
     * Retrieve all available fields for product item in store.
     * @return CartConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartConfigUpdate200Response productFields() throws ApiException {
        ApiResponse<CartConfigUpdate200Response> localVarResp = productFieldsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all available fields for product item in store.
     * @return ApiResponse&lt;CartConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartConfigUpdate200Response> productFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = productFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all available fields for product item in store.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productFieldsAsync(final ApiCallback<CartConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productFind
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param findWhat Parameter&#39;s value specifies the entity that has to be found (optional, default to product)
     * @param langId Search products specified by language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productFindCall(String findValue, String findWhere, String findParams, String findWhat, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.find.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (findValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_value", findValue));
        }

        if (findWhere != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_where", findWhere));
        }

        if (findParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_params", findParams));
        }

        if (findWhat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("find_what", findWhat));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productFindValidateBeforeCall(String findValue, String findWhere, String findParams, String findWhat, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'findValue' is set
        if (findValue == null) {
            throw new ApiException("Missing the required parameter 'findValue' when calling productFind(Async)");
        }

        return productFindCall(findValue, findWhere, findParams, findWhat, langId, storeId, _callback);

    }

    /**
     * 
     * Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param findWhat Parameter&#39;s value specifies the entity that has to be found (optional, default to product)
     * @param langId Search products specified by language id (optional)
     * @param storeId Store Id (optional)
     * @return ProductFind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductFind200Response productFind(String findValue, String findWhere, String findParams, String findWhat, String langId, String storeId) throws ApiException {
        ApiResponse<ProductFind200Response> localVarResp = productFindWithHttpInfo(findValue, findWhere, findParams, findWhat, langId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param findWhat Parameter&#39;s value specifies the entity that has to be found (optional, default to product)
     * @param langId Search products specified by language id (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;ProductFind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductFind200Response> productFindWithHttpInfo(String findValue, String findWhere, String findParams, String findWhat, String langId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productFindValidateBeforeCall(findValue, findWhere, findParams, findWhat, langId, storeId, null);
        Type localVarReturnType = new TypeToken<ProductFind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
     * @param findValue Entity search that is specified by some value (required)
     * @param findWhere Entity search that is specified by the comma-separated unique fields (optional, default to name)
     * @param findParams Entity search that is specified by comma-separated parameters (optional, default to whole_words)
     * @param findWhat Parameter&#39;s value specifies the entity that has to be found (optional, default to product)
     * @param langId Search products specified by language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productFindAsync(String findValue, String findWhere, String findParams, String findWhat, String langId, String storeId, final ApiCallback<ProductFind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productFindValidateBeforeCall(findValue, findWhere, findParams, findWhat, langId, storeId, _callback);
        Type localVarReturnType = new TypeToken<ProductFind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productImageAdd
     * @param productImageAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productImageAddCall(ProductImageAdd productImageAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productImageAdd;

        // create path and map variables
        String localVarPath = "/product.image.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productImageAddValidateBeforeCall(ProductImageAdd productImageAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productImageAdd' is set
        if (productImageAdd == null) {
            throw new ApiException("Missing the required parameter 'productImageAdd' when calling productImageAdd(Async)");
        }

        return productImageAddCall(productImageAdd, _callback);

    }

    /**
     * 
     * Add image to product
     * @param productImageAdd  (required)
     * @return ProductImageAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductImageAdd200Response productImageAdd(ProductImageAdd productImageAdd) throws ApiException {
        ApiResponse<ProductImageAdd200Response> localVarResp = productImageAddWithHttpInfo(productImageAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add image to product
     * @param productImageAdd  (required)
     * @return ApiResponse&lt;ProductImageAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductImageAdd200Response> productImageAddWithHttpInfo(ProductImageAdd productImageAdd) throws ApiException {
        okhttp3.Call localVarCall = productImageAddValidateBeforeCall(productImageAdd, null);
        Type localVarReturnType = new TypeToken<ProductImageAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add image to product
     * @param productImageAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productImageAddAsync(ProductImageAdd productImageAdd, final ApiCallback<ProductImageAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productImageAddValidateBeforeCall(productImageAdd, _callback);
        Type localVarReturnType = new TypeToken<ProductImageAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productImageDelete
     * @param productId Defines product id where the image should be deleted (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productImageDeleteCall(String productId, String id, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.image.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productImageDeleteValidateBeforeCall(String productId, String id, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productImageDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productImageDelete(Async)");
        }

        return productImageDeleteCall(productId, id, storeId, _callback);

    }

    /**
     * 
     * Delete image
     * @param productId Defines product id where the image should be deleted (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response productImageDelete(String productId, String id, String storeId) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = productImageDeleteWithHttpInfo(productId, id, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete image
     * @param productId Defines product id where the image should be deleted (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> productImageDeleteWithHttpInfo(String productId, String id, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productImageDeleteValidateBeforeCall(productId, id, storeId, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete image
     * @param productId Defines product id where the image should be deleted (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productImageDeleteAsync(String productId, String id, String storeId, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productImageDeleteValidateBeforeCall(productId, id, storeId, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productImageUpdate
     * @param productId Defines product id where the image should be updated (required)
     * @param id Defines image update specified by image id (required)
     * @param variantIds Defines product&#39;s variants ids (optional)
     * @param imageName Defines image&#39;s name (optional)
     * @param type Defines image&#39;s types that are specified by comma-separated list (optional, default to additional)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param position Defines image’s position in the list (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param hidden Define is hide image (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productImageUpdateCall(String productId, String id, String variantIds, String imageName, String type, String label, Integer position, String storeId, String langId, Boolean hidden, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.image.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (variantIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variant_ids", variantIds));
        }

        if (imageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_name", imageName));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (position != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("position", position));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (hidden != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hidden", hidden));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productImageUpdateValidateBeforeCall(String productId, String id, String variantIds, String imageName, String type, String label, Integer position, String storeId, String langId, Boolean hidden, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productImageUpdate(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productImageUpdate(Async)");
        }

        return productImageUpdateCall(productId, id, variantIds, imageName, type, label, position, storeId, langId, hidden, _callback);

    }

    /**
     * 
     * Update details of image
     * @param productId Defines product id where the image should be updated (required)
     * @param id Defines image update specified by image id (required)
     * @param variantIds Defines product&#39;s variants ids (optional)
     * @param imageName Defines image&#39;s name (optional)
     * @param type Defines image&#39;s types that are specified by comma-separated list (optional, default to additional)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param position Defines image’s position in the list (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param hidden Define is hide image (optional)
     * @return ProductImageUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductImageUpdate200Response productImageUpdate(String productId, String id, String variantIds, String imageName, String type, String label, Integer position, String storeId, String langId, Boolean hidden) throws ApiException {
        ApiResponse<ProductImageUpdate200Response> localVarResp = productImageUpdateWithHttpInfo(productId, id, variantIds, imageName, type, label, position, storeId, langId, hidden);
        return localVarResp.getData();
    }

    /**
     * 
     * Update details of image
     * @param productId Defines product id where the image should be updated (required)
     * @param id Defines image update specified by image id (required)
     * @param variantIds Defines product&#39;s variants ids (optional)
     * @param imageName Defines image&#39;s name (optional)
     * @param type Defines image&#39;s types that are specified by comma-separated list (optional, default to additional)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param position Defines image’s position in the list (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param hidden Define is hide image (optional)
     * @return ApiResponse&lt;ProductImageUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductImageUpdate200Response> productImageUpdateWithHttpInfo(String productId, String id, String variantIds, String imageName, String type, String label, Integer position, String storeId, String langId, Boolean hidden) throws ApiException {
        okhttp3.Call localVarCall = productImageUpdateValidateBeforeCall(productId, id, variantIds, imageName, type, label, position, storeId, langId, hidden, null);
        Type localVarReturnType = new TypeToken<ProductImageUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update details of image
     * @param productId Defines product id where the image should be updated (required)
     * @param id Defines image update specified by image id (required)
     * @param variantIds Defines product&#39;s variants ids (optional)
     * @param imageName Defines image&#39;s name (optional)
     * @param type Defines image&#39;s types that are specified by comma-separated list (optional, default to additional)
     * @param label Defines alternative text that has to be attached to the picture (optional)
     * @param position Defines image’s position in the list (optional)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param hidden Define is hide image (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productImageUpdateAsync(String productId, String id, String variantIds, String imageName, String type, String label, Integer position, String storeId, String langId, Boolean hidden, final ApiCallback<ProductImageUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productImageUpdateValidateBeforeCall(productId, id, variantIds, imageName, type, label, position, storeId, langId, hidden, _callback);
        Type localVarReturnType = new TypeToken<ProductImageUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productInfo
     * @param id Retrieves product&#39;s info specified by product id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves product info specified by store id (optional)
     * @param langId Retrieves product info specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productInfoCall(String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, String reportRequestId, Boolean disableReportCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_id", currencyId));
        }

        if (reportRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_request_id", reportRequestId));
        }

        if (disableReportCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable_report_cache", disableReportCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productInfoValidateBeforeCall(String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, String reportRequestId, Boolean disableReportCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productInfo(Async)");
        }

        return productInfoCall(id, params, responseFields, exclude, storeId, langId, currencyId, reportRequestId, disableReportCache, _callback);

    }

    /**
     * 
     * Get product info about product ID *** or specify other product ID.
     * @param id Retrieves product&#39;s info specified by product id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves product info specified by store id (optional)
     * @param langId Retrieves product info specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ProductInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductInfo200Response productInfo(String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, String reportRequestId, Boolean disableReportCache) throws ApiException {
        ApiResponse<ProductInfo200Response> localVarResp = productInfoWithHttpInfo(id, params, responseFields, exclude, storeId, langId, currencyId, reportRequestId, disableReportCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Get product info about product ID *** or specify other product ID.
     * @param id Retrieves product&#39;s info specified by product id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves product info specified by store id (optional)
     * @param langId Retrieves product info specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @return ApiResponse&lt;ProductInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductInfo200Response> productInfoWithHttpInfo(String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, String reportRequestId, Boolean disableReportCache) throws ApiException {
        okhttp3.Call localVarCall = productInfoValidateBeforeCall(id, params, responseFields, exclude, storeId, langId, currencyId, reportRequestId, disableReportCache, null);
        Type localVarReturnType = new TypeToken<ProductInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get product info about product ID *** or specify other product ID.
     * @param id Retrieves product&#39;s info specified by product id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves product info specified by store id (optional)
     * @param langId Retrieves product info specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productInfoAsync(String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, String reportRequestId, Boolean disableReportCache, final ApiCallback<ProductInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productInfoValidateBeforeCall(id, params, responseFields, exclude, storeId, langId, currencyId, reportRequestId, disableReportCache, _callback);
        Type localVarReturnType = new TypeToken<ProductInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productList
     * @param pageCursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param categoryId Retrieves products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Retrieves products specified by store id (optional)
     * @param langId Retrieves products specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param productIds Retrieves products specified by product ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param sortBy Set field to sort by (optional, default to id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param sku Filter by product&#39;s sku (optional)
     * @param disableCache Disable cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productListCall(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String currencyId, String productIds, Integer sinceId, String reportRequestId, Boolean disableReportCache, String sortBy, String sortDirection, String sku, Boolean disableCache, String brandName, List<String> productAttributes, String status, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (availView != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail_view", availView));
        }

        if (availSale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail_sale", availSale));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (currencyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_id", currencyId));
        }

        if (productIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_ids", productIds));
        }

        if (sinceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_id", sinceId));
        }

        if (reportRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_request_id", reportRequestId));
        }

        if (disableReportCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable_report_cache", disableReportCache));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_direction", sortDirection));
        }

        if (sku != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sku", sku));
        }

        if (disableCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("disable_cache", disableCache));
        }

        if (brandName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("brand_name", brandName));
        }

        if (productAttributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "product_attributes", productAttributes));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productListValidateBeforeCall(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String currencyId, String productIds, Integer sinceId, String reportRequestId, Boolean disableReportCache, String sortBy, String sortDirection, String sku, Boolean disableCache, String brandName, List<String> productAttributes, String status, String type, final ApiCallback _callback) throws ApiException {
        return productListCall(pageCursor, start, count, params, responseFields, exclude, categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, currencyId, productIds, sinceId, reportRequestId, disableReportCache, sortBy, sortDirection, sku, disableCache, brandName, productAttributes, status, type, _callback);

    }

    /**
     * 
     * Get list of products from your store. Returns 10 products by default.
     * @param pageCursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param categoryId Retrieves products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Retrieves products specified by store id (optional)
     * @param langId Retrieves products specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param productIds Retrieves products specified by product ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param sortBy Set field to sort by (optional, default to id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param sku Filter by product&#39;s sku (optional)
     * @param disableCache Disable cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @return ModelResponseProductList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseProductList productList(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String currencyId, String productIds, Integer sinceId, String reportRequestId, Boolean disableReportCache, String sortBy, String sortDirection, String sku, Boolean disableCache, String brandName, List<String> productAttributes, String status, String type) throws ApiException {
        ApiResponse<ModelResponseProductList> localVarResp = productListWithHttpInfo(pageCursor, start, count, params, responseFields, exclude, categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, currencyId, productIds, sinceId, reportRequestId, disableReportCache, sortBy, sortDirection, sku, disableCache, brandName, productAttributes, status, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of products from your store. Returns 10 products by default.
     * @param pageCursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param categoryId Retrieves products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Retrieves products specified by store id (optional)
     * @param langId Retrieves products specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param productIds Retrieves products specified by product ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param sortBy Set field to sort by (optional, default to id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param sku Filter by product&#39;s sku (optional)
     * @param disableCache Disable cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @return ApiResponse&lt;ModelResponseProductList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseProductList> productListWithHttpInfo(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String currencyId, String productIds, Integer sinceId, String reportRequestId, Boolean disableReportCache, String sortBy, String sortDirection, String sku, Boolean disableCache, String brandName, List<String> productAttributes, String status, String type) throws ApiException {
        okhttp3.Call localVarCall = productListValidateBeforeCall(pageCursor, start, count, params, responseFields, exclude, categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, currencyId, productIds, sinceId, reportRequestId, disableReportCache, sortBy, sortDirection, sku, disableCache, brandName, productAttributes, status, type, null);
        Type localVarReturnType = new TypeToken<ModelResponseProductList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of products from your store. Returns 10 products by default.
     * @param pageCursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price,categories_ids)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param categoryId Retrieves products specified by category id (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param availView Specifies the set of visible/invisible products (optional)
     * @param availSale Specifies the set of available/not available products for sale (optional)
     * @param storeId Retrieves products specified by store id (optional)
     * @param langId Retrieves products specified by language id (optional)
     * @param currencyId Currency Id (optional)
     * @param productIds Retrieves products specified by product ids (optional)
     * @param sinceId Retrieve entities starting from the specified id. (optional)
     * @param reportRequestId Report request id (optional)
     * @param disableReportCache Disable report cache for current request (optional, default to false)
     * @param sortBy Set field to sort by (optional, default to id)
     * @param sortDirection Set sorting direction (optional, default to asc)
     * @param sku Filter by product&#39;s sku (optional)
     * @param disableCache Disable cache for current request (optional, default to false)
     * @param brandName Retrieves brands specified by brand name (optional)
     * @param productAttributes Defines product attributes (optional)
     * @param status Defines product&#39;s status (optional)
     * @param type Defines products&#39;s type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productListAsync(String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String currencyId, String productIds, Integer sinceId, String reportRequestId, Boolean disableReportCache, String sortBy, String sortDirection, String sku, Boolean disableCache, String brandName, List<String> productAttributes, String status, String type, final ApiCallback<ModelResponseProductList> _callback) throws ApiException {

        okhttp3.Call localVarCall = productListValidateBeforeCall(pageCursor, start, count, params, responseFields, exclude, categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, currencyId, productIds, sinceId, reportRequestId, disableReportCache, sortBy, sortDirection, sku, disableCache, brandName, productAttributes, status, type, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseProductList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productManufacturerAdd
     * @param productId Defines products specified by product id (required)
     * @param manufacturer Defines product’s manufacturer&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productManufacturerAddCall(String productId, String manufacturer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.manufacturer.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (manufacturer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("manufacturer", manufacturer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productManufacturerAddValidateBeforeCall(String productId, String manufacturer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productManufacturerAdd(Async)");
        }

        // verify the required parameter 'manufacturer' is set
        if (manufacturer == null) {
            throw new ApiException("Missing the required parameter 'manufacturer' when calling productManufacturerAdd(Async)");
        }

        return productManufacturerAddCall(productId, manufacturer, _callback);

    }

    /**
     * 
     * Add manufacturer to store and assign to product
     * @param productId Defines products specified by product id (required)
     * @param manufacturer Defines product’s manufacturer&#39;s name (required)
     * @return ProductManufacturerAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductManufacturerAdd200Response productManufacturerAdd(String productId, String manufacturer) throws ApiException {
        ApiResponse<ProductManufacturerAdd200Response> localVarResp = productManufacturerAddWithHttpInfo(productId, manufacturer);
        return localVarResp.getData();
    }

    /**
     * 
     * Add manufacturer to store and assign to product
     * @param productId Defines products specified by product id (required)
     * @param manufacturer Defines product’s manufacturer&#39;s name (required)
     * @return ApiResponse&lt;ProductManufacturerAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductManufacturerAdd200Response> productManufacturerAddWithHttpInfo(String productId, String manufacturer) throws ApiException {
        okhttp3.Call localVarCall = productManufacturerAddValidateBeforeCall(productId, manufacturer, null);
        Type localVarReturnType = new TypeToken<ProductManufacturerAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add manufacturer to store and assign to product
     * @param productId Defines products specified by product id (required)
     * @param manufacturer Defines product’s manufacturer&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productManufacturerAddAsync(String productId, String manufacturer, final ApiCallback<ProductManufacturerAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productManufacturerAddValidateBeforeCall(productId, manufacturer, _callback);
        Type localVarReturnType = new TypeToken<ProductManufacturerAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOptionAdd
     * @param name Defines option&#39;s name (required)
     * @param type Defines option&#39;s type that has to be added (required)
     * @param productId Defines product id where the option should be added (optional)
     * @param defaultOptionValue Defines default option value that has to be added (optional)
     * @param optionValues Defines option values that has to be added (optional)
     * @param description Defines option&#39;s description (optional)
     * @param avail Defines whether the option is available (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param required Defines if the option is required (optional, default to false)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionAddCall(String name, String type, String productId, String defaultOptionValue, String optionValues, String description, Boolean avail, Integer sortOrder, Boolean required, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.option.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (defaultOptionValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("default_option_value", defaultOptionValue));
        }

        if (optionValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_values", optionValues));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (required != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("required", required));
        }

        if (clearCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clear_cache", clearCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOptionAddValidateBeforeCall(String name, String type, String productId, String defaultOptionValue, String optionValues, String description, Boolean avail, Integer sortOrder, Boolean required, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling productOptionAdd(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling productOptionAdd(Async)");
        }

        return productOptionAddCall(name, type, productId, defaultOptionValue, optionValues, description, avail, sortOrder, required, clearCache, _callback);

    }

    /**
     * 
     * Add product option from store.
     * @param name Defines option&#39;s name (required)
     * @param type Defines option&#39;s type that has to be added (required)
     * @param productId Defines product id where the option should be added (optional)
     * @param defaultOptionValue Defines default option value that has to be added (optional)
     * @param optionValues Defines option values that has to be added (optional)
     * @param description Defines option&#39;s description (optional)
     * @param avail Defines whether the option is available (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param required Defines if the option is required (optional, default to false)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ProductOptionAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductOptionAdd200Response productOptionAdd(String name, String type, String productId, String defaultOptionValue, String optionValues, String description, Boolean avail, Integer sortOrder, Boolean required, Boolean clearCache) throws ApiException {
        ApiResponse<ProductOptionAdd200Response> localVarResp = productOptionAddWithHttpInfo(name, type, productId, defaultOptionValue, optionValues, description, avail, sortOrder, required, clearCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Add product option from store.
     * @param name Defines option&#39;s name (required)
     * @param type Defines option&#39;s type that has to be added (required)
     * @param productId Defines product id where the option should be added (optional)
     * @param defaultOptionValue Defines default option value that has to be added (optional)
     * @param optionValues Defines option values that has to be added (optional)
     * @param description Defines option&#39;s description (optional)
     * @param avail Defines whether the option is available (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param required Defines if the option is required (optional, default to false)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ApiResponse&lt;ProductOptionAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOptionAdd200Response> productOptionAddWithHttpInfo(String name, String type, String productId, String defaultOptionValue, String optionValues, String description, Boolean avail, Integer sortOrder, Boolean required, Boolean clearCache) throws ApiException {
        okhttp3.Call localVarCall = productOptionAddValidateBeforeCall(name, type, productId, defaultOptionValue, optionValues, description, avail, sortOrder, required, clearCache, null);
        Type localVarReturnType = new TypeToken<ProductOptionAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add product option from store.
     * @param name Defines option&#39;s name (required)
     * @param type Defines option&#39;s type that has to be added (required)
     * @param productId Defines product id where the option should be added (optional)
     * @param defaultOptionValue Defines default option value that has to be added (optional)
     * @param optionValues Defines option values that has to be added (optional)
     * @param description Defines option&#39;s description (optional)
     * @param avail Defines whether the option is available (optional, default to true)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param required Defines if the option is required (optional, default to false)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionAddAsync(String name, String type, String productId, String defaultOptionValue, String optionValues, String description, Boolean avail, Integer sortOrder, Boolean required, Boolean clearCache, final ApiCallback<ProductOptionAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOptionAddValidateBeforeCall(name, type, productId, defaultOptionValue, optionValues, description, avail, sortOrder, required, clearCache, _callback);
        Type localVarReturnType = new TypeToken<ProductOptionAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOptionAssign
     * @param productId Defines product id where the option should be assigned (required)
     * @param optionId Defines option id which has to be assigned (required)
     * @param required Defines if the option is required (optional, default to false)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param optionValues Defines option values that has to be assigned (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionAssignCall(String productId, String optionId, Boolean required, Integer sortOrder, String optionValues, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.option.assign.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (optionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_id", optionId));
        }

        if (required != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("required", required));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (optionValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_values", optionValues));
        }

        if (clearCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clear_cache", clearCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOptionAssignValidateBeforeCall(String productId, String optionId, Boolean required, Integer sortOrder, String optionValues, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productOptionAssign(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling productOptionAssign(Async)");
        }

        return productOptionAssignCall(productId, optionId, required, sortOrder, optionValues, clearCache, _callback);

    }

    /**
     * 
     * Assign option from product.
     * @param productId Defines product id where the option should be assigned (required)
     * @param optionId Defines option id which has to be assigned (required)
     * @param required Defines if the option is required (optional, default to false)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param optionValues Defines option values that has to be assigned (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ProductOptionAssign200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductOptionAssign200Response productOptionAssign(String productId, String optionId, Boolean required, Integer sortOrder, String optionValues, Boolean clearCache) throws ApiException {
        ApiResponse<ProductOptionAssign200Response> localVarResp = productOptionAssignWithHttpInfo(productId, optionId, required, sortOrder, optionValues, clearCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Assign option from product.
     * @param productId Defines product id where the option should be assigned (required)
     * @param optionId Defines option id which has to be assigned (required)
     * @param required Defines if the option is required (optional, default to false)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param optionValues Defines option values that has to be assigned (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ApiResponse&lt;ProductOptionAssign200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOptionAssign200Response> productOptionAssignWithHttpInfo(String productId, String optionId, Boolean required, Integer sortOrder, String optionValues, Boolean clearCache) throws ApiException {
        okhttp3.Call localVarCall = productOptionAssignValidateBeforeCall(productId, optionId, required, sortOrder, optionValues, clearCache, null);
        Type localVarReturnType = new TypeToken<ProductOptionAssign200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign option from product.
     * @param productId Defines product id where the option should be assigned (required)
     * @param optionId Defines option id which has to be assigned (required)
     * @param required Defines if the option is required (optional, default to false)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param optionValues Defines option values that has to be assigned (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionAssignAsync(String productId, String optionId, Boolean required, Integer sortOrder, String optionValues, Boolean clearCache, final ApiCallback<ProductOptionAssign200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOptionAssignValidateBeforeCall(productId, optionId, required, sortOrder, optionValues, clearCache, _callback);
        Type localVarReturnType = new TypeToken<ProductOptionAssign200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOptionList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param productId Retrieves products&#39; options specified by product id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionListCall(Integer start, Integer count, String params, String exclude, String responseFields, String productId, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.option.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOptionListValidateBeforeCall(Integer start, Integer count, String params, String exclude, String responseFields, String productId, String langId, String storeId, final ApiCallback _callback) throws ApiException {
        return productOptionListCall(start, count, params, exclude, responseFields, productId, langId, storeId, _callback);

    }

    /**
     * 
     * Get list of options.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param productId Retrieves products&#39; options specified by product id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @return ProductOptionList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductOptionList200Response productOptionList(Integer start, Integer count, String params, String exclude, String responseFields, String productId, String langId, String storeId) throws ApiException {
        ApiResponse<ProductOptionList200Response> localVarResp = productOptionListWithHttpInfo(start, count, params, exclude, responseFields, productId, langId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of options.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param productId Retrieves products&#39; options specified by product id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;ProductOptionList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOptionList200Response> productOptionListWithHttpInfo(Integer start, Integer count, String params, String exclude, String responseFields, String productId, String langId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productOptionListValidateBeforeCall(start, count, params, exclude, responseFields, productId, langId, storeId, null);
        Type localVarReturnType = new TypeToken<ProductOptionList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of options.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param productId Retrieves products&#39; options specified by product id (optional)
     * @param langId Language id (optional)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionListAsync(Integer start, Integer count, String params, String exclude, String responseFields, String productId, String langId, String storeId, final ApiCallback<ProductOptionList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOptionListValidateBeforeCall(start, count, params, exclude, responseFields, productId, langId, storeId, _callback);
        Type localVarReturnType = new TypeToken<ProductOptionList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOptionValueAdd
     * @param productId Defines product id where the option value should be added (required)
     * @param optionId Defines option id where the value has to be added (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionValueAddCall(String productId, String optionId, String optionValue, Integer sortOrder, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.option.value.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (optionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_id", optionId));
        }

        if (optionValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_value", optionValue));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (clearCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clear_cache", clearCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOptionValueAddValidateBeforeCall(String productId, String optionId, String optionValue, Integer sortOrder, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productOptionValueAdd(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling productOptionValueAdd(Async)");
        }

        // verify the required parameter 'optionValue' is set
        if (optionValue == null) {
            throw new ApiException("Missing the required parameter 'optionValue' when calling productOptionValueAdd(Async)");
        }

        return productOptionValueAddCall(productId, optionId, optionValue, sortOrder, clearCache, _callback);

    }

    /**
     * 
     * Add product option item from option.
     * @param productId Defines product id where the option value should be added (required)
     * @param optionId Defines option id where the value has to be added (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ProductOptionValueAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductOptionValueAdd200Response productOptionValueAdd(String productId, String optionId, String optionValue, Integer sortOrder, Boolean clearCache) throws ApiException {
        ApiResponse<ProductOptionValueAdd200Response> localVarResp = productOptionValueAddWithHttpInfo(productId, optionId, optionValue, sortOrder, clearCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Add product option item from option.
     * @param productId Defines product id where the option value should be added (required)
     * @param optionId Defines option id where the value has to be added (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ApiResponse&lt;ProductOptionValueAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOptionValueAdd200Response> productOptionValueAddWithHttpInfo(String productId, String optionId, String optionValue, Integer sortOrder, Boolean clearCache) throws ApiException {
        okhttp3.Call localVarCall = productOptionValueAddValidateBeforeCall(productId, optionId, optionValue, sortOrder, clearCache, null);
        Type localVarReturnType = new TypeToken<ProductOptionValueAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add product option item from option.
     * @param productId Defines product id where the option value should be added (required)
     * @param optionId Defines option id where the value has to be added (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param sortOrder Sort number in the list (optional, default to 0)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionValueAddAsync(String productId, String optionId, String optionValue, Integer sortOrder, Boolean clearCache, final ApiCallback<ProductOptionValueAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOptionValueAddValidateBeforeCall(productId, optionId, optionValue, sortOrder, clearCache, _callback);
        Type localVarReturnType = new TypeToken<ProductOptionValueAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOptionValueAssign
     * @param productOptionId Defines product&#39;s option id where the value has to be assigned (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionValueAssignCall(Integer productOptionId, Integer optionValueId, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.option.value.assign.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productOptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_option_id", productOptionId));
        }

        if (optionValueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_value_id", optionValueId));
        }

        if (clearCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clear_cache", clearCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOptionValueAssignValidateBeforeCall(Integer productOptionId, Integer optionValueId, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productOptionId' is set
        if (productOptionId == null) {
            throw new ApiException("Missing the required parameter 'productOptionId' when calling productOptionValueAssign(Async)");
        }

        // verify the required parameter 'optionValueId' is set
        if (optionValueId == null) {
            throw new ApiException("Missing the required parameter 'optionValueId' when calling productOptionValueAssign(Async)");
        }

        return productOptionValueAssignCall(productOptionId, optionValueId, clearCache, _callback);

    }

    /**
     * 
     * Assign product option item from product.
     * @param productOptionId Defines product&#39;s option id where the value has to be assigned (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ProductOptionValueAssign200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductOptionValueAssign200Response productOptionValueAssign(Integer productOptionId, Integer optionValueId, Boolean clearCache) throws ApiException {
        ApiResponse<ProductOptionValueAssign200Response> localVarResp = productOptionValueAssignWithHttpInfo(productOptionId, optionValueId, clearCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Assign product option item from product.
     * @param productOptionId Defines product&#39;s option id where the value has to be assigned (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ApiResponse&lt;ProductOptionValueAssign200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductOptionValueAssign200Response> productOptionValueAssignWithHttpInfo(Integer productOptionId, Integer optionValueId, Boolean clearCache) throws ApiException {
        okhttp3.Call localVarCall = productOptionValueAssignValidateBeforeCall(productOptionId, optionValueId, clearCache, null);
        Type localVarReturnType = new TypeToken<ProductOptionValueAssign200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign product option item from product.
     * @param productOptionId Defines product&#39;s option id where the value has to be assigned (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionValueAssignAsync(Integer productOptionId, Integer optionValueId, Boolean clearCache, final ApiCallback<ProductOptionValueAssign200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOptionValueAssignValidateBeforeCall(productOptionId, optionValueId, clearCache, _callback);
        Type localVarReturnType = new TypeToken<ProductOptionValueAssign200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productOptionValueUpdate
     * @param productId Defines product id where the option value should be updated (required)
     * @param optionId Defines option id where the value has to be updated (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param price Defines new product option price (optional)
     * @param quantity Defines new products&#39; options quantity (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionValueUpdateCall(String productId, String optionId, Integer optionValueId, String optionValue, BigDecimal price, BigDecimal quantity, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.option.value.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (optionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_id", optionId));
        }

        if (optionValueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_value_id", optionValueId));
        }

        if (optionValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("option_value", optionValue));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (clearCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clear_cache", clearCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productOptionValueUpdateValidateBeforeCall(String productId, String optionId, Integer optionValueId, String optionValue, BigDecimal price, BigDecimal quantity, Boolean clearCache, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productOptionValueUpdate(Async)");
        }

        // verify the required parameter 'optionId' is set
        if (optionId == null) {
            throw new ApiException("Missing the required parameter 'optionId' when calling productOptionValueUpdate(Async)");
        }

        // verify the required parameter 'optionValueId' is set
        if (optionValueId == null) {
            throw new ApiException("Missing the required parameter 'optionValueId' when calling productOptionValueUpdate(Async)");
        }

        // verify the required parameter 'optionValue' is set
        if (optionValue == null) {
            throw new ApiException("Missing the required parameter 'optionValue' when calling productOptionValueUpdate(Async)");
        }

        return productOptionValueUpdateCall(productId, optionId, optionValueId, optionValue, price, quantity, clearCache, _callback);

    }

    /**
     * 
     * Update product option item from option.
     * @param productId Defines product id where the option value should be updated (required)
     * @param optionId Defines option id where the value has to be updated (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param price Defines new product option price (optional)
     * @param quantity Defines new products&#39; options quantity (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response productOptionValueUpdate(String productId, String optionId, Integer optionValueId, String optionValue, BigDecimal price, BigDecimal quantity, Boolean clearCache) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = productOptionValueUpdateWithHttpInfo(productId, optionId, optionValueId, optionValue, price, quantity, clearCache);
        return localVarResp.getData();
    }

    /**
     * 
     * Update product option item from option.
     * @param productId Defines product id where the option value should be updated (required)
     * @param optionId Defines option id where the value has to be updated (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param price Defines new product option price (optional)
     * @param quantity Defines new products&#39; options quantity (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> productOptionValueUpdateWithHttpInfo(String productId, String optionId, Integer optionValueId, String optionValue, BigDecimal price, BigDecimal quantity, Boolean clearCache) throws ApiException {
        okhttp3.Call localVarCall = productOptionValueUpdateValidateBeforeCall(productId, optionId, optionValueId, optionValue, price, quantity, clearCache, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update product option item from option.
     * @param productId Defines product id where the option value should be updated (required)
     * @param optionId Defines option id where the value has to be updated (required)
     * @param optionValueId Defines value id that has to be assigned (required)
     * @param optionValue Defines option value that has to be added (required)
     * @param price Defines new product option price (optional)
     * @param quantity Defines new products&#39; options quantity (optional)
     * @param clearCache Is cache clear required (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productOptionValueUpdateAsync(String productId, String optionId, Integer optionValueId, String optionValue, BigDecimal price, BigDecimal quantity, Boolean clearCache, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productOptionValueUpdateValidateBeforeCall(productId, optionId, optionValueId, optionValue, price, quantity, clearCache, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPriceAdd
     * @param productPriceAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPriceAddCall(ProductPriceAdd productPriceAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productPriceAdd;

        // create path and map variables
        String localVarPath = "/product.price.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPriceAddValidateBeforeCall(ProductPriceAdd productPriceAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productPriceAdd' is set
        if (productPriceAdd == null) {
            throw new ApiException("Missing the required parameter 'productPriceAdd' when calling productPriceAdd(Async)");
        }

        return productPriceAddCall(productPriceAdd, _callback);

    }

    /**
     * 
     * Add some prices to the product.
     * @param productPriceAdd  (required)
     * @return CartValidate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartValidate200Response productPriceAdd(ProductPriceAdd productPriceAdd) throws ApiException {
        ApiResponse<CartValidate200Response> localVarResp = productPriceAddWithHttpInfo(productPriceAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add some prices to the product.
     * @param productPriceAdd  (required)
     * @return ApiResponse&lt;CartValidate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartValidate200Response> productPriceAddWithHttpInfo(ProductPriceAdd productPriceAdd) throws ApiException {
        okhttp3.Call localVarCall = productPriceAddValidateBeforeCall(productPriceAdd, null);
        Type localVarReturnType = new TypeToken<CartValidate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add some prices to the product.
     * @param productPriceAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPriceAddAsync(ProductPriceAdd productPriceAdd, final ApiCallback<CartValidate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPriceAddValidateBeforeCall(productPriceAdd, _callback);
        Type localVarReturnType = new TypeToken<CartValidate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPriceDelete
     * @param productId Defines the product where the price has to be deleted (required)
     * @param groupPrices Defines product&#39;s group prices (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPriceDeleteCall(String productId, String groupPrices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.price.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (groupPrices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_prices", groupPrices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPriceDeleteValidateBeforeCall(String productId, String groupPrices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productPriceDelete(Async)");
        }

        return productPriceDeleteCall(productId, groupPrices, _callback);

    }

    /**
     * 
     * Delete some prices of the product
     * @param productId Defines the product where the price has to be deleted (required)
     * @param groupPrices Defines product&#39;s group prices (optional)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response productPriceDelete(String productId, String groupPrices) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = productPriceDeleteWithHttpInfo(productId, groupPrices);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete some prices of the product
     * @param productId Defines the product where the price has to be deleted (required)
     * @param groupPrices Defines product&#39;s group prices (optional)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> productPriceDeleteWithHttpInfo(String productId, String groupPrices) throws ApiException {
        okhttp3.Call localVarCall = productPriceDeleteValidateBeforeCall(productId, groupPrices, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete some prices of the product
     * @param productId Defines the product where the price has to be deleted (required)
     * @param groupPrices Defines product&#39;s group prices (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPriceDeleteAsync(String productId, String groupPrices, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPriceDeleteValidateBeforeCall(productId, groupPrices, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPriceUpdate
     * @param productPriceUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPriceUpdateCall(ProductPriceUpdate productPriceUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productPriceUpdate;

        // create path and map variables
        String localVarPath = "/product.price.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPriceUpdateValidateBeforeCall(ProductPriceUpdate productPriceUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productPriceUpdate' is set
        if (productPriceUpdate == null) {
            throw new ApiException("Missing the required parameter 'productPriceUpdate' when calling productPriceUpdate(Async)");
        }

        return productPriceUpdateCall(productPriceUpdate, _callback);

    }

    /**
     * 
     * Update some prices of the product.
     * @param productPriceUpdate  (required)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response productPriceUpdate(ProductPriceUpdate productPriceUpdate) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = productPriceUpdateWithHttpInfo(productPriceUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update some prices of the product.
     * @param productPriceUpdate  (required)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> productPriceUpdateWithHttpInfo(ProductPriceUpdate productPriceUpdate) throws ApiException {
        okhttp3.Call localVarCall = productPriceUpdateValidateBeforeCall(productPriceUpdate, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update some prices of the product.
     * @param productPriceUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPriceUpdateAsync(ProductPriceUpdate productPriceUpdate, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPriceUpdateValidateBeforeCall(productPriceUpdate, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productReviewList
     * @param productId Product id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves reviews specified by ids (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productReviewListCall(String productId, Integer start, String pageCursor, Integer count, String ids, String storeId, String status, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.review.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productReviewListValidateBeforeCall(String productId, Integer start, String pageCursor, Integer count, String ids, String storeId, String status, String params, String exclude, String responseFields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productReviewList(Async)");
        }

        return productReviewListCall(productId, start, pageCursor, count, ids, storeId, status, params, exclude, responseFields, _callback);

    }

    /**
     * 
     * Get reviews of a specific product.
     * @param productId Product id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves reviews specified by ids (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ProductReviewList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductReviewList200Response productReviewList(String productId, Integer start, String pageCursor, Integer count, String ids, String storeId, String status, String params, String exclude, String responseFields) throws ApiException {
        ApiResponse<ProductReviewList200Response> localVarResp = productReviewListWithHttpInfo(productId, start, pageCursor, count, ids, storeId, status, params, exclude, responseFields);
        return localVarResp.getData();
    }

    /**
     * 
     * Get reviews of a specific product.
     * @param productId Product id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves reviews specified by ids (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @return ApiResponse&lt;ProductReviewList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductReviewList200Response> productReviewListWithHttpInfo(String productId, Integer start, String pageCursor, Integer count, String ids, String storeId, String status, String params, String exclude, String responseFields) throws ApiException {
        okhttp3.Call localVarCall = productReviewListValidateBeforeCall(productId, start, pageCursor, count, ids, storeId, status, params, exclude, responseFields, null);
        Type localVarReturnType = new TypeToken<ProductReviewList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get reviews of a specific product.
     * @param productId Product id (required)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves reviews specified by ids (optional)
     * @param storeId Store Id (optional)
     * @param status Defines status (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productReviewListAsync(String productId, Integer start, String pageCursor, Integer count, String ids, String storeId, String status, String params, String exclude, String responseFields, final ApiCallback<ProductReviewList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productReviewListValidateBeforeCall(productId, start, pageCursor, count, ids, storeId, status, params, exclude, responseFields, _callback);
        Type localVarReturnType = new TypeToken<ProductReviewList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productStoreAssign
     * @param productId Defines id of the product which should be assigned to a store (required)
     * @param storeId Defines id of the store product should be assigned to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productStoreAssignCall(String productId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.store.assign.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productStoreAssignValidateBeforeCall(String productId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productStoreAssign(Async)");
        }

        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling productStoreAssign(Async)");
        }

        return productStoreAssignCall(productId, storeId, _callback);

    }

    /**
     * 
     * Assign product to store
     * @param productId Defines id of the product which should be assigned to a store (required)
     * @param storeId Defines id of the store product should be assigned to (required)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response productStoreAssign(String productId, String storeId) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = productStoreAssignWithHttpInfo(productId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Assign product to store
     * @param productId Defines id of the product which should be assigned to a store (required)
     * @param storeId Defines id of the store product should be assigned to (required)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> productStoreAssignWithHttpInfo(String productId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productStoreAssignValidateBeforeCall(productId, storeId, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Assign product to store
     * @param productId Defines id of the product which should be assigned to a store (required)
     * @param storeId Defines id of the store product should be assigned to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productStoreAssignAsync(String productId, String storeId, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productStoreAssignValidateBeforeCall(productId, storeId, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productTaxAdd
     * @param productTaxAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productTaxAddCall(ProductTaxAdd productTaxAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productTaxAdd;

        // create path and map variables
        String localVarPath = "/product.tax.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productTaxAddValidateBeforeCall(ProductTaxAdd productTaxAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productTaxAdd' is set
        if (productTaxAdd == null) {
            throw new ApiException("Missing the required parameter 'productTaxAdd' when calling productTaxAdd(Async)");
        }

        return productTaxAddCall(productTaxAdd, _callback);

    }

    /**
     * 
     * Add tax class and tax rate to store and assign to product.
     * @param productTaxAdd  (required)
     * @return ProductTaxAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductTaxAdd200Response productTaxAdd(ProductTaxAdd productTaxAdd) throws ApiException {
        ApiResponse<ProductTaxAdd200Response> localVarResp = productTaxAddWithHttpInfo(productTaxAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add tax class and tax rate to store and assign to product.
     * @param productTaxAdd  (required)
     * @return ApiResponse&lt;ProductTaxAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductTaxAdd200Response> productTaxAddWithHttpInfo(ProductTaxAdd productTaxAdd) throws ApiException {
        okhttp3.Call localVarCall = productTaxAddValidateBeforeCall(productTaxAdd, null);
        Type localVarReturnType = new TypeToken<ProductTaxAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add tax class and tax rate to store and assign to product.
     * @param productTaxAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productTaxAddAsync(ProductTaxAdd productTaxAdd, final ApiCallback<ProductTaxAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productTaxAddValidateBeforeCall(productTaxAdd, _callback);
        Type localVarReturnType = new TypeToken<ProductTaxAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productUpdate
     * @param productUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productUpdateCall(ProductUpdate productUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productUpdate;

        // create path and map variables
        String localVarPath = "/product.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productUpdateValidateBeforeCall(ProductUpdate productUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productUpdate' is set
        if (productUpdate == null) {
            throw new ApiException("Missing the required parameter 'productUpdate' when calling productUpdate(Async)");
        }

        return productUpdateCall(productUpdate, _callback);

    }

    /**
     * 
     * Update price and quantity for a specific product
     * @param productUpdate  (required)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response productUpdate(ProductUpdate productUpdate) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = productUpdateWithHttpInfo(productUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update price and quantity for a specific product
     * @param productUpdate  (required)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> productUpdateWithHttpInfo(ProductUpdate productUpdate) throws ApiException {
        okhttp3.Call localVarCall = productUpdateValidateBeforeCall(productUpdate, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update price and quantity for a specific product
     * @param productUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productUpdateAsync(ProductUpdate productUpdate, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productUpdateValidateBeforeCall(productUpdate, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantAdd
     * @param productVariantAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantAddCall(ProductVariantAdd productVariantAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productVariantAdd;

        // create path and map variables
        String localVarPath = "/product.variant.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantAddValidateBeforeCall(ProductVariantAdd productVariantAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productVariantAdd' is set
        if (productVariantAdd == null) {
            throw new ApiException("Missing the required parameter 'productVariantAdd' when calling productVariantAdd(Async)");
        }

        return productVariantAddCall(productVariantAdd, _callback);

    }

    /**
     * 
     * Add variant to product.
     * @param productVariantAdd  (required)
     * @return ProductVariantAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductVariantAdd200Response productVariantAdd(ProductVariantAdd productVariantAdd) throws ApiException {
        ApiResponse<ProductVariantAdd200Response> localVarResp = productVariantAddWithHttpInfo(productVariantAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add variant to product.
     * @param productVariantAdd  (required)
     * @return ApiResponse&lt;ProductVariantAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductVariantAdd200Response> productVariantAddWithHttpInfo(ProductVariantAdd productVariantAdd) throws ApiException {
        okhttp3.Call localVarCall = productVariantAddValidateBeforeCall(productVariantAdd, null);
        Type localVarReturnType = new TypeToken<ProductVariantAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add variant to product.
     * @param productVariantAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantAddAsync(ProductVariantAdd productVariantAdd, final ApiCallback<ProductVariantAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantAddValidateBeforeCall(productVariantAdd, _callback);
        Type localVarReturnType = new TypeToken<ProductVariantAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantCount
     * @param productId Retrieves products&#39; variants specified by product id (required)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Counts products’ variants specified by category id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call productVariantCountCall(String productId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.variant.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantCountValidateBeforeCall(String productId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productVariantCount(Async)");
        }

        return productVariantCountCall(productId, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, storeId, _callback);

    }

    /**
     * 
     * Get count variants.
     * @param productId Retrieves products&#39; variants specified by product id (required)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Counts products’ variants specified by category id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @return ProductVariantCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProductVariantCount200Response productVariantCount(String productId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String storeId) throws ApiException {
        ApiResponse<ProductVariantCount200Response> localVarResp = productVariantCountWithHttpInfo(productId, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get count variants.
     * @param productId Retrieves products&#39; variants specified by product id (required)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Counts products’ variants specified by category id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @return ApiResponse&lt;ProductVariantCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProductVariantCount200Response> productVariantCountWithHttpInfo(String productId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productVariantCountValidateBeforeCall(productId, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, storeId, null);
        Type localVarReturnType = new TypeToken<ProductVariantCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get count variants.
     * @param productId Retrieves products&#39; variants specified by product id (required)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Counts products’ variants specified by category id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call productVariantCountAsync(String productId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String storeId, final ApiCallback<ProductVariantCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantCountValidateBeforeCall(productId, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, storeId, _callback);
        Type localVarReturnType = new TypeToken<ProductVariantCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantDelete
     * @param id Defines variant removal, specified by variant id (required)
     * @param productId Defines product&#39;s id where the variant has to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantDeleteCall(String id, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.variant.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantDeleteValidateBeforeCall(String id, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productVariantDelete(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productVariantDelete(Async)");
        }

        return productVariantDeleteCall(id, productId, _callback);

    }

    /**
     * 
     * Delete variant.
     * @param id Defines variant removal, specified by variant id (required)
     * @param productId Defines product&#39;s id where the variant has to be deleted (required)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response productVariantDelete(String id, String productId) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = productVariantDeleteWithHttpInfo(id, productId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete variant.
     * @param id Defines variant removal, specified by variant id (required)
     * @param productId Defines product&#39;s id where the variant has to be deleted (required)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> productVariantDeleteWithHttpInfo(String id, String productId) throws ApiException {
        okhttp3.Call localVarCall = productVariantDeleteValidateBeforeCall(id, productId, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete variant.
     * @param id Defines variant removal, specified by variant id (required)
     * @param productId Defines product&#39;s id where the variant has to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantDeleteAsync(String id, String productId, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantDeleteValidateBeforeCall(id, productId, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantImageAdd
     * @param productVariantImageAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantImageAddCall(ProductVariantImageAdd productVariantImageAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productVariantImageAdd;

        // create path and map variables
        String localVarPath = "/product.variant.image.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantImageAddValidateBeforeCall(ProductVariantImageAdd productVariantImageAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productVariantImageAdd' is set
        if (productVariantImageAdd == null) {
            throw new ApiException("Missing the required parameter 'productVariantImageAdd' when calling productVariantImageAdd(Async)");
        }

        return productVariantImageAddCall(productVariantImageAdd, _callback);

    }

    /**
     * 
     * Add image to product
     * @param productVariantImageAdd  (required)
     * @return ProductImageAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ProductImageAdd200Response productVariantImageAdd(ProductVariantImageAdd productVariantImageAdd) throws ApiException {
        ApiResponse<ProductImageAdd200Response> localVarResp = productVariantImageAddWithHttpInfo(productVariantImageAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add image to product
     * @param productVariantImageAdd  (required)
     * @return ApiResponse&lt;ProductImageAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductImageAdd200Response> productVariantImageAddWithHttpInfo(ProductVariantImageAdd productVariantImageAdd) throws ApiException {
        okhttp3.Call localVarCall = productVariantImageAddValidateBeforeCall(productVariantImageAdd, null);
        Type localVarReturnType = new TypeToken<ProductImageAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add image to product
     * @param productVariantImageAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantImageAddAsync(ProductVariantImageAdd productVariantImageAdd, final ApiCallback<ProductImageAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantImageAddValidateBeforeCall(productVariantImageAdd, _callback);
        Type localVarReturnType = new TypeToken<ProductImageAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantImageDelete
     * @param productId Defines product id where the variant image should be deleted (required)
     * @param productVariantId Defines product&#39;s variants specified by variant id (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantImageDeleteCall(String productId, Integer productVariantId, String id, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.variant.image.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (productVariantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_variant_id", productVariantId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantImageDeleteValidateBeforeCall(String productId, Integer productVariantId, String id, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productVariantImageDelete(Async)");
        }

        // verify the required parameter 'productVariantId' is set
        if (productVariantId == null) {
            throw new ApiException("Missing the required parameter 'productVariantId' when calling productVariantImageDelete(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productVariantImageDelete(Async)");
        }

        return productVariantImageDeleteCall(productId, productVariantId, id, storeId, _callback);

    }

    /**
     * 
     * Delete  image to product
     * @param productId Defines product id where the variant image should be deleted (required)
     * @param productVariantId Defines product&#39;s variants specified by variant id (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response productVariantImageDelete(String productId, Integer productVariantId, String id, String storeId) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = productVariantImageDeleteWithHttpInfo(productId, productVariantId, id, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete  image to product
     * @param productId Defines product id where the variant image should be deleted (required)
     * @param productVariantId Defines product&#39;s variants specified by variant id (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> productVariantImageDeleteWithHttpInfo(String productId, Integer productVariantId, String id, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productVariantImageDeleteValidateBeforeCall(productId, productVariantId, id, storeId, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete  image to product
     * @param productId Defines product id where the variant image should be deleted (required)
     * @param productVariantId Defines product&#39;s variants specified by variant id (required)
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantImageDeleteAsync(String productId, Integer productVariantId, String id, String storeId, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantImageDeleteValidateBeforeCall(productId, productVariantId, id, storeId, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantInfo
     * @param id Retrieves variant&#39;s info specified by variant id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves variant info specified by store id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call productVariantInfoCall(String id, String params, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.variant.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantInfoValidateBeforeCall(String id, String params, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productVariantInfo(Async)");
        }

        return productVariantInfoCall(id, params, exclude, storeId, _callback);

    }

    /**
     * 
     * Get variant info. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.info\&quot; instead.
     * @param id Retrieves variant&#39;s info specified by variant id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves variant info specified by store id (optional)
     * @return ProductInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProductInfo200Response productVariantInfo(String id, String params, String exclude, String storeId) throws ApiException {
        ApiResponse<ProductInfo200Response> localVarResp = productVariantInfoWithHttpInfo(id, params, exclude, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get variant info. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.info\&quot; instead.
     * @param id Retrieves variant&#39;s info specified by variant id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves variant info specified by store id (optional)
     * @return ApiResponse&lt;ProductInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProductInfo200Response> productVariantInfoWithHttpInfo(String id, String params, String exclude, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productVariantInfoValidateBeforeCall(id, params, exclude, storeId, null);
        Type localVarReturnType = new TypeToken<ProductInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get variant info. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.info\&quot; instead.
     * @param id Retrieves variant&#39;s info specified by variant id (required)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Retrieves variant info specified by store id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call productVariantInfoAsync(String id, String params, String exclude, String storeId, final ApiCallback<ProductInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantInfoValidateBeforeCall(id, params, exclude, storeId, _callback);
        Type localVarReturnType = new TypeToken<ProductInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantList
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Retrieves products’ variants specified by category id (optional)
     * @param productId Retrieves products&#39; variants specified by product id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call productVariantListCall(Integer start, Integer count, String params, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String productId, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.variant.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantListValidateBeforeCall(Integer start, Integer count, String params, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String productId, String storeId, final ApiCallback _callback) throws ApiException {
        return productVariantListCall(start, count, params, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, productId, storeId, _callback);

    }

    /**
     * 
     * Get a list of variants. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.list\&quot; instead.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Retrieves products’ variants specified by category id (optional)
     * @param productId Retrieves products&#39; variants specified by product id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @return ProductVariantList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProductVariantList200Response productVariantList(Integer start, Integer count, String params, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String productId, String storeId) throws ApiException {
        ApiResponse<ProductVariantList200Response> localVarResp = productVariantListWithHttpInfo(start, count, params, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, productId, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of variants. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.list\&quot; instead.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Retrieves products’ variants specified by category id (optional)
     * @param productId Retrieves products&#39; variants specified by product id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @return ApiResponse&lt;ProductVariantList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProductVariantList200Response> productVariantListWithHttpInfo(Integer start, Integer count, String params, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String productId, String storeId) throws ApiException {
        okhttp3.Call localVarCall = productVariantListValidateBeforeCall(start, count, params, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, productId, storeId, null);
        Type localVarReturnType = new TypeToken<ProductVariantList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of variants. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.list\&quot; instead.
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description,price)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param categoryId Retrieves products’ variants specified by category id (optional)
     * @param productId Retrieves products&#39; variants specified by product id (optional)
     * @param storeId Retrieves variants specified by store id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call productVariantListAsync(Integer start, Integer count, String params, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String productId, String storeId, final ApiCallback<ProductVariantList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantListValidateBeforeCall(start, count, params, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, productId, storeId, _callback);
        Type localVarReturnType = new TypeToken<ProductVariantList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantPriceAdd
     * @param productVariantPriceAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantPriceAddCall(ProductVariantPriceAdd productVariantPriceAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productVariantPriceAdd;

        // create path and map variables
        String localVarPath = "/product.variant.price.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantPriceAddValidateBeforeCall(ProductVariantPriceAdd productVariantPriceAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productVariantPriceAdd' is set
        if (productVariantPriceAdd == null) {
            throw new ApiException("Missing the required parameter 'productVariantPriceAdd' when calling productVariantPriceAdd(Async)");
        }

        return productVariantPriceAddCall(productVariantPriceAdd, _callback);

    }

    /**
     * 
     * Add some prices to the product variant.
     * @param productVariantPriceAdd  (required)
     * @return CartValidate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartValidate200Response productVariantPriceAdd(ProductVariantPriceAdd productVariantPriceAdd) throws ApiException {
        ApiResponse<CartValidate200Response> localVarResp = productVariantPriceAddWithHttpInfo(productVariantPriceAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Add some prices to the product variant.
     * @param productVariantPriceAdd  (required)
     * @return ApiResponse&lt;CartValidate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartValidate200Response> productVariantPriceAddWithHttpInfo(ProductVariantPriceAdd productVariantPriceAdd) throws ApiException {
        okhttp3.Call localVarCall = productVariantPriceAddValidateBeforeCall(productVariantPriceAdd, null);
        Type localVarReturnType = new TypeToken<CartValidate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add some prices to the product variant.
     * @param productVariantPriceAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantPriceAddAsync(ProductVariantPriceAdd productVariantPriceAdd, final ApiCallback<CartValidate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantPriceAddValidateBeforeCall(productVariantPriceAdd, _callback);
        Type localVarReturnType = new TypeToken<CartValidate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantPriceDelete
     * @param id Defines the variant where the price has to be deleted (required)
     * @param productId Product id (required)
     * @param groupPrices Defines variants&#39;s group prices (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantPriceDeleteCall(String id, String productId, String groupPrices, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product.variant.price.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (groupPrices != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_prices", groupPrices));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantPriceDeleteValidateBeforeCall(String id, String productId, String groupPrices, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productVariantPriceDelete(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productVariantPriceDelete(Async)");
        }

        // verify the required parameter 'groupPrices' is set
        if (groupPrices == null) {
            throw new ApiException("Missing the required parameter 'groupPrices' when calling productVariantPriceDelete(Async)");
        }

        return productVariantPriceDeleteCall(id, productId, groupPrices, _callback);

    }

    /**
     * 
     * Delete some prices of the product variant.
     * @param id Defines the variant where the price has to be deleted (required)
     * @param productId Product id (required)
     * @param groupPrices Defines variants&#39;s group prices (required)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response productVariantPriceDelete(String id, String productId, String groupPrices) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = productVariantPriceDeleteWithHttpInfo(id, productId, groupPrices);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete some prices of the product variant.
     * @param id Defines the variant where the price has to be deleted (required)
     * @param productId Product id (required)
     * @param groupPrices Defines variants&#39;s group prices (required)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> productVariantPriceDeleteWithHttpInfo(String id, String productId, String groupPrices) throws ApiException {
        okhttp3.Call localVarCall = productVariantPriceDeleteValidateBeforeCall(id, productId, groupPrices, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete some prices of the product variant.
     * @param id Defines the variant where the price has to be deleted (required)
     * @param productId Product id (required)
     * @param groupPrices Defines variants&#39;s group prices (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantPriceDeleteAsync(String id, String productId, String groupPrices, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantPriceDeleteValidateBeforeCall(id, productId, groupPrices, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantPriceUpdate
     * @param productVariantPriceUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantPriceUpdateCall(ProductVariantPriceUpdate productVariantPriceUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productVariantPriceUpdate;

        // create path and map variables
        String localVarPath = "/product.variant.price.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantPriceUpdateValidateBeforeCall(ProductVariantPriceUpdate productVariantPriceUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productVariantPriceUpdate' is set
        if (productVariantPriceUpdate == null) {
            throw new ApiException("Missing the required parameter 'productVariantPriceUpdate' when calling productVariantPriceUpdate(Async)");
        }

        return productVariantPriceUpdateCall(productVariantPriceUpdate, _callback);

    }

    /**
     * 
     * Update some prices of the product variant.
     * @param productVariantPriceUpdate  (required)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response productVariantPriceUpdate(ProductVariantPriceUpdate productVariantPriceUpdate) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = productVariantPriceUpdateWithHttpInfo(productVariantPriceUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update some prices of the product variant.
     * @param productVariantPriceUpdate  (required)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> productVariantPriceUpdateWithHttpInfo(ProductVariantPriceUpdate productVariantPriceUpdate) throws ApiException {
        okhttp3.Call localVarCall = productVariantPriceUpdateValidateBeforeCall(productVariantPriceUpdate, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update some prices of the product variant.
     * @param productVariantPriceUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantPriceUpdateAsync(ProductVariantPriceUpdate productVariantPriceUpdate, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantPriceUpdateValidateBeforeCall(productVariantPriceUpdate, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productVariantUpdate
     * @param productVariantUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantUpdateCall(ProductVariantUpdate productVariantUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = productVariantUpdate;

        // create path and map variables
        String localVarPath = "/product.variant.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productVariantUpdateValidateBeforeCall(ProductVariantUpdate productVariantUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productVariantUpdate' is set
        if (productVariantUpdate == null) {
            throw new ApiException("Missing the required parameter 'productVariantUpdate' when calling productVariantUpdate(Async)");
        }

        return productVariantUpdateCall(productVariantUpdate, _callback);

    }

    /**
     * 
     * Update variant.
     * @param productVariantUpdate  (required)
     * @return AccountConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AccountConfigUpdate200Response productVariantUpdate(ProductVariantUpdate productVariantUpdate) throws ApiException {
        ApiResponse<AccountConfigUpdate200Response> localVarResp = productVariantUpdateWithHttpInfo(productVariantUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update variant.
     * @param productVariantUpdate  (required)
     * @return ApiResponse&lt;AccountConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountConfigUpdate200Response> productVariantUpdateWithHttpInfo(ProductVariantUpdate productVariantUpdate) throws ApiException {
        okhttp3.Call localVarCall = productVariantUpdateValidateBeforeCall(productVariantUpdate, null);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update variant.
     * @param productVariantUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productVariantUpdateAsync(ProductVariantUpdate productVariantUpdate, final ApiCallback<AccountConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productVariantUpdateValidateBeforeCall(productVariantUpdate, _callback);
        Type localVarReturnType = new TypeToken<AccountConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
