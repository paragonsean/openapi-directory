/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.A2CDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpecialPrice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpecialPrice {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_AVAIL = "avail";
  @SerializedName(SERIALIZED_NAME_AVAIL)
  private Boolean avail;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private A2CDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_EXPIRED_AT = "expired_at";
  @SerializedName(SERIALIZED_NAME_EXPIRED_AT)
  private A2CDateTime expiredAt;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private A2CDateTime modifiedAt;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private BigDecimal value;

  public SpecialPrice() {
  }

  public SpecialPrice additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public SpecialPrice avail(Boolean avail) {
    this.avail = avail;
    return this;
  }

  /**
   * Get avail
   * @return avail
   */
  @javax.annotation.Nullable
  public Boolean getAvail() {
    return avail;
  }

  public void setAvail(Boolean avail) {
    this.avail = avail;
  }


  public SpecialPrice createdAt(A2CDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public A2CDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(A2CDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SpecialPrice customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public SpecialPrice expiredAt(A2CDateTime expiredAt) {
    this.expiredAt = expiredAt;
    return this;
  }

  /**
   * Get expiredAt
   * @return expiredAt
   */
  @javax.annotation.Nullable
  public A2CDateTime getExpiredAt() {
    return expiredAt;
  }

  public void setExpiredAt(A2CDateTime expiredAt) {
    this.expiredAt = expiredAt;
  }


  public SpecialPrice modifiedAt(A2CDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Get modifiedAt
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public A2CDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(A2CDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public SpecialPrice value(BigDecimal value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpecialPrice specialPrice = (SpecialPrice) o;
    return Objects.equals(this.additionalFields, specialPrice.additionalFields) &&
        Objects.equals(this.avail, specialPrice.avail) &&
        Objects.equals(this.createdAt, specialPrice.createdAt) &&
        Objects.equals(this.customFields, specialPrice.customFields) &&
        Objects.equals(this.expiredAt, specialPrice.expiredAt) &&
        Objects.equals(this.modifiedAt, specialPrice.modifiedAt) &&
        Objects.equals(this.value, specialPrice.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, avail, createdAt, customFields, expiredAt, modifiedAt, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpecialPrice {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    avail: ").append(toIndentedString(avail)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("avail");
    openapiFields.add("created_at");
    openapiFields.add("custom_fields");
    openapiFields.add("expired_at");
    openapiFields.add("modified_at");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpecialPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpecialPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpecialPrice is not found in the empty JSON string", SpecialPrice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpecialPrice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpecialPrice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `created_at`
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("created_at"));
      }
      // validate the optional field `expired_at`
      if (jsonObj.get("expired_at") != null && !jsonObj.get("expired_at").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("expired_at"));
      }
      // validate the optional field `modified_at`
      if (jsonObj.get("modified_at") != null && !jsonObj.get("modified_at").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("modified_at"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpecialPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpecialPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpecialPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpecialPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<SpecialPrice>() {
           @Override
           public void write(JsonWriter out, SpecialPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpecialPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpecialPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpecialPrice
   * @throws IOException if the JSON string is invalid with respect to SpecialPrice
   */
  public static SpecialPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpecialPrice.class);
  }

  /**
   * Convert an instance of SpecialPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

