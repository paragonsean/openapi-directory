/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductTaxAddTaxRatesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProductTaxAdd
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductTaxAdd {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_TAX_RATES = "tax_rates";
  @SerializedName(SERIALIZED_NAME_TAX_RATES)
  private List<ProductTaxAddTaxRatesInner> taxRates = new ArrayList<>();

  public ProductTaxAdd() {
  }

  public ProductTaxAdd name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Defines tax class name where tax has to be added
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProductTaxAdd productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Defines products specified by product id
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ProductTaxAdd taxRates(List<ProductTaxAddTaxRatesInner> taxRates) {
    this.taxRates = taxRates;
    return this;
  }

  public ProductTaxAdd addTaxRatesItem(ProductTaxAddTaxRatesInner taxRatesItem) {
    if (this.taxRates == null) {
      this.taxRates = new ArrayList<>();
    }
    this.taxRates.add(taxRatesItem);
    return this;
  }

  /**
   * Defines tax rates of specified tax classes
   * @return taxRates
   */
  @javax.annotation.Nonnull
  public List<ProductTaxAddTaxRatesInner> getTaxRates() {
    return taxRates;
  }

  public void setTaxRates(List<ProductTaxAddTaxRatesInner> taxRates) {
    this.taxRates = taxRates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductTaxAdd productTaxAdd = (ProductTaxAdd) o;
    return Objects.equals(this.name, productTaxAdd.name) &&
        Objects.equals(this.productId, productTaxAdd.productId) &&
        Objects.equals(this.taxRates, productTaxAdd.taxRates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, productId, taxRates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductTaxAdd {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    taxRates: ").append(toIndentedString(taxRates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("product_id");
    openapiFields.add("tax_rates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tax_rates");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductTaxAdd
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductTaxAdd.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductTaxAdd is not found in the empty JSON string", ProductTaxAdd.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductTaxAdd.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductTaxAdd` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductTaxAdd.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("product_id") != null && !jsonObj.get("product_id").isJsonNull()) && !jsonObj.get("product_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("tax_rates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_rates` to be an array in the JSON string but got `%s`", jsonObj.get("tax_rates").toString()));
      }

      JsonArray jsonArraytaxRates = jsonObj.getAsJsonArray("tax_rates");
      // validate the required field `tax_rates` (array)
      for (int i = 0; i < jsonArraytaxRates.size(); i++) {
        ProductTaxAddTaxRatesInner.validateJsonElement(jsonArraytaxRates.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductTaxAdd.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductTaxAdd' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductTaxAdd> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductTaxAdd.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductTaxAdd>() {
           @Override
           public void write(JsonWriter out, ProductTaxAdd value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductTaxAdd read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductTaxAdd given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductTaxAdd
   * @throws IOException if the JSON string is invalid with respect to ProductTaxAdd
   */
  public static ProductTaxAdd fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductTaxAdd.class);
  }

  /**
   * Convert an instance of ProductTaxAdd to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

