/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountCartAdd200Response;
import org.openapitools.client.model.AttributeAdd200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.BasketLiveShippingServiceDelete200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.BridgeDelete200Response;
import org.openapitools.client.model.CartBridge200Response;
import org.openapitools.client.model.CartCatalogPriceRulesCount200Response;
import org.openapitools.client.model.CartClearCache200Response;
import org.openapitools.client.model.CartConfig200Response;
import org.openapitools.client.model.CartConfigUpdate;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CartCouponAdd;
import org.openapitools.client.model.CartCouponAdd200Response;
import org.openapitools.client.model.CartCouponCount200Response;
import org.openapitools.client.model.CartDelete200Response;
import org.openapitools.client.model.CartDisconnect200Response;
import org.openapitools.client.model.CartGiftcardAdd200Response;
import org.openapitools.client.model.CartGiftcardCount200Response;
import org.openapitools.client.model.CartInfo200Response;
import org.openapitools.client.model.CartList200Response;
import org.openapitools.client.model.CartMethods200Response;
import org.openapitools.client.model.CartPluginList200Response;
import org.openapitools.client.model.CartScriptAdd200Response;
import org.openapitools.client.model.CartShippingZonesList200Response;
import org.openapitools.client.model.CartValidate200Response;
import java.io.File;
import org.openapitools.client.model.ModelResponseCartCatalogPriceRulesList;
import org.openapitools.client.model.ModelResponseCartCouponList;
import org.openapitools.client.model.ModelResponseCartGiftCardList;
import org.openapitools.client.model.ModelResponseCartMetaDataList;
import org.openapitools.client.model.ModelResponseCartScriptList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CartApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CartApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CartApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bridgeDownload
     * @param whitelabel Identifies if there is a necessity to download whitelabel bridge. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bridgeDownloadCall(Boolean whitelabel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bridge.download.file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (whitelabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("whitelabel", whitelabel));
        }

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bridgeDownloadValidateBeforeCall(Boolean whitelabel, final ApiCallback _callback) throws ApiException {
        return bridgeDownloadCall(whitelabel, _callback);

    }

    /**
     * 
     * Download bridge for store
     * @param whitelabel Identifies if there is a necessity to download whitelabel bridge. (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public File bridgeDownload(Boolean whitelabel) throws ApiException {
        ApiResponse<File> localVarResp = bridgeDownloadWithHttpInfo(whitelabel);
        return localVarResp.getData();
    }

    /**
     * 
     * Download bridge for store
     * @param whitelabel Identifies if there is a necessity to download whitelabel bridge. (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> bridgeDownloadWithHttpInfo(Boolean whitelabel) throws ApiException {
        okhttp3.Call localVarCall = bridgeDownloadValidateBeforeCall(whitelabel, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Download bridge for store
     * @param whitelabel Identifies if there is a necessity to download whitelabel bridge. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bridgeDownloadAsync(Boolean whitelabel, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = bridgeDownloadValidateBeforeCall(whitelabel, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartBridge
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartBridgeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.bridge.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartBridgeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cartBridgeCall(_callback);

    }

    /**
     * 
     * Get bridge key and store key
     * @return CartBridge200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartBridge200Response cartBridge() throws ApiException {
        ApiResponse<CartBridge200Response> localVarResp = cartBridgeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get bridge key and store key
     * @return ApiResponse&lt;CartBridge200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartBridge200Response> cartBridgeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cartBridgeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CartBridge200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get bridge key and store key
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartBridgeAsync(final ApiCallback<CartBridge200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartBridgeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CartBridge200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCatalogPriceRulesCount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCatalogPriceRulesCountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.catalog_price_rules.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCatalogPriceRulesCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cartCatalogPriceRulesCountCall(_callback);

    }

    /**
     * 
     * Get count of cart catalog price rules discounts.
     * @return CartCatalogPriceRulesCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartCatalogPriceRulesCount200Response cartCatalogPriceRulesCount() throws ApiException {
        ApiResponse<CartCatalogPriceRulesCount200Response> localVarResp = cartCatalogPriceRulesCountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get count of cart catalog price rules discounts.
     * @return ApiResponse&lt;CartCatalogPriceRulesCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartCatalogPriceRulesCount200Response> cartCatalogPriceRulesCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cartCatalogPriceRulesCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CartCatalogPriceRulesCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get count of cart catalog price rules discounts.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCatalogPriceRulesCountAsync(final ApiCallback<CartCatalogPriceRulesCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCatalogPriceRulesCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CartCatalogPriceRulesCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCatalogPriceRulesList
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves  catalog_price_rules by ids (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCatalogPriceRulesListCall(String pageCursor, Integer start, Integer count, String ids, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.catalog_price_rules.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCatalogPriceRulesListValidateBeforeCall(String pageCursor, Integer start, Integer count, String ids, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        return cartCatalogPriceRulesListCall(pageCursor, start, count, ids, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get cart catalog price rules discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves  catalog_price_rules by ids (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartCatalogPriceRulesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCartCatalogPriceRulesList cartCatalogPriceRulesList(String pageCursor, Integer start, Integer count, String ids, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<ModelResponseCartCatalogPriceRulesList> localVarResp = cartCatalogPriceRulesListWithHttpInfo(pageCursor, start, count, ids, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cart catalog price rules discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves  catalog_price_rules by ids (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;ModelResponseCartCatalogPriceRulesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCartCatalogPriceRulesList> cartCatalogPriceRulesListWithHttpInfo(String pageCursor, Integer start, Integer count, String ids, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = cartCatalogPriceRulesListValidateBeforeCall(pageCursor, start, count, ids, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<ModelResponseCartCatalogPriceRulesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cart catalog price rules discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param ids Retrieves  catalog_price_rules by ids (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCatalogPriceRulesListAsync(String pageCursor, Integer start, Integer count, String ids, String params, String responseFields, String exclude, final ApiCallback<ModelResponseCartCatalogPriceRulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCatalogPriceRulesListValidateBeforeCall(pageCursor, start, count, ids, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCartCatalogPriceRulesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartClearCache
     * @param cacheType Defines which cache should be cleared. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartClearCacheCall(String cacheType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.clear_cache.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cache_type", cacheType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartClearCacheValidateBeforeCall(String cacheType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheType' is set
        if (cacheType == null) {
            throw new ApiException("Missing the required parameter 'cacheType' when calling cartClearCache(Async)");
        }

        return cartClearCacheCall(cacheType, _callback);

    }

    /**
     * 
     * Clear cache on store.
     * @param cacheType Defines which cache should be cleared. (required)
     * @return CartClearCache200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartClearCache200Response cartClearCache(String cacheType) throws ApiException {
        ApiResponse<CartClearCache200Response> localVarResp = cartClearCacheWithHttpInfo(cacheType);
        return localVarResp.getData();
    }

    /**
     * 
     * Clear cache on store.
     * @param cacheType Defines which cache should be cleared. (required)
     * @return ApiResponse&lt;CartClearCache200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartClearCache200Response> cartClearCacheWithHttpInfo(String cacheType) throws ApiException {
        okhttp3.Call localVarCall = cartClearCacheValidateBeforeCall(cacheType, null);
        Type localVarReturnType = new TypeToken<CartClearCache200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clear cache on store.
     * @param cacheType Defines which cache should be cleared. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartClearCacheAsync(String cacheType, final ApiCallback<CartClearCache200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartClearCacheValidateBeforeCall(cacheType, _callback);
        Type localVarReturnType = new TypeToken<CartClearCache200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartConfig
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartConfigCall(String params, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.config.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartConfigValidateBeforeCall(String params, String exclude, final ApiCallback _callback) throws ApiException {
        return cartConfigCall(params, exclude, _callback);

    }

    /**
     * 
     * Get list of cart configs
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return CartConfig200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartConfig200Response cartConfig(String params, String exclude) throws ApiException {
        ApiResponse<CartConfig200Response> localVarResp = cartConfigWithHttpInfo(params, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of cart configs
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;CartConfig200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartConfig200Response> cartConfigWithHttpInfo(String params, String exclude) throws ApiException {
        okhttp3.Call localVarCall = cartConfigValidateBeforeCall(params, exclude, null);
        Type localVarReturnType = new TypeToken<CartConfig200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of cart configs
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartConfigAsync(String params, String exclude, final ApiCallback<CartConfig200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartConfigValidateBeforeCall(params, exclude, _callback);
        Type localVarReturnType = new TypeToken<CartConfig200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartConfigUpdate
     * @param cartConfigUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartConfigUpdateCall(CartConfigUpdate cartConfigUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cartConfigUpdate;

        // create path and map variables
        String localVarPath = "/cart.config.update.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartConfigUpdateValidateBeforeCall(CartConfigUpdate cartConfigUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartConfigUpdate' is set
        if (cartConfigUpdate == null) {
            throw new ApiException("Missing the required parameter 'cartConfigUpdate' when calling cartConfigUpdate(Async)");
        }

        return cartConfigUpdateCall(cartConfigUpdate, _callback);

    }

    /**
     * 
     * Use this API method to update custom data in client database.
     * @param cartConfigUpdate  (required)
     * @return CartConfigUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CartConfigUpdate200Response cartConfigUpdate(CartConfigUpdate cartConfigUpdate) throws ApiException {
        ApiResponse<CartConfigUpdate200Response> localVarResp = cartConfigUpdateWithHttpInfo(cartConfigUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Use this API method to update custom data in client database.
     * @param cartConfigUpdate  (required)
     * @return ApiResponse&lt;CartConfigUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CartConfigUpdate200Response> cartConfigUpdateWithHttpInfo(CartConfigUpdate cartConfigUpdate) throws ApiException {
        okhttp3.Call localVarCall = cartConfigUpdateValidateBeforeCall(cartConfigUpdate, null);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use this API method to update custom data in client database.
     * @param cartConfigUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartConfigUpdateAsync(CartConfigUpdate cartConfigUpdate, final ApiCallback<CartConfigUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartConfigUpdateValidateBeforeCall(cartConfigUpdate, _callback);
        Type localVarReturnType = new TypeToken<CartConfigUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCouponAdd
     * @param cartCouponAdd  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponAddCall(CartCouponAdd cartCouponAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cartCouponAdd;

        // create path and map variables
        String localVarPath = "/cart.coupon.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCouponAddValidateBeforeCall(CartCouponAdd cartCouponAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartCouponAdd' is set
        if (cartCouponAdd == null) {
            throw new ApiException("Missing the required parameter 'cartCouponAdd' when calling cartCouponAdd(Async)");
        }

        return cartCouponAddCall(cartCouponAdd, _callback);

    }

    /**
     * 
     * Create new coupon
     * @param cartCouponAdd  (required)
     * @return CartCouponAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartCouponAdd200Response cartCouponAdd(CartCouponAdd cartCouponAdd) throws ApiException {
        ApiResponse<CartCouponAdd200Response> localVarResp = cartCouponAddWithHttpInfo(cartCouponAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new coupon
     * @param cartCouponAdd  (required)
     * @return ApiResponse&lt;CartCouponAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartCouponAdd200Response> cartCouponAddWithHttpInfo(CartCouponAdd cartCouponAdd) throws ApiException {
        okhttp3.Call localVarCall = cartCouponAddValidateBeforeCall(cartCouponAdd, null);
        Type localVarReturnType = new TypeToken<CartCouponAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new coupon
     * @param cartCouponAdd  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponAddAsync(CartCouponAdd cartCouponAdd, final ApiCallback<CartCouponAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCouponAddValidateBeforeCall(cartCouponAdd, _callback);
        Type localVarReturnType = new TypeToken<CartCouponAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCouponConditionAdd
     * @param couponId Coupon Id (required)
     * @param entity Defines condition entity type (required)
     * @param key Defines condition entity attribute key (required)
     * @param operator Defines condition operator (required)
     * @param value Defines condition value, can be comma separated according to the operator. (required)
     * @param storeId Store Id (optional)
     * @param target Defines condition operator (optional, default to coupon_prerequisite)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponConditionAddCall(String couponId, String entity, String key, String operator, String value, String storeId, String target, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.coupon.condition.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (couponId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coupon_id", couponId));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCouponConditionAddValidateBeforeCall(String couponId, String entity, String key, String operator, String value, String storeId, String target, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'couponId' is set
        if (couponId == null) {
            throw new ApiException("Missing the required parameter 'couponId' when calling cartCouponConditionAdd(Async)");
        }

        // verify the required parameter 'entity' is set
        if (entity == null) {
            throw new ApiException("Missing the required parameter 'entity' when calling cartCouponConditionAdd(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling cartCouponConditionAdd(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling cartCouponConditionAdd(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cartCouponConditionAdd(Async)");
        }

        return cartCouponConditionAddCall(couponId, entity, key, operator, value, storeId, target, _callback);

    }

    /**
     * 
     * Create new coupon condition
     * @param couponId Coupon Id (required)
     * @param entity Defines condition entity type (required)
     * @param key Defines condition entity attribute key (required)
     * @param operator Defines condition operator (required)
     * @param value Defines condition value, can be comma separated according to the operator. (required)
     * @param storeId Store Id (optional)
     * @param target Defines condition operator (optional, default to coupon_prerequisite)
     * @return BasketLiveShippingServiceDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BasketLiveShippingServiceDelete200Response cartCouponConditionAdd(String couponId, String entity, String key, String operator, String value, String storeId, String target) throws ApiException {
        ApiResponse<BasketLiveShippingServiceDelete200Response> localVarResp = cartCouponConditionAddWithHttpInfo(couponId, entity, key, operator, value, storeId, target);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new coupon condition
     * @param couponId Coupon Id (required)
     * @param entity Defines condition entity type (required)
     * @param key Defines condition entity attribute key (required)
     * @param operator Defines condition operator (required)
     * @param value Defines condition value, can be comma separated according to the operator. (required)
     * @param storeId Store Id (optional)
     * @param target Defines condition operator (optional, default to coupon_prerequisite)
     * @return ApiResponse&lt;BasketLiveShippingServiceDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketLiveShippingServiceDelete200Response> cartCouponConditionAddWithHttpInfo(String couponId, String entity, String key, String operator, String value, String storeId, String target) throws ApiException {
        okhttp3.Call localVarCall = cartCouponConditionAddValidateBeforeCall(couponId, entity, key, operator, value, storeId, target, null);
        Type localVarReturnType = new TypeToken<BasketLiveShippingServiceDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new coupon condition
     * @param couponId Coupon Id (required)
     * @param entity Defines condition entity type (required)
     * @param key Defines condition entity attribute key (required)
     * @param operator Defines condition operator (required)
     * @param value Defines condition value, can be comma separated according to the operator. (required)
     * @param storeId Store Id (optional)
     * @param target Defines condition operator (optional, default to coupon_prerequisite)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponConditionAddAsync(String couponId, String entity, String key, String operator, String value, String storeId, String target, final ApiCallback<BasketLiveShippingServiceDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCouponConditionAddValidateBeforeCall(couponId, entity, key, operator, value, storeId, target, _callback);
        Type localVarReturnType = new TypeToken<BasketLiveShippingServiceDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCouponCount
     * @param storeId Store Id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponCountCall(String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.coupon.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (dateStartFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start_from", dateStartFrom));
        }

        if (dateStartTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start_to", dateStartTo));
        }

        if (dateEndFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end_from", dateEndFrom));
        }

        if (dateEndTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end_to", dateEndTo));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCouponCountValidateBeforeCall(String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, final ApiCallback _callback) throws ApiException {
        return cartCouponCountCall(storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, _callback);

    }

    /**
     * 
     * Get cart coupons count.
     * @param storeId Store Id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return CartCouponCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartCouponCount200Response cartCouponCount(String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail) throws ApiException {
        ApiResponse<CartCouponCount200Response> localVarResp = cartCouponCountWithHttpInfo(storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cart coupons count.
     * @param storeId Store Id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @return ApiResponse&lt;CartCouponCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartCouponCount200Response> cartCouponCountWithHttpInfo(String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail) throws ApiException {
        okhttp3.Call localVarCall = cartCouponCountValidateBeforeCall(storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, null);
        Type localVarReturnType = new TypeToken<CartCouponCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cart coupons count.
     * @param storeId Store Id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Defines category&#39;s visibility status (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponCountAsync(String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, final ApiCallback<CartCouponCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCouponCountValidateBeforeCall(storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, _callback);
        Type localVarReturnType = new TypeToken<CartCouponCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCouponDelete
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponDeleteCall(String id, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.coupon.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCouponDeleteValidateBeforeCall(String id, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cartCouponDelete(Async)");
        }

        return cartCouponDeleteCall(id, storeId, _callback);

    }

    /**
     * 
     * Delete coupon
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return AttributeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeDelete200Response cartCouponDelete(String id, String storeId) throws ApiException {
        ApiResponse<AttributeDelete200Response> localVarResp = cartCouponDeleteWithHttpInfo(id, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete coupon
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;AttributeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeDelete200Response> cartCouponDeleteWithHttpInfo(String id, String storeId) throws ApiException {
        okhttp3.Call localVarCall = cartCouponDeleteValidateBeforeCall(id, storeId, null);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete coupon
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponDeleteAsync(String id, String storeId, final ApiCallback<AttributeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCouponDeleteValidateBeforeCall(id, storeId, _callback);
        Type localVarReturnType = new TypeToken<AttributeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCouponList
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param couponsIds Filter coupons by ids (optional)
     * @param storeId Filter coupons by store id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Filter coupons by avail status (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponListCall(String pageCursor, Integer start, Integer count, String couponsIds, String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, String langId, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.coupon.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (couponsIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coupons_ids", couponsIds));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (dateStartFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start_from", dateStartFrom));
        }

        if (dateStartTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start_to", dateStartTo));
        }

        if (dateEndFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end_from", dateEndFrom));
        }

        if (dateEndTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end_to", dateEndTo));
        }

        if (avail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avail", avail));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCouponListValidateBeforeCall(String pageCursor, Integer start, Integer count, String couponsIds, String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, String langId, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        return cartCouponListCall(pageCursor, start, count, couponsIds, storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, langId, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get cart coupon discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param couponsIds Filter coupons by ids (optional)
     * @param storeId Filter coupons by store id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Filter coupons by avail status (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartCouponList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCartCouponList cartCouponList(String pageCursor, Integer start, Integer count, String couponsIds, String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, String langId, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<ModelResponseCartCouponList> localVarResp = cartCouponListWithHttpInfo(pageCursor, start, count, couponsIds, storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, langId, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cart coupon discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param couponsIds Filter coupons by ids (optional)
     * @param storeId Filter coupons by store id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Filter coupons by avail status (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;ModelResponseCartCouponList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCartCouponList> cartCouponListWithHttpInfo(String pageCursor, Integer start, Integer count, String couponsIds, String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, String langId, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = cartCouponListValidateBeforeCall(pageCursor, start, count, couponsIds, storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, langId, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<ModelResponseCartCouponList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cart coupon discounts.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param couponsIds Filter coupons by ids (optional)
     * @param storeId Filter coupons by store id (optional)
     * @param dateStartFrom Filter entity by date_start (greater or equal) (optional)
     * @param dateStartTo Filter entity by date_start (less or equal) (optional)
     * @param dateEndFrom Filter entity by date_end (greater or equal) (optional)
     * @param dateEndTo Filter entity by date_end (less or equal) (optional)
     * @param avail Filter coupons by avail status (optional)
     * @param langId Language id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartCouponListAsync(String pageCursor, Integer start, Integer count, String couponsIds, String storeId, String dateStartFrom, String dateStartTo, String dateEndFrom, String dateEndTo, Boolean avail, String langId, String params, String responseFields, String exclude, final ApiCallback<ModelResponseCartCouponList> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCouponListValidateBeforeCall(pageCursor, start, count, couponsIds, storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, langId, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCartCouponList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartCreate
     * @param cartId Store’s identifier which you can get from cart_list method (required)
     * @param storeUrl A web address of a store that you would like to connect to API2Cart (required)
     * @param etsyClientId Etsy Client Id (required)
     * @param etsyRefreshToken Etsy Refresh token (required)
     * @param storeId Store Id (required)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param sharedSecret Shared secret (optional)
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @param verify Enables or disables cart&#39;s verification (optional, default to true)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param ftpHost FTP connection host (optional)
     * @param ftpUser FTP User (optional)
     * @param ftpPassword FTP Password (optional)
     * @param ftpPort FTP Port (optional)
     * @param ftpStoreDir FTP Store dir (optional)
     * @param apiKey3dcart 3DCart API Key (optional)
     * @param adminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param apiPath BigCommerce API URL (optional)
     * @param apiKey Bigcommerce API Key (optional)
     * @param clientId Client ID of the requesting app (optional)
     * @param accessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param context API Path section unique to the store (optional)
     * @param accessToken2 Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKeyShopify Shopify API Key (optional)
     * @param apiPassword Shopify API Password (optional)
     * @param accessTokenShopify Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKey2 Neto API Key (optional)
     * @param apiUsername Neto User Name (optional)
     * @param encryptedPassword Volusion API Password (optional)
     * @param login It&#39;s a Volusion account for which API is enabled (optional)
     * @param apiUserAdnsf It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param apiPass AspDotNetStorefront API Password (optional)
     * @param privateKey 3DCart Application Private Key (optional)
     * @param appToken 3DCart Token from Application (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param tokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional, default to production)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param dwClientId Demandware client id (optional)
     * @param dwApiPass Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param sellerId Seller Id (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param marketplacesIds Comma separated marketplaces ids (optional)
     * @param environment  (optional, default to production)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartCreateCall(String cartId, String storeUrl, String etsyClientId, String etsyRefreshToken, String storeId, String bridgeUrl, String storeRoot, String storeKey, String sharedSecret, Boolean validateVersion, Boolean verify, String dbTablesPrefix, String ftpHost, String ftpUser, String ftpPassword, Integer ftpPort, String ftpStoreDir, String apiKey3dcart, String adminAccount, String apiPath, String apiKey, String clientId, String accessToken, String context, String accessToken2, String apiKeyShopify, String apiPassword, String accessTokenShopify, String apiKey2, String apiUsername, String encryptedPassword, String login, String apiUserAdnsf, String apiPass, String privateKey, String appToken, String etsyKeystring, String etsySharedSecret, String tokenSecret, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String dwClientId, String dwApiPass, String demandwareUserName, String demandwareUserPassword, String sellerId, String amazonSecretKey, String amazonAccessKeyId, String marketplacesIds, String environment, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String lightspeedApiKey, String lightspeedApiSecret, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String commercehqApiKey, String commercehqApiPassword, String _3dcartPrivateKey, String _3dcartAccessToken, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.create.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cartId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cart_id", cartId));
        }

        if (storeUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_url", storeUrl));
        }

        if (bridgeUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bridge_url", bridgeUrl));
        }

        if (storeRoot != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_root", storeRoot));
        }

        if (storeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_key", storeKey));
        }

        if (sharedSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shared_secret", sharedSecret));
        }

        if (validateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_version", validateVersion));
        }

        if (verify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("verify", verify));
        }

        if (dbTablesPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("db_tables_prefix", dbTablesPrefix));
        }

        if (ftpHost != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ftp_host", ftpHost));
        }

        if (ftpUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ftp_user", ftpUser));
        }

        if (ftpPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ftp_password", ftpPassword));
        }

        if (ftpPort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ftp_port", ftpPort));
        }

        if (ftpStoreDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ftp_store_dir", ftpStoreDir));
        }

        if (apiKey3dcart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey_3dcart", apiKey3dcart));
        }

        if (adminAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AdminAccount", adminAccount));
        }

        if (apiPath != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApiPath", apiPath));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApiKey", apiKey));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessToken", accessToken));
        }

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (accessToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken2));
        }

        if (apiKeyShopify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey_shopify", apiKeyShopify));
        }

        if (apiPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiPassword", apiPassword));
        }

        if (accessTokenShopify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessToken_shopify", accessTokenShopify));
        }

        if (apiKey2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey2));
        }

        if (apiUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiUsername", apiUsername));
        }

        if (encryptedPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EncryptedPassword", encryptedPassword));
        }

        if (login != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Login", login));
        }

        if (apiUserAdnsf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiUser_adnsf", apiUserAdnsf));
        }

        if (apiPass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiPass", apiPass));
        }

        if (privateKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privateKey", privateKey));
        }

        if (appToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appToken", appToken));
        }

        if (etsyKeystring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_keystring", etsyKeystring));
        }

        if (etsySharedSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_shared_secret", etsySharedSecret));
        }

        if (tokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenSecret", tokenSecret));
        }

        if (etsyClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_client_id", etsyClientId));
        }

        if (etsyRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etsy_refresh_token", etsyRefreshToken));
        }

        if (ebayClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_client_id", ebayClientId));
        }

        if (ebayClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_client_secret", ebayClientSecret));
        }

        if (ebayRuname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_runame", ebayRuname));
        }

        if (ebayAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_access_token", ebayAccessToken));
        }

        if (ebayRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_refresh_token", ebayRefreshToken));
        }

        if (ebayEnvironment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_environment", ebayEnvironment));
        }

        if (ebaySiteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ebay_site_id", ebaySiteId));
        }

        if (dwClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dw_client_id", dwClientId));
        }

        if (dwApiPass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dw_api_pass", dwApiPass));
        }

        if (demandwareUserName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("demandware_user_name", demandwareUserName));
        }

        if (demandwareUserPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("demandware_user_password", demandwareUserPassword));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        if (amazonSecretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_secret_key", amazonSecretKey));
        }

        if (amazonAccessKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amazon_access_key_id", amazonAccessKeyId));
        }

        if (marketplacesIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketplaces_ids", marketplacesIds));
        }

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (hybrisClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_client_id", hybrisClientId));
        }

        if (hybrisClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_client_secret", hybrisClientSecret));
        }

        if (hybrisUsername != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_username", hybrisUsername));
        }

        if (hybrisPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hybris_password", hybrisPassword));
        }

        if (hybrisWebsites != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "hybris_websites", hybrisWebsites));
        }

        if (walmartClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_client_id", walmartClientId));
        }

        if (walmartClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_client_secret", walmartClientSecret));
        }

        if (walmartEnvironment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_environment", walmartEnvironment));
        }

        if (walmartChannelType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("walmart_channel_type", walmartChannelType));
        }

        if (lightspeedApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lightspeed_api_key", lightspeedApiKey));
        }

        if (lightspeedApiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lightspeed_api_secret", lightspeedApiSecret));
        }

        if (shopwareAccessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopware_access_key", shopwareAccessKey));
        }

        if (shopwareApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopware_api_key", shopwareApiKey));
        }

        if (shopwareApiSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopware_api_secret", shopwareApiSecret));
        }

        if (commercehqApiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commercehq_api_key", commercehqApiKey));
        }

        if (commercehqApiPassword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("commercehq_api_password", commercehqApiPassword));
        }

        if (_3dcartPrivateKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("3dcart_private_key", _3dcartPrivateKey));
        }

        if (_3dcartAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("3dcart_access_token", _3dcartAccessToken));
        }

        if (wcConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wc_consumer_key", wcConsumerKey));
        }

        if (wcConsumerSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wc_consumer_secret", wcConsumerSecret));
        }

        if (magentoConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_consumer_key", magentoConsumerKey));
        }

        if (magentoConsumerSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_consumer_secret", magentoConsumerSecret));
        }

        if (magentoAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_access_token", magentoAccessToken));
        }

        if (magentoTokenSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("magento_token_secret", magentoTokenSecret));
        }

        if (prestashopWebserviceKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prestashop_webservice_key", prestashopWebserviceKey));
        }

        if (wixAppId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wix_app_id", wixAppId));
        }

        if (wixAppSecretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wix_app_secret_key", wixAppSecretKey));
        }

        if (wixRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wix_refresh_token", wixRefreshToken));
        }

        if (mercadoLibreAppId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mercado_libre_app_id", mercadoLibreAppId));
        }

        if (mercadoLibreAppSecretKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mercado_libre_app_secret_key", mercadoLibreAppSecretKey));
        }

        if (mercadoLibreRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mercado_libre_refresh_token", mercadoLibreRefreshToken));
        }

        if (zidClientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_client_id", zidClientId));
        }

        if (zidClientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_client_secret", zidClientSecret));
        }

        if (zidAccessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_access_token", zidAccessToken));
        }

        if (zidAuthorization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_authorization", zidAuthorization));
        }

        if (zidRefreshToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zid_refresh_token", zidRefreshToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartCreateValidateBeforeCall(String cartId, String storeUrl, String etsyClientId, String etsyRefreshToken, String storeId, String bridgeUrl, String storeRoot, String storeKey, String sharedSecret, Boolean validateVersion, Boolean verify, String dbTablesPrefix, String ftpHost, String ftpUser, String ftpPassword, Integer ftpPort, String ftpStoreDir, String apiKey3dcart, String adminAccount, String apiPath, String apiKey, String clientId, String accessToken, String context, String accessToken2, String apiKeyShopify, String apiPassword, String accessTokenShopify, String apiKey2, String apiUsername, String encryptedPassword, String login, String apiUserAdnsf, String apiPass, String privateKey, String appToken, String etsyKeystring, String etsySharedSecret, String tokenSecret, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String dwClientId, String dwApiPass, String demandwareUserName, String demandwareUserPassword, String sellerId, String amazonSecretKey, String amazonAccessKeyId, String marketplacesIds, String environment, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String lightspeedApiKey, String lightspeedApiSecret, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String commercehqApiKey, String commercehqApiPassword, String _3dcartPrivateKey, String _3dcartAccessToken, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cartId' is set
        if (cartId == null) {
            throw new ApiException("Missing the required parameter 'cartId' when calling cartCreate(Async)");
        }

        // verify the required parameter 'storeUrl' is set
        if (storeUrl == null) {
            throw new ApiException("Missing the required parameter 'storeUrl' when calling cartCreate(Async)");
        }

        // verify the required parameter 'etsyClientId' is set
        if (etsyClientId == null) {
            throw new ApiException("Missing the required parameter 'etsyClientId' when calling cartCreate(Async)");
        }

        // verify the required parameter 'etsyRefreshToken' is set
        if (etsyRefreshToken == null) {
            throw new ApiException("Missing the required parameter 'etsyRefreshToken' when calling cartCreate(Async)");
        }

        // verify the required parameter 'storeId' is set
        if (storeId == null) {
            throw new ApiException("Missing the required parameter 'storeId' when calling cartCreate(Async)");
        }

        return cartCreateCall(cartId, storeUrl, etsyClientId, etsyRefreshToken, storeId, bridgeUrl, storeRoot, storeKey, sharedSecret, validateVersion, verify, dbTablesPrefix, ftpHost, ftpUser, ftpPassword, ftpPort, ftpStoreDir, apiKey3dcart, adminAccount, apiPath, apiKey, clientId, accessToken, context, accessToken2, apiKeyShopify, apiPassword, accessTokenShopify, apiKey2, apiUsername, encryptedPassword, login, apiUserAdnsf, apiPass, privateKey, appToken, etsyKeystring, etsySharedSecret, tokenSecret, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, dwClientId, dwApiPass, demandwareUserName, demandwareUserPassword, sellerId, amazonSecretKey, amazonAccessKeyId, marketplacesIds, environment, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, lightspeedApiKey, lightspeedApiSecret, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, commercehqApiKey, commercehqApiPassword, _3dcartPrivateKey, _3dcartAccessToken, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, _callback);

    }

    /**
     * 
     * Add store to the account
     * @param cartId Store’s identifier which you can get from cart_list method (required)
     * @param storeUrl A web address of a store that you would like to connect to API2Cart (required)
     * @param etsyClientId Etsy Client Id (required)
     * @param etsyRefreshToken Etsy Refresh token (required)
     * @param storeId Store Id (required)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param sharedSecret Shared secret (optional)
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @param verify Enables or disables cart&#39;s verification (optional, default to true)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param ftpHost FTP connection host (optional)
     * @param ftpUser FTP User (optional)
     * @param ftpPassword FTP Password (optional)
     * @param ftpPort FTP Port (optional)
     * @param ftpStoreDir FTP Store dir (optional)
     * @param apiKey3dcart 3DCart API Key (optional)
     * @param adminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param apiPath BigCommerce API URL (optional)
     * @param apiKey Bigcommerce API Key (optional)
     * @param clientId Client ID of the requesting app (optional)
     * @param accessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param context API Path section unique to the store (optional)
     * @param accessToken2 Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKeyShopify Shopify API Key (optional)
     * @param apiPassword Shopify API Password (optional)
     * @param accessTokenShopify Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKey2 Neto API Key (optional)
     * @param apiUsername Neto User Name (optional)
     * @param encryptedPassword Volusion API Password (optional)
     * @param login It&#39;s a Volusion account for which API is enabled (optional)
     * @param apiUserAdnsf It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param apiPass AspDotNetStorefront API Password (optional)
     * @param privateKey 3DCart Application Private Key (optional)
     * @param appToken 3DCart Token from Application (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param tokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional, default to production)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param dwClientId Demandware client id (optional)
     * @param dwApiPass Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param sellerId Seller Id (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param marketplacesIds Comma separated marketplaces ids (optional)
     * @param environment  (optional, default to production)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @return AccountCartAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AccountCartAdd200Response cartCreate(String cartId, String storeUrl, String etsyClientId, String etsyRefreshToken, String storeId, String bridgeUrl, String storeRoot, String storeKey, String sharedSecret, Boolean validateVersion, Boolean verify, String dbTablesPrefix, String ftpHost, String ftpUser, String ftpPassword, Integer ftpPort, String ftpStoreDir, String apiKey3dcart, String adminAccount, String apiPath, String apiKey, String clientId, String accessToken, String context, String accessToken2, String apiKeyShopify, String apiPassword, String accessTokenShopify, String apiKey2, String apiUsername, String encryptedPassword, String login, String apiUserAdnsf, String apiPass, String privateKey, String appToken, String etsyKeystring, String etsySharedSecret, String tokenSecret, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String dwClientId, String dwApiPass, String demandwareUserName, String demandwareUserPassword, String sellerId, String amazonSecretKey, String amazonAccessKeyId, String marketplacesIds, String environment, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String lightspeedApiKey, String lightspeedApiSecret, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String commercehqApiKey, String commercehqApiPassword, String _3dcartPrivateKey, String _3dcartAccessToken, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken) throws ApiException {
        ApiResponse<AccountCartAdd200Response> localVarResp = cartCreateWithHttpInfo(cartId, storeUrl, etsyClientId, etsyRefreshToken, storeId, bridgeUrl, storeRoot, storeKey, sharedSecret, validateVersion, verify, dbTablesPrefix, ftpHost, ftpUser, ftpPassword, ftpPort, ftpStoreDir, apiKey3dcart, adminAccount, apiPath, apiKey, clientId, accessToken, context, accessToken2, apiKeyShopify, apiPassword, accessTokenShopify, apiKey2, apiUsername, encryptedPassword, login, apiUserAdnsf, apiPass, privateKey, appToken, etsyKeystring, etsySharedSecret, tokenSecret, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, dwClientId, dwApiPass, demandwareUserName, demandwareUserPassword, sellerId, amazonSecretKey, amazonAccessKeyId, marketplacesIds, environment, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, lightspeedApiKey, lightspeedApiSecret, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, commercehqApiKey, commercehqApiPassword, _3dcartPrivateKey, _3dcartAccessToken, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Add store to the account
     * @param cartId Store’s identifier which you can get from cart_list method (required)
     * @param storeUrl A web address of a store that you would like to connect to API2Cart (required)
     * @param etsyClientId Etsy Client Id (required)
     * @param etsyRefreshToken Etsy Refresh token (required)
     * @param storeId Store Id (required)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param sharedSecret Shared secret (optional)
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @param verify Enables or disables cart&#39;s verification (optional, default to true)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param ftpHost FTP connection host (optional)
     * @param ftpUser FTP User (optional)
     * @param ftpPassword FTP Password (optional)
     * @param ftpPort FTP Port (optional)
     * @param ftpStoreDir FTP Store dir (optional)
     * @param apiKey3dcart 3DCart API Key (optional)
     * @param adminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param apiPath BigCommerce API URL (optional)
     * @param apiKey Bigcommerce API Key (optional)
     * @param clientId Client ID of the requesting app (optional)
     * @param accessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param context API Path section unique to the store (optional)
     * @param accessToken2 Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKeyShopify Shopify API Key (optional)
     * @param apiPassword Shopify API Password (optional)
     * @param accessTokenShopify Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKey2 Neto API Key (optional)
     * @param apiUsername Neto User Name (optional)
     * @param encryptedPassword Volusion API Password (optional)
     * @param login It&#39;s a Volusion account for which API is enabled (optional)
     * @param apiUserAdnsf It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param apiPass AspDotNetStorefront API Password (optional)
     * @param privateKey 3DCart Application Private Key (optional)
     * @param appToken 3DCart Token from Application (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param tokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional, default to production)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param dwClientId Demandware client id (optional)
     * @param dwApiPass Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param sellerId Seller Id (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param marketplacesIds Comma separated marketplaces ids (optional)
     * @param environment  (optional, default to production)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @return ApiResponse&lt;AccountCartAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AccountCartAdd200Response> cartCreateWithHttpInfo(String cartId, String storeUrl, String etsyClientId, String etsyRefreshToken, String storeId, String bridgeUrl, String storeRoot, String storeKey, String sharedSecret, Boolean validateVersion, Boolean verify, String dbTablesPrefix, String ftpHost, String ftpUser, String ftpPassword, Integer ftpPort, String ftpStoreDir, String apiKey3dcart, String adminAccount, String apiPath, String apiKey, String clientId, String accessToken, String context, String accessToken2, String apiKeyShopify, String apiPassword, String accessTokenShopify, String apiKey2, String apiUsername, String encryptedPassword, String login, String apiUserAdnsf, String apiPass, String privateKey, String appToken, String etsyKeystring, String etsySharedSecret, String tokenSecret, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String dwClientId, String dwApiPass, String demandwareUserName, String demandwareUserPassword, String sellerId, String amazonSecretKey, String amazonAccessKeyId, String marketplacesIds, String environment, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String lightspeedApiKey, String lightspeedApiSecret, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String commercehqApiKey, String commercehqApiPassword, String _3dcartPrivateKey, String _3dcartAccessToken, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken) throws ApiException {
        okhttp3.Call localVarCall = cartCreateValidateBeforeCall(cartId, storeUrl, etsyClientId, etsyRefreshToken, storeId, bridgeUrl, storeRoot, storeKey, sharedSecret, validateVersion, verify, dbTablesPrefix, ftpHost, ftpUser, ftpPassword, ftpPort, ftpStoreDir, apiKey3dcart, adminAccount, apiPath, apiKey, clientId, accessToken, context, accessToken2, apiKeyShopify, apiPassword, accessTokenShopify, apiKey2, apiUsername, encryptedPassword, login, apiUserAdnsf, apiPass, privateKey, appToken, etsyKeystring, etsySharedSecret, tokenSecret, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, dwClientId, dwApiPass, demandwareUserName, demandwareUserPassword, sellerId, amazonSecretKey, amazonAccessKeyId, marketplacesIds, environment, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, lightspeedApiKey, lightspeedApiSecret, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, commercehqApiKey, commercehqApiPassword, _3dcartPrivateKey, _3dcartAccessToken, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, null);
        Type localVarReturnType = new TypeToken<AccountCartAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add store to the account
     * @param cartId Store’s identifier which you can get from cart_list method (required)
     * @param storeUrl A web address of a store that you would like to connect to API2Cart (required)
     * @param etsyClientId Etsy Client Id (required)
     * @param etsyRefreshToken Etsy Refresh token (required)
     * @param storeId Store Id (required)
     * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
     * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param sharedSecret Shared secret (optional)
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @param verify Enables or disables cart&#39;s verification (optional, default to true)
     * @param dbTablesPrefix DB tables prefix (optional)
     * @param ftpHost FTP connection host (optional)
     * @param ftpUser FTP User (optional)
     * @param ftpPassword FTP Password (optional)
     * @param ftpPort FTP Port (optional)
     * @param ftpStoreDir FTP Store dir (optional)
     * @param apiKey3dcart 3DCart API Key (optional)
     * @param adminAccount It&#39;s a BigCommerce account for which API is enabled (optional)
     * @param apiPath BigCommerce API URL (optional)
     * @param apiKey Bigcommerce API Key (optional)
     * @param clientId Client ID of the requesting app (optional)
     * @param accessToken Access token authorizing the app to access resources on behalf of a user (optional)
     * @param context API Path section unique to the store (optional)
     * @param accessToken2 Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKeyShopify Shopify API Key (optional)
     * @param apiPassword Shopify API Password (optional)
     * @param accessTokenShopify Access token authorizing the app to access resources on behalf of a user (optional)
     * @param apiKey2 Neto API Key (optional)
     * @param apiUsername Neto User Name (optional)
     * @param encryptedPassword Volusion API Password (optional)
     * @param login It&#39;s a Volusion account for which API is enabled (optional)
     * @param apiUserAdnsf It&#39;s a AspDotNetStorefront account for which API is available (optional)
     * @param apiPass AspDotNetStorefront API Password (optional)
     * @param privateKey 3DCart Application Private Key (optional)
     * @param appToken 3DCart Token from Application (optional)
     * @param etsyKeystring Etsy keystring (optional)
     * @param etsySharedSecret Etsy shared secret (optional)
     * @param tokenSecret Secret token authorizing the app to access resources on behalf of a user (optional)
     * @param ebayClientId Application ID (AppID). (optional)
     * @param ebayClientSecret Shared Secret from eBay application (optional)
     * @param ebayRuname The RuName value that eBay assigns to your application. (optional)
     * @param ebayAccessToken Used to authenticate API requests. (optional)
     * @param ebayRefreshToken Used to renew the access token. (optional)
     * @param ebayEnvironment eBay environment (optional, default to production)
     * @param ebaySiteId eBay global ID (optional, default to 0)
     * @param dwClientId Demandware client id (optional)
     * @param dwApiPass Demandware api password (optional)
     * @param demandwareUserName Demandware user name (optional)
     * @param demandwareUserPassword Demandware user password (optional)
     * @param sellerId Seller Id (optional)
     * @param amazonSecretKey Amazon Secret Key (optional)
     * @param amazonAccessKeyId Amazon Secret Key Id (optional)
     * @param marketplacesIds Comma separated marketplaces ids (optional)
     * @param environment  (optional, default to production)
     * @param hybrisClientId Omni Commerce Connector Client ID (optional)
     * @param hybrisClientSecret Omni Commerce Connector Client Secret (optional)
     * @param hybrisUsername User Name (optional)
     * @param hybrisPassword User password (optional)
     * @param hybrisWebsites Websites to stores mapping data (optional)
     * @param walmartClientId Walmart client ID (optional)
     * @param walmartClientSecret Walmart client secret (optional)
     * @param walmartEnvironment Walmart environment (optional, default to production)
     * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
     * @param lightspeedApiKey LightSpeed api key (optional)
     * @param lightspeedApiSecret LightSpeed api secret (optional)
     * @param shopwareAccessKey Shopware access key (optional)
     * @param shopwareApiKey Shopware api key (optional)
     * @param shopwareApiSecret Shopware client secret access key (optional)
     * @param commercehqApiKey CommerceHQ api key (optional)
     * @param commercehqApiPassword CommerceHQ api password (optional)
     * @param _3dcartPrivateKey 3DCart Private Key (optional)
     * @param _3dcartAccessToken 3DCart Token (optional)
     * @param wcConsumerKey Woocommerce consumer key (optional)
     * @param wcConsumerSecret Woocommerce consumer secret (optional)
     * @param magentoConsumerKey Magento Consumer Key (optional)
     * @param magentoConsumerSecret Magento Consumer Secret (optional)
     * @param magentoAccessToken Magento Access Token (optional)
     * @param magentoTokenSecret Magento Token Secret (optional)
     * @param prestashopWebserviceKey Prestashop webservice key (optional)
     * @param wixAppId Wix App ID (optional)
     * @param wixAppSecretKey Wix App Secret Key (optional)
     * @param wixRefreshToken Wix refresh token (optional)
     * @param mercadoLibreAppId Mercado Libre App ID (optional)
     * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key (optional)
     * @param mercadoLibreRefreshToken Mercado Libre Refresh Token (optional)
     * @param zidClientId Zid Client ID (optional)
     * @param zidClientSecret Zid Client Secret (optional)
     * @param zidAccessToken Zid Access Token (optional)
     * @param zidAuthorization Zid Authorization (optional)
     * @param zidRefreshToken Zid refresh token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartCreateAsync(String cartId, String storeUrl, String etsyClientId, String etsyRefreshToken, String storeId, String bridgeUrl, String storeRoot, String storeKey, String sharedSecret, Boolean validateVersion, Boolean verify, String dbTablesPrefix, String ftpHost, String ftpUser, String ftpPassword, Integer ftpPort, String ftpStoreDir, String apiKey3dcart, String adminAccount, String apiPath, String apiKey, String clientId, String accessToken, String context, String accessToken2, String apiKeyShopify, String apiPassword, String accessTokenShopify, String apiKey2, String apiUsername, String encryptedPassword, String login, String apiUserAdnsf, String apiPass, String privateKey, String appToken, String etsyKeystring, String etsySharedSecret, String tokenSecret, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String dwClientId, String dwApiPass, String demandwareUserName, String demandwareUserPassword, String sellerId, String amazonSecretKey, String amazonAccessKeyId, String marketplacesIds, String environment, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String lightspeedApiKey, String lightspeedApiSecret, String shopwareAccessKey, String shopwareApiKey, String shopwareApiSecret, String commercehqApiKey, String commercehqApiPassword, String _3dcartPrivateKey, String _3dcartAccessToken, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, final ApiCallback<AccountCartAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartCreateValidateBeforeCall(cartId, storeUrl, etsyClientId, etsyRefreshToken, storeId, bridgeUrl, storeRoot, storeKey, sharedSecret, validateVersion, verify, dbTablesPrefix, ftpHost, ftpUser, ftpPassword, ftpPort, ftpStoreDir, apiKey3dcart, adminAccount, apiPath, apiKey, clientId, accessToken, context, accessToken2, apiKeyShopify, apiPassword, accessTokenShopify, apiKey2, apiUsername, encryptedPassword, login, apiUserAdnsf, apiPass, privateKey, appToken, etsyKeystring, etsySharedSecret, tokenSecret, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, dwClientId, dwApiPass, demandwareUserName, demandwareUserPassword, sellerId, amazonSecretKey, amazonAccessKeyId, marketplacesIds, environment, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, lightspeedApiKey, lightspeedApiSecret, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, commercehqApiKey, commercehqApiPassword, _3dcartPrivateKey, _3dcartAccessToken, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken, _callback);
        Type localVarReturnType = new TypeToken<AccountCartAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartDelete
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartDeleteCall(Boolean deleteBridge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteBridge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delete_bridge", deleteBridge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartDeleteValidateBeforeCall(Boolean deleteBridge, final ApiCallback _callback) throws ApiException {
        return cartDeleteCall(deleteBridge, _callback);

    }

    /**
     * 
     * Remove store from API2Cart
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to true)
     * @return CartDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartDelete200Response cartDelete(Boolean deleteBridge) throws ApiException {
        ApiResponse<CartDelete200Response> localVarResp = cartDeleteWithHttpInfo(deleteBridge);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove store from API2Cart
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to true)
     * @return ApiResponse&lt;CartDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartDelete200Response> cartDeleteWithHttpInfo(Boolean deleteBridge) throws ApiException {
        okhttp3.Call localVarCall = cartDeleteValidateBeforeCall(deleteBridge, null);
        Type localVarReturnType = new TypeToken<CartDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove store from API2Cart
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartDeleteAsync(Boolean deleteBridge, final ApiCallback<CartDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartDeleteValidateBeforeCall(deleteBridge, _callback);
        Type localVarReturnType = new TypeToken<CartDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartDisconnect
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartDisconnectCall(Boolean deleteBridge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.disconnect.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteBridge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delete_bridge", deleteBridge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartDisconnectValidateBeforeCall(Boolean deleteBridge, final ApiCallback _callback) throws ApiException {
        return cartDisconnectCall(deleteBridge, _callback);

    }

    /**
     * 
     * Disconnect with the store and clear store session data.
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to false)
     * @return CartDisconnect200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CartDisconnect200Response cartDisconnect(Boolean deleteBridge) throws ApiException {
        ApiResponse<CartDisconnect200Response> localVarResp = cartDisconnectWithHttpInfo(deleteBridge);
        return localVarResp.getData();
    }

    /**
     * 
     * Disconnect with the store and clear store session data.
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to false)
     * @return ApiResponse&lt;CartDisconnect200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CartDisconnect200Response> cartDisconnectWithHttpInfo(Boolean deleteBridge) throws ApiException {
        okhttp3.Call localVarCall = cartDisconnectValidateBeforeCall(deleteBridge, null);
        Type localVarReturnType = new TypeToken<CartDisconnect200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disconnect with the store and clear store session data.
     * @param deleteBridge Identifies if there is a necessity to delete bridge (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartDisconnectAsync(Boolean deleteBridge, final ApiCallback<CartDisconnect200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartDisconnectValidateBeforeCall(deleteBridge, _callback);
        Type localVarReturnType = new TypeToken<CartDisconnect200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartGiftcardAdd
     * @param amount Defines the gift card amount value. (required)
     * @param code Gift card code (optional)
     * @param ownerEmail Gift card owner email (optional)
     * @param recipientEmail Gift card recipient email (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartGiftcardAddCall(BigDecimal amount, String code, String ownerEmail, String recipientEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.giftcard.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (ownerEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("owner_email", ownerEmail));
        }

        if (recipientEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipient_email", recipientEmail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartGiftcardAddValidateBeforeCall(BigDecimal amount, String code, String ownerEmail, String recipientEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling cartGiftcardAdd(Async)");
        }

        return cartGiftcardAddCall(amount, code, ownerEmail, recipientEmail, _callback);

    }

    /**
     * 
     * Create new gift card
     * @param amount Defines the gift card amount value. (required)
     * @param code Gift card code (optional)
     * @param ownerEmail Gift card owner email (optional)
     * @param recipientEmail Gift card recipient email (optional)
     * @return CartGiftcardAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartGiftcardAdd200Response cartGiftcardAdd(BigDecimal amount, String code, String ownerEmail, String recipientEmail) throws ApiException {
        ApiResponse<CartGiftcardAdd200Response> localVarResp = cartGiftcardAddWithHttpInfo(amount, code, ownerEmail, recipientEmail);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new gift card
     * @param amount Defines the gift card amount value. (required)
     * @param code Gift card code (optional)
     * @param ownerEmail Gift card owner email (optional)
     * @param recipientEmail Gift card recipient email (optional)
     * @return ApiResponse&lt;CartGiftcardAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartGiftcardAdd200Response> cartGiftcardAddWithHttpInfo(BigDecimal amount, String code, String ownerEmail, String recipientEmail) throws ApiException {
        okhttp3.Call localVarCall = cartGiftcardAddValidateBeforeCall(amount, code, ownerEmail, recipientEmail, null);
        Type localVarReturnType = new TypeToken<CartGiftcardAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new gift card
     * @param amount Defines the gift card amount value. (required)
     * @param code Gift card code (optional)
     * @param ownerEmail Gift card owner email (optional)
     * @param recipientEmail Gift card recipient email (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartGiftcardAddAsync(BigDecimal amount, String code, String ownerEmail, String recipientEmail, final ApiCallback<CartGiftcardAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartGiftcardAddValidateBeforeCall(amount, code, ownerEmail, recipientEmail, _callback);
        Type localVarReturnType = new TypeToken<CartGiftcardAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartGiftcardCount
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartGiftcardCountCall(String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.giftcard.count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartGiftcardCountValidateBeforeCall(String storeId, final ApiCallback _callback) throws ApiException {
        return cartGiftcardCountCall(storeId, _callback);

    }

    /**
     * 
     * Get gift cards count.
     * @param storeId Store Id (optional)
     * @return CartGiftcardCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartGiftcardCount200Response cartGiftcardCount(String storeId) throws ApiException {
        ApiResponse<CartGiftcardCount200Response> localVarResp = cartGiftcardCountWithHttpInfo(storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get gift cards count.
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;CartGiftcardCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartGiftcardCount200Response> cartGiftcardCountWithHttpInfo(String storeId) throws ApiException {
        okhttp3.Call localVarCall = cartGiftcardCountValidateBeforeCall(storeId, null);
        Type localVarReturnType = new TypeToken<CartGiftcardCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get gift cards count.
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartGiftcardCountAsync(String storeId, final ApiCallback<CartGiftcardCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartGiftcardCountValidateBeforeCall(storeId, _callback);
        Type localVarReturnType = new TypeToken<CartGiftcardCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartGiftcardList
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartGiftcardListCall(String pageCursor, Integer start, Integer count, String storeId, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.giftcard.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartGiftcardListValidateBeforeCall(String pageCursor, Integer start, Integer count, String storeId, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        return cartGiftcardListCall(pageCursor, start, count, storeId, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get gift cards list.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartGiftCardList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCartGiftCardList cartGiftcardList(String pageCursor, Integer start, Integer count, String storeId, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<ModelResponseCartGiftCardList> localVarResp = cartGiftcardListWithHttpInfo(pageCursor, start, count, storeId, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get gift cards list.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;ModelResponseCartGiftCardList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCartGiftCardList> cartGiftcardListWithHttpInfo(String pageCursor, Integer start, Integer count, String storeId, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = cartGiftcardListValidateBeforeCall(pageCursor, start, count, storeId, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<ModelResponseCartGiftCardList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get gift cards list.
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,code,name)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartGiftcardListAsync(String pageCursor, Integer start, Integer count, String storeId, String params, String responseFields, String exclude, final ApiCallback<ModelResponseCartGiftCardList> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartGiftcardListValidateBeforeCall(pageCursor, start, count, storeId, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCartGiftCardList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartInfo
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartInfoCall(String params, String responseFields, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.info.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartInfoValidateBeforeCall(String params, String responseFields, String exclude, String storeId, final ApiCallback _callback) throws ApiException {
        return cartInfoCall(params, responseFields, exclude, storeId, _callback);

    }

    /**
     * 
     * Get cart information
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @return CartInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartInfo200Response cartInfo(String params, String responseFields, String exclude, String storeId) throws ApiException {
        ApiResponse<CartInfo200Response> localVarResp = cartInfoWithHttpInfo(params, responseFields, exclude, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get cart information
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;CartInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartInfo200Response> cartInfoWithHttpInfo(String params, String responseFields, String exclude, String storeId) throws ApiException {
        okhttp3.Call localVarCall = cartInfoValidateBeforeCall(params, responseFields, exclude, storeId, null);
        Type localVarReturnType = new TypeToken<CartInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get cart information
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to store_name,store_url,db_prefix)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartInfoAsync(String params, String responseFields, String exclude, String storeId, final ApiCallback<CartInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartInfoValidateBeforeCall(params, responseFields, exclude, storeId, _callback);
        Type localVarReturnType = new TypeToken<CartInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cartListCall(_callback);

    }

    /**
     * 
     * Get list of supported carts
     * @return CartList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CartList200Response cartList() throws ApiException {
        ApiResponse<CartList200Response> localVarResp = cartListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of supported carts
     * @return ApiResponse&lt;CartList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CartList200Response> cartListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cartListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CartList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of supported carts
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call cartListAsync(final ApiCallback<CartList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CartList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartMetaDataList
     * @param entityId Entity Id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param key Key (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to key,value)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMetaDataListCall(String entityId, String entity, String storeId, String langId, String key, Integer count, String pageCursor, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.meta_data.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartMetaDataListValidateBeforeCall(String entityId, String entity, String storeId, String langId, String key, Integer count, String pageCursor, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling cartMetaDataList(Async)");
        }

        return cartMetaDataListCall(entityId, entity, storeId, langId, key, count, pageCursor, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get entity meta data
     * @param entityId Entity Id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param key Key (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to key,value)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartMetaDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCartMetaDataList cartMetaDataList(String entityId, String entity, String storeId, String langId, String key, Integer count, String pageCursor, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<ModelResponseCartMetaDataList> localVarResp = cartMetaDataListWithHttpInfo(entityId, entity, storeId, langId, key, count, pageCursor, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get entity meta data
     * @param entityId Entity Id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param key Key (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to key,value)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;ModelResponseCartMetaDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCartMetaDataList> cartMetaDataListWithHttpInfo(String entityId, String entity, String storeId, String langId, String key, Integer count, String pageCursor, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = cartMetaDataListValidateBeforeCall(entityId, entity, storeId, langId, key, count, pageCursor, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<ModelResponseCartMetaDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get entity meta data
     * @param entityId Entity Id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param key Key (optional)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to key,value)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMetaDataListAsync(String entityId, String entity, String storeId, String langId, String key, Integer count, String pageCursor, String params, String responseFields, String exclude, final ApiCallback<ModelResponseCartMetaDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartMetaDataListValidateBeforeCall(entityId, entity, storeId, langId, key, count, pageCursor, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCartMetaDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartMetaDataSet
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param value Value (required)
     * @param namespace Metafield namespace (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMetaDataSetCall(String entityId, String key, String value, String namespace, String entity, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.meta_data.set.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (langId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang_id", langId));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (namespace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartMetaDataSetValidateBeforeCall(String entityId, String key, String value, String namespace, String entity, String storeId, String langId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling cartMetaDataSet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling cartMetaDataSet(Async)");
        }

        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling cartMetaDataSet(Async)");
        }

        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling cartMetaDataSet(Async)");
        }

        return cartMetaDataSetCall(entityId, key, value, namespace, entity, storeId, langId, _callback);

    }

    /**
     * 
     * Set meta data for a specific entity
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param value Value (required)
     * @param namespace Metafield namespace (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return AttributeAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AttributeAdd200Response cartMetaDataSet(String entityId, String key, String value, String namespace, String entity, String storeId, String langId) throws ApiException {
        ApiResponse<AttributeAdd200Response> localVarResp = cartMetaDataSetWithHttpInfo(entityId, key, value, namespace, entity, storeId, langId);
        return localVarResp.getData();
    }

    /**
     * 
     * Set meta data for a specific entity
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param value Value (required)
     * @param namespace Metafield namespace (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @return ApiResponse&lt;AttributeAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttributeAdd200Response> cartMetaDataSetWithHttpInfo(String entityId, String key, String value, String namespace, String entity, String storeId, String langId) throws ApiException {
        okhttp3.Call localVarCall = cartMetaDataSetValidateBeforeCall(entityId, key, value, namespace, entity, storeId, langId, null);
        Type localVarReturnType = new TypeToken<AttributeAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set meta data for a specific entity
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param value Value (required)
     * @param namespace Metafield namespace (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param langId Language id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMetaDataSetAsync(String entityId, String key, String value, String namespace, String entity, String storeId, String langId, final ApiCallback<AttributeAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartMetaDataSetValidateBeforeCall(entityId, key, value, namespace, entity, storeId, langId, _callback);
        Type localVarReturnType = new TypeToken<AttributeAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartMetaDataUnset
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param id Entity id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMetaDataUnsetCall(String entityId, String key, String id, String entity, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.meta_data.unset.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity_id", entityId));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartMetaDataUnsetValidateBeforeCall(String entityId, String key, String id, String entity, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling cartMetaDataUnset(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling cartMetaDataUnset(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cartMetaDataUnset(Async)");
        }

        return cartMetaDataUnsetCall(entityId, key, id, entity, storeId, _callback);

    }

    /**
     * 
     * Unset meta data for a specific entity
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param id Entity id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @return BasketLiveShippingServiceDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BasketLiveShippingServiceDelete200Response cartMetaDataUnset(String entityId, String key, String id, String entity, String storeId) throws ApiException {
        ApiResponse<BasketLiveShippingServiceDelete200Response> localVarResp = cartMetaDataUnsetWithHttpInfo(entityId, key, id, entity, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Unset meta data for a specific entity
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param id Entity id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;BasketLiveShippingServiceDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketLiveShippingServiceDelete200Response> cartMetaDataUnsetWithHttpInfo(String entityId, String key, String id, String entity, String storeId) throws ApiException {
        okhttp3.Call localVarCall = cartMetaDataUnsetValidateBeforeCall(entityId, key, id, entity, storeId, null);
        Type localVarReturnType = new TypeToken<BasketLiveShippingServiceDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Unset meta data for a specific entity
     * @param entityId Entity Id (required)
     * @param key Key (required)
     * @param id Entity id (required)
     * @param entity Entity (optional, default to product)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMetaDataUnsetAsync(String entityId, String key, String id, String entity, String storeId, final ApiCallback<BasketLiveShippingServiceDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartMetaDataUnsetValidateBeforeCall(entityId, key, id, entity, storeId, _callback);
        Type localVarReturnType = new TypeToken<BasketLiveShippingServiceDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartMethods
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMethodsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.methods.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartMethodsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cartMethodsCall(_callback);

    }

    /**
     * 
     * Get list of cart methods
     * @return CartMethods200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartMethods200Response cartMethods() throws ApiException {
        ApiResponse<CartMethods200Response> localVarResp = cartMethodsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of cart methods
     * @return ApiResponse&lt;CartMethods200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartMethods200Response> cartMethodsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cartMethodsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CartMethods200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of cart methods
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartMethodsAsync(final ApiCallback<CartMethods200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartMethodsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CartMethods200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartPluginList
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartPluginListCall(String storeKey, String storeId, Integer start, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.plugin.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_key", storeKey));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartPluginListValidateBeforeCall(String storeKey, String storeId, Integer start, Integer count, final ApiCallback _callback) throws ApiException {
        return cartPluginListCall(storeKey, storeId, start, count, _callback);

    }

    /**
     * 
     * Get list of installed plugins
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @return CartPluginList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartPluginList200Response cartPluginList(String storeKey, String storeId, Integer start, Integer count) throws ApiException {
        ApiResponse<CartPluginList200Response> localVarResp = cartPluginListWithHttpInfo(storeKey, storeId, start, count);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of installed plugins
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @return ApiResponse&lt;CartPluginList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartPluginList200Response> cartPluginListWithHttpInfo(String storeKey, String storeId, Integer start, Integer count) throws ApiException {
        okhttp3.Call localVarCall = cartPluginListValidateBeforeCall(storeKey, storeId, start, count, null);
        Type localVarReturnType = new TypeToken<CartPluginList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of installed plugins
     * @param storeKey Set this parameter if bridge is already uploaded to store (optional)
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartPluginListAsync(String storeKey, String storeId, Integer start, Integer count, final ApiCallback<CartPluginList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartPluginListValidateBeforeCall(storeKey, storeId, start, count, _callback);
        Type localVarReturnType = new TypeToken<CartPluginList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartScriptAdd
     * @param name The user-friendly script name (optional)
     * @param description The user-friendly description (optional)
     * @param html An html string containing exactly one &#x60;script&#x60; tag. (optional)
     * @param src The URL of the remote script (optional)
     * @param loadMethod The load method to use for the script (optional)
     * @param scope The page or pages on the online store where the script should be included (optional, default to storefront)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartScriptAddCall(String name, String description, String html, String src, String loadMethod, String scope, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.script.add.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (html != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("html", html));
        }

        if (src != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("src", src));
        }

        if (loadMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("load_method", loadMethod));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartScriptAddValidateBeforeCall(String name, String description, String html, String src, String loadMethod, String scope, String storeId, final ApiCallback _callback) throws ApiException {
        return cartScriptAddCall(name, description, html, src, loadMethod, scope, storeId, _callback);

    }

    /**
     * 
     * Add new script to the storefront
     * @param name The user-friendly script name (optional)
     * @param description The user-friendly description (optional)
     * @param html An html string containing exactly one &#x60;script&#x60; tag. (optional)
     * @param src The URL of the remote script (optional)
     * @param loadMethod The load method to use for the script (optional)
     * @param scope The page or pages on the online store where the script should be included (optional, default to storefront)
     * @param storeId Store Id (optional)
     * @return CartScriptAdd200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartScriptAdd200Response cartScriptAdd(String name, String description, String html, String src, String loadMethod, String scope, String storeId) throws ApiException {
        ApiResponse<CartScriptAdd200Response> localVarResp = cartScriptAddWithHttpInfo(name, description, html, src, loadMethod, scope, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Add new script to the storefront
     * @param name The user-friendly script name (optional)
     * @param description The user-friendly description (optional)
     * @param html An html string containing exactly one &#x60;script&#x60; tag. (optional)
     * @param src The URL of the remote script (optional)
     * @param loadMethod The load method to use for the script (optional)
     * @param scope The page or pages on the online store where the script should be included (optional, default to storefront)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;CartScriptAdd200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartScriptAdd200Response> cartScriptAddWithHttpInfo(String name, String description, String html, String src, String loadMethod, String scope, String storeId) throws ApiException {
        okhttp3.Call localVarCall = cartScriptAddValidateBeforeCall(name, description, html, src, loadMethod, scope, storeId, null);
        Type localVarReturnType = new TypeToken<CartScriptAdd200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add new script to the storefront
     * @param name The user-friendly script name (optional)
     * @param description The user-friendly description (optional)
     * @param html An html string containing exactly one &#x60;script&#x60; tag. (optional)
     * @param src The URL of the remote script (optional)
     * @param loadMethod The load method to use for the script (optional)
     * @param scope The page or pages on the online store where the script should be included (optional, default to storefront)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartScriptAddAsync(String name, String description, String html, String src, String loadMethod, String scope, String storeId, final ApiCallback<CartScriptAdd200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartScriptAddValidateBeforeCall(name, description, html, src, loadMethod, scope, storeId, _callback);
        Type localVarReturnType = new TypeToken<CartScriptAdd200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartScriptDelete
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartScriptDeleteCall(String id, String storeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.script.delete.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartScriptDeleteValidateBeforeCall(String id, String storeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cartScriptDelete(Async)");
        }

        return cartScriptDeleteCall(id, storeId, _callback);

    }

    /**
     * 
     * Remove script from the storefront
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return BridgeDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BridgeDelete200Response cartScriptDelete(String id, String storeId) throws ApiException {
        ApiResponse<BridgeDelete200Response> localVarResp = cartScriptDeleteWithHttpInfo(id, storeId);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove script from the storefront
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @return ApiResponse&lt;BridgeDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BridgeDelete200Response> cartScriptDeleteWithHttpInfo(String id, String storeId) throws ApiException {
        okhttp3.Call localVarCall = cartScriptDeleteValidateBeforeCall(id, storeId, null);
        Type localVarReturnType = new TypeToken<BridgeDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove script from the storefront
     * @param id Entity id (required)
     * @param storeId Store Id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartScriptDeleteAsync(String id, String storeId, final ApiCallback<BridgeDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartScriptDeleteValidateBeforeCall(id, storeId, _callback);
        Type localVarReturnType = new TypeToken<BridgeDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartScriptList
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param scriptIds Retrieves only scripts with specific ids (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartScriptListCall(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String scriptIds, String storeId, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.script.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_cursor", pageCursor));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (createdFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_from", createdFrom));
        }

        if (createdTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_to", createdTo));
        }

        if (modifiedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_from", modifiedFrom));
        }

        if (modifiedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_to", modifiedTo));
        }

        if (scriptIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("script_ids", scriptIds));
        }

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartScriptListValidateBeforeCall(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String scriptIds, String storeId, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        return cartScriptListCall(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, scriptIds, storeId, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get scripts installed to the storefront
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param scriptIds Retrieves only scripts with specific ids (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ModelResponseCartScriptList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ModelResponseCartScriptList cartScriptList(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String scriptIds, String storeId, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<ModelResponseCartScriptList> localVarResp = cartScriptListWithHttpInfo(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, scriptIds, storeId, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get scripts installed to the storefront
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param scriptIds Retrieves only scripts with specific ids (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;ModelResponseCartScriptList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelResponseCartScriptList> cartScriptListWithHttpInfo(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String scriptIds, String storeId, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = cartScriptListValidateBeforeCall(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, scriptIds, storeId, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<ModelResponseCartScriptList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get scripts installed to the storefront
     * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param createdFrom Retrieve entities from their creation date (optional)
     * @param createdTo Retrieve entities to their creation date (optional)
     * @param modifiedFrom Retrieve entities from their modification date (optional)
     * @param modifiedTo Retrieve entities to their modification date (optional)
     * @param scriptIds Retrieves only scripts with specific ids (optional)
     * @param storeId Store Id (optional)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,description)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartScriptListAsync(String pageCursor, Integer start, Integer count, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String scriptIds, String storeId, String params, String responseFields, String exclude, final ApiCallback<ModelResponseCartScriptList> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartScriptListValidateBeforeCall(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, scriptIds, storeId, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<ModelResponseCartScriptList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartShippingZonesList
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,enabled)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartShippingZonesListCall(String storeId, Integer start, Integer count, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.shipping_zones.list.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("store_id", storeId));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (params != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("params", params));
        }

        if (responseFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("response_fields", responseFields));
        }

        if (exclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude", exclude));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartShippingZonesListValidateBeforeCall(String storeId, Integer start, Integer count, String params, String responseFields, String exclude, final ApiCallback _callback) throws ApiException {
        return cartShippingZonesListCall(storeId, start, count, params, responseFields, exclude, _callback);

    }

    /**
     * 
     * Get list of shipping zones
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,enabled)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return CartShippingZonesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartShippingZonesList200Response cartShippingZonesList(String storeId, Integer start, Integer count, String params, String responseFields, String exclude) throws ApiException {
        ApiResponse<CartShippingZonesList200Response> localVarResp = cartShippingZonesListWithHttpInfo(storeId, start, count, params, responseFields, exclude);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of shipping zones
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,enabled)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @return ApiResponse&lt;CartShippingZonesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartShippingZonesList200Response> cartShippingZonesListWithHttpInfo(String storeId, Integer start, Integer count, String params, String responseFields, String exclude) throws ApiException {
        okhttp3.Call localVarCall = cartShippingZonesListValidateBeforeCall(storeId, start, count, params, responseFields, exclude, null);
        Type localVarReturnType = new TypeToken<CartShippingZonesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of shipping zones
     * @param storeId Store Id (optional)
     * @param start This parameter sets the number from which you want to get entities (optional, default to 0)
     * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     * @param params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to id,name,enabled)
     * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve (optional)
     * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartShippingZonesListAsync(String storeId, Integer start, Integer count, String params, String responseFields, String exclude, final ApiCallback<CartShippingZonesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartShippingZonesListValidateBeforeCall(storeId, start, count, params, responseFields, exclude, _callback);
        Type localVarReturnType = new TypeToken<CartShippingZonesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cartValidate
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartValidateCall(Boolean validateVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cart.validate.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validateVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_version", validateVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "store_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cartValidateValidateBeforeCall(Boolean validateVersion, final ApiCallback _callback) throws ApiException {
        return cartValidateCall(validateVersion, _callback);

    }

    /**
     * 
     * Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @return CartValidate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CartValidate200Response cartValidate(Boolean validateVersion) throws ApiException {
        ApiResponse<CartValidate200Response> localVarResp = cartValidateWithHttpInfo(validateVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @return ApiResponse&lt;CartValidate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CartValidate200Response> cartValidateWithHttpInfo(Boolean validateVersion) throws ApiException {
        okhttp3.Call localVarCall = cartValidateValidateBeforeCall(validateVersion, null);
        Type localVarReturnType = new TypeToken<CartValidate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
     * @param validateVersion Specify if api2cart should validate cart version (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cartValidateAsync(Boolean validateVersion, final ApiCallback<CartValidate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = cartValidateValidateBeforeCall(validateVersion, _callback);
        Type localVarReturnType = new TypeToken<CartValidate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
