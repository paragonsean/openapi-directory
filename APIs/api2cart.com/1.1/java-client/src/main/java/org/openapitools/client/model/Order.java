/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.A2CDateTime;
import org.openapitools.client.model.BaseCustomer;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.CustomerAddress;
import org.openapitools.client.model.OrderItem;
import org.openapitools.client.model.OrderPaymentMethod;
import org.openapitools.client.model.OrderRefund;
import org.openapitools.client.model.OrderShippingMethod;
import org.openapitools.client.model.OrderStatus;
import org.openapitools.client.model.OrderTotal;
import org.openapitools.client.model.OrderTotals;
import org.openapitools.client.model.OrderTotalsNewDiscount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Order
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:12:09.268126-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Order {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additional_fields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private Object additionalFields;

  public static final String SERIALIZED_NAME_BASKET_ID = "basket_id";
  @SerializedName(SERIALIZED_NAME_BASKET_ID)
  private String basketId;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billing_address";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private CustomerAddress billingAddress;

  public static final String SERIALIZED_NAME_BUNDLES = "bundles";
  @SerializedName(SERIALIZED_NAME_BUNDLES)
  private List<OrderItem> bundles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channel_id";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATE_AT = "create_at";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private A2CDateTime createAt;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private BaseCustomer customer;

  public static final String SERIALIZED_NAME_DISCOUNTS = "discounts";
  @SerializedName(SERIALIZED_NAME_DISCOUNTS)
  private List<OrderTotalsNewDiscount> discounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINISHED_TIME = "finished_time";
  @SerializedName(SERIALIZED_NAME_FINISHED_TIME)
  private A2CDateTime finishedTime;

  public static final String SERIALIZED_NAME_GIFT_MESSAGE = "gift_message";
  @SerializedName(SERIALIZED_NAME_GIFT_MESSAGE)
  private String giftMessage;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modified_at";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private A2CDateTime modifiedAt;

  public static final String SERIALIZED_NAME_ORDER_DETAILS_URL = "order_details_url";
  @SerializedName(SERIALIZED_NAME_ORDER_DETAILS_URL)
  private String orderDetailsUrl;

  public static final String SERIALIZED_NAME_ORDER_ID = "order_id";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_ORDER_PRODUCTS = "order_products";
  @SerializedName(SERIALIZED_NAME_ORDER_PRODUCTS)
  private List<OrderItem> orderProducts = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private OrderPaymentMethod paymentMethod;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private List<OrderRefund> refunds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shipping_address";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private CustomerAddress shippingAddress;

  public static final String SERIALIZED_NAME_SHIPPING_METHOD = "shipping_method";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHOD)
  private OrderShippingMethod shippingMethod;

  public static final String SERIALIZED_NAME_SHIPPING_METHODS = "shipping_methods";
  @SerializedName(SERIALIZED_NAME_SHIPPING_METHODS)
  private List<OrderShippingMethod> shippingMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OrderStatus status;

  public static final String SERIALIZED_NAME_STORE_ID = "store_id";
  @SerializedName(SERIALIZED_NAME_STORE_ID)
  private String storeId;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private OrderTotal total;

  public static final String SERIALIZED_NAME_TOTALS = "totals";
  @SerializedName(SERIALIZED_NAME_TOTALS)
  private OrderTotals totals;

  public static final String SERIALIZED_NAME_WAREHOUSES_IDS = "warehouses_ids";
  @SerializedName(SERIALIZED_NAME_WAREHOUSES_IDS)
  private List<String> warehousesIds = new ArrayList<>();

  public Order() {
  }

  public Order additionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * Get additionalFields
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public Object getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(Object additionalFields) {
    this.additionalFields = additionalFields;
  }


  public Order basketId(String basketId) {
    this.basketId = basketId;
    return this;
  }

  /**
   * Get basketId
   * @return basketId
   */
  @javax.annotation.Nullable
  public String getBasketId() {
    return basketId;
  }

  public void setBasketId(String basketId) {
    this.basketId = basketId;
  }


  public Order billingAddress(CustomerAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public CustomerAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(CustomerAddress billingAddress) {
    this.billingAddress = billingAddress;
  }


  public Order bundles(List<OrderItem> bundles) {
    this.bundles = bundles;
    return this;
  }

  public Order addBundlesItem(OrderItem bundlesItem) {
    if (this.bundles == null) {
      this.bundles = new ArrayList<>();
    }
    this.bundles.add(bundlesItem);
    return this;
  }

  /**
   * Get bundles
   * @return bundles
   */
  @javax.annotation.Nullable
  public List<OrderItem> getBundles() {
    return bundles;
  }

  public void setBundles(List<OrderItem> bundles) {
    this.bundles = bundles;
  }


  public Order channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * Get channelId
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public Order comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Order createAt(A2CDateTime createAt) {
    this.createAt = createAt;
    return this;
  }

  /**
   * Get createAt
   * @return createAt
   */
  @javax.annotation.Nullable
  public A2CDateTime getCreateAt() {
    return createAt;
  }

  public void setCreateAt(A2CDateTime createAt) {
    this.createAt = createAt;
  }


  public Order currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public Order customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  /**
   * Get customFields
   * @return customFields
   */
  @javax.annotation.Nullable
  public Object getCustomFields() {
    return customFields;
  }

  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }


  public Order customer(BaseCustomer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public BaseCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(BaseCustomer customer) {
    this.customer = customer;
  }


  public Order discounts(List<OrderTotalsNewDiscount> discounts) {
    this.discounts = discounts;
    return this;
  }

  public Order addDiscountsItem(OrderTotalsNewDiscount discountsItem) {
    if (this.discounts == null) {
      this.discounts = new ArrayList<>();
    }
    this.discounts.add(discountsItem);
    return this;
  }

  /**
   * Get discounts
   * @return discounts
   */
  @javax.annotation.Nullable
  public List<OrderTotalsNewDiscount> getDiscounts() {
    return discounts;
  }

  public void setDiscounts(List<OrderTotalsNewDiscount> discounts) {
    this.discounts = discounts;
  }


  public Order finishedTime(A2CDateTime finishedTime) {
    this.finishedTime = finishedTime;
    return this;
  }

  /**
   * Get finishedTime
   * @return finishedTime
   */
  @javax.annotation.Nullable
  public A2CDateTime getFinishedTime() {
    return finishedTime;
  }

  public void setFinishedTime(A2CDateTime finishedTime) {
    this.finishedTime = finishedTime;
  }


  public Order giftMessage(String giftMessage) {
    this.giftMessage = giftMessage;
    return this;
  }

  /**
   * Get giftMessage
   * @return giftMessage
   */
  @javax.annotation.Nullable
  public String getGiftMessage() {
    return giftMessage;
  }

  public void setGiftMessage(String giftMessage) {
    this.giftMessage = giftMessage;
  }


  public Order id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Order modifiedAt(A2CDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Get modifiedAt
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public A2CDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(A2CDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public Order orderDetailsUrl(String orderDetailsUrl) {
    this.orderDetailsUrl = orderDetailsUrl;
    return this;
  }

  /**
   * Get orderDetailsUrl
   * @return orderDetailsUrl
   */
  @javax.annotation.Nullable
  public String getOrderDetailsUrl() {
    return orderDetailsUrl;
  }

  public void setOrderDetailsUrl(String orderDetailsUrl) {
    this.orderDetailsUrl = orderDetailsUrl;
  }


  public Order orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Get orderId
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public Order orderProducts(List<OrderItem> orderProducts) {
    this.orderProducts = orderProducts;
    return this;
  }

  public Order addOrderProductsItem(OrderItem orderProductsItem) {
    if (this.orderProducts == null) {
      this.orderProducts = new ArrayList<>();
    }
    this.orderProducts.add(orderProductsItem);
    return this;
  }

  /**
   * Get orderProducts
   * @return orderProducts
   */
  @javax.annotation.Nullable
  public List<OrderItem> getOrderProducts() {
    return orderProducts;
  }

  public void setOrderProducts(List<OrderItem> orderProducts) {
    this.orderProducts = orderProducts;
  }


  public Order paymentMethod(OrderPaymentMethod paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * Get paymentMethod
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public OrderPaymentMethod getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(OrderPaymentMethod paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Order refunds(List<OrderRefund> refunds) {
    this.refunds = refunds;
    return this;
  }

  public Order addRefundsItem(OrderRefund refundsItem) {
    if (this.refunds == null) {
      this.refunds = new ArrayList<>();
    }
    this.refunds.add(refundsItem);
    return this;
  }

  /**
   * Get refunds
   * @return refunds
   */
  @javax.annotation.Nullable
  public List<OrderRefund> getRefunds() {
    return refunds;
  }

  public void setRefunds(List<OrderRefund> refunds) {
    this.refunds = refunds;
  }


  public Order shippingAddress(CustomerAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public CustomerAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(CustomerAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public Order shippingMethod(OrderShippingMethod shippingMethod) {
    this.shippingMethod = shippingMethod;
    return this;
  }

  /**
   * Get shippingMethod
   * @return shippingMethod
   */
  @javax.annotation.Nullable
  public OrderShippingMethod getShippingMethod() {
    return shippingMethod;
  }

  public void setShippingMethod(OrderShippingMethod shippingMethod) {
    this.shippingMethod = shippingMethod;
  }


  public Order shippingMethods(List<OrderShippingMethod> shippingMethods) {
    this.shippingMethods = shippingMethods;
    return this;
  }

  public Order addShippingMethodsItem(OrderShippingMethod shippingMethodsItem) {
    if (this.shippingMethods == null) {
      this.shippingMethods = new ArrayList<>();
    }
    this.shippingMethods.add(shippingMethodsItem);
    return this;
  }

  /**
   * Get shippingMethods
   * @return shippingMethods
   */
  @javax.annotation.Nullable
  public List<OrderShippingMethod> getShippingMethods() {
    return shippingMethods;
  }

  public void setShippingMethods(List<OrderShippingMethod> shippingMethods) {
    this.shippingMethods = shippingMethods;
  }


  public Order status(OrderStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OrderStatus getStatus() {
    return status;
  }

  public void setStatus(OrderStatus status) {
    this.status = status;
  }


  public Order storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

  /**
   * Get storeId
   * @return storeId
   */
  @javax.annotation.Nullable
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }


  public Order total(OrderTotal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public OrderTotal getTotal() {
    return total;
  }

  public void setTotal(OrderTotal total) {
    this.total = total;
  }


  public Order totals(OrderTotals totals) {
    this.totals = totals;
    return this;
  }

  /**
   * Get totals
   * @return totals
   */
  @javax.annotation.Nullable
  public OrderTotals getTotals() {
    return totals;
  }

  public void setTotals(OrderTotals totals) {
    this.totals = totals;
  }


  public Order warehousesIds(List<String> warehousesIds) {
    this.warehousesIds = warehousesIds;
    return this;
  }

  public Order addWarehousesIdsItem(String warehousesIdsItem) {
    if (this.warehousesIds == null) {
      this.warehousesIds = new ArrayList<>();
    }
    this.warehousesIds.add(warehousesIdsItem);
    return this;
  }

  /**
   * Get warehousesIds
   * @return warehousesIds
   */
  @javax.annotation.Nullable
  public List<String> getWarehousesIds() {
    return warehousesIds;
  }

  public void setWarehousesIds(List<String> warehousesIds) {
    this.warehousesIds = warehousesIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.additionalFields, order.additionalFields) &&
        Objects.equals(this.basketId, order.basketId) &&
        Objects.equals(this.billingAddress, order.billingAddress) &&
        Objects.equals(this.bundles, order.bundles) &&
        Objects.equals(this.channelId, order.channelId) &&
        Objects.equals(this.comment, order.comment) &&
        Objects.equals(this.createAt, order.createAt) &&
        Objects.equals(this.currency, order.currency) &&
        Objects.equals(this.customFields, order.customFields) &&
        Objects.equals(this.customer, order.customer) &&
        Objects.equals(this.discounts, order.discounts) &&
        Objects.equals(this.finishedTime, order.finishedTime) &&
        Objects.equals(this.giftMessage, order.giftMessage) &&
        Objects.equals(this.id, order.id) &&
        Objects.equals(this.modifiedAt, order.modifiedAt) &&
        Objects.equals(this.orderDetailsUrl, order.orderDetailsUrl) &&
        Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.orderProducts, order.orderProducts) &&
        Objects.equals(this.paymentMethod, order.paymentMethod) &&
        Objects.equals(this.refunds, order.refunds) &&
        Objects.equals(this.shippingAddress, order.shippingAddress) &&
        Objects.equals(this.shippingMethod, order.shippingMethod) &&
        Objects.equals(this.shippingMethods, order.shippingMethods) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.storeId, order.storeId) &&
        Objects.equals(this.total, order.total) &&
        Objects.equals(this.totals, order.totals) &&
        Objects.equals(this.warehousesIds, order.warehousesIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, basketId, billingAddress, bundles, channelId, comment, createAt, currency, customFields, customer, discounts, finishedTime, giftMessage, id, modifiedAt, orderDetailsUrl, orderId, orderProducts, paymentMethod, refunds, shippingAddress, shippingMethod, shippingMethods, status, storeId, total, totals, warehousesIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    basketId: ").append(toIndentedString(basketId)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    bundles: ").append(toIndentedString(bundles)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    discounts: ").append(toIndentedString(discounts)).append("\n");
    sb.append("    finishedTime: ").append(toIndentedString(finishedTime)).append("\n");
    sb.append("    giftMessage: ").append(toIndentedString(giftMessage)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    orderDetailsUrl: ").append(toIndentedString(orderDetailsUrl)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    orderProducts: ").append(toIndentedString(orderProducts)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    shippingMethod: ").append(toIndentedString(shippingMethod)).append("\n");
    sb.append("    shippingMethods: ").append(toIndentedString(shippingMethods)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("    warehousesIds: ").append(toIndentedString(warehousesIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_fields");
    openapiFields.add("basket_id");
    openapiFields.add("billing_address");
    openapiFields.add("bundles");
    openapiFields.add("channel_id");
    openapiFields.add("comment");
    openapiFields.add("create_at");
    openapiFields.add("currency");
    openapiFields.add("custom_fields");
    openapiFields.add("customer");
    openapiFields.add("discounts");
    openapiFields.add("finished_time");
    openapiFields.add("gift_message");
    openapiFields.add("id");
    openapiFields.add("modified_at");
    openapiFields.add("order_details_url");
    openapiFields.add("order_id");
    openapiFields.add("order_products");
    openapiFields.add("payment_method");
    openapiFields.add("refunds");
    openapiFields.add("shipping_address");
    openapiFields.add("shipping_method");
    openapiFields.add("shipping_methods");
    openapiFields.add("status");
    openapiFields.add("store_id");
    openapiFields.add("total");
    openapiFields.add("totals");
    openapiFields.add("warehouses_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Order
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Order.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Order is not found in the empty JSON string", Order.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Order.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Order` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("basket_id") != null && !jsonObj.get("basket_id").isJsonNull()) && !jsonObj.get("basket_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basket_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basket_id").toString()));
      }
      // validate the optional field `billing_address`
      if (jsonObj.get("billing_address") != null && !jsonObj.get("billing_address").isJsonNull()) {
        CustomerAddress.validateJsonElement(jsonObj.get("billing_address"));
      }
      if (jsonObj.get("bundles") != null && !jsonObj.get("bundles").isJsonNull()) {
        JsonArray jsonArraybundles = jsonObj.getAsJsonArray("bundles");
        if (jsonArraybundles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bundles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bundles` to be an array in the JSON string but got `%s`", jsonObj.get("bundles").toString()));
          }

          // validate the optional field `bundles` (array)
          for (int i = 0; i < jsonArraybundles.size(); i++) {
            OrderItem.validateJsonElement(jsonArraybundles.get(i));
          };
        }
      }
      if ((jsonObj.get("channel_id") != null && !jsonObj.get("channel_id").isJsonNull()) && !jsonObj.get("channel_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_id").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      // validate the optional field `create_at`
      if (jsonObj.get("create_at") != null && !jsonObj.get("create_at").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("create_at"));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        BaseCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      if (jsonObj.get("discounts") != null && !jsonObj.get("discounts").isJsonNull()) {
        JsonArray jsonArraydiscounts = jsonObj.getAsJsonArray("discounts");
        if (jsonArraydiscounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discounts` to be an array in the JSON string but got `%s`", jsonObj.get("discounts").toString()));
          }

          // validate the optional field `discounts` (array)
          for (int i = 0; i < jsonArraydiscounts.size(); i++) {
            OrderTotalsNewDiscount.validateJsonElement(jsonArraydiscounts.get(i));
          };
        }
      }
      // validate the optional field `finished_time`
      if (jsonObj.get("finished_time") != null && !jsonObj.get("finished_time").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("finished_time"));
      }
      if ((jsonObj.get("gift_message") != null && !jsonObj.get("gift_message").isJsonNull()) && !jsonObj.get("gift_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gift_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gift_message").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `modified_at`
      if (jsonObj.get("modified_at") != null && !jsonObj.get("modified_at").isJsonNull()) {
        A2CDateTime.validateJsonElement(jsonObj.get("modified_at"));
      }
      if ((jsonObj.get("order_details_url") != null && !jsonObj.get("order_details_url").isJsonNull()) && !jsonObj.get("order_details_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_details_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_details_url").toString()));
      }
      if ((jsonObj.get("order_id") != null && !jsonObj.get("order_id").isJsonNull()) && !jsonObj.get("order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_id").toString()));
      }
      if (jsonObj.get("order_products") != null && !jsonObj.get("order_products").isJsonNull()) {
        JsonArray jsonArrayorderProducts = jsonObj.getAsJsonArray("order_products");
        if (jsonArrayorderProducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("order_products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `order_products` to be an array in the JSON string but got `%s`", jsonObj.get("order_products").toString()));
          }

          // validate the optional field `order_products` (array)
          for (int i = 0; i < jsonArrayorderProducts.size(); i++) {
            OrderItem.validateJsonElement(jsonArrayorderProducts.get(i));
          };
        }
      }
      // validate the optional field `payment_method`
      if (jsonObj.get("payment_method") != null && !jsonObj.get("payment_method").isJsonNull()) {
        OrderPaymentMethod.validateJsonElement(jsonObj.get("payment_method"));
      }
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        JsonArray jsonArrayrefunds = jsonObj.getAsJsonArray("refunds");
        if (jsonArrayrefunds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("refunds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `refunds` to be an array in the JSON string but got `%s`", jsonObj.get("refunds").toString()));
          }

          // validate the optional field `refunds` (array)
          for (int i = 0; i < jsonArrayrefunds.size(); i++) {
            OrderRefund.validateJsonElement(jsonArrayrefunds.get(i));
          };
        }
      }
      // validate the optional field `shipping_address`
      if (jsonObj.get("shipping_address") != null && !jsonObj.get("shipping_address").isJsonNull()) {
        CustomerAddress.validateJsonElement(jsonObj.get("shipping_address"));
      }
      // validate the optional field `shipping_method`
      if (jsonObj.get("shipping_method") != null && !jsonObj.get("shipping_method").isJsonNull()) {
        OrderShippingMethod.validateJsonElement(jsonObj.get("shipping_method"));
      }
      if (jsonObj.get("shipping_methods") != null && !jsonObj.get("shipping_methods").isJsonNull()) {
        JsonArray jsonArrayshippingMethods = jsonObj.getAsJsonArray("shipping_methods");
        if (jsonArrayshippingMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipping_methods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipping_methods` to be an array in the JSON string but got `%s`", jsonObj.get("shipping_methods").toString()));
          }

          // validate the optional field `shipping_methods` (array)
          for (int i = 0; i < jsonArrayshippingMethods.size(); i++) {
            OrderShippingMethod.validateJsonElement(jsonArrayshippingMethods.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        OrderStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("store_id") != null && !jsonObj.get("store_id").isJsonNull()) && !jsonObj.get("store_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store_id").toString()));
      }
      // validate the optional field `total`
      if (jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) {
        OrderTotal.validateJsonElement(jsonObj.get("total"));
      }
      // validate the optional field `totals`
      if (jsonObj.get("totals") != null && !jsonObj.get("totals").isJsonNull()) {
        OrderTotals.validateJsonElement(jsonObj.get("totals"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("warehouses_ids") != null && !jsonObj.get("warehouses_ids").isJsonNull() && !jsonObj.get("warehouses_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouses_ids` to be an array in the JSON string but got `%s`", jsonObj.get("warehouses_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Order.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Order' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Order> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Order.class));

       return (TypeAdapter<T>) new TypeAdapter<Order>() {
           @Override
           public void write(JsonWriter out, Order value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Order read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Order given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Order
   * @throws IOException if the JSON string is invalid with respect to Order
   */
  public static Order fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Order.class);
  }

  /**
   * Convert an instance of Order to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

