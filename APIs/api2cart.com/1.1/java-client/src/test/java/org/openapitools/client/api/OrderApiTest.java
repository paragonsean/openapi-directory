/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.ModelResponseOrderAbandonedList;
import org.openapitools.client.model.ModelResponseOrderList;
import org.openapitools.client.model.ModelResponseOrderPreestimateShippingList;
import org.openapitools.client.model.ModelResponseOrderShipmentList;
import org.openapitools.client.model.ModelResponseOrderTransactionList;
import org.openapitools.client.model.OrderAdd;
import org.openapitools.client.model.OrderAdd200Response;
import org.openapitools.client.model.OrderCount200Response;
import org.openapitools.client.model.OrderFinancialStatusList200Response;
import org.openapitools.client.model.OrderFind200Response;
import org.openapitools.client.model.OrderFulfillmentStatusList200Response;
import org.openapitools.client.model.OrderInfo200Response;
import org.openapitools.client.model.OrderPreestimateShippingList;
import org.openapitools.client.model.OrderRefundAdd;
import org.openapitools.client.model.OrderRefundAdd200Response;
import org.openapitools.client.model.OrderShipmentAdd;
import org.openapitools.client.model.OrderShipmentAdd200Response;
import org.openapitools.client.model.OrderShipmentDelete200Response;
import org.openapitools.client.model.OrderShipmentTrackingAdd;
import org.openapitools.client.model.OrderShipmentTrackingAdd200Response;
import org.openapitools.client.model.OrderShipmentUpdate;
import org.openapitools.client.model.OrderStatusList200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Disabled
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    /**
     * Get list of orders that were left by customers before completing the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderAbandonedListTest() throws ApiException {
        String customerId = null;
        String customerEmail = null;
        String createdTo = null;
        String createdFrom = null;
        String modifiedTo = null;
        String modifiedFrom = null;
        Boolean skipEmptyEmail = null;
        String storeId = null;
        String pageCursor = null;
        Integer count = null;
        Integer start = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        ModelResponseOrderAbandonedList response = api.orderAbandonedList(customerId, customerEmail, createdTo, createdFrom, modifiedTo, modifiedFrom, skipEmptyEmail, storeId, pageCursor, count, start, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Add a new order to the cart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderAddTest() throws ApiException {
        OrderAdd orderAdd = null;
        OrderAdd200Response response = api.orderAdd(orderAdd);
        // TODO: test validations
    }

    /**
     * Count orders in store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderCountTest() throws ApiException {
        String customerId = null;
        String customerEmail = null;
        String orderStatus = null;
        List<String> orderStatusIds = null;
        String createdTo = null;
        String createdFrom = null;
        String modifiedTo = null;
        String modifiedFrom = null;
        String storeId = null;
        String ids = null;
        String orderIds = null;
        String ebayOrderStatus = null;
        String financialStatus = null;
        String fulfillmentStatus = null;
        String shippingMethod = null;
        String deliveryMethod = null;
        String shipNodeType = null;
        OrderCount200Response response = api.orderCount(customerId, customerEmail, orderStatus, orderStatusIds, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, financialStatus, fulfillmentStatus, shippingMethod, deliveryMethod, shipNodeType);
        // TODO: test validations
    }

    /**
     * Retrieve list of financial statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderFinancialStatusListTest() throws ApiException {
        OrderFinancialStatusList200Response response = api.orderFinancialStatusList();
        // TODO: test validations
    }

    /**
     * This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderFindTest() throws ApiException {
        String customerId = null;
        String customerEmail = null;
        String orderStatus = null;
        Integer start = null;
        Integer count = null;
        String params = null;
        String exclude = null;
        String createdTo = null;
        String createdFrom = null;
        String modifiedTo = null;
        String modifiedFrom = null;
        String financialStatus = null;
        OrderFind200Response response = api.orderFind(customerId, customerEmail, orderStatus, start, count, params, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, financialStatus);
        // TODO: test validations
    }

    /**
     * Retrieve list of fulfillment statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderFulfillmentStatusListTest() throws ApiException {
        OrderFulfillmentStatusList200Response response = api.orderFulfillmentStatusList();
        // TODO: test validations
    }

    /**
     * Info about a specific order by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderInfoTest() throws ApiException {
        String orderId = null;
        String id = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String storeId = null;
        Boolean enableCache = null;
        OrderInfo200Response response = api.orderInfo(orderId, id, params, responseFields, exclude, storeId, enableCache);
        // TODO: test validations
    }

    /**
     * Get list of orders from store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderListTest() throws ApiException {
        String customerId = null;
        String customerEmail = null;
        String phone = null;
        String orderStatus = null;
        List<String> orderStatusIds = null;
        Integer start = null;
        Integer count = null;
        String pageCursor = null;
        String sortBy = null;
        String sortDirection = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String createdTo = null;
        String createdFrom = null;
        String modifiedTo = null;
        String modifiedFrom = null;
        String storeId = null;
        String ids = null;
        String orderIds = null;
        String ebayOrderStatus = null;
        String basketId = null;
        String financialStatus = null;
        String fulfillmentStatus = null;
        String shippingMethod = null;
        String skipOrderIds = null;
        Integer sinceId = null;
        Boolean isDeleted = null;
        String shippingCountryIso3 = null;
        Boolean enableCache = null;
        String deliveryMethod = null;
        String shipNodeType = null;
        String currencyId = null;
        ModelResponseOrderList response = api.orderList(customerId, customerEmail, phone, orderStatus, orderStatusIds, start, count, pageCursor, sortBy, sortDirection, params, responseFields, exclude, createdTo, createdFrom, modifiedTo, modifiedFrom, storeId, ids, orderIds, ebayOrderStatus, basketId, financialStatus, fulfillmentStatus, shippingMethod, skipOrderIds, sinceId, isDeleted, shippingCountryIso3, enableCache, deliveryMethod, shipNodeType, currencyId);
        // TODO: test validations
    }

    /**
     * Retrieve list of order preestimated shipping methods
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderPreestimateShippingListTest() throws ApiException {
        OrderPreestimateShippingList orderPreestimateShippingList = null;
        ModelResponseOrderPreestimateShippingList response = api.orderPreestimateShippingList(orderPreestimateShippingList);
        // TODO: test validations
    }

    /**
     * Add a refund to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderRefundAddTest() throws ApiException {
        OrderRefundAdd orderRefundAdd = null;
        OrderRefundAdd200Response response = api.orderRefundAdd(orderRefundAdd);
        // TODO: test validations
    }

    /**
     * Add a shipment to the order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderShipmentAddTest() throws ApiException {
        OrderShipmentAdd orderShipmentAdd = null;
        OrderShipmentAdd200Response response = api.orderShipmentAdd(orderShipmentAdd);
        // TODO: test validations
    }

    /**
     * Delete order&#39;s shipment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderShipmentDeleteTest() throws ApiException {
        String shipmentId = null;
        String orderId = null;
        String storeId = null;
        OrderShipmentDelete200Response response = api.orderShipmentDelete(shipmentId, orderId, storeId);
        // TODO: test validations
    }

    /**
     * Get information of shipment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderShipmentInfoTest() throws ApiException {
        String id = null;
        String orderId = null;
        Integer start = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String storeId = null;
        ModelResponseOrderShipmentList response = api.orderShipmentInfo(id, orderId, start, params, responseFields, exclude, storeId);
        // TODO: test validations
    }

    /**
     * Get list of shipments by orders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderShipmentListTest() throws ApiException {
        String orderId = null;
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        String storeId = null;
        ModelResponseOrderShipmentList response = api.orderShipmentList(orderId, pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, storeId);
        // TODO: test validations
    }

    /**
     * Add order shipment&#39;s tracking info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderShipmentTrackingAddTest() throws ApiException {
        OrderShipmentTrackingAdd orderShipmentTrackingAdd = null;
        OrderShipmentTrackingAdd200Response response = api.orderShipmentTrackingAdd(orderShipmentTrackingAdd);
        // TODO: test validations
    }

    /**
     * Update order&#39;s shipment information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderShipmentUpdateTest() throws ApiException {
        OrderShipmentUpdate orderShipmentUpdate = null;
        AccountConfigUpdate200Response response = api.orderShipmentUpdate(orderShipmentUpdate);
        // TODO: test validations
    }

    /**
     * Retrieve list of statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderStatusListTest() throws ApiException {
        String storeId = null;
        String responseFields = null;
        OrderStatusList200Response response = api.orderStatusList(storeId, responseFields);
        // TODO: test validations
    }

    /**
     * Retrieve list of order transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderTransactionListTest() throws ApiException {
        String orderIds = null;
        Integer count = null;
        String storeId = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String pageCursor = null;
        ModelResponseOrderTransactionList response = api.orderTransactionList(orderIds, count, storeId, params, responseFields, exclude, pageCursor);
        // TODO: test validations
    }

    /**
     * Update existing order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orderUpdateTest() throws ApiException {
        String orderId = null;
        String storeId = null;
        String orderStatus = null;
        String comment = null;
        String adminComment = null;
        String adminPrivateComment = null;
        String dateModified = null;
        String dateFinished = null;
        String financialStatus = null;
        String fulfillmentStatus = null;
        String orderPaymentMethod = null;
        Boolean sendNotifications = null;
        AccountConfigUpdate200Response response = api.orderUpdate(orderId, storeId, orderStatus, comment, adminComment, adminPrivateComment, dateModified, dateFinished, financialStatus, fulfillmentStatus, orderPaymentMethod, sendNotifications);
        // TODO: test validations
    }

}
