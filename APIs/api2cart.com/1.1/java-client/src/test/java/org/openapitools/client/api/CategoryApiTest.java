/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.BridgeDelete200Response;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CategoryAdd200Response;
import org.openapitools.client.model.CategoryCount200Response;
import org.openapitools.client.model.CategoryFind200Response;
import org.openapitools.client.model.CategoryImageAdd200Response;
import org.openapitools.client.model.CategoryInfo200Response;
import org.openapitools.client.model.ModelResponseCategoryList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoryApi
 */
@Disabled
public class CategoryApiTest {

    private final CategoryApi api = new CategoryApi();

    /**
     * Add new category in store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryAddTest() throws ApiException {
        String name = null;
        String parentId = null;
        String storesIds = null;
        String storeId = null;
        String langId = null;
        Boolean avail = null;
        Integer sortOrder = null;
        String createdTime = null;
        String modifiedTime = null;
        String description = null;
        String metaTitle = null;
        String metaDescription = null;
        String metaKeywords = null;
        String seoUrl = null;
        CategoryAdd200Response response = api.categoryAdd(name, parentId, storesIds, storeId, langId, avail, sortOrder, createdTime, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl);
        // TODO: test validations
    }

    /**
     * Assign category to product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryAssignTest() throws ApiException {
        String productId = null;
        String categoryId = null;
        String storeId = null;
        CartConfigUpdate200Response response = api.categoryAssign(productId, categoryId, storeId);
        // TODO: test validations
    }

    /**
     * Count categories in store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryCountTest() throws ApiException {
        String parentId = null;
        String storeId = null;
        String langId = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        Boolean avail = null;
        CategoryCount200Response response = api.categoryCount(parentId, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail);
        // TODO: test validations
    }

    /**
     * Delete category in store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryDeleteTest() throws ApiException {
        String id = null;
        BridgeDelete200Response response = api.categoryDelete(id);
        // TODO: test validations
    }

    /**
     * Search category in store. \&quot;Laptop\&quot; is specified here by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryFindTest() throws ApiException {
        String findValue = null;
        String findWhere = null;
        String findParams = null;
        String storeId = null;
        String langId = null;
        CategoryFind200Response response = api.categoryFind(findValue, findWhere, findParams, storeId, langId);
        // TODO: test validations
    }

    /**
     * Add image to category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryImageAddTest() throws ApiException {
        String categoryId = null;
        String imageName = null;
        String url = null;
        String type = null;
        String label = null;
        String mime = null;
        Integer position = null;
        String storeId = null;
        CategoryImageAdd200Response response = api.categoryImageAdd(categoryId, imageName, url, type, label, mime, position, storeId);
        // TODO: test validations
    }

    /**
     * Delete image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryImageDeleteTest() throws ApiException {
        String categoryId = null;
        String imageId = null;
        String storeId = null;
        AttributeDelete200Response response = api.categoryImageDelete(categoryId, imageId, storeId);
        // TODO: test validations
    }

    /**
     * Get category info about category ID*** or specify other category ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryInfoTest() throws ApiException {
        String id = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String storeId = null;
        String langId = null;
        CategoryInfo200Response response = api.categoryInfo(id, params, responseFields, exclude, storeId, langId);
        // TODO: test validations
    }

    /**
     * Get list of categories from store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String pageCursor = null;
        String parentId = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String storeId = null;
        String langId = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        Boolean avail = null;
        ModelResponseCategoryList response = api.categoryList(start, count, pageCursor, parentId, params, responseFields, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, avail);
        // TODO: test validations
    }

    /**
     * Unassign category to product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryUnassignTest() throws ApiException {
        String categoryId = null;
        String productId = null;
        String storeId = null;
        CartConfigUpdate200Response response = api.categoryUnassign(categoryId, productId, storeId);
        // TODO: test validations
    }

    /**
     * Update category in store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoryUpdateTest() throws ApiException {
        String id = null;
        String name = null;
        String parentId = null;
        String storesIds = null;
        Boolean avail = null;
        Integer sortOrder = null;
        String modifiedTime = null;
        String description = null;
        String metaTitle = null;
        String metaDescription = null;
        String metaKeywords = null;
        String seoUrl = null;
        String langId = null;
        String storeId = null;
        AccountConfigUpdate200Response response = api.categoryUpdate(id, name, parentId, storesIds, avail, sortOrder, modifiedTime, description, metaTitle, metaDescription, metaKeywords, seoUrl, langId, storeId);
        // TODO: test validations
    }

}
