/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CartValidate200Response;
import org.openapitools.client.model.ModelResponseProductAttributeList;
import org.openapitools.client.model.ModelResponseProductChildItemList;
import org.openapitools.client.model.ModelResponseProductList;
import org.openapitools.client.model.ProductAdd;
import org.openapitools.client.model.ProductAdd200Response;
import org.openapitools.client.model.ProductAttributeValueSet200Response;
import org.openapitools.client.model.ProductAttributeValueUnset200Response;
import org.openapitools.client.model.ProductBrandList200Response;
import org.openapitools.client.model.ProductChildItemFind200Response;
import org.openapitools.client.model.ProductChildItemInfo200Response;
import org.openapitools.client.model.ProductCount200Response;
import org.openapitools.client.model.ProductCurrencyAdd200Response;
import org.openapitools.client.model.ProductCurrencyList200Response;
import org.openapitools.client.model.ProductDelete200Response;
import org.openapitools.client.model.ProductFind200Response;
import org.openapitools.client.model.ProductImageAdd;
import org.openapitools.client.model.ProductImageAdd200Response;
import org.openapitools.client.model.ProductImageUpdate200Response;
import org.openapitools.client.model.ProductInfo200Response;
import org.openapitools.client.model.ProductManufacturerAdd200Response;
import org.openapitools.client.model.ProductOptionAdd200Response;
import org.openapitools.client.model.ProductOptionAssign200Response;
import org.openapitools.client.model.ProductOptionList200Response;
import org.openapitools.client.model.ProductOptionValueAdd200Response;
import org.openapitools.client.model.ProductOptionValueAssign200Response;
import org.openapitools.client.model.ProductPriceAdd;
import org.openapitools.client.model.ProductPriceUpdate;
import org.openapitools.client.model.ProductReviewList200Response;
import org.openapitools.client.model.ProductTaxAdd;
import org.openapitools.client.model.ProductTaxAdd200Response;
import org.openapitools.client.model.ProductUpdate;
import org.openapitools.client.model.ProductVariantAdd;
import org.openapitools.client.model.ProductVariantAdd200Response;
import org.openapitools.client.model.ProductVariantCount200Response;
import org.openapitools.client.model.ProductVariantImageAdd;
import org.openapitools.client.model.ProductVariantList200Response;
import org.openapitools.client.model.ProductVariantPriceAdd;
import org.openapitools.client.model.ProductVariantPriceUpdate;
import org.openapitools.client.model.ProductVariantUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Disabled
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    /**
     * Add new product to store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productAddTest() throws ApiException {
        ProductAdd productAdd = null;
        ProductAdd200Response response = api.productAdd(productAdd);
        // TODO: test validations
    }

    /**
     * Get list of attributes and values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productAttributeListTest() throws ApiException {
        String productId = null;
        String attributeId = null;
        String variantId = null;
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String attributeGroupId = null;
        String setName = null;
        String langId = null;
        String storeId = null;
        String sortBy = null;
        String sortDirection = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        ModelResponseProductAttributeList response = api.productAttributeList(productId, attributeId, variantId, pageCursor, start, count, attributeGroupId, setName, langId, storeId, sortBy, sortDirection, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Set attribute value to product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productAttributeValueSetTest() throws ApiException {
        String productId = null;
        String attributeId = null;
        String attributeGroupId = null;
        String attributeName = null;
        String value = null;
        Integer valueId = null;
        String langId = null;
        String storeId = null;
        ProductAttributeValueSet200Response response = api.productAttributeValueSet(productId, attributeId, attributeGroupId, attributeName, value, valueId, langId, storeId);
        // TODO: test validations
    }

    /**
     * Removes attribute value for a product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productAttributeValueUnsetTest() throws ApiException {
        String productId = null;
        String attributeId = null;
        String storeId = null;
        Boolean includeDefault = null;
        Boolean reindex = null;
        Boolean clearCache = null;
        ProductAttributeValueUnset200Response response = api.productAttributeValueUnset(productId, attributeId, storeId, includeDefault, reindex, clearCache);
        // TODO: test validations
    }

    /**
     * Get list of brands from your store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productBrandListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String params = null;
        String brandIds = null;
        String exclude = null;
        String storeId = null;
        String langId = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        String responseFields = null;
        ProductBrandList200Response response = api.productBrandList(start, count, params, brandIds, exclude, storeId, langId, createdFrom, createdTo, modifiedFrom, modifiedTo, responseFields);
        // TODO: test validations
    }

    /**
     * Search product child item (bundled item or configurable product variant) in store catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productChildItemFindTest() throws ApiException {
        String findValue = null;
        String findWhere = null;
        String findParams = null;
        String storeId = null;
        ProductChildItemFind200Response response = api.productChildItemFind(findValue, findWhere, findParams, storeId);
        // TODO: test validations
    }

    /**
     * Get child for specific product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productChildItemInfoTest() throws ApiException {
        String productId = null;
        String id = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String storeId = null;
        String langId = null;
        String currencyId = null;
        ProductChildItemInfo200Response response = api.productChildItemInfo(productId, id, params, responseFields, exclude, storeId, langId, currencyId);
        // TODO: test validations
    }

    /**
     * Get child items list of specific product(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productChildItemListTest() throws ApiException {
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        String productId = null;
        String productIds = null;
        String storeId = null;
        String langId = null;
        String currencyId = null;
        Boolean availSale = null;
        String reportRequestId = null;
        Boolean disableReportCache = null;
        ModelResponseProductChildItemList response = api.productChildItemList(pageCursor, start, count, params, responseFields, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, productId, productIds, storeId, langId, currencyId, availSale, reportRequestId, disableReportCache);
        // TODO: test validations
    }

    /**
     * Count products in store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCountTest() throws ApiException {
        String categoryId = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        Boolean availView = null;
        Boolean availSale = null;
        String storeId = null;
        String langId = null;
        String productIds = null;
        String reportRequestId = null;
        Boolean disableReportCache = null;
        String brandName = null;
        List<String> productAttributes = null;
        String status = null;
        String type = null;
        ProductCount200Response response = api.productCount(categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, productIds, reportRequestId, disableReportCache, brandName, productAttributes, status, type);
        // TODO: test validations
    }

    /**
     * Add currency and/or set default in store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCurrencyAddTest() throws ApiException {
        String iso3 = null;
        BigDecimal rate = null;
        String name = null;
        Boolean avail = null;
        String symbolLeft = null;
        String symbolRight = null;
        Boolean _default = null;
        ProductCurrencyAdd200Response response = api.productCurrencyAdd(iso3, rate, name, avail, symbolLeft, symbolRight, _default);
        // TODO: test validations
    }

    /**
     * Get list of currencies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCurrencyListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String params = null;
        String pageCursor = null;
        String exclude = null;
        String responseFields = null;
        Boolean _default = null;
        Boolean avail = null;
        ProductCurrencyList200Response response = api.productCurrencyList(start, count, params, pageCursor, exclude, responseFields, _default, avail);
        // TODO: test validations
    }

    /**
     * Product delete
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productDeleteTest() throws ApiException {
        String id = null;
        ProductDelete200Response response = api.productDelete(id);
        // TODO: test validations
    }

    /**
     * Retrieve all available fields for product item in store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productFieldsTest() throws ApiException {
        CartConfigUpdate200Response response = api.productFields();
        // TODO: test validations
    }

    /**
     * Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productFindTest() throws ApiException {
        String findValue = null;
        String findWhere = null;
        String findParams = null;
        String findWhat = null;
        String langId = null;
        String storeId = null;
        ProductFind200Response response = api.productFind(findValue, findWhere, findParams, findWhat, langId, storeId);
        // TODO: test validations
    }

    /**
     * Add image to product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productImageAddTest() throws ApiException {
        ProductImageAdd productImageAdd = null;
        ProductImageAdd200Response response = api.productImageAdd(productImageAdd);
        // TODO: test validations
    }

    /**
     * Delete image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productImageDeleteTest() throws ApiException {
        String productId = null;
        String id = null;
        String storeId = null;
        AttributeDelete200Response response = api.productImageDelete(productId, id, storeId);
        // TODO: test validations
    }

    /**
     * Update details of image
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productImageUpdateTest() throws ApiException {
        String productId = null;
        String id = null;
        String variantIds = null;
        String imageName = null;
        String type = null;
        String label = null;
        Integer position = null;
        String storeId = null;
        String langId = null;
        Boolean hidden = null;
        ProductImageUpdate200Response response = api.productImageUpdate(productId, id, variantIds, imageName, type, label, position, storeId, langId, hidden);
        // TODO: test validations
    }

    /**
     * Get product info about product ID *** or specify other product ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productInfoTest() throws ApiException {
        String id = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String storeId = null;
        String langId = null;
        String currencyId = null;
        String reportRequestId = null;
        Boolean disableReportCache = null;
        ProductInfo200Response response = api.productInfo(id, params, responseFields, exclude, storeId, langId, currencyId, reportRequestId, disableReportCache);
        // TODO: test validations
    }

    /**
     * Get list of products from your store. Returns 10 products by default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productListTest() throws ApiException {
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        String categoryId = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        Boolean availView = null;
        Boolean availSale = null;
        String storeId = null;
        String langId = null;
        String currencyId = null;
        String productIds = null;
        Integer sinceId = null;
        String reportRequestId = null;
        Boolean disableReportCache = null;
        String sortBy = null;
        String sortDirection = null;
        String sku = null;
        Boolean disableCache = null;
        String brandName = null;
        List<String> productAttributes = null;
        String status = null;
        String type = null;
        ModelResponseProductList response = api.productList(pageCursor, start, count, params, responseFields, exclude, categoryId, createdFrom, createdTo, modifiedFrom, modifiedTo, availView, availSale, storeId, langId, currencyId, productIds, sinceId, reportRequestId, disableReportCache, sortBy, sortDirection, sku, disableCache, brandName, productAttributes, status, type);
        // TODO: test validations
    }

    /**
     * Add manufacturer to store and assign to product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productManufacturerAddTest() throws ApiException {
        String productId = null;
        String manufacturer = null;
        ProductManufacturerAdd200Response response = api.productManufacturerAdd(productId, manufacturer);
        // TODO: test validations
    }

    /**
     * Add product option from store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOptionAddTest() throws ApiException {
        String name = null;
        String type = null;
        String productId = null;
        String defaultOptionValue = null;
        String optionValues = null;
        String description = null;
        Boolean avail = null;
        Integer sortOrder = null;
        Boolean required = null;
        Boolean clearCache = null;
        ProductOptionAdd200Response response = api.productOptionAdd(name, type, productId, defaultOptionValue, optionValues, description, avail, sortOrder, required, clearCache);
        // TODO: test validations
    }

    /**
     * Assign option from product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOptionAssignTest() throws ApiException {
        String productId = null;
        String optionId = null;
        Boolean required = null;
        Integer sortOrder = null;
        String optionValues = null;
        Boolean clearCache = null;
        ProductOptionAssign200Response response = api.productOptionAssign(productId, optionId, required, sortOrder, optionValues, clearCache);
        // TODO: test validations
    }

    /**
     * Get list of options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOptionListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String params = null;
        String exclude = null;
        String responseFields = null;
        String productId = null;
        String langId = null;
        String storeId = null;
        ProductOptionList200Response response = api.productOptionList(start, count, params, exclude, responseFields, productId, langId, storeId);
        // TODO: test validations
    }

    /**
     * Add product option item from option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOptionValueAddTest() throws ApiException {
        String productId = null;
        String optionId = null;
        String optionValue = null;
        Integer sortOrder = null;
        Boolean clearCache = null;
        ProductOptionValueAdd200Response response = api.productOptionValueAdd(productId, optionId, optionValue, sortOrder, clearCache);
        // TODO: test validations
    }

    /**
     * Assign product option item from product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOptionValueAssignTest() throws ApiException {
        Integer productOptionId = null;
        Integer optionValueId = null;
        Boolean clearCache = null;
        ProductOptionValueAssign200Response response = api.productOptionValueAssign(productOptionId, optionValueId, clearCache);
        // TODO: test validations
    }

    /**
     * Update product option item from option.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productOptionValueUpdateTest() throws ApiException {
        String productId = null;
        String optionId = null;
        Integer optionValueId = null;
        String optionValue = null;
        BigDecimal price = null;
        BigDecimal quantity = null;
        Boolean clearCache = null;
        AccountConfigUpdate200Response response = api.productOptionValueUpdate(productId, optionId, optionValueId, optionValue, price, quantity, clearCache);
        // TODO: test validations
    }

    /**
     * Add some prices to the product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPriceAddTest() throws ApiException {
        ProductPriceAdd productPriceAdd = null;
        CartValidate200Response response = api.productPriceAdd(productPriceAdd);
        // TODO: test validations
    }

    /**
     * Delete some prices of the product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPriceDeleteTest() throws ApiException {
        String productId = null;
        String groupPrices = null;
        AttributeDelete200Response response = api.productPriceDelete(productId, groupPrices);
        // TODO: test validations
    }

    /**
     * Update some prices of the product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPriceUpdateTest() throws ApiException {
        ProductPriceUpdate productPriceUpdate = null;
        AccountConfigUpdate200Response response = api.productPriceUpdate(productPriceUpdate);
        // TODO: test validations
    }

    /**
     * Get reviews of a specific product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productReviewListTest() throws ApiException {
        String productId = null;
        Integer start = null;
        String pageCursor = null;
        Integer count = null;
        String ids = null;
        String storeId = null;
        String status = null;
        String params = null;
        String exclude = null;
        String responseFields = null;
        ProductReviewList200Response response = api.productReviewList(productId, start, pageCursor, count, ids, storeId, status, params, exclude, responseFields);
        // TODO: test validations
    }

    /**
     * Assign product to store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productStoreAssignTest() throws ApiException {
        String productId = null;
        String storeId = null;
        AccountConfigUpdate200Response response = api.productStoreAssign(productId, storeId);
        // TODO: test validations
    }

    /**
     * Add tax class and tax rate to store and assign to product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productTaxAddTest() throws ApiException {
        ProductTaxAdd productTaxAdd = null;
        ProductTaxAdd200Response response = api.productTaxAdd(productTaxAdd);
        // TODO: test validations
    }

    /**
     * Update price and quantity for a specific product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productUpdateTest() throws ApiException {
        ProductUpdate productUpdate = null;
        AccountConfigUpdate200Response response = api.productUpdate(productUpdate);
        // TODO: test validations
    }

    /**
     * Add variant to product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantAddTest() throws ApiException {
        ProductVariantAdd productVariantAdd = null;
        ProductVariantAdd200Response response = api.productVariantAdd(productVariantAdd);
        // TODO: test validations
    }

    /**
     * Get count variants.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantCountTest() throws ApiException {
        String productId = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        String categoryId = null;
        String storeId = null;
        ProductVariantCount200Response response = api.productVariantCount(productId, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, storeId);
        // TODO: test validations
    }

    /**
     * Delete variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantDeleteTest() throws ApiException {
        String id = null;
        String productId = null;
        AttributeDelete200Response response = api.productVariantDelete(id, productId);
        // TODO: test validations
    }

    /**
     * Add image to product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantImageAddTest() throws ApiException {
        ProductVariantImageAdd productVariantImageAdd = null;
        ProductImageAdd200Response response = api.productVariantImageAdd(productVariantImageAdd);
        // TODO: test validations
    }

    /**
     * Delete  image to product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantImageDeleteTest() throws ApiException {
        String productId = null;
        Integer productVariantId = null;
        String id = null;
        String storeId = null;
        AttributeDelete200Response response = api.productVariantImageDelete(productId, productVariantId, id, storeId);
        // TODO: test validations
    }

    /**
     * Get variant info. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.info\&quot; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantInfoTest() throws ApiException {
        String id = null;
        String params = null;
        String exclude = null;
        String storeId = null;
        ProductInfo200Response response = api.productVariantInfo(id, params, exclude, storeId);
        // TODO: test validations
    }

    /**
     * Get a list of variants. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.list\&quot; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String params = null;
        String exclude = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        String categoryId = null;
        String productId = null;
        String storeId = null;
        ProductVariantList200Response response = api.productVariantList(start, count, params, exclude, createdFrom, createdTo, modifiedFrom, modifiedTo, categoryId, productId, storeId);
        // TODO: test validations
    }

    /**
     * Add some prices to the product variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantPriceAddTest() throws ApiException {
        ProductVariantPriceAdd productVariantPriceAdd = null;
        CartValidate200Response response = api.productVariantPriceAdd(productVariantPriceAdd);
        // TODO: test validations
    }

    /**
     * Delete some prices of the product variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantPriceDeleteTest() throws ApiException {
        String id = null;
        String productId = null;
        String groupPrices = null;
        AttributeDelete200Response response = api.productVariantPriceDelete(id, productId, groupPrices);
        // TODO: test validations
    }

    /**
     * Update some prices of the product variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantPriceUpdateTest() throws ApiException {
        ProductVariantPriceUpdate productVariantPriceUpdate = null;
        AccountConfigUpdate200Response response = api.productVariantPriceUpdate(productVariantPriceUpdate);
        // TODO: test validations
    }

    /**
     * Update variant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productVariantUpdateTest() throws ApiException {
        ProductVariantUpdate productVariantUpdate = null;
        AccountConfigUpdate200Response response = api.productVariantUpdate(productVariantUpdate);
        // TODO: test validations
    }

}
