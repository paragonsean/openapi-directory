/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttributeAdd200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.ProductImageUpdate200Response;
import org.openapitools.client.model.WebhookCount200Response;
import org.openapitools.client.model.WebhookEvents200Response;
import org.openapitools.client.model.WebhookList200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookApi
 */
@Disabled
public class WebhookApiTest {

    private final WebhookApi api = new WebhookApi();

    /**
     * Count registered webhooks on the store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookCountTest() throws ApiException {
        String entity = null;
        String action = null;
        Boolean active = null;
        WebhookCount200Response response = api.webhookCount(entity, action, active);
        // TODO: test validations
    }

    /**
     * Create webhook on the store and subscribe to it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookCreateTest() throws ApiException {
        String entity = null;
        String action = null;
        String paramCallback = null;
        String label = null;
        String fields = null;
        Boolean active = null;
        String storeId = null;
        AttributeAdd200Response response = api.webhookCreate(entity, action, paramCallback, label, fields, active, storeId);
        // TODO: test validations
    }

    /**
     * Delete registered webhook on the store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookDeleteTest() throws ApiException {
        String id = null;
        AttributeDelete200Response response = api.webhookDelete(id);
        // TODO: test validations
    }

    /**
     * List all Webhooks that are available on this store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookEventsTest() throws ApiException {
        WebhookEvents200Response response = api.webhookEvents();
        // TODO: test validations
    }

    /**
     * List registered webhook on the store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookListTest() throws ApiException {
        String params = null;
        Integer start = null;
        Integer count = null;
        String entity = null;
        String action = null;
        Boolean active = null;
        String ids = null;
        WebhookList200Response response = api.webhookList(params, start, count, entity, action, active, ids);
        // TODO: test validations
    }

    /**
     * Update Webhooks parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webhookUpdateTest() throws ApiException {
        String id = null;
        String paramCallback = null;
        String label = null;
        String fields = null;
        Boolean active = null;
        ProductImageUpdate200Response response = api.webhookUpdate(id, paramCallback, label, fields, active);
        // TODO: test validations
    }

}
