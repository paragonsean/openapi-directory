/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttributeAdd200Response;
import org.openapitools.client.model.AttributeAssignGroup200Response;
import org.openapitools.client.model.AttributeAttributesetList200Response;
import org.openapitools.client.model.AttributeCount200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.AttributeInfo200Response;
import org.openapitools.client.model.AttributeTypeList200Response;
import org.openapitools.client.model.AttributeUnassignGroup200Response;
import org.openapitools.client.model.AttributeUpdate200Response;
import org.openapitools.client.model.ModelResponseAttributeList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AttributeApi
 */
@Disabled
public class AttributeApiTest {

    private final AttributeApi api = new AttributeApi();

    /**
     * Add new attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeAddTest() throws ApiException {
        String type = null;
        String name = null;
        String code = null;
        String storeId = null;
        String langId = null;
        Boolean visible = null;
        Boolean required = null;
        Integer position = null;
        String attributeGroupId = null;
        String isGlobal = null;
        Boolean isSearchable = null;
        String isFilterable = null;
        Boolean isComparable = null;
        Boolean isHtmlAllowedOnFront = null;
        Boolean isFilterableInSearch = null;
        Boolean isConfigurable = null;
        Boolean isVisibleInAdvancedSearch = null;
        Boolean isUsedForPromoRules = null;
        Boolean usedInProductListing = null;
        Boolean usedForSortBy = null;
        String applyTo = null;
        AttributeAdd200Response response = api.attributeAdd(type, name, code, storeId, langId, visible, required, position, attributeGroupId, isGlobal, isSearchable, isFilterable, isComparable, isHtmlAllowedOnFront, isFilterableInSearch, isConfigurable, isVisibleInAdvancedSearch, isUsedForPromoRules, usedInProductListing, usedForSortBy, applyTo);
        // TODO: test validations
    }

    /**
     * Assign attribute to the group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeAssignGroupTest() throws ApiException {
        String id = null;
        String groupId = null;
        String attributeSetId = null;
        AttributeAssignGroup200Response response = api.attributeAssignGroup(id, groupId, attributeSetId);
        // TODO: test validations
    }

    /**
     * Assign attribute to the attribute set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeAssignSetTest() throws ApiException {
        String id = null;
        String attributeSetId = null;
        String groupId = null;
        AttributeAssignGroup200Response response = api.attributeAssignSet(id, attributeSetId, groupId);
        // TODO: test validations
    }

    /**
     * Get attribute_set list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeAttributesetListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String params = null;
        String exclude = null;
        String responseFields = null;
        AttributeAttributesetList200Response response = api.attributeAttributesetList(start, count, params, exclude, responseFields);
        // TODO: test validations
    }

    /**
     * Get attributes count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeCountTest() throws ApiException {
        String type = null;
        String storeId = null;
        String langId = null;
        Boolean visible = null;
        Boolean required = null;
        Boolean system = null;
        AttributeCount200Response response = api.attributeCount(type, storeId, langId, visible, required, system);
        // TODO: test validations
    }

    /**
     * Delete attribute from store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeDeleteTest() throws ApiException {
        String id = null;
        String storeId = null;
        AttributeDelete200Response response = api.attributeDelete(id, storeId);
        // TODO: test validations
    }

    /**
     * Get attribute group list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeGroupListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String langId = null;
        String params = null;
        String exclude = null;
        String responseFields = null;
        String attributeSetId = null;
        AttributeAttributesetList200Response response = api.attributeGroupList(start, count, langId, params, exclude, responseFields, attributeSetId);
        // TODO: test validations
    }

    /**
     * Get attribute info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeInfoTest() throws ApiException {
        String id = null;
        String storeId = null;
        String langId = null;
        String params = null;
        String exclude = null;
        String responseFields = null;
        AttributeInfo200Response response = api.attributeInfo(id, storeId, langId, params, exclude, responseFields);
        // TODO: test validations
    }

    /**
     * Get attributes list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeListTest() throws ApiException {
        Integer start = null;
        Integer count = null;
        String type = null;
        String attributeIds = null;
        String storeId = null;
        String langId = null;
        String params = null;
        String exclude = null;
        String responseFields = null;
        Boolean visible = null;
        Boolean required = null;
        Boolean system = null;
        ModelResponseAttributeList response = api.attributeList(start, count, type, attributeIds, storeId, langId, params, exclude, responseFields, visible, required, system);
        // TODO: test validations
    }

    /**
     * Get list of supported attributes types
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeTypeListTest() throws ApiException {
        AttributeTypeList200Response response = api.attributeTypeList();
        // TODO: test validations
    }

    /**
     * Unassign attribute from group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeUnassignGroupTest() throws ApiException {
        String id = null;
        String groupId = null;
        AttributeUnassignGroup200Response response = api.attributeUnassignGroup(id, groupId);
        // TODO: test validations
    }

    /**
     * Unassign attribute from attribute set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeUnassignSetTest() throws ApiException {
        String id = null;
        String attributeSetId = null;
        AttributeUnassignGroup200Response response = api.attributeUnassignSet(id, attributeSetId);
        // TODO: test validations
    }

    /**
     * Update attribute data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attributeUpdateTest() throws ApiException {
        String id = null;
        String name = null;
        String storeId = null;
        String langId = null;
        AttributeUpdate200Response response = api.attributeUpdate(id, name, storeId, langId);
        // TODO: test validations
    }

}
