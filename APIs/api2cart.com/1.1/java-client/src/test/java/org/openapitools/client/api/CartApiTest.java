/*
 * Swagger API2Cart
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountCartAdd200Response;
import org.openapitools.client.model.AttributeAdd200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.BasketLiveShippingServiceDelete200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.BridgeDelete200Response;
import org.openapitools.client.model.CartBridge200Response;
import org.openapitools.client.model.CartCatalogPriceRulesCount200Response;
import org.openapitools.client.model.CartClearCache200Response;
import org.openapitools.client.model.CartConfig200Response;
import org.openapitools.client.model.CartConfigUpdate;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CartCouponAdd;
import org.openapitools.client.model.CartCouponAdd200Response;
import org.openapitools.client.model.CartCouponCount200Response;
import org.openapitools.client.model.CartDelete200Response;
import org.openapitools.client.model.CartDisconnect200Response;
import org.openapitools.client.model.CartGiftcardAdd200Response;
import org.openapitools.client.model.CartGiftcardCount200Response;
import org.openapitools.client.model.CartInfo200Response;
import org.openapitools.client.model.CartList200Response;
import org.openapitools.client.model.CartMethods200Response;
import org.openapitools.client.model.CartPluginList200Response;
import org.openapitools.client.model.CartScriptAdd200Response;
import org.openapitools.client.model.CartShippingZonesList200Response;
import org.openapitools.client.model.CartValidate200Response;
import java.io.File;
import org.openapitools.client.model.ModelResponseCartCatalogPriceRulesList;
import org.openapitools.client.model.ModelResponseCartCouponList;
import org.openapitools.client.model.ModelResponseCartGiftCardList;
import org.openapitools.client.model.ModelResponseCartMetaDataList;
import org.openapitools.client.model.ModelResponseCartScriptList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CartApi
 */
@Disabled
public class CartApiTest {

    private final CartApi api = new CartApi();

    /**
     * Download bridge for store
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bridgeDownloadTest() throws ApiException {
        Boolean whitelabel = null;
        File response = api.bridgeDownload(whitelabel);
        // TODO: test validations
    }

    /**
     * Get bridge key and store key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartBridgeTest() throws ApiException {
        CartBridge200Response response = api.cartBridge();
        // TODO: test validations
    }

    /**
     * Get count of cart catalog price rules discounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCatalogPriceRulesCountTest() throws ApiException {
        CartCatalogPriceRulesCount200Response response = api.cartCatalogPriceRulesCount();
        // TODO: test validations
    }

    /**
     * Get cart catalog price rules discounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCatalogPriceRulesListTest() throws ApiException {
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String ids = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        ModelResponseCartCatalogPriceRulesList response = api.cartCatalogPriceRulesList(pageCursor, start, count, ids, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Clear cache on store.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartClearCacheTest() throws ApiException {
        String cacheType = null;
        CartClearCache200Response response = api.cartClearCache(cacheType);
        // TODO: test validations
    }

    /**
     * Get list of cart configs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartConfigTest() throws ApiException {
        String params = null;
        String exclude = null;
        CartConfig200Response response = api.cartConfig(params, exclude);
        // TODO: test validations
    }

    /**
     * Use this API method to update custom data in client database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartConfigUpdateTest() throws ApiException {
        CartConfigUpdate cartConfigUpdate = null;
        CartConfigUpdate200Response response = api.cartConfigUpdate(cartConfigUpdate);
        // TODO: test validations
    }

    /**
     * Create new coupon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCouponAddTest() throws ApiException {
        CartCouponAdd cartCouponAdd = null;
        CartCouponAdd200Response response = api.cartCouponAdd(cartCouponAdd);
        // TODO: test validations
    }

    /**
     * Create new coupon condition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCouponConditionAddTest() throws ApiException {
        String couponId = null;
        String entity = null;
        String key = null;
        String operator = null;
        String value = null;
        String storeId = null;
        String target = null;
        BasketLiveShippingServiceDelete200Response response = api.cartCouponConditionAdd(couponId, entity, key, operator, value, storeId, target);
        // TODO: test validations
    }

    /**
     * Get cart coupons count.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCouponCountTest() throws ApiException {
        String storeId = null;
        String dateStartFrom = null;
        String dateStartTo = null;
        String dateEndFrom = null;
        String dateEndTo = null;
        Boolean avail = null;
        CartCouponCount200Response response = api.cartCouponCount(storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail);
        // TODO: test validations
    }

    /**
     * Delete coupon
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCouponDeleteTest() throws ApiException {
        String id = null;
        String storeId = null;
        AttributeDelete200Response response = api.cartCouponDelete(id, storeId);
        // TODO: test validations
    }

    /**
     * Get cart coupon discounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCouponListTest() throws ApiException {
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String couponsIds = null;
        String storeId = null;
        String dateStartFrom = null;
        String dateStartTo = null;
        String dateEndFrom = null;
        String dateEndTo = null;
        Boolean avail = null;
        String langId = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        ModelResponseCartCouponList response = api.cartCouponList(pageCursor, start, count, couponsIds, storeId, dateStartFrom, dateStartTo, dateEndFrom, dateEndTo, avail, langId, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Add store to the account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartCreateTest() throws ApiException {
        String cartId = null;
        String storeUrl = null;
        String etsyClientId = null;
        String etsyRefreshToken = null;
        String storeId = null;
        String bridgeUrl = null;
        String storeRoot = null;
        String storeKey = null;
        String sharedSecret = null;
        Boolean validateVersion = null;
        Boolean verify = null;
        String dbTablesPrefix = null;
        String ftpHost = null;
        String ftpUser = null;
        String ftpPassword = null;
        Integer ftpPort = null;
        String ftpStoreDir = null;
        String apiKey3dcart = null;
        String adminAccount = null;
        String apiPath = null;
        String apiKey = null;
        String clientId = null;
        String accessToken = null;
        String context = null;
        String accessToken2 = null;
        String apiKeyShopify = null;
        String apiPassword = null;
        String accessTokenShopify = null;
        String apiKey2 = null;
        String apiUsername = null;
        String encryptedPassword = null;
        String login = null;
        String apiUserAdnsf = null;
        String apiPass = null;
        String privateKey = null;
        String appToken = null;
        String etsyKeystring = null;
        String etsySharedSecret = null;
        String tokenSecret = null;
        String ebayClientId = null;
        String ebayClientSecret = null;
        String ebayRuname = null;
        String ebayAccessToken = null;
        String ebayRefreshToken = null;
        String ebayEnvironment = null;
        Integer ebaySiteId = null;
        String dwClientId = null;
        String dwApiPass = null;
        String demandwareUserName = null;
        String demandwareUserPassword = null;
        String sellerId = null;
        String amazonSecretKey = null;
        String amazonAccessKeyId = null;
        String marketplacesIds = null;
        String environment = null;
        String hybrisClientId = null;
        String hybrisClientSecret = null;
        String hybrisUsername = null;
        String hybrisPassword = null;
        List<String> hybrisWebsites = null;
        String walmartClientId = null;
        String walmartClientSecret = null;
        String walmartEnvironment = null;
        String walmartChannelType = null;
        String lightspeedApiKey = null;
        String lightspeedApiSecret = null;
        String shopwareAccessKey = null;
        String shopwareApiKey = null;
        String shopwareApiSecret = null;
        String commercehqApiKey = null;
        String commercehqApiPassword = null;
        String _3dcartPrivateKey = null;
        String _3dcartAccessToken = null;
        String wcConsumerKey = null;
        String wcConsumerSecret = null;
        String magentoConsumerKey = null;
        String magentoConsumerSecret = null;
        String magentoAccessToken = null;
        String magentoTokenSecret = null;
        String prestashopWebserviceKey = null;
        String wixAppId = null;
        String wixAppSecretKey = null;
        String wixRefreshToken = null;
        String mercadoLibreAppId = null;
        String mercadoLibreAppSecretKey = null;
        String mercadoLibreRefreshToken = null;
        Integer zidClientId = null;
        String zidClientSecret = null;
        String zidAccessToken = null;
        String zidAuthorization = null;
        String zidRefreshToken = null;
        AccountCartAdd200Response response = api.cartCreate(cartId, storeUrl, etsyClientId, etsyRefreshToken, storeId, bridgeUrl, storeRoot, storeKey, sharedSecret, validateVersion, verify, dbTablesPrefix, ftpHost, ftpUser, ftpPassword, ftpPort, ftpStoreDir, apiKey3dcart, adminAccount, apiPath, apiKey, clientId, accessToken, context, accessToken2, apiKeyShopify, apiPassword, accessTokenShopify, apiKey2, apiUsername, encryptedPassword, login, apiUserAdnsf, apiPass, privateKey, appToken, etsyKeystring, etsySharedSecret, tokenSecret, ebayClientId, ebayClientSecret, ebayRuname, ebayAccessToken, ebayRefreshToken, ebayEnvironment, ebaySiteId, dwClientId, dwApiPass, demandwareUserName, demandwareUserPassword, sellerId, amazonSecretKey, amazonAccessKeyId, marketplacesIds, environment, hybrisClientId, hybrisClientSecret, hybrisUsername, hybrisPassword, hybrisWebsites, walmartClientId, walmartClientSecret, walmartEnvironment, walmartChannelType, lightspeedApiKey, lightspeedApiSecret, shopwareAccessKey, shopwareApiKey, shopwareApiSecret, commercehqApiKey, commercehqApiPassword, _3dcartPrivateKey, _3dcartAccessToken, wcConsumerKey, wcConsumerSecret, magentoConsumerKey, magentoConsumerSecret, magentoAccessToken, magentoTokenSecret, prestashopWebserviceKey, wixAppId, wixAppSecretKey, wixRefreshToken, mercadoLibreAppId, mercadoLibreAppSecretKey, mercadoLibreRefreshToken, zidClientId, zidClientSecret, zidAccessToken, zidAuthorization, zidRefreshToken);
        // TODO: test validations
    }

    /**
     * Remove store from API2Cart
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartDeleteTest() throws ApiException {
        Boolean deleteBridge = null;
        CartDelete200Response response = api.cartDelete(deleteBridge);
        // TODO: test validations
    }

    /**
     * Disconnect with the store and clear store session data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartDisconnectTest() throws ApiException {
        Boolean deleteBridge = null;
        CartDisconnect200Response response = api.cartDisconnect(deleteBridge);
        // TODO: test validations
    }

    /**
     * Create new gift card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartGiftcardAddTest() throws ApiException {
        BigDecimal amount = null;
        String code = null;
        String ownerEmail = null;
        String recipientEmail = null;
        CartGiftcardAdd200Response response = api.cartGiftcardAdd(amount, code, ownerEmail, recipientEmail);
        // TODO: test validations
    }

    /**
     * Get gift cards count.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartGiftcardCountTest() throws ApiException {
        String storeId = null;
        CartGiftcardCount200Response response = api.cartGiftcardCount(storeId);
        // TODO: test validations
    }

    /**
     * Get gift cards list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartGiftcardListTest() throws ApiException {
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String storeId = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        ModelResponseCartGiftCardList response = api.cartGiftcardList(pageCursor, start, count, storeId, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Get cart information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartInfoTest() throws ApiException {
        String params = null;
        String responseFields = null;
        String exclude = null;
        String storeId = null;
        CartInfo200Response response = api.cartInfo(params, responseFields, exclude, storeId);
        // TODO: test validations
    }

    /**
     * Get list of supported carts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartListTest() throws ApiException {
        CartList200Response response = api.cartList();
        // TODO: test validations
    }

    /**
     * Get entity meta data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartMetaDataListTest() throws ApiException {
        String entityId = null;
        String entity = null;
        String storeId = null;
        String langId = null;
        String key = null;
        Integer count = null;
        String pageCursor = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        ModelResponseCartMetaDataList response = api.cartMetaDataList(entityId, entity, storeId, langId, key, count, pageCursor, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Set meta data for a specific entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartMetaDataSetTest() throws ApiException {
        String entityId = null;
        String key = null;
        String value = null;
        String namespace = null;
        String entity = null;
        String storeId = null;
        String langId = null;
        AttributeAdd200Response response = api.cartMetaDataSet(entityId, key, value, namespace, entity, storeId, langId);
        // TODO: test validations
    }

    /**
     * Unset meta data for a specific entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartMetaDataUnsetTest() throws ApiException {
        String entityId = null;
        String key = null;
        String id = null;
        String entity = null;
        String storeId = null;
        BasketLiveShippingServiceDelete200Response response = api.cartMetaDataUnset(entityId, key, id, entity, storeId);
        // TODO: test validations
    }

    /**
     * Get list of cart methods
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartMethodsTest() throws ApiException {
        CartMethods200Response response = api.cartMethods();
        // TODO: test validations
    }

    /**
     * Get list of installed plugins
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartPluginListTest() throws ApiException {
        String storeKey = null;
        String storeId = null;
        Integer start = null;
        Integer count = null;
        CartPluginList200Response response = api.cartPluginList(storeKey, storeId, start, count);
        // TODO: test validations
    }

    /**
     * Add new script to the storefront
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartScriptAddTest() throws ApiException {
        String name = null;
        String description = null;
        String html = null;
        String src = null;
        String loadMethod = null;
        String scope = null;
        String storeId = null;
        CartScriptAdd200Response response = api.cartScriptAdd(name, description, html, src, loadMethod, scope, storeId);
        // TODO: test validations
    }

    /**
     * Remove script from the storefront
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartScriptDeleteTest() throws ApiException {
        String id = null;
        String storeId = null;
        BridgeDelete200Response response = api.cartScriptDelete(id, storeId);
        // TODO: test validations
    }

    /**
     * Get scripts installed to the storefront
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartScriptListTest() throws ApiException {
        String pageCursor = null;
        Integer start = null;
        Integer count = null;
        String createdFrom = null;
        String createdTo = null;
        String modifiedFrom = null;
        String modifiedTo = null;
        String scriptIds = null;
        String storeId = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        ModelResponseCartScriptList response = api.cartScriptList(pageCursor, start, count, createdFrom, createdTo, modifiedFrom, modifiedTo, scriptIds, storeId, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Get list of shipping zones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartShippingZonesListTest() throws ApiException {
        String storeId = null;
        Integer start = null;
        Integer count = null;
        String params = null;
        String responseFields = null;
        String exclude = null;
        CartShippingZonesList200Response response = api.cartShippingZonesList(storeId, start, count, params, responseFields, exclude);
        // TODO: test validations
    }

    /**
     * Check store availability, bridge connection for the downloadable carts, identify DB prefix, validate API accesses for API carts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cartValidateTest() throws ApiException {
        Boolean validateVersion = null;
        CartValidate200Response response = api.cartValidate(validateVersion);
        // TODO: test validations
    }

}
