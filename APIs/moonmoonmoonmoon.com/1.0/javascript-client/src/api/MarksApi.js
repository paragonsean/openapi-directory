/**
 * Moon by Ai Weiwei & Olafur Eliasson
 * Turn nothing into something â€“ make a drawing, make a mark.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Marks service.
* @module api/MarksApi
* @version 1.0
*/
export default class MarksApi {

    /**
    * Constructs a new MarksApi. 
    * @alias module:api/MarksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the marksHashtags operation.
     * @callback module:api/MarksApi~marksHashtagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches popular hashtags or marks tagged with specified hashtag
     * Search for specified tag (no pound sign necessary). If <b>tag</b> is empty, the 50 most popular hashtags will be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [tag] Hashtag to search for
     * @param {module:api/MarksApi~marksHashtagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    marksHashtags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/hashtags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the marksIndex operation.
     * @callback module:api/MarksApi~marksIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches marks
     * The main method for querying the marks database. You may use the following options:         <ol style='list-style-type: lower-roman;'>         <li>No parameters to retrieve all marks in descending chronological order (use <b>before</b> for pagination)</li>         <li><b>popular</b> (and optionally <b>last_popular_id</b>) to retrieve all popular marks</li>         <li><b>featured</b> to retrieve all featured marks</li>         <li><b>x & y</b> to retrieve mark at specific coordinate</li>         <li><b>user</b> to retrieve all marks created by the specified user</li>         <li><b>collection</b> to retrieve all marks collected by the specified user</li>         </ol>
     * @param {Object} opts Optional parameters
     * @param {String} [before] Before ID (pagination purposes)
     * @param {Boolean} [popular] Popular marks
     * @param {String} [lastPopularId] Last popular ID (for pagination purposes)
     * @param {Boolean} [featured] Featured marks
     * @param {Number} [x] X coordinate
     * @param {Number} [y] Y coordinate
     * @param {String} [user] Created by user ID
     * @param {String} [collection] Collection ID
     * @param {module:api/MarksApi~marksIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    marksIndex(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'before': opts['before'],
        'popular': opts['popular'],
        'last_popular_id': opts['lastPopularId'],
        'featured': opts['featured'],
        'x': opts['x'],
        'y': opts['y'],
        'user': opts['user'],
        'collection': opts['collection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/marks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
