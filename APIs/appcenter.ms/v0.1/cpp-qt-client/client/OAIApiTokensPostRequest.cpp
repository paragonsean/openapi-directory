/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiTokensPostRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiTokensPostRequest::OAIApiTokensPostRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiTokensPostRequest::OAIApiTokensPostRequest() {
    this->initializeModel();
}

OAIApiTokensPostRequest::~OAIApiTokensPostRequest() {}

void OAIApiTokensPostRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_encrypted_token_isSet = false;
    m_encrypted_token_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_token_hash_isSet = false;
    m_token_hash_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;
}

void OAIApiTokensPostRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiTokensPostRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encrypted_token_isValid = ::OpenAPI::fromJsonValue(m_encrypted_token, json[QString("encrypted_token")]);
    m_encrypted_token_isSet = !json[QString("encrypted_token")].isNull() && m_encrypted_token_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_token_hash_isValid = ::OpenAPI::fromJsonValue(m_token_hash, json[QString("token_hash")]);
    m_token_hash_isSet = !json[QString("token_hash")].isNull() && m_token_hash_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("token_type")]);
    m_token_type_isSet = !json[QString("token_type")].isNull() && m_token_type_isValid;
}

QString OAIApiTokensPostRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiTokensPostRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encrypted_token_isSet) {
        obj.insert(QString("encrypted_token"), ::OpenAPI::toJsonValue(m_encrypted_token));
    }
    if (m_scope.size() > 0) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_token_hash_isSet) {
        obj.insert(QString("token_hash"), ::OpenAPI::toJsonValue(m_token_hash));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("token_type"), ::OpenAPI::toJsonValue(m_token_type));
    }
    return obj;
}

QString OAIApiTokensPostRequest::getDescription() const {
    return m_description;
}
void OAIApiTokensPostRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiTokensPostRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiTokensPostRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiTokensPostRequest::getEncryptedToken() const {
    return m_encrypted_token;
}
void OAIApiTokensPostRequest::setEncryptedToken(const QString &encrypted_token) {
    m_encrypted_token = encrypted_token;
    m_encrypted_token_isSet = true;
}

bool OAIApiTokensPostRequest::is_encrypted_token_Set() const{
    return m_encrypted_token_isSet;
}

bool OAIApiTokensPostRequest::is_encrypted_token_Valid() const{
    return m_encrypted_token_isValid;
}

QList<QString> OAIApiTokensPostRequest::getScope() const {
    return m_scope;
}
void OAIApiTokensPostRequest::setScope(const QList<QString> &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIApiTokensPostRequest::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIApiTokensPostRequest::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIApiTokensPostRequest::getTokenHash() const {
    return m_token_hash;
}
void OAIApiTokensPostRequest::setTokenHash(const QString &token_hash) {
    m_token_hash = token_hash;
    m_token_hash_isSet = true;
}

bool OAIApiTokensPostRequest::is_token_hash_Set() const{
    return m_token_hash_isSet;
}

bool OAIApiTokensPostRequest::is_token_hash_Valid() const{
    return m_token_hash_isValid;
}

QString OAIApiTokensPostRequest::getTokenType() const {
    return m_token_type;
}
void OAIApiTokensPostRequest::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIApiTokensPostRequest::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIApiTokensPostRequest::is_token_type_Valid() const{
    return m_token_type_isValid;
}

bool OAIApiTokensPostRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiTokensPostRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
