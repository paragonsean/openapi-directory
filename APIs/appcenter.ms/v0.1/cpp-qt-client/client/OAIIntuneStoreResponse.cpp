/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntuneStoreResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntuneStoreResponse::OAIIntuneStoreResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntuneStoreResponse::OAIIntuneStoreResponse() {
    this->initializeModel();
}

OAIIntuneStoreResponse::~OAIIntuneStoreResponse() {}

void OAIIntuneStoreResponse::initializeModel() {

    m_app_category_isSet = false;
    m_app_category_isValid = false;

    m_target_audience_isSet = false;
    m_target_audience_isValid = false;
}

void OAIIntuneStoreResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntuneStoreResponse::fromJsonObject(QJsonObject json) {

    m_app_category_isValid = ::OpenAPI::fromJsonValue(m_app_category, json[QString("app_category")]);
    m_app_category_isSet = !json[QString("app_category")].isNull() && m_app_category_isValid;

    m_target_audience_isValid = ::OpenAPI::fromJsonValue(m_target_audience, json[QString("target_audience")]);
    m_target_audience_isSet = !json[QString("target_audience")].isNull() && m_target_audience_isValid;
}

QString OAIIntuneStoreResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntuneStoreResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_category.isSet()) {
        obj.insert(QString("app_category"), ::OpenAPI::toJsonValue(m_app_category));
    }
    if (m_target_audience.isSet()) {
        obj.insert(QString("target_audience"), ::OpenAPI::toJsonValue(m_target_audience));
    }
    return obj;
}

OAIStores_list_200_response_inner_intune_details_app_category OAIIntuneStoreResponse::getAppCategory() const {
    return m_app_category;
}
void OAIIntuneStoreResponse::setAppCategory(const OAIStores_list_200_response_inner_intune_details_app_category &app_category) {
    m_app_category = app_category;
    m_app_category_isSet = true;
}

bool OAIIntuneStoreResponse::is_app_category_Set() const{
    return m_app_category_isSet;
}

bool OAIIntuneStoreResponse::is_app_category_Valid() const{
    return m_app_category_isValid;
}

OAIStores_list_200_response_inner_intune_details_target_audience OAIIntuneStoreResponse::getTargetAudience() const {
    return m_target_audience;
}
void OAIIntuneStoreResponse::setTargetAudience(const OAIStores_list_200_response_inner_intune_details_target_audience &target_audience) {
    m_target_audience = target_audience;
    m_target_audience_isSet = true;
}

bool OAIIntuneStoreResponse::is_target_audience_Set() const{
    return m_target_audience_isSet;
}

bool OAIIntuneStoreResponse::is_target_audience_Valid() const{
    return m_target_audience_isValid;
}

bool OAIIntuneStoreResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_audience.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntuneStoreResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
