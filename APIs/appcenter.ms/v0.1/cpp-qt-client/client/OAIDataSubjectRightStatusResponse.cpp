/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSubjectRightStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSubjectRightStatusResponse::OAIDataSubjectRightStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSubjectRightStatusResponse::OAIDataSubjectRightStatusResponse() {
    this->initializeModel();
}

OAIDataSubjectRightStatusResponse::~OAIDataSubjectRightStatusResponse() {}

void OAIDataSubjectRightStatusResponse::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_sas_url_isSet = false;
    m_sas_url_isValid = false;

    m_sas_url_expired_isSet = false;
    m_sas_url_expired_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDataSubjectRightStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSubjectRightStatusResponse::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_sas_url_isValid = ::OpenAPI::fromJsonValue(m_sas_url, json[QString("sasUrl")]);
    m_sas_url_isSet = !json[QString("sasUrl")].isNull() && m_sas_url_isValid;

    m_sas_url_expired_isValid = ::OpenAPI::fromJsonValue(m_sas_url_expired, json[QString("sasUrlExpired")]);
    m_sas_url_expired_isSet = !json[QString("sasUrlExpired")].isNull() && m_sas_url_expired_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDataSubjectRightStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSubjectRightStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sas_url_isSet) {
        obj.insert(QString("sasUrl"), ::OpenAPI::toJsonValue(m_sas_url));
    }
    if (m_sas_url_expired_isSet) {
        obj.insert(QString("sasUrlExpired"), ::OpenAPI::toJsonValue(m_sas_url_expired));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDataSubjectRightStatusResponse::getMessage() const {
    return m_message;
}
void OAIDataSubjectRightStatusResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDataSubjectRightStatusResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDataSubjectRightStatusResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIDataSubjectRightStatusResponse::getSasUrl() const {
    return m_sas_url;
}
void OAIDataSubjectRightStatusResponse::setSasUrl(const QString &sas_url) {
    m_sas_url = sas_url;
    m_sas_url_isSet = true;
}

bool OAIDataSubjectRightStatusResponse::is_sas_url_Set() const{
    return m_sas_url_isSet;
}

bool OAIDataSubjectRightStatusResponse::is_sas_url_Valid() const{
    return m_sas_url_isValid;
}

bool OAIDataSubjectRightStatusResponse::isSasUrlExpired() const {
    return m_sas_url_expired;
}
void OAIDataSubjectRightStatusResponse::setSasUrlExpired(const bool &sas_url_expired) {
    m_sas_url_expired = sas_url_expired;
    m_sas_url_expired_isSet = true;
}

bool OAIDataSubjectRightStatusResponse::is_sas_url_expired_Set() const{
    return m_sas_url_expired_isSet;
}

bool OAIDataSubjectRightStatusResponse::is_sas_url_expired_Valid() const{
    return m_sas_url_expired_isValid;
}

QString OAIDataSubjectRightStatusResponse::getStatus() const {
    return m_status;
}
void OAIDataSubjectRightStatusResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSubjectRightStatusResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSubjectRightStatusResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDataSubjectRightStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_url_expired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSubjectRightStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
