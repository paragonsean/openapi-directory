/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_gdprExportFileSetFile_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_gdprExportFileSetFile_200_response::OAITest_gdprExportFileSetFile_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_gdprExportFileSetFile_200_response::OAITest_gdprExportFileSetFile_200_response() {
    this->initializeModel();
}

OAITest_gdprExportFileSetFile_200_response::~OAITest_gdprExportFileSetFile_200_response() {}

void OAITest_gdprExportFileSetFile_200_response::initializeModel() {

    m_app_upload_id_isSet = false;
    m_app_upload_id_isValid = false;

    m_hash_file_id_isSet = false;
    m_hash_file_id_isValid = false;

    m_hash_file_url_isSet = false;
    m_hash_file_url_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAITest_gdprExportFileSetFile_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_gdprExportFileSetFile_200_response::fromJsonObject(QJsonObject json) {

    m_app_upload_id_isValid = ::OpenAPI::fromJsonValue(m_app_upload_id, json[QString("app_upload_id")]);
    m_app_upload_id_isSet = !json[QString("app_upload_id")].isNull() && m_app_upload_id_isValid;

    m_hash_file_id_isValid = ::OpenAPI::fromJsonValue(m_hash_file_id, json[QString("hash_file_id")]);
    m_hash_file_id_isSet = !json[QString("hash_file_id")].isNull() && m_hash_file_id_isValid;

    m_hash_file_url_isValid = ::OpenAPI::fromJsonValue(m_hash_file_url, json[QString("hash_file_url")]);
    m_hash_file_url_isSet = !json[QString("hash_file_url")].isNull() && m_hash_file_url_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAITest_gdprExportFileSetFile_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_gdprExportFileSetFile_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_app_upload_id_isSet) {
        obj.insert(QString("app_upload_id"), ::OpenAPI::toJsonValue(m_app_upload_id));
    }
    if (m_hash_file_id_isSet) {
        obj.insert(QString("hash_file_id"), ::OpenAPI::toJsonValue(m_hash_file_id));
    }
    if (m_hash_file_url_isSet) {
        obj.insert(QString("hash_file_url"), ::OpenAPI::toJsonValue(m_hash_file_url));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAITest_gdprExportFileSetFile_200_response::getAppUploadId() const {
    return m_app_upload_id;
}
void OAITest_gdprExportFileSetFile_200_response::setAppUploadId(const QString &app_upload_id) {
    m_app_upload_id = app_upload_id;
    m_app_upload_id_isSet = true;
}

bool OAITest_gdprExportFileSetFile_200_response::is_app_upload_id_Set() const{
    return m_app_upload_id_isSet;
}

bool OAITest_gdprExportFileSetFile_200_response::is_app_upload_id_Valid() const{
    return m_app_upload_id_isValid;
}

QString OAITest_gdprExportFileSetFile_200_response::getHashFileId() const {
    return m_hash_file_id;
}
void OAITest_gdprExportFileSetFile_200_response::setHashFileId(const QString &hash_file_id) {
    m_hash_file_id = hash_file_id;
    m_hash_file_id_isSet = true;
}

bool OAITest_gdprExportFileSetFile_200_response::is_hash_file_id_Set() const{
    return m_hash_file_id_isSet;
}

bool OAITest_gdprExportFileSetFile_200_response::is_hash_file_id_Valid() const{
    return m_hash_file_id_isValid;
}

QString OAITest_gdprExportFileSetFile_200_response::getHashFileUrl() const {
    return m_hash_file_url;
}
void OAITest_gdprExportFileSetFile_200_response::setHashFileUrl(const QString &hash_file_url) {
    m_hash_file_url = hash_file_url;
    m_hash_file_url_isSet = true;
}

bool OAITest_gdprExportFileSetFile_200_response::is_hash_file_url_Set() const{
    return m_hash_file_url_isSet;
}

bool OAITest_gdprExportFileSetFile_200_response::is_hash_file_url_Valid() const{
    return m_hash_file_url_isValid;
}

QString OAITest_gdprExportFileSetFile_200_response::getPath() const {
    return m_path;
}
void OAITest_gdprExportFileSetFile_200_response::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAITest_gdprExportFileSetFile_200_response::is_path_Set() const{
    return m_path_isSet;
}

bool OAITest_gdprExportFileSetFile_200_response::is_path_Valid() const{
    return m_path_isValid;
}

bool OAITest_gdprExportFileSetFile_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_gdprExportFileSetFile_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
