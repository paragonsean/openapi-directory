/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRunSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRunSummary::OAITestRunSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRunSummary::OAITestRunSummary() {
    this->initializeModel();
}

OAITestRunSummary::~OAITestRunSummary() {}

void OAITestRunSummary::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_passed_isSet = false;
    m_passed_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;
}

void OAITestRunSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRunSummary::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_passed_isValid = ::OpenAPI::fromJsonValue(m_passed, json[QString("passed")]);
    m_passed_isSet = !json[QString("passed")].isNull() && m_passed_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("statusDescription")]);
    m_status_description_isSet = !json[QString("statusDescription")].isNull() && m_status_description_isValid;
}

QString OAITestRunSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRunSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_passed_isSet) {
        obj.insert(QString("passed"), ::OpenAPI::toJsonValue(m_passed));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("statusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    return obj;
}

bool OAITestRunSummary::isCompleted() const {
    return m_completed;
}
void OAITestRunSummary::setCompleted(const bool &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAITestRunSummary::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAITestRunSummary::is_completed_Valid() const{
    return m_completed_isValid;
}

QString OAITestRunSummary::getDate() const {
    return m_date;
}
void OAITestRunSummary::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITestRunSummary::is_date_Set() const{
    return m_date_isSet;
}

bool OAITestRunSummary::is_date_Valid() const{
    return m_date_isValid;
}

double OAITestRunSummary::getFailed() const {
    return m_failed;
}
void OAITestRunSummary::setFailed(const double &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAITestRunSummary::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAITestRunSummary::is_failed_Valid() const{
    return m_failed_isValid;
}

double OAITestRunSummary::getPassed() const {
    return m_passed;
}
void OAITestRunSummary::setPassed(const double &passed) {
    m_passed = passed;
    m_passed_isSet = true;
}

bool OAITestRunSummary::is_passed_Set() const{
    return m_passed_isSet;
}

bool OAITestRunSummary::is_passed_Valid() const{
    return m_passed_isValid;
}

QString OAITestRunSummary::getStatusDescription() const {
    return m_status_description;
}
void OAITestRunSummary::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAITestRunSummary::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAITestRunSummary::is_status_description_Valid() const{
    return m_status_description_isValid;
}

bool OAITestRunSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRunSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
