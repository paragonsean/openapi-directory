/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner() {
    this->initializeModel();
}

OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::~OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner() {}

void OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::initializeModel() {

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_symbol_id_isSet = false;
    m_symbol_id_isValid = false;
}

void OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::fromJsonObject(QJsonObject json) {

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_symbol_id_isValid = ::OpenAPI::fromJsonValue(m_symbol_id, json[QString("symbol_id")]);
    m_symbol_id_isSet = !json[QString("symbol_id")].isNull() && m_symbol_id_isValid;
}

QString OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_symbol_id_isSet) {
        obj.insert(QString("symbol_id"), ::OpenAPI::toJsonValue(m_symbol_id));
    }
    return obj;
}

QString OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::getPlatform() const {
    return m_platform;
}
void OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::getSymbolId() const {
    return m_symbol_id;
}
void OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::setSymbolId(const QString &symbol_id) {
    m_symbol_id = symbol_id;
    m_symbol_id_isSet = true;
}

bool OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::is_symbol_id_Set() const{
    return m_symbol_id_isSet;
}

bool OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::is_symbol_id_Valid() const{
    return m_symbol_id_isValid;
}

bool OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_isValid && m_symbol_id_isValid && true;
}

} // namespace OpenAPI
