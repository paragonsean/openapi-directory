/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRunStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRunStatistics::OAITestRunStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRunStatistics::OAITestRunStatistics() {
    this->initializeModel();
}

OAITestRunStatistics::~OAITestRunStatistics() {}

void OAITestRunStatistics::initializeModel() {

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_devices_failed_isSet = false;
    m_devices_failed_isValid = false;

    m_devices_finished_isSet = false;
    m_devices_finished_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_passed_isSet = false;
    m_passed_isValid = false;

    m_peak_memory_isSet = false;
    m_peak_memory_isValid = false;

    m_skipped_isSet = false;
    m_skipped_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_device_minutes_isSet = false;
    m_total_device_minutes_isValid = false;
}

void OAITestRunStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRunStatistics::fromJsonObject(QJsonObject json) {

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_devices_failed_isValid = ::OpenAPI::fromJsonValue(m_devices_failed, json[QString("devicesFailed")]);
    m_devices_failed_isSet = !json[QString("devicesFailed")].isNull() && m_devices_failed_isValid;

    m_devices_finished_isValid = ::OpenAPI::fromJsonValue(m_devices_finished, json[QString("devicesFinished")]);
    m_devices_finished_isSet = !json[QString("devicesFinished")].isNull() && m_devices_finished_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_passed_isValid = ::OpenAPI::fromJsonValue(m_passed, json[QString("passed")]);
    m_passed_isSet = !json[QString("passed")].isNull() && m_passed_isValid;

    m_peak_memory_isValid = ::OpenAPI::fromJsonValue(m_peak_memory, json[QString("peakMemory")]);
    m_peak_memory_isSet = !json[QString("peakMemory")].isNull() && m_peak_memory_isValid;

    m_skipped_isValid = ::OpenAPI::fromJsonValue(m_skipped, json[QString("skipped")]);
    m_skipped_isSet = !json[QString("skipped")].isNull() && m_skipped_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_device_minutes_isValid = ::OpenAPI::fromJsonValue(m_total_device_minutes, json[QString("totalDeviceMinutes")]);
    m_total_device_minutes_isSet = !json[QString("totalDeviceMinutes")].isNull() && m_total_device_minutes_isValid;
}

QString OAITestRunStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRunStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_devices_isSet) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_devices_failed_isSet) {
        obj.insert(QString("devicesFailed"), ::OpenAPI::toJsonValue(m_devices_failed));
    }
    if (m_devices_finished_isSet) {
        obj.insert(QString("devicesFinished"), ::OpenAPI::toJsonValue(m_devices_finished));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_passed_isSet) {
        obj.insert(QString("passed"), ::OpenAPI::toJsonValue(m_passed));
    }
    if (m_peak_memory_isSet) {
        obj.insert(QString("peakMemory"), ::OpenAPI::toJsonValue(m_peak_memory));
    }
    if (m_skipped_isSet) {
        obj.insert(QString("skipped"), ::OpenAPI::toJsonValue(m_skipped));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_device_minutes_isSet) {
        obj.insert(QString("totalDeviceMinutes"), ::OpenAPI::toJsonValue(m_total_device_minutes));
    }
    return obj;
}

double OAITestRunStatistics::getDevices() const {
    return m_devices;
}
void OAITestRunStatistics::setDevices(const double &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAITestRunStatistics::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAITestRunStatistics::is_devices_Valid() const{
    return m_devices_isValid;
}

double OAITestRunStatistics::getDevicesFailed() const {
    return m_devices_failed;
}
void OAITestRunStatistics::setDevicesFailed(const double &devices_failed) {
    m_devices_failed = devices_failed;
    m_devices_failed_isSet = true;
}

bool OAITestRunStatistics::is_devices_failed_Set() const{
    return m_devices_failed_isSet;
}

bool OAITestRunStatistics::is_devices_failed_Valid() const{
    return m_devices_failed_isValid;
}

double OAITestRunStatistics::getDevicesFinished() const {
    return m_devices_finished;
}
void OAITestRunStatistics::setDevicesFinished(const double &devices_finished) {
    m_devices_finished = devices_finished;
    m_devices_finished_isSet = true;
}

bool OAITestRunStatistics::is_devices_finished_Set() const{
    return m_devices_finished_isSet;
}

bool OAITestRunStatistics::is_devices_finished_Valid() const{
    return m_devices_finished_isValid;
}

double OAITestRunStatistics::getFailed() const {
    return m_failed;
}
void OAITestRunStatistics::setFailed(const double &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAITestRunStatistics::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAITestRunStatistics::is_failed_Valid() const{
    return m_failed_isValid;
}

double OAITestRunStatistics::getPassed() const {
    return m_passed;
}
void OAITestRunStatistics::setPassed(const double &passed) {
    m_passed = passed;
    m_passed_isSet = true;
}

bool OAITestRunStatistics::is_passed_Set() const{
    return m_passed_isSet;
}

bool OAITestRunStatistics::is_passed_Valid() const{
    return m_passed_isValid;
}

double OAITestRunStatistics::getPeakMemory() const {
    return m_peak_memory;
}
void OAITestRunStatistics::setPeakMemory(const double &peak_memory) {
    m_peak_memory = peak_memory;
    m_peak_memory_isSet = true;
}

bool OAITestRunStatistics::is_peak_memory_Set() const{
    return m_peak_memory_isSet;
}

bool OAITestRunStatistics::is_peak_memory_Valid() const{
    return m_peak_memory_isValid;
}

double OAITestRunStatistics::getSkipped() const {
    return m_skipped;
}
void OAITestRunStatistics::setSkipped(const double &skipped) {
    m_skipped = skipped;
    m_skipped_isSet = true;
}

bool OAITestRunStatistics::is_skipped_Set() const{
    return m_skipped_isSet;
}

bool OAITestRunStatistics::is_skipped_Valid() const{
    return m_skipped_isValid;
}

double OAITestRunStatistics::getTotal() const {
    return m_total;
}
void OAITestRunStatistics::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITestRunStatistics::is_total_Set() const{
    return m_total_isSet;
}

bool OAITestRunStatistics::is_total_Valid() const{
    return m_total_isValid;
}

double OAITestRunStatistics::getTotalDeviceMinutes() const {
    return m_total_device_minutes;
}
void OAITestRunStatistics::setTotalDeviceMinutes(const double &total_device_minutes) {
    m_total_device_minutes = total_device_minutes;
    m_total_device_minutes_isSet = true;
}

bool OAITestRunStatistics::is_total_device_minutes_Set() const{
    return m_total_device_minutes_isSet;
}

bool OAITestRunStatistics::is_total_device_minutes_Valid() const{
    return m_total_device_minutes_isValid;
}

bool OAITestRunStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_device_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRunStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
