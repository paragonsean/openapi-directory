/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppleTestFlightGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppleTestFlightGroupResponse::OAIAppleTestFlightGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppleTestFlightGroupResponse::OAIAppleTestFlightGroupResponse() {
    this->initializeModel();
}

OAIAppleTestFlightGroupResponse::~OAIAppleTestFlightGroupResponse() {}

void OAIAppleTestFlightGroupResponse::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_app_adam_id_isSet = false;
    m_app_adam_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_internal_group_isSet = false;
    m_is_internal_group_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;
}

void OAIAppleTestFlightGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppleTestFlightGroupResponse::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_app_adam_id_isValid = ::OpenAPI::fromJsonValue(m_app_adam_id, json[QString("appAdamId")]);
    m_app_adam_id_isSet = !json[QString("appAdamId")].isNull() && m_app_adam_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_internal_group_isValid = ::OpenAPI::fromJsonValue(m_is_internal_group, json[QString("isInternalGroup")]);
    m_is_internal_group_isSet = !json[QString("isInternalGroup")].isNull() && m_is_internal_group_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;
}

QString OAIAppleTestFlightGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppleTestFlightGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_app_adam_id_isSet) {
        obj.insert(QString("appAdamId"), ::OpenAPI::toJsonValue(m_app_adam_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_internal_group_isSet) {
        obj.insert(QString("isInternalGroup"), ::OpenAPI::toJsonValue(m_is_internal_group));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    return obj;
}

bool OAIAppleTestFlightGroupResponse::isActive() const {
    return m_active;
}
void OAIAppleTestFlightGroupResponse::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAppleTestFlightGroupResponse::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAppleTestFlightGroupResponse::is_active_Valid() const{
    return m_active_isValid;
}

double OAIAppleTestFlightGroupResponse::getAppAdamId() const {
    return m_app_adam_id;
}
void OAIAppleTestFlightGroupResponse::setAppAdamId(const double &app_adam_id) {
    m_app_adam_id = app_adam_id;
    m_app_adam_id_isSet = true;
}

bool OAIAppleTestFlightGroupResponse::is_app_adam_id_Set() const{
    return m_app_adam_id_isSet;
}

bool OAIAppleTestFlightGroupResponse::is_app_adam_id_Valid() const{
    return m_app_adam_id_isValid;
}

QString OAIAppleTestFlightGroupResponse::getId() const {
    return m_id;
}
void OAIAppleTestFlightGroupResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppleTestFlightGroupResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppleTestFlightGroupResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAppleTestFlightGroupResponse::isIsInternalGroup() const {
    return m_is_internal_group;
}
void OAIAppleTestFlightGroupResponse::setIsInternalGroup(const bool &is_internal_group) {
    m_is_internal_group = is_internal_group;
    m_is_internal_group_isSet = true;
}

bool OAIAppleTestFlightGroupResponse::is_is_internal_group_Set() const{
    return m_is_internal_group_isSet;
}

bool OAIAppleTestFlightGroupResponse::is_is_internal_group_Valid() const{
    return m_is_internal_group_isValid;
}

QString OAIAppleTestFlightGroupResponse::getName() const {
    return m_name;
}
void OAIAppleTestFlightGroupResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppleTestFlightGroupResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppleTestFlightGroupResponse::is_name_Valid() const{
    return m_name_isValid;
}

double OAIAppleTestFlightGroupResponse::getProviderId() const {
    return m_provider_id;
}
void OAIAppleTestFlightGroupResponse::setProviderId(const double &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIAppleTestFlightGroupResponse::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIAppleTestFlightGroupResponse::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

bool OAIAppleTestFlightGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_adam_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_internal_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppleTestFlightGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
