/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_getTestReport_200_response_features_inner_tests_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_getTestReport_200_response_features_inner_tests_inner::OAITest_getTestReport_200_response_features_inner_tests_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_getTestReport_200_response_features_inner_tests_inner::OAITest_getTestReport_200_response_features_inner_tests_inner() {
    this->initializeModel();
}

OAITest_getTestReport_200_response_features_inner_tests_inner::~OAITest_getTestReport_200_response_features_inner_tests_inner() {}

void OAITest_getTestReport_200_response_features_inner_tests_inner::initializeModel() {

    m_peak_duration_isSet = false;
    m_peak_duration_isValid = false;

    m_peak_memory_isSet = false;
    m_peak_memory_isValid = false;

    m_runs_isSet = false;
    m_runs_isValid = false;

    m_test_name_isSet = false;
    m_test_name_isValid = false;
}

void OAITest_getTestReport_200_response_features_inner_tests_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_getTestReport_200_response_features_inner_tests_inner::fromJsonObject(QJsonObject json) {

    m_peak_duration_isValid = ::OpenAPI::fromJsonValue(m_peak_duration, json[QString("peakDuration")]);
    m_peak_duration_isSet = !json[QString("peakDuration")].isNull() && m_peak_duration_isValid;

    m_peak_memory_isValid = ::OpenAPI::fromJsonValue(m_peak_memory, json[QString("peakMemory")]);
    m_peak_memory_isSet = !json[QString("peakMemory")].isNull() && m_peak_memory_isValid;

    m_runs_isValid = ::OpenAPI::fromJsonValue(m_runs, json[QString("runs")]);
    m_runs_isSet = !json[QString("runs")].isNull() && m_runs_isValid;

    m_test_name_isValid = ::OpenAPI::fromJsonValue(m_test_name, json[QString("testName")]);
    m_test_name_isSet = !json[QString("testName")].isNull() && m_test_name_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_getTestReport_200_response_features_inner_tests_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_peak_duration_isSet) {
        obj.insert(QString("peakDuration"), ::OpenAPI::toJsonValue(m_peak_duration));
    }
    if (m_peak_memory_isSet) {
        obj.insert(QString("peakMemory"), ::OpenAPI::toJsonValue(m_peak_memory));
    }
    if (m_runs.size() > 0) {
        obj.insert(QString("runs"), ::OpenAPI::toJsonValue(m_runs));
    }
    if (m_test_name_isSet) {
        obj.insert(QString("testName"), ::OpenAPI::toJsonValue(m_test_name));
    }
    return obj;
}

double OAITest_getTestReport_200_response_features_inner_tests_inner::getPeakDuration() const {
    return m_peak_duration;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner::setPeakDuration(const double &peak_duration) {
    m_peak_duration = peak_duration;
    m_peak_duration_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_peak_duration_Set() const{
    return m_peak_duration_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_peak_duration_Valid() const{
    return m_peak_duration_isValid;
}

double OAITest_getTestReport_200_response_features_inner_tests_inner::getPeakMemory() const {
    return m_peak_memory;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner::setPeakMemory(const double &peak_memory) {
    m_peak_memory = peak_memory;
    m_peak_memory_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_peak_memory_Set() const{
    return m_peak_memory_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_peak_memory_Valid() const{
    return m_peak_memory_isValid;
}

QList<OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner> OAITest_getTestReport_200_response_features_inner_tests_inner::getRuns() const {
    return m_runs;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner::setRuns(const QList<OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner> &runs) {
    m_runs = runs;
    m_runs_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_runs_Set() const{
    return m_runs_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_runs_Valid() const{
    return m_runs_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner::getTestName() const {
    return m_test_name;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner::setTestName(const QString &test_name) {
    m_test_name = test_name;
    m_test_name_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_test_name_Set() const{
    return m_test_name_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::is_test_name_Valid() const{
    return m_test_name_isValid;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_peak_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
