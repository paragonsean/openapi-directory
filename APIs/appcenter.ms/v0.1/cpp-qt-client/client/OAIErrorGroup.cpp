/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorGroup::OAIErrorGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorGroup::OAIErrorGroup() {
    this->initializeModel();
}

OAIErrorGroup::~OAIErrorGroup() {}

void OAIErrorGroup::initializeModel() {

    m_app_build_isSet = false;
    m_app_build_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_code_raw_isSet = false;
    m_code_raw_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_device_count_isSet = false;
    m_device_count_isValid = false;

    m_error_group_id_isSet = false;
    m_error_group_id_isValid = false;

    m_exception_app_code_isSet = false;
    m_exception_app_code_isValid = false;

    m_exception_class_method_isSet = false;
    m_exception_class_method_isValid = false;

    m_exception_class_name_isSet = false;
    m_exception_class_name_isValid = false;

    m_exception_file_isSet = false;
    m_exception_file_isValid = false;

    m_exception_line_isSet = false;
    m_exception_line_isValid = false;

    m_exception_message_isSet = false;
    m_exception_message_isValid = false;

    m_exception_method_isSet = false;
    m_exception_method_isValid = false;

    m_exception_type_isSet = false;
    m_exception_type_isValid = false;

    m_first_occurrence_isSet = false;
    m_first_occurrence_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_last_occurrence_isSet = false;
    m_last_occurrence_isValid = false;

    m_reason_frames_isSet = false;
    m_reason_frames_isValid = false;

    m_annotation_isSet = false;
    m_annotation_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIErrorGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorGroup::fromJsonObject(QJsonObject json) {

    m_app_build_isValid = ::OpenAPI::fromJsonValue(m_app_build, json[QString("appBuild")]);
    m_app_build_isSet = !json[QString("appBuild")].isNull() && m_app_build_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_code_raw_isValid = ::OpenAPI::fromJsonValue(m_code_raw, json[QString("codeRaw")]);
    m_code_raw_isSet = !json[QString("codeRaw")].isNull() && m_code_raw_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_device_count_isValid = ::OpenAPI::fromJsonValue(m_device_count, json[QString("deviceCount")]);
    m_device_count_isSet = !json[QString("deviceCount")].isNull() && m_device_count_isValid;

    m_error_group_id_isValid = ::OpenAPI::fromJsonValue(m_error_group_id, json[QString("errorGroupId")]);
    m_error_group_id_isSet = !json[QString("errorGroupId")].isNull() && m_error_group_id_isValid;

    m_exception_app_code_isValid = ::OpenAPI::fromJsonValue(m_exception_app_code, json[QString("exceptionAppCode")]);
    m_exception_app_code_isSet = !json[QString("exceptionAppCode")].isNull() && m_exception_app_code_isValid;

    m_exception_class_method_isValid = ::OpenAPI::fromJsonValue(m_exception_class_method, json[QString("exceptionClassMethod")]);
    m_exception_class_method_isSet = !json[QString("exceptionClassMethod")].isNull() && m_exception_class_method_isValid;

    m_exception_class_name_isValid = ::OpenAPI::fromJsonValue(m_exception_class_name, json[QString("exceptionClassName")]);
    m_exception_class_name_isSet = !json[QString("exceptionClassName")].isNull() && m_exception_class_name_isValid;

    m_exception_file_isValid = ::OpenAPI::fromJsonValue(m_exception_file, json[QString("exceptionFile")]);
    m_exception_file_isSet = !json[QString("exceptionFile")].isNull() && m_exception_file_isValid;

    m_exception_line_isValid = ::OpenAPI::fromJsonValue(m_exception_line, json[QString("exceptionLine")]);
    m_exception_line_isSet = !json[QString("exceptionLine")].isNull() && m_exception_line_isValid;

    m_exception_message_isValid = ::OpenAPI::fromJsonValue(m_exception_message, json[QString("exceptionMessage")]);
    m_exception_message_isSet = !json[QString("exceptionMessage")].isNull() && m_exception_message_isValid;

    m_exception_method_isValid = ::OpenAPI::fromJsonValue(m_exception_method, json[QString("exceptionMethod")]);
    m_exception_method_isSet = !json[QString("exceptionMethod")].isNull() && m_exception_method_isValid;

    m_exception_type_isValid = ::OpenAPI::fromJsonValue(m_exception_type, json[QString("exceptionType")]);
    m_exception_type_isSet = !json[QString("exceptionType")].isNull() && m_exception_type_isValid;

    m_first_occurrence_isValid = ::OpenAPI::fromJsonValue(m_first_occurrence, json[QString("firstOccurrence")]);
    m_first_occurrence_isSet = !json[QString("firstOccurrence")].isNull() && m_first_occurrence_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_last_occurrence_isValid = ::OpenAPI::fromJsonValue(m_last_occurrence, json[QString("lastOccurrence")]);
    m_last_occurrence_isSet = !json[QString("lastOccurrence")].isNull() && m_last_occurrence_isValid;

    m_reason_frames_isValid = ::OpenAPI::fromJsonValue(m_reason_frames, json[QString("reasonFrames")]);
    m_reason_frames_isSet = !json[QString("reasonFrames")].isNull() && m_reason_frames_isValid;

    m_annotation_isValid = ::OpenAPI::fromJsonValue(m_annotation, json[QString("annotation")]);
    m_annotation_isSet = !json[QString("annotation")].isNull() && m_annotation_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIErrorGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_app_build_isSet) {
        obj.insert(QString("appBuild"), ::OpenAPI::toJsonValue(m_app_build));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_code_raw_isSet) {
        obj.insert(QString("codeRaw"), ::OpenAPI::toJsonValue(m_code_raw));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_device_count_isSet) {
        obj.insert(QString("deviceCount"), ::OpenAPI::toJsonValue(m_device_count));
    }
    if (m_error_group_id_isSet) {
        obj.insert(QString("errorGroupId"), ::OpenAPI::toJsonValue(m_error_group_id));
    }
    if (m_exception_app_code_isSet) {
        obj.insert(QString("exceptionAppCode"), ::OpenAPI::toJsonValue(m_exception_app_code));
    }
    if (m_exception_class_method_isSet) {
        obj.insert(QString("exceptionClassMethod"), ::OpenAPI::toJsonValue(m_exception_class_method));
    }
    if (m_exception_class_name_isSet) {
        obj.insert(QString("exceptionClassName"), ::OpenAPI::toJsonValue(m_exception_class_name));
    }
    if (m_exception_file_isSet) {
        obj.insert(QString("exceptionFile"), ::OpenAPI::toJsonValue(m_exception_file));
    }
    if (m_exception_line_isSet) {
        obj.insert(QString("exceptionLine"), ::OpenAPI::toJsonValue(m_exception_line));
    }
    if (m_exception_message_isSet) {
        obj.insert(QString("exceptionMessage"), ::OpenAPI::toJsonValue(m_exception_message));
    }
    if (m_exception_method_isSet) {
        obj.insert(QString("exceptionMethod"), ::OpenAPI::toJsonValue(m_exception_method));
    }
    if (m_exception_type_isSet) {
        obj.insert(QString("exceptionType"), ::OpenAPI::toJsonValue(m_exception_type));
    }
    if (m_first_occurrence_isSet) {
        obj.insert(QString("firstOccurrence"), ::OpenAPI::toJsonValue(m_first_occurrence));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_last_occurrence_isSet) {
        obj.insert(QString("lastOccurrence"), ::OpenAPI::toJsonValue(m_last_occurrence));
    }
    if (m_reason_frames.size() > 0) {
        obj.insert(QString("reasonFrames"), ::OpenAPI::toJsonValue(m_reason_frames));
    }
    if (m_annotation_isSet) {
        obj.insert(QString("annotation"), ::OpenAPI::toJsonValue(m_annotation));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIErrorGroup::getAppBuild() const {
    return m_app_build;
}
void OAIErrorGroup::setAppBuild(const QString &app_build) {
    m_app_build = app_build;
    m_app_build_isSet = true;
}

bool OAIErrorGroup::is_app_build_Set() const{
    return m_app_build_isSet;
}

bool OAIErrorGroup::is_app_build_Valid() const{
    return m_app_build_isValid;
}

QString OAIErrorGroup::getAppVersion() const {
    return m_app_version;
}
void OAIErrorGroup::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIErrorGroup::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIErrorGroup::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIErrorGroup::getCodeRaw() const {
    return m_code_raw;
}
void OAIErrorGroup::setCodeRaw(const QString &code_raw) {
    m_code_raw = code_raw;
    m_code_raw_isSet = true;
}

bool OAIErrorGroup::is_code_raw_Set() const{
    return m_code_raw_isSet;
}

bool OAIErrorGroup::is_code_raw_Valid() const{
    return m_code_raw_isValid;
}

qint64 OAIErrorGroup::getCount() const {
    return m_count;
}
void OAIErrorGroup::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIErrorGroup::is_count_Set() const{
    return m_count_isSet;
}

bool OAIErrorGroup::is_count_Valid() const{
    return m_count_isValid;
}

qint64 OAIErrorGroup::getDeviceCount() const {
    return m_device_count;
}
void OAIErrorGroup::setDeviceCount(const qint64 &device_count) {
    m_device_count = device_count;
    m_device_count_isSet = true;
}

bool OAIErrorGroup::is_device_count_Set() const{
    return m_device_count_isSet;
}

bool OAIErrorGroup::is_device_count_Valid() const{
    return m_device_count_isValid;
}

QString OAIErrorGroup::getErrorGroupId() const {
    return m_error_group_id;
}
void OAIErrorGroup::setErrorGroupId(const QString &error_group_id) {
    m_error_group_id = error_group_id;
    m_error_group_id_isSet = true;
}

bool OAIErrorGroup::is_error_group_id_Set() const{
    return m_error_group_id_isSet;
}

bool OAIErrorGroup::is_error_group_id_Valid() const{
    return m_error_group_id_isValid;
}

bool OAIErrorGroup::isExceptionAppCode() const {
    return m_exception_app_code;
}
void OAIErrorGroup::setExceptionAppCode(const bool &exception_app_code) {
    m_exception_app_code = exception_app_code;
    m_exception_app_code_isSet = true;
}

bool OAIErrorGroup::is_exception_app_code_Set() const{
    return m_exception_app_code_isSet;
}

bool OAIErrorGroup::is_exception_app_code_Valid() const{
    return m_exception_app_code_isValid;
}

bool OAIErrorGroup::isExceptionClassMethod() const {
    return m_exception_class_method;
}
void OAIErrorGroup::setExceptionClassMethod(const bool &exception_class_method) {
    m_exception_class_method = exception_class_method;
    m_exception_class_method_isSet = true;
}

bool OAIErrorGroup::is_exception_class_method_Set() const{
    return m_exception_class_method_isSet;
}

bool OAIErrorGroup::is_exception_class_method_Valid() const{
    return m_exception_class_method_isValid;
}

QString OAIErrorGroup::getExceptionClassName() const {
    return m_exception_class_name;
}
void OAIErrorGroup::setExceptionClassName(const QString &exception_class_name) {
    m_exception_class_name = exception_class_name;
    m_exception_class_name_isSet = true;
}

bool OAIErrorGroup::is_exception_class_name_Set() const{
    return m_exception_class_name_isSet;
}

bool OAIErrorGroup::is_exception_class_name_Valid() const{
    return m_exception_class_name_isValid;
}

QString OAIErrorGroup::getExceptionFile() const {
    return m_exception_file;
}
void OAIErrorGroup::setExceptionFile(const QString &exception_file) {
    m_exception_file = exception_file;
    m_exception_file_isSet = true;
}

bool OAIErrorGroup::is_exception_file_Set() const{
    return m_exception_file_isSet;
}

bool OAIErrorGroup::is_exception_file_Valid() const{
    return m_exception_file_isValid;
}

QString OAIErrorGroup::getExceptionLine() const {
    return m_exception_line;
}
void OAIErrorGroup::setExceptionLine(const QString &exception_line) {
    m_exception_line = exception_line;
    m_exception_line_isSet = true;
}

bool OAIErrorGroup::is_exception_line_Set() const{
    return m_exception_line_isSet;
}

bool OAIErrorGroup::is_exception_line_Valid() const{
    return m_exception_line_isValid;
}

QString OAIErrorGroup::getExceptionMessage() const {
    return m_exception_message;
}
void OAIErrorGroup::setExceptionMessage(const QString &exception_message) {
    m_exception_message = exception_message;
    m_exception_message_isSet = true;
}

bool OAIErrorGroup::is_exception_message_Set() const{
    return m_exception_message_isSet;
}

bool OAIErrorGroup::is_exception_message_Valid() const{
    return m_exception_message_isValid;
}

QString OAIErrorGroup::getExceptionMethod() const {
    return m_exception_method;
}
void OAIErrorGroup::setExceptionMethod(const QString &exception_method) {
    m_exception_method = exception_method;
    m_exception_method_isSet = true;
}

bool OAIErrorGroup::is_exception_method_Set() const{
    return m_exception_method_isSet;
}

bool OAIErrorGroup::is_exception_method_Valid() const{
    return m_exception_method_isValid;
}

QString OAIErrorGroup::getExceptionType() const {
    return m_exception_type;
}
void OAIErrorGroup::setExceptionType(const QString &exception_type) {
    m_exception_type = exception_type;
    m_exception_type_isSet = true;
}

bool OAIErrorGroup::is_exception_type_Set() const{
    return m_exception_type_isSet;
}

bool OAIErrorGroup::is_exception_type_Valid() const{
    return m_exception_type_isValid;
}

QDateTime OAIErrorGroup::getFirstOccurrence() const {
    return m_first_occurrence;
}
void OAIErrorGroup::setFirstOccurrence(const QDateTime &first_occurrence) {
    m_first_occurrence = first_occurrence;
    m_first_occurrence_isSet = true;
}

bool OAIErrorGroup::is_first_occurrence_Set() const{
    return m_first_occurrence_isSet;
}

bool OAIErrorGroup::is_first_occurrence_Valid() const{
    return m_first_occurrence_isValid;
}

bool OAIErrorGroup::isHidden() const {
    return m_hidden;
}
void OAIErrorGroup::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIErrorGroup::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIErrorGroup::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QDateTime OAIErrorGroup::getLastOccurrence() const {
    return m_last_occurrence;
}
void OAIErrorGroup::setLastOccurrence(const QDateTime &last_occurrence) {
    m_last_occurrence = last_occurrence;
    m_last_occurrence_isSet = true;
}

bool OAIErrorGroup::is_last_occurrence_Set() const{
    return m_last_occurrence_isSet;
}

bool OAIErrorGroup::is_last_occurrence_Valid() const{
    return m_last_occurrence_isValid;
}

QList<OAIObject> OAIErrorGroup::getReasonFrames() const {
    return m_reason_frames;
}
void OAIErrorGroup::setReasonFrames(const QList<OAIObject> &reason_frames) {
    m_reason_frames = reason_frames;
    m_reason_frames_isSet = true;
}

bool OAIErrorGroup::is_reason_frames_Set() const{
    return m_reason_frames_isSet;
}

bool OAIErrorGroup::is_reason_frames_Valid() const{
    return m_reason_frames_isValid;
}

QString OAIErrorGroup::getAnnotation() const {
    return m_annotation;
}
void OAIErrorGroup::setAnnotation(const QString &annotation) {
    m_annotation = annotation;
    m_annotation_isSet = true;
}

bool OAIErrorGroup::is_annotation_Set() const{
    return m_annotation_isSet;
}

bool OAIErrorGroup::is_annotation_Valid() const{
    return m_annotation_isValid;
}

QString OAIErrorGroup::getState() const {
    return m_state;
}
void OAIErrorGroup::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIErrorGroup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIErrorGroup::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIErrorGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_app_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_class_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_class_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_frames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_version_isValid && m_count_isValid && m_device_count_isValid && m_error_group_id_isValid && m_first_occurrence_isValid && m_last_occurrence_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
