/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppResponseInternal_allOf_repositories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppResponseInternal_allOf_repositories::OAIAppResponseInternal_allOf_repositories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppResponseInternal_allOf_repositories::OAIAppResponseInternal_allOf_repositories() {
    this->initializeModel();
}

OAIAppResponseInternal_allOf_repositories::~OAIAppResponseInternal_allOf_repositories() {}

void OAIAppResponseInternal_allOf_repositories::initializeModel() {

    m_repo_provider_isSet = false;
    m_repo_provider_isValid = false;

    m_repo_url_isSet = false;
    m_repo_url_isValid = false;
}

void OAIAppResponseInternal_allOf_repositories::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppResponseInternal_allOf_repositories::fromJsonObject(QJsonObject json) {

    m_repo_provider_isValid = ::OpenAPI::fromJsonValue(m_repo_provider, json[QString("repo_provider")]);
    m_repo_provider_isSet = !json[QString("repo_provider")].isNull() && m_repo_provider_isValid;

    m_repo_url_isValid = ::OpenAPI::fromJsonValue(m_repo_url, json[QString("repo_url")]);
    m_repo_url_isSet = !json[QString("repo_url")].isNull() && m_repo_url_isValid;
}

QString OAIAppResponseInternal_allOf_repositories::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppResponseInternal_allOf_repositories::asJsonObject() const {
    QJsonObject obj;
    if (m_repo_provider_isSet) {
        obj.insert(QString("repo_provider"), ::OpenAPI::toJsonValue(m_repo_provider));
    }
    if (m_repo_url_isSet) {
        obj.insert(QString("repo_url"), ::OpenAPI::toJsonValue(m_repo_url));
    }
    return obj;
}

QString OAIAppResponseInternal_allOf_repositories::getRepoProvider() const {
    return m_repo_provider;
}
void OAIAppResponseInternal_allOf_repositories::setRepoProvider(const QString &repo_provider) {
    m_repo_provider = repo_provider;
    m_repo_provider_isSet = true;
}

bool OAIAppResponseInternal_allOf_repositories::is_repo_provider_Set() const{
    return m_repo_provider_isSet;
}

bool OAIAppResponseInternal_allOf_repositories::is_repo_provider_Valid() const{
    return m_repo_provider_isValid;
}

QString OAIAppResponseInternal_allOf_repositories::getRepoUrl() const {
    return m_repo_url;
}
void OAIAppResponseInternal_allOf_repositories::setRepoUrl(const QString &repo_url) {
    m_repo_url = repo_url;
    m_repo_url_isSet = true;
}

bool OAIAppResponseInternal_allOf_repositories::is_repo_url_Set() const{
    return m_repo_url_isSet;
}

bool OAIAppResponseInternal_allOf_repositories::is_repo_url_Valid() const{
    return m_repo_url_isValid;
}

bool OAIAppResponseInternal_allOf_repositories::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repo_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppResponseInternal_allOf_repositories::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
