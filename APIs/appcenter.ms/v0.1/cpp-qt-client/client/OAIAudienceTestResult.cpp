/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceTestResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceTestResult::OAIAudienceTestResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceTestResult::OAIAudienceTestResult() {
    this->initializeModel();
}

OAIAudienceTestResult::~OAIAudienceTestResult() {}

void OAIAudienceTestResult::initializeModel() {

    m_custom_properties_isSet = false;
    m_custom_properties_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_estimated_count_isSet = false;
    m_estimated_count_isValid = false;

    m_estimated_total_count_isSet = false;
    m_estimated_total_count_isValid = false;
}

void OAIAudienceTestResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceTestResult::fromJsonObject(QJsonObject json) {

    m_custom_properties_isValid = ::OpenAPI::fromJsonValue(m_custom_properties, json[QString("custom_properties")]);
    m_custom_properties_isSet = !json[QString("custom_properties")].isNull() && m_custom_properties_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_estimated_count_isValid = ::OpenAPI::fromJsonValue(m_estimated_count, json[QString("estimated_count")]);
    m_estimated_count_isSet = !json[QString("estimated_count")].isNull() && m_estimated_count_isValid;

    m_estimated_total_count_isValid = ::OpenAPI::fromJsonValue(m_estimated_total_count, json[QString("estimated_total_count")]);
    m_estimated_total_count_isSet = !json[QString("estimated_total_count")].isNull() && m_estimated_total_count_isValid;
}

QString OAIAudienceTestResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceTestResult::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_properties.size() > 0) {
        obj.insert(QString("custom_properties"), ::OpenAPI::toJsonValue(m_custom_properties));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_estimated_count_isSet) {
        obj.insert(QString("estimated_count"), ::OpenAPI::toJsonValue(m_estimated_count));
    }
    if (m_estimated_total_count_isSet) {
        obj.insert(QString("estimated_total_count"), ::OpenAPI::toJsonValue(m_estimated_total_count));
    }
    return obj;
}

QMap<QString, QString> OAIAudienceTestResult::getCustomProperties() const {
    return m_custom_properties;
}
void OAIAudienceTestResult::setCustomProperties(const QMap<QString, QString> &custom_properties) {
    m_custom_properties = custom_properties;
    m_custom_properties_isSet = true;
}

bool OAIAudienceTestResult::is_custom_properties_Set() const{
    return m_custom_properties_isSet;
}

bool OAIAudienceTestResult::is_custom_properties_Valid() const{
    return m_custom_properties_isValid;
}

QString OAIAudienceTestResult::getDefinition() const {
    return m_definition;
}
void OAIAudienceTestResult::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIAudienceTestResult::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIAudienceTestResult::is_definition_Valid() const{
    return m_definition_isValid;
}

qint64 OAIAudienceTestResult::getEstimatedCount() const {
    return m_estimated_count;
}
void OAIAudienceTestResult::setEstimatedCount(const qint64 &estimated_count) {
    m_estimated_count = estimated_count;
    m_estimated_count_isSet = true;
}

bool OAIAudienceTestResult::is_estimated_count_Set() const{
    return m_estimated_count_isSet;
}

bool OAIAudienceTestResult::is_estimated_count_Valid() const{
    return m_estimated_count_isValid;
}

qint64 OAIAudienceTestResult::getEstimatedTotalCount() const {
    return m_estimated_total_count;
}
void OAIAudienceTestResult::setEstimatedTotalCount(const qint64 &estimated_total_count) {
    m_estimated_total_count = estimated_total_count;
    m_estimated_total_count_isSet = true;
}

bool OAIAudienceTestResult::is_estimated_total_count_Set() const{
    return m_estimated_total_count_isSet;
}

bool OAIAudienceTestResult::is_estimated_total_count_Valid() const{
    return m_estimated_total_count_isValid;
}

bool OAIAudienceTestResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceTestResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
