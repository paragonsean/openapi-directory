/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppUserPermissionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppUserPermissionResponse::OAIAppUserPermissionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppUserPermissionResponse::OAIAppUserPermissionResponse() {
    this->initializeModel();
}

OAIAppUserPermissionResponse::~OAIAppUserPermissionResponse() {}

void OAIAppUserPermissionResponse::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_origin_isSet = false;
    m_app_origin_isValid = false;

    m_app_secret_isSet = false;
    m_app_secret_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAppUserPermissionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppUserPermissionResponse::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_app_origin_isValid = ::OpenAPI::fromJsonValue(m_app_origin, json[QString("app_origin")]);
    m_app_origin_isSet = !json[QString("app_origin")].isNull() && m_app_origin_isValid;

    m_app_secret_isValid = ::OpenAPI::fromJsonValue(m_app_secret, json[QString("app_secret")]);
    m_app_secret_isSet = !json[QString("app_secret")].isNull() && m_app_secret_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIAppUserPermissionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppUserPermissionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_origin_isSet) {
        obj.insert(QString("app_origin"), ::OpenAPI::toJsonValue(m_app_origin));
    }
    if (m_app_secret_isSet) {
        obj.insert(QString("app_secret"), ::OpenAPI::toJsonValue(m_app_secret));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAppUserPermissionResponse::getAppId() const {
    return m_app_id;
}
void OAIAppUserPermissionResponse::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAppUserPermissionResponse::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAppUserPermissionResponse::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIAppUserPermissionResponse::getAppOrigin() const {
    return m_app_origin;
}
void OAIAppUserPermissionResponse::setAppOrigin(const QString &app_origin) {
    m_app_origin = app_origin;
    m_app_origin_isSet = true;
}

bool OAIAppUserPermissionResponse::is_app_origin_Set() const{
    return m_app_origin_isSet;
}

bool OAIAppUserPermissionResponse::is_app_origin_Valid() const{
    return m_app_origin_isValid;
}

QString OAIAppUserPermissionResponse::getAppSecret() const {
    return m_app_secret;
}
void OAIAppUserPermissionResponse::setAppSecret(const QString &app_secret) {
    m_app_secret = app_secret;
    m_app_secret_isSet = true;
}

bool OAIAppUserPermissionResponse::is_app_secret_Set() const{
    return m_app_secret_isSet;
}

bool OAIAppUserPermissionResponse::is_app_secret_Valid() const{
    return m_app_secret_isValid;
}

QList<QString> OAIAppUserPermissionResponse::getPermissions() const {
    return m_permissions;
}
void OAIAppUserPermissionResponse::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAppUserPermissionResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAppUserPermissionResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIAppUserPermissionResponse::getUserEmail() const {
    return m_user_email;
}
void OAIAppUserPermissionResponse::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIAppUserPermissionResponse::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIAppUserPermissionResponse::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIAppUserPermissionResponse::getUserId() const {
    return m_user_id;
}
void OAIAppUserPermissionResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAppUserPermissionResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAppUserPermissionResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAppUserPermissionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppUserPermissionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_app_origin_isValid && m_app_secret_isValid && m_permissions_isValid && m_user_email_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
