/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalytics_GenericLogFlow_200_response_logs_inner_device.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::OAIAnalytics_GenericLogFlow_200_response_logs_inner_device(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::OAIAnalytics_GenericLogFlow_200_response_logs_inner_device() {
    this->initializeModel();
}

OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::~OAIAnalytics_GenericLogFlow_200_response_logs_inner_device() {}

void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::initializeModel() {

    m_app_build_isSet = false;
    m_app_build_isValid = false;

    m_app_namespace_isSet = false;
    m_app_namespace_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_carrier_code_isSet = false;
    m_carrier_code_isValid = false;

    m_carrier_country_isSet = false;
    m_carrier_country_isValid = false;

    m_carrier_name_isSet = false;
    m_carrier_name_isValid = false;

    m_live_update_deployment_key_isSet = false;
    m_live_update_deployment_key_isValid = false;

    m_live_update_package_hash_isSet = false;
    m_live_update_package_hash_isValid = false;

    m_live_update_release_label_isSet = false;
    m_live_update_release_label_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_oem_name_isSet = false;
    m_oem_name_isValid = false;

    m_os_api_level_isSet = false;
    m_os_api_level_isValid = false;

    m_os_build_isSet = false;
    m_os_build_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_screen_size_isSet = false;
    m_screen_size_isValid = false;

    m_sdk_name_isSet = false;
    m_sdk_name_isValid = false;

    m_sdk_version_isSet = false;
    m_sdk_version_isValid = false;

    m_time_zone_offset_isSet = false;
    m_time_zone_offset_isValid = false;

    m_wrapper_runtime_version_isSet = false;
    m_wrapper_runtime_version_isValid = false;

    m_wrapper_sdk_name_isSet = false;
    m_wrapper_sdk_name_isValid = false;

    m_wrapper_sdk_version_isSet = false;
    m_wrapper_sdk_version_isValid = false;
}

void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::fromJsonObject(QJsonObject json) {

    m_app_build_isValid = ::OpenAPI::fromJsonValue(m_app_build, json[QString("app_build")]);
    m_app_build_isSet = !json[QString("app_build")].isNull() && m_app_build_isValid;

    m_app_namespace_isValid = ::OpenAPI::fromJsonValue(m_app_namespace, json[QString("app_namespace")]);
    m_app_namespace_isSet = !json[QString("app_namespace")].isNull() && m_app_namespace_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("app_version")]);
    m_app_version_isSet = !json[QString("app_version")].isNull() && m_app_version_isValid;

    m_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_carrier_code, json[QString("carrier_code")]);
    m_carrier_code_isSet = !json[QString("carrier_code")].isNull() && m_carrier_code_isValid;

    m_carrier_country_isValid = ::OpenAPI::fromJsonValue(m_carrier_country, json[QString("carrier_country")]);
    m_carrier_country_isSet = !json[QString("carrier_country")].isNull() && m_carrier_country_isValid;

    m_carrier_name_isValid = ::OpenAPI::fromJsonValue(m_carrier_name, json[QString("carrier_name")]);
    m_carrier_name_isSet = !json[QString("carrier_name")].isNull() && m_carrier_name_isValid;

    m_live_update_deployment_key_isValid = ::OpenAPI::fromJsonValue(m_live_update_deployment_key, json[QString("live_update_deployment_key")]);
    m_live_update_deployment_key_isSet = !json[QString("live_update_deployment_key")].isNull() && m_live_update_deployment_key_isValid;

    m_live_update_package_hash_isValid = ::OpenAPI::fromJsonValue(m_live_update_package_hash, json[QString("live_update_package_hash")]);
    m_live_update_package_hash_isSet = !json[QString("live_update_package_hash")].isNull() && m_live_update_package_hash_isValid;

    m_live_update_release_label_isValid = ::OpenAPI::fromJsonValue(m_live_update_release_label, json[QString("live_update_release_label")]);
    m_live_update_release_label_isSet = !json[QString("live_update_release_label")].isNull() && m_live_update_release_label_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_oem_name_isValid = ::OpenAPI::fromJsonValue(m_oem_name, json[QString("oem_name")]);
    m_oem_name_isSet = !json[QString("oem_name")].isNull() && m_oem_name_isValid;

    m_os_api_level_isValid = ::OpenAPI::fromJsonValue(m_os_api_level, json[QString("os_api_level")]);
    m_os_api_level_isSet = !json[QString("os_api_level")].isNull() && m_os_api_level_isValid;

    m_os_build_isValid = ::OpenAPI::fromJsonValue(m_os_build, json[QString("os_build")]);
    m_os_build_isSet = !json[QString("os_build")].isNull() && m_os_build_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("os_name")]);
    m_os_name_isSet = !json[QString("os_name")].isNull() && m_os_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("os_version")]);
    m_os_version_isSet = !json[QString("os_version")].isNull() && m_os_version_isValid;

    m_screen_size_isValid = ::OpenAPI::fromJsonValue(m_screen_size, json[QString("screen_size")]);
    m_screen_size_isSet = !json[QString("screen_size")].isNull() && m_screen_size_isValid;

    m_sdk_name_isValid = ::OpenAPI::fromJsonValue(m_sdk_name, json[QString("sdk_name")]);
    m_sdk_name_isSet = !json[QString("sdk_name")].isNull() && m_sdk_name_isValid;

    m_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_sdk_version, json[QString("sdk_version")]);
    m_sdk_version_isSet = !json[QString("sdk_version")].isNull() && m_sdk_version_isValid;

    m_time_zone_offset_isValid = ::OpenAPI::fromJsonValue(m_time_zone_offset, json[QString("time_zone_offset")]);
    m_time_zone_offset_isSet = !json[QString("time_zone_offset")].isNull() && m_time_zone_offset_isValid;

    m_wrapper_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_wrapper_runtime_version, json[QString("wrapper_runtime_version")]);
    m_wrapper_runtime_version_isSet = !json[QString("wrapper_runtime_version")].isNull() && m_wrapper_runtime_version_isValid;

    m_wrapper_sdk_name_isValid = ::OpenAPI::fromJsonValue(m_wrapper_sdk_name, json[QString("wrapper_sdk_name")]);
    m_wrapper_sdk_name_isSet = !json[QString("wrapper_sdk_name")].isNull() && m_wrapper_sdk_name_isValid;

    m_wrapper_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_wrapper_sdk_version, json[QString("wrapper_sdk_version")]);
    m_wrapper_sdk_version_isSet = !json[QString("wrapper_sdk_version")].isNull() && m_wrapper_sdk_version_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::asJsonObject() const {
    QJsonObject obj;
    if (m_app_build_isSet) {
        obj.insert(QString("app_build"), ::OpenAPI::toJsonValue(m_app_build));
    }
    if (m_app_namespace_isSet) {
        obj.insert(QString("app_namespace"), ::OpenAPI::toJsonValue(m_app_namespace));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("app_version"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_carrier_code_isSet) {
        obj.insert(QString("carrier_code"), ::OpenAPI::toJsonValue(m_carrier_code));
    }
    if (m_carrier_country_isSet) {
        obj.insert(QString("carrier_country"), ::OpenAPI::toJsonValue(m_carrier_country));
    }
    if (m_carrier_name_isSet) {
        obj.insert(QString("carrier_name"), ::OpenAPI::toJsonValue(m_carrier_name));
    }
    if (m_live_update_deployment_key_isSet) {
        obj.insert(QString("live_update_deployment_key"), ::OpenAPI::toJsonValue(m_live_update_deployment_key));
    }
    if (m_live_update_package_hash_isSet) {
        obj.insert(QString("live_update_package_hash"), ::OpenAPI::toJsonValue(m_live_update_package_hash));
    }
    if (m_live_update_release_label_isSet) {
        obj.insert(QString("live_update_release_label"), ::OpenAPI::toJsonValue(m_live_update_release_label));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_oem_name_isSet) {
        obj.insert(QString("oem_name"), ::OpenAPI::toJsonValue(m_oem_name));
    }
    if (m_os_api_level_isSet) {
        obj.insert(QString("os_api_level"), ::OpenAPI::toJsonValue(m_os_api_level));
    }
    if (m_os_build_isSet) {
        obj.insert(QString("os_build"), ::OpenAPI::toJsonValue(m_os_build));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("os_name"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("os_version"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_screen_size_isSet) {
        obj.insert(QString("screen_size"), ::OpenAPI::toJsonValue(m_screen_size));
    }
    if (m_sdk_name_isSet) {
        obj.insert(QString("sdk_name"), ::OpenAPI::toJsonValue(m_sdk_name));
    }
    if (m_sdk_version_isSet) {
        obj.insert(QString("sdk_version"), ::OpenAPI::toJsonValue(m_sdk_version));
    }
    if (m_time_zone_offset_isSet) {
        obj.insert(QString("time_zone_offset"), ::OpenAPI::toJsonValue(m_time_zone_offset));
    }
    if (m_wrapper_runtime_version_isSet) {
        obj.insert(QString("wrapper_runtime_version"), ::OpenAPI::toJsonValue(m_wrapper_runtime_version));
    }
    if (m_wrapper_sdk_name_isSet) {
        obj.insert(QString("wrapper_sdk_name"), ::OpenAPI::toJsonValue(m_wrapper_sdk_name));
    }
    if (m_wrapper_sdk_version_isSet) {
        obj.insert(QString("wrapper_sdk_version"), ::OpenAPI::toJsonValue(m_wrapper_sdk_version));
    }
    return obj;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getAppBuild() const {
    return m_app_build;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setAppBuild(const QString &app_build) {
    m_app_build = app_build;
    m_app_build_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_app_build_Set() const{
    return m_app_build_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_app_build_Valid() const{
    return m_app_build_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getAppNamespace() const {
    return m_app_namespace;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setAppNamespace(const QString &app_namespace) {
    m_app_namespace = app_namespace;
    m_app_namespace_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_app_namespace_Set() const{
    return m_app_namespace_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_app_namespace_Valid() const{
    return m_app_namespace_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getAppVersion() const {
    return m_app_version;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getCarrierCode() const {
    return m_carrier_code;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setCarrierCode(const QString &carrier_code) {
    m_carrier_code = carrier_code;
    m_carrier_code_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_carrier_code_Set() const{
    return m_carrier_code_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_carrier_code_Valid() const{
    return m_carrier_code_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getCarrierCountry() const {
    return m_carrier_country;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setCarrierCountry(const QString &carrier_country) {
    m_carrier_country = carrier_country;
    m_carrier_country_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_carrier_country_Set() const{
    return m_carrier_country_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_carrier_country_Valid() const{
    return m_carrier_country_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getCarrierName() const {
    return m_carrier_name;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setCarrierName(const QString &carrier_name) {
    m_carrier_name = carrier_name;
    m_carrier_name_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_carrier_name_Set() const{
    return m_carrier_name_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_carrier_name_Valid() const{
    return m_carrier_name_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getLiveUpdateDeploymentKey() const {
    return m_live_update_deployment_key;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setLiveUpdateDeploymentKey(const QString &live_update_deployment_key) {
    m_live_update_deployment_key = live_update_deployment_key;
    m_live_update_deployment_key_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_live_update_deployment_key_Set() const{
    return m_live_update_deployment_key_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_live_update_deployment_key_Valid() const{
    return m_live_update_deployment_key_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getLiveUpdatePackageHash() const {
    return m_live_update_package_hash;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setLiveUpdatePackageHash(const QString &live_update_package_hash) {
    m_live_update_package_hash = live_update_package_hash;
    m_live_update_package_hash_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_live_update_package_hash_Set() const{
    return m_live_update_package_hash_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_live_update_package_hash_Valid() const{
    return m_live_update_package_hash_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getLiveUpdateReleaseLabel() const {
    return m_live_update_release_label;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setLiveUpdateReleaseLabel(const QString &live_update_release_label) {
    m_live_update_release_label = live_update_release_label;
    m_live_update_release_label_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_live_update_release_label_Set() const{
    return m_live_update_release_label_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_live_update_release_label_Valid() const{
    return m_live_update_release_label_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getLocale() const {
    return m_locale;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getModel() const {
    return m_model;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_model_Set() const{
    return m_model_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getOemName() const {
    return m_oem_name;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setOemName(const QString &oem_name) {
    m_oem_name = oem_name;
    m_oem_name_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_oem_name_Set() const{
    return m_oem_name_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_oem_name_Valid() const{
    return m_oem_name_isValid;
}

qint32 OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getOsApiLevel() const {
    return m_os_api_level;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setOsApiLevel(const qint32 &os_api_level) {
    m_os_api_level = os_api_level;
    m_os_api_level_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_api_level_Set() const{
    return m_os_api_level_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_api_level_Valid() const{
    return m_os_api_level_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getOsBuild() const {
    return m_os_build;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setOsBuild(const QString &os_build) {
    m_os_build = os_build;
    m_os_build_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_build_Set() const{
    return m_os_build_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_build_Valid() const{
    return m_os_build_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getOsName() const {
    return m_os_name;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getOsVersion() const {
    return m_os_version;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getScreenSize() const {
    return m_screen_size;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setScreenSize(const QString &screen_size) {
    m_screen_size = screen_size;
    m_screen_size_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_screen_size_Set() const{
    return m_screen_size_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_screen_size_Valid() const{
    return m_screen_size_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getSdkName() const {
    return m_sdk_name;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setSdkName(const QString &sdk_name) {
    m_sdk_name = sdk_name;
    m_sdk_name_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_sdk_name_Set() const{
    return m_sdk_name_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_sdk_name_Valid() const{
    return m_sdk_name_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getSdkVersion() const {
    return m_sdk_version;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setSdkVersion(const QString &sdk_version) {
    m_sdk_version = sdk_version;
    m_sdk_version_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_sdk_version_Set() const{
    return m_sdk_version_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_sdk_version_Valid() const{
    return m_sdk_version_isValid;
}

qint32 OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getTimeZoneOffset() const {
    return m_time_zone_offset;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setTimeZoneOffset(const qint32 &time_zone_offset) {
    m_time_zone_offset = time_zone_offset;
    m_time_zone_offset_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_time_zone_offset_Set() const{
    return m_time_zone_offset_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_time_zone_offset_Valid() const{
    return m_time_zone_offset_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getWrapperRuntimeVersion() const {
    return m_wrapper_runtime_version;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setWrapperRuntimeVersion(const QString &wrapper_runtime_version) {
    m_wrapper_runtime_version = wrapper_runtime_version;
    m_wrapper_runtime_version_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_wrapper_runtime_version_Set() const{
    return m_wrapper_runtime_version_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_wrapper_runtime_version_Valid() const{
    return m_wrapper_runtime_version_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getWrapperSdkName() const {
    return m_wrapper_sdk_name;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setWrapperSdkName(const QString &wrapper_sdk_name) {
    m_wrapper_sdk_name = wrapper_sdk_name;
    m_wrapper_sdk_name_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_wrapper_sdk_name_Set() const{
    return m_wrapper_sdk_name_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_wrapper_sdk_name_Valid() const{
    return m_wrapper_sdk_name_isValid;
}

QString OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::getWrapperSdkVersion() const {
    return m_wrapper_sdk_version;
}
void OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::setWrapperSdkVersion(const QString &wrapper_sdk_version) {
    m_wrapper_sdk_version = wrapper_sdk_version;
    m_wrapper_sdk_version_isSet = true;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_wrapper_sdk_version_Set() const{
    return m_wrapper_sdk_version_isSet;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::is_wrapper_sdk_version_Valid() const{
    return m_wrapper_sdk_version_isValid;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_update_deployment_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_update_package_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_update_release_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oem_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_api_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapper_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapper_sdk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapper_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalytics_GenericLogFlow_200_response_logs_inner_device::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_build_isValid && m_app_version_isValid && m_locale_isValid && m_os_name_isValid && m_os_version_isValid && m_sdk_name_isValid && m_sdk_version_isValid && m_time_zone_offset_isValid && true;
}

} // namespace OpenAPI
