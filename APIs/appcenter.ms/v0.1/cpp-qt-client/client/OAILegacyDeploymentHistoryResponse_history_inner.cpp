/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegacyDeploymentHistoryResponse_history_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegacyDeploymentHistoryResponse_history_inner::OAILegacyDeploymentHistoryResponse_history_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegacyDeploymentHistoryResponse_history_inner::OAILegacyDeploymentHistoryResponse_history_inner() {
    this->initializeModel();
}

OAILegacyDeploymentHistoryResponse_history_inner::~OAILegacyDeploymentHistoryResponse_history_inner() {}

void OAILegacyDeploymentHistoryResponse_history_inner::initializeModel() {

    m_all_of_isSet = false;
    m_all_of_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_original_deployment_isSet = false;
    m_original_deployment_isValid = false;

    m_original_label_isSet = false;
    m_original_label_isValid = false;

    m_package_hash_isSet = false;
    m_package_hash_isValid = false;
}

void OAILegacyDeploymentHistoryResponse_history_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegacyDeploymentHistoryResponse_history_inner::fromJsonObject(QJsonObject json) {

    m_all_of_isValid = ::OpenAPI::fromJsonValue(m_all_of, json[QString("allOf")]);
    m_all_of_isSet = !json[QString("allOf")].isNull() && m_all_of_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_original_deployment_isValid = ::OpenAPI::fromJsonValue(m_original_deployment, json[QString("originalDeployment")]);
    m_original_deployment_isSet = !json[QString("originalDeployment")].isNull() && m_original_deployment_isValid;

    m_original_label_isValid = ::OpenAPI::fromJsonValue(m_original_label, json[QString("originalLabel")]);
    m_original_label_isSet = !json[QString("originalLabel")].isNull() && m_original_label_isValid;

    m_package_hash_isValid = ::OpenAPI::fromJsonValue(m_package_hash, json[QString("packageHash")]);
    m_package_hash_isSet = !json[QString("packageHash")].isNull() && m_package_hash_isValid;
}

QString OAILegacyDeploymentHistoryResponse_history_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegacyDeploymentHistoryResponse_history_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_all_of.isSet()) {
        obj.insert(QString("allOf"), ::OpenAPI::toJsonValue(m_all_of));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_original_deployment_isSet) {
        obj.insert(QString("originalDeployment"), ::OpenAPI::toJsonValue(m_original_deployment));
    }
    if (m_original_label_isSet) {
        obj.insert(QString("originalLabel"), ::OpenAPI::toJsonValue(m_original_label));
    }
    if (m_package_hash_isSet) {
        obj.insert(QString("packageHash"), ::OpenAPI::toJsonValue(m_package_hash));
    }
    return obj;
}

OAILegacyCodePushReleaseResponse_package OAILegacyDeploymentHistoryResponse_history_inner::getAllOf() const {
    return m_all_of;
}
void OAILegacyDeploymentHistoryResponse_history_inner::setAllOf(const OAILegacyCodePushReleaseResponse_package &all_of) {
    m_all_of = all_of;
    m_all_of_isSet = true;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_all_of_Set() const{
    return m_all_of_isSet;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_all_of_Valid() const{
    return m_all_of_isValid;
}

QString OAILegacyDeploymentHistoryResponse_history_inner::getDescription() const {
    return m_description;
}
void OAILegacyDeploymentHistoryResponse_history_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILegacyDeploymentHistoryResponse_history_inner::getOriginalDeployment() const {
    return m_original_deployment;
}
void OAILegacyDeploymentHistoryResponse_history_inner::setOriginalDeployment(const QString &original_deployment) {
    m_original_deployment = original_deployment;
    m_original_deployment_isSet = true;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_original_deployment_Set() const{
    return m_original_deployment_isSet;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_original_deployment_Valid() const{
    return m_original_deployment_isValid;
}

QString OAILegacyDeploymentHistoryResponse_history_inner::getOriginalLabel() const {
    return m_original_label;
}
void OAILegacyDeploymentHistoryResponse_history_inner::setOriginalLabel(const QString &original_label) {
    m_original_label = original_label;
    m_original_label_isSet = true;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_original_label_Set() const{
    return m_original_label_isSet;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_original_label_Valid() const{
    return m_original_label_isValid;
}

QString OAILegacyDeploymentHistoryResponse_history_inner::getPackageHash() const {
    return m_package_hash;
}
void OAILegacyDeploymentHistoryResponse_history_inner::setPackageHash(const QString &package_hash) {
    m_package_hash = package_hash;
    m_package_hash_isSet = true;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_package_hash_Set() const{
    return m_package_hash_isSet;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::is_package_hash_Valid() const{
    return m_package_hash_isValid;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegacyDeploymentHistoryResponse_history_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
