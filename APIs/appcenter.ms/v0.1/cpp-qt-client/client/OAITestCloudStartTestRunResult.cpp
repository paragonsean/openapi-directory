/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCloudStartTestRunResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCloudStartTestRunResult::OAITestCloudStartTestRunResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCloudStartTestRunResult::OAITestCloudStartTestRunResult() {
    this->initializeModel();
}

OAITestCloudStartTestRunResult::~OAITestCloudStartTestRunResult() {}

void OAITestCloudStartTestRunResult::initializeModel() {

    m_accepted_devices_isSet = false;
    m_accepted_devices_isValid = false;

    m_rejected_devices_isSet = false;
    m_rejected_devices_isValid = false;
}

void OAITestCloudStartTestRunResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCloudStartTestRunResult::fromJsonObject(QJsonObject json) {

    m_accepted_devices_isValid = ::OpenAPI::fromJsonValue(m_accepted_devices, json[QString("accepted_devices")]);
    m_accepted_devices_isSet = !json[QString("accepted_devices")].isNull() && m_accepted_devices_isValid;

    m_rejected_devices_isValid = ::OpenAPI::fromJsonValue(m_rejected_devices, json[QString("rejected_devices")]);
    m_rejected_devices_isSet = !json[QString("rejected_devices")].isNull() && m_rejected_devices_isValid;
}

QString OAITestCloudStartTestRunResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCloudStartTestRunResult::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_devices.size() > 0) {
        obj.insert(QString("accepted_devices"), ::OpenAPI::toJsonValue(m_accepted_devices));
    }
    if (m_rejected_devices.size() > 0) {
        obj.insert(QString("rejected_devices"), ::OpenAPI::toJsonValue(m_rejected_devices));
    }
    return obj;
}

QList<QString> OAITestCloudStartTestRunResult::getAcceptedDevices() const {
    return m_accepted_devices;
}
void OAITestCloudStartTestRunResult::setAcceptedDevices(const QList<QString> &accepted_devices) {
    m_accepted_devices = accepted_devices;
    m_accepted_devices_isSet = true;
}

bool OAITestCloudStartTestRunResult::is_accepted_devices_Set() const{
    return m_accepted_devices_isSet;
}

bool OAITestCloudStartTestRunResult::is_accepted_devices_Valid() const{
    return m_accepted_devices_isValid;
}

QList<QString> OAITestCloudStartTestRunResult::getRejectedDevices() const {
    return m_rejected_devices;
}
void OAITestCloudStartTestRunResult::setRejectedDevices(const QList<QString> &rejected_devices) {
    m_rejected_devices = rejected_devices;
    m_rejected_devices_isSet = true;
}

bool OAITestCloudStartTestRunResult::is_rejected_devices_Set() const{
    return m_rejected_devices_isSet;
}

bool OAITestCloudStartTestRunResult::is_rejected_devices_Valid() const{
    return m_rejected_devices_isValid;
}

bool OAITestCloudStartTestRunResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejected_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCloudStartTestRunResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
