/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice_Set.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice_Set::OAIDevice_Set(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice_Set::OAIDevice_Set() {
    this->initializeModel();
}

OAIDevice_Set::~OAIDevice_Set() {}

void OAIDevice_Set::initializeModel() {

    m_device_configurations_isSet = false;
    m_device_configurations_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_manufacturer_count_isSet = false;
    m_manufacturer_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_version_count_isSet = false;
    m_os_version_count_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;
}

void OAIDevice_Set::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice_Set::fromJsonObject(QJsonObject json) {

    m_device_configurations_isValid = ::OpenAPI::fromJsonValue(m_device_configurations, json[QString("deviceConfigurations")]);
    m_device_configurations_isSet = !json[QString("deviceConfigurations")].isNull() && m_device_configurations_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_manufacturer_count_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_count, json[QString("manufacturerCount")]);
    m_manufacturer_count_isSet = !json[QString("manufacturerCount")].isNull() && m_manufacturer_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_version_count_isValid = ::OpenAPI::fromJsonValue(m_os_version_count, json[QString("osVersionCount")]);
    m_os_version_count_isSet = !json[QString("osVersionCount")].isNull() && m_os_version_count_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;
}

QString OAIDevice_Set::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice_Set::asJsonObject() const {
    QJsonObject obj;
    if (m_device_configurations.size() > 0) {
        obj.insert(QString("deviceConfigurations"), ::OpenAPI::toJsonValue(m_device_configurations));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_manufacturer_count_isSet) {
        obj.insert(QString("manufacturerCount"), ::OpenAPI::toJsonValue(m_manufacturer_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_version_count_isSet) {
        obj.insert(QString("osVersionCount"), ::OpenAPI::toJsonValue(m_os_version_count));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    return obj;
}

QList<OAIDevice_Set_deviceConfigurations_inner> OAIDevice_Set::getDeviceConfigurations() const {
    return m_device_configurations;
}
void OAIDevice_Set::setDeviceConfigurations(const QList<OAIDevice_Set_deviceConfigurations_inner> &device_configurations) {
    m_device_configurations = device_configurations;
    m_device_configurations_isSet = true;
}

bool OAIDevice_Set::is_device_configurations_Set() const{
    return m_device_configurations_isSet;
}

bool OAIDevice_Set::is_device_configurations_Valid() const{
    return m_device_configurations_isValid;
}

QString OAIDevice_Set::getId() const {
    return m_id;
}
void OAIDevice_Set::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDevice_Set::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDevice_Set::is_id_Valid() const{
    return m_id_isValid;
}

double OAIDevice_Set::getManufacturerCount() const {
    return m_manufacturer_count;
}
void OAIDevice_Set::setManufacturerCount(const double &manufacturer_count) {
    m_manufacturer_count = manufacturer_count;
    m_manufacturer_count_isSet = true;
}

bool OAIDevice_Set::is_manufacturer_count_Set() const{
    return m_manufacturer_count_isSet;
}

bool OAIDevice_Set::is_manufacturer_count_Valid() const{
    return m_manufacturer_count_isValid;
}

QString OAIDevice_Set::getName() const {
    return m_name;
}
void OAIDevice_Set::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDevice_Set::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDevice_Set::is_name_Valid() const{
    return m_name_isValid;
}

double OAIDevice_Set::getOsVersionCount() const {
    return m_os_version_count;
}
void OAIDevice_Set::setOsVersionCount(const double &os_version_count) {
    m_os_version_count = os_version_count;
    m_os_version_count_isSet = true;
}

bool OAIDevice_Set::is_os_version_count_Set() const{
    return m_os_version_count_isSet;
}

bool OAIDevice_Set::is_os_version_count_Valid() const{
    return m_os_version_count_isValid;
}

OAIDevice_Set_Owner OAIDevice_Set::getOwner() const {
    return m_owner;
}
void OAIDevice_Set::setOwner(const OAIDevice_Set_Owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIDevice_Set::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIDevice_Set::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIDevice_Set::getSlug() const {
    return m_slug;
}
void OAIDevice_Set::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIDevice_Set::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIDevice_Set::is_slug_Valid() const{
    return m_slug_isValid;
}

bool OAIDevice_Set::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice_Set::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_configurations_isValid && m_id_isValid && m_name_isValid && m_owner_isValid && true;
}

} // namespace OpenAPI
