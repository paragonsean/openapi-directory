/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSubjectRightOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSubjectRightOperation::OAIDataSubjectRightOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSubjectRightOperation::OAIDataSubjectRightOperation() {
    this->initializeModel();
}

OAIDataSubjectRightOperation::~OAIDataSubjectRightOperation() {}

void OAIDataSubjectRightOperation::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_participant_isSet = false;
    m_participant_isValid = false;

    m_participant_data_isSet = false;
    m_participant_data_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_type_isSet = false;
    m_request_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDataSubjectRightOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSubjectRightOperation::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_participant_isValid = ::OpenAPI::fromJsonValue(m_participant, json[QString("participant")]);
    m_participant_isSet = !json[QString("participant")].isNull() && m_participant_isValid;

    m_participant_data_isValid = ::OpenAPI::fromJsonValue(m_participant_data, json[QString("participantData")]);
    m_participant_data_isSet = !json[QString("participantData")].isNull() && m_participant_data_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_request_type_isValid = ::OpenAPI::fromJsonValue(m_request_type, json[QString("requestType")]);
    m_request_type_isSet = !json[QString("requestType")].isNull() && m_request_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDataSubjectRightOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSubjectRightOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_participant_isSet) {
        obj.insert(QString("participant"), ::OpenAPI::toJsonValue(m_participant));
    }
    if (m_participant_data_isSet) {
        obj.insert(QString("participantData"), ::OpenAPI::toJsonValue(m_participant_data));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_type_isSet) {
        obj.insert(QString("requestType"), ::OpenAPI::toJsonValue(m_request_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDataSubjectRightOperation::getAppId() const {
    return m_app_id;
}
void OAIDataSubjectRightOperation::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIDataSubjectRightOperation::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIDataSubjectRightOperation::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIDataSubjectRightOperation::getContext() const {
    return m_context;
}
void OAIDataSubjectRightOperation::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIDataSubjectRightOperation::is_context_Set() const{
    return m_context_isSet;
}

bool OAIDataSubjectRightOperation::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIDataSubjectRightOperation::getOperationId() const {
    return m_operation_id;
}
void OAIDataSubjectRightOperation::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIDataSubjectRightOperation::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIDataSubjectRightOperation::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIDataSubjectRightOperation::getParticipant() const {
    return m_participant;
}
void OAIDataSubjectRightOperation::setParticipant(const QString &participant) {
    m_participant = participant;
    m_participant_isSet = true;
}

bool OAIDataSubjectRightOperation::is_participant_Set() const{
    return m_participant_isSet;
}

bool OAIDataSubjectRightOperation::is_participant_Valid() const{
    return m_participant_isValid;
}

QString OAIDataSubjectRightOperation::getParticipantData() const {
    return m_participant_data;
}
void OAIDataSubjectRightOperation::setParticipantData(const QString &participant_data) {
    m_participant_data = participant_data;
    m_participant_data_isSet = true;
}

bool OAIDataSubjectRightOperation::is_participant_data_Set() const{
    return m_participant_data_isSet;
}

bool OAIDataSubjectRightOperation::is_participant_data_Valid() const{
    return m_participant_data_isValid;
}

QString OAIDataSubjectRightOperation::getRequestId() const {
    return m_request_id;
}
void OAIDataSubjectRightOperation::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDataSubjectRightOperation::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDataSubjectRightOperation::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIDataSubjectRightOperation::getRequestType() const {
    return m_request_type;
}
void OAIDataSubjectRightOperation::setRequestType(const QString &request_type) {
    m_request_type = request_type;
    m_request_type_isSet = true;
}

bool OAIDataSubjectRightOperation::is_request_type_Set() const{
    return m_request_type_isSet;
}

bool OAIDataSubjectRightOperation::is_request_type_Valid() const{
    return m_request_type_isValid;
}

QString OAIDataSubjectRightOperation::getStatus() const {
    return m_status;
}
void OAIDataSubjectRightOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDataSubjectRightOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDataSubjectRightOperation::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDataSubjectRightOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSubjectRightOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_context_isValid && m_operation_id_isValid && m_participant_isValid && m_request_id_isValid && m_request_type_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
