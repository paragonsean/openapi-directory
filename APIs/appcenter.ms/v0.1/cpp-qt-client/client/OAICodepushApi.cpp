/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodepushApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICodepushApi::OAICodepushApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICodepushApi::~OAICodepushApi() {
}

void OAICodepushApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.appcenter.ms"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("codePushAcquisitionGetAcquisitionStatus", defaultConf);
    _serverIndices.insert("codePushAcquisitionGetAcquisitionStatus", 0);
    _serverConfigs.insert("codePushAcquisitionUpdateCheck", defaultConf);
    _serverIndices.insert("codePushAcquisitionUpdateCheck", 0);
    _serverConfigs.insert("codePushAcquisitionUpdateDeployStatus", defaultConf);
    _serverIndices.insert("codePushAcquisitionUpdateDeployStatus", 0);
    _serverConfigs.insert("codePushAcquisitionUpdateDownloadStatus", defaultConf);
    _serverIndices.insert("codePushAcquisitionUpdateDownloadStatus", 0);
    _serverConfigs.insert("codePushDeploymentMetricsGet", defaultConf);
    _serverIndices.insert("codePushDeploymentMetricsGet", 0);
    _serverConfigs.insert("codePushDeploymentReleaseRollback", defaultConf);
    _serverIndices.insert("codePushDeploymentReleaseRollback", 0);
    _serverConfigs.insert("codePushDeploymentReleasesCreate", defaultConf);
    _serverIndices.insert("codePushDeploymentReleasesCreate", 0);
    _serverConfigs.insert("codePushDeploymentReleasesDelete", defaultConf);
    _serverIndices.insert("codePushDeploymentReleasesDelete", 0);
    _serverConfigs.insert("codePushDeploymentReleasesGet", defaultConf);
    _serverIndices.insert("codePushDeploymentReleasesGet", 0);
    _serverConfigs.insert("codePushDeploymentUploadCreate", defaultConf);
    _serverIndices.insert("codePushDeploymentUploadCreate", 0);
    _serverConfigs.insert("codePushDeploymentsCreate", defaultConf);
    _serverIndices.insert("codePushDeploymentsCreate", 0);
    _serverConfigs.insert("codePushDeploymentsDelete", defaultConf);
    _serverIndices.insert("codePushDeploymentsDelete", 0);
    _serverConfigs.insert("codePushDeploymentsGet", defaultConf);
    _serverIndices.insert("codePushDeploymentsGet", 0);
    _serverConfigs.insert("codePushDeploymentsList", defaultConf);
    _serverIndices.insert("codePushDeploymentsList", 0);
    _serverConfigs.insert("codePushDeploymentsPromote", defaultConf);
    _serverIndices.insert("codePushDeploymentsPromote", 0);
    _serverConfigs.insert("codePushDeploymentsUpdate", defaultConf);
    _serverIndices.insert("codePushDeploymentsUpdate", 0);
    _serverConfigs.insert("deploymentReleasesUpdate", defaultConf);
    _serverIndices.insert("deploymentReleasesUpdate", 0);
    _serverConfigs.insert("legacyCodePushAcquisitionUpdateCheck", defaultConf);
    _serverIndices.insert("legacyCodePushAcquisitionUpdateCheck", 0);
    _serverConfigs.insert("legacyCodePushAcquisitionUpdateDownloadStatus", defaultConf);
    _serverIndices.insert("legacyCodePushAcquisitionUpdateDownloadStatus", 0);
    _serverConfigs.insert("legacyCodePushAcquisitionUpdateInstallsStatus", defaultConf);
    _serverIndices.insert("legacyCodePushAcquisitionUpdateInstallsStatus", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICodepushApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICodepushApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICodepushApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICodepushApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICodepushApi::setUsername(const QString &username) {
    _username = username;
}

void OAICodepushApi::setPassword(const QString &password) {
    _password = password;
}


void OAICodepushApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICodepushApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICodepushApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICodepushApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICodepushApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICodepushApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICodepushApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICodepushApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICodepushApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICodepushApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICodepushApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICodepushApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICodepushApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICodepushApi::codePushAcquisitionGetAcquisitionStatus() {
    QString fullPath = QString(_serverConfigs["codePushAcquisitionGetAcquisitionStatus"][_serverIndices.value("codePushAcquisitionGetAcquisitionStatus")].URL()+"/v0.1/public/codepush/status");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushAcquisitionGetAcquisitionStatusCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushAcquisitionGetAcquisitionStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushAcquisition_getAcquisitionStatus_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushAcquisitionGetAcquisitionStatusSignal(output);
        Q_EMIT codePushAcquisitionGetAcquisitionStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushAcquisitionGetAcquisitionStatusSignalE(output, error_type, error_str);
        Q_EMIT codePushAcquisitionGetAcquisitionStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushAcquisitionGetAcquisitionStatusSignalError(output, error_type, error_str);
        Q_EMIT codePushAcquisitionGetAcquisitionStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushAcquisitionUpdateCheck(const QString &deployment_key, const QString &app_version, const ::OpenAPI::OptionalParam<QString> &package_hash, const ::OpenAPI::OptionalParam<QString> &label, const ::OpenAPI::OptionalParam<QString> &client_unique_id, const ::OpenAPI::OptionalParam<bool> &is_companion, const ::OpenAPI::OptionalParam<QString> &previous_label_or_app_version, const ::OpenAPI::OptionalParam<QString> &previous_deployment_key) {
    QString fullPath = QString(_serverConfigs["codePushAcquisitionUpdateCheck"][_serverIndices.value("codePushAcquisitionUpdateCheck")].URL()+"/v0.1/public/codepush/update_check");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deployment_key", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deployment_key")).append(querySuffix).append(QUrl::toPercentEncoding(deployment_key));
    }
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "app_version", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("app_version")).append(querySuffix).append(QUrl::toPercentEncoding(app_version));
    }
    if (package_hash.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "package_hash", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("package_hash")).append(querySuffix).append(QUrl::toPercentEncoding(package_hash.stringValue()));
    }
    if (label.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "label", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("label")).append(querySuffix).append(QUrl::toPercentEncoding(label.stringValue()));
    }
    if (client_unique_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_unique_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_unique_id")).append(querySuffix).append(QUrl::toPercentEncoding(client_unique_id.stringValue()));
    }
    if (is_companion.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "is_companion", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("is_companion")).append(querySuffix).append(QUrl::toPercentEncoding(is_companion.stringValue()));
    }
    if (previous_label_or_app_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "previous_label_or_app_version", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("previous_label_or_app_version")).append(querySuffix).append(QUrl::toPercentEncoding(previous_label_or_app_version.stringValue()));
    }
    if (previous_deployment_key.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "previous_deployment_key", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("previous_deployment_key")).append(querySuffix).append(QUrl::toPercentEncoding(previous_deployment_key.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushAcquisitionUpdateCheckCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushAcquisitionUpdateCheckCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushAcquisition_updateCheck_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushAcquisitionUpdateCheckSignal(output);
        Q_EMIT codePushAcquisitionUpdateCheckSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushAcquisitionUpdateCheckSignalE(output, error_type, error_str);
        Q_EMIT codePushAcquisitionUpdateCheckSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushAcquisitionUpdateCheckSignalError(output, error_type, error_str);
        Q_EMIT codePushAcquisitionUpdateCheckSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushAcquisitionUpdateDeployStatus(const OAICodePushAcquisition_updateDeployStatus_request &oai_code_push_acquisition_update_deploy_status_request) {
    QString fullPath = QString(_serverConfigs["codePushAcquisitionUpdateDeployStatus"][_serverIndices.value("codePushAcquisitionUpdateDeployStatus")].URL()+"/v0.1/public/codepush/report_status/deploy");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_code_push_acquisition_update_deploy_status_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushAcquisitionUpdateDeployStatusCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushAcquisitionUpdateDeployStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushAcquisitionUpdateDeployStatusSignal();
        Q_EMIT codePushAcquisitionUpdateDeployStatusSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushAcquisitionUpdateDeployStatusSignalE(error_type, error_str);
        Q_EMIT codePushAcquisitionUpdateDeployStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushAcquisitionUpdateDeployStatusSignalError(error_type, error_str);
        Q_EMIT codePushAcquisitionUpdateDeployStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushAcquisitionUpdateDownloadStatus(const OAICodePushAcquisition_updateDeployStatus_request &oai_code_push_acquisition_update_deploy_status_request) {
    QString fullPath = QString(_serverConfigs["codePushAcquisitionUpdateDownloadStatus"][_serverIndices.value("codePushAcquisitionUpdateDownloadStatus")].URL()+"/v0.1/public/codepush/report_status/download");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_code_push_acquisition_update_deploy_status_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushAcquisitionUpdateDownloadStatusCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushAcquisitionUpdateDownloadStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushAcquisitionUpdateDownloadStatusSignal();
        Q_EMIT codePushAcquisitionUpdateDownloadStatusSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushAcquisitionUpdateDownloadStatusSignalE(error_type, error_str);
        Q_EMIT codePushAcquisitionUpdateDownloadStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushAcquisitionUpdateDownloadStatusSignalError(error_type, error_str);
        Q_EMIT codePushAcquisitionUpdateDownloadStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentMetricsGet(const QString &deployment_name, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentMetricsGet"][_serverIndices.value("codePushDeploymentMetricsGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentMetricsGetCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentMetricsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICodePushDeploymentMetrics_get_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICodePushDeploymentMetrics_get_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentMetricsGetSignal(output);
        Q_EMIT codePushDeploymentMetricsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentMetricsGetSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentMetricsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentMetricsGetSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentMetricsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentReleaseRollback(const QString &deployment_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAICodePushDeploymentRelease_rollback_request> &oai_code_push_deployment_release_rollback_request) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentReleaseRollback"][_serverIndices.value("codePushDeploymentReleaseRollback")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_code_push_deployment_release_rollback_request.hasValue()){

        
        QByteArray output = oai_code_push_deployment_release_rollback_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentReleaseRollbackCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentReleaseRollbackCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushDeployments_list_200_response_inner_latest_release output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentReleaseRollbackSignal(output);
        Q_EMIT codePushDeploymentReleaseRollbackSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentReleaseRollbackSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentReleaseRollbackSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentReleaseRollbackSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentReleaseRollbackSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentReleasesCreate(const QString &deployment_name, const QString &owner_name, const QString &app_name, const OAICodePushDeploymentReleases_create_request &oai_code_push_deployment_releases_create_request) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentReleasesCreate"][_serverIndices.value("codePushDeploymentReleasesCreate")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_code_push_deployment_releases_create_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentReleasesCreateCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentReleasesCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushDeployments_list_200_response_inner_latest_release output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentReleasesCreateSignal(output);
        Q_EMIT codePushDeploymentReleasesCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentReleasesCreateSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentReleasesCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentReleasesCreateSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentReleasesCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentReleasesDelete(const QString &deployment_name, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentReleasesDelete"][_serverIndices.value("codePushDeploymentReleasesDelete")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentReleasesDeleteCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentReleasesDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentReleasesDeleteSignal();
        Q_EMIT codePushDeploymentReleasesDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentReleasesDeleteSignalE(error_type, error_str);
        Q_EMIT codePushDeploymentReleasesDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentReleasesDeleteSignalError(error_type, error_str);
        Q_EMIT codePushDeploymentReleasesDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentReleasesGet(const QString &deployment_name, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentReleasesGet"][_serverIndices.value("codePushDeploymentReleasesGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentReleasesGetCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentReleasesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICodePushDeployments_list_200_response_inner_latest_release> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICodePushDeployments_list_200_response_inner_latest_release val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentReleasesGetSignal(output);
        Q_EMIT codePushDeploymentReleasesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentReleasesGetSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentReleasesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentReleasesGetSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentReleasesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentUploadCreate(const QString &deployment_name, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentUploadCreate"][_serverIndices.value("codePushDeploymentUploadCreate")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentUploadCreateCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentUploadCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushDeploymentUpload_create_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentUploadCreateSignal(output);
        Q_EMIT codePushDeploymentUploadCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentUploadCreateSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentUploadCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentUploadCreateSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentUploadCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentsCreate(const QString &owner_name, const QString &app_name, const OAICodePushDeployments_list_200_response_inner &oai_code_push_deployments_list_200_response_inner) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentsCreate"][_serverIndices.value("codePushDeploymentsCreate")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_code_push_deployments_list_200_response_inner.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentsCreateCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushDeployments_list_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentsCreateSignal(output);
        Q_EMIT codePushDeploymentsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentsCreateSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentsCreateSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentsDelete(const QString &deployment_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIObject> &body) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentsDelete"][_serverIndices.value("codePushDeploymentsDelete")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");

    if (body.hasValue()){

        
        QByteArray output = body.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentsDeleteCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentsDeleteSignal();
        Q_EMIT codePushDeploymentsDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentsDeleteSignalE(error_type, error_str);
        Q_EMIT codePushDeploymentsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentsDeleteSignalError(error_type, error_str);
        Q_EMIT codePushDeploymentsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentsGet(const QString &deployment_name, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentsGet"][_serverIndices.value("codePushDeploymentsGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentsGetCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushDeployments_list_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentsGetSignal(output);
        Q_EMIT codePushDeploymentsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentsGetSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentsGetSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentsList(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentsList"][_serverIndices.value("codePushDeploymentsList")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentsListCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICodePushDeployments_list_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICodePushDeployments_list_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentsListSignal(output);
        Q_EMIT codePushDeploymentsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentsListSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentsListSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentsPromote(const QString &deployment_name, const QString &promote_deployment_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAICodePushDeployments_promote_request> &oai_code_push_deployments_promote_request) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentsPromote"][_serverIndices.value("codePushDeploymentsPromote")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString promote_deployment_namePathParam("{");
        promote_deployment_namePathParam.append("promote_deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "promote_deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"promote_deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(promote_deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(promote_deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_code_push_deployments_promote_request.hasValue()){

        
        QByteArray output = oai_code_push_deployments_promote_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentsPromoteCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentsPromoteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushDeployments_list_200_response_inner_latest_release output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentsPromoteSignal(output);
        Q_EMIT codePushDeploymentsPromoteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentsPromoteSignalE(output, error_type, error_str);
        Q_EMIT codePushDeploymentsPromoteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentsPromoteSignalError(output, error_type, error_str);
        Q_EMIT codePushDeploymentsPromoteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::codePushDeploymentsUpdate(const QString &deployment_name, const QString &owner_name, const QString &app_name, const OAICodePushDeployments_update_request &oai_code_push_deployments_update_request) {
    QString fullPath = QString(_serverConfigs["codePushDeploymentsUpdate"][_serverIndices.value("codePushDeploymentsUpdate")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_code_push_deployments_update_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::codePushDeploymentsUpdateCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::codePushDeploymentsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePushDeploymentsUpdateSignal();
        Q_EMIT codePushDeploymentsUpdateSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePushDeploymentsUpdateSignalE(error_type, error_str);
        Q_EMIT codePushDeploymentsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePushDeploymentsUpdateSignalError(error_type, error_str);
        Q_EMIT codePushDeploymentsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::deploymentReleasesUpdate(const QString &deployment_name, const QString &release_label, const QString &owner_name, const QString &app_name, const OAIDeploymentReleases_update_request &oai_deployment_releases_update_request) {
    QString fullPath = QString(_serverConfigs["deploymentReleasesUpdate"][_serverIndices.value("deploymentReleasesUpdate")].URL()+"/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString deployment_namePathParam("{");
        deployment_namePathParam.append("deployment_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "deployment_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"deployment_name"+pathSuffix : pathPrefix;
        fullPath.replace(deployment_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(deployment_name)));
    }
    
    {
        QString release_labelPathParam("{");
        release_labelPathParam.append("release_label").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "release_label", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"release_label"+pathSuffix : pathPrefix;
        fullPath.replace(release_labelPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(release_label)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_deployment_releases_update_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::deploymentReleasesUpdateCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::deploymentReleasesUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICodePushDeployments_list_200_response_inner_latest_release output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deploymentReleasesUpdateSignal(output);
        Q_EMIT deploymentReleasesUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deploymentReleasesUpdateSignalE(output, error_type, error_str);
        Q_EMIT deploymentReleasesUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deploymentReleasesUpdateSignalError(output, error_type, error_str);
        Q_EMIT deploymentReleasesUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::legacyCodePushAcquisitionUpdateCheck(const ::OpenAPI::OptionalParam<QString> &deployment_key, const ::OpenAPI::OptionalParam<QString> &app_version, const ::OpenAPI::OptionalParam<QString> &package_hash, const ::OpenAPI::OptionalParam<QString> &label, const ::OpenAPI::OptionalParam<QString> &client_unique_id, const ::OpenAPI::OptionalParam<QString> &is_companion) {
    QString fullPath = QString(_serverConfigs["legacyCodePushAcquisitionUpdateCheck"][_serverIndices.value("legacyCodePushAcquisitionUpdateCheck")].URL()+"/v0.1/legacy/updateCheck");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (deployment_key.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "deploymentKey", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("deploymentKey")).append(querySuffix).append(QUrl::toPercentEncoding(deployment_key.stringValue()));
    }
    if (app_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "appVersion", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("appVersion")).append(querySuffix).append(QUrl::toPercentEncoding(app_version.stringValue()));
    }
    if (package_hash.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "packageHash", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("packageHash")).append(querySuffix).append(QUrl::toPercentEncoding(package_hash.stringValue()));
    }
    if (label.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "label", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("label")).append(querySuffix).append(QUrl::toPercentEncoding(label.stringValue()));
    }
    if (client_unique_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "clientUniqueId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("clientUniqueId")).append(querySuffix).append(QUrl::toPercentEncoding(client_unique_id.stringValue()));
    }
    if (is_companion.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "isCompanion", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("isCompanion")).append(querySuffix).append(QUrl::toPercentEncoding(is_companion.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::legacyCodePushAcquisitionUpdateCheckCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::legacyCodePushAcquisitionUpdateCheckCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILegacyCodePushAcquisition_updateCheck_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyCodePushAcquisitionUpdateCheckSignal(output);
        Q_EMIT legacyCodePushAcquisitionUpdateCheckSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyCodePushAcquisitionUpdateCheckSignalE(output, error_type, error_str);
        Q_EMIT legacyCodePushAcquisitionUpdateCheckSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyCodePushAcquisitionUpdateCheckSignalError(output, error_type, error_str);
        Q_EMIT legacyCodePushAcquisitionUpdateCheckSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::legacyCodePushAcquisitionUpdateDownloadStatus(const OAILegacyCodePushAcquisition_updateInstallsStatus_request &oai_legacy_code_push_acquisition_update_installs_status_request) {
    QString fullPath = QString(_serverConfigs["legacyCodePushAcquisitionUpdateDownloadStatus"][_serverIndices.value("legacyCodePushAcquisitionUpdateDownloadStatus")].URL()+"/v0.1/legacy/reportStatus/download");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_legacy_code_push_acquisition_update_installs_status_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::legacyCodePushAcquisitionUpdateDownloadStatusCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::legacyCodePushAcquisitionUpdateDownloadStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyCodePushAcquisitionUpdateDownloadStatusSignal();
        Q_EMIT legacyCodePushAcquisitionUpdateDownloadStatusSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyCodePushAcquisitionUpdateDownloadStatusSignalE(error_type, error_str);
        Q_EMIT legacyCodePushAcquisitionUpdateDownloadStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyCodePushAcquisitionUpdateDownloadStatusSignalError(error_type, error_str);
        Q_EMIT legacyCodePushAcquisitionUpdateDownloadStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::legacyCodePushAcquisitionUpdateInstallsStatus(const OAILegacyCodePushAcquisition_updateInstallsStatus_request &oai_legacy_code_push_acquisition_update_installs_status_request) {
    QString fullPath = QString(_serverConfigs["legacyCodePushAcquisitionUpdateInstallsStatus"][_serverIndices.value("legacyCodePushAcquisitionUpdateInstallsStatus")].URL()+"/v0.1/legacy/reportStatus/deploy");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_legacy_code_push_acquisition_update_installs_status_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICodepushApi::legacyCodePushAcquisitionUpdateInstallsStatusCallback);
    connect(this, &OAICodepushApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICodepushApi::legacyCodePushAcquisitionUpdateInstallsStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT legacyCodePushAcquisitionUpdateInstallsStatusSignal();
        Q_EMIT legacyCodePushAcquisitionUpdateInstallsStatusSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT legacyCodePushAcquisitionUpdateInstallsStatusSignalE(error_type, error_str);
        Q_EMIT legacyCodePushAcquisitionUpdateInstallsStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT legacyCodePushAcquisitionUpdateInstallsStatusSignalError(error_type, error_str);
        Q_EMIT legacyCodePushAcquisitionUpdateInstallsStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICodepushApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
