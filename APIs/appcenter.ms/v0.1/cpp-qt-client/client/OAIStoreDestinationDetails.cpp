/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreDestinationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreDestinationDetails::OAIStoreDestinationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreDestinationDetails::OAIStoreDestinationDetails() {
    this->initializeModel();
}

OAIStoreDestinationDetails::~OAIStoreDestinationDetails() {}

void OAIStoreDestinationDetails::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_dest_publish_id_isSet = false;
    m_dest_publish_id_isValid = false;

    m_store_type_isSet = false;
    m_store_type_isValid = false;
}

void OAIStoreDestinationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreDestinationDetails::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_dest_publish_id_isValid = ::OpenAPI::fromJsonValue(m_dest_publish_id, json[QString("dest_publish_id")]);
    m_dest_publish_id_isSet = !json[QString("dest_publish_id")].isNull() && m_dest_publish_id_isValid;

    m_store_type_isValid = ::OpenAPI::fromJsonValue(m_store_type, json[QString("store_type")]);
    m_store_type_isSet = !json[QString("store_type")].isNull() && m_store_type_isValid;
}

QString OAIStoreDestinationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreDestinationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_dest_publish_id_isSet) {
        obj.insert(QString("dest_publish_id"), ::OpenAPI::toJsonValue(m_dest_publish_id));
    }
    if (m_store_type_isSet) {
        obj.insert(QString("store_type"), ::OpenAPI::toJsonValue(m_store_type));
    }
    return obj;
}

QString OAIStoreDestinationDetails::getAppId() const {
    return m_app_id;
}
void OAIStoreDestinationDetails::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIStoreDestinationDetails::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIStoreDestinationDetails::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIStoreDestinationDetails::getDestPublishId() const {
    return m_dest_publish_id;
}
void OAIStoreDestinationDetails::setDestPublishId(const QString &dest_publish_id) {
    m_dest_publish_id = dest_publish_id;
    m_dest_publish_id_isSet = true;
}

bool OAIStoreDestinationDetails::is_dest_publish_id_Set() const{
    return m_dest_publish_id_isSet;
}

bool OAIStoreDestinationDetails::is_dest_publish_id_Valid() const{
    return m_dest_publish_id_isValid;
}

QString OAIStoreDestinationDetails::getStoreType() const {
    return m_store_type;
}
void OAIStoreDestinationDetails::setStoreType(const QString &store_type) {
    m_store_type = store_type;
    m_store_type_isSet = true;
}

bool OAIStoreDestinationDetails::is_store_type_Set() const{
    return m_store_type_isSet;
}

bool OAIStoreDestinationDetails::is_store_type_Valid() const{
    return m_store_type_isValid;
}

bool OAIStoreDestinationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dest_publish_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreDestinationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
