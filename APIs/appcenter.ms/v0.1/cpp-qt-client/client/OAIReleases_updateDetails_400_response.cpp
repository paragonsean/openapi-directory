/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleases_updateDetails_400_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleases_updateDetails_400_response::OAIReleases_updateDetails_400_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleases_updateDetails_400_response::OAIReleases_updateDetails_400_response() {
    this->initializeModel();
}

OAIReleases_updateDetails_400_response::~OAIReleases_updateDetails_400_response() {}

void OAIReleases_updateDetails_400_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_mandatory_update_isSet = false;
    m_mandatory_update_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;
}

void OAIReleases_updateDetails_400_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleases_updateDetails_400_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_mandatory_update_isValid = ::OpenAPI::fromJsonValue(m_mandatory_update, json[QString("mandatory_update")]);
    m_mandatory_update_isSet = !json[QString("mandatory_update")].isNull() && m_mandatory_update_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("release_notes")]);
    m_release_notes_isSet = !json[QString("release_notes")].isNull() && m_release_notes_isValid;
}

QString OAIReleases_updateDetails_400_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleases_updateDetails_400_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_mandatory_update_isSet) {
        obj.insert(QString("mandatory_update"), ::OpenAPI::toJsonValue(m_mandatory_update));
    }
    if (m_release_notes_isSet) {
        obj.insert(QString("release_notes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    return obj;
}

QString OAIReleases_updateDetails_400_response::getCode() const {
    return m_code;
}
void OAIReleases_updateDetails_400_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIReleases_updateDetails_400_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIReleases_updateDetails_400_response::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIReleases_updateDetails_400_response::getMessage() const {
    return m_message;
}
void OAIReleases_updateDetails_400_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIReleases_updateDetails_400_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIReleases_updateDetails_400_response::is_message_Valid() const{
    return m_message_isValid;
}

QList<OAIReleases_updateDetails_400_response_allOf_destinations_inner> OAIReleases_updateDetails_400_response::getDestinations() const {
    return m_destinations;
}
void OAIReleases_updateDetails_400_response::setDestinations(const QList<OAIReleases_updateDetails_400_response_allOf_destinations_inner> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIReleases_updateDetails_400_response::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIReleases_updateDetails_400_response::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAIReleases_updateDetails_400_response::isMandatoryUpdate() const {
    return m_mandatory_update;
}
void OAIReleases_updateDetails_400_response::setMandatoryUpdate(const bool &mandatory_update) {
    m_mandatory_update = mandatory_update;
    m_mandatory_update_isSet = true;
}

bool OAIReleases_updateDetails_400_response::is_mandatory_update_Set() const{
    return m_mandatory_update_isSet;
}

bool OAIReleases_updateDetails_400_response::is_mandatory_update_Valid() const{
    return m_mandatory_update_isValid;
}

QString OAIReleases_updateDetails_400_response::getReleaseNotes() const {
    return m_release_notes;
}
void OAIReleases_updateDetails_400_response::setReleaseNotes(const QString &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAIReleases_updateDetails_400_response::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAIReleases_updateDetails_400_response::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

bool OAIReleases_updateDetails_400_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleases_updateDetails_400_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
