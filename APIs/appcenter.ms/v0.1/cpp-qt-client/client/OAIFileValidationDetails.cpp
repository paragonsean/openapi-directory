/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileValidationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileValidationDetails::OAIFileValidationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileValidationDetails::OAIFileValidationDetails() {
    this->initializeModel();
}

OAIFileValidationDetails::~OAIFileValidationDetails() {}

void OAIFileValidationDetails::initializeModel() {

    m_certificate_upload_id_isSet = false;
    m_certificate_upload_id_isValid = false;

    m_p12password_isSet = false;
    m_p12password_isValid = false;
}

void OAIFileValidationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileValidationDetails::fromJsonObject(QJsonObject json) {

    m_certificate_upload_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_upload_id, json[QString("certificateUploadId")]);
    m_certificate_upload_id_isSet = !json[QString("certificateUploadId")].isNull() && m_certificate_upload_id_isValid;

    m_p12password_isValid = ::OpenAPI::fromJsonValue(m_p12password, json[QString("p12password")]);
    m_p12password_isSet = !json[QString("p12password")].isNull() && m_p12password_isValid;
}

QString OAIFileValidationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileValidationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_upload_id_isSet) {
        obj.insert(QString("certificateUploadId"), ::OpenAPI::toJsonValue(m_certificate_upload_id));
    }
    if (m_p12password_isSet) {
        obj.insert(QString("p12password"), ::OpenAPI::toJsonValue(m_p12password));
    }
    return obj;
}

QString OAIFileValidationDetails::getCertificateUploadId() const {
    return m_certificate_upload_id;
}
void OAIFileValidationDetails::setCertificateUploadId(const QString &certificate_upload_id) {
    m_certificate_upload_id = certificate_upload_id;
    m_certificate_upload_id_isSet = true;
}

bool OAIFileValidationDetails::is_certificate_upload_id_Set() const{
    return m_certificate_upload_id_isSet;
}

bool OAIFileValidationDetails::is_certificate_upload_id_Valid() const{
    return m_certificate_upload_id_isValid;
}

QString OAIFileValidationDetails::getP12password() const {
    return m_p12password;
}
void OAIFileValidationDetails::setP12password(const QString &p12password) {
    m_p12password = p12password;
    m_p12password_isSet = true;
}

bool OAIFileValidationDetails::is_p12password_Set() const{
    return m_p12password_isSet;
}

bool OAIFileValidationDetails::is_p12password_Valid() const{
    return m_p12password_isValid;
}

bool OAIFileValidationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p12password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileValidationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_p12password_isValid && true;
}

} // namespace OpenAPI
