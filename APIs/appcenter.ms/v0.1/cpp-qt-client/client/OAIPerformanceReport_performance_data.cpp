/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceReport_performance_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceReport_performance_data::OAIPerformanceReport_performance_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceReport_performance_data::OAIPerformanceReport_performance_data() {
    this->initializeModel();
}

OAIPerformanceReport_performance_data::~OAIPerformanceReport_performance_data() {}

void OAIPerformanceReport_performance_data::initializeModel() {

    m_elapsed_secs_isSet = false;
    m_elapsed_secs_isValid = false;

    m_elapsed_secs_end_isSet = false;
    m_elapsed_secs_end_isValid = false;

    m_elapsed_secs_start_isSet = false;
    m_elapsed_secs_start_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIPerformanceReport_performance_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceReport_performance_data::fromJsonObject(QJsonObject json) {

    m_elapsed_secs_isValid = ::OpenAPI::fromJsonValue(m_elapsed_secs, json[QString("elapsed-secs")]);
    m_elapsed_secs_isSet = !json[QString("elapsed-secs")].isNull() && m_elapsed_secs_isValid;

    m_elapsed_secs_end_isValid = ::OpenAPI::fromJsonValue(m_elapsed_secs_end, json[QString("elapsed-secs-end")]);
    m_elapsed_secs_end_isSet = !json[QString("elapsed-secs-end")].isNull() && m_elapsed_secs_end_isValid;

    m_elapsed_secs_start_isValid = ::OpenAPI::fromJsonValue(m_elapsed_secs_start, json[QString("elapsed-secs-start")]);
    m_elapsed_secs_start_isSet = !json[QString("elapsed-secs-start")].isNull() && m_elapsed_secs_start_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAIPerformanceReport_performance_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceReport_performance_data::asJsonObject() const {
    QJsonObject obj;
    if (m_elapsed_secs_isSet) {
        obj.insert(QString("elapsed-secs"), ::OpenAPI::toJsonValue(m_elapsed_secs));
    }
    if (m_elapsed_secs_end_isSet) {
        obj.insert(QString("elapsed-secs-end"), ::OpenAPI::toJsonValue(m_elapsed_secs_end));
    }
    if (m_elapsed_secs_start_isSet) {
        obj.insert(QString("elapsed-secs-start"), ::OpenAPI::toJsonValue(m_elapsed_secs_start));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

double OAIPerformanceReport_performance_data::getElapsedSecs() const {
    return m_elapsed_secs;
}
void OAIPerformanceReport_performance_data::setElapsedSecs(const double &elapsed_secs) {
    m_elapsed_secs = elapsed_secs;
    m_elapsed_secs_isSet = true;
}

bool OAIPerformanceReport_performance_data::is_elapsed_secs_Set() const{
    return m_elapsed_secs_isSet;
}

bool OAIPerformanceReport_performance_data::is_elapsed_secs_Valid() const{
    return m_elapsed_secs_isValid;
}

double OAIPerformanceReport_performance_data::getElapsedSecsEnd() const {
    return m_elapsed_secs_end;
}
void OAIPerformanceReport_performance_data::setElapsedSecsEnd(const double &elapsed_secs_end) {
    m_elapsed_secs_end = elapsed_secs_end;
    m_elapsed_secs_end_isSet = true;
}

bool OAIPerformanceReport_performance_data::is_elapsed_secs_end_Set() const{
    return m_elapsed_secs_end_isSet;
}

bool OAIPerformanceReport_performance_data::is_elapsed_secs_end_Valid() const{
    return m_elapsed_secs_end_isValid;
}

double OAIPerformanceReport_performance_data::getElapsedSecsStart() const {
    return m_elapsed_secs_start;
}
void OAIPerformanceReport_performance_data::setElapsedSecsStart(const double &elapsed_secs_start) {
    m_elapsed_secs_start = elapsed_secs_start;
    m_elapsed_secs_start_isSet = true;
}

bool OAIPerformanceReport_performance_data::is_elapsed_secs_start_Set() const{
    return m_elapsed_secs_start_isSet;
}

bool OAIPerformanceReport_performance_data::is_elapsed_secs_start_Valid() const{
    return m_elapsed_secs_start_isValid;
}

QString OAIPerformanceReport_performance_data::getId() const {
    return m_id;
}
void OAIPerformanceReport_performance_data::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerformanceReport_performance_data::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerformanceReport_performance_data::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIPerformanceReport_performance_data_steps_inner> OAIPerformanceReport_performance_data::getSteps() const {
    return m_steps;
}
void OAIPerformanceReport_performance_data::setSteps(const QList<OAIPerformanceReport_performance_data_steps_inner> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIPerformanceReport_performance_data::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIPerformanceReport_performance_data::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIPerformanceReport_performance_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elapsed_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_secs_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_secs_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceReport_performance_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_elapsed_secs_isValid && m_elapsed_secs_end_isValid && m_elapsed_secs_start_isValid && m_id_isValid && m_steps_isValid && true;
}

} // namespace OpenAPI
