/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner() {
    this->initializeModel();
}

OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::~OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner() {}

void OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::initializeModel() {

    m_distribution_group_isSet = false;
    m_distribution_group_isValid = false;

    m_release_id_isSet = false;
    m_release_id_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_unique_count_isSet = false;
    m_unique_count_isValid = false;
}

void OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::fromJsonObject(QJsonObject json) {

    m_distribution_group_isValid = ::OpenAPI::fromJsonValue(m_distribution_group, json[QString("distribution_group")]);
    m_distribution_group_isSet = !json[QString("distribution_group")].isNull() && m_distribution_group_isValid;

    m_release_id_isValid = ::OpenAPI::fromJsonValue(m_release_id, json[QString("release_id")]);
    m_release_id_isSet = !json[QString("release_id")].isNull() && m_release_id_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;

    m_unique_count_isValid = ::OpenAPI::fromJsonValue(m_unique_count, json[QString("unique_count")]);
    m_unique_count_isSet = !json[QString("unique_count")].isNull() && m_unique_count_isValid;
}

QString OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_distribution_group_isSet) {
        obj.insert(QString("distribution_group"), ::OpenAPI::toJsonValue(m_distribution_group));
    }
    if (m_release_id_isSet) {
        obj.insert(QString("release_id"), ::OpenAPI::toJsonValue(m_release_id));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_unique_count_isSet) {
        obj.insert(QString("unique_count"), ::OpenAPI::toJsonValue(m_unique_count));
    }
    return obj;
}

QString OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::getDistributionGroup() const {
    return m_distribution_group;
}
void OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::setDistributionGroup(const QString &distribution_group) {
    m_distribution_group = distribution_group;
    m_distribution_group_isSet = true;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_distribution_group_Set() const{
    return m_distribution_group_isSet;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_distribution_group_Valid() const{
    return m_distribution_group_isValid;
}

QString OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::getReleaseId() const {
    return m_release_id;
}
void OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::setReleaseId(const QString &release_id) {
    m_release_id = release_id;
    m_release_id_isSet = true;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_release_id_Set() const{
    return m_release_id_isSet;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_release_id_Valid() const{
    return m_release_id_isValid;
}

qint64 OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::getTotalCount() const {
    return m_total_count;
}
void OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::setTotalCount(const qint64 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_total_count_Valid() const{
    return m_total_count_isValid;
}

qint64 OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::getUniqueCount() const {
    return m_unique_count;
}
void OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::setUniqueCount(const qint64 &unique_count) {
    m_unique_count = unique_count;
    m_unique_count_isSet = true;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_unique_count_Set() const{
    return m_unique_count_isSet;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::is_unique_count_Valid() const{
    return m_unique_count_isValid;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distribution_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalytics_DistributionReleaseCounts_200_response_counts_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_release_id_isValid && m_total_count_isValid && m_unique_count_isValid && true;
}

} // namespace OpenAPI
