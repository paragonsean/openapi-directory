/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner() {
    this->initializeModel();
}

OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::~OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner() {}

void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_report_url_isSet = false;
    m_report_url_isValid = false;

    m_skipped_isSet = false;
    m_skipped_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_report_url_isValid = ::OpenAPI::fromJsonValue(m_report_url, json[QString("report_url")]);
    m_report_url_isSet = !json[QString("report_url")].isNull() && m_report_url_isValid;

    m_skipped_isValid = ::OpenAPI::fromJsonValue(m_skipped, json[QString("skipped")]);
    m_skipped_isSet = !json[QString("skipped")].isNull() && m_skipped_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_report_url_isSet) {
        obj.insert(QString("report_url"), ::OpenAPI::toJsonValue(m_report_url));
    }
    if (m_skipped_isSet) {
        obj.insert(QString("skipped"), ::OpenAPI::toJsonValue(m_skipped));
    }
    if (m_steps.size() > 0) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

double OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::getFailed() const {
    return m_failed;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::setFailed(const double &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_failed_Valid() const{
    return m_failed_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::getId() const {
    return m_id;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_id_Valid() const{
    return m_id_isValid;
}

double OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::getNumber() const {
    return m_number;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::setNumber(const double &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_number_Set() const{
    return m_number_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_number_Valid() const{
    return m_number_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::getReportUrl() const {
    return m_report_url;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::setReportUrl(const QString &report_url) {
    m_report_url = report_url;
    m_report_url_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_report_url_Set() const{
    return m_report_url_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_report_url_Valid() const{
    return m_report_url_isValid;
}

double OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::getSkipped() const {
    return m_skipped;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::setSkipped(const double &skipped) {
    m_skipped = skipped;
    m_skipped_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_skipped_Set() const{
    return m_skipped_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_skipped_Valid() const{
    return m_skipped_isValid;
}

QList<OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner> OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::getSteps() const {
    return m_steps;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::setSteps(const QList<OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner> &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
