/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchReleaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchReleaseRequest::OAIPatchReleaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchReleaseRequest::OAIPatchReleaseRequest() {
    this->initializeModel();
}

OAIPatchReleaseRequest::~OAIPatchReleaseRequest() {}

void OAIPatchReleaseRequest::initializeModel() {

    m_dest_publish_id_isSet = false;
    m_dest_publish_id_isValid = false;

    m_error_context_id_isSet = false;
    m_error_context_id_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;

    m_is_wrapper_request_isSet = false;
    m_is_wrapper_request_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_wrap_package_url_isSet = false;
    m_wrap_package_url_isValid = false;
}

void OAIPatchReleaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchReleaseRequest::fromJsonObject(QJsonObject json) {

    m_dest_publish_id_isValid = ::OpenAPI::fromJsonValue(m_dest_publish_id, json[QString("dest_publish_id")]);
    m_dest_publish_id_isSet = !json[QString("dest_publish_id")].isNull() && m_dest_publish_id_isValid;

    m_error_context_id_isValid = ::OpenAPI::fromJsonValue(m_error_context_id, json[QString("error_contextId")]);
    m_error_context_id_isSet = !json[QString("error_contextId")].isNull() && m_error_context_id_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("error_details")]);
    m_error_details_isSet = !json[QString("error_details")].isNull() && m_error_details_isValid;

    m_is_wrapper_request_isValid = ::OpenAPI::fromJsonValue(m_is_wrapper_request, json[QString("is_wrapper_request")]);
    m_is_wrapper_request_isSet = !json[QString("is_wrapper_request")].isNull() && m_is_wrapper_request_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_wrap_package_url_isValid = ::OpenAPI::fromJsonValue(m_wrap_package_url, json[QString("wrap_package_url")]);
    m_wrap_package_url_isSet = !json[QString("wrap_package_url")].isNull() && m_wrap_package_url_isValid;
}

QString OAIPatchReleaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchReleaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dest_publish_id_isSet) {
        obj.insert(QString("dest_publish_id"), ::OpenAPI::toJsonValue(m_dest_publish_id));
    }
    if (m_error_context_id_isSet) {
        obj.insert(QString("error_contextId"), ::OpenAPI::toJsonValue(m_error_context_id));
    }
    if (m_error_details_isSet) {
        obj.insert(QString("error_details"), ::OpenAPI::toJsonValue(m_error_details));
    }
    if (m_is_wrapper_request_isSet) {
        obj.insert(QString("is_wrapper_request"), ::OpenAPI::toJsonValue(m_is_wrapper_request));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_wrap_package_url_isSet) {
        obj.insert(QString("wrap_package_url"), ::OpenAPI::toJsonValue(m_wrap_package_url));
    }
    return obj;
}

QString OAIPatchReleaseRequest::getDestPublishId() const {
    return m_dest_publish_id;
}
void OAIPatchReleaseRequest::setDestPublishId(const QString &dest_publish_id) {
    m_dest_publish_id = dest_publish_id;
    m_dest_publish_id_isSet = true;
}

bool OAIPatchReleaseRequest::is_dest_publish_id_Set() const{
    return m_dest_publish_id_isSet;
}

bool OAIPatchReleaseRequest::is_dest_publish_id_Valid() const{
    return m_dest_publish_id_isValid;
}

QString OAIPatchReleaseRequest::getErrorContextId() const {
    return m_error_context_id;
}
void OAIPatchReleaseRequest::setErrorContextId(const QString &error_context_id) {
    m_error_context_id = error_context_id;
    m_error_context_id_isSet = true;
}

bool OAIPatchReleaseRequest::is_error_context_id_Set() const{
    return m_error_context_id_isSet;
}

bool OAIPatchReleaseRequest::is_error_context_id_Valid() const{
    return m_error_context_id_isValid;
}

QString OAIPatchReleaseRequest::getErrorDetails() const {
    return m_error_details;
}
void OAIPatchReleaseRequest::setErrorDetails(const QString &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIPatchReleaseRequest::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIPatchReleaseRequest::is_error_details_Valid() const{
    return m_error_details_isValid;
}

bool OAIPatchReleaseRequest::isIsWrapperRequest() const {
    return m_is_wrapper_request;
}
void OAIPatchReleaseRequest::setIsWrapperRequest(const bool &is_wrapper_request) {
    m_is_wrapper_request = is_wrapper_request;
    m_is_wrapper_request_isSet = true;
}

bool OAIPatchReleaseRequest::is_is_wrapper_request_Set() const{
    return m_is_wrapper_request_isSet;
}

bool OAIPatchReleaseRequest::is_is_wrapper_request_Valid() const{
    return m_is_wrapper_request_isValid;
}

QString OAIPatchReleaseRequest::getStatus() const {
    return m_status;
}
void OAIPatchReleaseRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPatchReleaseRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPatchReleaseRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPatchReleaseRequest::getWrapPackageUrl() const {
    return m_wrap_package_url;
}
void OAIPatchReleaseRequest::setWrapPackageUrl(const QString &wrap_package_url) {
    m_wrap_package_url = wrap_package_url;
    m_wrap_package_url_isSet = true;
}

bool OAIPatchReleaseRequest::is_wrap_package_url_Set() const{
    return m_wrap_package_url_isSet;
}

bool OAIPatchReleaseRequest::is_wrap_package_url_Valid() const{
    return m_wrap_package_url_isValid;
}

bool OAIPatchReleaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dest_publish_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_wrapper_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrap_package_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchReleaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
