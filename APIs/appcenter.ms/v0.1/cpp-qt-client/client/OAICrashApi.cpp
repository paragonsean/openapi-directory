/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrashApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICrashApi::OAICrashApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICrashApi::~OAICrashApi() {
}

void OAICrashApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.appcenter.ms"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("crashGroupsGet", defaultConf);
    _serverIndices.insert("crashGroupsGet", 0);
    _serverConfigs.insert("crashGroupsGetStacktrace", defaultConf);
    _serverIndices.insert("crashGroupsGetStacktrace", 0);
    _serverConfigs.insert("crashGroupsList", defaultConf);
    _serverIndices.insert("crashGroupsList", 0);
    _serverConfigs.insert("crashGroupsUpdate", defaultConf);
    _serverIndices.insert("crashGroupsUpdate", 0);
    _serverConfigs.insert("crashesDelete", defaultConf);
    _serverIndices.insert("crashesDelete", 0);
    _serverConfigs.insert("crashesGet", defaultConf);
    _serverIndices.insert("crashesGet", 0);
    _serverConfigs.insert("crashesGetAppCrashesInfo", defaultConf);
    _serverIndices.insert("crashesGetAppCrashesInfo", 0);
    _serverConfigs.insert("crashesGetAppVersions", defaultConf);
    _serverIndices.insert("crashesGetAppVersions", 0);
    _serverConfigs.insert("crashesGetCrashAttachmentLocation", defaultConf);
    _serverIndices.insert("crashesGetCrashAttachmentLocation", 0);
    _serverConfigs.insert("crashesGetCrashTextAttachmentContent", defaultConf);
    _serverIndices.insert("crashesGetCrashTextAttachmentContent", 0);
    _serverConfigs.insert("crashesGetNativeCrash", defaultConf);
    _serverIndices.insert("crashesGetNativeCrash", 0);
    _serverConfigs.insert("crashesGetNativeCrashDownload", defaultConf);
    _serverIndices.insert("crashesGetNativeCrashDownload", 0);
    _serverConfigs.insert("crashesGetRawCrashLocation", defaultConf);
    _serverIndices.insert("crashesGetRawCrashLocation", 0);
    _serverConfigs.insert("crashesGetStacktrace", defaultConf);
    _serverIndices.insert("crashesGetStacktrace", 0);
    _serverConfigs.insert("crashesList", defaultConf);
    _serverIndices.insert("crashesList", 0);
    _serverConfigs.insert("crashesListAttachments", defaultConf);
    _serverIndices.insert("crashesListAttachments", 0);
    _serverConfigs.insert("missingSymbolGroupsGet", defaultConf);
    _serverIndices.insert("missingSymbolGroupsGet", 0);
    _serverConfigs.insert("missingSymbolGroupsInfo", defaultConf);
    _serverIndices.insert("missingSymbolGroupsInfo", 0);
    _serverConfigs.insert("missingSymbolGroupsList", defaultConf);
    _serverIndices.insert("missingSymbolGroupsList", 0);
    _serverConfigs.insert("symbolUploadsComplete", defaultConf);
    _serverIndices.insert("symbolUploadsComplete", 0);
    _serverConfigs.insert("symbolUploadsCreate", defaultConf);
    _serverIndices.insert("symbolUploadsCreate", 0);
    _serverConfigs.insert("symbolUploadsDelete", defaultConf);
    _serverIndices.insert("symbolUploadsDelete", 0);
    _serverConfigs.insert("symbolUploadsGet", defaultConf);
    _serverIndices.insert("symbolUploadsGet", 0);
    _serverConfigs.insert("symbolUploadsGetLocation", defaultConf);
    _serverIndices.insert("symbolUploadsGetLocation", 0);
    _serverConfigs.insert("symbolUploadsList", defaultConf);
    _serverIndices.insert("symbolUploadsList", 0);
    _serverConfigs.insert("symbolsGet", defaultConf);
    _serverIndices.insert("symbolsGet", 0);
    _serverConfigs.insert("symbolsGetLocation", defaultConf);
    _serverIndices.insert("symbolsGetLocation", 0);
    _serverConfigs.insert("symbolsGetStatus", defaultConf);
    _serverIndices.insert("symbolsGetStatus", 0);
    _serverConfigs.insert("symbolsIgnore", defaultConf);
    _serverIndices.insert("symbolsIgnore", 0);
    _serverConfigs.insert("symbolsList", defaultConf);
    _serverIndices.insert("symbolsList", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICrashApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICrashApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICrashApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICrashApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICrashApi::setUsername(const QString &username) {
    _username = username;
}

void OAICrashApi::setPassword(const QString &password) {
    _password = password;
}


void OAICrashApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICrashApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICrashApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICrashApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICrashApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICrashApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICrashApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICrashApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICrashApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICrashApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICrashApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICrashApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICrashApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICrashApi::crashGroupsGet(const QString &crash_group_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashGroupsGet"][_serverIndices.value("crashGroupsGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashGroupsGetCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashGroupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrashGroups_list_200_response_crash_groups_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashGroupsGetSignal(output);
        Q_EMIT crashGroupsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashGroupsGetSignalE(output, error_type, error_str);
        Q_EMIT crashGroupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashGroupsGetSignalError(output, error_type, error_str);
        Q_EMIT crashGroupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashGroupsGetStacktrace(const QString &crash_group_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &grouping_only) {
    QString fullPath = QString(_serverConfigs["crashGroupsGetStacktrace"][_serverIndices.value("crashGroupsGetStacktrace")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (grouping_only.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "grouping_only", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("grouping_only")).append(querySuffix).append(QUrl::toPercentEncoding(grouping_only.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashGroupsGetStacktraceCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashGroupsGetStacktraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStacktrace output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashGroupsGetStacktraceSignal(output);
        Q_EMIT crashGroupsGetStacktraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashGroupsGetStacktraceSignalE(output, error_type, error_str);
        Q_EMIT crashGroupsGetStacktraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashGroupsGetStacktraceSignalError(output, error_type, error_str);
        Q_EMIT crashGroupsGetStacktraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashGroupsList(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &last_occurrence_from, const ::OpenAPI::OptionalParam<QDateTime> &last_occurrence_to, const ::OpenAPI::OptionalParam<QString> &app_version, const ::OpenAPI::OptionalParam<QString> &group_type, const ::OpenAPI::OptionalParam<QString> &group_status, const ::OpenAPI::OptionalParam<QString> &group_text_search, const ::OpenAPI::OptionalParam<QString> &orderby, const ::OpenAPI::OptionalParam<QString> &continuation_token) {
    QString fullPath = QString(_serverConfigs["crashGroupsList"][_serverIndices.value("crashGroupsList")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (last_occurrence_from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "last_occurrence_from", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("last_occurrence_from")).append(querySuffix).append(QUrl::toPercentEncoding(last_occurrence_from.stringValue()));
    }
    if (last_occurrence_to.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "last_occurrence_to", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("last_occurrence_to")).append(querySuffix).append(QUrl::toPercentEncoding(last_occurrence_to.stringValue()));
    }
    if (app_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "app_version", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("app_version")).append(querySuffix).append(QUrl::toPercentEncoding(app_version.stringValue()));
    }
    if (group_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "group_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("group_type")).append(querySuffix).append(QUrl::toPercentEncoding(group_type.stringValue()));
    }
    if (group_status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "group_status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("group_status")).append(querySuffix).append(QUrl::toPercentEncoding(group_status.stringValue()));
    }
    if (group_text_search.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "group_text_search", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("group_text_search")).append(querySuffix).append(QUrl::toPercentEncoding(group_text_search.stringValue()));
    }
    if (orderby.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "$orderby", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("$orderby")).append(querySuffix).append(QUrl::toPercentEncoding(orderby.stringValue()));
    }
    if (continuation_token.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "continuation_token", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("continuation_token")).append(querySuffix).append(QUrl::toPercentEncoding(continuation_token.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashGroupsListCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashGroupsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrashGroups_list_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashGroupsListSignal(output);
        Q_EMIT crashGroupsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashGroupsListSignalE(output, error_type, error_str);
        Q_EMIT crashGroupsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashGroupsListSignalError(output, error_type, error_str);
        Q_EMIT crashGroupsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashGroupsUpdate(const QString &crash_group_id, const QString &owner_name, const QString &app_name, const OAICrashGroups_update_request &oai_crash_groups_update_request) {
    QString fullPath = QString(_serverConfigs["crashGroupsUpdate"][_serverIndices.value("crashGroupsUpdate")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_crash_groups_update_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashGroupsUpdateCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashGroupsUpdateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrashGroups_list_200_response_crash_groups_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashGroupsUpdateSignal(output);
        Q_EMIT crashGroupsUpdateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashGroupsUpdateSignalE(output, error_type, error_str);
        Q_EMIT crashGroupsUpdateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashGroupsUpdateSignalError(output, error_type, error_str);
        Q_EMIT crashGroupsUpdateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesDelete(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &retention_delete) {
    QString fullPath = QString(_serverConfigs["crashesDelete"][_serverIndices.value("crashesDelete")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (retention_delete.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "retention_delete", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("retention_delete")).append(querySuffix).append(QUrl::toPercentEncoding(retention_delete.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesDeleteCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrashes_delete_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesDeleteSignal(output);
        Q_EMIT crashesDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesDeleteSignalE(output, error_type, error_str);
        Q_EMIT crashesDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesDeleteSignalError(output, error_type, error_str);
        Q_EMIT crashesDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGet(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &include_report, const ::OpenAPI::OptionalParam<bool> &include_log, const ::OpenAPI::OptionalParam<bool> &include_details, const ::OpenAPI::OptionalParam<bool> &include_stacktrace, const ::OpenAPI::OptionalParam<bool> &grouping_only) {
    QString fullPath = QString(_serverConfigs["crashesGet"][_serverIndices.value("crashesGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include_report.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_report", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_report")).append(querySuffix).append(QUrl::toPercentEncoding(include_report.stringValue()));
    }
    if (include_log.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_log", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_log")).append(querySuffix).append(QUrl::toPercentEncoding(include_log.stringValue()));
    }
    if (include_details.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_details", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_details")).append(querySuffix).append(QUrl::toPercentEncoding(include_details.stringValue()));
    }
    if (include_stacktrace.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_stacktrace", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_stacktrace")).append(querySuffix).append(QUrl::toPercentEncoding(include_stacktrace.stringValue()));
    }
    if (grouping_only.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "grouping_only", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("grouping_only")).append(querySuffix).append(QUrl::toPercentEncoding(grouping_only.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrash output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetSignal(output);
        Q_EMIT crashesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetSignalE(output, error_type, error_str);
        Q_EMIT crashesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetSignalError(output, error_type, error_str);
        Q_EMIT crashesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetAppCrashesInfo(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesGetAppCrashesInfo"][_serverIndices.value("crashesGetAppCrashesInfo")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crashes_info");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetAppCrashesInfoCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetAppCrashesInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrashes_getAppCrashesInfo_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetAppCrashesInfoSignal(output);
        Q_EMIT crashesGetAppCrashesInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetAppCrashesInfoSignalE(output, error_type, error_str);
        Q_EMIT crashesGetAppCrashesInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetAppCrashesInfoSignalError(output, error_type, error_str);
        Q_EMIT crashesGetAppCrashesInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetAppVersions(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesGetAppVersions"][_serverIndices.value("crashesGetAppVersions")].URL()+"/v0.1/apps/{owner_name}/{app_name}/versions");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetAppVersionsCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetAppVersionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICrashes_getAppVersions_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICrashes_getAppVersions_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetAppVersionsSignal(output);
        Q_EMIT crashesGetAppVersionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetAppVersionsSignalE(output, error_type, error_str);
        Q_EMIT crashesGetAppVersionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetAppVersionsSignalError(output, error_type, error_str);
        Q_EMIT crashesGetAppVersionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetCrashAttachmentLocation(const QString &crash_id, const QString &attachment_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesGetCrashAttachmentLocation"][_serverIndices.value("crashesGetCrashAttachmentLocation")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetCrashAttachmentLocationCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetCrashAttachmentLocationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrashes_getCrashAttachmentLocation_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetCrashAttachmentLocationSignal(output);
        Q_EMIT crashesGetCrashAttachmentLocationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetCrashAttachmentLocationSignalE(output, error_type, error_str);
        Q_EMIT crashesGetCrashAttachmentLocationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetCrashAttachmentLocationSignalError(output, error_type, error_str);
        Q_EMIT crashesGetCrashAttachmentLocationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetCrashTextAttachmentContent(const QString &crash_id, const QString &attachment_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesGetCrashTextAttachmentContent"][_serverIndices.value("crashesGetCrashTextAttachmentContent")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetCrashTextAttachmentContentCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetCrashTextAttachmentContentCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetCrashTextAttachmentContentSignal(output);
        Q_EMIT crashesGetCrashTextAttachmentContentSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetCrashTextAttachmentContentSignalE(output, error_type, error_str);
        Q_EMIT crashesGetCrashTextAttachmentContentSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetCrashTextAttachmentContentSignalError(output, error_type, error_str);
        Q_EMIT crashesGetCrashTextAttachmentContentSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetNativeCrash(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesGetNativeCrash"][_serverIndices.value("crashesGetNativeCrash")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetNativeCrashCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetNativeCrashCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetNativeCrashSignal(output);
        Q_EMIT crashesGetNativeCrashSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetNativeCrashSignalE(output, error_type, error_str);
        Q_EMIT crashesGetNativeCrashSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetNativeCrashSignalError(output, error_type, error_str);
        Q_EMIT crashesGetNativeCrashSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetNativeCrashDownload(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesGetNativeCrashDownload"][_serverIndices.value("crashesGetNativeCrashDownload")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetNativeCrashDownloadCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetNativeCrashDownloadCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QString output;
    ::OpenAPI::fromStringValue(QString(worker->response), output);
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetNativeCrashDownloadSignal(output);
        Q_EMIT crashesGetNativeCrashDownloadSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetNativeCrashDownloadSignalE(output, error_type, error_str);
        Q_EMIT crashesGetNativeCrashDownloadSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetNativeCrashDownloadSignalError(output, error_type, error_str);
        Q_EMIT crashesGetNativeCrashDownloadSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetRawCrashLocation(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesGetRawCrashLocation"][_serverIndices.value("crashesGetRawCrashLocation")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetRawCrashLocationCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetRawCrashLocationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICrashes_getRawCrashLocation_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetRawCrashLocationSignal(output);
        Q_EMIT crashesGetRawCrashLocationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetRawCrashLocationSignalE(output, error_type, error_str);
        Q_EMIT crashesGetRawCrashLocationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetRawCrashLocationSignalError(output, error_type, error_str);
        Q_EMIT crashesGetRawCrashLocationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesGetStacktrace(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &grouping_only) {
    QString fullPath = QString(_serverConfigs["crashesGetStacktrace"][_serverIndices.value("crashesGetStacktrace")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (grouping_only.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "grouping_only", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("grouping_only")).append(querySuffix).append(QUrl::toPercentEncoding(grouping_only.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesGetStacktraceCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesGetStacktraceCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIStacktrace output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesGetStacktraceSignal(output);
        Q_EMIT crashesGetStacktraceSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesGetStacktraceSignalE(output, error_type, error_str);
        Q_EMIT crashesGetStacktraceSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesGetStacktraceSignalError(output, error_type, error_str);
        Q_EMIT crashesGetStacktraceSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesList(const QString &crash_group_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &include_report, const ::OpenAPI::OptionalParam<bool> &include_log, const ::OpenAPI::OptionalParam<QDateTime> &date_from, const ::OpenAPI::OptionalParam<QDateTime> &date_to, const ::OpenAPI::OptionalParam<QString> &app_version, const ::OpenAPI::OptionalParam<QString> &error_type) {
    QString fullPath = QString(_serverConfigs["crashesList"][_serverIndices.value("crashesList")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_group_idPathParam("{");
        crash_group_idPathParam.append("crash_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_group_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include_report.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_report", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_report")).append(querySuffix).append(QUrl::toPercentEncoding(include_report.stringValue()));
    }
    if (include_log.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_log", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_log")).append(querySuffix).append(QUrl::toPercentEncoding(include_log.stringValue()));
    }
    if (date_from.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "date_from", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("date_from")).append(querySuffix).append(QUrl::toPercentEncoding(date_from.stringValue()));
    }
    if (date_to.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "date_to", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("date_to")).append(querySuffix).append(QUrl::toPercentEncoding(date_to.stringValue()));
    }
    if (app_version.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "app_version", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("app_version")).append(querySuffix).append(QUrl::toPercentEncoding(app_version.stringValue()));
    }
    if (error_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "error_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("error_type")).append(querySuffix).append(QUrl::toPercentEncoding(error_type.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesListCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICrash> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICrash val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesListSignal(output);
        Q_EMIT crashesListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesListSignalE(output, error_type, error_str);
        Q_EMIT crashesListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesListSignalError(output, error_type, error_str);
        Q_EMIT crashesListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::crashesListAttachments(const QString &crash_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["crashesListAttachments"][_serverIndices.value("crashesListAttachments")].URL()+"/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString crash_idPathParam("{");
        crash_idPathParam.append("crash_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "crash_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"crash_id"+pathSuffix : pathPrefix;
        fullPath.replace(crash_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(crash_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::crashesListAttachmentsCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::crashesListAttachmentsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAICrashes_listAttachments_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAICrashes_listAttachments_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT crashesListAttachmentsSignal(output);
        Q_EMIT crashesListAttachmentsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT crashesListAttachmentsSignalE(output, error_type, error_str);
        Q_EMIT crashesListAttachmentsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT crashesListAttachmentsSignalError(output, error_type, error_str);
        Q_EMIT crashesListAttachmentsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::missingSymbolGroupsGet(const QString &symbol_group_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["missingSymbolGroupsGet"][_serverIndices.value("missingSymbolGroupsGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_group_idPathParam("{");
        symbol_group_idPathParam.append("symbol_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_group_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::missingSymbolGroupsGetCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::missingSymbolGroupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMissingSymbolGroups_list_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT missingSymbolGroupsGetSignal(output);
        Q_EMIT missingSymbolGroupsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT missingSymbolGroupsGetSignalE(output, error_type, error_str);
        Q_EMIT missingSymbolGroupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT missingSymbolGroupsGetSignalError(output, error_type, error_str);
        Q_EMIT missingSymbolGroupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::missingSymbolGroupsInfo(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["missingSymbolGroupsInfo"][_serverIndices.value("missingSymbolGroupsInfo")].URL()+"/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::missingSymbolGroupsInfoCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::missingSymbolGroupsInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMissingSymbolGroups_info_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT missingSymbolGroupsInfoSignal(output);
        Q_EMIT missingSymbolGroupsInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT missingSymbolGroupsInfoSignalE(output, error_type, error_str);
        Q_EMIT missingSymbolGroupsInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT missingSymbolGroupsInfoSignalError(output, error_type, error_str);
        Q_EMIT missingSymbolGroupsInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::missingSymbolGroupsList(const qint32 &top, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["missingSymbolGroupsList"][_serverIndices.value("missingSymbolGroupsList")].URL()+"/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "top", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("top")).append(querySuffix).append(QUrl::toPercentEncoding(top));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::missingSymbolGroupsListCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::missingSymbolGroupsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIMissingSymbolGroups_list_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT missingSymbolGroupsListSignal(output);
        Q_EMIT missingSymbolGroupsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT missingSymbolGroupsListSignalE(output, error_type, error_str);
        Q_EMIT missingSymbolGroupsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT missingSymbolGroupsListSignalError(output, error_type, error_str);
        Q_EMIT missingSymbolGroupsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolUploadsComplete(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name, const OAISymbolUploads_complete_request &oai_symbol_uploads_complete_request) {
    QString fullPath = QString(_serverConfigs["symbolUploadsComplete"][_serverIndices.value("symbolUploadsComplete")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_upload_idPathParam("{");
        symbol_upload_idPathParam.append("symbol_upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_upload_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_symbol_uploads_complete_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolUploadsCompleteCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolUploadsCompleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbolUploads_list_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolUploadsCompleteSignal(output);
        Q_EMIT symbolUploadsCompleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolUploadsCompleteSignalE(output, error_type, error_str);
        Q_EMIT symbolUploadsCompleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolUploadsCompleteSignalError(output, error_type, error_str);
        Q_EMIT symbolUploadsCompleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolUploadsCreate(const QString &owner_name, const QString &app_name, const OAISymbolUploads_create_request &oai_symbol_uploads_create_request) {
    QString fullPath = QString(_serverConfigs["symbolUploadsCreate"][_serverIndices.value("symbolUploadsCreate")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbol_uploads");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_symbol_uploads_create_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolUploadsCreateCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolUploadsCreateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbolUploads_create_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolUploadsCreateSignal(output);
        Q_EMIT symbolUploadsCreateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolUploadsCreateSignalE(output, error_type, error_str);
        Q_EMIT symbolUploadsCreateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolUploadsCreateSignalError(output, error_type, error_str);
        Q_EMIT symbolUploadsCreateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolUploadsDelete(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolUploadsDelete"][_serverIndices.value("symbolUploadsDelete")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_upload_idPathParam("{");
        symbol_upload_idPathParam.append("symbol_upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_upload_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolUploadsDeleteCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolUploadsDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbolUploads_list_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolUploadsDeleteSignal(output);
        Q_EMIT symbolUploadsDeleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolUploadsDeleteSignalE(output, error_type, error_str);
        Q_EMIT symbolUploadsDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolUploadsDeleteSignalError(output, error_type, error_str);
        Q_EMIT symbolUploadsDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolUploadsGet(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolUploadsGet"][_serverIndices.value("symbolUploadsGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_upload_idPathParam("{");
        symbol_upload_idPathParam.append("symbol_upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_upload_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolUploadsGetCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolUploadsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbolUploads_list_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolUploadsGetSignal(output);
        Q_EMIT symbolUploadsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolUploadsGetSignalE(output, error_type, error_str);
        Q_EMIT symbolUploadsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolUploadsGetSignalError(output, error_type, error_str);
        Q_EMIT symbolUploadsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolUploadsGetLocation(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolUploadsGetLocation"][_serverIndices.value("symbolUploadsGetLocation")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_upload_idPathParam("{");
        symbol_upload_idPathParam.append("symbol_upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_upload_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolUploadsGetLocationCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolUploadsGetLocationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbolUploads_getLocation_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolUploadsGetLocationSignal(output);
        Q_EMIT symbolUploadsGetLocationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolUploadsGetLocationSignalE(output, error_type, error_str);
        Q_EMIT symbolUploadsGetLocationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolUploadsGetLocationSignalError(output, error_type, error_str);
        Q_EMIT symbolUploadsGetLocationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolUploadsList(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<qint64> &top, const ::OpenAPI::OptionalParam<QString> &status, const ::OpenAPI::OptionalParam<QString> &symbol_type) {
    QString fullPath = QString(_serverConfigs["symbolUploadsList"][_serverIndices.value("symbolUploadsList")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbol_uploads");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (top.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "top", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("top")).append(querySuffix).append(QUrl::toPercentEncoding(top.stringValue()));
    }
    if (status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status")).append(querySuffix).append(QUrl::toPercentEncoding(status.stringValue()));
    }
    if (symbol_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "symbol_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("symbol_type")).append(querySuffix).append(QUrl::toPercentEncoding(symbol_type.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolUploadsListCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolUploadsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISymbolUploads_list_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISymbolUploads_list_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolUploadsListSignal(output);
        Q_EMIT symbolUploadsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolUploadsListSignalE(output, error_type, error_str);
        Q_EMIT symbolUploadsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolUploadsListSignalError(output, error_type, error_str);
        Q_EMIT symbolUploadsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolsGet(const QString &symbol_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolsGet"][_serverIndices.value("symbolsGet")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_idPathParam("{");
        symbol_idPathParam.append("symbol_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolsGetCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbols_list_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolsGetSignal(output);
        Q_EMIT symbolsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolsGetSignalE(output, error_type, error_str);
        Q_EMIT symbolsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolsGetSignalError(output, error_type, error_str);
        Q_EMIT symbolsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolsGetLocation(const QString &symbol_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolsGetLocation"][_serverIndices.value("symbolsGetLocation")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_idPathParam("{");
        symbol_idPathParam.append("symbol_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolsGetLocationCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolsGetLocationCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbols_getLocation_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolsGetLocationSignal(output);
        Q_EMIT symbolsGetLocationSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolsGetLocationSignalE(output, error_type, error_str);
        Q_EMIT symbolsGetLocationSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolsGetLocationSignalError(output, error_type, error_str);
        Q_EMIT symbolsGetLocationSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolsGetStatus(const QString &symbol_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolsGetStatus"][_serverIndices.value("symbolsGetStatus")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_idPathParam("{");
        symbol_idPathParam.append("symbol_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolsGetStatusCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolsGetStatusCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbols_getStatus_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolsGetStatusSignal(output);
        Q_EMIT symbolsGetStatusSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolsGetStatusSignalE(output, error_type, error_str);
        Q_EMIT symbolsGetStatusSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolsGetStatusSignalError(output, error_type, error_str);
        Q_EMIT symbolsGetStatusSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolsIgnore(const QString &symbol_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolsIgnore"][_serverIndices.value("symbolsIgnore")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString symbol_idPathParam("{");
        symbol_idPathParam.append("symbol_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "symbol_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"symbol_id"+pathSuffix : pathPrefix;
        fullPath.replace(symbol_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(symbol_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolsIgnoreCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolsIgnoreCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISymbols_list_200_response_inner output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolsIgnoreSignal(output);
        Q_EMIT symbolsIgnoreSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolsIgnoreSignalE(output, error_type, error_str);
        Q_EMIT symbolsIgnoreSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolsIgnoreSignalError(output, error_type, error_str);
        Q_EMIT symbolsIgnoreSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::symbolsList(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["symbolsList"][_serverIndices.value("symbolsList")].URL()+"/v0.1/apps/{owner_name}/{app_name}/symbols");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICrashApi::symbolsListCallback);
    connect(this, &OAICrashApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICrashApi::symbolsListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAISymbols_list_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAISymbols_list_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT symbolsListSignal(output);
        Q_EMIT symbolsListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT symbolsListSignalE(output, error_type, error_str);
        Q_EMIT symbolsListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT symbolsListSignalError(output, error_type, error_str);
        Q_EMIT symbolsListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICrashApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
