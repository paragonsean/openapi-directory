/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitHubBranchLite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitHubBranchLite::OAIGitHubBranchLite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitHubBranchLite::OAIGitHubBranchLite() {
    this->initializeModel();
}

OAIGitHubBranchLite::~OAIGitHubBranchLite() {}

void OAIGitHubBranchLite::initializeModel() {

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;
}

void OAIGitHubBranchLite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitHubBranchLite::fromJsonObject(QJsonObject json) {

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;
}

QString OAIGitHubBranchLite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitHubBranchLite::asJsonObject() const {
    QJsonObject obj;
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_repo.isSet()) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    return obj;
}

QString OAIGitHubBranchLite::getRef() const {
    return m_ref;
}
void OAIGitHubBranchLite::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIGitHubBranchLite::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIGitHubBranchLite::is_ref_Valid() const{
    return m_ref_isValid;
}

OAIGitHubBranchLite_repo OAIGitHubBranchLite::getRepo() const {
    return m_repo;
}
void OAIGitHubBranchLite::setRepo(const OAIGitHubBranchLite_repo &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIGitHubBranchLite::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIGitHubBranchLite::is_repo_Valid() const{
    return m_repo_isValid;
}

QString OAIGitHubBranchLite::getSha() const {
    return m_sha;
}
void OAIGitHubBranchLite::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIGitHubBranchLite::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIGitHubBranchLite::is_sha_Valid() const{
    return m_sha_isValid;
}

bool OAIGitHubBranchLite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitHubBranchLite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
