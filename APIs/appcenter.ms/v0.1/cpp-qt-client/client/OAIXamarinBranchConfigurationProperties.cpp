/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXamarinBranchConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXamarinBranchConfigurationProperties::OAIXamarinBranchConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXamarinBranchConfigurationProperties::OAIXamarinBranchConfigurationProperties() {
    this->initializeModel();
}

OAIXamarinBranchConfigurationProperties::~OAIXamarinBranchConfigurationProperties() {}

void OAIXamarinBranchConfigurationProperties::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_is_sim_build_isSet = false;
    m_is_sim_build_isValid = false;

    m_mono_version_isSet = false;
    m_mono_version_isValid = false;

    m_p12_file_isSet = false;
    m_p12_file_isValid = false;

    m_p12_pwd_isSet = false;
    m_p12_pwd_isValid = false;

    m_prov_profile_isSet = false;
    m_prov_profile_isValid = false;

    m_sdk_bundle_isSet = false;
    m_sdk_bundle_isValid = false;

    m_sln_path_isSet = false;
    m_sln_path_isValid = false;

    m_symlink_isSet = false;
    m_symlink_isValid = false;
}

void OAIXamarinBranchConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXamarinBranchConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_is_sim_build_isValid = ::OpenAPI::fromJsonValue(m_is_sim_build, json[QString("isSimBuild")]);
    m_is_sim_build_isSet = !json[QString("isSimBuild")].isNull() && m_is_sim_build_isValid;

    m_mono_version_isValid = ::OpenAPI::fromJsonValue(m_mono_version, json[QString("monoVersion")]);
    m_mono_version_isSet = !json[QString("monoVersion")].isNull() && m_mono_version_isValid;

    m_p12_file_isValid = ::OpenAPI::fromJsonValue(m_p12_file, json[QString("p12File")]);
    m_p12_file_isSet = !json[QString("p12File")].isNull() && m_p12_file_isValid;

    m_p12_pwd_isValid = ::OpenAPI::fromJsonValue(m_p12_pwd, json[QString("p12Pwd")]);
    m_p12_pwd_isSet = !json[QString("p12Pwd")].isNull() && m_p12_pwd_isValid;

    m_prov_profile_isValid = ::OpenAPI::fromJsonValue(m_prov_profile, json[QString("provProfile")]);
    m_prov_profile_isSet = !json[QString("provProfile")].isNull() && m_prov_profile_isValid;

    m_sdk_bundle_isValid = ::OpenAPI::fromJsonValue(m_sdk_bundle, json[QString("sdkBundle")]);
    m_sdk_bundle_isSet = !json[QString("sdkBundle")].isNull() && m_sdk_bundle_isValid;

    m_sln_path_isValid = ::OpenAPI::fromJsonValue(m_sln_path, json[QString("slnPath")]);
    m_sln_path_isSet = !json[QString("slnPath")].isNull() && m_sln_path_isValid;

    m_symlink_isValid = ::OpenAPI::fromJsonValue(m_symlink, json[QString("symlink")]);
    m_symlink_isSet = !json[QString("symlink")].isNull() && m_symlink_isValid;
}

QString OAIXamarinBranchConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXamarinBranchConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_args_isSet) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_configuration_isSet) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_is_sim_build_isSet) {
        obj.insert(QString("isSimBuild"), ::OpenAPI::toJsonValue(m_is_sim_build));
    }
    if (m_mono_version_isSet) {
        obj.insert(QString("monoVersion"), ::OpenAPI::toJsonValue(m_mono_version));
    }
    if (m_p12_file_isSet) {
        obj.insert(QString("p12File"), ::OpenAPI::toJsonValue(m_p12_file));
    }
    if (m_p12_pwd_isSet) {
        obj.insert(QString("p12Pwd"), ::OpenAPI::toJsonValue(m_p12_pwd));
    }
    if (m_prov_profile_isSet) {
        obj.insert(QString("provProfile"), ::OpenAPI::toJsonValue(m_prov_profile));
    }
    if (m_sdk_bundle_isSet) {
        obj.insert(QString("sdkBundle"), ::OpenAPI::toJsonValue(m_sdk_bundle));
    }
    if (m_sln_path_isSet) {
        obj.insert(QString("slnPath"), ::OpenAPI::toJsonValue(m_sln_path));
    }
    if (m_symlink_isSet) {
        obj.insert(QString("symlink"), ::OpenAPI::toJsonValue(m_symlink));
    }
    return obj;
}

QString OAIXamarinBranchConfigurationProperties::getArgs() const {
    return m_args;
}
void OAIXamarinBranchConfigurationProperties::setArgs(const QString &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_args_Set() const{
    return m_args_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_args_Valid() const{
    return m_args_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getConfiguration() const {
    return m_configuration;
}
void OAIXamarinBranchConfigurationProperties::setConfiguration(const QString &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIXamarinBranchConfigurationProperties::isIsSimBuild() const {
    return m_is_sim_build;
}
void OAIXamarinBranchConfigurationProperties::setIsSimBuild(const bool &is_sim_build) {
    m_is_sim_build = is_sim_build;
    m_is_sim_build_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_is_sim_build_Set() const{
    return m_is_sim_build_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_is_sim_build_Valid() const{
    return m_is_sim_build_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getMonoVersion() const {
    return m_mono_version;
}
void OAIXamarinBranchConfigurationProperties::setMonoVersion(const QString &mono_version) {
    m_mono_version = mono_version;
    m_mono_version_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_mono_version_Set() const{
    return m_mono_version_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_mono_version_Valid() const{
    return m_mono_version_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getP12File() const {
    return m_p12_file;
}
void OAIXamarinBranchConfigurationProperties::setP12File(const QString &p12_file) {
    m_p12_file = p12_file;
    m_p12_file_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_p12_file_Set() const{
    return m_p12_file_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_p12_file_Valid() const{
    return m_p12_file_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getP12Pwd() const {
    return m_p12_pwd;
}
void OAIXamarinBranchConfigurationProperties::setP12Pwd(const QString &p12_pwd) {
    m_p12_pwd = p12_pwd;
    m_p12_pwd_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_p12_pwd_Set() const{
    return m_p12_pwd_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_p12_pwd_Valid() const{
    return m_p12_pwd_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getProvProfile() const {
    return m_prov_profile;
}
void OAIXamarinBranchConfigurationProperties::setProvProfile(const QString &prov_profile) {
    m_prov_profile = prov_profile;
    m_prov_profile_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_prov_profile_Set() const{
    return m_prov_profile_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_prov_profile_Valid() const{
    return m_prov_profile_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getSdkBundle() const {
    return m_sdk_bundle;
}
void OAIXamarinBranchConfigurationProperties::setSdkBundle(const QString &sdk_bundle) {
    m_sdk_bundle = sdk_bundle;
    m_sdk_bundle_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_sdk_bundle_Set() const{
    return m_sdk_bundle_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_sdk_bundle_Valid() const{
    return m_sdk_bundle_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getSlnPath() const {
    return m_sln_path;
}
void OAIXamarinBranchConfigurationProperties::setSlnPath(const QString &sln_path) {
    m_sln_path = sln_path;
    m_sln_path_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_sln_path_Set() const{
    return m_sln_path_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_sln_path_Valid() const{
    return m_sln_path_isValid;
}

QString OAIXamarinBranchConfigurationProperties::getSymlink() const {
    return m_symlink;
}
void OAIXamarinBranchConfigurationProperties::setSymlink(const QString &symlink) {
    m_symlink = symlink;
    m_symlink_isSet = true;
}

bool OAIXamarinBranchConfigurationProperties::is_symlink_Set() const{
    return m_symlink_isSet;
}

bool OAIXamarinBranchConfigurationProperties::is_symlink_Valid() const{
    return m_symlink_isValid;
}

bool OAIXamarinBranchConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_sim_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mono_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p12_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p12_pwd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prov_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_bundle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sln_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symlink_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXamarinBranchConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
