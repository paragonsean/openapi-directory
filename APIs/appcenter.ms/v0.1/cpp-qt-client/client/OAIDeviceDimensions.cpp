/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceDimensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceDimensions::OAIDeviceDimensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceDimensions::OAIDeviceDimensions() {
    this->initializeModel();
}

OAIDeviceDimensions::~OAIDeviceDimensions() {}

void OAIDeviceDimensions::initializeModel() {

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIDeviceDimensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceDimensions::fromJsonObject(QJsonObject json) {

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIDeviceDimensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceDimensions::asJsonObject() const {
    QJsonObject obj;
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

OAIObject OAIDeviceDimensions::getDepth() const {
    return m_depth;
}
void OAIDeviceDimensions::setDepth(const OAIObject &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAIDeviceDimensions::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAIDeviceDimensions::is_depth_Valid() const{
    return m_depth_isValid;
}

OAIObject OAIDeviceDimensions::getHeight() const {
    return m_height;
}
void OAIDeviceDimensions::setHeight(const OAIObject &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIDeviceDimensions::is_height_Set() const{
    return m_height_isSet;
}

bool OAIDeviceDimensions::is_height_Valid() const{
    return m_height_isValid;
}

OAIObject OAIDeviceDimensions::getWidth() const {
    return m_width;
}
void OAIDeviceDimensions::setWidth(const OAIObject &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIDeviceDimensions::is_width_Set() const{
    return m_width_isSet;
}

bool OAIDeviceDimensions::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIDeviceDimensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceDimensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
