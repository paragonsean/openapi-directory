/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResignAttemptResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResignAttemptResponse::OAIResignAttemptResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResignAttemptResponse::OAIResignAttemptResponse() {
    this->initializeModel();
}

OAIResignAttemptResponse::~OAIResignAttemptResponse() {}

void OAIResignAttemptResponse::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_context_id_isSet = false;
    m_context_id_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_original_release_id_isSet = false;
    m_original_release_id_isValid = false;

    m_resign_id_isSet = false;
    m_resign_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIResignAttemptResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResignAttemptResponse::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_context_id_isValid = ::OpenAPI::fromJsonValue(m_context_id, json[QString("contextId")]);
    m_context_id_isSet = !json[QString("contextId")].isNull() && m_context_id_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_original_release_id_isValid = ::OpenAPI::fromJsonValue(m_original_release_id, json[QString("originalReleaseId")]);
    m_original_release_id_isSet = !json[QString("originalReleaseId")].isNull() && m_original_release_id_isValid;

    m_resign_id_isValid = ::OpenAPI::fromJsonValue(m_resign_id, json[QString("resignId")]);
    m_resign_id_isSet = !json[QString("resignId")].isNull() && m_resign_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIResignAttemptResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResignAttemptResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_context_id_isSet) {
        obj.insert(QString("contextId"), ::OpenAPI::toJsonValue(m_context_id));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_original_release_id_isSet) {
        obj.insert(QString("originalReleaseId"), ::OpenAPI::toJsonValue(m_original_release_id));
    }
    if (m_resign_id_isSet) {
        obj.insert(QString("resignId"), ::OpenAPI::toJsonValue(m_resign_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIResignAttemptResponse::getAppId() const {
    return m_app_id;
}
void OAIResignAttemptResponse::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIResignAttemptResponse::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIResignAttemptResponse::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIResignAttemptResponse::getContextId() const {
    return m_context_id;
}
void OAIResignAttemptResponse::setContextId(const QString &context_id) {
    m_context_id = context_id;
    m_context_id_isSet = true;
}

bool OAIResignAttemptResponse::is_context_id_Set() const{
    return m_context_id_isSet;
}

bool OAIResignAttemptResponse::is_context_id_Valid() const{
    return m_context_id_isValid;
}

QList<OAIObject> OAIResignAttemptResponse::getDestinations() const {
    return m_destinations;
}
void OAIResignAttemptResponse::setDestinations(const QList<OAIObject> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIResignAttemptResponse::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIResignAttemptResponse::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAIResignAttemptResponse::getErrorCode() const {
    return m_error_code;
}
void OAIResignAttemptResponse::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIResignAttemptResponse::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIResignAttemptResponse::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIResignAttemptResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIResignAttemptResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIResignAttemptResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIResignAttemptResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

double OAIResignAttemptResponse::getOriginalReleaseId() const {
    return m_original_release_id;
}
void OAIResignAttemptResponse::setOriginalReleaseId(const double &original_release_id) {
    m_original_release_id = original_release_id;
    m_original_release_id_isSet = true;
}

bool OAIResignAttemptResponse::is_original_release_id_Set() const{
    return m_original_release_id_isSet;
}

bool OAIResignAttemptResponse::is_original_release_id_Valid() const{
    return m_original_release_id_isValid;
}

QString OAIResignAttemptResponse::getResignId() const {
    return m_resign_id;
}
void OAIResignAttemptResponse::setResignId(const QString &resign_id) {
    m_resign_id = resign_id;
    m_resign_id_isSet = true;
}

bool OAIResignAttemptResponse::is_resign_id_Set() const{
    return m_resign_id_isSet;
}

bool OAIResignAttemptResponse::is_resign_id_Valid() const{
    return m_resign_id_isValid;
}

double OAIResignAttemptResponse::getStartTime() const {
    return m_start_time;
}
void OAIResignAttemptResponse::setStartTime(const double &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIResignAttemptResponse::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIResignAttemptResponse::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIResignAttemptResponse::getStatus() const {
    return m_status;
}
void OAIResignAttemptResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResignAttemptResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResignAttemptResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIResignAttemptResponse::getUserId() const {
    return m_user_id;
}
void OAIResignAttemptResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIResignAttemptResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIResignAttemptResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIResignAttemptResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_release_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResignAttemptResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_context_id_isValid && m_original_release_id_isValid && m_resign_id_isValid && m_start_time_isValid && m_status_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
