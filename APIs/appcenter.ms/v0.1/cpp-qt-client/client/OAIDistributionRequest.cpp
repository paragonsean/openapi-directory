/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionRequest::OAIDistributionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionRequest::OAIDistributionRequest() {
    this->initializeModel();
}

OAIDistributionRequest::~OAIDistributionRequest() {}

void OAIDistributionRequest::initializeModel() {

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_mandatory_update_isSet = false;
    m_mandatory_update_isValid = false;

    m_notify_testers_isSet = false;
    m_notify_testers_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;
}

void OAIDistributionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionRequest::fromJsonObject(QJsonObject json) {

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_mandatory_update_isValid = ::OpenAPI::fromJsonValue(m_mandatory_update, json[QString("mandatoryUpdate")]);
    m_mandatory_update_isSet = !json[QString("mandatoryUpdate")].isNull() && m_mandatory_update_isValid;

    m_notify_testers_isValid = ::OpenAPI::fromJsonValue(m_notify_testers, json[QString("notifyTesters")]);
    m_notify_testers_isSet = !json[QString("notifyTesters")].isNull() && m_notify_testers_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("releaseNotes")]);
    m_release_notes_isSet = !json[QString("releaseNotes")].isNull() && m_release_notes_isValid;
}

QString OAIDistributionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_mandatory_update_isSet) {
        obj.insert(QString("mandatoryUpdate"), ::OpenAPI::toJsonValue(m_mandatory_update));
    }
    if (m_notify_testers_isSet) {
        obj.insert(QString("notifyTesters"), ::OpenAPI::toJsonValue(m_notify_testers));
    }
    if (m_release_notes_isSet) {
        obj.insert(QString("releaseNotes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    return obj;
}

QList<OAIBuilds_distribute_request_destinations_inner> OAIDistributionRequest::getDestinations() const {
    return m_destinations;
}
void OAIDistributionRequest::setDestinations(const QList<OAIBuilds_distribute_request_destinations_inner> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIDistributionRequest::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIDistributionRequest::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAIDistributionRequest::isMandatoryUpdate() const {
    return m_mandatory_update;
}
void OAIDistributionRequest::setMandatoryUpdate(const bool &mandatory_update) {
    m_mandatory_update = mandatory_update;
    m_mandatory_update_isSet = true;
}

bool OAIDistributionRequest::is_mandatory_update_Set() const{
    return m_mandatory_update_isSet;
}

bool OAIDistributionRequest::is_mandatory_update_Valid() const{
    return m_mandatory_update_isValid;
}

bool OAIDistributionRequest::isNotifyTesters() const {
    return m_notify_testers;
}
void OAIDistributionRequest::setNotifyTesters(const bool &notify_testers) {
    m_notify_testers = notify_testers;
    m_notify_testers_isSet = true;
}

bool OAIDistributionRequest::is_notify_testers_Set() const{
    return m_notify_testers_isSet;
}

bool OAIDistributionRequest::is_notify_testers_Valid() const{
    return m_notify_testers_isValid;
}

QString OAIDistributionRequest::getReleaseNotes() const {
    return m_release_notes;
}
void OAIDistributionRequest::setReleaseNotes(const QString &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAIDistributionRequest::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAIDistributionRequest::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

bool OAIDistributionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_testers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
