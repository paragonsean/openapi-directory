/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlertingApi_H
#define OAI_OAIAlertingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBugTracker_getRepoIssueFromCrash_200_response.h"
#include "OAIBugtracker_getSettings_200_response.h"
#include "OAIBugtracker_getSettings_default_response.h"
#include "OAINotifications_getAppEmailSettings_200_response.h"
#include "OAINotifications_getUserEmailSettings_200_response.h"
#include "OAIWebhooks_list_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlertingApi : public QObject {
    Q_OBJECT

public:
    OAIAlertingApi(const int timeOut = 0);
    ~OAIAlertingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void bugTrackerGetRepoIssueFromCrash(const QString &crash_group_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void bugtrackerGetSettings(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void notificationsGetAppEmailSettings(const QString &owner_name, const QString &app_name);


    virtual void notificationsGetUserEmailSettings();

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void webhooksList(const QString &owner_name, const QString &app_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void bugTrackerGetRepoIssueFromCrashCallback(OAIHttpRequestWorker *worker);
    void bugtrackerGetSettingsCallback(OAIHttpRequestWorker *worker);
    void notificationsGetAppEmailSettingsCallback(OAIHttpRequestWorker *worker);
    void notificationsGetUserEmailSettingsCallback(OAIHttpRequestWorker *worker);
    void webhooksListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void bugTrackerGetRepoIssueFromCrashSignal(OAIBugTracker_getRepoIssueFromCrash_200_response summary);
    void bugtrackerGetSettingsSignal(OAIBugtracker_getSettings_200_response summary);
    void notificationsGetAppEmailSettingsSignal(OAINotifications_getAppEmailSettings_200_response summary);
    void notificationsGetUserEmailSettingsSignal(OAINotifications_getUserEmailSettings_200_response summary);
    void webhooksListSignal(OAIWebhooks_list_200_response summary);


    void bugTrackerGetRepoIssueFromCrashSignalFull(OAIHttpRequestWorker *worker, OAIBugTracker_getRepoIssueFromCrash_200_response summary);
    void bugtrackerGetSettingsSignalFull(OAIHttpRequestWorker *worker, OAIBugtracker_getSettings_200_response summary);
    void notificationsGetAppEmailSettingsSignalFull(OAIHttpRequestWorker *worker, OAINotifications_getAppEmailSettings_200_response summary);
    void notificationsGetUserEmailSettingsSignalFull(OAIHttpRequestWorker *worker, OAINotifications_getUserEmailSettings_200_response summary);
    void webhooksListSignalFull(OAIHttpRequestWorker *worker, OAIWebhooks_list_200_response summary);

    Q_DECL_DEPRECATED_X("Use bugTrackerGetRepoIssueFromCrashSignalError() instead")
    void bugTrackerGetRepoIssueFromCrashSignalE(OAIBugTracker_getRepoIssueFromCrash_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bugTrackerGetRepoIssueFromCrashSignalError(OAIBugTracker_getRepoIssueFromCrash_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bugtrackerGetSettingsSignalError() instead")
    void bugtrackerGetSettingsSignalE(OAIBugtracker_getSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bugtrackerGetSettingsSignalError(OAIBugtracker_getSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsGetAppEmailSettingsSignalError() instead")
    void notificationsGetAppEmailSettingsSignalE(OAINotifications_getAppEmailSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetAppEmailSettingsSignalError(OAINotifications_getAppEmailSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsGetUserEmailSettingsSignalError() instead")
    void notificationsGetUserEmailSettingsSignalE(OAINotifications_getUserEmailSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetUserEmailSettingsSignalError(OAINotifications_getUserEmailSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksListSignalError() instead")
    void webhooksListSignalE(OAIWebhooks_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksListSignalError(OAIWebhooks_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use bugTrackerGetRepoIssueFromCrashSignalErrorFull() instead")
    void bugTrackerGetRepoIssueFromCrashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bugTrackerGetRepoIssueFromCrashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bugtrackerGetSettingsSignalErrorFull() instead")
    void bugtrackerGetSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bugtrackerGetSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsGetAppEmailSettingsSignalErrorFull() instead")
    void notificationsGetAppEmailSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetAppEmailSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsGetUserEmailSettingsSignalErrorFull() instead")
    void notificationsGetUserEmailSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetUserEmailSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webhooksListSignalErrorFull() instead")
    void webhooksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webhooksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
