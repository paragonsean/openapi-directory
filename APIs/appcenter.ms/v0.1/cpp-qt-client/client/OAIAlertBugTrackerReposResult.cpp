/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertBugTrackerReposResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertBugTrackerReposResult::OAIAlertBugTrackerReposResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertBugTrackerReposResult::OAIAlertBugTrackerReposResult() {
    this->initializeModel();
}

OAIAlertBugTrackerReposResult::~OAIAlertBugTrackerReposResult() {}

void OAIAlertBugTrackerReposResult::initializeModel() {

    m_repo_type_isSet = false;
    m_repo_type_isValid = false;

    m_repositories_isSet = false;
    m_repositories_isValid = false;
}

void OAIAlertBugTrackerReposResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertBugTrackerReposResult::fromJsonObject(QJsonObject json) {

    m_repo_type_isValid = ::OpenAPI::fromJsonValue(m_repo_type, json[QString("repo_type")]);
    m_repo_type_isSet = !json[QString("repo_type")].isNull() && m_repo_type_isValid;

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;
}

QString OAIAlertBugTrackerReposResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertBugTrackerReposResult::asJsonObject() const {
    QJsonObject obj;
    if (m_repo_type_isSet) {
        obj.insert(QString("repo_type"), ::OpenAPI::toJsonValue(m_repo_type));
    }
    if (m_repositories.size() > 0) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    return obj;
}

QString OAIAlertBugTrackerReposResult::getRepoType() const {
    return m_repo_type;
}
void OAIAlertBugTrackerReposResult::setRepoType(const QString &repo_type) {
    m_repo_type = repo_type;
    m_repo_type_isSet = true;
}

bool OAIAlertBugTrackerReposResult::is_repo_type_Set() const{
    return m_repo_type_isSet;
}

bool OAIAlertBugTrackerReposResult::is_repo_type_Valid() const{
    return m_repo_type_isValid;
}

QList<OAIAlertBugTrackerReposResult_repositories_inner> OAIAlertBugTrackerReposResult::getRepositories() const {
    return m_repositories;
}
void OAIAlertBugTrackerReposResult::setRepositories(const QList<OAIAlertBugTrackerReposResult_repositories_inner> &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIAlertBugTrackerReposResult::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIAlertBugTrackerReposResult::is_repositories_Valid() const{
    return m_repositories_isValid;
}

bool OAIAlertBugTrackerReposResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repo_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repositories.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertBugTrackerReposResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repositories_isValid && true;
}

} // namespace OpenAPI
