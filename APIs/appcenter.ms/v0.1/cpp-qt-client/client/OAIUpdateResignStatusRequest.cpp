/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateResignStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateResignStatusRequest::OAIUpdateResignStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateResignStatusRequest::OAIUpdateResignStatusRequest() {
    this->initializeModel();
}

OAIUpdateResignStatusRequest::~OAIUpdateResignStatusRequest() {}

void OAIUpdateResignStatusRequest::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_release_metadata_isSet = false;
    m_release_metadata_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateResignStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateResignStatusRequest::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_release_metadata_isValid = ::OpenAPI::fromJsonValue(m_release_metadata, json[QString("releaseMetadata")]);
    m_release_metadata_isSet = !json[QString("releaseMetadata")].isNull() && m_release_metadata_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIUpdateResignStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateResignStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_release_metadata_isSet) {
        obj.insert(QString("releaseMetadata"), ::OpenAPI::toJsonValue(m_release_metadata));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateResignStatusRequest::getErrorCode() const {
    return m_error_code;
}
void OAIUpdateResignStatusRequest::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIUpdateResignStatusRequest::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIUpdateResignStatusRequest::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIUpdateResignStatusRequest::getErrorMessage() const {
    return m_error_message;
}
void OAIUpdateResignStatusRequest::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIUpdateResignStatusRequest::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIUpdateResignStatusRequest::is_error_message_Valid() const{
    return m_error_message_isValid;
}

OAIObject OAIUpdateResignStatusRequest::getReleaseMetadata() const {
    return m_release_metadata;
}
void OAIUpdateResignStatusRequest::setReleaseMetadata(const OAIObject &release_metadata) {
    m_release_metadata = release_metadata;
    m_release_metadata_isSet = true;
}

bool OAIUpdateResignStatusRequest::is_release_metadata_Set() const{
    return m_release_metadata_isSet;
}

bool OAIUpdateResignStatusRequest::is_release_metadata_Valid() const{
    return m_release_metadata_isValid;
}

QString OAIUpdateResignStatusRequest::getStatus() const {
    return m_status;
}
void OAIUpdateResignStatusRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateResignStatusRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateResignStatusRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateResignStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateResignStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
