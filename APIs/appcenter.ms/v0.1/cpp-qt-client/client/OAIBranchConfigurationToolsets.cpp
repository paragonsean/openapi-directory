/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranchConfigurationToolsets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranchConfigurationToolsets::OAIBranchConfigurationToolsets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranchConfigurationToolsets::OAIBranchConfigurationToolsets() {
    this->initializeModel();
}

OAIBranchConfigurationToolsets::~OAIBranchConfigurationToolsets() {}

void OAIBranchConfigurationToolsets::initializeModel() {

    m_android_isSet = false;
    m_android_isValid = false;

    m_javascript_isSet = false;
    m_javascript_isValid = false;

    m_xamarin_isSet = false;
    m_xamarin_isValid = false;

    m_xcode_isSet = false;
    m_xcode_isValid = false;
}

void OAIBranchConfigurationToolsets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranchConfigurationToolsets::fromJsonObject(QJsonObject json) {

    m_android_isValid = ::OpenAPI::fromJsonValue(m_android, json[QString("android")]);
    m_android_isSet = !json[QString("android")].isNull() && m_android_isValid;

    m_javascript_isValid = ::OpenAPI::fromJsonValue(m_javascript, json[QString("javascript")]);
    m_javascript_isSet = !json[QString("javascript")].isNull() && m_javascript_isValid;

    m_xamarin_isValid = ::OpenAPI::fromJsonValue(m_xamarin, json[QString("xamarin")]);
    m_xamarin_isSet = !json[QString("xamarin")].isNull() && m_xamarin_isValid;

    m_xcode_isValid = ::OpenAPI::fromJsonValue(m_xcode, json[QString("xcode")]);
    m_xcode_isSet = !json[QString("xcode")].isNull() && m_xcode_isValid;
}

QString OAIBranchConfigurationToolsets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranchConfigurationToolsets::asJsonObject() const {
    QJsonObject obj;
    if (m_android.isSet()) {
        obj.insert(QString("android"), ::OpenAPI::toJsonValue(m_android));
    }
    if (m_javascript.isSet()) {
        obj.insert(QString("javascript"), ::OpenAPI::toJsonValue(m_javascript));
    }
    if (m_xamarin.isSet()) {
        obj.insert(QString("xamarin"), ::OpenAPI::toJsonValue(m_xamarin));
    }
    if (m_xcode.isSet()) {
        obj.insert(QString("xcode"), ::OpenAPI::toJsonValue(m_xcode));
    }
    return obj;
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_android OAIBranchConfigurationToolsets::getAndroid() const {
    return m_android;
}
void OAIBranchConfigurationToolsets::setAndroid(const OAIBranchConfigurations_get_200_response_allOf_toolsets_android &android) {
    m_android = android;
    m_android_isSet = true;
}

bool OAIBranchConfigurationToolsets::is_android_Set() const{
    return m_android_isSet;
}

bool OAIBranchConfigurationToolsets::is_android_Valid() const{
    return m_android_isValid;
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_javascript OAIBranchConfigurationToolsets::getJavascript() const {
    return m_javascript;
}
void OAIBranchConfigurationToolsets::setJavascript(const OAIBranchConfigurations_get_200_response_allOf_toolsets_javascript &javascript) {
    m_javascript = javascript;
    m_javascript_isSet = true;
}

bool OAIBranchConfigurationToolsets::is_javascript_Set() const{
    return m_javascript_isSet;
}

bool OAIBranchConfigurationToolsets::is_javascript_Valid() const{
    return m_javascript_isValid;
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_xamarin OAIBranchConfigurationToolsets::getXamarin() const {
    return m_xamarin;
}
void OAIBranchConfigurationToolsets::setXamarin(const OAIBranchConfigurations_get_200_response_allOf_toolsets_xamarin &xamarin) {
    m_xamarin = xamarin;
    m_xamarin_isSet = true;
}

bool OAIBranchConfigurationToolsets::is_xamarin_Set() const{
    return m_xamarin_isSet;
}

bool OAIBranchConfigurationToolsets::is_xamarin_Valid() const{
    return m_xamarin_isValid;
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode OAIBranchConfigurationToolsets::getXcode() const {
    return m_xcode;
}
void OAIBranchConfigurationToolsets::setXcode(const OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode &xcode) {
    m_xcode = xcode;
    m_xcode_isSet = true;
}

bool OAIBranchConfigurationToolsets::is_xcode_Set() const{
    return m_xcode_isSet;
}

bool OAIBranchConfigurationToolsets::is_xcode_Valid() const{
    return m_xcode_isValid;
}

bool OAIBranchConfigurationToolsets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_javascript.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xamarin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xcode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranchConfigurationToolsets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
