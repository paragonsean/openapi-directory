/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceSummary::OAIAudienceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceSummary::OAIAudienceSummary() {
    this->initializeModel();
}

OAIAudienceSummary::~OAIAudienceSummary() {}

void OAIAudienceSummary::initializeModel() {

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_estimated_count_isSet = false;
    m_estimated_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAudienceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceSummary::fromJsonObject(QJsonObject json) {

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_estimated_count_isValid = ::OpenAPI::fromJsonValue(m_estimated_count, json[QString("estimated_count")]);
    m_estimated_count_isSet = !json[QString("estimated_count")].isNull() && m_estimated_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAudienceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_estimated_count_isSet) {
        obj.insert(QString("estimated_count"), ::OpenAPI::toJsonValue(m_estimated_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAudienceSummary::getDefinition() const {
    return m_definition;
}
void OAIAudienceSummary::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIAudienceSummary::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIAudienceSummary::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIAudienceSummary::getDescription() const {
    return m_description;
}
void OAIAudienceSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAudienceSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAudienceSummary::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIAudienceSummary::getEstimatedCount() const {
    return m_estimated_count;
}
void OAIAudienceSummary::setEstimatedCount(const qint64 &estimated_count) {
    m_estimated_count = estimated_count;
    m_estimated_count_isSet = true;
}

bool OAIAudienceSummary::is_estimated_count_Set() const{
    return m_estimated_count_isSet;
}

bool OAIAudienceSummary::is_estimated_count_Valid() const{
    return m_estimated_count_isValid;
}

QString OAIAudienceSummary::getName() const {
    return m_name;
}
void OAIAudienceSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAudienceSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAudienceSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAudienceSummary::getState() const {
    return m_state;
}
void OAIAudienceSummary::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAudienceSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAudienceSummary::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAudienceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
