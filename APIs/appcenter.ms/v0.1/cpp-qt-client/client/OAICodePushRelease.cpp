/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodePushRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodePushRelease::OAICodePushRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodePushRelease::OAICodePushRelease() {
    this->initializeModel();
}

OAICodePushRelease::~OAICodePushRelease() {}

void OAICodePushRelease::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_disabled_isSet = false;
    m_is_disabled_isValid = false;

    m_is_mandatory_isSet = false;
    m_is_mandatory_isValid = false;

    m_rollout_isSet = false;
    m_rollout_isValid = false;

    m_target_binary_range_isSet = false;
    m_target_binary_range_isValid = false;

    m_blob_url_isSet = false;
    m_blob_url_isValid = false;

    m_diff_package_map_isSet = false;
    m_diff_package_map_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_original_deployment_isSet = false;
    m_original_deployment_isValid = false;

    m_original_label_isSet = false;
    m_original_label_isValid = false;

    m_package_hash_isSet = false;
    m_package_hash_isValid = false;

    m_release_method_isSet = false;
    m_release_method_isValid = false;

    m_released_by_isSet = false;
    m_released_by_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_upload_time_isSet = false;
    m_upload_time_isValid = false;
}

void OAICodePushRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodePushRelease::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_disabled, json[QString("is_disabled")]);
    m_is_disabled_isSet = !json[QString("is_disabled")].isNull() && m_is_disabled_isValid;

    m_is_mandatory_isValid = ::OpenAPI::fromJsonValue(m_is_mandatory, json[QString("is_mandatory")]);
    m_is_mandatory_isSet = !json[QString("is_mandatory")].isNull() && m_is_mandatory_isValid;

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;

    m_target_binary_range_isValid = ::OpenAPI::fromJsonValue(m_target_binary_range, json[QString("target_binary_range")]);
    m_target_binary_range_isSet = !json[QString("target_binary_range")].isNull() && m_target_binary_range_isValid;

    m_blob_url_isValid = ::OpenAPI::fromJsonValue(m_blob_url, json[QString("blob_url")]);
    m_blob_url_isSet = !json[QString("blob_url")].isNull() && m_blob_url_isValid;

    m_diff_package_map_isValid = ::OpenAPI::fromJsonValue(m_diff_package_map, json[QString("diff_package_map")]);
    m_diff_package_map_isSet = !json[QString("diff_package_map")].isNull() && m_diff_package_map_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_original_deployment_isValid = ::OpenAPI::fromJsonValue(m_original_deployment, json[QString("original_deployment")]);
    m_original_deployment_isSet = !json[QString("original_deployment")].isNull() && m_original_deployment_isValid;

    m_original_label_isValid = ::OpenAPI::fromJsonValue(m_original_label, json[QString("original_label")]);
    m_original_label_isSet = !json[QString("original_label")].isNull() && m_original_label_isValid;

    m_package_hash_isValid = ::OpenAPI::fromJsonValue(m_package_hash, json[QString("package_hash")]);
    m_package_hash_isSet = !json[QString("package_hash")].isNull() && m_package_hash_isValid;

    m_release_method_isValid = ::OpenAPI::fromJsonValue(m_release_method, json[QString("release_method")]);
    m_release_method_isSet = !json[QString("release_method")].isNull() && m_release_method_isValid;

    m_released_by_isValid = ::OpenAPI::fromJsonValue(m_released_by, json[QString("released_by")]);
    m_released_by_isSet = !json[QString("released_by")].isNull() && m_released_by_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_upload_time_isValid = ::OpenAPI::fromJsonValue(m_upload_time, json[QString("upload_time")]);
    m_upload_time_isSet = !json[QString("upload_time")].isNull() && m_upload_time_isValid;
}

QString OAICodePushRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodePushRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_disabled_isSet) {
        obj.insert(QString("is_disabled"), ::OpenAPI::toJsonValue(m_is_disabled));
    }
    if (m_is_mandatory_isSet) {
        obj.insert(QString("is_mandatory"), ::OpenAPI::toJsonValue(m_is_mandatory));
    }
    if (m_rollout_isSet) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    if (m_target_binary_range_isSet) {
        obj.insert(QString("target_binary_range"), ::OpenAPI::toJsonValue(m_target_binary_range));
    }
    if (m_blob_url_isSet) {
        obj.insert(QString("blob_url"), ::OpenAPI::toJsonValue(m_blob_url));
    }
    if (m_diff_package_map.size() > 0) {
        obj.insert(QString("diff_package_map"), ::OpenAPI::toJsonValue(m_diff_package_map));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_original_deployment_isSet) {
        obj.insert(QString("original_deployment"), ::OpenAPI::toJsonValue(m_original_deployment));
    }
    if (m_original_label_isSet) {
        obj.insert(QString("original_label"), ::OpenAPI::toJsonValue(m_original_label));
    }
    if (m_package_hash_isSet) {
        obj.insert(QString("package_hash"), ::OpenAPI::toJsonValue(m_package_hash));
    }
    if (m_release_method_isSet) {
        obj.insert(QString("release_method"), ::OpenAPI::toJsonValue(m_release_method));
    }
    if (m_released_by_isSet) {
        obj.insert(QString("released_by"), ::OpenAPI::toJsonValue(m_released_by));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_upload_time_isSet) {
        obj.insert(QString("upload_time"), ::OpenAPI::toJsonValue(m_upload_time));
    }
    return obj;
}

QString OAICodePushRelease::getDescription() const {
    return m_description;
}
void OAICodePushRelease::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICodePushRelease::is_description_Set() const{
    return m_description_isSet;
}

bool OAICodePushRelease::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICodePushRelease::isIsDisabled() const {
    return m_is_disabled;
}
void OAICodePushRelease::setIsDisabled(const bool &is_disabled) {
    m_is_disabled = is_disabled;
    m_is_disabled_isSet = true;
}

bool OAICodePushRelease::is_is_disabled_Set() const{
    return m_is_disabled_isSet;
}

bool OAICodePushRelease::is_is_disabled_Valid() const{
    return m_is_disabled_isValid;
}

bool OAICodePushRelease::isIsMandatory() const {
    return m_is_mandatory;
}
void OAICodePushRelease::setIsMandatory(const bool &is_mandatory) {
    m_is_mandatory = is_mandatory;
    m_is_mandatory_isSet = true;
}

bool OAICodePushRelease::is_is_mandatory_Set() const{
    return m_is_mandatory_isSet;
}

bool OAICodePushRelease::is_is_mandatory_Valid() const{
    return m_is_mandatory_isValid;
}

qint32 OAICodePushRelease::getRollout() const {
    return m_rollout;
}
void OAICodePushRelease::setRollout(const qint32 &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAICodePushRelease::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAICodePushRelease::is_rollout_Valid() const{
    return m_rollout_isValid;
}

QString OAICodePushRelease::getTargetBinaryRange() const {
    return m_target_binary_range;
}
void OAICodePushRelease::setTargetBinaryRange(const QString &target_binary_range) {
    m_target_binary_range = target_binary_range;
    m_target_binary_range_isSet = true;
}

bool OAICodePushRelease::is_target_binary_range_Set() const{
    return m_target_binary_range_isSet;
}

bool OAICodePushRelease::is_target_binary_range_Valid() const{
    return m_target_binary_range_isValid;
}

QString OAICodePushRelease::getBlobUrl() const {
    return m_blob_url;
}
void OAICodePushRelease::setBlobUrl(const QString &blob_url) {
    m_blob_url = blob_url;
    m_blob_url_isSet = true;
}

bool OAICodePushRelease::is_blob_url_Set() const{
    return m_blob_url_isSet;
}

bool OAICodePushRelease::is_blob_url_Valid() const{
    return m_blob_url_isValid;
}

QMap<QString, OAICodePushDeployments_list_200_response_inner_latest_release_allOf_diff_package_map_value> OAICodePushRelease::getDiffPackageMap() const {
    return m_diff_package_map;
}
void OAICodePushRelease::setDiffPackageMap(const QMap<QString, OAICodePushDeployments_list_200_response_inner_latest_release_allOf_diff_package_map_value> &diff_package_map) {
    m_diff_package_map = diff_package_map;
    m_diff_package_map_isSet = true;
}

bool OAICodePushRelease::is_diff_package_map_Set() const{
    return m_diff_package_map_isSet;
}

bool OAICodePushRelease::is_diff_package_map_Valid() const{
    return m_diff_package_map_isValid;
}

QString OAICodePushRelease::getLabel() const {
    return m_label;
}
void OAICodePushRelease::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICodePushRelease::is_label_Set() const{
    return m_label_isSet;
}

bool OAICodePushRelease::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICodePushRelease::getOriginalDeployment() const {
    return m_original_deployment;
}
void OAICodePushRelease::setOriginalDeployment(const QString &original_deployment) {
    m_original_deployment = original_deployment;
    m_original_deployment_isSet = true;
}

bool OAICodePushRelease::is_original_deployment_Set() const{
    return m_original_deployment_isSet;
}

bool OAICodePushRelease::is_original_deployment_Valid() const{
    return m_original_deployment_isValid;
}

QString OAICodePushRelease::getOriginalLabel() const {
    return m_original_label;
}
void OAICodePushRelease::setOriginalLabel(const QString &original_label) {
    m_original_label = original_label;
    m_original_label_isSet = true;
}

bool OAICodePushRelease::is_original_label_Set() const{
    return m_original_label_isSet;
}

bool OAICodePushRelease::is_original_label_Valid() const{
    return m_original_label_isValid;
}

QString OAICodePushRelease::getPackageHash() const {
    return m_package_hash;
}
void OAICodePushRelease::setPackageHash(const QString &package_hash) {
    m_package_hash = package_hash;
    m_package_hash_isSet = true;
}

bool OAICodePushRelease::is_package_hash_Set() const{
    return m_package_hash_isSet;
}

bool OAICodePushRelease::is_package_hash_Valid() const{
    return m_package_hash_isValid;
}

QString OAICodePushRelease::getReleaseMethod() const {
    return m_release_method;
}
void OAICodePushRelease::setReleaseMethod(const QString &release_method) {
    m_release_method = release_method;
    m_release_method_isSet = true;
}

bool OAICodePushRelease::is_release_method_Set() const{
    return m_release_method_isSet;
}

bool OAICodePushRelease::is_release_method_Valid() const{
    return m_release_method_isValid;
}

QString OAICodePushRelease::getReleasedBy() const {
    return m_released_by;
}
void OAICodePushRelease::setReleasedBy(const QString &released_by) {
    m_released_by = released_by;
    m_released_by_isSet = true;
}

bool OAICodePushRelease::is_released_by_Set() const{
    return m_released_by_isSet;
}

bool OAICodePushRelease::is_released_by_Valid() const{
    return m_released_by_isValid;
}

double OAICodePushRelease::getSize() const {
    return m_size;
}
void OAICodePushRelease::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAICodePushRelease::is_size_Set() const{
    return m_size_isSet;
}

bool OAICodePushRelease::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAICodePushRelease::getUploadTime() const {
    return m_upload_time;
}
void OAICodePushRelease::setUploadTime(const qint32 &upload_time) {
    m_upload_time = upload_time;
    m_upload_time_isSet = true;
}

bool OAICodePushRelease::is_upload_time_Set() const{
    return m_upload_time_isSet;
}

bool OAICodePushRelease::is_upload_time_Valid() const{
    return m_upload_time_isValid;
}

bool OAICodePushRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_binary_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_package_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_deployment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodePushRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
