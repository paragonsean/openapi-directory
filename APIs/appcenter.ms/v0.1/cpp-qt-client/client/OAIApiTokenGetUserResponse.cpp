/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiTokenGetUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiTokenGetUserResponse::OAIApiTokenGetUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiTokenGetUserResponse::OAIApiTokenGetUserResponse() {
    this->initializeModel();
}

OAIApiTokenGetUserResponse::~OAIApiTokenGetUserResponse() {}

void OAIApiTokenGetUserResponse::initializeModel() {

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_token_scope_isSet = false;
    m_token_scope_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_origin_isSet = false;
    m_user_origin_isValid = false;
}

void OAIApiTokenGetUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiTokenGetUserResponse::fromJsonObject(QJsonObject json) {

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("token_id")]);
    m_token_id_isSet = !json[QString("token_id")].isNull() && m_token_id_isValid;

    m_token_scope_isValid = ::OpenAPI::fromJsonValue(m_token_scope, json[QString("token_scope")]);
    m_token_scope_isSet = !json[QString("token_scope")].isNull() && m_token_scope_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_origin_isValid = ::OpenAPI::fromJsonValue(m_user_origin, json[QString("user_origin")]);
    m_user_origin_isSet = !json[QString("user_origin")].isNull() && m_user_origin_isValid;
}

QString OAIApiTokenGetUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiTokenGetUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_token_id_isSet) {
        obj.insert(QString("token_id"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_token_scope.size() > 0) {
        obj.insert(QString("token_scope"), ::OpenAPI::toJsonValue(m_token_scope));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_origin_isSet) {
        obj.insert(QString("user_origin"), ::OpenAPI::toJsonValue(m_user_origin));
    }
    return obj;
}

QString OAIApiTokenGetUserResponse::getTokenId() const {
    return m_token_id;
}
void OAIApiTokenGetUserResponse::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIApiTokenGetUserResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIApiTokenGetUserResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

QList<QString> OAIApiTokenGetUserResponse::getTokenScope() const {
    return m_token_scope;
}
void OAIApiTokenGetUserResponse::setTokenScope(const QList<QString> &token_scope) {
    m_token_scope = token_scope;
    m_token_scope_isSet = true;
}

bool OAIApiTokenGetUserResponse::is_token_scope_Set() const{
    return m_token_scope_isSet;
}

bool OAIApiTokenGetUserResponse::is_token_scope_Valid() const{
    return m_token_scope_isValid;
}

QString OAIApiTokenGetUserResponse::getUserEmail() const {
    return m_user_email;
}
void OAIApiTokenGetUserResponse::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIApiTokenGetUserResponse::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIApiTokenGetUserResponse::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIApiTokenGetUserResponse::getUserId() const {
    return m_user_id;
}
void OAIApiTokenGetUserResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIApiTokenGetUserResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIApiTokenGetUserResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIApiTokenGetUserResponse::getUserOrigin() const {
    return m_user_origin;
}
void OAIApiTokenGetUserResponse::setUserOrigin(const QString &user_origin) {
    m_user_origin = user_origin;
    m_user_origin_isSet = true;
}

bool OAIApiTokenGetUserResponse::is_user_origin_Set() const{
    return m_user_origin_isSet;
}

bool OAIApiTokenGetUserResponse::is_user_origin_Valid() const{
    return m_user_origin_isValid;
}

bool OAIApiTokenGetUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_origin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiTokenGetUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_id_isValid && m_token_scope_isValid && m_user_email_isValid && m_user_id_isValid && m_user_origin_isValid && true;
}

} // namespace OpenAPI
