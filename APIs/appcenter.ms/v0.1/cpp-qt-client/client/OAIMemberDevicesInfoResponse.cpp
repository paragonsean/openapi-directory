/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberDevicesInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberDevicesInfoResponse::OAIMemberDevicesInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberDevicesInfoResponse::OAIMemberDevicesInfoResponse() {
    this->initializeModel();
}

OAIMemberDevicesInfoResponse::~OAIMemberDevicesInfoResponse() {}

void OAIMemberDevicesInfoResponse::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_can_change_password_isSet = false;
    m_can_change_password_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_device_name_isSet = false;
    m_full_device_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_imei_isSet = false;
    m_imei_isValid = false;

    m_invite_pending_isSet = false;
    m_invite_pending_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_build_isSet = false;
    m_os_build_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_registered_at_isSet = false;
    m_registered_at_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_udid_isSet = false;
    m_udid_isValid = false;
}

void OAIMemberDevicesInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberDevicesInfoResponse::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_can_change_password_isValid = ::OpenAPI::fromJsonValue(m_can_change_password, json[QString("can_change_password")]);
    m_can_change_password_isSet = !json[QString("can_change_password")].isNull() && m_can_change_password_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("device_name")]);
    m_device_name_isSet = !json[QString("device_name")].isNull() && m_device_name_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_device_name_isValid = ::OpenAPI::fromJsonValue(m_full_device_name, json[QString("full_device_name")]);
    m_full_device_name_isSet = !json[QString("full_device_name")].isNull() && m_full_device_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_imei_isValid = ::OpenAPI::fromJsonValue(m_imei, json[QString("imei")]);
    m_imei_isSet = !json[QString("imei")].isNull() && m_imei_isValid;

    m_invite_pending_isValid = ::OpenAPI::fromJsonValue(m_invite_pending, json[QString("invite_pending")]);
    m_invite_pending_isSet = !json[QString("invite_pending")].isNull() && m_invite_pending_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_build_isValid = ::OpenAPI::fromJsonValue(m_os_build, json[QString("os_build")]);
    m_os_build_isSet = !json[QString("os_build")].isNull() && m_os_build_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("os_version")]);
    m_os_version_isSet = !json[QString("os_version")].isNull() && m_os_version_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_registered_at_isValid = ::OpenAPI::fromJsonValue(m_registered_at, json[QString("registered_at")]);
    m_registered_at_isSet = !json[QString("registered_at")].isNull() && m_registered_at_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_udid_isValid = ::OpenAPI::fromJsonValue(m_udid, json[QString("udid")]);
    m_udid_isSet = !json[QString("udid")].isNull() && m_udid_isValid;
}

QString OAIMemberDevicesInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberDevicesInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_can_change_password_isSet) {
        obj.insert(QString("can_change_password"), ::OpenAPI::toJsonValue(m_can_change_password));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("device_name"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_device_name_isSet) {
        obj.insert(QString("full_device_name"), ::OpenAPI::toJsonValue(m_full_device_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_imei_isSet) {
        obj.insert(QString("imei"), ::OpenAPI::toJsonValue(m_imei));
    }
    if (m_invite_pending_isSet) {
        obj.insert(QString("invite_pending"), ::OpenAPI::toJsonValue(m_invite_pending));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_build_isSet) {
        obj.insert(QString("os_build"), ::OpenAPI::toJsonValue(m_os_build));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("os_version"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_registered_at_isSet) {
        obj.insert(QString("registered_at"), ::OpenAPI::toJsonValue(m_registered_at));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_udid_isSet) {
        obj.insert(QString("udid"), ::OpenAPI::toJsonValue(m_udid));
    }
    return obj;
}

QString OAIMemberDevicesInfoResponse::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIMemberDevicesInfoResponse::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIMemberDevicesInfoResponse::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

bool OAIMemberDevicesInfoResponse::isCanChangePassword() const {
    return m_can_change_password;
}
void OAIMemberDevicesInfoResponse::setCanChangePassword(const bool &can_change_password) {
    m_can_change_password = can_change_password;
    m_can_change_password_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_can_change_password_Set() const{
    return m_can_change_password_isSet;
}

bool OAIMemberDevicesInfoResponse::is_can_change_password_Valid() const{
    return m_can_change_password_isValid;
}

QString OAIMemberDevicesInfoResponse::getDeviceName() const {
    return m_device_name;
}
void OAIMemberDevicesInfoResponse::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIMemberDevicesInfoResponse::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIMemberDevicesInfoResponse::getDisplayName() const {
    return m_display_name;
}
void OAIMemberDevicesInfoResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMemberDevicesInfoResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMemberDevicesInfoResponse::getEmail() const {
    return m_email;
}
void OAIMemberDevicesInfoResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMemberDevicesInfoResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIMemberDevicesInfoResponse::getFullDeviceName() const {
    return m_full_device_name;
}
void OAIMemberDevicesInfoResponse::setFullDeviceName(const QString &full_device_name) {
    m_full_device_name = full_device_name;
    m_full_device_name_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_full_device_name_Set() const{
    return m_full_device_name_isSet;
}

bool OAIMemberDevicesInfoResponse::is_full_device_name_Valid() const{
    return m_full_device_name_isValid;
}

QString OAIMemberDevicesInfoResponse::getId() const {
    return m_id;
}
void OAIMemberDevicesInfoResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMemberDevicesInfoResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMemberDevicesInfoResponse::getImei() const {
    return m_imei;
}
void OAIMemberDevicesInfoResponse::setImei(const QString &imei) {
    m_imei = imei;
    m_imei_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAIMemberDevicesInfoResponse::is_imei_Valid() const{
    return m_imei_isValid;
}

bool OAIMemberDevicesInfoResponse::isInvitePending() const {
    return m_invite_pending;
}
void OAIMemberDevicesInfoResponse::setInvitePending(const bool &invite_pending) {
    m_invite_pending = invite_pending;
    m_invite_pending_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_invite_pending_Set() const{
    return m_invite_pending_isSet;
}

bool OAIMemberDevicesInfoResponse::is_invite_pending_Valid() const{
    return m_invite_pending_isValid;
}

QString OAIMemberDevicesInfoResponse::getModel() const {
    return m_model;
}
void OAIMemberDevicesInfoResponse::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_model_Set() const{
    return m_model_isSet;
}

bool OAIMemberDevicesInfoResponse::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIMemberDevicesInfoResponse::getName() const {
    return m_name;
}
void OAIMemberDevicesInfoResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMemberDevicesInfoResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMemberDevicesInfoResponse::getOsBuild() const {
    return m_os_build;
}
void OAIMemberDevicesInfoResponse::setOsBuild(const QString &os_build) {
    m_os_build = os_build;
    m_os_build_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_os_build_Set() const{
    return m_os_build_isSet;
}

bool OAIMemberDevicesInfoResponse::is_os_build_Valid() const{
    return m_os_build_isValid;
}

QString OAIMemberDevicesInfoResponse::getOsVersion() const {
    return m_os_version;
}
void OAIMemberDevicesInfoResponse::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIMemberDevicesInfoResponse::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIMemberDevicesInfoResponse::getOwnerId() const {
    return m_owner_id;
}
void OAIMemberDevicesInfoResponse::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIMemberDevicesInfoResponse::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIMemberDevicesInfoResponse::getRegisteredAt() const {
    return m_registered_at;
}
void OAIMemberDevicesInfoResponse::setRegisteredAt(const QString &registered_at) {
    m_registered_at = registered_at;
    m_registered_at_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_registered_at_Set() const{
    return m_registered_at_isSet;
}

bool OAIMemberDevicesInfoResponse::is_registered_at_Valid() const{
    return m_registered_at_isValid;
}

QString OAIMemberDevicesInfoResponse::getSerial() const {
    return m_serial;
}
void OAIMemberDevicesInfoResponse::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIMemberDevicesInfoResponse::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIMemberDevicesInfoResponse::getStatus() const {
    return m_status;
}
void OAIMemberDevicesInfoResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMemberDevicesInfoResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMemberDevicesInfoResponse::getUdid() const {
    return m_udid;
}
void OAIMemberDevicesInfoResponse::setUdid(const QString &udid) {
    m_udid = udid;
    m_udid_isSet = true;
}

bool OAIMemberDevicesInfoResponse::is_udid_Set() const{
    return m_udid_isSet;
}

bool OAIMemberDevicesInfoResponse::is_udid_Valid() const{
    return m_udid_isValid;
}

bool OAIMemberDevicesInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberDevicesInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_name_isValid && m_email_isValid && m_id_isValid && m_model_isValid && m_os_build_isValid && m_os_version_isValid && m_status_isValid && m_udid_isValid && true;
}

} // namespace OpenAPI
