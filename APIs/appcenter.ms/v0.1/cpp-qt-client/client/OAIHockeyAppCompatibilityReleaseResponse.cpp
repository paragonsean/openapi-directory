/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHockeyAppCompatibilityReleaseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHockeyAppCompatibilityReleaseResponse::OAIHockeyAppCompatibilityReleaseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHockeyAppCompatibilityReleaseResponse::OAIHockeyAppCompatibilityReleaseResponse() {
    this->initializeModel();
}

OAIHockeyAppCompatibilityReleaseResponse::~OAIHockeyAppCompatibilityReleaseResponse() {}

void OAIHockeyAppCompatibilityReleaseResponse::initializeModel() {

    m_appsize_isSet = false;
    m_appsize_isValid = false;

    m_bundle_identifier_isSet = false;
    m_bundle_identifier_isValid = false;

    m_device_family_isSet = false;
    m_device_family_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_install_url_isSet = false;
    m_install_url_isValid = false;

    m_mandatory_isSet = false;
    m_mandatory_isValid = false;

    m_minimum_os_version_isSet = false;
    m_minimum_os_version_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_shortversion_isSet = false;
    m_shortversion_isValid = false;

    m_uploaded_at_isSet = false;
    m_uploaded_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIHockeyAppCompatibilityReleaseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHockeyAppCompatibilityReleaseResponse::fromJsonObject(QJsonObject json) {

    m_appsize_isValid = ::OpenAPI::fromJsonValue(m_appsize, json[QString("appsize")]);
    m_appsize_isSet = !json[QString("appsize")].isNull() && m_appsize_isValid;

    m_bundle_identifier_isValid = ::OpenAPI::fromJsonValue(m_bundle_identifier, json[QString("bundle_identifier")]);
    m_bundle_identifier_isSet = !json[QString("bundle_identifier")].isNull() && m_bundle_identifier_isValid;

    m_device_family_isValid = ::OpenAPI::fromJsonValue(m_device_family, json[QString("device_family")]);
    m_device_family_isSet = !json[QString("device_family")].isNull() && m_device_family_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_install_url_isValid = ::OpenAPI::fromJsonValue(m_install_url, json[QString("install_url")]);
    m_install_url_isSet = !json[QString("install_url")].isNull() && m_install_url_isValid;

    m_mandatory_isValid = ::OpenAPI::fromJsonValue(m_mandatory, json[QString("mandatory")]);
    m_mandatory_isSet = !json[QString("mandatory")].isNull() && m_mandatory_isValid;

    m_minimum_os_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_os_version, json[QString("minimum_os_version")]);
    m_minimum_os_version_isSet = !json[QString("minimum_os_version")].isNull() && m_minimum_os_version_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_shortversion_isValid = ::OpenAPI::fromJsonValue(m_shortversion, json[QString("shortversion")]);
    m_shortversion_isSet = !json[QString("shortversion")].isNull() && m_shortversion_isValid;

    m_uploaded_at_isValid = ::OpenAPI::fromJsonValue(m_uploaded_at, json[QString("uploaded_at")]);
    m_uploaded_at_isSet = !json[QString("uploaded_at")].isNull() && m_uploaded_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHockeyAppCompatibilityReleaseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_appsize_isSet) {
        obj.insert(QString("appsize"), ::OpenAPI::toJsonValue(m_appsize));
    }
    if (m_bundle_identifier_isSet) {
        obj.insert(QString("bundle_identifier"), ::OpenAPI::toJsonValue(m_bundle_identifier));
    }
    if (m_device_family_isSet) {
        obj.insert(QString("device_family"), ::OpenAPI::toJsonValue(m_device_family));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_install_url_isSet) {
        obj.insert(QString("install_url"), ::OpenAPI::toJsonValue(m_install_url));
    }
    if (m_mandatory_isSet) {
        obj.insert(QString("mandatory"), ::OpenAPI::toJsonValue(m_mandatory));
    }
    if (m_minimum_os_version_isSet) {
        obj.insert(QString("minimum_os_version"), ::OpenAPI::toJsonValue(m_minimum_os_version));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_shortversion_isSet) {
        obj.insert(QString("shortversion"), ::OpenAPI::toJsonValue(m_shortversion));
    }
    if (m_uploaded_at_isSet) {
        obj.insert(QString("uploaded_at"), ::OpenAPI::toJsonValue(m_uploaded_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIHockeyAppCompatibilityReleaseResponse::getAppsize() const {
    return m_appsize;
}
void OAIHockeyAppCompatibilityReleaseResponse::setAppsize(const qint32 &appsize) {
    m_appsize = appsize;
    m_appsize_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_appsize_Set() const{
    return m_appsize_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_appsize_Valid() const{
    return m_appsize_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getBundleIdentifier() const {
    return m_bundle_identifier;
}
void OAIHockeyAppCompatibilityReleaseResponse::setBundleIdentifier(const QString &bundle_identifier) {
    m_bundle_identifier = bundle_identifier;
    m_bundle_identifier_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_bundle_identifier_Set() const{
    return m_bundle_identifier_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_bundle_identifier_Valid() const{
    return m_bundle_identifier_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getDeviceFamily() const {
    return m_device_family;
}
void OAIHockeyAppCompatibilityReleaseResponse::setDeviceFamily(const QString &device_family) {
    m_device_family = device_family;
    m_device_family_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_device_family_Set() const{
    return m_device_family_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_device_family_Valid() const{
    return m_device_family_isValid;
}

bool OAIHockeyAppCompatibilityReleaseResponse::isExternal() const {
    return m_external;
}
void OAIHockeyAppCompatibilityReleaseResponse::setExternal(const bool &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_external_Set() const{
    return m_external_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_external_Valid() const{
    return m_external_isValid;
}

qint32 OAIHockeyAppCompatibilityReleaseResponse::getId() const {
    return m_id;
}
void OAIHockeyAppCompatibilityReleaseResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getInstallUrl() const {
    return m_install_url;
}
void OAIHockeyAppCompatibilityReleaseResponse::setInstallUrl(const QString &install_url) {
    m_install_url = install_url;
    m_install_url_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_install_url_Set() const{
    return m_install_url_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_install_url_Valid() const{
    return m_install_url_isValid;
}

bool OAIHockeyAppCompatibilityReleaseResponse::isMandatory() const {
    return m_mandatory;
}
void OAIHockeyAppCompatibilityReleaseResponse::setMandatory(const bool &mandatory) {
    m_mandatory = mandatory;
    m_mandatory_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_mandatory_Set() const{
    return m_mandatory_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_mandatory_Valid() const{
    return m_mandatory_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getMinimumOsVersion() const {
    return m_minimum_os_version;
}
void OAIHockeyAppCompatibilityReleaseResponse::setMinimumOsVersion(const QString &minimum_os_version) {
    m_minimum_os_version = minimum_os_version;
    m_minimum_os_version_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_minimum_os_version_Set() const{
    return m_minimum_os_version_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_minimum_os_version_Valid() const{
    return m_minimum_os_version_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getNotes() const {
    return m_notes;
}
void OAIHockeyAppCompatibilityReleaseResponse::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getShortversion() const {
    return m_shortversion;
}
void OAIHockeyAppCompatibilityReleaseResponse::setShortversion(const QString &shortversion) {
    m_shortversion = shortversion;
    m_shortversion_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_shortversion_Set() const{
    return m_shortversion_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_shortversion_Valid() const{
    return m_shortversion_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getUploadedAt() const {
    return m_uploaded_at;
}
void OAIHockeyAppCompatibilityReleaseResponse::setUploadedAt(const QString &uploaded_at) {
    m_uploaded_at = uploaded_at;
    m_uploaded_at_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_uploaded_at_Set() const{
    return m_uploaded_at_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_uploaded_at_Valid() const{
    return m_uploaded_at_isValid;
}

QString OAIHockeyAppCompatibilityReleaseResponse::getVersion() const {
    return m_version;
}
void OAIHockeyAppCompatibilityReleaseResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIHockeyAppCompatibilityReleaseResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIHockeyAppCompatibilityReleaseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appsize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shortversion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHockeyAppCompatibilityReleaseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
