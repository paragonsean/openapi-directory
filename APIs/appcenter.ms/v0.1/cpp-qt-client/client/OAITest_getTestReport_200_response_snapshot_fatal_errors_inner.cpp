/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_getTestReport_200_response_snapshot_fatal_errors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::OAITest_getTestReport_200_response_snapshot_fatal_errors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::OAITest_getTestReport_200_response_snapshot_fatal_errors_inner() {
    this->initializeModel();
}

OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::~OAITest_getTestReport_200_response_snapshot_fatal_errors_inner() {}

void OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::initializeModel() {

    m_device_snapshot_id_isSet = false;
    m_device_snapshot_id_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_title_isSet = false;
    m_error_title_isValid = false;
}

void OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::fromJsonObject(QJsonObject json) {

    m_device_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_device_snapshot_id, json[QString("device_snapshot_id")]);
    m_device_snapshot_id_isSet = !json[QString("device_snapshot_id")].isNull() && m_device_snapshot_id_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_error_title_isValid = ::OpenAPI::fromJsonValue(m_error_title, json[QString("error_title")]);
    m_error_title_isSet = !json[QString("error_title")].isNull() && m_error_title_isValid;
}

QString OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_device_snapshot_id_isSet) {
        obj.insert(QString("device_snapshot_id"), ::OpenAPI::toJsonValue(m_device_snapshot_id));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_title_isSet) {
        obj.insert(QString("error_title"), ::OpenAPI::toJsonValue(m_error_title));
    }
    return obj;
}

QString OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::getDeviceSnapshotId() const {
    return m_device_snapshot_id;
}
void OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::setDeviceSnapshotId(const QString &device_snapshot_id) {
    m_device_snapshot_id = device_snapshot_id;
    m_device_snapshot_id_isSet = true;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::is_device_snapshot_id_Set() const{
    return m_device_snapshot_id_isSet;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::is_device_snapshot_id_Valid() const{
    return m_device_snapshot_id_isValid;
}

QString OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::getErrorMessage() const {
    return m_error_message;
}
void OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::getErrorTitle() const {
    return m_error_title;
}
void OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::setErrorTitle(const QString &error_title) {
    m_error_title = error_title;
    m_error_title_isSet = true;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::is_error_title_Set() const{
    return m_error_title_isSet;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::is_error_title_Valid() const{
    return m_error_title_isValid;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_getTestReport_200_response_snapshot_fatal_errors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
