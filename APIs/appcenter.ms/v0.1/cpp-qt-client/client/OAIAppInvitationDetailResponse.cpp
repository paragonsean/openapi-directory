/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInvitationDetailResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInvitationDetailResponse::OAIAppInvitationDetailResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInvitationDetailResponse::OAIAppInvitationDetailResponse() {
    this->initializeModel();
}

OAIAppInvitationDetailResponse::~OAIAppInvitationDetailResponse() {}

void OAIAppInvitationDetailResponse::initializeModel() {

    m_app_isSet = false;
    m_app_isValid = false;

    m_app_count_isSet = false;
    m_app_count_isValid = false;

    m_distribution_group_isSet = false;
    m_distribution_group_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invite_type_isSet = false;
    m_invite_type_isValid = false;

    m_invited_by_isSet = false;
    m_invited_by_isValid = false;

    m_is_existing_user_isSet = false;
    m_is_existing_user_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIAppInvitationDetailResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInvitationDetailResponse::fromJsonObject(QJsonObject json) {

    m_app_isValid = ::OpenAPI::fromJsonValue(m_app, json[QString("app")]);
    m_app_isSet = !json[QString("app")].isNull() && m_app_isValid;

    m_app_count_isValid = ::OpenAPI::fromJsonValue(m_app_count, json[QString("app_count")]);
    m_app_count_isSet = !json[QString("app_count")].isNull() && m_app_count_isValid;

    m_distribution_group_isValid = ::OpenAPI::fromJsonValue(m_distribution_group, json[QString("distribution_group")]);
    m_distribution_group_isSet = !json[QString("distribution_group")].isNull() && m_distribution_group_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invite_type_isValid = ::OpenAPI::fromJsonValue(m_invite_type, json[QString("invite_type")]);
    m_invite_type_isSet = !json[QString("invite_type")].isNull() && m_invite_type_isValid;

    m_invited_by_isValid = ::OpenAPI::fromJsonValue(m_invited_by, json[QString("invited_by")]);
    m_invited_by_isSet = !json[QString("invited_by")].isNull() && m_invited_by_isValid;

    m_is_existing_user_isValid = ::OpenAPI::fromJsonValue(m_is_existing_user, json[QString("is_existing_user")]);
    m_is_existing_user_isSet = !json[QString("is_existing_user")].isNull() && m_is_existing_user_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIAppInvitationDetailResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInvitationDetailResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app.isSet()) {
        obj.insert(QString("app"), ::OpenAPI::toJsonValue(m_app));
    }
    if (m_app_count_isSet) {
        obj.insert(QString("app_count"), ::OpenAPI::toJsonValue(m_app_count));
    }
    if (m_distribution_group.isSet()) {
        obj.insert(QString("distribution_group"), ::OpenAPI::toJsonValue(m_distribution_group));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invite_type_isSet) {
        obj.insert(QString("invite_type"), ::OpenAPI::toJsonValue(m_invite_type));
    }
    if (m_invited_by.isSet()) {
        obj.insert(QString("invited_by"), ::OpenAPI::toJsonValue(m_invited_by));
    }
    if (m_is_existing_user_isSet) {
        obj.insert(QString("is_existing_user"), ::OpenAPI::toJsonValue(m_is_existing_user));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

OAIApps_list_200_response_inner OAIAppInvitationDetailResponse::getApp() const {
    return m_app;
}
void OAIAppInvitationDetailResponse::setApp(const OAIApps_list_200_response_inner &app) {
    m_app = app;
    m_app_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_app_Set() const{
    return m_app_isSet;
}

bool OAIAppInvitationDetailResponse::is_app_Valid() const{
    return m_app_isValid;
}

double OAIAppInvitationDetailResponse::getAppCount() const {
    return m_app_count;
}
void OAIAppInvitationDetailResponse::setAppCount(const double &app_count) {
    m_app_count = app_count;
    m_app_count_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_app_count_Set() const{
    return m_app_count_isSet;
}

bool OAIAppInvitationDetailResponse::is_app_count_Valid() const{
    return m_app_count_isValid;
}

OAIAppInvitations_list_200_response_distribution_group OAIAppInvitationDetailResponse::getDistributionGroup() const {
    return m_distribution_group;
}
void OAIAppInvitationDetailResponse::setDistributionGroup(const OAIAppInvitations_list_200_response_distribution_group &distribution_group) {
    m_distribution_group = distribution_group;
    m_distribution_group_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_distribution_group_Set() const{
    return m_distribution_group_isSet;
}

bool OAIAppInvitationDetailResponse::is_distribution_group_Valid() const{
    return m_distribution_group_isValid;
}

QString OAIAppInvitationDetailResponse::getEmail() const {
    return m_email;
}
void OAIAppInvitationDetailResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAppInvitationDetailResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAppInvitationDetailResponse::getId() const {
    return m_id;
}
void OAIAppInvitationDetailResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppInvitationDetailResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppInvitationDetailResponse::getInviteType() const {
    return m_invite_type;
}
void OAIAppInvitationDetailResponse::setInviteType(const QString &invite_type) {
    m_invite_type = invite_type;
    m_invite_type_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_invite_type_Set() const{
    return m_invite_type_isSet;
}

bool OAIAppInvitationDetailResponse::is_invite_type_Valid() const{
    return m_invite_type_isValid;
}

OAIAppInvitations_list_200_response_invited_by OAIAppInvitationDetailResponse::getInvitedBy() const {
    return m_invited_by;
}
void OAIAppInvitationDetailResponse::setInvitedBy(const OAIAppInvitations_list_200_response_invited_by &invited_by) {
    m_invited_by = invited_by;
    m_invited_by_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_invited_by_Set() const{
    return m_invited_by_isSet;
}

bool OAIAppInvitationDetailResponse::is_invited_by_Valid() const{
    return m_invited_by_isValid;
}

bool OAIAppInvitationDetailResponse::isIsExistingUser() const {
    return m_is_existing_user;
}
void OAIAppInvitationDetailResponse::setIsExistingUser(const bool &is_existing_user) {
    m_is_existing_user = is_existing_user;
    m_is_existing_user_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_is_existing_user_Set() const{
    return m_is_existing_user_isSet;
}

bool OAIAppInvitationDetailResponse::is_is_existing_user_Valid() const{
    return m_is_existing_user_isValid;
}

QList<QString> OAIAppInvitationDetailResponse::getPermissions() const {
    return m_permissions;
}
void OAIAppInvitationDetailResponse::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAppInvitationDetailResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAppInvitationDetailResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIAppInvitationDetailResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_group.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_existing_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInvitationDetailResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_isValid && m_email_isValid && m_id_isValid && m_invite_type_isValid && m_invited_by_isValid && m_is_existing_user_isValid && true;
}

} // namespace OpenAPI
