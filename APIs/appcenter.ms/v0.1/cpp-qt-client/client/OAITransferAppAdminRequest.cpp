/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferAppAdminRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferAppAdminRequest::OAITransferAppAdminRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferAppAdminRequest::OAITransferAppAdminRequest() {
    this->initializeModel();
}

OAITransferAppAdminRequest::~OAITransferAppAdminRequest() {}

void OAITransferAppAdminRequest::initializeModel() {

    m_issue_id_isSet = false;
    m_issue_id_isValid = false;

    m_new_owner_id_isSet = false;
    m_new_owner_id_isValid = false;

    m_responsible_admin_id_isSet = false;
    m_responsible_admin_id_isValid = false;

    m_transfer_reason_isSet = false;
    m_transfer_reason_isValid = false;
}

void OAITransferAppAdminRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferAppAdminRequest::fromJsonObject(QJsonObject json) {

    m_issue_id_isValid = ::OpenAPI::fromJsonValue(m_issue_id, json[QString("issue_id")]);
    m_issue_id_isSet = !json[QString("issue_id")].isNull() && m_issue_id_isValid;

    m_new_owner_id_isValid = ::OpenAPI::fromJsonValue(m_new_owner_id, json[QString("new_owner_id")]);
    m_new_owner_id_isSet = !json[QString("new_owner_id")].isNull() && m_new_owner_id_isValid;

    m_responsible_admin_id_isValid = ::OpenAPI::fromJsonValue(m_responsible_admin_id, json[QString("responsible_admin_id")]);
    m_responsible_admin_id_isSet = !json[QString("responsible_admin_id")].isNull() && m_responsible_admin_id_isValid;

    m_transfer_reason_isValid = ::OpenAPI::fromJsonValue(m_transfer_reason, json[QString("transfer_reason")]);
    m_transfer_reason_isSet = !json[QString("transfer_reason")].isNull() && m_transfer_reason_isValid;
}

QString OAITransferAppAdminRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferAppAdminRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_issue_id_isSet) {
        obj.insert(QString("issue_id"), ::OpenAPI::toJsonValue(m_issue_id));
    }
    if (m_new_owner_id_isSet) {
        obj.insert(QString("new_owner_id"), ::OpenAPI::toJsonValue(m_new_owner_id));
    }
    if (m_responsible_admin_id_isSet) {
        obj.insert(QString("responsible_admin_id"), ::OpenAPI::toJsonValue(m_responsible_admin_id));
    }
    if (m_transfer_reason_isSet) {
        obj.insert(QString("transfer_reason"), ::OpenAPI::toJsonValue(m_transfer_reason));
    }
    return obj;
}

QString OAITransferAppAdminRequest::getIssueId() const {
    return m_issue_id;
}
void OAITransferAppAdminRequest::setIssueId(const QString &issue_id) {
    m_issue_id = issue_id;
    m_issue_id_isSet = true;
}

bool OAITransferAppAdminRequest::is_issue_id_Set() const{
    return m_issue_id_isSet;
}

bool OAITransferAppAdminRequest::is_issue_id_Valid() const{
    return m_issue_id_isValid;
}

QString OAITransferAppAdminRequest::getNewOwnerId() const {
    return m_new_owner_id;
}
void OAITransferAppAdminRequest::setNewOwnerId(const QString &new_owner_id) {
    m_new_owner_id = new_owner_id;
    m_new_owner_id_isSet = true;
}

bool OAITransferAppAdminRequest::is_new_owner_id_Set() const{
    return m_new_owner_id_isSet;
}

bool OAITransferAppAdminRequest::is_new_owner_id_Valid() const{
    return m_new_owner_id_isValid;
}

QString OAITransferAppAdminRequest::getResponsibleAdminId() const {
    return m_responsible_admin_id;
}
void OAITransferAppAdminRequest::setResponsibleAdminId(const QString &responsible_admin_id) {
    m_responsible_admin_id = responsible_admin_id;
    m_responsible_admin_id_isSet = true;
}

bool OAITransferAppAdminRequest::is_responsible_admin_id_Set() const{
    return m_responsible_admin_id_isSet;
}

bool OAITransferAppAdminRequest::is_responsible_admin_id_Valid() const{
    return m_responsible_admin_id_isValid;
}

QString OAITransferAppAdminRequest::getTransferReason() const {
    return m_transfer_reason;
}
void OAITransferAppAdminRequest::setTransferReason(const QString &transfer_reason) {
    m_transfer_reason = transfer_reason;
    m_transfer_reason_isSet = true;
}

bool OAITransferAppAdminRequest::is_transfer_reason_Set() const{
    return m_transfer_reason_isSet;
}

bool OAITransferAppAdminRequest::is_transfer_reason_Valid() const{
    return m_transfer_reason_isValid;
}

bool OAITransferAppAdminRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_issue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsible_admin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferAppAdminRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_issue_id_isValid && m_new_owner_id_isValid && m_responsible_admin_id_isValid && m_transfer_reason_isValid && true;
}

} // namespace OpenAPI
