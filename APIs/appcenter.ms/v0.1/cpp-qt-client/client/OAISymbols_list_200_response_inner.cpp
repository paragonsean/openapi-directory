/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymbols_list_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymbols_list_200_response_inner::OAISymbols_list_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymbols_list_200_response_inner::OAISymbols_list_200_response_inner() {
    this->initializeModel();
}

OAISymbols_list_200_response_inner::~OAISymbols_list_200_response_inner() {}

void OAISymbols_list_200_response_inner::initializeModel() {

    m_alternate_symbol_ids_isSet = false;
    m_alternate_symbol_ids_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_build_isSet = false;
    m_build_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_symbol_id_isSet = false;
    m_symbol_id_isValid = false;

    m_symbol_upload_id_isSet = false;
    m_symbol_upload_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISymbols_list_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymbols_list_200_response_inner::fromJsonObject(QJsonObject json) {

    m_alternate_symbol_ids_isValid = ::OpenAPI::fromJsonValue(m_alternate_symbol_ids, json[QString("alternate_symbol_ids")]);
    m_alternate_symbol_ids_isSet = !json[QString("alternate_symbol_ids")].isNull() && m_alternate_symbol_ids_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_symbol_id_isValid = ::OpenAPI::fromJsonValue(m_symbol_id, json[QString("symbol_id")]);
    m_symbol_id_isSet = !json[QString("symbol_id")].isNull() && m_symbol_id_isValid;

    m_symbol_upload_id_isValid = ::OpenAPI::fromJsonValue(m_symbol_upload_id, json[QString("symbol_upload_id")]);
    m_symbol_upload_id_isSet = !json[QString("symbol_upload_id")].isNull() && m_symbol_upload_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISymbols_list_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymbols_list_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_symbol_ids.size() > 0) {
        obj.insert(QString("alternate_symbol_ids"), ::OpenAPI::toJsonValue(m_alternate_symbol_ids));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_build_isSet) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_symbol_id_isSet) {
        obj.insert(QString("symbol_id"), ::OpenAPI::toJsonValue(m_symbol_id));
    }
    if (m_symbol_upload_id_isSet) {
        obj.insert(QString("symbol_upload_id"), ::OpenAPI::toJsonValue(m_symbol_upload_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAISymbols_list_200_response_inner::getAlternateSymbolIds() const {
    return m_alternate_symbol_ids;
}
void OAISymbols_list_200_response_inner::setAlternateSymbolIds(const QList<QString> &alternate_symbol_ids) {
    m_alternate_symbol_ids = alternate_symbol_ids;
    m_alternate_symbol_ids_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_alternate_symbol_ids_Set() const{
    return m_alternate_symbol_ids_isSet;
}

bool OAISymbols_list_200_response_inner::is_alternate_symbol_ids_Valid() const{
    return m_alternate_symbol_ids_isValid;
}

QString OAISymbols_list_200_response_inner::getAppId() const {
    return m_app_id;
}
void OAISymbols_list_200_response_inner::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAISymbols_list_200_response_inner::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAISymbols_list_200_response_inner::getBuild() const {
    return m_build;
}
void OAISymbols_list_200_response_inner::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_build_Set() const{
    return m_build_isSet;
}

bool OAISymbols_list_200_response_inner::is_build_Valid() const{
    return m_build_isValid;
}

QString OAISymbols_list_200_response_inner::getOrigin() const {
    return m_origin;
}
void OAISymbols_list_200_response_inner::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAISymbols_list_200_response_inner::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAISymbols_list_200_response_inner::getPlatform() const {
    return m_platform;
}
void OAISymbols_list_200_response_inner::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAISymbols_list_200_response_inner::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAISymbols_list_200_response_inner::getStatus() const {
    return m_status;
}
void OAISymbols_list_200_response_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAISymbols_list_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISymbols_list_200_response_inner::getSymbolId() const {
    return m_symbol_id;
}
void OAISymbols_list_200_response_inner::setSymbolId(const QString &symbol_id) {
    m_symbol_id = symbol_id;
    m_symbol_id_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_symbol_id_Set() const{
    return m_symbol_id_isSet;
}

bool OAISymbols_list_200_response_inner::is_symbol_id_Valid() const{
    return m_symbol_id_isValid;
}

QString OAISymbols_list_200_response_inner::getSymbolUploadId() const {
    return m_symbol_upload_id;
}
void OAISymbols_list_200_response_inner::setSymbolUploadId(const QString &symbol_upload_id) {
    m_symbol_upload_id = symbol_upload_id;
    m_symbol_upload_id_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_symbol_upload_id_Set() const{
    return m_symbol_upload_id_isSet;
}

bool OAISymbols_list_200_response_inner::is_symbol_upload_id_Valid() const{
    return m_symbol_upload_id_isValid;
}

QString OAISymbols_list_200_response_inner::getType() const {
    return m_type;
}
void OAISymbols_list_200_response_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAISymbols_list_200_response_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISymbols_list_200_response_inner::getUrl() const {
    return m_url;
}
void OAISymbols_list_200_response_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAISymbols_list_200_response_inner::is_url_Valid() const{
    return m_url_isValid;
}

QString OAISymbols_list_200_response_inner::getVersion() const {
    return m_version;
}
void OAISymbols_list_200_response_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISymbols_list_200_response_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAISymbols_list_200_response_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISymbols_list_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_symbol_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymbols_list_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alternate_symbol_ids_isValid && m_app_id_isValid && m_origin_isValid && m_platform_isValid && m_status_isValid && m_symbol_id_isValid && m_symbol_upload_id_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
