/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevices_registerUserForDevice_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevices_registerUserForDevice_request::OAIDevices_registerUserForDevice_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevices_registerUserForDevice_request::OAIDevices_registerUserForDevice_request() {
    this->initializeModel();
}

OAIDevices_registerUserForDevice_request::~OAIDevices_registerUserForDevice_request() {}

void OAIDevices_registerUserForDevice_request::initializeModel() {

    m_imei_isSet = false;
    m_imei_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_os_build_isSet = false;
    m_os_build_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_serial_isSet = false;
    m_serial_isValid = false;

    m_udid_isSet = false;
    m_udid_isValid = false;
}

void OAIDevices_registerUserForDevice_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevices_registerUserForDevice_request::fromJsonObject(QJsonObject json) {

    m_imei_isValid = ::OpenAPI::fromJsonValue(m_imei, json[QString("imei")]);
    m_imei_isSet = !json[QString("imei")].isNull() && m_imei_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_os_build_isValid = ::OpenAPI::fromJsonValue(m_os_build, json[QString("os_build")]);
    m_os_build_isSet = !json[QString("os_build")].isNull() && m_os_build_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("os_version")]);
    m_os_version_isSet = !json[QString("os_version")].isNull() && m_os_version_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_serial_isValid = ::OpenAPI::fromJsonValue(m_serial, json[QString("serial")]);
    m_serial_isSet = !json[QString("serial")].isNull() && m_serial_isValid;

    m_udid_isValid = ::OpenAPI::fromJsonValue(m_udid, json[QString("udid")]);
    m_udid_isSet = !json[QString("udid")].isNull() && m_udid_isValid;
}

QString OAIDevices_registerUserForDevice_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevices_registerUserForDevice_request::asJsonObject() const {
    QJsonObject obj;
    if (m_imei_isSet) {
        obj.insert(QString("imei"), ::OpenAPI::toJsonValue(m_imei));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_os_build_isSet) {
        obj.insert(QString("os_build"), ::OpenAPI::toJsonValue(m_os_build));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("os_version"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_serial_isSet) {
        obj.insert(QString("serial"), ::OpenAPI::toJsonValue(m_serial));
    }
    if (m_udid_isSet) {
        obj.insert(QString("udid"), ::OpenAPI::toJsonValue(m_udid));
    }
    return obj;
}

QString OAIDevices_registerUserForDevice_request::getImei() const {
    return m_imei;
}
void OAIDevices_registerUserForDevice_request::setImei(const QString &imei) {
    m_imei = imei;
    m_imei_isSet = true;
}

bool OAIDevices_registerUserForDevice_request::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAIDevices_registerUserForDevice_request::is_imei_Valid() const{
    return m_imei_isValid;
}

QString OAIDevices_registerUserForDevice_request::getModel() const {
    return m_model;
}
void OAIDevices_registerUserForDevice_request::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDevices_registerUserForDevice_request::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDevices_registerUserForDevice_request::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDevices_registerUserForDevice_request::getOsBuild() const {
    return m_os_build;
}
void OAIDevices_registerUserForDevice_request::setOsBuild(const QString &os_build) {
    m_os_build = os_build;
    m_os_build_isSet = true;
}

bool OAIDevices_registerUserForDevice_request::is_os_build_Set() const{
    return m_os_build_isSet;
}

bool OAIDevices_registerUserForDevice_request::is_os_build_Valid() const{
    return m_os_build_isValid;
}

QString OAIDevices_registerUserForDevice_request::getOsVersion() const {
    return m_os_version;
}
void OAIDevices_registerUserForDevice_request::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIDevices_registerUserForDevice_request::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIDevices_registerUserForDevice_request::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIDevices_registerUserForDevice_request::getOwnerId() const {
    return m_owner_id;
}
void OAIDevices_registerUserForDevice_request::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAIDevices_registerUserForDevice_request::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIDevices_registerUserForDevice_request::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAIDevices_registerUserForDevice_request::getSerial() const {
    return m_serial;
}
void OAIDevices_registerUserForDevice_request::setSerial(const QString &serial) {
    m_serial = serial;
    m_serial_isSet = true;
}

bool OAIDevices_registerUserForDevice_request::is_serial_Set() const{
    return m_serial_isSet;
}

bool OAIDevices_registerUserForDevice_request::is_serial_Valid() const{
    return m_serial_isValid;
}

QString OAIDevices_registerUserForDevice_request::getUdid() const {
    return m_udid;
}
void OAIDevices_registerUserForDevice_request::setUdid(const QString &udid) {
    m_udid = udid;
    m_udid_isSet = true;
}

bool OAIDevices_registerUserForDevice_request::is_udid_Set() const{
    return m_udid_isSet;
}

bool OAIDevices_registerUserForDevice_request::is_udid_Valid() const{
    return m_udid_isValid;
}

bool OAIDevices_registerUserForDevice_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_imei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevices_registerUserForDevice_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_model_isValid && m_udid_isValid && true;
}

} // namespace OpenAPI
