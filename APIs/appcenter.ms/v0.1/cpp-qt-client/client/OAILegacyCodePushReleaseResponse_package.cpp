/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegacyCodePushReleaseResponse_package.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegacyCodePushReleaseResponse_package::OAILegacyCodePushReleaseResponse_package(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegacyCodePushReleaseResponse_package::OAILegacyCodePushReleaseResponse_package() {
    this->initializeModel();
}

OAILegacyCodePushReleaseResponse_package::~OAILegacyCodePushReleaseResponse_package() {}

void OAILegacyCodePushReleaseResponse_package::initializeModel() {

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_blob_url_isSet = false;
    m_blob_url_isValid = false;

    m_diff_package_map_isSet = false;
    m_diff_package_map_isValid = false;

    m_is_disabled_isSet = false;
    m_is_disabled_isValid = false;

    m_is_mandatory_isSet = false;
    m_is_mandatory_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_manifest_blob_url_isSet = false;
    m_manifest_blob_url_isValid = false;

    m_release_method_isSet = false;
    m_release_method_isValid = false;

    m_released_by_user_id_isSet = false;
    m_released_by_user_id_isValid = false;

    m_rollout_isSet = false;
    m_rollout_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_upload_time_isSet = false;
    m_upload_time_isValid = false;
}

void OAILegacyCodePushReleaseResponse_package::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegacyCodePushReleaseResponse_package::fromJsonObject(QJsonObject json) {

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_blob_url_isValid = ::OpenAPI::fromJsonValue(m_blob_url, json[QString("blobUrl")]);
    m_blob_url_isSet = !json[QString("blobUrl")].isNull() && m_blob_url_isValid;

    m_diff_package_map_isValid = ::OpenAPI::fromJsonValue(m_diff_package_map, json[QString("diffPackageMap")]);
    m_diff_package_map_isSet = !json[QString("diffPackageMap")].isNull() && m_diff_package_map_isValid;

    m_is_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_disabled, json[QString("isDisabled")]);
    m_is_disabled_isSet = !json[QString("isDisabled")].isNull() && m_is_disabled_isValid;

    m_is_mandatory_isValid = ::OpenAPI::fromJsonValue(m_is_mandatory, json[QString("isMandatory")]);
    m_is_mandatory_isSet = !json[QString("isMandatory")].isNull() && m_is_mandatory_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_manifest_blob_url_isValid = ::OpenAPI::fromJsonValue(m_manifest_blob_url, json[QString("manifestBlobUrl")]);
    m_manifest_blob_url_isSet = !json[QString("manifestBlobUrl")].isNull() && m_manifest_blob_url_isValid;

    m_release_method_isValid = ::OpenAPI::fromJsonValue(m_release_method, json[QString("releaseMethod")]);
    m_release_method_isSet = !json[QString("releaseMethod")].isNull() && m_release_method_isValid;

    m_released_by_user_id_isValid = ::OpenAPI::fromJsonValue(m_released_by_user_id, json[QString("releasedByUserId")]);
    m_released_by_user_id_isSet = !json[QString("releasedByUserId")].isNull() && m_released_by_user_id_isValid;

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_upload_time_isValid = ::OpenAPI::fromJsonValue(m_upload_time, json[QString("uploadTime")]);
    m_upload_time_isSet = !json[QString("uploadTime")].isNull() && m_upload_time_isValid;
}

QString OAILegacyCodePushReleaseResponse_package::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegacyCodePushReleaseResponse_package::asJsonObject() const {
    QJsonObject obj;
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_blob_url_isSet) {
        obj.insert(QString("blobUrl"), ::OpenAPI::toJsonValue(m_blob_url));
    }
    if (m_diff_package_map_isSet) {
        obj.insert(QString("diffPackageMap"), ::OpenAPI::toJsonValue(m_diff_package_map));
    }
    if (m_is_disabled_isSet) {
        obj.insert(QString("isDisabled"), ::OpenAPI::toJsonValue(m_is_disabled));
    }
    if (m_is_mandatory_isSet) {
        obj.insert(QString("isMandatory"), ::OpenAPI::toJsonValue(m_is_mandatory));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_manifest_blob_url_isSet) {
        obj.insert(QString("manifestBlobUrl"), ::OpenAPI::toJsonValue(m_manifest_blob_url));
    }
    if (m_release_method_isSet) {
        obj.insert(QString("releaseMethod"), ::OpenAPI::toJsonValue(m_release_method));
    }
    if (m_released_by_user_id_isSet) {
        obj.insert(QString("releasedByUserId"), ::OpenAPI::toJsonValue(m_released_by_user_id));
    }
    if (m_rollout_isSet) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_upload_time_isSet) {
        obj.insert(QString("uploadTime"), ::OpenAPI::toJsonValue(m_upload_time));
    }
    return obj;
}

QString OAILegacyCodePushReleaseResponse_package::getAppVersion() const {
    return m_app_version;
}
void OAILegacyCodePushReleaseResponse_package::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAILegacyCodePushReleaseResponse_package::getBlobUrl() const {
    return m_blob_url;
}
void OAILegacyCodePushReleaseResponse_package::setBlobUrl(const QString &blob_url) {
    m_blob_url = blob_url;
    m_blob_url_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_blob_url_Set() const{
    return m_blob_url_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_blob_url_Valid() const{
    return m_blob_url_isValid;
}

OAIObject OAILegacyCodePushReleaseResponse_package::getDiffPackageMap() const {
    return m_diff_package_map;
}
void OAILegacyCodePushReleaseResponse_package::setDiffPackageMap(const OAIObject &diff_package_map) {
    m_diff_package_map = diff_package_map;
    m_diff_package_map_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_diff_package_map_Set() const{
    return m_diff_package_map_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_diff_package_map_Valid() const{
    return m_diff_package_map_isValid;
}

bool OAILegacyCodePushReleaseResponse_package::isIsDisabled() const {
    return m_is_disabled;
}
void OAILegacyCodePushReleaseResponse_package::setIsDisabled(const bool &is_disabled) {
    m_is_disabled = is_disabled;
    m_is_disabled_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_is_disabled_Set() const{
    return m_is_disabled_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_is_disabled_Valid() const{
    return m_is_disabled_isValid;
}

bool OAILegacyCodePushReleaseResponse_package::isIsMandatory() const {
    return m_is_mandatory;
}
void OAILegacyCodePushReleaseResponse_package::setIsMandatory(const bool &is_mandatory) {
    m_is_mandatory = is_mandatory;
    m_is_mandatory_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_is_mandatory_Set() const{
    return m_is_mandatory_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_is_mandatory_Valid() const{
    return m_is_mandatory_isValid;
}

QString OAILegacyCodePushReleaseResponse_package::getLabel() const {
    return m_label;
}
void OAILegacyCodePushReleaseResponse_package::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_label_Set() const{
    return m_label_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_label_Valid() const{
    return m_label_isValid;
}

QString OAILegacyCodePushReleaseResponse_package::getManifestBlobUrl() const {
    return m_manifest_blob_url;
}
void OAILegacyCodePushReleaseResponse_package::setManifestBlobUrl(const QString &manifest_blob_url) {
    m_manifest_blob_url = manifest_blob_url;
    m_manifest_blob_url_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_manifest_blob_url_Set() const{
    return m_manifest_blob_url_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_manifest_blob_url_Valid() const{
    return m_manifest_blob_url_isValid;
}

QString OAILegacyCodePushReleaseResponse_package::getReleaseMethod() const {
    return m_release_method;
}
void OAILegacyCodePushReleaseResponse_package::setReleaseMethod(const QString &release_method) {
    m_release_method = release_method;
    m_release_method_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_release_method_Set() const{
    return m_release_method_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_release_method_Valid() const{
    return m_release_method_isValid;
}

QString OAILegacyCodePushReleaseResponse_package::getReleasedByUserId() const {
    return m_released_by_user_id;
}
void OAILegacyCodePushReleaseResponse_package::setReleasedByUserId(const QString &released_by_user_id) {
    m_released_by_user_id = released_by_user_id;
    m_released_by_user_id_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_released_by_user_id_Set() const{
    return m_released_by_user_id_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_released_by_user_id_Valid() const{
    return m_released_by_user_id_isValid;
}

qint32 OAILegacyCodePushReleaseResponse_package::getRollout() const {
    return m_rollout;
}
void OAILegacyCodePushReleaseResponse_package::setRollout(const qint32 &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_rollout_Valid() const{
    return m_rollout_isValid;
}

qint32 OAILegacyCodePushReleaseResponse_package::getSize() const {
    return m_size;
}
void OAILegacyCodePushReleaseResponse_package::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_size_Set() const{
    return m_size_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAILegacyCodePushReleaseResponse_package::getUploadTime() const {
    return m_upload_time;
}
void OAILegacyCodePushReleaseResponse_package::setUploadTime(const qint32 &upload_time) {
    m_upload_time = upload_time;
    m_upload_time_isSet = true;
}

bool OAILegacyCodePushReleaseResponse_package::is_upload_time_Set() const{
    return m_upload_time_isSet;
}

bool OAILegacyCodePushReleaseResponse_package::is_upload_time_Valid() const{
    return m_upload_time_isValid;
}

bool OAILegacyCodePushReleaseResponse_package::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diff_package_map_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_blob_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_released_by_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegacyCodePushReleaseResponse_package::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
