/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild::OAIBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild::OAIBuild() {
    this->initializeModel();
}

OAIBuild::~OAIBuild() {}

void OAIBuild::initializeModel() {

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_changed_date_isSet = false;
    m_last_changed_date_isValid = false;

    m_queue_time_isSet = false;
    m_queue_time_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_source_branch_isSet = false;
    m_source_branch_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild::fromJsonObject(QJsonObject json) {

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("buildNumber")]);
    m_build_number_isSet = !json[QString("buildNumber")].isNull() && m_build_number_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_changed_date_isValid = ::OpenAPI::fromJsonValue(m_last_changed_date, json[QString("lastChangedDate")]);
    m_last_changed_date_isSet = !json[QString("lastChangedDate")].isNull() && m_last_changed_date_isValid;

    m_queue_time_isValid = ::OpenAPI::fromJsonValue(m_queue_time, json[QString("queueTime")]);
    m_queue_time_isSet = !json[QString("queueTime")].isNull() && m_queue_time_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_source_branch_isValid = ::OpenAPI::fromJsonValue(m_source_branch, json[QString("sourceBranch")]);
    m_source_branch_isSet = !json[QString("sourceBranch")].isNull() && m_source_branch_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_build_number_isSet) {
        obj.insert(QString("buildNumber"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_changed_date_isSet) {
        obj.insert(QString("lastChangedDate"), ::OpenAPI::toJsonValue(m_last_changed_date));
    }
    if (m_queue_time_isSet) {
        obj.insert(QString("queueTime"), ::OpenAPI::toJsonValue(m_queue_time));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_source_branch_isSet) {
        obj.insert(QString("sourceBranch"), ::OpenAPI::toJsonValue(m_source_branch));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIBuild::getBuildNumber() const {
    return m_build_number;
}
void OAIBuild::setBuildNumber(const QString &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIBuild::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIBuild::is_build_number_Valid() const{
    return m_build_number_isValid;
}

QString OAIBuild::getFinishTime() const {
    return m_finish_time;
}
void OAIBuild::setFinishTime(const QString &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIBuild::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIBuild::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

qint32 OAIBuild::getId() const {
    return m_id;
}
void OAIBuild::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBuild::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBuild::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBuild::getLastChangedDate() const {
    return m_last_changed_date;
}
void OAIBuild::setLastChangedDate(const QString &last_changed_date) {
    m_last_changed_date = last_changed_date;
    m_last_changed_date_isSet = true;
}

bool OAIBuild::is_last_changed_date_Set() const{
    return m_last_changed_date_isSet;
}

bool OAIBuild::is_last_changed_date_Valid() const{
    return m_last_changed_date_isValid;
}

QString OAIBuild::getQueueTime() const {
    return m_queue_time;
}
void OAIBuild::setQueueTime(const QString &queue_time) {
    m_queue_time = queue_time;
    m_queue_time_isSet = true;
}

bool OAIBuild::is_queue_time_Set() const{
    return m_queue_time_isSet;
}

bool OAIBuild::is_queue_time_Valid() const{
    return m_queue_time_isValid;
}

QString OAIBuild::getResult() const {
    return m_result;
}
void OAIBuild::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIBuild::is_result_Set() const{
    return m_result_isSet;
}

bool OAIBuild::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIBuild::getSourceBranch() const {
    return m_source_branch;
}
void OAIBuild::setSourceBranch(const QString &source_branch) {
    m_source_branch = source_branch;
    m_source_branch_isSet = true;
}

bool OAIBuild::is_source_branch_Set() const{
    return m_source_branch_isSet;
}

bool OAIBuild::is_source_branch_Valid() const{
    return m_source_branch_isValid;
}

QString OAIBuild::getSourceVersion() const {
    return m_source_version;
}
void OAIBuild::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIBuild::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIBuild::is_source_version_Valid() const{
    return m_source_version_isValid;
}

QString OAIBuild::getStartTime() const {
    return m_start_time;
}
void OAIBuild::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBuild::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBuild::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIBuild::getStatus() const {
    return m_status;
}
void OAIBuild::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuild::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuild::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_changed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_build_number_isValid && m_id_isValid && m_queue_time_isValid && m_result_isValid && m_source_branch_isValid && m_source_version_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
