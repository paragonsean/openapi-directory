/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgDistributionGroupDetailsResponse_allOf_apps.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgDistributionGroupDetailsResponse_allOf_apps::OAIOrgDistributionGroupDetailsResponse_allOf_apps(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgDistributionGroupDetailsResponse_allOf_apps::OAIOrgDistributionGroupDetailsResponse_allOf_apps() {
    this->initializeModel();
}

OAIOrgDistributionGroupDetailsResponse_allOf_apps::~OAIOrgDistributionGroupDetailsResponse_allOf_apps() {}

void OAIOrgDistributionGroupDetailsResponse_allOf_apps::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_source_isSet = false;
    m_icon_source_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_release_type_isSet = false;
    m_release_type_isValid = false;

    m_app_secret_isSet = false;
    m_app_secret_isValid = false;

    m_azure_subscription_isSet = false;
    m_azure_subscription_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_member_permissions_isSet = false;
    m_member_permissions_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIOrgDistributionGroupDetailsResponse_allOf_apps::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgDistributionGroupDetailsResponse_allOf_apps::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_icon_source_isValid = ::OpenAPI::fromJsonValue(m_icon_source, json[QString("icon_source")]);
    m_icon_source_isSet = !json[QString("icon_source")].isNull() && m_icon_source_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("icon_url")]);
    m_icon_url_isSet = !json[QString("icon_url")].isNull() && m_icon_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_release_type_isValid = ::OpenAPI::fromJsonValue(m_release_type, json[QString("release_type")]);
    m_release_type_isSet = !json[QString("release_type")].isNull() && m_release_type_isValid;

    m_app_secret_isValid = ::OpenAPI::fromJsonValue(m_app_secret, json[QString("app_secret")]);
    m_app_secret_isSet = !json[QString("app_secret")].isNull() && m_app_secret_isValid;

    m_azure_subscription_isValid = ::OpenAPI::fromJsonValue(m_azure_subscription, json[QString("azure_subscription")]);
    m_azure_subscription_isSet = !json[QString("azure_subscription")].isNull() && m_azure_subscription_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_member_permissions_isValid = ::OpenAPI::fromJsonValue(m_member_permissions, json[QString("member_permissions")]);
    m_member_permissions_isSet = !json[QString("member_permissions")].isNull() && m_member_permissions_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgDistributionGroupDetailsResponse_allOf_apps::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_source_isSet) {
        obj.insert(QString("icon_source"), ::OpenAPI::toJsonValue(m_icon_source));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("icon_url"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_release_type_isSet) {
        obj.insert(QString("release_type"), ::OpenAPI::toJsonValue(m_release_type));
    }
    if (m_app_secret_isSet) {
        obj.insert(QString("app_secret"), ::OpenAPI::toJsonValue(m_app_secret));
    }
    if (m_azure_subscription.isSet()) {
        obj.insert(QString("azure_subscription"), ::OpenAPI::toJsonValue(m_azure_subscription));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_member_permissions.size() > 0) {
        obj.insert(QString("member_permissions"), ::OpenAPI::toJsonValue(m_member_permissions));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getDescription() const {
    return m_description;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getDisplayName() const {
    return m_display_name;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getIconSource() const {
    return m_icon_source;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setIconSource(const QString &icon_source) {
    m_icon_source = icon_source;
    m_icon_source_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_icon_source_Set() const{
    return m_icon_source_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_icon_source_Valid() const{
    return m_icon_source_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getIconUrl() const {
    return m_icon_url;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getId() const {
    return m_id;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getName() const {
    return m_name;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getOs() const {
    return m_os;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_os_Set() const{
    return m_os_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_os_Valid() const{
    return m_os_isValid;
}

OAIApps_list_200_response_inner_allOf_owner OAIOrgDistributionGroupDetailsResponse_allOf_apps::getOwner() const {
    return m_owner;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setOwner(const OAIApps_list_200_response_inner_allOf_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getReleaseType() const {
    return m_release_type;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setReleaseType(const QString &release_type) {
    m_release_type = release_type;
    m_release_type_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_release_type_Set() const{
    return m_release_type_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_release_type_Valid() const{
    return m_release_type_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getAppSecret() const {
    return m_app_secret;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setAppSecret(const QString &app_secret) {
    m_app_secret = app_secret;
    m_app_secret_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_app_secret_Set() const{
    return m_app_secret_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_app_secret_Valid() const{
    return m_app_secret_isValid;
}

OAIApps_list_200_response_inner_allOf_azure_subscription OAIOrgDistributionGroupDetailsResponse_allOf_apps::getAzureSubscription() const {
    return m_azure_subscription;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setAzureSubscription(const OAIApps_list_200_response_inner_allOf_azure_subscription &azure_subscription) {
    m_azure_subscription = azure_subscription;
    m_azure_subscription_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_azure_subscription_Set() const{
    return m_azure_subscription_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_azure_subscription_Valid() const{
    return m_azure_subscription_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getCreatedAt() const {
    return m_created_at;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIOrgDistributionGroupDetailsResponse_allOf_apps::getMemberPermissions() const {
    return m_member_permissions;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setMemberPermissions(const QList<QString> &member_permissions) {
    m_member_permissions = member_permissions;
    m_member_permissions_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_member_permissions_Set() const{
    return m_member_permissions_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_member_permissions_Valid() const{
    return m_member_permissions_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getOrigin() const {
    return m_origin;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getPlatform() const {
    return m_platform;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIOrgDistributionGroupDetailsResponse_allOf_apps::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOrgDistributionGroupDetailsResponse_allOf_apps::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgDistributionGroupDetailsResponse_allOf_apps::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_id_isValid && m_name_isValid && m_os_isValid && m_owner_isValid && m_app_secret_isValid && m_origin_isValid && m_platform_isValid && true;
}

} // namespace OpenAPI
