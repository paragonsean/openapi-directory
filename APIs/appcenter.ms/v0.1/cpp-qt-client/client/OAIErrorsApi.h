/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIErrorsApi_H
#define OAI_OAIErrorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDiagnosticsStackTrace.h"
#include "OAIErrors_AppBuildsList_200_response.h"
#include "OAIErrors_AvailableVersions_200_response.h"
#include "OAIErrors_CountsPerDay_200_response.h"
#include "OAIErrors_DeleteError_200_response.h"
#include "OAIErrors_ErrorAttachmentText_200_response.h"
#include "OAIErrors_ErrorAttachments_200_response_inner.h"
#include "OAIErrors_ErrorGroupsSearch_200_response.h"
#include "OAIErrors_ErrorLocation_200_response.h"
#include "OAIErrors_ErrorSearch_200_response.h"
#include "OAIErrors_GroupDetails_200_response.h"
#include "OAIErrors_GroupErrorFreeDevicePercentages_200_response.h"
#include "OAIErrors_GroupList_200_response.h"
#include "OAIErrors_GroupModelCounts_200_response.h"
#include "OAIErrors_GroupOperatingSystemCounts_200_response.h"
#include "OAIErrors_LatestErrorDetails_200_response.h"
#include "OAIErrors_ListForGroup_200_response.h"
#include "OAIErrors_ListSessionLogs_200_response.h"
#include "OAIErrors_UpdateState_request.h"
#include "OAIErrors_getRetentionSettings_200_response.h"
#include "OAIObject.h"
#include "OAIOrganizations_listAdministered_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIErrorsApi : public QObject {
    Q_OBJECT

public:
    OAIErrorsApi(const int timeOut = 0);
    ~OAIErrorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  error_type QString [optional]
    */
    virtual void errorsAppBuildsList(const QString &version, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &error_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  skip qint64 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  inlinecount QString [optional]
    * @param[in]  error_type QString [optional]
    */
    virtual void errorsAvailableVersions(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &skip = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inlinecount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  version QString [optional]
    * @param[in]  end QDateTime [optional]
    * @param[in]  app_build QString [optional]
    * @param[in]  error_type QString [optional]
    */
    virtual void errorsCountsPerDay(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &app_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  error_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsDeleteError(const QString &error_group_id, const QString &error_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsErrorAttachmentLocation(const QString &error_id, const QString &attachment_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsErrorAttachmentText(const QString &error_id, const QString &attachment_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsErrorAttachments(const QString &error_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  error_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void errorsErrorDownload(const QString &error_group_id, const QString &error_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    * @param[in]  app_build QString [optional]
    * @param[in]  error_type QString [optional]
    */
    virtual void errorsErrorFreeDevicePercentages(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &app_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  skip qint64 [optional]
    */
    virtual void errorsErrorGroupsSearch(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &skip = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  error_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsErrorLocation(const QString &error_group_id, const QString &error_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  skip qint64 [optional]
    */
    virtual void errorsErrorSearch(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &skip = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  error_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsErrorStackTrace(const QString &error_group_id, const QString &error_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  error_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsGetErrorDetails(const QString &error_group_id, const QString &error_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsGetRetentionSettings(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  version QString [optional]
    * @param[in]  end QDateTime [optional]
    */
    virtual void errorsGroupCountsPerDay(const QString &error_group_id, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsGroupDetails(const QString &error_group_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    */
    virtual void errorsGroupErrorFreeDevicePercentages(const QString &error_group_id, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsGroupErrorStackTrace(const QString &error_group_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  version QString [optional]
    * @param[in]  app_build QString [optional]
    * @param[in]  group_state QString [optional]
    * @param[in]  end QDateTime [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  error_type QString [optional]
    */
    virtual void errorsGroupList(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_build = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &error_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  top qint64 [optional]
    */
    virtual void errorsGroupModelCounts(const QString &error_group_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  top qint64 [optional]
    */
    virtual void errorsGroupOperatingSystemCounts(const QString &error_group_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void errorsLatestErrorDetails(const QString &error_group_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  model QString [optional]
    * @param[in]  os QString [optional]
    */
    virtual void errorsListForGroup(const QString &error_group_id, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &os = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  error_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  date QDateTime [optional]
    */
    virtual void errorsListSessionLogs(const QString &error_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  error_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_errors_update_state_request OAIErrors_UpdateState_request [required]
    */
    virtual void errorsUpdateState(const QString &error_group_id, const QString &owner_name, const QString &app_name, const OAIErrors_UpdateState_request &oai_errors_update_state_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void errorsAppBuildsListCallback(OAIHttpRequestWorker *worker);
    void errorsAvailableVersionsCallback(OAIHttpRequestWorker *worker);
    void errorsCountsPerDayCallback(OAIHttpRequestWorker *worker);
    void errorsDeleteErrorCallback(OAIHttpRequestWorker *worker);
    void errorsErrorAttachmentLocationCallback(OAIHttpRequestWorker *worker);
    void errorsErrorAttachmentTextCallback(OAIHttpRequestWorker *worker);
    void errorsErrorAttachmentsCallback(OAIHttpRequestWorker *worker);
    void errorsErrorDownloadCallback(OAIHttpRequestWorker *worker);
    void errorsErrorFreeDevicePercentagesCallback(OAIHttpRequestWorker *worker);
    void errorsErrorGroupsSearchCallback(OAIHttpRequestWorker *worker);
    void errorsErrorLocationCallback(OAIHttpRequestWorker *worker);
    void errorsErrorSearchCallback(OAIHttpRequestWorker *worker);
    void errorsErrorStackTraceCallback(OAIHttpRequestWorker *worker);
    void errorsGetErrorDetailsCallback(OAIHttpRequestWorker *worker);
    void errorsGetRetentionSettingsCallback(OAIHttpRequestWorker *worker);
    void errorsGroupCountsPerDayCallback(OAIHttpRequestWorker *worker);
    void errorsGroupDetailsCallback(OAIHttpRequestWorker *worker);
    void errorsGroupErrorFreeDevicePercentagesCallback(OAIHttpRequestWorker *worker);
    void errorsGroupErrorStackTraceCallback(OAIHttpRequestWorker *worker);
    void errorsGroupListCallback(OAIHttpRequestWorker *worker);
    void errorsGroupModelCountsCallback(OAIHttpRequestWorker *worker);
    void errorsGroupOperatingSystemCountsCallback(OAIHttpRequestWorker *worker);
    void errorsLatestErrorDetailsCallback(OAIHttpRequestWorker *worker);
    void errorsListForGroupCallback(OAIHttpRequestWorker *worker);
    void errorsListSessionLogsCallback(OAIHttpRequestWorker *worker);
    void errorsUpdateStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void errorsAppBuildsListSignal(OAIErrors_AppBuildsList_200_response summary);
    void errorsAvailableVersionsSignal(OAIErrors_AvailableVersions_200_response summary);
    void errorsCountsPerDaySignal(OAIErrors_CountsPerDay_200_response summary);
    void errorsDeleteErrorSignal(OAIErrors_DeleteError_200_response summary);
    void errorsErrorAttachmentLocationSignal(OAIErrors_ErrorLocation_200_response summary);
    void errorsErrorAttachmentTextSignal(OAIErrors_ErrorAttachmentText_200_response summary);
    void errorsErrorAttachmentsSignal(QList<OAIErrors_ErrorAttachments_200_response_inner> summary);
    void errorsErrorDownloadSignal(OAIObject summary);
    void errorsErrorFreeDevicePercentagesSignal(OAIErrors_GroupErrorFreeDevicePercentages_200_response summary);
    void errorsErrorGroupsSearchSignal(OAIErrors_ErrorGroupsSearch_200_response summary);
    void errorsErrorLocationSignal(OAIErrors_ErrorLocation_200_response summary);
    void errorsErrorSearchSignal(OAIErrors_ErrorSearch_200_response summary);
    void errorsErrorStackTraceSignal(OAIDiagnosticsStackTrace summary);
    void errorsGetErrorDetailsSignal(OAIErrors_LatestErrorDetails_200_response summary);
    void errorsGetRetentionSettingsSignal(OAIErrors_getRetentionSettings_200_response summary);
    void errorsGroupCountsPerDaySignal(OAIErrors_CountsPerDay_200_response summary);
    void errorsGroupDetailsSignal(OAIErrors_GroupDetails_200_response summary);
    void errorsGroupErrorFreeDevicePercentagesSignal(OAIErrors_GroupErrorFreeDevicePercentages_200_response summary);
    void errorsGroupErrorStackTraceSignal(OAIDiagnosticsStackTrace summary);
    void errorsGroupListSignal(OAIErrors_GroupList_200_response summary);
    void errorsGroupModelCountsSignal(OAIErrors_GroupModelCounts_200_response summary);
    void errorsGroupOperatingSystemCountsSignal(OAIErrors_GroupOperatingSystemCounts_200_response summary);
    void errorsLatestErrorDetailsSignal(OAIErrors_LatestErrorDetails_200_response summary);
    void errorsListForGroupSignal(OAIErrors_ListForGroup_200_response summary);
    void errorsListSessionLogsSignal(OAIErrors_ListSessionLogs_200_response summary);
    void errorsUpdateStateSignal(OAIErrors_GroupDetails_200_response summary);


    void errorsAppBuildsListSignalFull(OAIHttpRequestWorker *worker, OAIErrors_AppBuildsList_200_response summary);
    void errorsAvailableVersionsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_AvailableVersions_200_response summary);
    void errorsCountsPerDaySignalFull(OAIHttpRequestWorker *worker, OAIErrors_CountsPerDay_200_response summary);
    void errorsDeleteErrorSignalFull(OAIHttpRequestWorker *worker, OAIErrors_DeleteError_200_response summary);
    void errorsErrorAttachmentLocationSignalFull(OAIHttpRequestWorker *worker, OAIErrors_ErrorLocation_200_response summary);
    void errorsErrorAttachmentTextSignalFull(OAIHttpRequestWorker *worker, OAIErrors_ErrorAttachmentText_200_response summary);
    void errorsErrorAttachmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIErrors_ErrorAttachments_200_response_inner> summary);
    void errorsErrorDownloadSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void errorsErrorFreeDevicePercentagesSignalFull(OAIHttpRequestWorker *worker, OAIErrors_GroupErrorFreeDevicePercentages_200_response summary);
    void errorsErrorGroupsSearchSignalFull(OAIHttpRequestWorker *worker, OAIErrors_ErrorGroupsSearch_200_response summary);
    void errorsErrorLocationSignalFull(OAIHttpRequestWorker *worker, OAIErrors_ErrorLocation_200_response summary);
    void errorsErrorSearchSignalFull(OAIHttpRequestWorker *worker, OAIErrors_ErrorSearch_200_response summary);
    void errorsErrorStackTraceSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticsStackTrace summary);
    void errorsGetErrorDetailsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_LatestErrorDetails_200_response summary);
    void errorsGetRetentionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_getRetentionSettings_200_response summary);
    void errorsGroupCountsPerDaySignalFull(OAIHttpRequestWorker *worker, OAIErrors_CountsPerDay_200_response summary);
    void errorsGroupDetailsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_GroupDetails_200_response summary);
    void errorsGroupErrorFreeDevicePercentagesSignalFull(OAIHttpRequestWorker *worker, OAIErrors_GroupErrorFreeDevicePercentages_200_response summary);
    void errorsGroupErrorStackTraceSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosticsStackTrace summary);
    void errorsGroupListSignalFull(OAIHttpRequestWorker *worker, OAIErrors_GroupList_200_response summary);
    void errorsGroupModelCountsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_GroupModelCounts_200_response summary);
    void errorsGroupOperatingSystemCountsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_GroupOperatingSystemCounts_200_response summary);
    void errorsLatestErrorDetailsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_LatestErrorDetails_200_response summary);
    void errorsListForGroupSignalFull(OAIHttpRequestWorker *worker, OAIErrors_ListForGroup_200_response summary);
    void errorsListSessionLogsSignalFull(OAIHttpRequestWorker *worker, OAIErrors_ListSessionLogs_200_response summary);
    void errorsUpdateStateSignalFull(OAIHttpRequestWorker *worker, OAIErrors_GroupDetails_200_response summary);

    Q_DECL_DEPRECATED_X("Use errorsAppBuildsListSignalError() instead")
    void errorsAppBuildsListSignalE(OAIErrors_AppBuildsList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsAppBuildsListSignalError(OAIErrors_AppBuildsList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsAvailableVersionsSignalError() instead")
    void errorsAvailableVersionsSignalE(OAIErrors_AvailableVersions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsAvailableVersionsSignalError(OAIErrors_AvailableVersions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsCountsPerDaySignalError() instead")
    void errorsCountsPerDaySignalE(OAIErrors_CountsPerDay_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsCountsPerDaySignalError(OAIErrors_CountsPerDay_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsDeleteErrorSignalError() instead")
    void errorsDeleteErrorSignalE(OAIErrors_DeleteError_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsDeleteErrorSignalError(OAIErrors_DeleteError_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorAttachmentLocationSignalError() instead")
    void errorsErrorAttachmentLocationSignalE(OAIErrors_ErrorLocation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorAttachmentLocationSignalError(OAIErrors_ErrorLocation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorAttachmentTextSignalError() instead")
    void errorsErrorAttachmentTextSignalE(OAIErrors_ErrorAttachmentText_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorAttachmentTextSignalError(OAIErrors_ErrorAttachmentText_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorAttachmentsSignalError() instead")
    void errorsErrorAttachmentsSignalE(QList<OAIErrors_ErrorAttachments_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorAttachmentsSignalError(QList<OAIErrors_ErrorAttachments_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorDownloadSignalError() instead")
    void errorsErrorDownloadSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorDownloadSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorFreeDevicePercentagesSignalError() instead")
    void errorsErrorFreeDevicePercentagesSignalE(OAIErrors_GroupErrorFreeDevicePercentages_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorFreeDevicePercentagesSignalError(OAIErrors_GroupErrorFreeDevicePercentages_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorGroupsSearchSignalError() instead")
    void errorsErrorGroupsSearchSignalE(OAIErrors_ErrorGroupsSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorGroupsSearchSignalError(OAIErrors_ErrorGroupsSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorLocationSignalError() instead")
    void errorsErrorLocationSignalE(OAIErrors_ErrorLocation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorLocationSignalError(OAIErrors_ErrorLocation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorSearchSignalError() instead")
    void errorsErrorSearchSignalE(OAIErrors_ErrorSearch_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorSearchSignalError(OAIErrors_ErrorSearch_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorStackTraceSignalError() instead")
    void errorsErrorStackTraceSignalE(OAIDiagnosticsStackTrace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorStackTraceSignalError(OAIDiagnosticsStackTrace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGetErrorDetailsSignalError() instead")
    void errorsGetErrorDetailsSignalE(OAIErrors_LatestErrorDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGetErrorDetailsSignalError(OAIErrors_LatestErrorDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGetRetentionSettingsSignalError() instead")
    void errorsGetRetentionSettingsSignalE(OAIErrors_getRetentionSettings_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGetRetentionSettingsSignalError(OAIErrors_getRetentionSettings_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupCountsPerDaySignalError() instead")
    void errorsGroupCountsPerDaySignalE(OAIErrors_CountsPerDay_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupCountsPerDaySignalError(OAIErrors_CountsPerDay_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupDetailsSignalError() instead")
    void errorsGroupDetailsSignalE(OAIErrors_GroupDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupDetailsSignalError(OAIErrors_GroupDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupErrorFreeDevicePercentagesSignalError() instead")
    void errorsGroupErrorFreeDevicePercentagesSignalE(OAIErrors_GroupErrorFreeDevicePercentages_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupErrorFreeDevicePercentagesSignalError(OAIErrors_GroupErrorFreeDevicePercentages_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupErrorStackTraceSignalError() instead")
    void errorsGroupErrorStackTraceSignalE(OAIDiagnosticsStackTrace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupErrorStackTraceSignalError(OAIDiagnosticsStackTrace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupListSignalError() instead")
    void errorsGroupListSignalE(OAIErrors_GroupList_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupListSignalError(OAIErrors_GroupList_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupModelCountsSignalError() instead")
    void errorsGroupModelCountsSignalE(OAIErrors_GroupModelCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupModelCountsSignalError(OAIErrors_GroupModelCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupOperatingSystemCountsSignalError() instead")
    void errorsGroupOperatingSystemCountsSignalE(OAIErrors_GroupOperatingSystemCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupOperatingSystemCountsSignalError(OAIErrors_GroupOperatingSystemCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsLatestErrorDetailsSignalError() instead")
    void errorsLatestErrorDetailsSignalE(OAIErrors_LatestErrorDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsLatestErrorDetailsSignalError(OAIErrors_LatestErrorDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsListForGroupSignalError() instead")
    void errorsListForGroupSignalE(OAIErrors_ListForGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsListForGroupSignalError(OAIErrors_ListForGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsListSessionLogsSignalError() instead")
    void errorsListSessionLogsSignalE(OAIErrors_ListSessionLogs_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsListSessionLogsSignalError(OAIErrors_ListSessionLogs_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsUpdateStateSignalError() instead")
    void errorsUpdateStateSignalE(OAIErrors_GroupDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsUpdateStateSignalError(OAIErrors_GroupDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use errorsAppBuildsListSignalErrorFull() instead")
    void errorsAppBuildsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsAppBuildsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsAvailableVersionsSignalErrorFull() instead")
    void errorsAvailableVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsAvailableVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsCountsPerDaySignalErrorFull() instead")
    void errorsCountsPerDaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsCountsPerDaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsDeleteErrorSignalErrorFull() instead")
    void errorsDeleteErrorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsDeleteErrorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorAttachmentLocationSignalErrorFull() instead")
    void errorsErrorAttachmentLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorAttachmentLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorAttachmentTextSignalErrorFull() instead")
    void errorsErrorAttachmentTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorAttachmentTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorAttachmentsSignalErrorFull() instead")
    void errorsErrorAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorDownloadSignalErrorFull() instead")
    void errorsErrorDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorFreeDevicePercentagesSignalErrorFull() instead")
    void errorsErrorFreeDevicePercentagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorFreeDevicePercentagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorGroupsSearchSignalErrorFull() instead")
    void errorsErrorGroupsSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorGroupsSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorLocationSignalErrorFull() instead")
    void errorsErrorLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorSearchSignalErrorFull() instead")
    void errorsErrorSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsErrorStackTraceSignalErrorFull() instead")
    void errorsErrorStackTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsErrorStackTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGetErrorDetailsSignalErrorFull() instead")
    void errorsGetErrorDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGetErrorDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGetRetentionSettingsSignalErrorFull() instead")
    void errorsGetRetentionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGetRetentionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupCountsPerDaySignalErrorFull() instead")
    void errorsGroupCountsPerDaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupCountsPerDaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupDetailsSignalErrorFull() instead")
    void errorsGroupDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupErrorFreeDevicePercentagesSignalErrorFull() instead")
    void errorsGroupErrorFreeDevicePercentagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupErrorFreeDevicePercentagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupErrorStackTraceSignalErrorFull() instead")
    void errorsGroupErrorStackTraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupErrorStackTraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupListSignalErrorFull() instead")
    void errorsGroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupModelCountsSignalErrorFull() instead")
    void errorsGroupModelCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupModelCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGroupOperatingSystemCountsSignalErrorFull() instead")
    void errorsGroupOperatingSystemCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGroupOperatingSystemCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsLatestErrorDetailsSignalErrorFull() instead")
    void errorsLatestErrorDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsLatestErrorDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsListForGroupSignalErrorFull() instead")
    void errorsListForGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsListForGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsListSessionLogsSignalErrorFull() instead")
    void errorsListSessionLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsListSessionLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsUpdateStateSignalErrorFull() instead")
    void errorsUpdateStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsUpdateStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
