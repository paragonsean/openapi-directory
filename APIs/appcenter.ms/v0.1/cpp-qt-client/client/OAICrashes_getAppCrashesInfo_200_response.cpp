/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrashes_getAppCrashesInfo_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrashes_getAppCrashesInfo_200_response::OAICrashes_getAppCrashesInfo_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrashes_getAppCrashesInfo_200_response::OAICrashes_getAppCrashesInfo_200_response() {
    this->initializeModel();
}

OAICrashes_getAppCrashesInfo_200_response::~OAICrashes_getAppCrashesInfo_200_response() {}

void OAICrashes_getAppCrashesInfo_200_response::initializeModel() {

    m_features_isSet = false;
    m_features_isValid = false;

    m_has_crashes_isSet = false;
    m_has_crashes_isValid = false;
}

void OAICrashes_getAppCrashesInfo_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrashes_getAppCrashesInfo_200_response::fromJsonObject(QJsonObject json) {

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_has_crashes_isValid = ::OpenAPI::fromJsonValue(m_has_crashes, json[QString("has_crashes")]);
    m_has_crashes_isSet = !json[QString("has_crashes")].isNull() && m_has_crashes_isValid;
}

QString OAICrashes_getAppCrashesInfo_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrashes_getAppCrashesInfo_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_features.isSet()) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_has_crashes_isSet) {
        obj.insert(QString("has_crashes"), ::OpenAPI::toJsonValue(m_has_crashes));
    }
    return obj;
}

OAICrashes_getAppCrashesInfo_200_response_features OAICrashes_getAppCrashesInfo_200_response::getFeatures() const {
    return m_features;
}
void OAICrashes_getAppCrashesInfo_200_response::setFeatures(const OAICrashes_getAppCrashesInfo_200_response_features &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAICrashes_getAppCrashesInfo_200_response::is_features_Set() const{
    return m_features_isSet;
}

bool OAICrashes_getAppCrashesInfo_200_response::is_features_Valid() const{
    return m_features_isValid;
}

bool OAICrashes_getAppCrashesInfo_200_response::isHasCrashes() const {
    return m_has_crashes;
}
void OAICrashes_getAppCrashesInfo_200_response::setHasCrashes(const bool &has_crashes) {
    m_has_crashes = has_crashes;
    m_has_crashes_isSet = true;
}

bool OAICrashes_getAppCrashesInfo_200_response::is_has_crashes_Set() const{
    return m_has_crashes_isSet;
}

bool OAICrashes_getAppCrashesInfo_200_response::is_has_crashes_Valid() const{
    return m_has_crashes_isValid;
}

bool OAICrashes_getAppCrashesInfo_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_crashes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrashes_getAppCrashesInfo_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_features_isValid && m_has_crashes_isValid && true;
}

} // namespace OpenAPI
