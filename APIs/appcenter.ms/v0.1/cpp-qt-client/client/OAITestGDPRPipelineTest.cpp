/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestGDPRPipelineTest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestGDPRPipelineTest::OAITestGDPRPipelineTest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestGDPRPipelineTest::OAITestGDPRPipelineTest() {
    this->initializeModel();
}

OAITestGDPRPipelineTest::~OAITestGDPRPipelineTest() {}

void OAITestGDPRPipelineTest::initializeModel() {

    m_app_upload_id_isSet = false;
    m_app_upload_id_isValid = false;

    m_test_parameters_isSet = false;
    m_test_parameters_isValid = false;
}

void OAITestGDPRPipelineTest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestGDPRPipelineTest::fromJsonObject(QJsonObject json) {

    m_app_upload_id_isValid = ::OpenAPI::fromJsonValue(m_app_upload_id, json[QString("app_upload_id")]);
    m_app_upload_id_isSet = !json[QString("app_upload_id")].isNull() && m_app_upload_id_isValid;

    m_test_parameters_isValid = ::OpenAPI::fromJsonValue(m_test_parameters, json[QString("test_parameters")]);
    m_test_parameters_isSet = !json[QString("test_parameters")].isNull() && m_test_parameters_isValid;
}

QString OAITestGDPRPipelineTest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestGDPRPipelineTest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_upload_id_isSet) {
        obj.insert(QString("app_upload_id"), ::OpenAPI::toJsonValue(m_app_upload_id));
    }
    if (m_test_parameters_isSet) {
        obj.insert(QString("test_parameters"), ::OpenAPI::toJsonValue(m_test_parameters));
    }
    return obj;
}

QString OAITestGDPRPipelineTest::getAppUploadId() const {
    return m_app_upload_id;
}
void OAITestGDPRPipelineTest::setAppUploadId(const QString &app_upload_id) {
    m_app_upload_id = app_upload_id;
    m_app_upload_id_isSet = true;
}

bool OAITestGDPRPipelineTest::is_app_upload_id_Set() const{
    return m_app_upload_id_isSet;
}

bool OAITestGDPRPipelineTest::is_app_upload_id_Valid() const{
    return m_app_upload_id_isValid;
}

OAIObject OAITestGDPRPipelineTest::getTestParameters() const {
    return m_test_parameters;
}
void OAITestGDPRPipelineTest::setTestParameters(const OAIObject &test_parameters) {
    m_test_parameters = test_parameters;
    m_test_parameters_isSet = true;
}

bool OAITestGDPRPipelineTest::is_test_parameters_Set() const{
    return m_test_parameters_isSet;
}

bool OAITestGDPRPipelineTest::is_test_parameters_Valid() const{
    return m_test_parameters_isValid;
}

bool OAITestGDPRPipelineTest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestGDPRPipelineTest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
