/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInteractionMetricsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInteractionMetricsResponse::OAIUserInteractionMetricsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInteractionMetricsResponse::OAIUserInteractionMetricsResponse() {
    this->initializeModel();
}

OAIUserInteractionMetricsResponse::~OAIUserInteractionMetricsResponse() {}

void OAIUserInteractionMetricsResponse::initializeModel() {

    m_has_more_than_1_release_isSet = false;
    m_has_more_than_1_release_isValid = false;

    m_less_than_100_apps_isSet = false;
    m_less_than_100_apps_isValid = false;
}

void OAIUserInteractionMetricsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInteractionMetricsResponse::fromJsonObject(QJsonObject json) {

    m_has_more_than_1_release_isValid = ::OpenAPI::fromJsonValue(m_has_more_than_1_release, json[QString("has_more_than_1_release")]);
    m_has_more_than_1_release_isSet = !json[QString("has_more_than_1_release")].isNull() && m_has_more_than_1_release_isValid;

    m_less_than_100_apps_isValid = ::OpenAPI::fromJsonValue(m_less_than_100_apps, json[QString("less_than_100_apps")]);
    m_less_than_100_apps_isSet = !json[QString("less_than_100_apps")].isNull() && m_less_than_100_apps_isValid;
}

QString OAIUserInteractionMetricsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInteractionMetricsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_has_more_than_1_release_isSet) {
        obj.insert(QString("has_more_than_1_release"), ::OpenAPI::toJsonValue(m_has_more_than_1_release));
    }
    if (m_less_than_100_apps_isSet) {
        obj.insert(QString("less_than_100_apps"), ::OpenAPI::toJsonValue(m_less_than_100_apps));
    }
    return obj;
}

bool OAIUserInteractionMetricsResponse::isHasMoreThan1Release() const {
    return m_has_more_than_1_release;
}
void OAIUserInteractionMetricsResponse::setHasMoreThan1Release(const bool &has_more_than_1_release) {
    m_has_more_than_1_release = has_more_than_1_release;
    m_has_more_than_1_release_isSet = true;
}

bool OAIUserInteractionMetricsResponse::is_has_more_than_1_release_Set() const{
    return m_has_more_than_1_release_isSet;
}

bool OAIUserInteractionMetricsResponse::is_has_more_than_1_release_Valid() const{
    return m_has_more_than_1_release_isValid;
}

bool OAIUserInteractionMetricsResponse::isLessThan100Apps() const {
    return m_less_than_100_apps;
}
void OAIUserInteractionMetricsResponse::setLessThan100Apps(const bool &less_than_100_apps) {
    m_less_than_100_apps = less_than_100_apps;
    m_less_than_100_apps_isSet = true;
}

bool OAIUserInteractionMetricsResponse::is_less_than_100_apps_Set() const{
    return m_less_than_100_apps_isSet;
}

bool OAIUserInteractionMetricsResponse::is_less_than_100_apps_Valid() const{
    return m_less_than_100_apps_isValid;
}

bool OAIUserInteractionMetricsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_more_than_1_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_less_than_100_apps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInteractionMetricsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
