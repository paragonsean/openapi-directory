/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewAppReleaseAlertingEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewAppReleaseAlertingEvent::OAINewAppReleaseAlertingEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewAppReleaseAlertingEvent::OAINewAppReleaseAlertingEvent() {
    this->initializeModel();
}

OAINewAppReleaseAlertingEvent::~OAINewAppReleaseAlertingEvent() {}

void OAINewAppReleaseAlertingEvent::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_timestamp_isSet = false;
    m_event_timestamp_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_app_release_properties_isSet = false;
    m_app_release_properties_isValid = false;

    m_disable_webhook_isSet = false;
    m_disable_webhook_isValid = false;

    m_user_ids_isSet = false;
    m_user_ids_isValid = false;
}

void OAINewAppReleaseAlertingEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewAppReleaseAlertingEvent::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("event_id")]);
    m_event_id_isSet = !json[QString("event_id")].isNull() && m_event_id_isValid;

    m_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_event_timestamp, json[QString("event_timestamp")]);
    m_event_timestamp_isSet = !json[QString("event_timestamp")].isNull() && m_event_timestamp_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_app_release_properties_isValid = ::OpenAPI::fromJsonValue(m_app_release_properties, json[QString("app_release_properties")]);
    m_app_release_properties_isSet = !json[QString("app_release_properties")].isNull() && m_app_release_properties_isValid;

    m_disable_webhook_isValid = ::OpenAPI::fromJsonValue(m_disable_webhook, json[QString("disable_webhook")]);
    m_disable_webhook_isSet = !json[QString("disable_webhook")].isNull() && m_disable_webhook_isValid;

    m_user_ids_isValid = ::OpenAPI::fromJsonValue(m_user_ids, json[QString("user_ids")]);
    m_user_ids_isSet = !json[QString("user_ids")].isNull() && m_user_ids_isValid;
}

QString OAINewAppReleaseAlertingEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewAppReleaseAlertingEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("event_id"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_timestamp_isSet) {
        obj.insert(QString("event_timestamp"), ::OpenAPI::toJsonValue(m_event_timestamp));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_app_release_properties.isSet()) {
        obj.insert(QString("app_release_properties"), ::OpenAPI::toJsonValue(m_app_release_properties));
    }
    if (m_disable_webhook_isSet) {
        obj.insert(QString("disable_webhook"), ::OpenAPI::toJsonValue(m_disable_webhook));
    }
    if (m_user_ids.size() > 0) {
        obj.insert(QString("user_ids"), ::OpenAPI::toJsonValue(m_user_ids));
    }
    return obj;
}

QString OAINewAppReleaseAlertingEvent::getEventId() const {
    return m_event_id;
}
void OAINewAppReleaseAlertingEvent::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAINewAppReleaseAlertingEvent::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAINewAppReleaseAlertingEvent::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAINewAppReleaseAlertingEvent::getEventTimestamp() const {
    return m_event_timestamp;
}
void OAINewAppReleaseAlertingEvent::setEventTimestamp(const QString &event_timestamp) {
    m_event_timestamp = event_timestamp;
    m_event_timestamp_isSet = true;
}

bool OAINewAppReleaseAlertingEvent::is_event_timestamp_Set() const{
    return m_event_timestamp_isSet;
}

bool OAINewAppReleaseAlertingEvent::is_event_timestamp_Valid() const{
    return m_event_timestamp_isValid;
}

OAIObject OAINewAppReleaseAlertingEvent::getProperties() const {
    return m_properties;
}
void OAINewAppReleaseAlertingEvent::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAINewAppReleaseAlertingEvent::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAINewAppReleaseAlertingEvent::is_properties_Valid() const{
    return m_properties_isValid;
}

OAINewAppReleaseAlertingEvent_allOf_app_release_properties OAINewAppReleaseAlertingEvent::getAppReleaseProperties() const {
    return m_app_release_properties;
}
void OAINewAppReleaseAlertingEvent::setAppReleaseProperties(const OAINewAppReleaseAlertingEvent_allOf_app_release_properties &app_release_properties) {
    m_app_release_properties = app_release_properties;
    m_app_release_properties_isSet = true;
}

bool OAINewAppReleaseAlertingEvent::is_app_release_properties_Set() const{
    return m_app_release_properties_isSet;
}

bool OAINewAppReleaseAlertingEvent::is_app_release_properties_Valid() const{
    return m_app_release_properties_isValid;
}

bool OAINewAppReleaseAlertingEvent::isDisableWebhook() const {
    return m_disable_webhook;
}
void OAINewAppReleaseAlertingEvent::setDisableWebhook(const bool &disable_webhook) {
    m_disable_webhook = disable_webhook;
    m_disable_webhook_isSet = true;
}

bool OAINewAppReleaseAlertingEvent::is_disable_webhook_Set() const{
    return m_disable_webhook_isSet;
}

bool OAINewAppReleaseAlertingEvent::is_disable_webhook_Valid() const{
    return m_disable_webhook_isValid;
}

QList<QString> OAINewAppReleaseAlertingEvent::getUserIds() const {
    return m_user_ids;
}
void OAINewAppReleaseAlertingEvent::setUserIds(const QList<QString> &user_ids) {
    m_user_ids = user_ids;
    m_user_ids_isSet = true;
}

bool OAINewAppReleaseAlertingEvent::is_user_ids_Set() const{
    return m_user_ids_isSet;
}

bool OAINewAppReleaseAlertingEvent::is_user_ids_Valid() const{
    return m_user_ids_isValid;
}

bool OAINewAppReleaseAlertingEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_release_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewAppReleaseAlertingEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_id_isValid && m_event_timestamp_isValid && true;
}

} // namespace OpenAPI
