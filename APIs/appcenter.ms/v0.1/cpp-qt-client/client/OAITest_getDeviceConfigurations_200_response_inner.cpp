/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_getDeviceConfigurations_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_getDeviceConfigurations_200_response_inner::OAITest_getDeviceConfigurations_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_getDeviceConfigurations_200_response_inner::OAITest_getDeviceConfigurations_200_response_inner() {
    this->initializeModel();
}

OAITest_getDeviceConfigurations_200_response_inner::~OAITest_getDeviceConfigurations_200_response_inner() {}

void OAITest_getDeviceConfigurations_200_response_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_market_share_isSet = false;
    m_market_share_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAITest_getDeviceConfigurations_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_getDeviceConfigurations_200_response_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_market_share_isValid = ::OpenAPI::fromJsonValue(m_market_share, json[QString("marketShare")]);
    m_market_share_isSet = !json[QString("marketShare")].isNull() && m_market_share_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAITest_getDeviceConfigurations_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_getDeviceConfigurations_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_market_share_isSet) {
        obj.insert(QString("marketShare"), ::OpenAPI::toJsonValue(m_market_share));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAITest_getDeviceConfigurations_200_response_inner::getId() const {
    return m_id;
}
void OAITest_getDeviceConfigurations_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAITest_getDeviceConfigurations_200_response_inner_image OAITest_getDeviceConfigurations_200_response_inner::getImage() const {
    return m_image;
}
void OAITest_getDeviceConfigurations_200_response_inner::setImage(const OAITest_getDeviceConfigurations_200_response_inner_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_image_Set() const{
    return m_image_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_image_Valid() const{
    return m_image_isValid;
}

double OAITest_getDeviceConfigurations_200_response_inner::getMarketShare() const {
    return m_market_share;
}
void OAITest_getDeviceConfigurations_200_response_inner::setMarketShare(const double &market_share) {
    m_market_share = market_share;
    m_market_share_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_market_share_Set() const{
    return m_market_share_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_market_share_Valid() const{
    return m_market_share_isValid;
}

OAITest_getDeviceConfigurations_200_response_inner_model OAITest_getDeviceConfigurations_200_response_inner::getModel() const {
    return m_model;
}
void OAITest_getDeviceConfigurations_200_response_inner::setModel(const OAITest_getDeviceConfigurations_200_response_inner_model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_model_Set() const{
    return m_model_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_model_Valid() const{
    return m_model_isValid;
}

QString OAITest_getDeviceConfigurations_200_response_inner::getName() const {
    return m_name;
}
void OAITest_getDeviceConfigurations_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITest_getDeviceConfigurations_200_response_inner::getOs() const {
    return m_os;
}
void OAITest_getDeviceConfigurations_200_response_inner::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_os_Set() const{
    return m_os_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_os_Valid() const{
    return m_os_isValid;
}

QString OAITest_getDeviceConfigurations_200_response_inner::getOsName() const {
    return m_os_name;
}
void OAITest_getDeviceConfigurations_200_response_inner::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_os_name_Valid() const{
    return m_os_name_isValid;
}

double OAITest_getDeviceConfigurations_200_response_inner::getTier() const {
    return m_tier;
}
void OAITest_getDeviceConfigurations_200_response_inner::setTier(const double &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAITest_getDeviceConfigurations_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_getDeviceConfigurations_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
