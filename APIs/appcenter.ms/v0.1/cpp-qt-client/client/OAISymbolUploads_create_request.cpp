/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymbolUploads_create_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymbolUploads_create_request::OAISymbolUploads_create_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymbolUploads_create_request::OAISymbolUploads_create_request() {
    this->initializeModel();
}

OAISymbolUploads_create_request::~OAISymbolUploads_create_request() {}

void OAISymbolUploads_create_request::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_client_callback_isSet = false;
    m_client_callback_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_symbol_type_isSet = false;
    m_symbol_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISymbolUploads_create_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymbolUploads_create_request::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_client_callback_isValid = ::OpenAPI::fromJsonValue(m_client_callback, json[QString("client_callback")]);
    m_client_callback_isSet = !json[QString("client_callback")].isNull() && m_client_callback_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_symbol_type_isValid = ::OpenAPI::fromJsonValue(m_symbol_type, json[QString("symbol_type")]);
    m_symbol_type_isSet = !json[QString("symbol_type")].isNull() && m_symbol_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAISymbolUploads_create_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymbolUploads_create_request::asJsonObject() const {
    QJsonObject obj;
    if (m_build_isSet) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_client_callback_isSet) {
        obj.insert(QString("client_callback"), ::OpenAPI::toJsonValue(m_client_callback));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_symbol_type_isSet) {
        obj.insert(QString("symbol_type"), ::OpenAPI::toJsonValue(m_symbol_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISymbolUploads_create_request::getBuild() const {
    return m_build;
}
void OAISymbolUploads_create_request::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAISymbolUploads_create_request::is_build_Set() const{
    return m_build_isSet;
}

bool OAISymbolUploads_create_request::is_build_Valid() const{
    return m_build_isValid;
}

QString OAISymbolUploads_create_request::getClientCallback() const {
    return m_client_callback;
}
void OAISymbolUploads_create_request::setClientCallback(const QString &client_callback) {
    m_client_callback = client_callback;
    m_client_callback_isSet = true;
}

bool OAISymbolUploads_create_request::is_client_callback_Set() const{
    return m_client_callback_isSet;
}

bool OAISymbolUploads_create_request::is_client_callback_Valid() const{
    return m_client_callback_isValid;
}

QString OAISymbolUploads_create_request::getFileName() const {
    return m_file_name;
}
void OAISymbolUploads_create_request::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAISymbolUploads_create_request::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAISymbolUploads_create_request::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAISymbolUploads_create_request::getSymbolType() const {
    return m_symbol_type;
}
void OAISymbolUploads_create_request::setSymbolType(const QString &symbol_type) {
    m_symbol_type = symbol_type;
    m_symbol_type_isSet = true;
}

bool OAISymbolUploads_create_request::is_symbol_type_Set() const{
    return m_symbol_type_isSet;
}

bool OAISymbolUploads_create_request::is_symbol_type_Valid() const{
    return m_symbol_type_isValid;
}

QString OAISymbolUploads_create_request::getVersion() const {
    return m_version;
}
void OAISymbolUploads_create_request::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISymbolUploads_create_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAISymbolUploads_create_request::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISymbolUploads_create_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymbolUploads_create_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_symbol_type_isValid && true;
}

} // namespace OpenAPI
