/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICodepushApi_H
#define OAI_OAICodepushApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranchConfigurations_delete_200_response.h"
#include "OAICodePushAcquisition_getAcquisitionStatus_200_response.h"
#include "OAICodePushAcquisition_updateCheck_200_response.h"
#include "OAICodePushAcquisition_updateDeployStatus_request.h"
#include "OAICodePushDeploymentMetrics_get_200_response_inner.h"
#include "OAICodePushDeploymentRelease_rollback_request.h"
#include "OAICodePushDeploymentReleases_create_request.h"
#include "OAICodePushDeploymentUpload_create_200_response.h"
#include "OAICodePushDeployments_list_200_response_inner.h"
#include "OAICodePushDeployments_list_200_response_inner_latest_release.h"
#include "OAICodePushDeployments_promote_request.h"
#include "OAICodePushDeployments_update_request.h"
#include "OAIDeploymentReleases_update_request.h"
#include "OAILegacyCodePushAcquisition_updateCheck_200_response.h"
#include "OAILegacyCodePushAcquisition_updateInstallsStatus_request.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICodepushApi : public QObject {
    Q_OBJECT

public:
    OAICodepushApi(const int timeOut = 0);
    ~OAICodepushApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void codePushAcquisitionGetAcquisitionStatus();

    /**
    * @param[in]  deployment_key QString [required]
    * @param[in]  app_version QString [required]
    * @param[in]  package_hash QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  client_unique_id QString [optional]
    * @param[in]  is_companion bool [optional]
    * @param[in]  previous_label_or_app_version QString [optional]
    * @param[in]  previous_deployment_key QString [optional]
    */
    virtual void codePushAcquisitionUpdateCheck(const QString &deployment_key, const QString &app_version, const ::OpenAPI::OptionalParam<QString> &package_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_unique_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_companion = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &previous_label_or_app_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &previous_deployment_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_code_push_acquisition_update_deploy_status_request OAICodePushAcquisition_updateDeployStatus_request [required]
    */
    virtual void codePushAcquisitionUpdateDeployStatus(const OAICodePushAcquisition_updateDeployStatus_request &oai_code_push_acquisition_update_deploy_status_request);

    /**
    * @param[in]  oai_code_push_acquisition_update_deploy_status_request OAICodePushAcquisition_updateDeployStatus_request [required]
    */
    virtual void codePushAcquisitionUpdateDownloadStatus(const OAICodePushAcquisition_updateDeployStatus_request &oai_code_push_acquisition_update_deploy_status_request);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void codePushDeploymentMetricsGet(const QString &deployment_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_code_push_deployment_release_rollback_request OAICodePushDeploymentRelease_rollback_request [optional]
    */
    virtual void codePushDeploymentReleaseRollback(const QString &deployment_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAICodePushDeploymentRelease_rollback_request> &oai_code_push_deployment_release_rollback_request = ::OpenAPI::OptionalParam<OAICodePushDeploymentRelease_rollback_request>());

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_code_push_deployment_releases_create_request OAICodePushDeploymentReleases_create_request [required]
    */
    virtual void codePushDeploymentReleasesCreate(const QString &deployment_name, const QString &owner_name, const QString &app_name, const OAICodePushDeploymentReleases_create_request &oai_code_push_deployment_releases_create_request);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void codePushDeploymentReleasesDelete(const QString &deployment_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void codePushDeploymentReleasesGet(const QString &deployment_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void codePushDeploymentUploadCreate(const QString &deployment_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_code_push_deployments_list_200_response_inner OAICodePushDeployments_list_200_response_inner [required]
    */
    virtual void codePushDeploymentsCreate(const QString &owner_name, const QString &app_name, const OAICodePushDeployments_list_200_response_inner &oai_code_push_deployments_list_200_response_inner);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void codePushDeploymentsDelete(const QString &deployment_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void codePushDeploymentsGet(const QString &deployment_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void codePushDeploymentsList(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  promote_deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_code_push_deployments_promote_request OAICodePushDeployments_promote_request [optional]
    */
    virtual void codePushDeploymentsPromote(const QString &deployment_name, const QString &promote_deployment_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAICodePushDeployments_promote_request> &oai_code_push_deployments_promote_request = ::OpenAPI::OptionalParam<OAICodePushDeployments_promote_request>());

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_code_push_deployments_update_request OAICodePushDeployments_update_request [required]
    */
    virtual void codePushDeploymentsUpdate(const QString &deployment_name, const QString &owner_name, const QString &app_name, const OAICodePushDeployments_update_request &oai_code_push_deployments_update_request);

    /**
    * @param[in]  deployment_name QString [required]
    * @param[in]  release_label QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_deployment_releases_update_request OAIDeploymentReleases_update_request [required]
    */
    virtual void deploymentReleasesUpdate(const QString &deployment_name, const QString &release_label, const QString &owner_name, const QString &app_name, const OAIDeploymentReleases_update_request &oai_deployment_releases_update_request);

    /**
    * @param[in]  deployment_key QString [optional]
    * @param[in]  app_version QString [optional]
    * @param[in]  package_hash QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  client_unique_id QString [optional]
    * @param[in]  is_companion QString [optional]
    */
    virtual void legacyCodePushAcquisitionUpdateCheck(const ::OpenAPI::OptionalParam<QString> &deployment_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &package_hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_unique_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &is_companion = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_legacy_code_push_acquisition_update_installs_status_request OAILegacyCodePushAcquisition_updateInstallsStatus_request [required]
    */
    virtual void legacyCodePushAcquisitionUpdateDownloadStatus(const OAILegacyCodePushAcquisition_updateInstallsStatus_request &oai_legacy_code_push_acquisition_update_installs_status_request);

    /**
    * @param[in]  oai_legacy_code_push_acquisition_update_installs_status_request OAILegacyCodePushAcquisition_updateInstallsStatus_request [required]
    */
    virtual void legacyCodePushAcquisitionUpdateInstallsStatus(const OAILegacyCodePushAcquisition_updateInstallsStatus_request &oai_legacy_code_push_acquisition_update_installs_status_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void codePushAcquisitionGetAcquisitionStatusCallback(OAIHttpRequestWorker *worker);
    void codePushAcquisitionUpdateCheckCallback(OAIHttpRequestWorker *worker);
    void codePushAcquisitionUpdateDeployStatusCallback(OAIHttpRequestWorker *worker);
    void codePushAcquisitionUpdateDownloadStatusCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentMetricsGetCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentReleaseRollbackCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentReleasesCreateCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentReleasesDeleteCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentReleasesGetCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentUploadCreateCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentsCreateCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentsDeleteCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentsGetCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentsListCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentsPromoteCallback(OAIHttpRequestWorker *worker);
    void codePushDeploymentsUpdateCallback(OAIHttpRequestWorker *worker);
    void deploymentReleasesUpdateCallback(OAIHttpRequestWorker *worker);
    void legacyCodePushAcquisitionUpdateCheckCallback(OAIHttpRequestWorker *worker);
    void legacyCodePushAcquisitionUpdateDownloadStatusCallback(OAIHttpRequestWorker *worker);
    void legacyCodePushAcquisitionUpdateInstallsStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void codePushAcquisitionGetAcquisitionStatusSignal(OAICodePushAcquisition_getAcquisitionStatus_200_response summary);
    void codePushAcquisitionUpdateCheckSignal(OAICodePushAcquisition_updateCheck_200_response summary);
    void codePushAcquisitionUpdateDeployStatusSignal();
    void codePushAcquisitionUpdateDownloadStatusSignal();
    void codePushDeploymentMetricsGetSignal(QList<OAICodePushDeploymentMetrics_get_200_response_inner> summary);
    void codePushDeploymentReleaseRollbackSignal(OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void codePushDeploymentReleasesCreateSignal(OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void codePushDeploymentReleasesDeleteSignal();
    void codePushDeploymentReleasesGetSignal(QList<OAICodePushDeployments_list_200_response_inner_latest_release> summary);
    void codePushDeploymentUploadCreateSignal(OAICodePushDeploymentUpload_create_200_response summary);
    void codePushDeploymentsCreateSignal(OAICodePushDeployments_list_200_response_inner summary);
    void codePushDeploymentsDeleteSignal();
    void codePushDeploymentsGetSignal(OAICodePushDeployments_list_200_response_inner summary);
    void codePushDeploymentsListSignal(QList<OAICodePushDeployments_list_200_response_inner> summary);
    void codePushDeploymentsPromoteSignal(OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void codePushDeploymentsUpdateSignal();
    void deploymentReleasesUpdateSignal(OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void legacyCodePushAcquisitionUpdateCheckSignal(OAILegacyCodePushAcquisition_updateCheck_200_response summary);
    void legacyCodePushAcquisitionUpdateDownloadStatusSignal();
    void legacyCodePushAcquisitionUpdateInstallsStatusSignal();


    void codePushAcquisitionGetAcquisitionStatusSignalFull(OAIHttpRequestWorker *worker, OAICodePushAcquisition_getAcquisitionStatus_200_response summary);
    void codePushAcquisitionUpdateCheckSignalFull(OAIHttpRequestWorker *worker, OAICodePushAcquisition_updateCheck_200_response summary);
    void codePushAcquisitionUpdateDeployStatusSignalFull(OAIHttpRequestWorker *worker);
    void codePushAcquisitionUpdateDownloadStatusSignalFull(OAIHttpRequestWorker *worker);
    void codePushDeploymentMetricsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICodePushDeploymentMetrics_get_200_response_inner> summary);
    void codePushDeploymentReleaseRollbackSignalFull(OAIHttpRequestWorker *worker, OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void codePushDeploymentReleasesCreateSignalFull(OAIHttpRequestWorker *worker, OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void codePushDeploymentReleasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void codePushDeploymentReleasesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAICodePushDeployments_list_200_response_inner_latest_release> summary);
    void codePushDeploymentUploadCreateSignalFull(OAIHttpRequestWorker *worker, OAICodePushDeploymentUpload_create_200_response summary);
    void codePushDeploymentsCreateSignalFull(OAIHttpRequestWorker *worker, OAICodePushDeployments_list_200_response_inner summary);
    void codePushDeploymentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void codePushDeploymentsGetSignalFull(OAIHttpRequestWorker *worker, OAICodePushDeployments_list_200_response_inner summary);
    void codePushDeploymentsListSignalFull(OAIHttpRequestWorker *worker, QList<OAICodePushDeployments_list_200_response_inner> summary);
    void codePushDeploymentsPromoteSignalFull(OAIHttpRequestWorker *worker, OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void codePushDeploymentsUpdateSignalFull(OAIHttpRequestWorker *worker);
    void deploymentReleasesUpdateSignalFull(OAIHttpRequestWorker *worker, OAICodePushDeployments_list_200_response_inner_latest_release summary);
    void legacyCodePushAcquisitionUpdateCheckSignalFull(OAIHttpRequestWorker *worker, OAILegacyCodePushAcquisition_updateCheck_200_response summary);
    void legacyCodePushAcquisitionUpdateDownloadStatusSignalFull(OAIHttpRequestWorker *worker);
    void legacyCodePushAcquisitionUpdateInstallsStatusSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use codePushAcquisitionGetAcquisitionStatusSignalError() instead")
    void codePushAcquisitionGetAcquisitionStatusSignalE(OAICodePushAcquisition_getAcquisitionStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionGetAcquisitionStatusSignalError(OAICodePushAcquisition_getAcquisitionStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushAcquisitionUpdateCheckSignalError() instead")
    void codePushAcquisitionUpdateCheckSignalE(OAICodePushAcquisition_updateCheck_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionUpdateCheckSignalError(OAICodePushAcquisition_updateCheck_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushAcquisitionUpdateDeployStatusSignalError() instead")
    void codePushAcquisitionUpdateDeployStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionUpdateDeployStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushAcquisitionUpdateDownloadStatusSignalError() instead")
    void codePushAcquisitionUpdateDownloadStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionUpdateDownloadStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentMetricsGetSignalError() instead")
    void codePushDeploymentMetricsGetSignalE(QList<OAICodePushDeploymentMetrics_get_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentMetricsGetSignalError(QList<OAICodePushDeploymentMetrics_get_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleaseRollbackSignalError() instead")
    void codePushDeploymentReleaseRollbackSignalE(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleaseRollbackSignalError(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleasesCreateSignalError() instead")
    void codePushDeploymentReleasesCreateSignalE(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleasesCreateSignalError(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleasesDeleteSignalError() instead")
    void codePushDeploymentReleasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleasesGetSignalError() instead")
    void codePushDeploymentReleasesGetSignalE(QList<OAICodePushDeployments_list_200_response_inner_latest_release> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleasesGetSignalError(QList<OAICodePushDeployments_list_200_response_inner_latest_release> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentUploadCreateSignalError() instead")
    void codePushDeploymentUploadCreateSignalE(OAICodePushDeploymentUpload_create_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentUploadCreateSignalError(OAICodePushDeploymentUpload_create_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsCreateSignalError() instead")
    void codePushDeploymentsCreateSignalE(OAICodePushDeployments_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsCreateSignalError(OAICodePushDeployments_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsDeleteSignalError() instead")
    void codePushDeploymentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsGetSignalError() instead")
    void codePushDeploymentsGetSignalE(OAICodePushDeployments_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsGetSignalError(OAICodePushDeployments_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsListSignalError() instead")
    void codePushDeploymentsListSignalE(QList<OAICodePushDeployments_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsListSignalError(QList<OAICodePushDeployments_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsPromoteSignalError() instead")
    void codePushDeploymentsPromoteSignalE(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsPromoteSignalError(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsUpdateSignalError() instead")
    void codePushDeploymentsUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentReleasesUpdateSignalError() instead")
    void deploymentReleasesUpdateSignalE(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentReleasesUpdateSignalError(OAICodePushDeployments_list_200_response_inner_latest_release summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyCodePushAcquisitionUpdateCheckSignalError() instead")
    void legacyCodePushAcquisitionUpdateCheckSignalE(OAILegacyCodePushAcquisition_updateCheck_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyCodePushAcquisitionUpdateCheckSignalError(OAILegacyCodePushAcquisition_updateCheck_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyCodePushAcquisitionUpdateDownloadStatusSignalError() instead")
    void legacyCodePushAcquisitionUpdateDownloadStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void legacyCodePushAcquisitionUpdateDownloadStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyCodePushAcquisitionUpdateInstallsStatusSignalError() instead")
    void legacyCodePushAcquisitionUpdateInstallsStatusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void legacyCodePushAcquisitionUpdateInstallsStatusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use codePushAcquisitionGetAcquisitionStatusSignalErrorFull() instead")
    void codePushAcquisitionGetAcquisitionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionGetAcquisitionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushAcquisitionUpdateCheckSignalErrorFull() instead")
    void codePushAcquisitionUpdateCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionUpdateCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushAcquisitionUpdateDeployStatusSignalErrorFull() instead")
    void codePushAcquisitionUpdateDeployStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionUpdateDeployStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushAcquisitionUpdateDownloadStatusSignalErrorFull() instead")
    void codePushAcquisitionUpdateDownloadStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushAcquisitionUpdateDownloadStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentMetricsGetSignalErrorFull() instead")
    void codePushDeploymentMetricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentMetricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleaseRollbackSignalErrorFull() instead")
    void codePushDeploymentReleaseRollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleaseRollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleasesCreateSignalErrorFull() instead")
    void codePushDeploymentReleasesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleasesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleasesDeleteSignalErrorFull() instead")
    void codePushDeploymentReleasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentReleasesGetSignalErrorFull() instead")
    void codePushDeploymentReleasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentReleasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentUploadCreateSignalErrorFull() instead")
    void codePushDeploymentUploadCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentUploadCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsCreateSignalErrorFull() instead")
    void codePushDeploymentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsDeleteSignalErrorFull() instead")
    void codePushDeploymentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsGetSignalErrorFull() instead")
    void codePushDeploymentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsListSignalErrorFull() instead")
    void codePushDeploymentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsPromoteSignalErrorFull() instead")
    void codePushDeploymentsPromoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsPromoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePushDeploymentsUpdateSignalErrorFull() instead")
    void codePushDeploymentsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePushDeploymentsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deploymentReleasesUpdateSignalErrorFull() instead")
    void deploymentReleasesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deploymentReleasesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyCodePushAcquisitionUpdateCheckSignalErrorFull() instead")
    void legacyCodePushAcquisitionUpdateCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyCodePushAcquisitionUpdateCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyCodePushAcquisitionUpdateDownloadStatusSignalErrorFull() instead")
    void legacyCodePushAcquisitionUpdateDownloadStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyCodePushAcquisitionUpdateDownloadStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use legacyCodePushAcquisitionUpdateInstallsStatusSignalErrorFull() instead")
    void legacyCodePushAcquisitionUpdateInstallsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void legacyCodePushAcquisitionUpdateInstallsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
