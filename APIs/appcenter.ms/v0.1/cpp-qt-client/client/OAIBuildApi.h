/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuildApi_H
#define OAI_OAIBuildApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranchConfigurations_delete_200_response.h"
#include "OAIBranchConfigurations_get_200_response.h"
#include "OAIBranchConfigurations_update_request.h"
#include "OAIBuildConfigurations_get_200_response.h"
#include "OAIBuilds_create_request.h"
#include "OAIBuilds_distribute_200_response.h"
#include "OAIBuilds_distribute_request.h"
#include "OAIBuilds_getDownloadUri_200_response.h"
#include "OAIBuilds_getLog_200_response.h"
#include "OAIBuilds_getStatusByAppId_200_response.h"
#include "OAIBuilds_listBranches_200_response_inner.h"
#include "OAIBuilds_listBranches_200_response_inner_lastBuild.h"
#include "OAIBuilds_listBranches_default_response.h"
#include "OAIBuilds_listToolsetProjects_200_response.h"
#include "OAIBuilds_listToolsets_200_response.h"
#include "OAIBuilds_listToolsets_200_response_xamarin_inner.h"
#include "OAIBuilds_listToolsets_200_response_xcode_inner.h"
#include "OAIBuilds_update_request.h"
#include "OAICommits_listByShaList_200_response_inner.h"
#include "OAIFileAssets_create_200_response.h"
#include "OAIObject.h"
#include "OAIRepositories_list_200_response_inner.h"
#include "OAIRepositoryConfigurations_createOrUpdate_request.h"
#include "OAIRepositoryConfigurations_list_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuildApi : public QObject {
    Q_OBJECT

public:
    OAIBuildApi(const int timeOut = 0);
    ~OAIBuildApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  branch QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_branch_configurations_update_request OAIBranchConfigurations_update_request [required]
    */
    virtual void branchConfigurationsCreate(const QString &branch, const QString &owner_name, const QString &app_name, const OAIBranchConfigurations_update_request &oai_branch_configurations_update_request);

    /**
    * @param[in]  branch QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void branchConfigurationsDelete(const QString &branch, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  branch QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void branchConfigurationsGet(const QString &branch, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  branch QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_branch_configurations_update_request OAIBranchConfigurations_update_request [required]
    */
    virtual void branchConfigurationsUpdate(const QString &branch, const QString &owner_name, const QString &app_name, const OAIBranchConfigurations_update_request &oai_branch_configurations_update_request);

    /**
    * @param[in]  branch QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  format QString [optional]
    */
    virtual void buildConfigurationsGet(const QString &branch, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  branch QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_builds_create_request OAIBuilds_create_request [optional]
    */
    virtual void buildsCreate(const QString &branch, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIBuilds_create_request> &oai_builds_create_request = ::OpenAPI::OptionalParam<OAIBuilds_create_request>());

    /**
    * @param[in]  build_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_builds_distribute_request OAIBuilds_distribute_request [required]
    */
    virtual void buildsDistribute(const qint32 &build_id, const QString &owner_name, const QString &app_name, const OAIBuilds_distribute_request &oai_builds_distribute_request);

    /**
    * @param[in]  build_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void buildsGet(const qint32 &build_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  build_id qint32 [required]
    * @param[in]  download_type QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void buildsGetDownloadUri(const qint32 &build_id, const QString &download_type, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  build_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void buildsGetLog(const qint32 &build_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void buildsGetStatusByAppId(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void buildsListBranches(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  branch QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void buildsListByBranch(const QString &branch, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  branch QString [required]
    * @param[in]  os QString [required]
    * @param[in]  platform QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  max_search_depth qint32 [optional]
    */
    virtual void buildsListToolsetProjects(const QString &branch, const QString &os, const QString &platform, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<qint32> &max_search_depth = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  tools QString [optional]
    */
    virtual void buildsListToolsets(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &tools = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void buildsListXamarinSDKBundles(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void buildsListXcodeVersions(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  build_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_builds_update_request OAIBuilds_update_request [required]
    */
    virtual void buildsUpdate(const qint32 &build_id, const QString &owner_name, const QString &app_name, const OAIBuilds_update_request &oai_builds_update_request);

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void buildsWebhook(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  hashes QList<QString> [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void commitsListByShaList(const QList<QString> &hashes, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void fileAssetsCreate(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  source_host QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  vsts_account_name QString [optional]
    * @param[in]  vsts_project_id QString [optional]
    * @param[in]  service_connection_id QString [optional]
    * @param[in]  form QString [optional]
    */
    virtual void repositoriesList(const QString &source_host, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &vsts_account_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vsts_project_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_connection_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_repository_configurations_create_or_update_request OAIRepositoryConfigurations_createOrUpdate_request [required]
    */
    virtual void repositoryConfigurationsCreateOrUpdate(const QString &owner_name, const QString &app_name, const OAIRepositoryConfigurations_createOrUpdate_request &oai_repository_configurations_create_or_update_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void repositoryConfigurationsDelete(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  include_inactive bool [optional]
    */
    virtual void repositoryConfigurationsList(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &include_inactive = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void branchConfigurationsCreateCallback(OAIHttpRequestWorker *worker);
    void branchConfigurationsDeleteCallback(OAIHttpRequestWorker *worker);
    void branchConfigurationsGetCallback(OAIHttpRequestWorker *worker);
    void branchConfigurationsUpdateCallback(OAIHttpRequestWorker *worker);
    void buildConfigurationsGetCallback(OAIHttpRequestWorker *worker);
    void buildsCreateCallback(OAIHttpRequestWorker *worker);
    void buildsDistributeCallback(OAIHttpRequestWorker *worker);
    void buildsGetCallback(OAIHttpRequestWorker *worker);
    void buildsGetDownloadUriCallback(OAIHttpRequestWorker *worker);
    void buildsGetLogCallback(OAIHttpRequestWorker *worker);
    void buildsGetStatusByAppIdCallback(OAIHttpRequestWorker *worker);
    void buildsListBranchesCallback(OAIHttpRequestWorker *worker);
    void buildsListByBranchCallback(OAIHttpRequestWorker *worker);
    void buildsListToolsetProjectsCallback(OAIHttpRequestWorker *worker);
    void buildsListToolsetsCallback(OAIHttpRequestWorker *worker);
    void buildsListXamarinSDKBundlesCallback(OAIHttpRequestWorker *worker);
    void buildsListXcodeVersionsCallback(OAIHttpRequestWorker *worker);
    void buildsUpdateCallback(OAIHttpRequestWorker *worker);
    void buildsWebhookCallback(OAIHttpRequestWorker *worker);
    void commitsListByShaListCallback(OAIHttpRequestWorker *worker);
    void fileAssetsCreateCallback(OAIHttpRequestWorker *worker);
    void repositoriesListCallback(OAIHttpRequestWorker *worker);
    void repositoryConfigurationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void repositoryConfigurationsDeleteCallback(OAIHttpRequestWorker *worker);
    void repositoryConfigurationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void branchConfigurationsCreateSignal(OAIBranchConfigurations_get_200_response summary);
    void branchConfigurationsDeleteSignal(OAIBranchConfigurations_delete_200_response summary);
    void branchConfigurationsGetSignal(OAIBranchConfigurations_get_200_response summary);
    void branchConfigurationsUpdateSignal(OAIBranchConfigurations_get_200_response summary);
    void buildConfigurationsGetSignal(OAIBuildConfigurations_get_200_response summary);
    void buildsCreateSignal(OAIBuilds_listBranches_200_response_inner_lastBuild summary);
    void buildsDistributeSignal(OAIBuilds_distribute_200_response summary);
    void buildsGetSignal(OAIBuilds_listBranches_200_response_inner_lastBuild summary);
    void buildsGetDownloadUriSignal(OAIBuilds_getDownloadUri_200_response summary);
    void buildsGetLogSignal(OAIBuilds_getLog_200_response summary);
    void buildsGetStatusByAppIdSignal(OAIBuilds_getStatusByAppId_200_response summary);
    void buildsListBranchesSignal(QList<OAIBuilds_listBranches_200_response_inner> summary);
    void buildsListByBranchSignal(QList<OAIBuilds_listBranches_200_response_inner_lastBuild> summary);
    void buildsListToolsetProjectsSignal(OAIBuilds_listToolsetProjects_200_response summary);
    void buildsListToolsetsSignal(OAIBuilds_listToolsets_200_response summary);
    void buildsListXamarinSDKBundlesSignal(QList<OAIBuilds_listToolsets_200_response_xamarin_inner> summary);
    void buildsListXcodeVersionsSignal(QList<OAIBuilds_listToolsets_200_response_xcode_inner> summary);
    void buildsUpdateSignal(OAIBuilds_listBranches_200_response_inner_lastBuild summary);
    void buildsWebhookSignal();
    void commitsListByShaListSignal(QList<OAICommits_listByShaList_200_response_inner> summary);
    void fileAssetsCreateSignal(OAIFileAssets_create_200_response summary);
    void repositoriesListSignal(QList<OAIRepositories_list_200_response_inner> summary);
    void repositoryConfigurationsCreateOrUpdateSignal(OAIBranchConfigurations_delete_200_response summary);
    void repositoryConfigurationsDeleteSignal(OAIBranchConfigurations_delete_200_response summary);
    void repositoryConfigurationsListSignal(QList<OAIRepositoryConfigurations_list_200_response_inner> summary);


    void branchConfigurationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIBranchConfigurations_get_200_response summary);
    void branchConfigurationsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIBranchConfigurations_delete_200_response summary);
    void branchConfigurationsGetSignalFull(OAIHttpRequestWorker *worker, OAIBranchConfigurations_get_200_response summary);
    void branchConfigurationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBranchConfigurations_get_200_response summary);
    void buildConfigurationsGetSignalFull(OAIHttpRequestWorker *worker, OAIBuildConfigurations_get_200_response summary);
    void buildsCreateSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_listBranches_200_response_inner_lastBuild summary);
    void buildsDistributeSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_distribute_200_response summary);
    void buildsGetSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_listBranches_200_response_inner_lastBuild summary);
    void buildsGetDownloadUriSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_getDownloadUri_200_response summary);
    void buildsGetLogSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_getLog_200_response summary);
    void buildsGetStatusByAppIdSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_getStatusByAppId_200_response summary);
    void buildsListBranchesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBuilds_listBranches_200_response_inner> summary);
    void buildsListByBranchSignalFull(OAIHttpRequestWorker *worker, QList<OAIBuilds_listBranches_200_response_inner_lastBuild> summary);
    void buildsListToolsetProjectsSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_listToolsetProjects_200_response summary);
    void buildsListToolsetsSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_listToolsets_200_response summary);
    void buildsListXamarinSDKBundlesSignalFull(OAIHttpRequestWorker *worker, QList<OAIBuilds_listToolsets_200_response_xamarin_inner> summary);
    void buildsListXcodeVersionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIBuilds_listToolsets_200_response_xcode_inner> summary);
    void buildsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBuilds_listBranches_200_response_inner_lastBuild summary);
    void buildsWebhookSignalFull(OAIHttpRequestWorker *worker);
    void commitsListByShaListSignalFull(OAIHttpRequestWorker *worker, QList<OAICommits_listByShaList_200_response_inner> summary);
    void fileAssetsCreateSignalFull(OAIHttpRequestWorker *worker, OAIFileAssets_create_200_response summary);
    void repositoriesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepositories_list_200_response_inner> summary);
    void repositoryConfigurationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBranchConfigurations_delete_200_response summary);
    void repositoryConfigurationsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIBranchConfigurations_delete_200_response summary);
    void repositoryConfigurationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIRepositoryConfigurations_list_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use branchConfigurationsCreateSignalError() instead")
    void branchConfigurationsCreateSignalE(OAIBranchConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsCreateSignalError(OAIBranchConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use branchConfigurationsDeleteSignalError() instead")
    void branchConfigurationsDeleteSignalE(OAIBranchConfigurations_delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsDeleteSignalError(OAIBranchConfigurations_delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use branchConfigurationsGetSignalError() instead")
    void branchConfigurationsGetSignalE(OAIBranchConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsGetSignalError(OAIBranchConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use branchConfigurationsUpdateSignalError() instead")
    void branchConfigurationsUpdateSignalE(OAIBranchConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsUpdateSignalError(OAIBranchConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildConfigurationsGetSignalError() instead")
    void buildConfigurationsGetSignalE(OAIBuildConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildConfigurationsGetSignalError(OAIBuildConfigurations_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsCreateSignalError() instead")
    void buildsCreateSignalE(OAIBuilds_listBranches_200_response_inner_lastBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsCreateSignalError(OAIBuilds_listBranches_200_response_inner_lastBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsDistributeSignalError() instead")
    void buildsDistributeSignalE(OAIBuilds_distribute_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsDistributeSignalError(OAIBuilds_distribute_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetSignalError() instead")
    void buildsGetSignalE(OAIBuilds_listBranches_200_response_inner_lastBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetSignalError(OAIBuilds_listBranches_200_response_inner_lastBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetDownloadUriSignalError() instead")
    void buildsGetDownloadUriSignalE(OAIBuilds_getDownloadUri_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetDownloadUriSignalError(OAIBuilds_getDownloadUri_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetLogSignalError() instead")
    void buildsGetLogSignalE(OAIBuilds_getLog_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetLogSignalError(OAIBuilds_getLog_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetStatusByAppIdSignalError() instead")
    void buildsGetStatusByAppIdSignalE(OAIBuilds_getStatusByAppId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetStatusByAppIdSignalError(OAIBuilds_getStatusByAppId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListBranchesSignalError() instead")
    void buildsListBranchesSignalE(QList<OAIBuilds_listBranches_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListBranchesSignalError(QList<OAIBuilds_listBranches_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListByBranchSignalError() instead")
    void buildsListByBranchSignalE(QList<OAIBuilds_listBranches_200_response_inner_lastBuild> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListByBranchSignalError(QList<OAIBuilds_listBranches_200_response_inner_lastBuild> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListToolsetProjectsSignalError() instead")
    void buildsListToolsetProjectsSignalE(OAIBuilds_listToolsetProjects_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListToolsetProjectsSignalError(OAIBuilds_listToolsetProjects_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListToolsetsSignalError() instead")
    void buildsListToolsetsSignalE(OAIBuilds_listToolsets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListToolsetsSignalError(OAIBuilds_listToolsets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListXamarinSDKBundlesSignalError() instead")
    void buildsListXamarinSDKBundlesSignalE(QList<OAIBuilds_listToolsets_200_response_xamarin_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListXamarinSDKBundlesSignalError(QList<OAIBuilds_listToolsets_200_response_xamarin_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListXcodeVersionsSignalError() instead")
    void buildsListXcodeVersionsSignalE(QList<OAIBuilds_listToolsets_200_response_xcode_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListXcodeVersionsSignalError(QList<OAIBuilds_listToolsets_200_response_xcode_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsUpdateSignalError() instead")
    void buildsUpdateSignalE(OAIBuilds_listBranches_200_response_inner_lastBuild summary, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsUpdateSignalError(OAIBuilds_listBranches_200_response_inner_lastBuild summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsWebhookSignalError() instead")
    void buildsWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void buildsWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitsListByShaListSignalError() instead")
    void commitsListByShaListSignalE(QList<OAICommits_listByShaList_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commitsListByShaListSignalError(QList<OAICommits_listByShaList_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileAssetsCreateSignalError() instead")
    void fileAssetsCreateSignalE(OAIFileAssets_create_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fileAssetsCreateSignalError(OAIFileAssets_create_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesListSignalError() instead")
    void repositoriesListSignalE(QList<OAIRepositories_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesListSignalError(QList<OAIRepositories_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryConfigurationsCreateOrUpdateSignalError() instead")
    void repositoryConfigurationsCreateOrUpdateSignalE(OAIBranchConfigurations_delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryConfigurationsCreateOrUpdateSignalError(OAIBranchConfigurations_delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryConfigurationsDeleteSignalError() instead")
    void repositoryConfigurationsDeleteSignalE(OAIBranchConfigurations_delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryConfigurationsDeleteSignalError(OAIBranchConfigurations_delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryConfigurationsListSignalError() instead")
    void repositoryConfigurationsListSignalE(QList<OAIRepositoryConfigurations_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryConfigurationsListSignalError(QList<OAIRepositoryConfigurations_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use branchConfigurationsCreateSignalErrorFull() instead")
    void branchConfigurationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use branchConfigurationsDeleteSignalErrorFull() instead")
    void branchConfigurationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use branchConfigurationsGetSignalErrorFull() instead")
    void branchConfigurationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use branchConfigurationsUpdateSignalErrorFull() instead")
    void branchConfigurationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void branchConfigurationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildConfigurationsGetSignalErrorFull() instead")
    void buildConfigurationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildConfigurationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsCreateSignalErrorFull() instead")
    void buildsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsDistributeSignalErrorFull() instead")
    void buildsDistributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsDistributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetSignalErrorFull() instead")
    void buildsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetDownloadUriSignalErrorFull() instead")
    void buildsGetDownloadUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetDownloadUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetLogSignalErrorFull() instead")
    void buildsGetLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsGetStatusByAppIdSignalErrorFull() instead")
    void buildsGetStatusByAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsGetStatusByAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListBranchesSignalErrorFull() instead")
    void buildsListBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListByBranchSignalErrorFull() instead")
    void buildsListByBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListByBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListToolsetProjectsSignalErrorFull() instead")
    void buildsListToolsetProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListToolsetProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListToolsetsSignalErrorFull() instead")
    void buildsListToolsetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListToolsetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListXamarinSDKBundlesSignalErrorFull() instead")
    void buildsListXamarinSDKBundlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListXamarinSDKBundlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsListXcodeVersionsSignalErrorFull() instead")
    void buildsListXcodeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsListXcodeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsUpdateSignalErrorFull() instead")
    void buildsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use buildsWebhookSignalErrorFull() instead")
    void buildsWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void buildsWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commitsListByShaListSignalErrorFull() instead")
    void commitsListByShaListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commitsListByShaListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fileAssetsCreateSignalErrorFull() instead")
    void fileAssetsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fileAssetsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoriesListSignalErrorFull() instead")
    void repositoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryConfigurationsCreateOrUpdateSignalErrorFull() instead")
    void repositoryConfigurationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryConfigurationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryConfigurationsDeleteSignalErrorFull() instead")
    void repositoryConfigurationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryConfigurationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryConfigurationsListSignalErrorFull() instead")
    void repositoryConfigurationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryConfigurationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
