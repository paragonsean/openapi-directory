/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogTraceDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogTraceDefinition::OAILogTraceDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogTraceDefinition::OAILogTraceDefinition() {
    this->initializeModel();
}

OAILogTraceDefinition::~OAILogTraceDefinition() {}

void OAILogTraceDefinition::initializeModel() {

    m_app_secret_isSet = false;
    m_app_secret_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_install_id_isSet = false;
    m_install_id_isValid = false;
}

void OAILogTraceDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogTraceDefinition::fromJsonObject(QJsonObject json) {

    m_app_secret_isValid = ::OpenAPI::fromJsonValue(m_app_secret, json[QString("app_secret")]);
    m_app_secret_isSet = !json[QString("app_secret")].isNull() && m_app_secret_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_install_id_isValid = ::OpenAPI::fromJsonValue(m_install_id, json[QString("install_id")]);
    m_install_id_isSet = !json[QString("install_id")].isNull() && m_install_id_isValid;
}

QString OAILogTraceDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogTraceDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_app_secret_isSet) {
        obj.insert(QString("app_secret"), ::OpenAPI::toJsonValue(m_app_secret));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_install_id_isSet) {
        obj.insert(QString("install_id"), ::OpenAPI::toJsonValue(m_install_id));
    }
    return obj;
}

QString OAILogTraceDefinition::getAppSecret() const {
    return m_app_secret;
}
void OAILogTraceDefinition::setAppSecret(const QString &app_secret) {
    m_app_secret = app_secret;
    m_app_secret_isSet = true;
}

bool OAILogTraceDefinition::is_app_secret_Set() const{
    return m_app_secret_isSet;
}

bool OAILogTraceDefinition::is_app_secret_Valid() const{
    return m_app_secret_isValid;
}

QDateTime OAILogTraceDefinition::getExpiration() const {
    return m_expiration;
}
void OAILogTraceDefinition::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAILogTraceDefinition::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAILogTraceDefinition::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAILogTraceDefinition::getInstallId() const {
    return m_install_id;
}
void OAILogTraceDefinition::setInstallId(const QString &install_id) {
    m_install_id = install_id;
    m_install_id_isSet = true;
}

bool OAILogTraceDefinition::is_install_id_Set() const{
    return m_install_id_isSet;
}

bool OAILogTraceDefinition::is_install_id_Valid() const{
    return m_install_id_isValid;
}

bool OAILogTraceDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogTraceDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_secret_isValid && true;
}

} // namespace OpenAPI
