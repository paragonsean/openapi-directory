/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGDPRValidationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGDPRValidationRequest::OAIGDPRValidationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGDPRValidationRequest::OAIGDPRValidationRequest() {
    this->initializeModel();
}

OAIGDPRValidationRequest::~OAIGDPRValidationRequest() {}

void OAIGDPRValidationRequest::initializeModel() {

    m_hockeyapp_release_ids_isSet = false;
    m_hockeyapp_release_ids_isValid = false;

    m_release_ids_isSet = false;
    m_release_ids_isValid = false;

    m_release_upload_ids_isSet = false;
    m_release_upload_ids_isValid = false;
}

void OAIGDPRValidationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGDPRValidationRequest::fromJsonObject(QJsonObject json) {

    m_hockeyapp_release_ids_isValid = ::OpenAPI::fromJsonValue(m_hockeyapp_release_ids, json[QString("hockeyapp_release_ids")]);
    m_hockeyapp_release_ids_isSet = !json[QString("hockeyapp_release_ids")].isNull() && m_hockeyapp_release_ids_isValid;

    m_release_ids_isValid = ::OpenAPI::fromJsonValue(m_release_ids, json[QString("release_ids")]);
    m_release_ids_isSet = !json[QString("release_ids")].isNull() && m_release_ids_isValid;

    m_release_upload_ids_isValid = ::OpenAPI::fromJsonValue(m_release_upload_ids, json[QString("release_upload_ids")]);
    m_release_upload_ids_isSet = !json[QString("release_upload_ids")].isNull() && m_release_upload_ids_isValid;
}

QString OAIGDPRValidationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGDPRValidationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_hockeyapp_release_ids.size() > 0) {
        obj.insert(QString("hockeyapp_release_ids"), ::OpenAPI::toJsonValue(m_hockeyapp_release_ids));
    }
    if (m_release_ids.size() > 0) {
        obj.insert(QString("release_ids"), ::OpenAPI::toJsonValue(m_release_ids));
    }
    if (m_release_upload_ids.size() > 0) {
        obj.insert(QString("release_upload_ids"), ::OpenAPI::toJsonValue(m_release_upload_ids));
    }
    return obj;
}

QList<qint32> OAIGDPRValidationRequest::getHockeyappReleaseIds() const {
    return m_hockeyapp_release_ids;
}
void OAIGDPRValidationRequest::setHockeyappReleaseIds(const QList<qint32> &hockeyapp_release_ids) {
    m_hockeyapp_release_ids = hockeyapp_release_ids;
    m_hockeyapp_release_ids_isSet = true;
}

bool OAIGDPRValidationRequest::is_hockeyapp_release_ids_Set() const{
    return m_hockeyapp_release_ids_isSet;
}

bool OAIGDPRValidationRequest::is_hockeyapp_release_ids_Valid() const{
    return m_hockeyapp_release_ids_isValid;
}

QList<qint32> OAIGDPRValidationRequest::getReleaseIds() const {
    return m_release_ids;
}
void OAIGDPRValidationRequest::setReleaseIds(const QList<qint32> &release_ids) {
    m_release_ids = release_ids;
    m_release_ids_isSet = true;
}

bool OAIGDPRValidationRequest::is_release_ids_Set() const{
    return m_release_ids_isSet;
}

bool OAIGDPRValidationRequest::is_release_ids_Valid() const{
    return m_release_ids_isValid;
}

QList<QString> OAIGDPRValidationRequest::getReleaseUploadIds() const {
    return m_release_upload_ids;
}
void OAIGDPRValidationRequest::setReleaseUploadIds(const QList<QString> &release_upload_ids) {
    m_release_upload_ids = release_upload_ids;
    m_release_upload_ids_isSet = true;
}

bool OAIGDPRValidationRequest::is_release_upload_ids_Set() const{
    return m_release_upload_ids_isSet;
}

bool OAIGDPRValidationRequest::is_release_upload_ids_Valid() const{
    return m_release_upload_ids_isValid;
}

bool OAIGDPRValidationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hockeyapp_release_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_upload_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGDPRValidationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_release_ids_isValid && true;
}

} // namespace OpenAPI
