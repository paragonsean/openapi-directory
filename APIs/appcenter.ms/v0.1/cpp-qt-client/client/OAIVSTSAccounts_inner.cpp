/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVSTSAccounts_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVSTSAccounts_inner::OAIVSTSAccounts_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVSTSAccounts_inner::OAIVSTSAccounts_inner() {
    this->initializeModel();
}

OAIVSTSAccounts_inner::~OAIVSTSAccounts_inner() {}

void OAIVSTSAccounts_inner::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_status_isSet = false;
    m_account_status_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_account_uri_isSet = false;
    m_account_uri_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIVSTSAccounts_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVSTSAccounts_inner::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("accountName")]);
    m_account_name_isSet = !json[QString("accountName")].isNull() && m_account_name_isValid;

    m_account_status_isValid = ::OpenAPI::fromJsonValue(m_account_status, json[QString("accountStatus")]);
    m_account_status_isSet = !json[QString("accountStatus")].isNull() && m_account_status_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_account_uri_isValid = ::OpenAPI::fromJsonValue(m_account_uri, json[QString("accountUri")]);
    m_account_uri_isSet = !json[QString("accountUri")].isNull() && m_account_uri_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIVSTSAccounts_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVSTSAccounts_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("accountName"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_status_isSet) {
        obj.insert(QString("accountStatus"), ::OpenAPI::toJsonValue(m_account_status));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_account_uri_isSet) {
        obj.insert(QString("accountUri"), ::OpenAPI::toJsonValue(m_account_uri));
    }
    if (m_projects.size() > 0) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIVSTSAccounts_inner::getAccountId() const {
    return m_account_id;
}
void OAIVSTSAccounts_inner::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIVSTSAccounts_inner::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIVSTSAccounts_inner::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIVSTSAccounts_inner::getAccountName() const {
    return m_account_name;
}
void OAIVSTSAccounts_inner::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIVSTSAccounts_inner::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIVSTSAccounts_inner::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIVSTSAccounts_inner::getAccountStatus() const {
    return m_account_status;
}
void OAIVSTSAccounts_inner::setAccountStatus(const QString &account_status) {
    m_account_status = account_status;
    m_account_status_isSet = true;
}

bool OAIVSTSAccounts_inner::is_account_status_Set() const{
    return m_account_status_isSet;
}

bool OAIVSTSAccounts_inner::is_account_status_Valid() const{
    return m_account_status_isValid;
}

QString OAIVSTSAccounts_inner::getAccountType() const {
    return m_account_type;
}
void OAIVSTSAccounts_inner::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIVSTSAccounts_inner::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIVSTSAccounts_inner::is_account_type_Valid() const{
    return m_account_type_isValid;
}

QString OAIVSTSAccounts_inner::getAccountUri() const {
    return m_account_uri;
}
void OAIVSTSAccounts_inner::setAccountUri(const QString &account_uri) {
    m_account_uri = account_uri;
    m_account_uri_isSet = true;
}

bool OAIVSTSAccounts_inner::is_account_uri_Set() const{
    return m_account_uri_isSet;
}

bool OAIVSTSAccounts_inner::is_account_uri_Valid() const{
    return m_account_uri_isValid;
}

QList<OAIVSTSAccount_projects_inner> OAIVSTSAccounts_inner::getProjects() const {
    return m_projects;
}
void OAIVSTSAccounts_inner::setProjects(const QList<OAIVSTSAccount_projects_inner> &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIVSTSAccounts_inner::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIVSTSAccounts_inner::is_projects_Valid() const{
    return m_projects_isValid;
}

OAIVSTSAccount_user OAIVSTSAccounts_inner::getUser() const {
    return m_user;
}
void OAIVSTSAccounts_inner::setUser(const OAIVSTSAccount_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIVSTSAccounts_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIVSTSAccounts_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIVSTSAccounts_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVSTSAccounts_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
