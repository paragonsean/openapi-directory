/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppInvitations_createByEmail_request.h"
#include "OAIAppInvitations_create_request.h"
#include "OAIAppInvitations_list_200_response.h"
#include "OAIAppInvitations_list_200_response_invited_by.h"
#include "OAIAppInvitations_updatePermissions_request.h"
#include "OAIApps_create_request.h"
#include "OAIApps_getTeams_200_response_inner.h"
#include "OAIApps_list_200_response_inner.h"
#include "OAIApps_list_200_response_inner_allOf_azure_subscription.h"
#include "OAIApps_updateUserPermissions_request.h"
#include "OAIApps_update_request.h"
#include "OAIAzureSubscription_linkForApp_request.h"
#include "OAIDistributionGroups_addApps_request.h"
#include "OAIDistributionGroups_addApps_request_apps_inner.h"
#include "OAIDistributionGroups_addUser_200_response_inner.h"
#include "OAIDistributionGroups_addUser_request.h"
#include "OAIDistributionGroups_bulkDeleteApps_request.h"
#include "OAIDistributionGroups_create_request.h"
#include "OAIDistributionGroups_detailsForOrg_200_response_inner.h"
#include "OAIDistributionGroups_getApps_200_response_inner.h"
#include "OAIDistributionGroups_listAllTestersForOrg_200_response_inner.h"
#include "OAIDistributionGroups_listUsers_200_response_inner.h"
#include "OAIDistributionGroups_list_200_response_inner.h"
#include "OAIDistributionGroups_removeUser_200_response_inner.h"
#include "OAIDistributionGroups_update_request.h"
#include "OAIHttpFileElement.h"
#include "OAIInvitations_sent_200_response_inner.h"
#include "OAIObject.h"
#include "OAIOrgInvitations_delete_request.h"
#include "OAIOrgInvitations_listPending_200_response_inner.h"
#include "OAIOrgInvitations_update_request.h"
#include "OAIOrganizations_createOrUpdate_request.h"
#include "OAIOrganizations_listAdministered_200_response.h"
#include "OAIOrganizations_listAdministered_200_response_organizations.h"
#include "OAIOrganizations_listAdministered_default_response.h"
#include "OAIOrganizations_listAdministered_default_response_error.h"
#include "OAIOrganizations_list_200_response_inner.h"
#include "OAIOrganizations_update_request.h"
#include "OAISharedconnection_Connections_200_response_inner.h"
#include "OAITeams_createTeam_request.h"
#include "OAITeams_getUsers_200_response.h"
#include "OAITeams_listAll_200_response_inner.h"
#include "OAITeams_listApps_200_response_inner.h"
#include "OAITeams_updatePermissions_request.h"
#include "OAITeams_update_request.h"
#include "OAIUserApiTokens_list_200_response_inner.h"
#include "OAIUserApiTokens_new_201_response.h"
#include "OAIUserApiTokens_new_request.h"
#include "OAIUsers_getUserMetadata_200_response.h"
#include "OAIUsers_getUserMetadata_default_response.h"
#include "OAIUsers_listForOrg_200_response_inner.h"
#include "OAIUsers_update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  api_token_id QString [required]
    */
    virtual void appApiTokensDelete(const QString &owner_name, const QString &app_name, const QString &api_token_id);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void appApiTokensList(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_user_api_tokens_new_request OAIUserApiTokens_new_request [optional]
    */
    virtual void appApiTokensNew(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIUserApiTokens_new_request> &oai_user_api_tokens_new_request = ::OpenAPI::OptionalParam<OAIUserApiTokens_new_request>());

    /**
    * @param[in]  invitation_token QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void appInvitationsAccept(const QString &invitation_token, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_app_invitations_create_request OAIAppInvitations_create_request [optional]
    */
    virtual void appInvitationsCreate(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIAppInvitations_create_request> &oai_app_invitations_create_request = ::OpenAPI::OptionalParam<OAIAppInvitations_create_request>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  user_email QString [required]
    * @param[in]  oai_app_invitations_create_by_email_request OAIAppInvitations_createByEmail_request [optional]
    */
    Q_DECL_DEPRECATED virtual void appInvitationsCreateByEmail(const QString &owner_name, const QString &app_name, const QString &user_email, const ::OpenAPI::OptionalParam<OAIAppInvitations_createByEmail_request> &oai_app_invitations_create_by_email_request = ::OpenAPI::OptionalParam<OAIAppInvitations_createByEmail_request>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  user_email QString [required]
    */
    virtual void appInvitationsDelete(const QString &owner_name, const QString &app_name, const QString &user_email);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void appInvitationsList(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  invitation_token QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void appInvitationsReject(const QString &invitation_token, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  user_email QString [required]
    * @param[in]  oai_app_invitations_update_permissions_request OAIAppInvitations_updatePermissions_request [required]
    */
    virtual void appInvitationsUpdatePermissions(const QString &owner_name, const QString &app_name, const QString &user_email, const OAIAppInvitations_updatePermissions_request &oai_app_invitations_update_permissions_request);

    /**
    * @param[in]  oai_apps_create_request OAIApps_create_request [required]
    */
    virtual void appsCreate(const OAIApps_create_request &oai_apps_create_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  oai_apps_create_request OAIApps_create_request [required]
    */
    virtual void appsCreateForOrg(const QString &org_name, const OAIApps_create_request &oai_apps_create_request);

    /**
    * @param[in]  app_name QString [required]
    * @param[in]  owner_name QString [required]
    */
    virtual void appsDelete(const QString &app_name, const QString &owner_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void appsDeleteAvatar(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void appsGet(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  user_name QString [required]
    */
    virtual void appsGetForOrgUser(const QString &org_name, const QString &user_name);

    /**
    * @param[in]  app_name QString [required]
    * @param[in]  owner_name QString [required]
    */
    virtual void appsGetTeams(const QString &app_name, const QString &owner_name);

    /**
    * @param[in]  order_by QString [optional]
    */
    virtual void appsList(const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void appsListForOrg(const QString &org_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void appsListTesters(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  user_email QString [required]
    */
    virtual void appsRemoveUser(const QString &owner_name, const QString &app_name, const QString &user_email);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  destination_owner_name QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void appsTransferOwnership(const QString &owner_name, const QString &app_name, const QString &destination_owner_name, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void appsTransferToOrg(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  app_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  oai_apps_update_request OAIApps_update_request [optional]
    */
    virtual void appsUpdate(const QString &app_name, const QString &owner_name, const ::OpenAPI::OptionalParam<OAIApps_update_request> &oai_apps_update_request = ::OpenAPI::OptionalParam<OAIApps_update_request>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  avatar OAIHttpFileElement [optional]
    */
    virtual void appsUpdateAvatar(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &avatar = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  user_email QString [required]
    * @param[in]  oai_apps_update_user_permissions_request OAIApps_updateUserPermissions_request [required]
    */
    virtual void appsUpdateUserPermissions(const QString &owner_name, const QString &app_name, const QString &user_email, const OAIApps_updateUserPermissions_request &oai_apps_update_user_permissions_request);

    /**
    * @param[in]  azure_subscription_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void azureSubscriptionDeleteForApp(const QString &azure_subscription_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_azure_subscription_link_for_app_request OAIAzureSubscription_linkForApp_request [required]
    */
    virtual void azureSubscriptionLinkForApp(const QString &owner_name, const QString &app_name, const OAIAzureSubscription_linkForApp_request &oai_azure_subscription_link_for_app_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void azureSubscriptionListForApp(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void azureSubscriptionListForOrg(const QString &org_name);


    virtual void azureSubscriptionListForUser();

    /**
    * @param[in]  body OAIObject [optional]
    */
    virtual void distributionGroupInvitationsAcceptAll(const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_add_apps_request OAIDistributionGroups_addApps_request [required]
    */
    virtual void distributionGroupsAddApps(const QString &org_name, const QString &distribution_group_name, const OAIDistributionGroups_addApps_request &oai_distribution_groups_add_apps_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_add_user_request OAIDistributionGroups_addUser_request [required]
    */
    virtual void distributionGroupsAddUser(const QString &owner_name, const QString &app_name, const QString &distribution_group_name, const OAIDistributionGroups_addUser_request &oai_distribution_groups_add_user_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_add_user_request OAIDistributionGroups_addUser_request [required]
    */
    virtual void distributionGroupsAddUsersForOrg(const QString &org_name, const QString &distribution_group_name, const OAIDistributionGroups_addUser_request &oai_distribution_groups_add_user_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_bulk_delete_apps_request OAIDistributionGroups_bulkDeleteApps_request [required]
    */
    virtual void distributionGroupsBulkDeleteApps(const QString &org_name, const QString &distribution_group_name, const OAIDistributionGroups_bulkDeleteApps_request &oai_distribution_groups_bulk_delete_apps_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_add_user_request OAIDistributionGroups_addUser_request [required]
    */
    virtual void distributionGroupsBulkDeleteUsers(const QString &org_name, const QString &distribution_group_name, const OAIDistributionGroups_addUser_request &oai_distribution_groups_add_user_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_distribution_groups_create_request OAIDistributionGroups_create_request [required]
    */
    virtual void distributionGroupsCreate(const QString &owner_name, const QString &app_name, const OAIDistributionGroups_create_request &oai_distribution_groups_create_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  oai_distribution_groups_create_request OAIDistributionGroups_create_request [required]
    */
    virtual void distributionGroupsCreateForOrg(const QString &org_name, const OAIDistributionGroups_create_request &oai_distribution_groups_create_request);

    /**
    * @param[in]  app_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    */
    virtual void distributionGroupsDelete(const QString &app_name, const QString &owner_name, const QString &distribution_group_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    */
    virtual void distributionGroupsDeleteForOrg(const QString &org_name, const QString &distribution_group_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  apps_limit double [optional]
    */
    virtual void distributionGroupsDetailsForOrg(const QString &org_name, const ::OpenAPI::OptionalParam<double> &apps_limit = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    */
    virtual void distributionGroupsGet(const QString &owner_name, const QString &app_name, const QString &distribution_group_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    */
    virtual void distributionGroupsGetApps(const QString &org_name, const QString &distribution_group_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    */
    virtual void distributionGroupsGetForOrg(const QString &org_name, const QString &distribution_group_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void distributionGroupsList(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void distributionGroupsListAllTestersForOrg(const QString &org_name);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void distributionGroupsListForOrg(const QString &org_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  exclude_pending_invitations bool [optional]
    */
    virtual void distributionGroupsListUsers(const QString &owner_name, const QString &app_name, const QString &distribution_group_name, const ::OpenAPI::OptionalParam<bool> &exclude_pending_invitations = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    */
    virtual void distributionGroupsListUsersForOrg(const QString &org_name, const QString &distribution_group_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_update_request OAIDistributionGroups_update_request [optional]
    */
    virtual void distributionGroupsPatchForOrg(const QString &org_name, const QString &distribution_group_name, const ::OpenAPI::OptionalParam<OAIDistributionGroups_update_request> &oai_distribution_groups_update_request = ::OpenAPI::OptionalParam<OAIDistributionGroups_update_request>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_add_user_request OAIDistributionGroups_addUser_request [required]
    */
    virtual void distributionGroupsRemoveUser(const QString &owner_name, const QString &app_name, const QString &distribution_group_name, const OAIDistributionGroups_addUser_request &oai_distribution_groups_add_user_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_add_user_request OAIDistributionGroups_addUser_request [required]
    */
    virtual void distributionGroupsResendInvite(const QString &owner_name, const QString &app_name, const QString &distribution_group_name, const OAIDistributionGroups_addUser_request &oai_distribution_groups_add_user_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_add_user_request OAIDistributionGroups_addUser_request [required]
    */
    virtual void distributionGroupsResendSharedInvite(const QString &org_name, const QString &distribution_group_name, const OAIDistributionGroups_addUser_request &oai_distribution_groups_add_user_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  oai_distribution_groups_update_request OAIDistributionGroups_update_request [required]
    */
    virtual void distributionGroupsUpdate(const QString &owner_name, const QString &app_name, const QString &distribution_group_name, const OAIDistributionGroups_update_request &oai_distribution_groups_update_request);


    virtual void invitationsSent();

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  email QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void orgInvitations(const QString &org_name, const QString &email, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  invitation_token QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void orgInvitationsAccept(const QString &invitation_token, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  oai_app_invitations_create_request OAIAppInvitations_create_request [required]
    */
    virtual void orgInvitationsCreate(const QString &org_name, const OAIAppInvitations_create_request &oai_app_invitations_create_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  oai_org_invitations_delete_request OAIOrgInvitations_delete_request [required]
    */
    virtual void orgInvitationsDelete(const QString &org_name, const OAIOrgInvitations_delete_request &oai_org_invitations_delete_request);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void orgInvitationsListPending(const QString &org_name);

    /**
    * @param[in]  invitation_token QString [required]
    * @param[in]  body OAIObject [optional]
    */
    virtual void orgInvitationsReject(const QString &invitation_token, const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  email QString [required]
    * @param[in]  oai_app_invitations_create_by_email_request OAIAppInvitations_createByEmail_request [optional]
    */
    virtual void orgInvitationsSendNewInvitation(const QString &org_name, const QString &email, const ::OpenAPI::OptionalParam<OAIAppInvitations_createByEmail_request> &oai_app_invitations_create_by_email_request = ::OpenAPI::OptionalParam<OAIAppInvitations_createByEmail_request>());

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  email QString [required]
    * @param[in]  oai_org_invitations_update_request OAIOrgInvitations_update_request [required]
    */
    virtual void orgInvitationsUpdate(const QString &org_name, const QString &email, const OAIOrgInvitations_update_request &oai_org_invitations_update_request);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void organizationDeleteAvatar(const QString &org_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  avatar OAIHttpFileElement [optional]
    */
    virtual void organizationUpdateAvatar(const QString &org_name, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &avatar = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  oai_organizations_create_or_update_request OAIOrganizations_createOrUpdate_request [required]
    */
    virtual void organizationsCreateOrUpdate(const OAIOrganizations_createOrUpdate_request &oai_organizations_create_or_update_request);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void organizationsDelete(const QString &org_name);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void organizationsGet(const QString &org_name);


    virtual void organizationsList();


    virtual void organizationsListAdministered();

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  oai_organizations_update_request OAIOrganizations_update_request [required]
    */
    virtual void organizationsUpdate(const QString &org_name, const OAIOrganizations_update_request &oai_organizations_update_request);


    virtual void sharedconnectionConnections();

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  oai_distribution_groups_add_apps_request_apps_inner OAIDistributionGroups_addApps_request_apps_inner [required]
    */
    virtual void teamsAddApp(const QString &org_name, const QString &team_name, const OAIDistributionGroups_addApps_request_apps_inner &oai_distribution_groups_add_apps_request_apps_inner);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  oai_org_invitations_delete_request OAIOrgInvitations_delete_request [required]
    */
    virtual void teamsAddUser(const QString &org_name, const QString &team_name, const OAIOrgInvitations_delete_request &oai_org_invitations_delete_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  oai_teams_create_team_request OAITeams_createTeam_request [required]
    */
    virtual void teamsCreateTeam(const QString &org_name, const OAITeams_createTeam_request &oai_teams_create_team_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    */
    virtual void teamsDelete(const QString &org_name, const QString &team_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    */
    virtual void teamsGetTeam(const QString &org_name, const QString &team_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    */
    virtual void teamsGetUsers(const QString &org_name, const QString &team_name);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void teamsListAll(const QString &org_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    */
    virtual void teamsListApps(const QString &org_name, const QString &team_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void teamsRemoveApp(const QString &org_name, const QString &team_name, const QString &app_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  user_name QString [required]
    */
    virtual void teamsRemoveUser(const QString &org_name, const QString &team_name, const QString &user_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  oai_teams_update_request OAITeams_update_request [required]
    */
    virtual void teamsUpdate(const QString &org_name, const QString &team_name, const OAITeams_update_request &oai_teams_update_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_teams_update_permissions_request OAITeams_updatePermissions_request [required]
    */
    virtual void teamsUpdatePermissions(const QString &org_name, const QString &team_name, const QString &app_name, const OAITeams_updatePermissions_request &oai_teams_update_permissions_request);

    /**
    * @param[in]  api_token_id QString [required]
    */
    virtual void userApiTokensDelete(const QString &api_token_id);


    virtual void userApiTokensList();

    /**
    * @param[in]  oai_user_api_tokens_new_request OAIUserApiTokens_new_request [optional]
    */
    virtual void userApiTokensNew(const ::OpenAPI::OptionalParam<OAIUserApiTokens_new_request> &oai_user_api_tokens_new_request = ::OpenAPI::OptionalParam<OAIUserApiTokens_new_request>());


    virtual void usersGet();

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  user_name QString [required]
    */
    virtual void usersGetForOrg(const QString &org_name, const QString &user_name);


    virtual void usersGetUserMetadata();

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void usersList(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  org_name QString [required]
    */
    virtual void usersListForOrg(const QString &org_name);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  user_name QString [required]
    */
    virtual void usersRemoveFromOrg(const QString &org_name, const QString &user_name);

    /**
    * @param[in]  oai_users_update_request OAIUsers_update_request [required]
    */
    virtual void usersUpdate(const OAIUsers_update_request &oai_users_update_request);

    /**
    * @param[in]  org_name QString [required]
    * @param[in]  user_name QString [required]
    * @param[in]  oai_org_invitations_update_request OAIOrgInvitations_update_request [required]
    */
    virtual void usersUpdateOrgRole(const QString &org_name, const QString &user_name, const OAIOrgInvitations_update_request &oai_org_invitations_update_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appApiTokensDeleteCallback(OAIHttpRequestWorker *worker);
    void appApiTokensListCallback(OAIHttpRequestWorker *worker);
    void appApiTokensNewCallback(OAIHttpRequestWorker *worker);
    void appInvitationsAcceptCallback(OAIHttpRequestWorker *worker);
    void appInvitationsCreateCallback(OAIHttpRequestWorker *worker);
    void appInvitationsCreateByEmailCallback(OAIHttpRequestWorker *worker);
    void appInvitationsDeleteCallback(OAIHttpRequestWorker *worker);
    void appInvitationsListCallback(OAIHttpRequestWorker *worker);
    void appInvitationsRejectCallback(OAIHttpRequestWorker *worker);
    void appInvitationsUpdatePermissionsCallback(OAIHttpRequestWorker *worker);
    void appsCreateCallback(OAIHttpRequestWorker *worker);
    void appsCreateForOrgCallback(OAIHttpRequestWorker *worker);
    void appsDeleteCallback(OAIHttpRequestWorker *worker);
    void appsDeleteAvatarCallback(OAIHttpRequestWorker *worker);
    void appsGetCallback(OAIHttpRequestWorker *worker);
    void appsGetForOrgUserCallback(OAIHttpRequestWorker *worker);
    void appsGetTeamsCallback(OAIHttpRequestWorker *worker);
    void appsListCallback(OAIHttpRequestWorker *worker);
    void appsListForOrgCallback(OAIHttpRequestWorker *worker);
    void appsListTestersCallback(OAIHttpRequestWorker *worker);
    void appsRemoveUserCallback(OAIHttpRequestWorker *worker);
    void appsTransferOwnershipCallback(OAIHttpRequestWorker *worker);
    void appsTransferToOrgCallback(OAIHttpRequestWorker *worker);
    void appsUpdateCallback(OAIHttpRequestWorker *worker);
    void appsUpdateAvatarCallback(OAIHttpRequestWorker *worker);
    void appsUpdateUserPermissionsCallback(OAIHttpRequestWorker *worker);
    void azureSubscriptionDeleteForAppCallback(OAIHttpRequestWorker *worker);
    void azureSubscriptionLinkForAppCallback(OAIHttpRequestWorker *worker);
    void azureSubscriptionListForAppCallback(OAIHttpRequestWorker *worker);
    void azureSubscriptionListForOrgCallback(OAIHttpRequestWorker *worker);
    void azureSubscriptionListForUserCallback(OAIHttpRequestWorker *worker);
    void distributionGroupInvitationsAcceptAllCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsAddAppsCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsAddUserCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsAddUsersForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsBulkDeleteAppsCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsBulkDeleteUsersCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsCreateCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsCreateForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsDeleteForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsDetailsForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsGetCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsGetAppsCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsGetForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsListCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsListAllTestersForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsListForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsListUsersCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsListUsersForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsPatchForOrgCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsRemoveUserCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsResendInviteCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsResendSharedInviteCallback(OAIHttpRequestWorker *worker);
    void distributionGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void invitationsSentCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsAcceptCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsCreateCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsDeleteCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsListPendingCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsRejectCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsSendNewInvitationCallback(OAIHttpRequestWorker *worker);
    void orgInvitationsUpdateCallback(OAIHttpRequestWorker *worker);
    void organizationDeleteAvatarCallback(OAIHttpRequestWorker *worker);
    void organizationUpdateAvatarCallback(OAIHttpRequestWorker *worker);
    void organizationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void organizationsDeleteCallback(OAIHttpRequestWorker *worker);
    void organizationsGetCallback(OAIHttpRequestWorker *worker);
    void organizationsListCallback(OAIHttpRequestWorker *worker);
    void organizationsListAdministeredCallback(OAIHttpRequestWorker *worker);
    void organizationsUpdateCallback(OAIHttpRequestWorker *worker);
    void sharedconnectionConnectionsCallback(OAIHttpRequestWorker *worker);
    void teamsAddAppCallback(OAIHttpRequestWorker *worker);
    void teamsAddUserCallback(OAIHttpRequestWorker *worker);
    void teamsCreateTeamCallback(OAIHttpRequestWorker *worker);
    void teamsDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsGetTeamCallback(OAIHttpRequestWorker *worker);
    void teamsGetUsersCallback(OAIHttpRequestWorker *worker);
    void teamsListAllCallback(OAIHttpRequestWorker *worker);
    void teamsListAppsCallback(OAIHttpRequestWorker *worker);
    void teamsRemoveAppCallback(OAIHttpRequestWorker *worker);
    void teamsRemoveUserCallback(OAIHttpRequestWorker *worker);
    void teamsUpdateCallback(OAIHttpRequestWorker *worker);
    void teamsUpdatePermissionsCallback(OAIHttpRequestWorker *worker);
    void userApiTokensDeleteCallback(OAIHttpRequestWorker *worker);
    void userApiTokensListCallback(OAIHttpRequestWorker *worker);
    void userApiTokensNewCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersGetForOrgCallback(OAIHttpRequestWorker *worker);
    void usersGetUserMetadataCallback(OAIHttpRequestWorker *worker);
    void usersListCallback(OAIHttpRequestWorker *worker);
    void usersListForOrgCallback(OAIHttpRequestWorker *worker);
    void usersRemoveFromOrgCallback(OAIHttpRequestWorker *worker);
    void usersUpdateCallback(OAIHttpRequestWorker *worker);
    void usersUpdateOrgRoleCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appApiTokensDeleteSignal();
    void appApiTokensListSignal(QList<OAIUserApiTokens_list_200_response_inner> summary);
    void appApiTokensNewSignal(OAIUserApiTokens_new_201_response summary);
    void appInvitationsAcceptSignal();
    void appInvitationsCreateSignal();
    void appInvitationsCreateByEmailSignal();
    void appInvitationsDeleteSignal();
    void appInvitationsListSignal(OAIAppInvitations_list_200_response summary);
    void appInvitationsRejectSignal();
    void appInvitationsUpdatePermissionsSignal();
    void appsCreateSignal(OAIApps_list_200_response_inner summary);
    void appsCreateForOrgSignal(OAIApps_list_200_response_inner summary);
    void appsDeleteSignal();
    void appsDeleteAvatarSignal(OAIApps_list_200_response_inner summary);
    void appsGetSignal(OAIApps_list_200_response_inner summary);
    void appsGetForOrgUserSignal(QList<OAIApps_list_200_response_inner> summary);
    void appsGetTeamsSignal(QList<OAIApps_getTeams_200_response_inner> summary);
    void appsListSignal(QList<OAIApps_list_200_response_inner> summary);
    void appsListForOrgSignal(QList<OAIApps_list_200_response_inner> summary);
    void appsListTestersSignal(QList<OAIAppInvitations_list_200_response_invited_by> summary);
    void appsRemoveUserSignal();
    void appsTransferOwnershipSignal(OAIApps_list_200_response_inner summary);
    void appsTransferToOrgSignal(OAIOrganizations_listAdministered_200_response_organizations summary);
    void appsUpdateSignal(OAIApps_list_200_response_inner summary);
    void appsUpdateAvatarSignal(OAIApps_list_200_response_inner summary);
    void appsUpdateUserPermissionsSignal();
    void azureSubscriptionDeleteForAppSignal();
    void azureSubscriptionLinkForAppSignal();
    void azureSubscriptionListForAppSignal(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary);
    void azureSubscriptionListForOrgSignal(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary);
    void azureSubscriptionListForUserSignal(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary);
    void distributionGroupInvitationsAcceptAllSignal();
    void distributionGroupsAddAppsSignal();
    void distributionGroupsAddUserSignal(QList<OAIDistributionGroups_addUser_200_response_inner> summary);
    void distributionGroupsAddUsersForOrgSignal(QList<OAIDistributionGroups_addUser_200_response_inner> summary);
    void distributionGroupsBulkDeleteAppsSignal();
    void distributionGroupsBulkDeleteUsersSignal();
    void distributionGroupsCreateSignal(OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsCreateForOrgSignal(OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsDeleteSignal();
    void distributionGroupsDeleteForOrgSignal();
    void distributionGroupsDetailsForOrgSignal(QList<OAIDistributionGroups_detailsForOrg_200_response_inner> summary);
    void distributionGroupsGetSignal(OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsGetAppsSignal(QList<OAIDistributionGroups_getApps_200_response_inner> summary);
    void distributionGroupsGetForOrgSignal(OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsListSignal(QList<OAIDistributionGroups_list_200_response_inner> summary);
    void distributionGroupsListAllTestersForOrgSignal(QList<OAIDistributionGroups_listAllTestersForOrg_200_response_inner> summary);
    void distributionGroupsListForOrgSignal(QList<OAIDistributionGroups_list_200_response_inner> summary);
    void distributionGroupsListUsersSignal(QList<OAIDistributionGroups_listUsers_200_response_inner> summary);
    void distributionGroupsListUsersForOrgSignal(QList<OAIDistributionGroups_listUsers_200_response_inner> summary);
    void distributionGroupsPatchForOrgSignal(OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsRemoveUserSignal(QList<OAIDistributionGroups_removeUser_200_response_inner> summary);
    void distributionGroupsResendInviteSignal();
    void distributionGroupsResendSharedInviteSignal();
    void distributionGroupsUpdateSignal(OAIDistributionGroups_list_200_response_inner summary);
    void invitationsSentSignal(QList<OAIInvitations_sent_200_response_inner> summary);
    void orgInvitationsSignal();
    void orgInvitationsAcceptSignal();
    void orgInvitationsCreateSignal();
    void orgInvitationsDeleteSignal();
    void orgInvitationsListPendingSignal(QList<OAIOrgInvitations_listPending_200_response_inner> summary);
    void orgInvitationsRejectSignal();
    void orgInvitationsSendNewInvitationSignal();
    void orgInvitationsUpdateSignal();
    void organizationDeleteAvatarSignal(OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationUpdateAvatarSignal(OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationsCreateOrUpdateSignal(OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationsDeleteSignal();
    void organizationsGetSignal(OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationsListSignal(QList<OAIOrganizations_list_200_response_inner> summary);
    void organizationsListAdministeredSignal(OAIOrganizations_listAdministered_200_response summary);
    void organizationsUpdateSignal(OAIOrganizations_listAdministered_200_response_organizations summary);
    void sharedconnectionConnectionsSignal(QList<OAISharedconnection_Connections_200_response_inner> summary);
    void teamsAddAppSignal(OAITeams_listApps_200_response_inner summary);
    void teamsAddUserSignal(OAITeams_getUsers_200_response summary);
    void teamsCreateTeamSignal(QList<OAITeams_listAll_200_response_inner> summary);
    void teamsDeleteSignal();
    void teamsGetTeamSignal(OAITeams_listAll_200_response_inner summary);
    void teamsGetUsersSignal(OAITeams_getUsers_200_response summary);
    void teamsListAllSignal(QList<OAITeams_listAll_200_response_inner> summary);
    void teamsListAppsSignal(QList<OAITeams_listApps_200_response_inner> summary);
    void teamsRemoveAppSignal();
    void teamsRemoveUserSignal();
    void teamsUpdateSignal(OAITeams_listAll_200_response_inner summary);
    void teamsUpdatePermissionsSignal(OAITeams_listApps_200_response_inner summary);
    void userApiTokensDeleteSignal();
    void userApiTokensListSignal(QList<OAIUserApiTokens_list_200_response_inner> summary);
    void userApiTokensNewSignal(OAIUserApiTokens_new_201_response summary);
    void usersGetSignal(OAIAppInvitations_list_200_response_invited_by summary);
    void usersGetForOrgSignal(OAIUsers_listForOrg_200_response_inner summary);
    void usersGetUserMetadataSignal(OAIUsers_getUserMetadata_200_response summary);
    void usersListSignal(QList<OAIAppInvitations_list_200_response_invited_by> summary);
    void usersListForOrgSignal(QList<OAIUsers_listForOrg_200_response_inner> summary);
    void usersRemoveFromOrgSignal();
    void usersUpdateSignal(OAIAppInvitations_list_200_response_invited_by summary);
    void usersUpdateOrgRoleSignal(OAIUsers_listForOrg_200_response_inner summary);


    void appApiTokensDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appApiTokensListSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserApiTokens_list_200_response_inner> summary);
    void appApiTokensNewSignalFull(OAIHttpRequestWorker *worker, OAIUserApiTokens_new_201_response summary);
    void appInvitationsAcceptSignalFull(OAIHttpRequestWorker *worker);
    void appInvitationsCreateSignalFull(OAIHttpRequestWorker *worker);
    void appInvitationsCreateByEmailSignalFull(OAIHttpRequestWorker *worker);
    void appInvitationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appInvitationsListSignalFull(OAIHttpRequestWorker *worker, OAIAppInvitations_list_200_response summary);
    void appInvitationsRejectSignalFull(OAIHttpRequestWorker *worker);
    void appInvitationsUpdatePermissionsSignalFull(OAIHttpRequestWorker *worker);
    void appsCreateSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_200_response_inner summary);
    void appsCreateForOrgSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_200_response_inner summary);
    void appsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appsDeleteAvatarSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_200_response_inner summary);
    void appsGetSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_200_response_inner summary);
    void appsGetForOrgUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIApps_list_200_response_inner> summary);
    void appsGetTeamsSignalFull(OAIHttpRequestWorker *worker, QList<OAIApps_getTeams_200_response_inner> summary);
    void appsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIApps_list_200_response_inner> summary);
    void appsListForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIApps_list_200_response_inner> summary);
    void appsListTestersSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppInvitations_list_200_response_invited_by> summary);
    void appsRemoveUserSignalFull(OAIHttpRequestWorker *worker);
    void appsTransferOwnershipSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_200_response_inner summary);
    void appsTransferToOrgSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations_listAdministered_200_response_organizations summary);
    void appsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_200_response_inner summary);
    void appsUpdateAvatarSignalFull(OAIHttpRequestWorker *worker, OAIApps_list_200_response_inner summary);
    void appsUpdateUserPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void azureSubscriptionDeleteForAppSignalFull(OAIHttpRequestWorker *worker);
    void azureSubscriptionLinkForAppSignalFull(OAIHttpRequestWorker *worker);
    void azureSubscriptionListForAppSignalFull(OAIHttpRequestWorker *worker, QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary);
    void azureSubscriptionListForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary);
    void azureSubscriptionListForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary);
    void distributionGroupInvitationsAcceptAllSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsAddAppsSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsAddUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_addUser_200_response_inner> summary);
    void distributionGroupsAddUsersForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_addUser_200_response_inner> summary);
    void distributionGroupsBulkDeleteAppsSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsBulkDeleteUsersSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsCreateForOrgSignalFull(OAIHttpRequestWorker *worker, OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsDeleteForOrgSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsDetailsForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_detailsForOrg_200_response_inner> summary);
    void distributionGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsGetAppsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_getApps_200_response_inner> summary);
    void distributionGroupsGetForOrgSignalFull(OAIHttpRequestWorker *worker, OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_list_200_response_inner> summary);
    void distributionGroupsListAllTestersForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_listAllTestersForOrg_200_response_inner> summary);
    void distributionGroupsListForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_list_200_response_inner> summary);
    void distributionGroupsListUsersSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_listUsers_200_response_inner> summary);
    void distributionGroupsListUsersForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_listUsers_200_response_inner> summary);
    void distributionGroupsPatchForOrgSignalFull(OAIHttpRequestWorker *worker, OAIDistributionGroups_list_200_response_inner summary);
    void distributionGroupsRemoveUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIDistributionGroups_removeUser_200_response_inner> summary);
    void distributionGroupsResendInviteSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsResendSharedInviteSignalFull(OAIHttpRequestWorker *worker);
    void distributionGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDistributionGroups_list_200_response_inner summary);
    void invitationsSentSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvitations_sent_200_response_inner> summary);
    void orgInvitationsSignalFull(OAIHttpRequestWorker *worker);
    void orgInvitationsAcceptSignalFull(OAIHttpRequestWorker *worker);
    void orgInvitationsCreateSignalFull(OAIHttpRequestWorker *worker);
    void orgInvitationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void orgInvitationsListPendingSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrgInvitations_listPending_200_response_inner> summary);
    void orgInvitationsRejectSignalFull(OAIHttpRequestWorker *worker);
    void orgInvitationsSendNewInvitationSignalFull(OAIHttpRequestWorker *worker);
    void orgInvitationsUpdateSignalFull(OAIHttpRequestWorker *worker);
    void organizationDeleteAvatarSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationUpdateAvatarSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void organizationsGetSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations_listAdministered_200_response_organizations summary);
    void organizationsListSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizations_list_200_response_inner> summary);
    void organizationsListAdministeredSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations_listAdministered_200_response summary);
    void organizationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOrganizations_listAdministered_200_response_organizations summary);
    void sharedconnectionConnectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAISharedconnection_Connections_200_response_inner> summary);
    void teamsAddAppSignalFull(OAIHttpRequestWorker *worker, OAITeams_listApps_200_response_inner summary);
    void teamsAddUserSignalFull(OAIHttpRequestWorker *worker, OAITeams_getUsers_200_response summary);
    void teamsCreateTeamSignalFull(OAIHttpRequestWorker *worker, QList<OAITeams_listAll_200_response_inner> summary);
    void teamsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void teamsGetTeamSignalFull(OAIHttpRequestWorker *worker, OAITeams_listAll_200_response_inner summary);
    void teamsGetUsersSignalFull(OAIHttpRequestWorker *worker, OAITeams_getUsers_200_response summary);
    void teamsListAllSignalFull(OAIHttpRequestWorker *worker, QList<OAITeams_listAll_200_response_inner> summary);
    void teamsListAppsSignalFull(OAIHttpRequestWorker *worker, QList<OAITeams_listApps_200_response_inner> summary);
    void teamsRemoveAppSignalFull(OAIHttpRequestWorker *worker);
    void teamsRemoveUserSignalFull(OAIHttpRequestWorker *worker);
    void teamsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITeams_listAll_200_response_inner summary);
    void teamsUpdatePermissionsSignalFull(OAIHttpRequestWorker *worker, OAITeams_listApps_200_response_inner summary);
    void userApiTokensDeleteSignalFull(OAIHttpRequestWorker *worker);
    void userApiTokensListSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserApiTokens_list_200_response_inner> summary);
    void userApiTokensNewSignalFull(OAIHttpRequestWorker *worker, OAIUserApiTokens_new_201_response summary);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIAppInvitations_list_200_response_invited_by summary);
    void usersGetForOrgSignalFull(OAIHttpRequestWorker *worker, OAIUsers_listForOrg_200_response_inner summary);
    void usersGetUserMetadataSignalFull(OAIHttpRequestWorker *worker, OAIUsers_getUserMetadata_200_response summary);
    void usersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppInvitations_list_200_response_invited_by> summary);
    void usersListForOrgSignalFull(OAIHttpRequestWorker *worker, QList<OAIUsers_listForOrg_200_response_inner> summary);
    void usersRemoveFromOrgSignalFull(OAIHttpRequestWorker *worker);
    void usersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppInvitations_list_200_response_invited_by summary);
    void usersUpdateOrgRoleSignalFull(OAIHttpRequestWorker *worker, OAIUsers_listForOrg_200_response_inner summary);

    Q_DECL_DEPRECATED_X("Use appApiTokensDeleteSignalError() instead")
    void appApiTokensDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appApiTokensDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appApiTokensListSignalError() instead")
    void appApiTokensListSignalE(QList<OAIUserApiTokens_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appApiTokensListSignalError(QList<OAIUserApiTokens_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appApiTokensNewSignalError() instead")
    void appApiTokensNewSignalE(OAIUserApiTokens_new_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appApiTokensNewSignalError(OAIUserApiTokens_new_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsAcceptSignalError() instead")
    void appInvitationsAcceptSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsAcceptSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsCreateSignalError() instead")
    void appInvitationsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsCreateByEmailSignalError() instead")
    void appInvitationsCreateByEmailSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsCreateByEmailSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsDeleteSignalError() instead")
    void appInvitationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsListSignalError() instead")
    void appInvitationsListSignalE(OAIAppInvitations_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsListSignalError(OAIAppInvitations_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsRejectSignalError() instead")
    void appInvitationsRejectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsRejectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsUpdatePermissionsSignalError() instead")
    void appInvitationsUpdatePermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsUpdatePermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsCreateSignalError() instead")
    void appsCreateSignalE(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCreateSignalError(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsCreateForOrgSignalError() instead")
    void appsCreateForOrgSignalE(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCreateForOrgSignalError(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteSignalError() instead")
    void appsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteAvatarSignalError() instead")
    void appsDeleteAvatarSignalE(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteAvatarSignalError(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalError() instead")
    void appsGetSignalE(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalError(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetForOrgUserSignalError() instead")
    void appsGetForOrgUserSignalE(QList<OAIApps_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetForOrgUserSignalError(QList<OAIApps_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetTeamsSignalError() instead")
    void appsGetTeamsSignalE(QList<OAIApps_getTeams_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetTeamsSignalError(QList<OAIApps_getTeams_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListSignalError() instead")
    void appsListSignalE(QList<OAIApps_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListSignalError(QList<OAIApps_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListForOrgSignalError() instead")
    void appsListForOrgSignalE(QList<OAIApps_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListForOrgSignalError(QList<OAIApps_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListTestersSignalError() instead")
    void appsListTestersSignalE(QList<OAIAppInvitations_list_200_response_invited_by> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListTestersSignalError(QList<OAIAppInvitations_list_200_response_invited_by> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsRemoveUserSignalError() instead")
    void appsRemoveUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsRemoveUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsTransferOwnershipSignalError() instead")
    void appsTransferOwnershipSignalE(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsTransferOwnershipSignalError(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsTransferToOrgSignalError() instead")
    void appsTransferToOrgSignalE(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsTransferToOrgSignalError(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSignalError() instead")
    void appsUpdateSignalE(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSignalError(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateAvatarSignalError() instead")
    void appsUpdateAvatarSignalE(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateAvatarSignalError(OAIApps_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateUserPermissionsSignalError() instead")
    void appsUpdateUserPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateUserPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionDeleteForAppSignalError() instead")
    void azureSubscriptionDeleteForAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionDeleteForAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionLinkForAppSignalError() instead")
    void azureSubscriptionLinkForAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionLinkForAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionListForAppSignalError() instead")
    void azureSubscriptionListForAppSignalE(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionListForAppSignalError(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionListForOrgSignalError() instead")
    void azureSubscriptionListForOrgSignalE(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionListForOrgSignalError(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionListForUserSignalError() instead")
    void azureSubscriptionListForUserSignalE(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionListForUserSignalError(QList<OAIApps_list_200_response_inner_allOf_azure_subscription> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupInvitationsAcceptAllSignalError() instead")
    void distributionGroupInvitationsAcceptAllSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupInvitationsAcceptAllSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsAddAppsSignalError() instead")
    void distributionGroupsAddAppsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsAddAppsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsAddUserSignalError() instead")
    void distributionGroupsAddUserSignalE(QList<OAIDistributionGroups_addUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsAddUserSignalError(QList<OAIDistributionGroups_addUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsAddUsersForOrgSignalError() instead")
    void distributionGroupsAddUsersForOrgSignalE(QList<OAIDistributionGroups_addUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsAddUsersForOrgSignalError(QList<OAIDistributionGroups_addUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsBulkDeleteAppsSignalError() instead")
    void distributionGroupsBulkDeleteAppsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsBulkDeleteAppsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsBulkDeleteUsersSignalError() instead")
    void distributionGroupsBulkDeleteUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsBulkDeleteUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsCreateSignalError() instead")
    void distributionGroupsCreateSignalE(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsCreateSignalError(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsCreateForOrgSignalError() instead")
    void distributionGroupsCreateForOrgSignalE(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsCreateForOrgSignalError(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsDeleteSignalError() instead")
    void distributionGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsDeleteForOrgSignalError() instead")
    void distributionGroupsDeleteForOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsDeleteForOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsDetailsForOrgSignalError() instead")
    void distributionGroupsDetailsForOrgSignalE(QList<OAIDistributionGroups_detailsForOrg_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsDetailsForOrgSignalError(QList<OAIDistributionGroups_detailsForOrg_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsGetSignalError() instead")
    void distributionGroupsGetSignalE(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsGetSignalError(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsGetAppsSignalError() instead")
    void distributionGroupsGetAppsSignalE(QList<OAIDistributionGroups_getApps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsGetAppsSignalError(QList<OAIDistributionGroups_getApps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsGetForOrgSignalError() instead")
    void distributionGroupsGetForOrgSignalE(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsGetForOrgSignalError(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListSignalError() instead")
    void distributionGroupsListSignalE(QList<OAIDistributionGroups_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListSignalError(QList<OAIDistributionGroups_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListAllTestersForOrgSignalError() instead")
    void distributionGroupsListAllTestersForOrgSignalE(QList<OAIDistributionGroups_listAllTestersForOrg_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListAllTestersForOrgSignalError(QList<OAIDistributionGroups_listAllTestersForOrg_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListForOrgSignalError() instead")
    void distributionGroupsListForOrgSignalE(QList<OAIDistributionGroups_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListForOrgSignalError(QList<OAIDistributionGroups_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListUsersSignalError() instead")
    void distributionGroupsListUsersSignalE(QList<OAIDistributionGroups_listUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListUsersSignalError(QList<OAIDistributionGroups_listUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListUsersForOrgSignalError() instead")
    void distributionGroupsListUsersForOrgSignalE(QList<OAIDistributionGroups_listUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListUsersForOrgSignalError(QList<OAIDistributionGroups_listUsers_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsPatchForOrgSignalError() instead")
    void distributionGroupsPatchForOrgSignalE(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsPatchForOrgSignalError(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsRemoveUserSignalError() instead")
    void distributionGroupsRemoveUserSignalE(QList<OAIDistributionGroups_removeUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsRemoveUserSignalError(QList<OAIDistributionGroups_removeUser_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsResendInviteSignalError() instead")
    void distributionGroupsResendInviteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsResendInviteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsResendSharedInviteSignalError() instead")
    void distributionGroupsResendSharedInviteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsResendSharedInviteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsUpdateSignalError() instead")
    void distributionGroupsUpdateSignalE(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsUpdateSignalError(OAIDistributionGroups_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invitationsSentSignalError() instead")
    void invitationsSentSignalE(QList<OAIInvitations_sent_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void invitationsSentSignalError(QList<OAIInvitations_sent_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsSignalError() instead")
    void orgInvitationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsAcceptSignalError() instead")
    void orgInvitationsAcceptSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsAcceptSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsCreateSignalError() instead")
    void orgInvitationsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsDeleteSignalError() instead")
    void orgInvitationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsListPendingSignalError() instead")
    void orgInvitationsListPendingSignalE(QList<OAIOrgInvitations_listPending_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsListPendingSignalError(QList<OAIOrgInvitations_listPending_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsRejectSignalError() instead")
    void orgInvitationsRejectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsRejectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsSendNewInvitationSignalError() instead")
    void orgInvitationsSendNewInvitationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsSendNewInvitationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsUpdateSignalError() instead")
    void orgInvitationsUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationDeleteAvatarSignalError() instead")
    void organizationDeleteAvatarSignalE(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationDeleteAvatarSignalError(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationUpdateAvatarSignalError() instead")
    void organizationUpdateAvatarSignalE(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationUpdateAvatarSignalError(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsCreateOrUpdateSignalError() instead")
    void organizationsCreateOrUpdateSignalE(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsCreateOrUpdateSignalError(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsDeleteSignalError() instead")
    void organizationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsGetSignalError() instead")
    void organizationsGetSignalE(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsGetSignalError(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsListSignalError() instead")
    void organizationsListSignalE(QList<OAIOrganizations_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsListSignalError(QList<OAIOrganizations_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsListAdministeredSignalError() instead")
    void organizationsListAdministeredSignalE(OAIOrganizations_listAdministered_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsListAdministeredSignalError(OAIOrganizations_listAdministered_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsUpdateSignalError() instead")
    void organizationsUpdateSignalE(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsUpdateSignalError(OAIOrganizations_listAdministered_200_response_organizations summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedconnectionConnectionsSignalError() instead")
    void sharedconnectionConnectionsSignalE(QList<OAISharedconnection_Connections_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedconnectionConnectionsSignalError(QList<OAISharedconnection_Connections_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAddAppSignalError() instead")
    void teamsAddAppSignalE(OAITeams_listApps_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAddAppSignalError(OAITeams_listApps_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAddUserSignalError() instead")
    void teamsAddUserSignalE(OAITeams_getUsers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAddUserSignalError(OAITeams_getUsers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsCreateTeamSignalError() instead")
    void teamsCreateTeamSignalE(QList<OAITeams_listAll_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateTeamSignalError(QList<OAITeams_listAll_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteSignalError() instead")
    void teamsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetTeamSignalError() instead")
    void teamsGetTeamSignalE(OAITeams_listAll_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetTeamSignalError(OAITeams_listAll_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetUsersSignalError() instead")
    void teamsGetUsersSignalE(OAITeams_getUsers_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetUsersSignalError(OAITeams_getUsers_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListAllSignalError() instead")
    void teamsListAllSignalE(QList<OAITeams_listAll_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListAllSignalError(QList<OAITeams_listAll_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListAppsSignalError() instead")
    void teamsListAppsSignalE(QList<OAITeams_listApps_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListAppsSignalError(QList<OAITeams_listApps_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsRemoveAppSignalError() instead")
    void teamsRemoveAppSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsRemoveAppSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsRemoveUserSignalError() instead")
    void teamsRemoveUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsRemoveUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateSignalError() instead")
    void teamsUpdateSignalE(OAITeams_listAll_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateSignalError(OAITeams_listAll_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdatePermissionsSignalError() instead")
    void teamsUpdatePermissionsSignalE(OAITeams_listApps_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdatePermissionsSignalError(OAITeams_listApps_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userApiTokensDeleteSignalError() instead")
    void userApiTokensDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void userApiTokensDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userApiTokensListSignalError() instead")
    void userApiTokensListSignalE(QList<OAIUserApiTokens_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userApiTokensListSignalError(QList<OAIUserApiTokens_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userApiTokensNewSignalError() instead")
    void userApiTokensNewSignalE(OAIUserApiTokens_new_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userApiTokensNewSignalError(OAIUserApiTokens_new_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIAppInvitations_list_200_response_invited_by summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIAppInvitations_list_200_response_invited_by summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetForOrgSignalError() instead")
    void usersGetForOrgSignalE(OAIUsers_listForOrg_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetForOrgSignalError(OAIUsers_listForOrg_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetUserMetadataSignalError() instead")
    void usersGetUserMetadataSignalE(OAIUsers_getUserMetadata_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUserMetadataSignalError(OAIUsers_getUserMetadata_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalError() instead")
    void usersListSignalE(QList<OAIAppInvitations_list_200_response_invited_by> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalError(QList<OAIAppInvitations_list_200_response_invited_by> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListForOrgSignalError() instead")
    void usersListForOrgSignalE(QList<OAIUsers_listForOrg_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListForOrgSignalError(QList<OAIUsers_listForOrg_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersRemoveFromOrgSignalError() instead")
    void usersRemoveFromOrgSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersRemoveFromOrgSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalError() instead")
    void usersUpdateSignalE(OAIAppInvitations_list_200_response_invited_by summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalError(OAIAppInvitations_list_200_response_invited_by summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateOrgRoleSignalError() instead")
    void usersUpdateOrgRoleSignalE(OAIUsers_listForOrg_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateOrgRoleSignalError(OAIUsers_listForOrg_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appApiTokensDeleteSignalErrorFull() instead")
    void appApiTokensDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appApiTokensDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appApiTokensListSignalErrorFull() instead")
    void appApiTokensListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appApiTokensListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appApiTokensNewSignalErrorFull() instead")
    void appApiTokensNewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appApiTokensNewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsAcceptSignalErrorFull() instead")
    void appInvitationsAcceptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsAcceptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsCreateSignalErrorFull() instead")
    void appInvitationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsCreateByEmailSignalErrorFull() instead")
    void appInvitationsCreateByEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsCreateByEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsDeleteSignalErrorFull() instead")
    void appInvitationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsListSignalErrorFull() instead")
    void appInvitationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsRejectSignalErrorFull() instead")
    void appInvitationsRejectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsRejectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appInvitationsUpdatePermissionsSignalErrorFull() instead")
    void appInvitationsUpdatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appInvitationsUpdatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsCreateSignalErrorFull() instead")
    void appsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsCreateForOrgSignalErrorFull() instead")
    void appsCreateForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsCreateForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteSignalErrorFull() instead")
    void appsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsDeleteAvatarSignalErrorFull() instead")
    void appsDeleteAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsDeleteAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetSignalErrorFull() instead")
    void appsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetForOrgUserSignalErrorFull() instead")
    void appsGetForOrgUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetForOrgUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsGetTeamsSignalErrorFull() instead")
    void appsGetTeamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsGetTeamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListSignalErrorFull() instead")
    void appsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListForOrgSignalErrorFull() instead")
    void appsListForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsListTestersSignalErrorFull() instead")
    void appsListTestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsListTestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsRemoveUserSignalErrorFull() instead")
    void appsRemoveUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsRemoveUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsTransferOwnershipSignalErrorFull() instead")
    void appsTransferOwnershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsTransferOwnershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsTransferToOrgSignalErrorFull() instead")
    void appsTransferToOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsTransferToOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateSignalErrorFull() instead")
    void appsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateAvatarSignalErrorFull() instead")
    void appsUpdateAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsUpdateUserPermissionsSignalErrorFull() instead")
    void appsUpdateUserPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsUpdateUserPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionDeleteForAppSignalErrorFull() instead")
    void azureSubscriptionDeleteForAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionDeleteForAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionLinkForAppSignalErrorFull() instead")
    void azureSubscriptionLinkForAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionLinkForAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionListForAppSignalErrorFull() instead")
    void azureSubscriptionListForAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionListForAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionListForOrgSignalErrorFull() instead")
    void azureSubscriptionListForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionListForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use azureSubscriptionListForUserSignalErrorFull() instead")
    void azureSubscriptionListForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void azureSubscriptionListForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupInvitationsAcceptAllSignalErrorFull() instead")
    void distributionGroupInvitationsAcceptAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupInvitationsAcceptAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsAddAppsSignalErrorFull() instead")
    void distributionGroupsAddAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsAddAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsAddUserSignalErrorFull() instead")
    void distributionGroupsAddUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsAddUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsAddUsersForOrgSignalErrorFull() instead")
    void distributionGroupsAddUsersForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsAddUsersForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsBulkDeleteAppsSignalErrorFull() instead")
    void distributionGroupsBulkDeleteAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsBulkDeleteAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsBulkDeleteUsersSignalErrorFull() instead")
    void distributionGroupsBulkDeleteUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsBulkDeleteUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsCreateSignalErrorFull() instead")
    void distributionGroupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsCreateForOrgSignalErrorFull() instead")
    void distributionGroupsCreateForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsCreateForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsDeleteSignalErrorFull() instead")
    void distributionGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsDeleteForOrgSignalErrorFull() instead")
    void distributionGroupsDeleteForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsDeleteForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsDetailsForOrgSignalErrorFull() instead")
    void distributionGroupsDetailsForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsDetailsForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsGetSignalErrorFull() instead")
    void distributionGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsGetAppsSignalErrorFull() instead")
    void distributionGroupsGetAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsGetAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsGetForOrgSignalErrorFull() instead")
    void distributionGroupsGetForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsGetForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListSignalErrorFull() instead")
    void distributionGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListAllTestersForOrgSignalErrorFull() instead")
    void distributionGroupsListAllTestersForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListAllTestersForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListForOrgSignalErrorFull() instead")
    void distributionGroupsListForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListUsersSignalErrorFull() instead")
    void distributionGroupsListUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsListUsersForOrgSignalErrorFull() instead")
    void distributionGroupsListUsersForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsListUsersForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsPatchForOrgSignalErrorFull() instead")
    void distributionGroupsPatchForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsPatchForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsRemoveUserSignalErrorFull() instead")
    void distributionGroupsRemoveUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsRemoveUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsResendInviteSignalErrorFull() instead")
    void distributionGroupsResendInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsResendInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsResendSharedInviteSignalErrorFull() instead")
    void distributionGroupsResendSharedInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsResendSharedInviteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distributionGroupsUpdateSignalErrorFull() instead")
    void distributionGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distributionGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use invitationsSentSignalErrorFull() instead")
    void invitationsSentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void invitationsSentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsSignalErrorFull() instead")
    void orgInvitationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsAcceptSignalErrorFull() instead")
    void orgInvitationsAcceptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsAcceptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsCreateSignalErrorFull() instead")
    void orgInvitationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsDeleteSignalErrorFull() instead")
    void orgInvitationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsListPendingSignalErrorFull() instead")
    void orgInvitationsListPendingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsListPendingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsRejectSignalErrorFull() instead")
    void orgInvitationsRejectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsRejectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsSendNewInvitationSignalErrorFull() instead")
    void orgInvitationsSendNewInvitationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsSendNewInvitationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use orgInvitationsUpdateSignalErrorFull() instead")
    void orgInvitationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void orgInvitationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationDeleteAvatarSignalErrorFull() instead")
    void organizationDeleteAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationDeleteAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationUpdateAvatarSignalErrorFull() instead")
    void organizationUpdateAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationUpdateAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsCreateOrUpdateSignalErrorFull() instead")
    void organizationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsDeleteSignalErrorFull() instead")
    void organizationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsGetSignalErrorFull() instead")
    void organizationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsListSignalErrorFull() instead")
    void organizationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsListAdministeredSignalErrorFull() instead")
    void organizationsListAdministeredSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsListAdministeredSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use organizationsUpdateSignalErrorFull() instead")
    void organizationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void organizationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharedconnectionConnectionsSignalErrorFull() instead")
    void sharedconnectionConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharedconnectionConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAddAppSignalErrorFull() instead")
    void teamsAddAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAddAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsAddUserSignalErrorFull() instead")
    void teamsAddUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsAddUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsCreateTeamSignalErrorFull() instead")
    void teamsCreateTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteSignalErrorFull() instead")
    void teamsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetTeamSignalErrorFull() instead")
    void teamsGetTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetUsersSignalErrorFull() instead")
    void teamsGetUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListAllSignalErrorFull() instead")
    void teamsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListAppsSignalErrorFull() instead")
    void teamsListAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsRemoveAppSignalErrorFull() instead")
    void teamsRemoveAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsRemoveAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsRemoveUserSignalErrorFull() instead")
    void teamsRemoveUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsRemoveUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateSignalErrorFull() instead")
    void teamsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdatePermissionsSignalErrorFull() instead")
    void teamsUpdatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userApiTokensDeleteSignalErrorFull() instead")
    void userApiTokensDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userApiTokensDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userApiTokensListSignalErrorFull() instead")
    void userApiTokensListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userApiTokensListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userApiTokensNewSignalErrorFull() instead")
    void userApiTokensNewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userApiTokensNewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetForOrgSignalErrorFull() instead")
    void usersGetForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetUserMetadataSignalErrorFull() instead")
    void usersGetUserMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetUserMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalErrorFull() instead")
    void usersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListForOrgSignalErrorFull() instead")
    void usersListForOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListForOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersRemoveFromOrgSignalErrorFull() instead")
    void usersRemoveFromOrgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersRemoveFromOrgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateSignalErrorFull() instead")
    void usersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateOrgRoleSignalErrorFull() instead")
    void usersUpdateOrgRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateOrgRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
