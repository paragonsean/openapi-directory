/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXamarinSolution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXamarinSolution::OAIXamarinSolution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXamarinSolution::OAIXamarinSolution() {
    this->initializeModel();
}

OAIXamarinSolution::~OAIXamarinSolution() {}

void OAIXamarinSolution::initializeModel() {

    m_configurations_isSet = false;
    m_configurations_isValid = false;

    m_default_configuration_isSet = false;
    m_default_configuration_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIXamarinSolution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXamarinSolution::fromJsonObject(QJsonObject json) {

    m_configurations_isValid = ::OpenAPI::fromJsonValue(m_configurations, json[QString("configurations")]);
    m_configurations_isSet = !json[QString("configurations")].isNull() && m_configurations_isValid;

    m_default_configuration_isValid = ::OpenAPI::fromJsonValue(m_default_configuration, json[QString("defaultConfiguration")]);
    m_default_configuration_isSet = !json[QString("defaultConfiguration")].isNull() && m_default_configuration_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIXamarinSolution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXamarinSolution::asJsonObject() const {
    QJsonObject obj;
    if (m_configurations.size() > 0) {
        obj.insert(QString("configurations"), ::OpenAPI::toJsonValue(m_configurations));
    }
    if (m_default_configuration_isSet) {
        obj.insert(QString("defaultConfiguration"), ::OpenAPI::toJsonValue(m_default_configuration));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QList<QString> OAIXamarinSolution::getConfigurations() const {
    return m_configurations;
}
void OAIXamarinSolution::setConfigurations(const QList<QString> &configurations) {
    m_configurations = configurations;
    m_configurations_isSet = true;
}

bool OAIXamarinSolution::is_configurations_Set() const{
    return m_configurations_isSet;
}

bool OAIXamarinSolution::is_configurations_Valid() const{
    return m_configurations_isValid;
}

QString OAIXamarinSolution::getDefaultConfiguration() const {
    return m_default_configuration;
}
void OAIXamarinSolution::setDefaultConfiguration(const QString &default_configuration) {
    m_default_configuration = default_configuration;
    m_default_configuration_isSet = true;
}

bool OAIXamarinSolution::is_default_configuration_Set() const{
    return m_default_configuration_isSet;
}

bool OAIXamarinSolution::is_default_configuration_Valid() const{
    return m_default_configuration_isValid;
}

QString OAIXamarinSolution::getPath() const {
    return m_path;
}
void OAIXamarinSolution::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIXamarinSolution::is_path_Set() const{
    return m_path_isSet;
}

bool OAIXamarinSolution::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIXamarinSolution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXamarinSolution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configurations_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
