/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStepReport_deviceScreenshots_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStepReport_deviceScreenshots_inner::OAIStepReport_deviceScreenshots_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStepReport_deviceScreenshots_inner::OAIStepReport_deviceScreenshots_inner() {
    this->initializeModel();
}

OAIStepReport_deviceScreenshots_inner::~OAIStepReport_deviceScreenshots_inner() {}

void OAIStepReport_deviceScreenshots_inner::initializeModel() {

    m_appium_log_file_isSet = false;
    m_appium_log_file_isValid = false;

    m_crash_data_isSet = false;
    m_crash_data_isValid = false;

    m_device_snapshot_id_isSet = false;
    m_device_snapshot_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_log_file_isSet = false;
    m_log_file_isValid = false;

    m_raw_crash_data_isSet = false;
    m_raw_crash_data_isValid = false;

    m_screenshot_isSet = false;
    m_screenshot_isValid = false;

    m_stacktrace_isSet = false;
    m_stacktrace_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIStepReport_deviceScreenshots_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStepReport_deviceScreenshots_inner::fromJsonObject(QJsonObject json) {

    m_appium_log_file_isValid = ::OpenAPI::fromJsonValue(m_appium_log_file, json[QString("appium_log_file")]);
    m_appium_log_file_isSet = !json[QString("appium_log_file")].isNull() && m_appium_log_file_isValid;

    m_crash_data_isValid = ::OpenAPI::fromJsonValue(m_crash_data, json[QString("crash_data")]);
    m_crash_data_isSet = !json[QString("crash_data")].isNull() && m_crash_data_isValid;

    m_device_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_device_snapshot_id, json[QString("device_snapshot_id")]);
    m_device_snapshot_id_isSet = !json[QString("device_snapshot_id")].isNull() && m_device_snapshot_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_log_file_isValid = ::OpenAPI::fromJsonValue(m_log_file, json[QString("log_file")]);
    m_log_file_isSet = !json[QString("log_file")].isNull() && m_log_file_isValid;

    m_raw_crash_data_isValid = ::OpenAPI::fromJsonValue(m_raw_crash_data, json[QString("raw_crash_data")]);
    m_raw_crash_data_isSet = !json[QString("raw_crash_data")].isNull() && m_raw_crash_data_isValid;

    m_screenshot_isValid = ::OpenAPI::fromJsonValue(m_screenshot, json[QString("screenshot")]);
    m_screenshot_isSet = !json[QString("screenshot")].isNull() && m_screenshot_isValid;

    m_stacktrace_isValid = ::OpenAPI::fromJsonValue(m_stacktrace, json[QString("stacktrace")]);
    m_stacktrace_isSet = !json[QString("stacktrace")].isNull() && m_stacktrace_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIStepReport_deviceScreenshots_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStepReport_deviceScreenshots_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_appium_log_file_isSet) {
        obj.insert(QString("appium_log_file"), ::OpenAPI::toJsonValue(m_appium_log_file));
    }
    if (m_crash_data.size() > 0) {
        obj.insert(QString("crash_data"), ::OpenAPI::toJsonValue(m_crash_data));
    }
    if (m_device_snapshot_id_isSet) {
        obj.insert(QString("device_snapshot_id"), ::OpenAPI::toJsonValue(m_device_snapshot_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_log_file_isSet) {
        obj.insert(QString("log_file"), ::OpenAPI::toJsonValue(m_log_file));
    }
    if (m_raw_crash_data.size() > 0) {
        obj.insert(QString("raw_crash_data"), ::OpenAPI::toJsonValue(m_raw_crash_data));
    }
    if (m_screenshot.isSet()) {
        obj.insert(QString("screenshot"), ::OpenAPI::toJsonValue(m_screenshot));
    }
    if (m_stacktrace.size() > 0) {
        obj.insert(QString("stacktrace"), ::OpenAPI::toJsonValue(m_stacktrace));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIStepReport_deviceScreenshots_inner::getAppiumLogFile() const {
    return m_appium_log_file;
}
void OAIStepReport_deviceScreenshots_inner::setAppiumLogFile(const QString &appium_log_file) {
    m_appium_log_file = appium_log_file;
    m_appium_log_file_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_appium_log_file_Set() const{
    return m_appium_log_file_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_appium_log_file_Valid() const{
    return m_appium_log_file_isValid;
}

QList<QString> OAIStepReport_deviceScreenshots_inner::getCrashData() const {
    return m_crash_data;
}
void OAIStepReport_deviceScreenshots_inner::setCrashData(const QList<QString> &crash_data) {
    m_crash_data = crash_data;
    m_crash_data_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_crash_data_Set() const{
    return m_crash_data_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_crash_data_Valid() const{
    return m_crash_data_isValid;
}

QString OAIStepReport_deviceScreenshots_inner::getDeviceSnapshotId() const {
    return m_device_snapshot_id;
}
void OAIStepReport_deviceScreenshots_inner::setDeviceSnapshotId(const QString &device_snapshot_id) {
    m_device_snapshot_id = device_snapshot_id;
    m_device_snapshot_id_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_device_snapshot_id_Set() const{
    return m_device_snapshot_id_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_device_snapshot_id_Valid() const{
    return m_device_snapshot_id_isValid;
}

QString OAIStepReport_deviceScreenshots_inner::getId() const {
    return m_id;
}
void OAIStepReport_deviceScreenshots_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStepReport_deviceScreenshots_inner::getLogFile() const {
    return m_log_file;
}
void OAIStepReport_deviceScreenshots_inner::setLogFile(const QString &log_file) {
    m_log_file = log_file;
    m_log_file_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_log_file_Set() const{
    return m_log_file_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_log_file_Valid() const{
    return m_log_file_isValid;
}

QList<QString> OAIStepReport_deviceScreenshots_inner::getRawCrashData() const {
    return m_raw_crash_data;
}
void OAIStepReport_deviceScreenshots_inner::setRawCrashData(const QList<QString> &raw_crash_data) {
    m_raw_crash_data = raw_crash_data;
    m_raw_crash_data_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_raw_crash_data_Set() const{
    return m_raw_crash_data_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_raw_crash_data_Valid() const{
    return m_raw_crash_data_isValid;
}

OAIStepReport_deviceScreenshots_inner_screenshot OAIStepReport_deviceScreenshots_inner::getScreenshot() const {
    return m_screenshot;
}
void OAIStepReport_deviceScreenshots_inner::setScreenshot(const OAIStepReport_deviceScreenshots_inner_screenshot &screenshot) {
    m_screenshot = screenshot;
    m_screenshot_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_screenshot_Set() const{
    return m_screenshot_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_screenshot_Valid() const{
    return m_screenshot_isValid;
}

QList<QString> OAIStepReport_deviceScreenshots_inner::getStacktrace() const {
    return m_stacktrace;
}
void OAIStepReport_deviceScreenshots_inner::setStacktrace(const QList<QString> &stacktrace) {
    m_stacktrace = stacktrace;
    m_stacktrace_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_stacktrace_Set() const{
    return m_stacktrace_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_stacktrace_Valid() const{
    return m_stacktrace_isValid;
}

QString OAIStepReport_deviceScreenshots_inner::getStatus() const {
    return m_status;
}
void OAIStepReport_deviceScreenshots_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStepReport_deviceScreenshots_inner::getTitle() const {
    return m_title;
}
void OAIStepReport_deviceScreenshots_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIStepReport_deviceScreenshots_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIStepReport_deviceScreenshots_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIStepReport_deviceScreenshots_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appium_log_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_crash_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacktrace.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStepReport_deviceScreenshots_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
