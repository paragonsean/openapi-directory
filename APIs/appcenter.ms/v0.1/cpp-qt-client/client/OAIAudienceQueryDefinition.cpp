/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudienceQueryDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudienceQueryDefinition::OAIAudienceQueryDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudienceQueryDefinition::OAIAudienceQueryDefinition() {
    this->initializeModel();
}

OAIAudienceQueryDefinition::~OAIAudienceQueryDefinition() {}

void OAIAudienceQueryDefinition::initializeModel() {

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_query_type_isSet = false;
    m_query_type_isValid = false;
}

void OAIAudienceQueryDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudienceQueryDefinition::fromJsonObject(QJsonObject json) {

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_query_type_isValid = ::OpenAPI::fromJsonValue(m_query_type, json[QString("queryType")]);
    m_query_type_isSet = !json[QString("queryType")].isNull() && m_query_type_isValid;
}

QString OAIAudienceQueryDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudienceQueryDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_identifiers.size() > 0) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_query_type_isSet) {
        obj.insert(QString("queryType"), ::OpenAPI::toJsonValue(m_query_type));
    }
    return obj;
}

QList<QString> OAIAudienceQueryDefinition::getIdentifiers() const {
    return m_identifiers;
}
void OAIAudienceQueryDefinition::setIdentifiers(const QList<QString> &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIAudienceQueryDefinition::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIAudienceQueryDefinition::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIAudienceQueryDefinition::getQueryType() const {
    return m_query_type;
}
void OAIAudienceQueryDefinition::setQueryType(const QString &query_type) {
    m_query_type = query_type;
    m_query_type_isSet = true;
}

bool OAIAudienceQueryDefinition::is_query_type_Set() const{
    return m_query_type_isSet;
}

bool OAIAudienceQueryDefinition::is_query_type_Valid() const{
    return m_query_type_isValid;
}

bool OAIAudienceQueryDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudienceQueryDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_type_isValid && true;
}

} // namespace OpenAPI
