/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGdprTestData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGdprTestData::OAICreateGdprTestData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGdprTestData::OAICreateGdprTestData() {
    this->initializeModel();
}

OAICreateGdprTestData::~OAICreateGdprTestData() {}

void OAICreateGdprTestData::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAICreateGdprTestData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGdprTestData::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAICreateGdprTestData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGdprTestData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAICreateGdprTestData::getAccountId() const {
    return m_account_id;
}
void OAICreateGdprTestData::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreateGdprTestData::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreateGdprTestData::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICreateGdprTestData::getAppId() const {
    return m_app_id;
}
void OAICreateGdprTestData::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAICreateGdprTestData::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAICreateGdprTestData::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAICreateGdprTestData::getAppName() const {
    return m_app_name;
}
void OAICreateGdprTestData::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAICreateGdprTestData::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAICreateGdprTestData::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAICreateGdprTestData::getUserEmail() const {
    return m_user_email;
}
void OAICreateGdprTestData::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAICreateGdprTestData::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAICreateGdprTestData::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAICreateGdprTestData::getUserName() const {
    return m_user_name;
}
void OAICreateGdprTestData::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAICreateGdprTestData::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAICreateGdprTestData::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAICreateGdprTestData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGdprTestData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
