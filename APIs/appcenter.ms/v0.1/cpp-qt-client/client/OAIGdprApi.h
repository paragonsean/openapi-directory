/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGdprApi_H
#define OAI_OAIGdprApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataSubjectRight_CancelDeleteRequest_request.h"
#include "OAIDataSubjectRight_DeleteRequest_202_response.h"
#include "OAIDataSubjectRight_DeleteStatusRequest_200_response.h"
#include "OAIOrganizations_listAdministered_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGdprApi : public QObject {
    Q_OBJECT

public:
    OAIGdprApi(const int timeOut = 0);
    ~OAIGdprApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  oai_data_subject_right_cancel_delete_request_request OAIDataSubjectRight_CancelDeleteRequest_request [optional]
    */
    virtual void dataSubjectRightCancelDeleteRequest(const QString &token, const ::OpenAPI::OptionalParam<OAIDataSubjectRight_CancelDeleteRequest_request> &oai_data_subject_right_cancel_delete_request_request = ::OpenAPI::OptionalParam<OAIDataSubjectRight_CancelDeleteRequest_request>());

    /**
    * @param[in]  token QString [required]
    */
    virtual void dataSubjectRightCancelExportRequest(const QString &token);


    virtual void dataSubjectRightDeleteRequest();

    /**
    * @param[in]  token QString [required]
    * @param[in]  email QString [required]
    */
    virtual void dataSubjectRightDeleteStatusRequest(const QString &token, const QString &email);


    virtual void dataSubjectRightExportRequest();

    /**
    * @param[in]  token QString [required]
    */
    virtual void dataSubjectRightExportStatusRequest(const QString &token);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataSubjectRightCancelDeleteRequestCallback(OAIHttpRequestWorker *worker);
    void dataSubjectRightCancelExportRequestCallback(OAIHttpRequestWorker *worker);
    void dataSubjectRightDeleteRequestCallback(OAIHttpRequestWorker *worker);
    void dataSubjectRightDeleteStatusRequestCallback(OAIHttpRequestWorker *worker);
    void dataSubjectRightExportRequestCallback(OAIHttpRequestWorker *worker);
    void dataSubjectRightExportStatusRequestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataSubjectRightCancelDeleteRequestSignal(OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightCancelExportRequestSignal(OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightDeleteRequestSignal(OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightDeleteStatusRequestSignal(OAIDataSubjectRight_DeleteStatusRequest_200_response summary);
    void dataSubjectRightExportRequestSignal(OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightExportStatusRequestSignal(OAIDataSubjectRight_DeleteStatusRequest_200_response summary);


    void dataSubjectRightCancelDeleteRequestSignalFull(OAIHttpRequestWorker *worker, OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightCancelExportRequestSignalFull(OAIHttpRequestWorker *worker, OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightDeleteRequestSignalFull(OAIHttpRequestWorker *worker, OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightDeleteStatusRequestSignalFull(OAIHttpRequestWorker *worker, OAIDataSubjectRight_DeleteStatusRequest_200_response summary);
    void dataSubjectRightExportRequestSignalFull(OAIHttpRequestWorker *worker, OAIDataSubjectRight_DeleteRequest_202_response summary);
    void dataSubjectRightExportStatusRequestSignalFull(OAIHttpRequestWorker *worker, OAIDataSubjectRight_DeleteStatusRequest_200_response summary);

    Q_DECL_DEPRECATED_X("Use dataSubjectRightCancelDeleteRequestSignalError() instead")
    void dataSubjectRightCancelDeleteRequestSignalE(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightCancelDeleteRequestSignalError(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightCancelExportRequestSignalError() instead")
    void dataSubjectRightCancelExportRequestSignalE(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightCancelExportRequestSignalError(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightDeleteRequestSignalError() instead")
    void dataSubjectRightDeleteRequestSignalE(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightDeleteRequestSignalError(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightDeleteStatusRequestSignalError() instead")
    void dataSubjectRightDeleteStatusRequestSignalE(OAIDataSubjectRight_DeleteStatusRequest_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightDeleteStatusRequestSignalError(OAIDataSubjectRight_DeleteStatusRequest_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightExportRequestSignalError() instead")
    void dataSubjectRightExportRequestSignalE(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightExportRequestSignalError(OAIDataSubjectRight_DeleteRequest_202_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightExportStatusRequestSignalError() instead")
    void dataSubjectRightExportStatusRequestSignalE(OAIDataSubjectRight_DeleteStatusRequest_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightExportStatusRequestSignalError(OAIDataSubjectRight_DeleteStatusRequest_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataSubjectRightCancelDeleteRequestSignalErrorFull() instead")
    void dataSubjectRightCancelDeleteRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightCancelDeleteRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightCancelExportRequestSignalErrorFull() instead")
    void dataSubjectRightCancelExportRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightCancelExportRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightDeleteRequestSignalErrorFull() instead")
    void dataSubjectRightDeleteRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightDeleteRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightDeleteStatusRequestSignalErrorFull() instead")
    void dataSubjectRightDeleteStatusRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightDeleteStatusRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightExportRequestSignalErrorFull() instead")
    void dataSubjectRightExportRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightExportRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataSubjectRightExportStatusRequestSignalErrorFull() instead")
    void dataSubjectRightExportStatusRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataSubjectRightExportStatusRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
