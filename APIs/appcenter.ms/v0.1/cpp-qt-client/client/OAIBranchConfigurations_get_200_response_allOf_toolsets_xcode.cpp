/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode() {
    this->initializeModel();
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::~OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode() {}

void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::initializeModel() {

    m_app_extension_provisioning_profile_files_isSet = false;
    m_app_extension_provisioning_profile_files_isValid = false;

    m_archive_configuration_isSet = false;
    m_archive_configuration_isValid = false;

    m_automatic_signing_isSet = false;
    m_automatic_signing_isValid = false;

    m_cartfile_path_isSet = false;
    m_cartfile_path_isValid = false;

    m_certificate_encoded_isSet = false;
    m_certificate_encoded_isValid = false;

    m_certificate_file_id_isSet = false;
    m_certificate_file_id_isValid = false;

    m_certificate_filename_isSet = false;
    m_certificate_filename_isValid = false;

    m_certificate_password_isSet = false;
    m_certificate_password_isValid = false;

    m_certificate_upload_id_isSet = false;
    m_certificate_upload_id_isValid = false;

    m_force_legacy_build_system_isSet = false;
    m_force_legacy_build_system_isValid = false;

    m_podfile_path_isSet = false;
    m_podfile_path_isValid = false;

    m_project_or_workspace_path_isSet = false;
    m_project_or_workspace_path_isValid = false;

    m_provisioning_profile_encoded_isSet = false;
    m_provisioning_profile_encoded_isValid = false;

    m_provisioning_profile_file_id_isSet = false;
    m_provisioning_profile_file_id_isValid = false;

    m_provisioning_profile_filename_isSet = false;
    m_provisioning_profile_filename_isValid = false;

    m_provisioning_profile_upload_id_isSet = false;
    m_provisioning_profile_upload_id_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_target_to_archive_isSet = false;
    m_target_to_archive_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_xcode_project_sha_isSet = false;
    m_xcode_project_sha_isValid = false;

    m_xcode_version_isSet = false;
    m_xcode_version_isValid = false;
}

void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::fromJsonObject(QJsonObject json) {

    m_app_extension_provisioning_profile_files_isValid = ::OpenAPI::fromJsonValue(m_app_extension_provisioning_profile_files, json[QString("appExtensionProvisioningProfileFiles")]);
    m_app_extension_provisioning_profile_files_isSet = !json[QString("appExtensionProvisioningProfileFiles")].isNull() && m_app_extension_provisioning_profile_files_isValid;

    m_archive_configuration_isValid = ::OpenAPI::fromJsonValue(m_archive_configuration, json[QString("archiveConfiguration")]);
    m_archive_configuration_isSet = !json[QString("archiveConfiguration")].isNull() && m_archive_configuration_isValid;

    m_automatic_signing_isValid = ::OpenAPI::fromJsonValue(m_automatic_signing, json[QString("automaticSigning")]);
    m_automatic_signing_isSet = !json[QString("automaticSigning")].isNull() && m_automatic_signing_isValid;

    m_cartfile_path_isValid = ::OpenAPI::fromJsonValue(m_cartfile_path, json[QString("cartfilePath")]);
    m_cartfile_path_isSet = !json[QString("cartfilePath")].isNull() && m_cartfile_path_isValid;

    m_certificate_encoded_isValid = ::OpenAPI::fromJsonValue(m_certificate_encoded, json[QString("certificateEncoded")]);
    m_certificate_encoded_isSet = !json[QString("certificateEncoded")].isNull() && m_certificate_encoded_isValid;

    m_certificate_file_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_file_id, json[QString("certificateFileId")]);
    m_certificate_file_id_isSet = !json[QString("certificateFileId")].isNull() && m_certificate_file_id_isValid;

    m_certificate_filename_isValid = ::OpenAPI::fromJsonValue(m_certificate_filename, json[QString("certificateFilename")]);
    m_certificate_filename_isSet = !json[QString("certificateFilename")].isNull() && m_certificate_filename_isValid;

    m_certificate_password_isValid = ::OpenAPI::fromJsonValue(m_certificate_password, json[QString("certificatePassword")]);
    m_certificate_password_isSet = !json[QString("certificatePassword")].isNull() && m_certificate_password_isValid;

    m_certificate_upload_id_isValid = ::OpenAPI::fromJsonValue(m_certificate_upload_id, json[QString("certificateUploadId")]);
    m_certificate_upload_id_isSet = !json[QString("certificateUploadId")].isNull() && m_certificate_upload_id_isValid;

    m_force_legacy_build_system_isValid = ::OpenAPI::fromJsonValue(m_force_legacy_build_system, json[QString("forceLegacyBuildSystem")]);
    m_force_legacy_build_system_isSet = !json[QString("forceLegacyBuildSystem")].isNull() && m_force_legacy_build_system_isValid;

    m_podfile_path_isValid = ::OpenAPI::fromJsonValue(m_podfile_path, json[QString("podfilePath")]);
    m_podfile_path_isSet = !json[QString("podfilePath")].isNull() && m_podfile_path_isValid;

    m_project_or_workspace_path_isValid = ::OpenAPI::fromJsonValue(m_project_or_workspace_path, json[QString("projectOrWorkspacePath")]);
    m_project_or_workspace_path_isSet = !json[QString("projectOrWorkspacePath")].isNull() && m_project_or_workspace_path_isValid;

    m_provisioning_profile_encoded_isValid = ::OpenAPI::fromJsonValue(m_provisioning_profile_encoded, json[QString("provisioningProfileEncoded")]);
    m_provisioning_profile_encoded_isSet = !json[QString("provisioningProfileEncoded")].isNull() && m_provisioning_profile_encoded_isValid;

    m_provisioning_profile_file_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_profile_file_id, json[QString("provisioningProfileFileId")]);
    m_provisioning_profile_file_id_isSet = !json[QString("provisioningProfileFileId")].isNull() && m_provisioning_profile_file_id_isValid;

    m_provisioning_profile_filename_isValid = ::OpenAPI::fromJsonValue(m_provisioning_profile_filename, json[QString("provisioningProfileFilename")]);
    m_provisioning_profile_filename_isSet = !json[QString("provisioningProfileFilename")].isNull() && m_provisioning_profile_filename_isValid;

    m_provisioning_profile_upload_id_isValid = ::OpenAPI::fromJsonValue(m_provisioning_profile_upload_id, json[QString("provisioningProfileUploadId")]);
    m_provisioning_profile_upload_id_isSet = !json[QString("provisioningProfileUploadId")].isNull() && m_provisioning_profile_upload_id_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_target_to_archive_isValid = ::OpenAPI::fromJsonValue(m_target_to_archive, json[QString("targetToArchive")]);
    m_target_to_archive_isSet = !json[QString("targetToArchive")].isNull() && m_target_to_archive_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_xcode_project_sha_isValid = ::OpenAPI::fromJsonValue(m_xcode_project_sha, json[QString("xcodeProjectSha")]);
    m_xcode_project_sha_isSet = !json[QString("xcodeProjectSha")].isNull() && m_xcode_project_sha_isValid;

    m_xcode_version_isValid = ::OpenAPI::fromJsonValue(m_xcode_version, json[QString("xcodeVersion")]);
    m_xcode_version_isSet = !json[QString("xcodeVersion")].isNull() && m_xcode_version_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::asJsonObject() const {
    QJsonObject obj;
    if (m_app_extension_provisioning_profile_files.size() > 0) {
        obj.insert(QString("appExtensionProvisioningProfileFiles"), ::OpenAPI::toJsonValue(m_app_extension_provisioning_profile_files));
    }
    if (m_archive_configuration_isSet) {
        obj.insert(QString("archiveConfiguration"), ::OpenAPI::toJsonValue(m_archive_configuration));
    }
    if (m_automatic_signing_isSet) {
        obj.insert(QString("automaticSigning"), ::OpenAPI::toJsonValue(m_automatic_signing));
    }
    if (m_cartfile_path_isSet) {
        obj.insert(QString("cartfilePath"), ::OpenAPI::toJsonValue(m_cartfile_path));
    }
    if (m_certificate_encoded_isSet) {
        obj.insert(QString("certificateEncoded"), ::OpenAPI::toJsonValue(m_certificate_encoded));
    }
    if (m_certificate_file_id_isSet) {
        obj.insert(QString("certificateFileId"), ::OpenAPI::toJsonValue(m_certificate_file_id));
    }
    if (m_certificate_filename_isSet) {
        obj.insert(QString("certificateFilename"), ::OpenAPI::toJsonValue(m_certificate_filename));
    }
    if (m_certificate_password_isSet) {
        obj.insert(QString("certificatePassword"), ::OpenAPI::toJsonValue(m_certificate_password));
    }
    if (m_certificate_upload_id_isSet) {
        obj.insert(QString("certificateUploadId"), ::OpenAPI::toJsonValue(m_certificate_upload_id));
    }
    if (m_force_legacy_build_system_isSet) {
        obj.insert(QString("forceLegacyBuildSystem"), ::OpenAPI::toJsonValue(m_force_legacy_build_system));
    }
    if (m_podfile_path_isSet) {
        obj.insert(QString("podfilePath"), ::OpenAPI::toJsonValue(m_podfile_path));
    }
    if (m_project_or_workspace_path_isSet) {
        obj.insert(QString("projectOrWorkspacePath"), ::OpenAPI::toJsonValue(m_project_or_workspace_path));
    }
    if (m_provisioning_profile_encoded_isSet) {
        obj.insert(QString("provisioningProfileEncoded"), ::OpenAPI::toJsonValue(m_provisioning_profile_encoded));
    }
    if (m_provisioning_profile_file_id_isSet) {
        obj.insert(QString("provisioningProfileFileId"), ::OpenAPI::toJsonValue(m_provisioning_profile_file_id));
    }
    if (m_provisioning_profile_filename_isSet) {
        obj.insert(QString("provisioningProfileFilename"), ::OpenAPI::toJsonValue(m_provisioning_profile_filename));
    }
    if (m_provisioning_profile_upload_id_isSet) {
        obj.insert(QString("provisioningProfileUploadId"), ::OpenAPI::toJsonValue(m_provisioning_profile_upload_id));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_target_to_archive_isSet) {
        obj.insert(QString("targetToArchive"), ::OpenAPI::toJsonValue(m_target_to_archive));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_xcode_project_sha_isSet) {
        obj.insert(QString("xcodeProjectSha"), ::OpenAPI::toJsonValue(m_xcode_project_sha));
    }
    if (m_xcode_version_isSet) {
        obj.insert(QString("xcodeVersion"), ::OpenAPI::toJsonValue(m_xcode_version));
    }
    return obj;
}

QList<OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode_appExtensionProvisioningProfileFiles_inner> OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getAppExtensionProvisioningProfileFiles() const {
    return m_app_extension_provisioning_profile_files;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setAppExtensionProvisioningProfileFiles(const QList<OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode_appExtensionProvisioningProfileFiles_inner> &app_extension_provisioning_profile_files) {
    m_app_extension_provisioning_profile_files = app_extension_provisioning_profile_files;
    m_app_extension_provisioning_profile_files_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_app_extension_provisioning_profile_files_Set() const{
    return m_app_extension_provisioning_profile_files_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_app_extension_provisioning_profile_files_Valid() const{
    return m_app_extension_provisioning_profile_files_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getArchiveConfiguration() const {
    return m_archive_configuration;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setArchiveConfiguration(const QString &archive_configuration) {
    m_archive_configuration = archive_configuration;
    m_archive_configuration_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_archive_configuration_Set() const{
    return m_archive_configuration_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_archive_configuration_Valid() const{
    return m_archive_configuration_isValid;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::isAutomaticSigning() const {
    return m_automatic_signing;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setAutomaticSigning(const bool &automatic_signing) {
    m_automatic_signing = automatic_signing;
    m_automatic_signing_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_automatic_signing_Set() const{
    return m_automatic_signing_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_automatic_signing_Valid() const{
    return m_automatic_signing_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getCartfilePath() const {
    return m_cartfile_path;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setCartfilePath(const QString &cartfile_path) {
    m_cartfile_path = cartfile_path;
    m_cartfile_path_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_cartfile_path_Set() const{
    return m_cartfile_path_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_cartfile_path_Valid() const{
    return m_cartfile_path_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getCertificateEncoded() const {
    return m_certificate_encoded;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setCertificateEncoded(const QString &certificate_encoded) {
    m_certificate_encoded = certificate_encoded;
    m_certificate_encoded_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_encoded_Set() const{
    return m_certificate_encoded_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_encoded_Valid() const{
    return m_certificate_encoded_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getCertificateFileId() const {
    return m_certificate_file_id;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setCertificateFileId(const QString &certificate_file_id) {
    m_certificate_file_id = certificate_file_id;
    m_certificate_file_id_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_file_id_Set() const{
    return m_certificate_file_id_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_file_id_Valid() const{
    return m_certificate_file_id_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getCertificateFilename() const {
    return m_certificate_filename;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setCertificateFilename(const QString &certificate_filename) {
    m_certificate_filename = certificate_filename;
    m_certificate_filename_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_filename_Set() const{
    return m_certificate_filename_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_filename_Valid() const{
    return m_certificate_filename_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getCertificatePassword() const {
    return m_certificate_password;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setCertificatePassword(const QString &certificate_password) {
    m_certificate_password = certificate_password;
    m_certificate_password_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_password_Set() const{
    return m_certificate_password_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_password_Valid() const{
    return m_certificate_password_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getCertificateUploadId() const {
    return m_certificate_upload_id;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setCertificateUploadId(const QString &certificate_upload_id) {
    m_certificate_upload_id = certificate_upload_id;
    m_certificate_upload_id_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_upload_id_Set() const{
    return m_certificate_upload_id_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_certificate_upload_id_Valid() const{
    return m_certificate_upload_id_isValid;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::isForceLegacyBuildSystem() const {
    return m_force_legacy_build_system;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setForceLegacyBuildSystem(const bool &force_legacy_build_system) {
    m_force_legacy_build_system = force_legacy_build_system;
    m_force_legacy_build_system_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_force_legacy_build_system_Set() const{
    return m_force_legacy_build_system_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_force_legacy_build_system_Valid() const{
    return m_force_legacy_build_system_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getPodfilePath() const {
    return m_podfile_path;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setPodfilePath(const QString &podfile_path) {
    m_podfile_path = podfile_path;
    m_podfile_path_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_podfile_path_Set() const{
    return m_podfile_path_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_podfile_path_Valid() const{
    return m_podfile_path_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getProjectOrWorkspacePath() const {
    return m_project_or_workspace_path;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setProjectOrWorkspacePath(const QString &project_or_workspace_path) {
    m_project_or_workspace_path = project_or_workspace_path;
    m_project_or_workspace_path_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_project_or_workspace_path_Set() const{
    return m_project_or_workspace_path_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_project_or_workspace_path_Valid() const{
    return m_project_or_workspace_path_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getProvisioningProfileEncoded() const {
    return m_provisioning_profile_encoded;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setProvisioningProfileEncoded(const QString &provisioning_profile_encoded) {
    m_provisioning_profile_encoded = provisioning_profile_encoded;
    m_provisioning_profile_encoded_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_encoded_Set() const{
    return m_provisioning_profile_encoded_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_encoded_Valid() const{
    return m_provisioning_profile_encoded_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getProvisioningProfileFileId() const {
    return m_provisioning_profile_file_id;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setProvisioningProfileFileId(const QString &provisioning_profile_file_id) {
    m_provisioning_profile_file_id = provisioning_profile_file_id;
    m_provisioning_profile_file_id_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_file_id_Set() const{
    return m_provisioning_profile_file_id_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_file_id_Valid() const{
    return m_provisioning_profile_file_id_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getProvisioningProfileFilename() const {
    return m_provisioning_profile_filename;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setProvisioningProfileFilename(const QString &provisioning_profile_filename) {
    m_provisioning_profile_filename = provisioning_profile_filename;
    m_provisioning_profile_filename_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_filename_Set() const{
    return m_provisioning_profile_filename_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_filename_Valid() const{
    return m_provisioning_profile_filename_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getProvisioningProfileUploadId() const {
    return m_provisioning_profile_upload_id;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setProvisioningProfileUploadId(const QString &provisioning_profile_upload_id) {
    m_provisioning_profile_upload_id = provisioning_profile_upload_id;
    m_provisioning_profile_upload_id_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_upload_id_Set() const{
    return m_provisioning_profile_upload_id_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_provisioning_profile_upload_id_Valid() const{
    return m_provisioning_profile_upload_id_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getScheme() const {
    return m_scheme;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getTargetToArchive() const {
    return m_target_to_archive;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setTargetToArchive(const QString &target_to_archive) {
    m_target_to_archive = target_to_archive;
    m_target_to_archive_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_target_to_archive_Set() const{
    return m_target_to_archive_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_target_to_archive_Valid() const{
    return m_target_to_archive_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getTeamId() const {
    return m_team_id;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getXcodeProjectSha() const {
    return m_xcode_project_sha;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setXcodeProjectSha(const QString &xcode_project_sha) {
    m_xcode_project_sha = xcode_project_sha;
    m_xcode_project_sha_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_xcode_project_sha_Set() const{
    return m_xcode_project_sha_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_xcode_project_sha_Valid() const{
    return m_xcode_project_sha_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::getXcodeVersion() const {
    return m_xcode_version;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::setXcodeVersion(const QString &xcode_version) {
    m_xcode_version = xcode_version;
    m_xcode_version_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_xcode_version_Set() const{
    return m_xcode_version_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::is_xcode_version_Valid() const{
    return m_xcode_version_isValid;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_extension_provisioning_profile_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automatic_signing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cartfile_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_encoded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_legacy_build_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podfile_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_or_workspace_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_profile_encoded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_profile_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_profile_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_profile_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_to_archive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xcode_project_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xcode_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_xcode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
