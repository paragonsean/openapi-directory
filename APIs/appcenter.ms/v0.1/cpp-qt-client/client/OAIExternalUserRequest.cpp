/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalUserRequest::OAIExternalUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalUserRequest::OAIExternalUserRequest() {
    this->initializeModel();
}

OAIExternalUserRequest::~OAIExternalUserRequest() {}

void OAIExternalUserRequest::initializeModel() {

    m_app_invitation_isSet = false;
    m_app_invitation_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_invitation_isSet = false;
    m_organization_invitation_isValid = false;

    m_tester_invitation_isSet = false;
    m_tester_invitation_isValid = false;
}

void OAIExternalUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalUserRequest::fromJsonObject(QJsonObject json) {

    m_app_invitation_isValid = ::OpenAPI::fromJsonValue(m_app_invitation, json[QString("app_invitation")]);
    m_app_invitation_isSet = !json[QString("app_invitation")].isNull() && m_app_invitation_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_invitation_isValid = ::OpenAPI::fromJsonValue(m_organization_invitation, json[QString("organization_invitation")]);
    m_organization_invitation_isSet = !json[QString("organization_invitation")].isNull() && m_organization_invitation_isValid;

    m_tester_invitation_isValid = ::OpenAPI::fromJsonValue(m_tester_invitation, json[QString("tester_invitation")]);
    m_tester_invitation_isSet = !json[QString("tester_invitation")].isNull() && m_tester_invitation_isValid;
}

QString OAIExternalUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_invitation_isSet) {
        obj.insert(QString("app_invitation"), ::OpenAPI::toJsonValue(m_app_invitation));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_invitation_isSet) {
        obj.insert(QString("organization_invitation"), ::OpenAPI::toJsonValue(m_organization_invitation));
    }
    if (m_tester_invitation_isSet) {
        obj.insert(QString("tester_invitation"), ::OpenAPI::toJsonValue(m_tester_invitation));
    }
    return obj;
}

QString OAIExternalUserRequest::getAppInvitation() const {
    return m_app_invitation;
}
void OAIExternalUserRequest::setAppInvitation(const QString &app_invitation) {
    m_app_invitation = app_invitation;
    m_app_invitation_isSet = true;
}

bool OAIExternalUserRequest::is_app_invitation_Set() const{
    return m_app_invitation_isSet;
}

bool OAIExternalUserRequest::is_app_invitation_Valid() const{
    return m_app_invitation_isValid;
}

QString OAIExternalUserRequest::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIExternalUserRequest::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIExternalUserRequest::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIExternalUserRequest::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIExternalUserRequest::getDisplayName() const {
    return m_display_name;
}
void OAIExternalUserRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIExternalUserRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIExternalUserRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIExternalUserRequest::getEmail() const {
    return m_email;
}
void OAIExternalUserRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIExternalUserRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIExternalUserRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIExternalUserRequest::getName() const {
    return m_name;
}
void OAIExternalUserRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExternalUserRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExternalUserRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExternalUserRequest::getOrganizationInvitation() const {
    return m_organization_invitation;
}
void OAIExternalUserRequest::setOrganizationInvitation(const QString &organization_invitation) {
    m_organization_invitation = organization_invitation;
    m_organization_invitation_isSet = true;
}

bool OAIExternalUserRequest::is_organization_invitation_Set() const{
    return m_organization_invitation_isSet;
}

bool OAIExternalUserRequest::is_organization_invitation_Valid() const{
    return m_organization_invitation_isValid;
}

QString OAIExternalUserRequest::getTesterInvitation() const {
    return m_tester_invitation;
}
void OAIExternalUserRequest::setTesterInvitation(const QString &tester_invitation) {
    m_tester_invitation = tester_invitation;
    m_tester_invitation_isSet = true;
}

bool OAIExternalUserRequest::is_tester_invitation_Set() const{
    return m_tester_invitation_isSet;
}

bool OAIExternalUserRequest::is_tester_invitation_Valid() const{
    return m_tester_invitation_isValid;
}

bool OAIExternalUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_invitation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_invitation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tester_invitation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && true;
}

} // namespace OpenAPI
