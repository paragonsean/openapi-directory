/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrors_LatestErrorDetails_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrors_LatestErrorDetails_200_response::OAIErrors_LatestErrorDetails_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrors_LatestErrorDetails_200_response::OAIErrors_LatestErrorDetails_200_response() {
    this->initializeModel();
}

OAIErrors_LatestErrorDetails_200_response::~OAIErrors_LatestErrorDetails_200_response() {}

void OAIErrors_LatestErrorDetails_200_response::initializeModel() {

    m_app_launch_timestamp_isSet = false;
    m_app_launch_timestamp_isValid = false;

    m_carrier_name_isSet = false;
    m_carrier_name_isValid = false;

    m_jailbreak_isSet = false;
    m_jailbreak_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_reason_frames_isSet = false;
    m_reason_frames_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_error_id_isSet = false;
    m_error_id_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_has_breadcrumbs_isSet = false;
    m_has_breadcrumbs_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIErrors_LatestErrorDetails_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrors_LatestErrorDetails_200_response::fromJsonObject(QJsonObject json) {

    m_app_launch_timestamp_isValid = ::OpenAPI::fromJsonValue(m_app_launch_timestamp, json[QString("appLaunchTimestamp")]);
    m_app_launch_timestamp_isSet = !json[QString("appLaunchTimestamp")].isNull() && m_app_launch_timestamp_isValid;

    m_carrier_name_isValid = ::OpenAPI::fromJsonValue(m_carrier_name, json[QString("carrierName")]);
    m_carrier_name_isSet = !json[QString("carrierName")].isNull() && m_carrier_name_isValid;

    m_jailbreak_isValid = ::OpenAPI::fromJsonValue(m_jailbreak, json[QString("jailbreak")]);
    m_jailbreak_isSet = !json[QString("jailbreak")].isNull() && m_jailbreak_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_reason_frames_isValid = ::OpenAPI::fromJsonValue(m_reason_frames, json[QString("reasonFrames")]);
    m_reason_frames_isSet = !json[QString("reasonFrames")].isNull() && m_reason_frames_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_error_id_isValid = ::OpenAPI::fromJsonValue(m_error_id, json[QString("errorId")]);
    m_error_id_isSet = !json[QString("errorId")].isNull() && m_error_id_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("hasAttachments")]);
    m_has_attachments_isSet = !json[QString("hasAttachments")].isNull() && m_has_attachments_isValid;

    m_has_breadcrumbs_isValid = ::OpenAPI::fromJsonValue(m_has_breadcrumbs, json[QString("hasBreadcrumbs")]);
    m_has_breadcrumbs_isSet = !json[QString("hasBreadcrumbs")].isNull() && m_has_breadcrumbs_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrors_LatestErrorDetails_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_app_launch_timestamp_isSet) {
        obj.insert(QString("appLaunchTimestamp"), ::OpenAPI::toJsonValue(m_app_launch_timestamp));
    }
    if (m_carrier_name_isSet) {
        obj.insert(QString("carrierName"), ::OpenAPI::toJsonValue(m_carrier_name));
    }
    if (m_jailbreak_isSet) {
        obj.insert(QString("jailbreak"), ::OpenAPI::toJsonValue(m_jailbreak));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_reason_frames.size() > 0) {
        obj.insert(QString("reasonFrames"), ::OpenAPI::toJsonValue(m_reason_frames));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_error_id_isSet) {
        obj.insert(QString("errorId"), ::OpenAPI::toJsonValue(m_error_id));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("hasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_has_breadcrumbs_isSet) {
        obj.insert(QString("hasBreadcrumbs"), ::OpenAPI::toJsonValue(m_has_breadcrumbs));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIErrors_LatestErrorDetails_200_response::getAppLaunchTimestamp() const {
    return m_app_launch_timestamp;
}
void OAIErrors_LatestErrorDetails_200_response::setAppLaunchTimestamp(const QDateTime &app_launch_timestamp) {
    m_app_launch_timestamp = app_launch_timestamp;
    m_app_launch_timestamp_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_app_launch_timestamp_Set() const{
    return m_app_launch_timestamp_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_app_launch_timestamp_Valid() const{
    return m_app_launch_timestamp_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getCarrierName() const {
    return m_carrier_name;
}
void OAIErrors_LatestErrorDetails_200_response::setCarrierName(const QString &carrier_name) {
    m_carrier_name = carrier_name;
    m_carrier_name_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_carrier_name_Set() const{
    return m_carrier_name_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_carrier_name_Valid() const{
    return m_carrier_name_isValid;
}

bool OAIErrors_LatestErrorDetails_200_response::isJailbreak() const {
    return m_jailbreak;
}
void OAIErrors_LatestErrorDetails_200_response::setJailbreak(const bool &jailbreak) {
    m_jailbreak = jailbreak;
    m_jailbreak_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_jailbreak_Set() const{
    return m_jailbreak_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_jailbreak_Valid() const{
    return m_jailbreak_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getName() const {
    return m_name;
}
void OAIErrors_LatestErrorDetails_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIErrors_LatestErrorDetails_200_response::getProperties() const {
    return m_properties;
}
void OAIErrors_LatestErrorDetails_200_response::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner> OAIErrors_LatestErrorDetails_200_response::getReasonFrames() const {
    return m_reason_frames;
}
void OAIErrors_LatestErrorDetails_200_response::setReasonFrames(const QList<OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner> &reason_frames) {
    m_reason_frames = reason_frames;
    m_reason_frames_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_reason_frames_Set() const{
    return m_reason_frames_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_reason_frames_Valid() const{
    return m_reason_frames_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getCountry() const {
    return m_country;
}
void OAIErrors_LatestErrorDetails_200_response::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_country_Set() const{
    return m_country_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getDeviceName() const {
    return m_device_name;
}
void OAIErrors_LatestErrorDetails_200_response::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getErrorId() const {
    return m_error_id;
}
void OAIErrors_LatestErrorDetails_200_response::setErrorId(const QString &error_id) {
    m_error_id = error_id;
    m_error_id_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_error_id_Set() const{
    return m_error_id_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_error_id_Valid() const{
    return m_error_id_isValid;
}

bool OAIErrors_LatestErrorDetails_200_response::isHasAttachments() const {
    return m_has_attachments;
}
void OAIErrors_LatestErrorDetails_200_response::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

bool OAIErrors_LatestErrorDetails_200_response::isHasBreadcrumbs() const {
    return m_has_breadcrumbs;
}
void OAIErrors_LatestErrorDetails_200_response::setHasBreadcrumbs(const bool &has_breadcrumbs) {
    m_has_breadcrumbs = has_breadcrumbs;
    m_has_breadcrumbs_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_has_breadcrumbs_Set() const{
    return m_has_breadcrumbs_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_has_breadcrumbs_Valid() const{
    return m_has_breadcrumbs_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getLanguage() const {
    return m_language;
}
void OAIErrors_LatestErrorDetails_200_response::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_language_Set() const{
    return m_language_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getOsType() const {
    return m_os_type;
}
void OAIErrors_LatestErrorDetails_200_response::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getOsVersion() const {
    return m_os_version;
}
void OAIErrors_LatestErrorDetails_200_response::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QDateTime OAIErrors_LatestErrorDetails_200_response::getTimestamp() const {
    return m_timestamp;
}
void OAIErrors_LatestErrorDetails_200_response::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIErrors_LatestErrorDetails_200_response::getUserId() const {
    return m_user_id;
}
void OAIErrors_LatestErrorDetails_200_response::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIErrors_LatestErrorDetails_200_response::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIErrors_LatestErrorDetails_200_response::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIErrors_LatestErrorDetails_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_launch_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_carrier_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jailbreak_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_frames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_breadcrumbs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrors_LatestErrorDetails_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
