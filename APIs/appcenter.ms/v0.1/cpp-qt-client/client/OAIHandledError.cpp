/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHandledError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHandledError::OAIHandledError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHandledError::OAIHandledError() {
    this->initializeModel();
}

OAIHandledError::~OAIHandledError() {}

void OAIHandledError::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_error_id_isSet = false;
    m_error_id_isValid = false;

    m_has_attachments_isSet = false;
    m_has_attachments_isValid = false;

    m_has_breadcrumbs_isSet = false;
    m_has_breadcrumbs_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIHandledError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHandledError::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_error_id_isValid = ::OpenAPI::fromJsonValue(m_error_id, json[QString("errorId")]);
    m_error_id_isSet = !json[QString("errorId")].isNull() && m_error_id_isValid;

    m_has_attachments_isValid = ::OpenAPI::fromJsonValue(m_has_attachments, json[QString("hasAttachments")]);
    m_has_attachments_isSet = !json[QString("hasAttachments")].isNull() && m_has_attachments_isValid;

    m_has_breadcrumbs_isValid = ::OpenAPI::fromJsonValue(m_has_breadcrumbs, json[QString("hasBreadcrumbs")]);
    m_has_breadcrumbs_isSet = !json[QString("hasBreadcrumbs")].isNull() && m_has_breadcrumbs_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIHandledError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHandledError::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_error_id_isSet) {
        obj.insert(QString("errorId"), ::OpenAPI::toJsonValue(m_error_id));
    }
    if (m_has_attachments_isSet) {
        obj.insert(QString("hasAttachments"), ::OpenAPI::toJsonValue(m_has_attachments));
    }
    if (m_has_breadcrumbs_isSet) {
        obj.insert(QString("hasBreadcrumbs"), ::OpenAPI::toJsonValue(m_has_breadcrumbs));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIHandledError::getCountry() const {
    return m_country;
}
void OAIHandledError::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIHandledError::is_country_Set() const{
    return m_country_isSet;
}

bool OAIHandledError::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIHandledError::getDeviceName() const {
    return m_device_name;
}
void OAIHandledError::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIHandledError::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIHandledError::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIHandledError::getErrorId() const {
    return m_error_id;
}
void OAIHandledError::setErrorId(const QString &error_id) {
    m_error_id = error_id;
    m_error_id_isSet = true;
}

bool OAIHandledError::is_error_id_Set() const{
    return m_error_id_isSet;
}

bool OAIHandledError::is_error_id_Valid() const{
    return m_error_id_isValid;
}

bool OAIHandledError::isHasAttachments() const {
    return m_has_attachments;
}
void OAIHandledError::setHasAttachments(const bool &has_attachments) {
    m_has_attachments = has_attachments;
    m_has_attachments_isSet = true;
}

bool OAIHandledError::is_has_attachments_Set() const{
    return m_has_attachments_isSet;
}

bool OAIHandledError::is_has_attachments_Valid() const{
    return m_has_attachments_isValid;
}

bool OAIHandledError::isHasBreadcrumbs() const {
    return m_has_breadcrumbs;
}
void OAIHandledError::setHasBreadcrumbs(const bool &has_breadcrumbs) {
    m_has_breadcrumbs = has_breadcrumbs;
    m_has_breadcrumbs_isSet = true;
}

bool OAIHandledError::is_has_breadcrumbs_Set() const{
    return m_has_breadcrumbs_isSet;
}

bool OAIHandledError::is_has_breadcrumbs_Valid() const{
    return m_has_breadcrumbs_isValid;
}

QString OAIHandledError::getLanguage() const {
    return m_language;
}
void OAIHandledError::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIHandledError::is_language_Set() const{
    return m_language_isSet;
}

bool OAIHandledError::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIHandledError::getOsType() const {
    return m_os_type;
}
void OAIHandledError::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIHandledError::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIHandledError::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIHandledError::getOsVersion() const {
    return m_os_version;
}
void OAIHandledError::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIHandledError::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIHandledError::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QDateTime OAIHandledError::getTimestamp() const {
    return m_timestamp;
}
void OAIHandledError::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIHandledError::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIHandledError::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIHandledError::getUserId() const {
    return m_user_id;
}
void OAIHandledError::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIHandledError::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIHandledError::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIHandledError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_attachments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_breadcrumbs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHandledError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
