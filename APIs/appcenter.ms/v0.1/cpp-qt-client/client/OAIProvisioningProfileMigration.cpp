/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningProfileMigration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningProfileMigration::OAIProvisioningProfileMigration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningProfileMigration::OAIProvisioningProfileMigration() {
    this->initializeModel();
}

OAIProvisioningProfileMigration::~OAIProvisioningProfileMigration() {}

void OAIProvisioningProfileMigration::initializeModel() {

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_expired_at_isSet = false;
    m_expired_at_isValid = false;

    m_is_appex_isSet = false;
    m_is_appex_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_team_identifier_isSet = false;
    m_team_identifier_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_udids_isSet = false;
    m_udids_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIProvisioningProfileMigration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningProfileMigration::fromJsonObject(QJsonObject json) {

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("bundle_id")]);
    m_bundle_id_isSet = !json[QString("bundle_id")].isNull() && m_bundle_id_isValid;

    m_expired_at_isValid = ::OpenAPI::fromJsonValue(m_expired_at, json[QString("expired_at")]);
    m_expired_at_isSet = !json[QString("expired_at")].isNull() && m_expired_at_isValid;

    m_is_appex_isValid = ::OpenAPI::fromJsonValue(m_is_appex, json[QString("is_appex")]);
    m_is_appex_isSet = !json[QString("is_appex")].isNull() && m_is_appex_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_team_identifier_isValid = ::OpenAPI::fromJsonValue(m_team_identifier, json[QString("team_identifier")]);
    m_team_identifier_isSet = !json[QString("team_identifier")].isNull() && m_team_identifier_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_udids_isValid = ::OpenAPI::fromJsonValue(m_udids, json[QString("udids")]);
    m_udids_isSet = !json[QString("udids")].isNull() && m_udids_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIProvisioningProfileMigration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningProfileMigration::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_id_isSet) {
        obj.insert(QString("bundle_id"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_expired_at_isSet) {
        obj.insert(QString("expired_at"), ::OpenAPI::toJsonValue(m_expired_at));
    }
    if (m_is_appex_isSet) {
        obj.insert(QString("is_appex"), ::OpenAPI::toJsonValue(m_is_appex));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_team_identifier_isSet) {
        obj.insert(QString("team_identifier"), ::OpenAPI::toJsonValue(m_team_identifier));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_udids.size() > 0) {
        obj.insert(QString("udids"), ::OpenAPI::toJsonValue(m_udids));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIProvisioningProfileMigration::getBundleId() const {
    return m_bundle_id;
}
void OAIProvisioningProfileMigration::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIProvisioningProfileMigration::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIProvisioningProfileMigration::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

QString OAIProvisioningProfileMigration::getExpiredAt() const {
    return m_expired_at;
}
void OAIProvisioningProfileMigration::setExpiredAt(const QString &expired_at) {
    m_expired_at = expired_at;
    m_expired_at_isSet = true;
}

bool OAIProvisioningProfileMigration::is_expired_at_Set() const{
    return m_expired_at_isSet;
}

bool OAIProvisioningProfileMigration::is_expired_at_Valid() const{
    return m_expired_at_isValid;
}

bool OAIProvisioningProfileMigration::isIsAppex() const {
    return m_is_appex;
}
void OAIProvisioningProfileMigration::setIsAppex(const bool &is_appex) {
    m_is_appex = is_appex;
    m_is_appex_isSet = true;
}

bool OAIProvisioningProfileMigration::is_is_appex_Set() const{
    return m_is_appex_isSet;
}

bool OAIProvisioningProfileMigration::is_is_appex_Valid() const{
    return m_is_appex_isValid;
}

QString OAIProvisioningProfileMigration::getName() const {
    return m_name;
}
void OAIProvisioningProfileMigration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvisioningProfileMigration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvisioningProfileMigration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProvisioningProfileMigration::getTeamIdentifier() const {
    return m_team_identifier;
}
void OAIProvisioningProfileMigration::setTeamIdentifier(const QString &team_identifier) {
    m_team_identifier = team_identifier;
    m_team_identifier_isSet = true;
}

bool OAIProvisioningProfileMigration::is_team_identifier_Set() const{
    return m_team_identifier_isSet;
}

bool OAIProvisioningProfileMigration::is_team_identifier_Valid() const{
    return m_team_identifier_isValid;
}

qint32 OAIProvisioningProfileMigration::getType() const {
    return m_type;
}
void OAIProvisioningProfileMigration::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProvisioningProfileMigration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProvisioningProfileMigration::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIProvisioningProfileMigration::getUdids() const {
    return m_udids;
}
void OAIProvisioningProfileMigration::setUdids(const QList<QString> &udids) {
    m_udids = udids;
    m_udids_isSet = true;
}

bool OAIProvisioningProfileMigration::is_udids_Set() const{
    return m_udids_isSet;
}

bool OAIProvisioningProfileMigration::is_udids_Valid() const{
    return m_udids_isValid;
}

QString OAIProvisioningProfileMigration::getUrl() const {
    return m_url;
}
void OAIProvisioningProfileMigration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIProvisioningProfileMigration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIProvisioningProfileMigration::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIProvisioningProfileMigration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expired_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_appex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_udids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningProfileMigration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bundle_id_isValid && m_is_appex_isValid && m_name_isValid && m_team_identifier_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
