/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedconnection_Connections_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedconnection_Connections_200_response_inner::OAISharedconnection_Connections_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedconnection_Connections_200_response_inner::OAISharedconnection_Connections_200_response_inner() {
    this->initializeModel();
}

OAISharedconnection_Connections_200_response_inner::~OAISharedconnection_Connections_200_response_inner() {}

void OAISharedconnection_Connections_200_response_inner::initializeModel() {

    m_credential_type_isSet = false;
    m_credential_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;
}

void OAISharedconnection_Connections_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedconnection_Connections_200_response_inner::fromJsonObject(QJsonObject json) {

    m_credential_type_isValid = ::OpenAPI::fromJsonValue(m_credential_type, json[QString("credentialType")]);
    m_credential_type_isSet = !json[QString("credentialType")].isNull() && m_credential_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;
}

QString OAISharedconnection_Connections_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedconnection_Connections_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_credential_type_isSet) {
        obj.insert(QString("credentialType"), ::OpenAPI::toJsonValue(m_credential_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    return obj;
}

QString OAISharedconnection_Connections_200_response_inner::getCredentialType() const {
    return m_credential_type;
}
void OAISharedconnection_Connections_200_response_inner::setCredentialType(const QString &credential_type) {
    m_credential_type = credential_type;
    m_credential_type_isSet = true;
}

bool OAISharedconnection_Connections_200_response_inner::is_credential_type_Set() const{
    return m_credential_type_isSet;
}

bool OAISharedconnection_Connections_200_response_inner::is_credential_type_Valid() const{
    return m_credential_type_isValid;
}

QString OAISharedconnection_Connections_200_response_inner::getDisplayName() const {
    return m_display_name;
}
void OAISharedconnection_Connections_200_response_inner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISharedconnection_Connections_200_response_inner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISharedconnection_Connections_200_response_inner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISharedconnection_Connections_200_response_inner::getServiceType() const {
    return m_service_type;
}
void OAISharedconnection_Connections_200_response_inner::setServiceType(const QString &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAISharedconnection_Connections_200_response_inner::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAISharedconnection_Connections_200_response_inner::is_service_type_Valid() const{
    return m_service_type_isValid;
}

bool OAISharedconnection_Connections_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_credential_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedconnection_Connections_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_service_type_isValid && true;
}

} // namespace OpenAPI
