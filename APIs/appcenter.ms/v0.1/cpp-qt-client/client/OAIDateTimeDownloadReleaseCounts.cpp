/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeDownloadReleaseCounts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeDownloadReleaseCounts::OAIDateTimeDownloadReleaseCounts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeDownloadReleaseCounts::OAIDateTimeDownloadReleaseCounts() {
    this->initializeModel();
}

OAIDateTimeDownloadReleaseCounts::~OAIDateTimeDownloadReleaseCounts() {}

void OAIDateTimeDownloadReleaseCounts::initializeModel() {

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_unique_isSet = false;
    m_unique_isValid = false;
}

void OAIDateTimeDownloadReleaseCounts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeDownloadReleaseCounts::fromJsonObject(QJsonObject json) {

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_unique_isValid = ::OpenAPI::fromJsonValue(m_unique, json[QString("unique")]);
    m_unique_isSet = !json[QString("unique")].isNull() && m_unique_isValid;
}

QString OAIDateTimeDownloadReleaseCounts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeDownloadReleaseCounts::asJsonObject() const {
    QJsonObject obj;
    if (m_counts.size() > 0) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_unique_isSet) {
        obj.insert(QString("unique"), ::OpenAPI::toJsonValue(m_unique));
    }
    return obj;
}

QList<OAIDateTimeDownloadReleaseCounts_counts_inner> OAIDateTimeDownloadReleaseCounts::getCounts() const {
    return m_counts;
}
void OAIDateTimeDownloadReleaseCounts::setCounts(const QList<OAIDateTimeDownloadReleaseCounts_counts_inner> &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIDateTimeDownloadReleaseCounts::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIDateTimeDownloadReleaseCounts::is_counts_Valid() const{
    return m_counts_isValid;
}

qint64 OAIDateTimeDownloadReleaseCounts::getTotal() const {
    return m_total;
}
void OAIDateTimeDownloadReleaseCounts::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDateTimeDownloadReleaseCounts::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDateTimeDownloadReleaseCounts::is_total_Valid() const{
    return m_total_isValid;
}

qint64 OAIDateTimeDownloadReleaseCounts::getUnique() const {
    return m_unique;
}
void OAIDateTimeDownloadReleaseCounts::setUnique(const qint64 &unique) {
    m_unique = unique;
    m_unique_isSet = true;
}

bool OAIDateTimeDownloadReleaseCounts::is_unique_Set() const{
    return m_unique_isSet;
}

bool OAIDateTimeDownloadReleaseCounts::is_unique_Valid() const{
    return m_unique_isValid;
}

bool OAIDateTimeDownloadReleaseCounts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeDownloadReleaseCounts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
