/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildTimeline_records_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildTimeline_records_inner::OAIBuildTimeline_records_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildTimeline_records_inner::OAIBuildTimeline_records_inner() {
    this->initializeModel();
}

OAIBuildTimeline_records_inner::~OAIBuildTimeline_records_inner() {}

void OAIBuildTimeline_records_inner::initializeModel() {

    m_current_operation_isSet = false;
    m_current_operation_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_warning_count_isSet = false;
    m_warning_count_isValid = false;
}

void OAIBuildTimeline_records_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildTimeline_records_inner::fromJsonObject(QJsonObject json) {

    m_current_operation_isValid = ::OpenAPI::fromJsonValue(m_current_operation, json[QString("currentOperation")]);
    m_current_operation_isSet = !json[QString("currentOperation")].isNull() && m_current_operation_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_warning_count_isValid = ::OpenAPI::fromJsonValue(m_warning_count, json[QString("warningCount")]);
    m_warning_count_isSet = !json[QString("warningCount")].isNull() && m_warning_count_isValid;
}

QString OAIBuildTimeline_records_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildTimeline_records_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_current_operation_isSet) {
        obj.insert(QString("currentOperation"), ::OpenAPI::toJsonValue(m_current_operation));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_warning_count_isSet) {
        obj.insert(QString("warningCount"), ::OpenAPI::toJsonValue(m_warning_count));
    }
    return obj;
}

QString OAIBuildTimeline_records_inner::getCurrentOperation() const {
    return m_current_operation;
}
void OAIBuildTimeline_records_inner::setCurrentOperation(const QString &current_operation) {
    m_current_operation = current_operation;
    m_current_operation_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_current_operation_Set() const{
    return m_current_operation_isSet;
}

bool OAIBuildTimeline_records_inner::is_current_operation_Valid() const{
    return m_current_operation_isValid;
}

double OAIBuildTimeline_records_inner::getErrorCount() const {
    return m_error_count;
}
void OAIBuildTimeline_records_inner::setErrorCount(const double &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIBuildTimeline_records_inner::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QString OAIBuildTimeline_records_inner::getFinishTime() const {
    return m_finish_time;
}
void OAIBuildTimeline_records_inner::setFinishTime(const QString &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIBuildTimeline_records_inner::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

QString OAIBuildTimeline_records_inner::getId() const {
    return m_id;
}
void OAIBuildTimeline_records_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBuildTimeline_records_inner::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIBuildTimeline_records_inner_issues_inner> OAIBuildTimeline_records_inner::getIssues() const {
    return m_issues;
}
void OAIBuildTimeline_records_inner::setIssues(const QList<OAIBuildTimeline_records_inner_issues_inner> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAIBuildTimeline_records_inner::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAIBuildTimeline_records_inner::getName() const {
    return m_name;
}
void OAIBuildTimeline_records_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBuildTimeline_records_inner::is_name_Valid() const{
    return m_name_isValid;
}

double OAIBuildTimeline_records_inner::getOrder() const {
    return m_order;
}
void OAIBuildTimeline_records_inner::setOrder(const double &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_order_Set() const{
    return m_order_isSet;
}

bool OAIBuildTimeline_records_inner::is_order_Valid() const{
    return m_order_isValid;
}

double OAIBuildTimeline_records_inner::getPercentComplete() const {
    return m_percent_complete;
}
void OAIBuildTimeline_records_inner::setPercentComplete(const double &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIBuildTimeline_records_inner::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAIBuildTimeline_records_inner::getResult() const {
    return m_result;
}
void OAIBuildTimeline_records_inner::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_result_Set() const{
    return m_result_isSet;
}

bool OAIBuildTimeline_records_inner::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIBuildTimeline_records_inner::getStartTime() const {
    return m_start_time;
}
void OAIBuildTimeline_records_inner::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBuildTimeline_records_inner::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIBuildTimeline_records_inner::getState() const {
    return m_state;
}
void OAIBuildTimeline_records_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBuildTimeline_records_inner::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBuildTimeline_records_inner::getType() const {
    return m_type;
}
void OAIBuildTimeline_records_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBuildTimeline_records_inner::is_type_Valid() const{
    return m_type_isValid;
}

double OAIBuildTimeline_records_inner::getWarningCount() const {
    return m_warning_count;
}
void OAIBuildTimeline_records_inner::setWarningCount(const double &warning_count) {
    m_warning_count = warning_count;
    m_warning_count_isSet = true;
}

bool OAIBuildTimeline_records_inner::is_warning_count_Set() const{
    return m_warning_count_isSet;
}

bool OAIBuildTimeline_records_inner::is_warning_count_Valid() const{
    return m_warning_count_isValid;
}

bool OAIBuildTimeline_records_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildTimeline_records_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
