/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseCreateRequest::OAIReleaseCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseCreateRequest::OAIReleaseCreateRequest() {
    this->initializeModel();
}

OAIReleaseCreateRequest::~OAIReleaseCreateRequest() {}

void OAIReleaseCreateRequest::initializeModel() {

    m_appex_provisioning_profiles_isSet = false;
    m_appex_provisioning_profiles_isValid = false;

    m_build_version_isSet = false;
    m_build_version_isValid = false;

    m_device_family_isSet = false;
    m_device_family_isValid = false;

    m_file_extension_isSet = false;
    m_file_extension_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_icon_asset_id_isSet = false;
    m_icon_asset_id_isValid = false;

    m_ipa_uuids_isSet = false;
    m_ipa_uuids_isValid = false;

    m_languages_isSet = false;
    m_languages_isValid = false;

    m_minimum_os_version_isSet = false;
    m_minimum_os_version_isValid = false;

    m_package_url_isSet = false;
    m_package_url_isValid = false;

    m_provision_isSet = false;
    m_provision_isValid = false;

    m_proxy_flow_isSet = false;
    m_proxy_flow_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_unique_identifier_isSet = false;
    m_unique_identifier_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIReleaseCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseCreateRequest::fromJsonObject(QJsonObject json) {

    m_appex_provisioning_profiles_isValid = ::OpenAPI::fromJsonValue(m_appex_provisioning_profiles, json[QString("appex_provisioning_profiles")]);
    m_appex_provisioning_profiles_isSet = !json[QString("appex_provisioning_profiles")].isNull() && m_appex_provisioning_profiles_isValid;

    m_build_version_isValid = ::OpenAPI::fromJsonValue(m_build_version, json[QString("build_version")]);
    m_build_version_isSet = !json[QString("build_version")].isNull() && m_build_version_isValid;

    m_device_family_isValid = ::OpenAPI::fromJsonValue(m_device_family, json[QString("device_family")]);
    m_device_family_isSet = !json[QString("device_family")].isNull() && m_device_family_isValid;

    m_file_extension_isValid = ::OpenAPI::fromJsonValue(m_file_extension, json[QString("file_extension")]);
    m_file_extension_isSet = !json[QString("file_extension")].isNull() && m_file_extension_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_icon_asset_id_isValid = ::OpenAPI::fromJsonValue(m_icon_asset_id, json[QString("icon_asset_id")]);
    m_icon_asset_id_isSet = !json[QString("icon_asset_id")].isNull() && m_icon_asset_id_isValid;

    m_ipa_uuids_isValid = ::OpenAPI::fromJsonValue(m_ipa_uuids, json[QString("ipa_uuids")]);
    m_ipa_uuids_isSet = !json[QString("ipa_uuids")].isNull() && m_ipa_uuids_isValid;

    m_languages_isValid = ::OpenAPI::fromJsonValue(m_languages, json[QString("languages")]);
    m_languages_isSet = !json[QString("languages")].isNull() && m_languages_isValid;

    m_minimum_os_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_os_version, json[QString("minimum_os_version")]);
    m_minimum_os_version_isSet = !json[QString("minimum_os_version")].isNull() && m_minimum_os_version_isValid;

    m_package_url_isValid = ::OpenAPI::fromJsonValue(m_package_url, json[QString("package_url")]);
    m_package_url_isSet = !json[QString("package_url")].isNull() && m_package_url_isValid;

    m_provision_isValid = ::OpenAPI::fromJsonValue(m_provision, json[QString("provision")]);
    m_provision_isSet = !json[QString("provision")].isNull() && m_provision_isValid;

    m_proxy_flow_isValid = ::OpenAPI::fromJsonValue(m_proxy_flow, json[QString("proxy_flow")]);
    m_proxy_flow_isSet = !json[QString("proxy_flow")].isNull() && m_proxy_flow_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_unique_identifier, json[QString("unique_identifier")]);
    m_unique_identifier_isSet = !json[QString("unique_identifier")].isNull() && m_unique_identifier_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("upload_id")]);
    m_upload_id_isSet = !json[QString("upload_id")].isNull() && m_upload_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIReleaseCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_appex_provisioning_profiles.size() > 0) {
        obj.insert(QString("appex_provisioning_profiles"), ::OpenAPI::toJsonValue(m_appex_provisioning_profiles));
    }
    if (m_build_version_isSet) {
        obj.insert(QString("build_version"), ::OpenAPI::toJsonValue(m_build_version));
    }
    if (m_device_family_isSet) {
        obj.insert(QString("device_family"), ::OpenAPI::toJsonValue(m_device_family));
    }
    if (m_file_extension_isSet) {
        obj.insert(QString("file_extension"), ::OpenAPI::toJsonValue(m_file_extension));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_icon_asset_id_isSet) {
        obj.insert(QString("icon_asset_id"), ::OpenAPI::toJsonValue(m_icon_asset_id));
    }
    if (m_ipa_uuids.size() > 0) {
        obj.insert(QString("ipa_uuids"), ::OpenAPI::toJsonValue(m_ipa_uuids));
    }
    if (m_languages.size() > 0) {
        obj.insert(QString("languages"), ::OpenAPI::toJsonValue(m_languages));
    }
    if (m_minimum_os_version_isSet) {
        obj.insert(QString("minimum_os_version"), ::OpenAPI::toJsonValue(m_minimum_os_version));
    }
    if (m_package_url_isSet) {
        obj.insert(QString("package_url"), ::OpenAPI::toJsonValue(m_package_url));
    }
    if (m_provision.isSet()) {
        obj.insert(QString("provision"), ::OpenAPI::toJsonValue(m_provision));
    }
    if (m_proxy_flow_isSet) {
        obj.insert(QString("proxy_flow"), ::OpenAPI::toJsonValue(m_proxy_flow));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_unique_identifier_isSet) {
        obj.insert(QString("unique_identifier"), ::OpenAPI::toJsonValue(m_unique_identifier));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("upload_id"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIReleaseCreateRequest_appex_provisioning_profiles_inner> OAIReleaseCreateRequest::getAppexProvisioningProfiles() const {
    return m_appex_provisioning_profiles;
}
void OAIReleaseCreateRequest::setAppexProvisioningProfiles(const QList<OAIReleaseCreateRequest_appex_provisioning_profiles_inner> &appex_provisioning_profiles) {
    m_appex_provisioning_profiles = appex_provisioning_profiles;
    m_appex_provisioning_profiles_isSet = true;
}

bool OAIReleaseCreateRequest::is_appex_provisioning_profiles_Set() const{
    return m_appex_provisioning_profiles_isSet;
}

bool OAIReleaseCreateRequest::is_appex_provisioning_profiles_Valid() const{
    return m_appex_provisioning_profiles_isValid;
}

QString OAIReleaseCreateRequest::getBuildVersion() const {
    return m_build_version;
}
void OAIReleaseCreateRequest::setBuildVersion(const QString &build_version) {
    m_build_version = build_version;
    m_build_version_isSet = true;
}

bool OAIReleaseCreateRequest::is_build_version_Set() const{
    return m_build_version_isSet;
}

bool OAIReleaseCreateRequest::is_build_version_Valid() const{
    return m_build_version_isValid;
}

QString OAIReleaseCreateRequest::getDeviceFamily() const {
    return m_device_family;
}
void OAIReleaseCreateRequest::setDeviceFamily(const QString &device_family) {
    m_device_family = device_family;
    m_device_family_isSet = true;
}

bool OAIReleaseCreateRequest::is_device_family_Set() const{
    return m_device_family_isSet;
}

bool OAIReleaseCreateRequest::is_device_family_Valid() const{
    return m_device_family_isValid;
}

QString OAIReleaseCreateRequest::getFileExtension() const {
    return m_file_extension;
}
void OAIReleaseCreateRequest::setFileExtension(const QString &file_extension) {
    m_file_extension = file_extension;
    m_file_extension_isSet = true;
}

bool OAIReleaseCreateRequest::is_file_extension_Set() const{
    return m_file_extension_isSet;
}

bool OAIReleaseCreateRequest::is_file_extension_Valid() const{
    return m_file_extension_isValid;
}

QString OAIReleaseCreateRequest::getFingerprint() const {
    return m_fingerprint;
}
void OAIReleaseCreateRequest::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIReleaseCreateRequest::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIReleaseCreateRequest::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

QString OAIReleaseCreateRequest::getIconAssetId() const {
    return m_icon_asset_id;
}
void OAIReleaseCreateRequest::setIconAssetId(const QString &icon_asset_id) {
    m_icon_asset_id = icon_asset_id;
    m_icon_asset_id_isSet = true;
}

bool OAIReleaseCreateRequest::is_icon_asset_id_Set() const{
    return m_icon_asset_id_isSet;
}

bool OAIReleaseCreateRequest::is_icon_asset_id_Valid() const{
    return m_icon_asset_id_isValid;
}

QList<OAIReleaseCreateRequest_ipa_uuids_inner> OAIReleaseCreateRequest::getIpaUuids() const {
    return m_ipa_uuids;
}
void OAIReleaseCreateRequest::setIpaUuids(const QList<OAIReleaseCreateRequest_ipa_uuids_inner> &ipa_uuids) {
    m_ipa_uuids = ipa_uuids;
    m_ipa_uuids_isSet = true;
}

bool OAIReleaseCreateRequest::is_ipa_uuids_Set() const{
    return m_ipa_uuids_isSet;
}

bool OAIReleaseCreateRequest::is_ipa_uuids_Valid() const{
    return m_ipa_uuids_isValid;
}

QList<QString> OAIReleaseCreateRequest::getLanguages() const {
    return m_languages;
}
void OAIReleaseCreateRequest::setLanguages(const QList<QString> &languages) {
    m_languages = languages;
    m_languages_isSet = true;
}

bool OAIReleaseCreateRequest::is_languages_Set() const{
    return m_languages_isSet;
}

bool OAIReleaseCreateRequest::is_languages_Valid() const{
    return m_languages_isValid;
}

QString OAIReleaseCreateRequest::getMinimumOsVersion() const {
    return m_minimum_os_version;
}
void OAIReleaseCreateRequest::setMinimumOsVersion(const QString &minimum_os_version) {
    m_minimum_os_version = minimum_os_version;
    m_minimum_os_version_isSet = true;
}

bool OAIReleaseCreateRequest::is_minimum_os_version_Set() const{
    return m_minimum_os_version_isSet;
}

bool OAIReleaseCreateRequest::is_minimum_os_version_Valid() const{
    return m_minimum_os_version_isValid;
}

QString OAIReleaseCreateRequest::getPackageUrl() const {
    return m_package_url;
}
void OAIReleaseCreateRequest::setPackageUrl(const QString &package_url) {
    m_package_url = package_url;
    m_package_url_isSet = true;
}

bool OAIReleaseCreateRequest::is_package_url_Set() const{
    return m_package_url_isSet;
}

bool OAIReleaseCreateRequest::is_package_url_Valid() const{
    return m_package_url_isValid;
}

OAIReleaseCreateRequest_appex_provisioning_profiles_inner OAIReleaseCreateRequest::getProvision() const {
    return m_provision;
}
void OAIReleaseCreateRequest::setProvision(const OAIReleaseCreateRequest_appex_provisioning_profiles_inner &provision) {
    m_provision = provision;
    m_provision_isSet = true;
}

bool OAIReleaseCreateRequest::is_provision_Set() const{
    return m_provision_isSet;
}

bool OAIReleaseCreateRequest::is_provision_Valid() const{
    return m_provision_isValid;
}

bool OAIReleaseCreateRequest::isProxyFlow() const {
    return m_proxy_flow;
}
void OAIReleaseCreateRequest::setProxyFlow(const bool &proxy_flow) {
    m_proxy_flow = proxy_flow;
    m_proxy_flow_isSet = true;
}

bool OAIReleaseCreateRequest::is_proxy_flow_Set() const{
    return m_proxy_flow_isSet;
}

bool OAIReleaseCreateRequest::is_proxy_flow_Valid() const{
    return m_proxy_flow_isValid;
}

qint32 OAIReleaseCreateRequest::getSize() const {
    return m_size;
}
void OAIReleaseCreateRequest::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIReleaseCreateRequest::is_size_Set() const{
    return m_size_isSet;
}

bool OAIReleaseCreateRequest::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIReleaseCreateRequest::getUniqueIdentifier() const {
    return m_unique_identifier;
}
void OAIReleaseCreateRequest::setUniqueIdentifier(const QString &unique_identifier) {
    m_unique_identifier = unique_identifier;
    m_unique_identifier_isSet = true;
}

bool OAIReleaseCreateRequest::is_unique_identifier_Set() const{
    return m_unique_identifier_isSet;
}

bool OAIReleaseCreateRequest::is_unique_identifier_Valid() const{
    return m_unique_identifier_isValid;
}

QString OAIReleaseCreateRequest::getUploadId() const {
    return m_upload_id;
}
void OAIReleaseCreateRequest::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIReleaseCreateRequest::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIReleaseCreateRequest::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

QString OAIReleaseCreateRequest::getVersion() const {
    return m_version;
}
void OAIReleaseCreateRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIReleaseCreateRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAIReleaseCreateRequest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIReleaseCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appex_provisioning_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipa_uuids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fingerprint_isValid && m_size_isValid && m_upload_id_isValid && true;
}

} // namespace OpenAPI
