/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistibutionReleases_installAnalytics_request_releases_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistibutionReleases_installAnalytics_request_releases_inner::OAIDistibutionReleases_installAnalytics_request_releases_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistibutionReleases_installAnalytics_request_releases_inner::OAIDistibutionReleases_installAnalytics_request_releases_inner() {
    this->initializeModel();
}

OAIDistibutionReleases_installAnalytics_request_releases_inner::~OAIDistibutionReleases_installAnalytics_request_releases_inner() {}

void OAIDistibutionReleases_installAnalytics_request_releases_inner::initializeModel() {

    m_distribution_group_id_isSet = false;
    m_distribution_group_id_isValid = false;

    m_release_id_isSet = false;
    m_release_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIDistibutionReleases_installAnalytics_request_releases_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistibutionReleases_installAnalytics_request_releases_inner::fromJsonObject(QJsonObject json) {

    m_distribution_group_id_isValid = ::OpenAPI::fromJsonValue(m_distribution_group_id, json[QString("distribution_group_id")]);
    m_distribution_group_id_isSet = !json[QString("distribution_group_id")].isNull() && m_distribution_group_id_isValid;

    m_release_id_isValid = ::OpenAPI::fromJsonValue(m_release_id, json[QString("release_id")]);
    m_release_id_isSet = !json[QString("release_id")].isNull() && m_release_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIDistibutionReleases_installAnalytics_request_releases_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistibutionReleases_installAnalytics_request_releases_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_distribution_group_id_isSet) {
        obj.insert(QString("distribution_group_id"), ::OpenAPI::toJsonValue(m_distribution_group_id));
    }
    if (m_release_id_isSet) {
        obj.insert(QString("release_id"), ::OpenAPI::toJsonValue(m_release_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIDistibutionReleases_installAnalytics_request_releases_inner::getDistributionGroupId() const {
    return m_distribution_group_id;
}
void OAIDistibutionReleases_installAnalytics_request_releases_inner::setDistributionGroupId(const QString &distribution_group_id) {
    m_distribution_group_id = distribution_group_id;
    m_distribution_group_id_isSet = true;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::is_distribution_group_id_Set() const{
    return m_distribution_group_id_isSet;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::is_distribution_group_id_Valid() const{
    return m_distribution_group_id_isValid;
}

qint32 OAIDistibutionReleases_installAnalytics_request_releases_inner::getReleaseId() const {
    return m_release_id;
}
void OAIDistibutionReleases_installAnalytics_request_releases_inner::setReleaseId(const qint32 &release_id) {
    m_release_id = release_id;
    m_release_id_isSet = true;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::is_release_id_Set() const{
    return m_release_id_isSet;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::is_release_id_Valid() const{
    return m_release_id_isValid;
}

QString OAIDistibutionReleases_installAnalytics_request_releases_inner::getUserId() const {
    return m_user_id;
}
void OAIDistibutionReleases_installAnalytics_request_releases_inner::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distribution_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistibutionReleases_installAnalytics_request_releases_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_distribution_group_id_isValid && m_release_id_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
