/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner() {
    this->initializeModel();
}

OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::~OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner() {}

void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_skipped_isSet = false;
    m_skipped_isValid = false;

    m_step_executions_isSet = false;
    m_step_executions_isValid = false;

    m_step_name_isSet = false;
    m_step_name_isValid = false;

    m_step_report_url_isSet = false;
    m_step_report_url_isValid = false;
}

void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_skipped_isValid = ::OpenAPI::fromJsonValue(m_skipped, json[QString("skipped")]);
    m_skipped_isSet = !json[QString("skipped")].isNull() && m_skipped_isValid;

    m_step_executions_isValid = ::OpenAPI::fromJsonValue(m_step_executions, json[QString("stepExecutions")]);
    m_step_executions_isSet = !json[QString("stepExecutions")].isNull() && m_step_executions_isValid;

    m_step_name_isValid = ::OpenAPI::fromJsonValue(m_step_name, json[QString("stepName")]);
    m_step_name_isSet = !json[QString("stepName")].isNull() && m_step_name_isValid;

    m_step_report_url_isValid = ::OpenAPI::fromJsonValue(m_step_report_url, json[QString("step_report_url")]);
    m_step_report_url_isSet = !json[QString("step_report_url")].isNull() && m_step_report_url_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_skipped_isSet) {
        obj.insert(QString("skipped"), ::OpenAPI::toJsonValue(m_skipped));
    }
    if (m_step_executions.size() > 0) {
        obj.insert(QString("stepExecutions"), ::OpenAPI::toJsonValue(m_step_executions));
    }
    if (m_step_name_isSet) {
        obj.insert(QString("stepName"), ::OpenAPI::toJsonValue(m_step_name));
    }
    if (m_step_report_url_isSet) {
        obj.insert(QString("step_report_url"), ::OpenAPI::toJsonValue(m_step_report_url));
    }
    return obj;
}

double OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::getFailed() const {
    return m_failed;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::setFailed(const double &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_failed_Valid() const{
    return m_failed_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::getId() const {
    return m_id;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_id_Valid() const{
    return m_id_isValid;
}

double OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::getSkipped() const {
    return m_skipped;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::setSkipped(const double &skipped) {
    m_skipped = skipped;
    m_skipped_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_skipped_Set() const{
    return m_skipped_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_skipped_Valid() const{
    return m_skipped_isValid;
}

QList<OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner_stepExecutions_inner> OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::getStepExecutions() const {
    return m_step_executions;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::setStepExecutions(const QList<OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner_stepExecutions_inner> &step_executions) {
    m_step_executions = step_executions;
    m_step_executions_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_step_executions_Set() const{
    return m_step_executions_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_step_executions_Valid() const{
    return m_step_executions_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::getStepName() const {
    return m_step_name;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::setStepName(const QString &step_name) {
    m_step_name = step_name;
    m_step_name_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_step_name_Set() const{
    return m_step_name_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_step_name_Valid() const{
    return m_step_name_isValid;
}

QString OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::getStepReportUrl() const {
    return m_step_report_url;
}
void OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::setStepReportUrl(const QString &step_report_url) {
    m_step_report_url = step_report_url;
    m_step_report_url_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_step_report_url_Set() const{
    return m_step_report_url_isSet;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::is_step_report_url_Valid() const{
    return m_step_report_url_isValid;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_executions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_step_report_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_getTestReport_200_response_features_inner_tests_inner_runs_inner_steps_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
