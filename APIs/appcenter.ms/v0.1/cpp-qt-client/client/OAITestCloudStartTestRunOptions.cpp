/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCloudStartTestRunOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCloudStartTestRunOptions::OAITestCloudStartTestRunOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCloudStartTestRunOptions::OAITestCloudStartTestRunOptions() {
    this->initializeModel();
}

OAITestCloudStartTestRunOptions::~OAITestCloudStartTestRunOptions() {}

void OAITestCloudStartTestRunOptions::initializeModel() {

    m_device_selection_isSet = false;
    m_device_selection_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_test_framework_isSet = false;
    m_test_framework_isValid = false;

    m_test_parameters_isSet = false;
    m_test_parameters_isValid = false;

    m_test_series_isSet = false;
    m_test_series_isValid = false;
}

void OAITestCloudStartTestRunOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCloudStartTestRunOptions::fromJsonObject(QJsonObject json) {

    m_device_selection_isValid = ::OpenAPI::fromJsonValue(m_device_selection, json[QString("device_selection")]);
    m_device_selection_isSet = !json[QString("device_selection")].isNull() && m_device_selection_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_test_framework_isValid = ::OpenAPI::fromJsonValue(m_test_framework, json[QString("test_framework")]);
    m_test_framework_isSet = !json[QString("test_framework")].isNull() && m_test_framework_isValid;

    m_test_parameters_isValid = ::OpenAPI::fromJsonValue(m_test_parameters, json[QString("test_parameters")]);
    m_test_parameters_isSet = !json[QString("test_parameters")].isNull() && m_test_parameters_isValid;

    m_test_series_isValid = ::OpenAPI::fromJsonValue(m_test_series, json[QString("test_series")]);
    m_test_series_isSet = !json[QString("test_series")].isNull() && m_test_series_isValid;
}

QString OAITestCloudStartTestRunOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCloudStartTestRunOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_device_selection_isSet) {
        obj.insert(QString("device_selection"), ::OpenAPI::toJsonValue(m_device_selection));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_test_framework_isSet) {
        obj.insert(QString("test_framework"), ::OpenAPI::toJsonValue(m_test_framework));
    }
    if (m_test_parameters_isSet) {
        obj.insert(QString("test_parameters"), ::OpenAPI::toJsonValue(m_test_parameters));
    }
    if (m_test_series_isSet) {
        obj.insert(QString("test_series"), ::OpenAPI::toJsonValue(m_test_series));
    }
    return obj;
}

QString OAITestCloudStartTestRunOptions::getDeviceSelection() const {
    return m_device_selection;
}
void OAITestCloudStartTestRunOptions::setDeviceSelection(const QString &device_selection) {
    m_device_selection = device_selection;
    m_device_selection_isSet = true;
}

bool OAITestCloudStartTestRunOptions::is_device_selection_Set() const{
    return m_device_selection_isSet;
}

bool OAITestCloudStartTestRunOptions::is_device_selection_Valid() const{
    return m_device_selection_isValid;
}

QString OAITestCloudStartTestRunOptions::getLanguage() const {
    return m_language;
}
void OAITestCloudStartTestRunOptions::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAITestCloudStartTestRunOptions::is_language_Set() const{
    return m_language_isSet;
}

bool OAITestCloudStartTestRunOptions::is_language_Valid() const{
    return m_language_isValid;
}

QString OAITestCloudStartTestRunOptions::getLocale() const {
    return m_locale;
}
void OAITestCloudStartTestRunOptions::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAITestCloudStartTestRunOptions::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAITestCloudStartTestRunOptions::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAITestCloudStartTestRunOptions::getTestFramework() const {
    return m_test_framework;
}
void OAITestCloudStartTestRunOptions::setTestFramework(const QString &test_framework) {
    m_test_framework = test_framework;
    m_test_framework_isSet = true;
}

bool OAITestCloudStartTestRunOptions::is_test_framework_Set() const{
    return m_test_framework_isSet;
}

bool OAITestCloudStartTestRunOptions::is_test_framework_Valid() const{
    return m_test_framework_isValid;
}

OAIObject OAITestCloudStartTestRunOptions::getTestParameters() const {
    return m_test_parameters;
}
void OAITestCloudStartTestRunOptions::setTestParameters(const OAIObject &test_parameters) {
    m_test_parameters = test_parameters;
    m_test_parameters_isSet = true;
}

bool OAITestCloudStartTestRunOptions::is_test_parameters_Set() const{
    return m_test_parameters_isSet;
}

bool OAITestCloudStartTestRunOptions::is_test_parameters_Valid() const{
    return m_test_parameters_isValid;
}

QString OAITestCloudStartTestRunOptions::getTestSeries() const {
    return m_test_series;
}
void OAITestCloudStartTestRunOptions::setTestSeries(const QString &test_series) {
    m_test_series = test_series;
    m_test_series_isSet = true;
}

bool OAITestCloudStartTestRunOptions::is_test_series_Set() const{
    return m_test_series_isSet;
}

bool OAITestCloudStartTestRunOptions::is_test_series_Valid() const{
    return m_test_series_isValid;
}

bool OAITestCloudStartTestRunOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_series_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCloudStartTestRunOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_selection_isValid && m_test_framework_isValid && true;
}

} // namespace OpenAPI
