/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITestApi_H
#define OAI_OAITestApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDevice_List.h"
#include "OAIDevice_Selection.h"
#include "OAIDevice_Set.h"
#include "OAIDevice_Set_update_information.h"
#include "OAIName_of_the_test_series.h"
#include "OAISubscription_1.h"
#include "OAITest_Cloud_Error_Details.h"
#include "OAITest_Cloud_File_Hash.h"
#include "OAITest_Cloud_File_Hash_1.h"
#include "OAITest_Cloud_File_Hash_Response.h"
#include "OAITest_Cloud_Start_Test_Run_Options.h"
#include "OAITest_Cloud_Test_Run_Start_Result.h"
#include "OAITest_Run.h"
#include "OAITest_Run_State.h"
#include "OAITest_Series.h"
#include "OAITest_gdprExportAccount_200_response.h"
#include "OAITest_gdprExportAccounts_200_response.h"
#include "OAITest_gdprExportApp_200_response.h"
#include "OAITest_gdprExportFeatureFlag_200_response.h"
#include "OAITest_gdprExportFileSetFile_200_response.h"
#include "OAITest_gdprExportHashFile_200_response.h"
#include "OAITest_gdprExportPipelineTest_200_response.h"
#include "OAITest_gdprExportTestRun_200_response.h"
#include "OAITest_getDeviceConfigurations_200_response_inner.h"
#include "OAITest_getTestReport_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITestApi : public QObject {
    Q_OBJECT

public:
    OAITestApi(const int timeOut = 0);
    ~OAITestApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testArchiveTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_device_list OAIDevice_List [required]
    */
    virtual void testCreateDeviceSelection(const QString &owner_name, const QString &app_name, const OAIDevice_List &oai_device_list);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_device_set_update_information OAIDevice_Set_update_information [required]
    */
    virtual void testCreateDeviceSetOfOwner(const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_device_set_update_information OAIDevice_Set_update_information [required]
    */
    virtual void testCreateDeviceSetOfUser(const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testCreateSubscription(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testCreateTestRun(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_name_of_the_test_series OAIName_of_the_test_series [required]
    */
    virtual void testCreateTestSeries(const QString &owner_name, const QString &app_name, const OAIName_of_the_test_series &oai_name_of_the_test_series);

    /**
    * @param[in]  id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testDeleteDeviceSetOfOwner(const QString &id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testDeleteDeviceSetOfUser(const QString &id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  test_series_slug QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testDeleteTestSeries(const QString &test_series_slug, const QString &owner_name, const QString &app_name);


    virtual void testGdprExportAccount();


    virtual void testGdprExportAccounts();

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGdprExportApp(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGdprExportApps(const QString &owner_name, const QString &app_name);


    virtual void testGdprExportFeatureFlag();

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGdprExportFileSetFile(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGdprExportHashFile(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGdprExportPipelineTest(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGdprExportTestRun(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  test_series_slug QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetAllTestRunsForSeries(const QString &test_series_slug, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  query QString [optional]
    */
    virtual void testGetAllTestSeries(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  app_upload_id QString [optional]
    */
    virtual void testGetDeviceConfigurations(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &app_upload_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetDeviceSetOfOwner(const QString &id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetDeviceSetOfUser(const QString &id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetSubscriptions(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetTestReport(const QString &test_run_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetTestRunState(const QString &test_run_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testGetTestRuns(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testListDeviceSetsOfOwner(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testListDeviceSetsOfUser(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  test_series_slug QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_name_of_the_test_series OAIName_of_the_test_series [required]
    */
    virtual void testPatchTestSeries(const QString &test_series_slug, const QString &owner_name, const QString &app_name, const OAIName_of_the_test_series &oai_name_of_the_test_series);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_test_cloud_start_test_run_options OAITest_Cloud_Start_Test_Run_Options [required]
    */
    virtual void testStartTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name, const OAITest_Cloud_Start_Test_Run_Options &oai_test_cloud_start_test_run_options);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testStartUploadingFile(const QString &test_run_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void testStopTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_device_set_update_information OAIDevice_Set_update_information [required]
    */
    virtual void testUpdateDeviceSetOfOwner(const QString &id, const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information);

    /**
    * @param[in]  id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_device_set_update_information OAIDevice_Set_update_information [required]
    */
    virtual void testUpdateDeviceSetOfUser(const QString &id, const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_test_cloud_file_hash OAITest_Cloud_File_Hash [required]
    */
    virtual void testUploadHash(const QString &test_run_id, const QString &owner_name, const QString &app_name, const OAITest_Cloud_File_Hash &oai_test_cloud_file_hash);

    /**
    * @param[in]  test_run_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_test_cloud_file_hash_1 QList<OAITest_Cloud_File_Hash_1> [required]
    */
    virtual void testUploadHashesBatch(const QString &test_run_id, const QString &owner_name, const QString &app_name, const QList<OAITest_Cloud_File_Hash_1> &oai_test_cloud_file_hash_1);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void testArchiveTestRunCallback(OAIHttpRequestWorker *worker);
    void testCreateDeviceSelectionCallback(OAIHttpRequestWorker *worker);
    void testCreateDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker);
    void testCreateDeviceSetOfUserCallback(OAIHttpRequestWorker *worker);
    void testCreateSubscriptionCallback(OAIHttpRequestWorker *worker);
    void testCreateTestRunCallback(OAIHttpRequestWorker *worker);
    void testCreateTestSeriesCallback(OAIHttpRequestWorker *worker);
    void testDeleteDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker);
    void testDeleteDeviceSetOfUserCallback(OAIHttpRequestWorker *worker);
    void testDeleteTestSeriesCallback(OAIHttpRequestWorker *worker);
    void testGdprExportAccountCallback(OAIHttpRequestWorker *worker);
    void testGdprExportAccountsCallback(OAIHttpRequestWorker *worker);
    void testGdprExportAppCallback(OAIHttpRequestWorker *worker);
    void testGdprExportAppsCallback(OAIHttpRequestWorker *worker);
    void testGdprExportFeatureFlagCallback(OAIHttpRequestWorker *worker);
    void testGdprExportFileSetFileCallback(OAIHttpRequestWorker *worker);
    void testGdprExportHashFileCallback(OAIHttpRequestWorker *worker);
    void testGdprExportPipelineTestCallback(OAIHttpRequestWorker *worker);
    void testGdprExportTestRunCallback(OAIHttpRequestWorker *worker);
    void testGetAllTestRunsForSeriesCallback(OAIHttpRequestWorker *worker);
    void testGetAllTestSeriesCallback(OAIHttpRequestWorker *worker);
    void testGetDeviceConfigurationsCallback(OAIHttpRequestWorker *worker);
    void testGetDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker);
    void testGetDeviceSetOfUserCallback(OAIHttpRequestWorker *worker);
    void testGetSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void testGetTestReportCallback(OAIHttpRequestWorker *worker);
    void testGetTestRunCallback(OAIHttpRequestWorker *worker);
    void testGetTestRunStateCallback(OAIHttpRequestWorker *worker);
    void testGetTestRunsCallback(OAIHttpRequestWorker *worker);
    void testListDeviceSetsOfOwnerCallback(OAIHttpRequestWorker *worker);
    void testListDeviceSetsOfUserCallback(OAIHttpRequestWorker *worker);
    void testPatchTestSeriesCallback(OAIHttpRequestWorker *worker);
    void testStartTestRunCallback(OAIHttpRequestWorker *worker);
    void testStartUploadingFileCallback(OAIHttpRequestWorker *worker);
    void testStopTestRunCallback(OAIHttpRequestWorker *worker);
    void testUpdateDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker);
    void testUpdateDeviceSetOfUserCallback(OAIHttpRequestWorker *worker);
    void testUploadHashCallback(OAIHttpRequestWorker *worker);
    void testUploadHashesBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void testArchiveTestRunSignal(OAITest_Run summary);
    void testCreateDeviceSelectionSignal(OAIDevice_Selection summary);
    void testCreateDeviceSetOfOwnerSignal(OAIDevice_Set summary);
    void testCreateDeviceSetOfUserSignal(OAIDevice_Set summary);
    void testCreateSubscriptionSignal(OAISubscription_1 summary);
    void testCreateTestRunSignal();
    void testCreateTestSeriesSignal(OAITest_Series summary);
    void testDeleteDeviceSetOfOwnerSignal();
    void testDeleteDeviceSetOfUserSignal();
    void testDeleteTestSeriesSignal();
    void testGdprExportAccountSignal(OAITest_gdprExportAccount_200_response summary);
    void testGdprExportAccountsSignal(OAITest_gdprExportAccounts_200_response summary);
    void testGdprExportAppSignal(OAITest_gdprExportApp_200_response summary);
    void testGdprExportAppsSignal(OAITest_gdprExportAccounts_200_response summary);
    void testGdprExportFeatureFlagSignal(OAITest_gdprExportFeatureFlag_200_response summary);
    void testGdprExportFileSetFileSignal(OAITest_gdprExportFileSetFile_200_response summary);
    void testGdprExportHashFileSignal(OAITest_gdprExportHashFile_200_response summary);
    void testGdprExportPipelineTestSignal(OAITest_gdprExportPipelineTest_200_response summary);
    void testGdprExportTestRunSignal(OAITest_gdprExportTestRun_200_response summary);
    void testGetAllTestRunsForSeriesSignal(QList<OAITest_Run> summary);
    void testGetAllTestSeriesSignal(QList<OAITest_Series> summary);
    void testGetDeviceConfigurationsSignal(QList<OAITest_getDeviceConfigurations_200_response_inner> summary);
    void testGetDeviceSetOfOwnerSignal(OAIDevice_Set summary);
    void testGetDeviceSetOfUserSignal(OAIDevice_Set summary);
    void testGetSubscriptionsSignal(OAISubscription_1 summary);
    void testGetTestReportSignal(OAITest_getTestReport_200_response summary);
    void testGetTestRunSignal(OAITest_Run summary);
    void testGetTestRunStateSignal(OAITest_Run_State summary);
    void testGetTestRunsSignal(QList<OAITest_Run> summary);
    void testListDeviceSetsOfOwnerSignal(QList<OAIDevice_Set> summary);
    void testListDeviceSetsOfUserSignal(QList<OAIDevice_Set> summary);
    void testPatchTestSeriesSignal(OAITest_Series summary);
    void testStartTestRunSignal(OAITest_Cloud_Test_Run_Start_Result summary);
    void testStartUploadingFileSignal();
    void testStopTestRunSignal(OAITest_Run summary);
    void testUpdateDeviceSetOfOwnerSignal(OAIDevice_Set summary);
    void testUpdateDeviceSetOfUserSignal(OAIDevice_Set summary);
    void testUploadHashSignal();
    void testUploadHashesBatchSignal(QList<OAITest_Cloud_File_Hash_Response> summary);


    void testArchiveTestRunSignalFull(OAIHttpRequestWorker *worker, OAITest_Run summary);
    void testCreateDeviceSelectionSignalFull(OAIHttpRequestWorker *worker, OAIDevice_Selection summary);
    void testCreateDeviceSetOfOwnerSignalFull(OAIHttpRequestWorker *worker, OAIDevice_Set summary);
    void testCreateDeviceSetOfUserSignalFull(OAIHttpRequestWorker *worker, OAIDevice_Set summary);
    void testCreateSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAISubscription_1 summary);
    void testCreateTestRunSignalFull(OAIHttpRequestWorker *worker);
    void testCreateTestSeriesSignalFull(OAIHttpRequestWorker *worker, OAITest_Series summary);
    void testDeleteDeviceSetOfOwnerSignalFull(OAIHttpRequestWorker *worker);
    void testDeleteDeviceSetOfUserSignalFull(OAIHttpRequestWorker *worker);
    void testDeleteTestSeriesSignalFull(OAIHttpRequestWorker *worker);
    void testGdprExportAccountSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportAccount_200_response summary);
    void testGdprExportAccountsSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportAccounts_200_response summary);
    void testGdprExportAppSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportApp_200_response summary);
    void testGdprExportAppsSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportAccounts_200_response summary);
    void testGdprExportFeatureFlagSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportFeatureFlag_200_response summary);
    void testGdprExportFileSetFileSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportFileSetFile_200_response summary);
    void testGdprExportHashFileSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportHashFile_200_response summary);
    void testGdprExportPipelineTestSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportPipelineTest_200_response summary);
    void testGdprExportTestRunSignalFull(OAIHttpRequestWorker *worker, OAITest_gdprExportTestRun_200_response summary);
    void testGetAllTestRunsForSeriesSignalFull(OAIHttpRequestWorker *worker, QList<OAITest_Run> summary);
    void testGetAllTestSeriesSignalFull(OAIHttpRequestWorker *worker, QList<OAITest_Series> summary);
    void testGetDeviceConfigurationsSignalFull(OAIHttpRequestWorker *worker, QList<OAITest_getDeviceConfigurations_200_response_inner> summary);
    void testGetDeviceSetOfOwnerSignalFull(OAIHttpRequestWorker *worker, OAIDevice_Set summary);
    void testGetDeviceSetOfUserSignalFull(OAIHttpRequestWorker *worker, OAIDevice_Set summary);
    void testGetSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAISubscription_1 summary);
    void testGetTestReportSignalFull(OAIHttpRequestWorker *worker, OAITest_getTestReport_200_response summary);
    void testGetTestRunSignalFull(OAIHttpRequestWorker *worker, OAITest_Run summary);
    void testGetTestRunStateSignalFull(OAIHttpRequestWorker *worker, OAITest_Run_State summary);
    void testGetTestRunsSignalFull(OAIHttpRequestWorker *worker, QList<OAITest_Run> summary);
    void testListDeviceSetsOfOwnerSignalFull(OAIHttpRequestWorker *worker, QList<OAIDevice_Set> summary);
    void testListDeviceSetsOfUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIDevice_Set> summary);
    void testPatchTestSeriesSignalFull(OAIHttpRequestWorker *worker, OAITest_Series summary);
    void testStartTestRunSignalFull(OAIHttpRequestWorker *worker, OAITest_Cloud_Test_Run_Start_Result summary);
    void testStartUploadingFileSignalFull(OAIHttpRequestWorker *worker);
    void testStopTestRunSignalFull(OAIHttpRequestWorker *worker, OAITest_Run summary);
    void testUpdateDeviceSetOfOwnerSignalFull(OAIHttpRequestWorker *worker, OAIDevice_Set summary);
    void testUpdateDeviceSetOfUserSignalFull(OAIHttpRequestWorker *worker, OAIDevice_Set summary);
    void testUploadHashSignalFull(OAIHttpRequestWorker *worker);
    void testUploadHashesBatchSignalFull(OAIHttpRequestWorker *worker, QList<OAITest_Cloud_File_Hash_Response> summary);

    Q_DECL_DEPRECATED_X("Use testArchiveTestRunSignalError() instead")
    void testArchiveTestRunSignalE(OAITest_Run summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testArchiveTestRunSignalError(OAITest_Run summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateDeviceSelectionSignalError() instead")
    void testCreateDeviceSelectionSignalE(OAIDevice_Selection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateDeviceSelectionSignalError(OAIDevice_Selection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateDeviceSetOfOwnerSignalError() instead")
    void testCreateDeviceSetOfOwnerSignalE(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateDeviceSetOfOwnerSignalError(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateDeviceSetOfUserSignalError() instead")
    void testCreateDeviceSetOfUserSignalE(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateDeviceSetOfUserSignalError(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateSubscriptionSignalError() instead")
    void testCreateSubscriptionSignalE(OAISubscription_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateSubscriptionSignalError(OAISubscription_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateTestRunSignalError() instead")
    void testCreateTestRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateTestRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateTestSeriesSignalError() instead")
    void testCreateTestSeriesSignalE(OAITest_Series summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateTestSeriesSignalError(OAITest_Series summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDeleteDeviceSetOfOwnerSignalError() instead")
    void testDeleteDeviceSetOfOwnerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testDeleteDeviceSetOfOwnerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDeleteDeviceSetOfUserSignalError() instead")
    void testDeleteDeviceSetOfUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testDeleteDeviceSetOfUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDeleteTestSeriesSignalError() instead")
    void testDeleteTestSeriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testDeleteTestSeriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAccountSignalError() instead")
    void testGdprExportAccountSignalE(OAITest_gdprExportAccount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAccountSignalError(OAITest_gdprExportAccount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAccountsSignalError() instead")
    void testGdprExportAccountsSignalE(OAITest_gdprExportAccounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAccountsSignalError(OAITest_gdprExportAccounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAppSignalError() instead")
    void testGdprExportAppSignalE(OAITest_gdprExportApp_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAppSignalError(OAITest_gdprExportApp_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAppsSignalError() instead")
    void testGdprExportAppsSignalE(OAITest_gdprExportAccounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAppsSignalError(OAITest_gdprExportAccounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportFeatureFlagSignalError() instead")
    void testGdprExportFeatureFlagSignalE(OAITest_gdprExportFeatureFlag_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportFeatureFlagSignalError(OAITest_gdprExportFeatureFlag_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportFileSetFileSignalError() instead")
    void testGdprExportFileSetFileSignalE(OAITest_gdprExportFileSetFile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportFileSetFileSignalError(OAITest_gdprExportFileSetFile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportHashFileSignalError() instead")
    void testGdprExportHashFileSignalE(OAITest_gdprExportHashFile_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportHashFileSignalError(OAITest_gdprExportHashFile_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportPipelineTestSignalError() instead")
    void testGdprExportPipelineTestSignalE(OAITest_gdprExportPipelineTest_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportPipelineTestSignalError(OAITest_gdprExportPipelineTest_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportTestRunSignalError() instead")
    void testGdprExportTestRunSignalE(OAITest_gdprExportTestRun_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportTestRunSignalError(OAITest_gdprExportTestRun_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetAllTestRunsForSeriesSignalError() instead")
    void testGetAllTestRunsForSeriesSignalE(QList<OAITest_Run> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetAllTestRunsForSeriesSignalError(QList<OAITest_Run> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetAllTestSeriesSignalError() instead")
    void testGetAllTestSeriesSignalE(QList<OAITest_Series> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetAllTestSeriesSignalError(QList<OAITest_Series> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetDeviceConfigurationsSignalError() instead")
    void testGetDeviceConfigurationsSignalE(QList<OAITest_getDeviceConfigurations_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetDeviceConfigurationsSignalError(QList<OAITest_getDeviceConfigurations_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetDeviceSetOfOwnerSignalError() instead")
    void testGetDeviceSetOfOwnerSignalE(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetDeviceSetOfOwnerSignalError(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetDeviceSetOfUserSignalError() instead")
    void testGetDeviceSetOfUserSignalE(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetDeviceSetOfUserSignalError(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetSubscriptionsSignalError() instead")
    void testGetSubscriptionsSignalE(OAISubscription_1 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetSubscriptionsSignalError(OAISubscription_1 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestReportSignalError() instead")
    void testGetTestReportSignalE(OAITest_getTestReport_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestReportSignalError(OAITest_getTestReport_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestRunSignalError() instead")
    void testGetTestRunSignalE(OAITest_Run summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestRunSignalError(OAITest_Run summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestRunStateSignalError() instead")
    void testGetTestRunStateSignalE(OAITest_Run_State summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestRunStateSignalError(OAITest_Run_State summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestRunsSignalError() instead")
    void testGetTestRunsSignalE(QList<OAITest_Run> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestRunsSignalError(QList<OAITest_Run> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testListDeviceSetsOfOwnerSignalError() instead")
    void testListDeviceSetsOfOwnerSignalE(QList<OAIDevice_Set> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testListDeviceSetsOfOwnerSignalError(QList<OAIDevice_Set> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testListDeviceSetsOfUserSignalError() instead")
    void testListDeviceSetsOfUserSignalE(QList<OAIDevice_Set> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testListDeviceSetsOfUserSignalError(QList<OAIDevice_Set> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPatchTestSeriesSignalError() instead")
    void testPatchTestSeriesSignalE(OAITest_Series summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testPatchTestSeriesSignalError(OAITest_Series summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testStartTestRunSignalError() instead")
    void testStartTestRunSignalE(OAITest_Cloud_Test_Run_Start_Result summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testStartTestRunSignalError(OAITest_Cloud_Test_Run_Start_Result summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testStartUploadingFileSignalError() instead")
    void testStartUploadingFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testStartUploadingFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testStopTestRunSignalError() instead")
    void testStopTestRunSignalE(OAITest_Run summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testStopTestRunSignalError(OAITest_Run summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUpdateDeviceSetOfOwnerSignalError() instead")
    void testUpdateDeviceSetOfOwnerSignalE(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testUpdateDeviceSetOfOwnerSignalError(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUpdateDeviceSetOfUserSignalError() instead")
    void testUpdateDeviceSetOfUserSignalE(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testUpdateDeviceSetOfUserSignalError(OAIDevice_Set summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUploadHashSignalError() instead")
    void testUploadHashSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testUploadHashSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUploadHashesBatchSignalError() instead")
    void testUploadHashesBatchSignalE(QList<OAITest_Cloud_File_Hash_Response> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testUploadHashesBatchSignalError(QList<OAITest_Cloud_File_Hash_Response> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use testArchiveTestRunSignalErrorFull() instead")
    void testArchiveTestRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testArchiveTestRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateDeviceSelectionSignalErrorFull() instead")
    void testCreateDeviceSelectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateDeviceSelectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateDeviceSetOfOwnerSignalErrorFull() instead")
    void testCreateDeviceSetOfOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateDeviceSetOfOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateDeviceSetOfUserSignalErrorFull() instead")
    void testCreateDeviceSetOfUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateDeviceSetOfUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateSubscriptionSignalErrorFull() instead")
    void testCreateSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateTestRunSignalErrorFull() instead")
    void testCreateTestRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateTestRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCreateTestSeriesSignalErrorFull() instead")
    void testCreateTestSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testCreateTestSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDeleteDeviceSetOfOwnerSignalErrorFull() instead")
    void testDeleteDeviceSetOfOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testDeleteDeviceSetOfOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDeleteDeviceSetOfUserSignalErrorFull() instead")
    void testDeleteDeviceSetOfUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testDeleteDeviceSetOfUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testDeleteTestSeriesSignalErrorFull() instead")
    void testDeleteTestSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testDeleteTestSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAccountSignalErrorFull() instead")
    void testGdprExportAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAccountsSignalErrorFull() instead")
    void testGdprExportAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAppSignalErrorFull() instead")
    void testGdprExportAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportAppsSignalErrorFull() instead")
    void testGdprExportAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportFeatureFlagSignalErrorFull() instead")
    void testGdprExportFeatureFlagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportFeatureFlagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportFileSetFileSignalErrorFull() instead")
    void testGdprExportFileSetFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportFileSetFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportHashFileSignalErrorFull() instead")
    void testGdprExportHashFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportHashFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportPipelineTestSignalErrorFull() instead")
    void testGdprExportPipelineTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportPipelineTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGdprExportTestRunSignalErrorFull() instead")
    void testGdprExportTestRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGdprExportTestRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetAllTestRunsForSeriesSignalErrorFull() instead")
    void testGetAllTestRunsForSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetAllTestRunsForSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetAllTestSeriesSignalErrorFull() instead")
    void testGetAllTestSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetAllTestSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetDeviceConfigurationsSignalErrorFull() instead")
    void testGetDeviceConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetDeviceConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetDeviceSetOfOwnerSignalErrorFull() instead")
    void testGetDeviceSetOfOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetDeviceSetOfOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetDeviceSetOfUserSignalErrorFull() instead")
    void testGetDeviceSetOfUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetDeviceSetOfUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetSubscriptionsSignalErrorFull() instead")
    void testGetSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestReportSignalErrorFull() instead")
    void testGetTestReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestRunSignalErrorFull() instead")
    void testGetTestRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestRunStateSignalErrorFull() instead")
    void testGetTestRunStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestRunStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testGetTestRunsSignalErrorFull() instead")
    void testGetTestRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testGetTestRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testListDeviceSetsOfOwnerSignalErrorFull() instead")
    void testListDeviceSetsOfOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testListDeviceSetsOfOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testListDeviceSetsOfUserSignalErrorFull() instead")
    void testListDeviceSetsOfUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testListDeviceSetsOfUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testPatchTestSeriesSignalErrorFull() instead")
    void testPatchTestSeriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testPatchTestSeriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testStartTestRunSignalErrorFull() instead")
    void testStartTestRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testStartTestRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testStartUploadingFileSignalErrorFull() instead")
    void testStartUploadingFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testStartUploadingFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testStopTestRunSignalErrorFull() instead")
    void testStopTestRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testStopTestRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUpdateDeviceSetOfOwnerSignalErrorFull() instead")
    void testUpdateDeviceSetOfOwnerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testUpdateDeviceSetOfOwnerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUpdateDeviceSetOfUserSignalErrorFull() instead")
    void testUpdateDeviceSetOfUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testUpdateDeviceSetOfUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUploadHashSignalErrorFull() instead")
    void testUploadHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testUploadHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testUploadHashesBatchSignalErrorFull() instead")
    void testUploadHashesBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testUploadHashesBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
