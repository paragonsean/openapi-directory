/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppRepoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppRepoResponse::OAIAppRepoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppRepoResponse::OAIAppRepoResponse() {
    this->initializeModel();
}

OAIAppRepoResponse::~OAIAppRepoResponse() {}

void OAIAppRepoResponse::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_external_user_id_isSet = false;
    m_external_user_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installation_id_isSet = false;
    m_installation_id_isValid = false;

    m_repo_id_isSet = false;
    m_repo_id_isValid = false;

    m_repo_provider_isSet = false;
    m_repo_provider_isValid = false;

    m_repo_url_isSet = false;
    m_repo_url_isValid = false;

    m_service_connection_id_isSet = false;
    m_service_connection_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIAppRepoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppRepoResponse::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_external_user_id_isValid = ::OpenAPI::fromJsonValue(m_external_user_id, json[QString("external_user_id")]);
    m_external_user_id_isSet = !json[QString("external_user_id")].isNull() && m_external_user_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installation_id_isValid = ::OpenAPI::fromJsonValue(m_installation_id, json[QString("installation_id")]);
    m_installation_id_isSet = !json[QString("installation_id")].isNull() && m_installation_id_isValid;

    m_repo_id_isValid = ::OpenAPI::fromJsonValue(m_repo_id, json[QString("repo_id")]);
    m_repo_id_isSet = !json[QString("repo_id")].isNull() && m_repo_id_isValid;

    m_repo_provider_isValid = ::OpenAPI::fromJsonValue(m_repo_provider, json[QString("repo_provider")]);
    m_repo_provider_isSet = !json[QString("repo_provider")].isNull() && m_repo_provider_isValid;

    m_repo_url_isValid = ::OpenAPI::fromJsonValue(m_repo_url, json[QString("repo_url")]);
    m_repo_url_isSet = !json[QString("repo_url")].isNull() && m_repo_url_isValid;

    m_service_connection_id_isValid = ::OpenAPI::fromJsonValue(m_service_connection_id, json[QString("service_connection_id")]);
    m_service_connection_id_isSet = !json[QString("service_connection_id")].isNull() && m_service_connection_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIAppRepoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppRepoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_external_user_id_isSet) {
        obj.insert(QString("external_user_id"), ::OpenAPI::toJsonValue(m_external_user_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installation_id_isSet) {
        obj.insert(QString("installation_id"), ::OpenAPI::toJsonValue(m_installation_id));
    }
    if (m_repo_id_isSet) {
        obj.insert(QString("repo_id"), ::OpenAPI::toJsonValue(m_repo_id));
    }
    if (m_repo_provider_isSet) {
        obj.insert(QString("repo_provider"), ::OpenAPI::toJsonValue(m_repo_provider));
    }
    if (m_repo_url_isSet) {
        obj.insert(QString("repo_url"), ::OpenAPI::toJsonValue(m_repo_url));
    }
    if (m_service_connection_id_isSet) {
        obj.insert(QString("service_connection_id"), ::OpenAPI::toJsonValue(m_service_connection_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIAppRepoResponse::getAppId() const {
    return m_app_id;
}
void OAIAppRepoResponse::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAppRepoResponse::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAppRepoResponse::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIAppRepoResponse::getExternalUserId() const {
    return m_external_user_id;
}
void OAIAppRepoResponse::setExternalUserId(const QString &external_user_id) {
    m_external_user_id = external_user_id;
    m_external_user_id_isSet = true;
}

bool OAIAppRepoResponse::is_external_user_id_Set() const{
    return m_external_user_id_isSet;
}

bool OAIAppRepoResponse::is_external_user_id_Valid() const{
    return m_external_user_id_isValid;
}

QString OAIAppRepoResponse::getId() const {
    return m_id;
}
void OAIAppRepoResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAppRepoResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAppRepoResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAppRepoResponse::getInstallationId() const {
    return m_installation_id;
}
void OAIAppRepoResponse::setInstallationId(const QString &installation_id) {
    m_installation_id = installation_id;
    m_installation_id_isSet = true;
}

bool OAIAppRepoResponse::is_installation_id_Set() const{
    return m_installation_id_isSet;
}

bool OAIAppRepoResponse::is_installation_id_Valid() const{
    return m_installation_id_isValid;
}

QString OAIAppRepoResponse::getRepoId() const {
    return m_repo_id;
}
void OAIAppRepoResponse::setRepoId(const QString &repo_id) {
    m_repo_id = repo_id;
    m_repo_id_isSet = true;
}

bool OAIAppRepoResponse::is_repo_id_Set() const{
    return m_repo_id_isSet;
}

bool OAIAppRepoResponse::is_repo_id_Valid() const{
    return m_repo_id_isValid;
}

QString OAIAppRepoResponse::getRepoProvider() const {
    return m_repo_provider;
}
void OAIAppRepoResponse::setRepoProvider(const QString &repo_provider) {
    m_repo_provider = repo_provider;
    m_repo_provider_isSet = true;
}

bool OAIAppRepoResponse::is_repo_provider_Set() const{
    return m_repo_provider_isSet;
}

bool OAIAppRepoResponse::is_repo_provider_Valid() const{
    return m_repo_provider_isValid;
}

QString OAIAppRepoResponse::getRepoUrl() const {
    return m_repo_url;
}
void OAIAppRepoResponse::setRepoUrl(const QString &repo_url) {
    m_repo_url = repo_url;
    m_repo_url_isSet = true;
}

bool OAIAppRepoResponse::is_repo_url_Set() const{
    return m_repo_url_isSet;
}

bool OAIAppRepoResponse::is_repo_url_Valid() const{
    return m_repo_url_isValid;
}

QString OAIAppRepoResponse::getServiceConnectionId() const {
    return m_service_connection_id;
}
void OAIAppRepoResponse::setServiceConnectionId(const QString &service_connection_id) {
    m_service_connection_id = service_connection_id;
    m_service_connection_id_isSet = true;
}

bool OAIAppRepoResponse::is_service_connection_id_Set() const{
    return m_service_connection_id_isSet;
}

bool OAIAppRepoResponse::is_service_connection_id_Valid() const{
    return m_service_connection_id_isValid;
}

QString OAIAppRepoResponse::getUserId() const {
    return m_user_id;
}
void OAIAppRepoResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAppRepoResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAppRepoResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIAppRepoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppRepoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_id_isValid && m_repo_url_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
