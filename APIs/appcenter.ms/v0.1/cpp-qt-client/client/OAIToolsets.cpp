/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIToolsets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIToolsets::OAIToolsets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIToolsets::OAIToolsets() {
    this->initializeModel();
}

OAIToolsets::~OAIToolsets() {}

void OAIToolsets::initializeModel() {

    m_node_isSet = false;
    m_node_isValid = false;

    m_xamarin_isSet = false;
    m_xamarin_isValid = false;

    m_xcode_isSet = false;
    m_xcode_isValid = false;
}

void OAIToolsets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIToolsets::fromJsonObject(QJsonObject json) {

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_xamarin_isValid = ::OpenAPI::fromJsonValue(m_xamarin, json[QString("xamarin")]);
    m_xamarin_isSet = !json[QString("xamarin")].isNull() && m_xamarin_isValid;

    m_xcode_isValid = ::OpenAPI::fromJsonValue(m_xcode, json[QString("xcode")]);
    m_xcode_isSet = !json[QString("xcode")].isNull() && m_xcode_isValid;
}

QString OAIToolsets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIToolsets::asJsonObject() const {
    QJsonObject obj;
    if (m_node.size() > 0) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_xamarin.size() > 0) {
        obj.insert(QString("xamarin"), ::OpenAPI::toJsonValue(m_xamarin));
    }
    if (m_xcode.size() > 0) {
        obj.insert(QString("xcode"), ::OpenAPI::toJsonValue(m_xcode));
    }
    return obj;
}

QList<OAIBuilds_listToolsets_200_response_node_inner> OAIToolsets::getNode() const {
    return m_node;
}
void OAIToolsets::setNode(const QList<OAIBuilds_listToolsets_200_response_node_inner> &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAIToolsets::is_node_Set() const{
    return m_node_isSet;
}

bool OAIToolsets::is_node_Valid() const{
    return m_node_isValid;
}

QList<OAIBuilds_listToolsets_200_response_xamarin_inner> OAIToolsets::getXamarin() const {
    return m_xamarin;
}
void OAIToolsets::setXamarin(const QList<OAIBuilds_listToolsets_200_response_xamarin_inner> &xamarin) {
    m_xamarin = xamarin;
    m_xamarin_isSet = true;
}

bool OAIToolsets::is_xamarin_Set() const{
    return m_xamarin_isSet;
}

bool OAIToolsets::is_xamarin_Valid() const{
    return m_xamarin_isValid;
}

QList<OAIBuilds_listToolsets_200_response_xcode_inner> OAIToolsets::getXcode() const {
    return m_xcode;
}
void OAIToolsets::setXcode(const QList<OAIBuilds_listToolsets_200_response_xcode_inner> &xcode) {
    m_xcode = xcode;
    m_xcode_isSet = true;
}

bool OAIToolsets::is_xcode_Set() const{
    return m_xcode_isSet;
}

bool OAIToolsets::is_xcode_Valid() const{
    return m_xcode_isValid;
}

bool OAIToolsets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_xamarin.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_xcode.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIToolsets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
