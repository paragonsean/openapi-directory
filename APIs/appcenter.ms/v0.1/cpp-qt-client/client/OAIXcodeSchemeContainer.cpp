/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXcodeSchemeContainer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXcodeSchemeContainer::OAIXcodeSchemeContainer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXcodeSchemeContainer::OAIXcodeSchemeContainer() {
    this->initializeModel();
}

OAIXcodeSchemeContainer::~OAIXcodeSchemeContainer() {}

void OAIXcodeSchemeContainer::initializeModel() {

    m_app_extension_targets_isSet = false;
    m_app_extension_targets_isValid = false;

    m_cartfile_path_isSet = false;
    m_cartfile_path_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_podfile_path_isSet = false;
    m_podfile_path_isValid = false;

    m_shared_schemes_isSet = false;
    m_shared_schemes_isValid = false;

    m_workspace_project_paths_isSet = false;
    m_workspace_project_paths_isValid = false;

    m_xcode_project_sha_isSet = false;
    m_xcode_project_sha_isValid = false;
}

void OAIXcodeSchemeContainer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXcodeSchemeContainer::fromJsonObject(QJsonObject json) {

    m_app_extension_targets_isValid = ::OpenAPI::fromJsonValue(m_app_extension_targets, json[QString("appExtensionTargets")]);
    m_app_extension_targets_isSet = !json[QString("appExtensionTargets")].isNull() && m_app_extension_targets_isValid;

    m_cartfile_path_isValid = ::OpenAPI::fromJsonValue(m_cartfile_path, json[QString("cartfilePath")]);
    m_cartfile_path_isSet = !json[QString("cartfilePath")].isNull() && m_cartfile_path_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_podfile_path_isValid = ::OpenAPI::fromJsonValue(m_podfile_path, json[QString("podfilePath")]);
    m_podfile_path_isSet = !json[QString("podfilePath")].isNull() && m_podfile_path_isValid;

    m_shared_schemes_isValid = ::OpenAPI::fromJsonValue(m_shared_schemes, json[QString("sharedSchemes")]);
    m_shared_schemes_isSet = !json[QString("sharedSchemes")].isNull() && m_shared_schemes_isValid;

    m_workspace_project_paths_isValid = ::OpenAPI::fromJsonValue(m_workspace_project_paths, json[QString("workspaceProjectPaths")]);
    m_workspace_project_paths_isSet = !json[QString("workspaceProjectPaths")].isNull() && m_workspace_project_paths_isValid;

    m_xcode_project_sha_isValid = ::OpenAPI::fromJsonValue(m_xcode_project_sha, json[QString("xcodeProjectSha")]);
    m_xcode_project_sha_isSet = !json[QString("xcodeProjectSha")].isNull() && m_xcode_project_sha_isValid;
}

QString OAIXcodeSchemeContainer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXcodeSchemeContainer::asJsonObject() const {
    QJsonObject obj;
    if (m_app_extension_targets.size() > 0) {
        obj.insert(QString("appExtensionTargets"), ::OpenAPI::toJsonValue(m_app_extension_targets));
    }
    if (m_cartfile_path_isSet) {
        obj.insert(QString("cartfilePath"), ::OpenAPI::toJsonValue(m_cartfile_path));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_podfile_path_isSet) {
        obj.insert(QString("podfilePath"), ::OpenAPI::toJsonValue(m_podfile_path));
    }
    if (m_shared_schemes.size() > 0) {
        obj.insert(QString("sharedSchemes"), ::OpenAPI::toJsonValue(m_shared_schemes));
    }
    if (m_workspace_project_paths_isSet) {
        obj.insert(QString("workspaceProjectPaths"), ::OpenAPI::toJsonValue(m_workspace_project_paths));
    }
    if (m_xcode_project_sha_isSet) {
        obj.insert(QString("xcodeProjectSha"), ::OpenAPI::toJsonValue(m_xcode_project_sha));
    }
    return obj;
}

QList<OAIBuilds_listToolsetProjects_200_response_xcode_xcodeSchemeContainers_inner_appExtensionTargets_inner> OAIXcodeSchemeContainer::getAppExtensionTargets() const {
    return m_app_extension_targets;
}
void OAIXcodeSchemeContainer::setAppExtensionTargets(const QList<OAIBuilds_listToolsetProjects_200_response_xcode_xcodeSchemeContainers_inner_appExtensionTargets_inner> &app_extension_targets) {
    m_app_extension_targets = app_extension_targets;
    m_app_extension_targets_isSet = true;
}

bool OAIXcodeSchemeContainer::is_app_extension_targets_Set() const{
    return m_app_extension_targets_isSet;
}

bool OAIXcodeSchemeContainer::is_app_extension_targets_Valid() const{
    return m_app_extension_targets_isValid;
}

QString OAIXcodeSchemeContainer::getCartfilePath() const {
    return m_cartfile_path;
}
void OAIXcodeSchemeContainer::setCartfilePath(const QString &cartfile_path) {
    m_cartfile_path = cartfile_path;
    m_cartfile_path_isSet = true;
}

bool OAIXcodeSchemeContainer::is_cartfile_path_Set() const{
    return m_cartfile_path_isSet;
}

bool OAIXcodeSchemeContainer::is_cartfile_path_Valid() const{
    return m_cartfile_path_isValid;
}

QString OAIXcodeSchemeContainer::getPath() const {
    return m_path;
}
void OAIXcodeSchemeContainer::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIXcodeSchemeContainer::is_path_Set() const{
    return m_path_isSet;
}

bool OAIXcodeSchemeContainer::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIXcodeSchemeContainer::getPodfilePath() const {
    return m_podfile_path;
}
void OAIXcodeSchemeContainer::setPodfilePath(const QString &podfile_path) {
    m_podfile_path = podfile_path;
    m_podfile_path_isSet = true;
}

bool OAIXcodeSchemeContainer::is_podfile_path_Set() const{
    return m_podfile_path_isSet;
}

bool OAIXcodeSchemeContainer::is_podfile_path_Valid() const{
    return m_podfile_path_isValid;
}

QList<OAIBuilds_listToolsetProjects_200_response_xcode_xcodeSchemeContainers_inner_sharedSchemes_inner> OAIXcodeSchemeContainer::getSharedSchemes() const {
    return m_shared_schemes;
}
void OAIXcodeSchemeContainer::setSharedSchemes(const QList<OAIBuilds_listToolsetProjects_200_response_xcode_xcodeSchemeContainers_inner_sharedSchemes_inner> &shared_schemes) {
    m_shared_schemes = shared_schemes;
    m_shared_schemes_isSet = true;
}

bool OAIXcodeSchemeContainer::is_shared_schemes_Set() const{
    return m_shared_schemes_isSet;
}

bool OAIXcodeSchemeContainer::is_shared_schemes_Valid() const{
    return m_shared_schemes_isValid;
}

QString OAIXcodeSchemeContainer::getWorkspaceProjectPaths() const {
    return m_workspace_project_paths;
}
void OAIXcodeSchemeContainer::setWorkspaceProjectPaths(const QString &workspace_project_paths) {
    m_workspace_project_paths = workspace_project_paths;
    m_workspace_project_paths_isSet = true;
}

bool OAIXcodeSchemeContainer::is_workspace_project_paths_Set() const{
    return m_workspace_project_paths_isSet;
}

bool OAIXcodeSchemeContainer::is_workspace_project_paths_Valid() const{
    return m_workspace_project_paths_isValid;
}

QString OAIXcodeSchemeContainer::getXcodeProjectSha() const {
    return m_xcode_project_sha;
}
void OAIXcodeSchemeContainer::setXcodeProjectSha(const QString &xcode_project_sha) {
    m_xcode_project_sha = xcode_project_sha;
    m_xcode_project_sha_isSet = true;
}

bool OAIXcodeSchemeContainer::is_xcode_project_sha_Set() const{
    return m_xcode_project_sha_isSet;
}

bool OAIXcodeSchemeContainer::is_xcode_project_sha_Valid() const{
    return m_xcode_project_sha_isValid;
}

bool OAIXcodeSchemeContainer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_extension_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cartfile_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podfile_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_schemes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_project_paths_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xcode_project_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXcodeSchemeContainer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && m_shared_schemes_isValid && true;
}

} // namespace OpenAPI
