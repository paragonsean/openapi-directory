/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppVersion::OAIAppVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppVersion::OAIAppVersion() {
    this->initializeModel();
}

OAIAppVersion::~OAIAppVersion() {}

void OAIAppVersion::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_app_version_id_isSet = false;
    m_app_version_id_isValid = false;

    m_build_number_isSet = false;
    m_build_number_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;
}

void OAIAppVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppVersion::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("app_version")]);
    m_app_version_isSet = !json[QString("app_version")].isNull() && m_app_version_isValid;

    m_app_version_id_isValid = ::OpenAPI::fromJsonValue(m_app_version_id, json[QString("app_version_id")]);
    m_app_version_id_isSet = !json[QString("app_version_id")].isNull() && m_app_version_id_isValid;

    m_build_number_isValid = ::OpenAPI::fromJsonValue(m_build_number, json[QString("build_number")]);
    m_build_number_isSet = !json[QString("build_number")].isNull() && m_build_number_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;
}

QString OAIAppVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("app_version"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_app_version_id_isSet) {
        obj.insert(QString("app_version_id"), ::OpenAPI::toJsonValue(m_app_version_id));
    }
    if (m_build_number_isSet) {
        obj.insert(QString("build_number"), ::OpenAPI::toJsonValue(m_build_number));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    return obj;
}

QString OAIAppVersion::getAppId() const {
    return m_app_id;
}
void OAIAppVersion::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAppVersion::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAppVersion::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIAppVersion::getAppVersion() const {
    return m_app_version;
}
void OAIAppVersion::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIAppVersion::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIAppVersion::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIAppVersion::getAppVersionId() const {
    return m_app_version_id;
}
void OAIAppVersion::setAppVersionId(const QString &app_version_id) {
    m_app_version_id = app_version_id;
    m_app_version_id_isSet = true;
}

bool OAIAppVersion::is_app_version_id_Set() const{
    return m_app_version_id_isSet;
}

bool OAIAppVersion::is_app_version_id_Valid() const{
    return m_app_version_id_isValid;
}

QString OAIAppVersion::getBuildNumber() const {
    return m_build_number;
}
void OAIAppVersion::setBuildNumber(const QString &build_number) {
    m_build_number = build_number;
    m_build_number_isSet = true;
}

bool OAIAppVersion::is_build_number_Set() const{
    return m_build_number_isSet;
}

bool OAIAppVersion::is_build_number_Valid() const{
    return m_build_number_isValid;
}

QString OAIAppVersion::getDisplayName() const {
    return m_display_name;
}
void OAIAppVersion::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAppVersion::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAppVersion::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIAppVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_app_version_isValid && m_app_version_id_isValid && m_display_name_isValid && true;
}

} // namespace OpenAPI
