/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitHubInstallationRepositories_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitHubInstallationRepositories_inner::OAIGitHubInstallationRepositories_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitHubInstallationRepositories_inner::OAIGitHubInstallationRepositories_inner() {
    this->initializeModel();
}

OAIGitHubInstallationRepositories_inner::~OAIGitHubInstallationRepositories_inner() {}

void OAIGitHubInstallationRepositories_inner::initializeModel() {

    m_clone_url_isSet = false;
    m_clone_url_isValid = false;

    m_default_branch_isSet = false;
    m_default_branch_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_fork_isSet = false;
    m_fork_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGitHubInstallationRepositories_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitHubInstallationRepositories_inner::fromJsonObject(QJsonObject json) {

    m_clone_url_isValid = ::OpenAPI::fromJsonValue(m_clone_url, json[QString("clone_url")]);
    m_clone_url_isSet = !json[QString("clone_url")].isNull() && m_clone_url_isValid;

    m_default_branch_isValid = ::OpenAPI::fromJsonValue(m_default_branch, json[QString("default_branch")]);
    m_default_branch_isSet = !json[QString("default_branch")].isNull() && m_default_branch_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_fork_isValid = ::OpenAPI::fromJsonValue(m_fork, json[QString("fork")]);
    m_fork_isSet = !json[QString("fork")].isNull() && m_fork_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIGitHubInstallationRepositories_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitHubInstallationRepositories_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_clone_url_isSet) {
        obj.insert(QString("clone_url"), ::OpenAPI::toJsonValue(m_clone_url));
    }
    if (m_default_branch_isSet) {
        obj.insert(QString("default_branch"), ::OpenAPI::toJsonValue(m_default_branch));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_fork_isSet) {
        obj.insert(QString("fork"), ::OpenAPI::toJsonValue(m_fork));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIGitHubInstallationRepositories_inner::getCloneUrl() const {
    return m_clone_url;
}
void OAIGitHubInstallationRepositories_inner::setCloneUrl(const QString &clone_url) {
    m_clone_url = clone_url;
    m_clone_url_isSet = true;
}

bool OAIGitHubInstallationRepositories_inner::is_clone_url_Set() const{
    return m_clone_url_isSet;
}

bool OAIGitHubInstallationRepositories_inner::is_clone_url_Valid() const{
    return m_clone_url_isValid;
}

QString OAIGitHubInstallationRepositories_inner::getDefaultBranch() const {
    return m_default_branch;
}
void OAIGitHubInstallationRepositories_inner::setDefaultBranch(const QString &default_branch) {
    m_default_branch = default_branch;
    m_default_branch_isSet = true;
}

bool OAIGitHubInstallationRepositories_inner::is_default_branch_Set() const{
    return m_default_branch_isSet;
}

bool OAIGitHubInstallationRepositories_inner::is_default_branch_Valid() const{
    return m_default_branch_isValid;
}

QString OAIGitHubInstallationRepositories_inner::getDescription() const {
    return m_description;
}
void OAIGitHubInstallationRepositories_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGitHubInstallationRepositories_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGitHubInstallationRepositories_inner::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIGitHubInstallationRepositories_inner::isFork() const {
    return m_fork;
}
void OAIGitHubInstallationRepositories_inner::setFork(const bool &fork) {
    m_fork = fork;
    m_fork_isSet = true;
}

bool OAIGitHubInstallationRepositories_inner::is_fork_Set() const{
    return m_fork_isSet;
}

bool OAIGitHubInstallationRepositories_inner::is_fork_Valid() const{
    return m_fork_isValid;
}

QString OAIGitHubInstallationRepositories_inner::getLanguage() const {
    return m_language;
}
void OAIGitHubInstallationRepositories_inner::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIGitHubInstallationRepositories_inner::is_language_Set() const{
    return m_language_isSet;
}

bool OAIGitHubInstallationRepositories_inner::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIGitHubInstallationRepositories_inner::getName() const {
    return m_name;
}
void OAIGitHubInstallationRepositories_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGitHubInstallationRepositories_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGitHubInstallationRepositories_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGitHubInstallationRepositories_inner::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGitHubInstallationRepositories_inner::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGitHubInstallationRepositories_inner::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGitHubInstallationRepositories_inner::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGitHubInstallationRepositories_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clone_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitHubInstallationRepositories_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
