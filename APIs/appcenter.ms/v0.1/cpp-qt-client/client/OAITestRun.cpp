/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRun::OAITestRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRun::OAITestRun() {
    this->initializeModel();
}

OAITestRun::~OAITestRun() {}

void OAITestRun::initializeModel() {

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_result_status_isSet = false;
    m_result_status_isValid = false;

    m_run_status_isSet = false;
    m_run_status_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_test_series_isSet = false;
    m_test_series_isValid = false;

    m_test_type_isSet = false;
    m_test_type_isValid = false;
}

void OAITestRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRun::fromJsonObject(QJsonObject json) {

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("appVersion")]);
    m_app_version_isSet = !json[QString("appVersion")].isNull() && m_app_version_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_result_status_isValid = ::OpenAPI::fromJsonValue(m_result_status, json[QString("resultStatus")]);
    m_result_status_isSet = !json[QString("resultStatus")].isNull() && m_result_status_isValid;

    m_run_status_isValid = ::OpenAPI::fromJsonValue(m_run_status, json[QString("runStatus")]);
    m_run_status_isSet = !json[QString("runStatus")].isNull() && m_run_status_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_test_series_isValid = ::OpenAPI::fromJsonValue(m_test_series, json[QString("testSeries")]);
    m_test_series_isSet = !json[QString("testSeries")].isNull() && m_test_series_isValid;

    m_test_type_isValid = ::OpenAPI::fromJsonValue(m_test_type, json[QString("testType")]);
    m_test_type_isSet = !json[QString("testType")].isNull() && m_test_type_isValid;
}

QString OAITestRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRun::asJsonObject() const {
    QJsonObject obj;
    if (m_app_version_isSet) {
        obj.insert(QString("appVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_result_status_isSet) {
        obj.insert(QString("resultStatus"), ::OpenAPI::toJsonValue(m_result_status));
    }
    if (m_run_status_isSet) {
        obj.insert(QString("runStatus"), ::OpenAPI::toJsonValue(m_run_status));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_test_series_isSet) {
        obj.insert(QString("testSeries"), ::OpenAPI::toJsonValue(m_test_series));
    }
    if (m_test_type_isSet) {
        obj.insert(QString("testType"), ::OpenAPI::toJsonValue(m_test_type));
    }
    return obj;
}

QString OAITestRun::getAppVersion() const {
    return m_app_version;
}
void OAITestRun::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAITestRun::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAITestRun::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAITestRun::getDate() const {
    return m_date;
}
void OAITestRun::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITestRun::is_date_Set() const{
    return m_date_isSet;
}

bool OAITestRun::is_date_Valid() const{
    return m_date_isValid;
}

QString OAITestRun::getDescription() const {
    return m_description;
}
void OAITestRun::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITestRun::is_description_Set() const{
    return m_description_isSet;
}

bool OAITestRun::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITestRun::getId() const {
    return m_id;
}
void OAITestRun::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITestRun::is_id_Set() const{
    return m_id_isSet;
}

bool OAITestRun::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITestRun::getPlatform() const {
    return m_platform;
}
void OAITestRun::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAITestRun::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAITestRun::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAITestRun::getResultStatus() const {
    return m_result_status;
}
void OAITestRun::setResultStatus(const QString &result_status) {
    m_result_status = result_status;
    m_result_status_isSet = true;
}

bool OAITestRun::is_result_status_Set() const{
    return m_result_status_isSet;
}

bool OAITestRun::is_result_status_Valid() const{
    return m_result_status_isValid;
}

QString OAITestRun::getRunStatus() const {
    return m_run_status;
}
void OAITestRun::setRunStatus(const QString &run_status) {
    m_run_status = run_status;
    m_run_status_isSet = true;
}

bool OAITestRun::is_run_status_Set() const{
    return m_run_status_isSet;
}

bool OAITestRun::is_run_status_Valid() const{
    return m_run_status_isValid;
}

QString OAITestRun::getState() const {
    return m_state;
}
void OAITestRun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITestRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAITestRun::is_state_Valid() const{
    return m_state_isValid;
}

OAITest_Run_Statistics OAITestRun::getStats() const {
    return m_stats;
}
void OAITestRun::setStats(const OAITest_Run_Statistics &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAITestRun::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAITestRun::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAITestRun::getStatus() const {
    return m_status;
}
void OAITestRun::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITestRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAITestRun::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITestRun::getTestSeries() const {
    return m_test_series;
}
void OAITestRun::setTestSeries(const QString &test_series) {
    m_test_series = test_series;
    m_test_series_isSet = true;
}

bool OAITestRun::is_test_series_Set() const{
    return m_test_series_isSet;
}

bool OAITestRun::is_test_series_Valid() const{
    return m_test_series_isValid;
}

QString OAITestRun::getTestType() const {
    return m_test_type;
}
void OAITestRun::setTestType(const QString &test_type) {
    m_test_type = test_type;
    m_test_type_isSet = true;
}

bool OAITestRun::is_test_type_Set() const{
    return m_test_type_isSet;
}

bool OAITestRun::is_test_type_Valid() const{
    return m_test_type_isValid;
}

bool OAITestRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
