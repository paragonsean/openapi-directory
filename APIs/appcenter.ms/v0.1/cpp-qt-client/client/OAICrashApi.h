/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICrashApi_H
#define OAI_OAICrashApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranchConfigurations_delete_200_response.h"
#include "OAICrash.h"
#include "OAICrashGroups_list_200_response.h"
#include "OAICrashGroups_list_200_response_crash_groups_inner.h"
#include "OAICrashGroups_update_request.h"
#include "OAICrashes_delete_200_response.h"
#include "OAICrashes_getAppCrashesInfo_200_response.h"
#include "OAICrashes_getAppVersions_200_response_inner.h"
#include "OAICrashes_getCrashAttachmentLocation_200_response.h"
#include "OAICrashes_getRawCrashLocation_200_response.h"
#include "OAICrashes_listAttachments_200_response_inner.h"
#include "OAIMissingSymbolGroups_info_200_response.h"
#include "OAIMissingSymbolGroups_list_200_response.h"
#include "OAIMissingSymbolGroups_list_default_response.h"
#include "OAIStacktrace.h"
#include "OAISymbolUploads_complete_request.h"
#include "OAISymbolUploads_create_200_response.h"
#include "OAISymbolUploads_create_request.h"
#include "OAISymbolUploads_getLocation_200_response.h"
#include "OAISymbolUploads_list_200_response_inner.h"
#include "OAISymbols_getLocation_200_response.h"
#include "OAISymbols_getStatus_200_response.h"
#include "OAISymbols_list_200_response_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICrashApi : public QObject {
    Q_OBJECT

public:
    OAICrashApi(const int timeOut = 0);
    ~OAICrashApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashGroupsGet(const QString &crash_group_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  grouping_only bool [optional]
    */
    Q_DECL_DEPRECATED virtual void crashGroupsGetStacktrace(const QString &crash_group_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &grouping_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  last_occurrence_from QDateTime [optional]
    * @param[in]  last_occurrence_to QDateTime [optional]
    * @param[in]  app_version QString [optional]
    * @param[in]  group_type QString [optional]
    * @param[in]  group_status QString [optional]
    * @param[in]  group_text_search QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  continuation_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void crashGroupsList(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &last_occurrence_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &last_occurrence_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &app_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_text_search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &continuation_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_crash_groups_update_request OAICrashGroups_update_request [required]
    */
    Q_DECL_DEPRECATED virtual void crashGroupsUpdate(const QString &crash_group_id, const QString &owner_name, const QString &app_name, const OAICrashGroups_update_request &oai_crash_groups_update_request);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  retention_delete bool [optional]
    */
    Q_DECL_DEPRECATED virtual void crashesDelete(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &retention_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  include_report bool [optional]
    * @param[in]  include_log bool [optional]
    * @param[in]  include_details bool [optional]
    * @param[in]  include_stacktrace bool [optional]
    * @param[in]  grouping_only bool [optional]
    */
    Q_DECL_DEPRECATED virtual void crashesGet(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &include_report = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_log = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_stacktrace = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &grouping_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesGetAppCrashesInfo(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesGetAppVersions(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesGetCrashAttachmentLocation(const QString &crash_id, const QString &attachment_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesGetCrashTextAttachmentContent(const QString &crash_id, const QString &attachment_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesGetNativeCrash(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesGetNativeCrashDownload(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesGetRawCrashLocation(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  grouping_only bool [optional]
    */
    Q_DECL_DEPRECATED virtual void crashesGetStacktrace(const QString &crash_group_id, const QString &crash_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &grouping_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  include_report bool [optional]
    * @param[in]  include_log bool [optional]
    * @param[in]  date_from QDateTime [optional]
    * @param[in]  date_to QDateTime [optional]
    * @param[in]  app_version QString [optional]
    * @param[in]  error_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void crashesList(const QString &crash_group_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &include_report = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_log = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &date_from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &date_to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &app_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void crashesListAttachments(const QString &crash_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  symbol_group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void missingSymbolGroupsGet(const QString &symbol_group_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void missingSymbolGroupsInfo(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  top qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void missingSymbolGroupsList(const qint32 &top, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  symbol_upload_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_symbol_uploads_complete_request OAISymbolUploads_complete_request [required]
    */
    virtual void symbolUploadsComplete(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name, const OAISymbolUploads_complete_request &oai_symbol_uploads_complete_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_symbol_uploads_create_request OAISymbolUploads_create_request [required]
    */
    virtual void symbolUploadsCreate(const QString &owner_name, const QString &app_name, const OAISymbolUploads_create_request &oai_symbol_uploads_create_request);

    /**
    * @param[in]  symbol_upload_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolUploadsDelete(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  symbol_upload_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolUploadsGet(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  symbol_upload_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolUploadsGetLocation(const QString &symbol_upload_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  top qint64 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  symbol_type QString [optional]
    */
    virtual void symbolUploadsList(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &symbol_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  symbol_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolsGet(const QString &symbol_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  symbol_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolsGetLocation(const QString &symbol_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  symbol_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolsGetStatus(const QString &symbol_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  symbol_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolsIgnore(const QString &symbol_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void symbolsList(const QString &owner_name, const QString &app_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void crashGroupsGetCallback(OAIHttpRequestWorker *worker);
    void crashGroupsGetStacktraceCallback(OAIHttpRequestWorker *worker);
    void crashGroupsListCallback(OAIHttpRequestWorker *worker);
    void crashGroupsUpdateCallback(OAIHttpRequestWorker *worker);
    void crashesDeleteCallback(OAIHttpRequestWorker *worker);
    void crashesGetCallback(OAIHttpRequestWorker *worker);
    void crashesGetAppCrashesInfoCallback(OAIHttpRequestWorker *worker);
    void crashesGetAppVersionsCallback(OAIHttpRequestWorker *worker);
    void crashesGetCrashAttachmentLocationCallback(OAIHttpRequestWorker *worker);
    void crashesGetCrashTextAttachmentContentCallback(OAIHttpRequestWorker *worker);
    void crashesGetNativeCrashCallback(OAIHttpRequestWorker *worker);
    void crashesGetNativeCrashDownloadCallback(OAIHttpRequestWorker *worker);
    void crashesGetRawCrashLocationCallback(OAIHttpRequestWorker *worker);
    void crashesGetStacktraceCallback(OAIHttpRequestWorker *worker);
    void crashesListCallback(OAIHttpRequestWorker *worker);
    void crashesListAttachmentsCallback(OAIHttpRequestWorker *worker);
    void missingSymbolGroupsGetCallback(OAIHttpRequestWorker *worker);
    void missingSymbolGroupsInfoCallback(OAIHttpRequestWorker *worker);
    void missingSymbolGroupsListCallback(OAIHttpRequestWorker *worker);
    void symbolUploadsCompleteCallback(OAIHttpRequestWorker *worker);
    void symbolUploadsCreateCallback(OAIHttpRequestWorker *worker);
    void symbolUploadsDeleteCallback(OAIHttpRequestWorker *worker);
    void symbolUploadsGetCallback(OAIHttpRequestWorker *worker);
    void symbolUploadsGetLocationCallback(OAIHttpRequestWorker *worker);
    void symbolUploadsListCallback(OAIHttpRequestWorker *worker);
    void symbolsGetCallback(OAIHttpRequestWorker *worker);
    void symbolsGetLocationCallback(OAIHttpRequestWorker *worker);
    void symbolsGetStatusCallback(OAIHttpRequestWorker *worker);
    void symbolsIgnoreCallback(OAIHttpRequestWorker *worker);
    void symbolsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void crashGroupsGetSignal(OAICrashGroups_list_200_response_crash_groups_inner summary);
    void crashGroupsGetStacktraceSignal(OAIStacktrace summary);
    void crashGroupsListSignal(OAICrashGroups_list_200_response summary);
    void crashGroupsUpdateSignal(OAICrashGroups_list_200_response_crash_groups_inner summary);
    void crashesDeleteSignal(OAICrashes_delete_200_response summary);
    void crashesGetSignal(OAICrash summary);
    void crashesGetAppCrashesInfoSignal(OAICrashes_getAppCrashesInfo_200_response summary);
    void crashesGetAppVersionsSignal(QList<OAICrashes_getAppVersions_200_response_inner> summary);
    void crashesGetCrashAttachmentLocationSignal(OAICrashes_getCrashAttachmentLocation_200_response summary);
    void crashesGetCrashTextAttachmentContentSignal(QString summary);
    void crashesGetNativeCrashSignal(QString summary);
    void crashesGetNativeCrashDownloadSignal(QString summary);
    void crashesGetRawCrashLocationSignal(OAICrashes_getRawCrashLocation_200_response summary);
    void crashesGetStacktraceSignal(OAIStacktrace summary);
    void crashesListSignal(QList<OAICrash> summary);
    void crashesListAttachmentsSignal(QList<OAICrashes_listAttachments_200_response_inner> summary);
    void missingSymbolGroupsGetSignal(OAIMissingSymbolGroups_list_200_response summary);
    void missingSymbolGroupsInfoSignal(OAIMissingSymbolGroups_info_200_response summary);
    void missingSymbolGroupsListSignal(OAIMissingSymbolGroups_list_200_response summary);
    void symbolUploadsCompleteSignal(OAISymbolUploads_list_200_response_inner summary);
    void symbolUploadsCreateSignal(OAISymbolUploads_create_200_response summary);
    void symbolUploadsDeleteSignal(OAISymbolUploads_list_200_response_inner summary);
    void symbolUploadsGetSignal(OAISymbolUploads_list_200_response_inner summary);
    void symbolUploadsGetLocationSignal(OAISymbolUploads_getLocation_200_response summary);
    void symbolUploadsListSignal(QList<OAISymbolUploads_list_200_response_inner> summary);
    void symbolsGetSignal(OAISymbols_list_200_response_inner summary);
    void symbolsGetLocationSignal(OAISymbols_getLocation_200_response summary);
    void symbolsGetStatusSignal(OAISymbols_getStatus_200_response summary);
    void symbolsIgnoreSignal(OAISymbols_list_200_response_inner summary);
    void symbolsListSignal(QList<OAISymbols_list_200_response_inner> summary);


    void crashGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAICrashGroups_list_200_response_crash_groups_inner summary);
    void crashGroupsGetStacktraceSignalFull(OAIHttpRequestWorker *worker, OAIStacktrace summary);
    void crashGroupsListSignalFull(OAIHttpRequestWorker *worker, OAICrashGroups_list_200_response summary);
    void crashGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAICrashGroups_list_200_response_crash_groups_inner summary);
    void crashesDeleteSignalFull(OAIHttpRequestWorker *worker, OAICrashes_delete_200_response summary);
    void crashesGetSignalFull(OAIHttpRequestWorker *worker, OAICrash summary);
    void crashesGetAppCrashesInfoSignalFull(OAIHttpRequestWorker *worker, OAICrashes_getAppCrashesInfo_200_response summary);
    void crashesGetAppVersionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICrashes_getAppVersions_200_response_inner> summary);
    void crashesGetCrashAttachmentLocationSignalFull(OAIHttpRequestWorker *worker, OAICrashes_getCrashAttachmentLocation_200_response summary);
    void crashesGetCrashTextAttachmentContentSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void crashesGetNativeCrashSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void crashesGetNativeCrashDownloadSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void crashesGetRawCrashLocationSignalFull(OAIHttpRequestWorker *worker, OAICrashes_getRawCrashLocation_200_response summary);
    void crashesGetStacktraceSignalFull(OAIHttpRequestWorker *worker, OAIStacktrace summary);
    void crashesListSignalFull(OAIHttpRequestWorker *worker, QList<OAICrash> summary);
    void crashesListAttachmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAICrashes_listAttachments_200_response_inner> summary);
    void missingSymbolGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIMissingSymbolGroups_list_200_response summary);
    void missingSymbolGroupsInfoSignalFull(OAIHttpRequestWorker *worker, OAIMissingSymbolGroups_info_200_response summary);
    void missingSymbolGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIMissingSymbolGroups_list_200_response summary);
    void symbolUploadsCompleteSignalFull(OAIHttpRequestWorker *worker, OAISymbolUploads_list_200_response_inner summary);
    void symbolUploadsCreateSignalFull(OAIHttpRequestWorker *worker, OAISymbolUploads_create_200_response summary);
    void symbolUploadsDeleteSignalFull(OAIHttpRequestWorker *worker, OAISymbolUploads_list_200_response_inner summary);
    void symbolUploadsGetSignalFull(OAIHttpRequestWorker *worker, OAISymbolUploads_list_200_response_inner summary);
    void symbolUploadsGetLocationSignalFull(OAIHttpRequestWorker *worker, OAISymbolUploads_getLocation_200_response summary);
    void symbolUploadsListSignalFull(OAIHttpRequestWorker *worker, QList<OAISymbolUploads_list_200_response_inner> summary);
    void symbolsGetSignalFull(OAIHttpRequestWorker *worker, OAISymbols_list_200_response_inner summary);
    void symbolsGetLocationSignalFull(OAIHttpRequestWorker *worker, OAISymbols_getLocation_200_response summary);
    void symbolsGetStatusSignalFull(OAIHttpRequestWorker *worker, OAISymbols_getStatus_200_response summary);
    void symbolsIgnoreSignalFull(OAIHttpRequestWorker *worker, OAISymbols_list_200_response_inner summary);
    void symbolsListSignalFull(OAIHttpRequestWorker *worker, QList<OAISymbols_list_200_response_inner> summary);

    Q_DECL_DEPRECATED_X("Use crashGroupsGetSignalError() instead")
    void crashGroupsGetSignalE(OAICrashGroups_list_200_response_crash_groups_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsGetSignalError(OAICrashGroups_list_200_response_crash_groups_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashGroupsGetStacktraceSignalError() instead")
    void crashGroupsGetStacktraceSignalE(OAIStacktrace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsGetStacktraceSignalError(OAIStacktrace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashGroupsListSignalError() instead")
    void crashGroupsListSignalE(OAICrashGroups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsListSignalError(OAICrashGroups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashGroupsUpdateSignalError() instead")
    void crashGroupsUpdateSignalE(OAICrashGroups_list_200_response_crash_groups_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsUpdateSignalError(OAICrashGroups_list_200_response_crash_groups_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesDeleteSignalError() instead")
    void crashesDeleteSignalE(OAICrashes_delete_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesDeleteSignalError(OAICrashes_delete_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetSignalError() instead")
    void crashesGetSignalE(OAICrash summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetSignalError(OAICrash summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetAppCrashesInfoSignalError() instead")
    void crashesGetAppCrashesInfoSignalE(OAICrashes_getAppCrashesInfo_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetAppCrashesInfoSignalError(OAICrashes_getAppCrashesInfo_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetAppVersionsSignalError() instead")
    void crashesGetAppVersionsSignalE(QList<OAICrashes_getAppVersions_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetAppVersionsSignalError(QList<OAICrashes_getAppVersions_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetCrashAttachmentLocationSignalError() instead")
    void crashesGetCrashAttachmentLocationSignalE(OAICrashes_getCrashAttachmentLocation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetCrashAttachmentLocationSignalError(OAICrashes_getCrashAttachmentLocation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetCrashTextAttachmentContentSignalError() instead")
    void crashesGetCrashTextAttachmentContentSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetCrashTextAttachmentContentSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetNativeCrashSignalError() instead")
    void crashesGetNativeCrashSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetNativeCrashSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetNativeCrashDownloadSignalError() instead")
    void crashesGetNativeCrashDownloadSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetNativeCrashDownloadSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetRawCrashLocationSignalError() instead")
    void crashesGetRawCrashLocationSignalE(OAICrashes_getRawCrashLocation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetRawCrashLocationSignalError(OAICrashes_getRawCrashLocation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetStacktraceSignalError() instead")
    void crashesGetStacktraceSignalE(OAIStacktrace summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetStacktraceSignalError(OAIStacktrace summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesListSignalError() instead")
    void crashesListSignalE(QList<OAICrash> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesListSignalError(QList<OAICrash> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesListAttachmentsSignalError() instead")
    void crashesListAttachmentsSignalE(QList<OAICrashes_listAttachments_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesListAttachmentsSignalError(QList<OAICrashes_listAttachments_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use missingSymbolGroupsGetSignalError() instead")
    void missingSymbolGroupsGetSignalE(OAIMissingSymbolGroups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void missingSymbolGroupsGetSignalError(OAIMissingSymbolGroups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use missingSymbolGroupsInfoSignalError() instead")
    void missingSymbolGroupsInfoSignalE(OAIMissingSymbolGroups_info_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void missingSymbolGroupsInfoSignalError(OAIMissingSymbolGroups_info_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use missingSymbolGroupsListSignalError() instead")
    void missingSymbolGroupsListSignalE(OAIMissingSymbolGroups_list_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void missingSymbolGroupsListSignalError(OAIMissingSymbolGroups_list_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsCompleteSignalError() instead")
    void symbolUploadsCompleteSignalE(OAISymbolUploads_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsCompleteSignalError(OAISymbolUploads_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsCreateSignalError() instead")
    void symbolUploadsCreateSignalE(OAISymbolUploads_create_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsCreateSignalError(OAISymbolUploads_create_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsDeleteSignalError() instead")
    void symbolUploadsDeleteSignalE(OAISymbolUploads_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsDeleteSignalError(OAISymbolUploads_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsGetSignalError() instead")
    void symbolUploadsGetSignalE(OAISymbolUploads_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsGetSignalError(OAISymbolUploads_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsGetLocationSignalError() instead")
    void symbolUploadsGetLocationSignalE(OAISymbolUploads_getLocation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsGetLocationSignalError(OAISymbolUploads_getLocation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsListSignalError() instead")
    void symbolUploadsListSignalE(QList<OAISymbolUploads_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsListSignalError(QList<OAISymbolUploads_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsGetSignalError() instead")
    void symbolsGetSignalE(OAISymbols_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsGetSignalError(OAISymbols_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsGetLocationSignalError() instead")
    void symbolsGetLocationSignalE(OAISymbols_getLocation_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsGetLocationSignalError(OAISymbols_getLocation_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsGetStatusSignalError() instead")
    void symbolsGetStatusSignalE(OAISymbols_getStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsGetStatusSignalError(OAISymbols_getStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsIgnoreSignalError() instead")
    void symbolsIgnoreSignalE(OAISymbols_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsIgnoreSignalError(OAISymbols_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsListSignalError() instead")
    void symbolsListSignalE(QList<OAISymbols_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsListSignalError(QList<OAISymbols_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use crashGroupsGetSignalErrorFull() instead")
    void crashGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashGroupsGetStacktraceSignalErrorFull() instead")
    void crashGroupsGetStacktraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsGetStacktraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashGroupsListSignalErrorFull() instead")
    void crashGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashGroupsUpdateSignalErrorFull() instead")
    void crashGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesDeleteSignalErrorFull() instead")
    void crashesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetSignalErrorFull() instead")
    void crashesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetAppCrashesInfoSignalErrorFull() instead")
    void crashesGetAppCrashesInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetAppCrashesInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetAppVersionsSignalErrorFull() instead")
    void crashesGetAppVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetAppVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetCrashAttachmentLocationSignalErrorFull() instead")
    void crashesGetCrashAttachmentLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetCrashAttachmentLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetCrashTextAttachmentContentSignalErrorFull() instead")
    void crashesGetCrashTextAttachmentContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetCrashTextAttachmentContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetNativeCrashSignalErrorFull() instead")
    void crashesGetNativeCrashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetNativeCrashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetNativeCrashDownloadSignalErrorFull() instead")
    void crashesGetNativeCrashDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetNativeCrashDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetRawCrashLocationSignalErrorFull() instead")
    void crashesGetRawCrashLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetRawCrashLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesGetStacktraceSignalErrorFull() instead")
    void crashesGetStacktraceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesGetStacktraceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesListSignalErrorFull() instead")
    void crashesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesListAttachmentsSignalErrorFull() instead")
    void crashesListAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesListAttachmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use missingSymbolGroupsGetSignalErrorFull() instead")
    void missingSymbolGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void missingSymbolGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use missingSymbolGroupsInfoSignalErrorFull() instead")
    void missingSymbolGroupsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void missingSymbolGroupsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use missingSymbolGroupsListSignalErrorFull() instead")
    void missingSymbolGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void missingSymbolGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsCompleteSignalErrorFull() instead")
    void symbolUploadsCompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsCompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsCreateSignalErrorFull() instead")
    void symbolUploadsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsDeleteSignalErrorFull() instead")
    void symbolUploadsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsGetSignalErrorFull() instead")
    void symbolUploadsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsGetLocationSignalErrorFull() instead")
    void symbolUploadsGetLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsGetLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolUploadsListSignalErrorFull() instead")
    void symbolUploadsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolUploadsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsGetSignalErrorFull() instead")
    void symbolsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsGetLocationSignalErrorFull() instead")
    void symbolsGetLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsGetLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsGetStatusSignalErrorFull() instead")
    void symbolsGetStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsGetStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsIgnoreSignalErrorFull() instead")
    void symbolsIgnoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsIgnoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use symbolsListSignalErrorFull() instead")
    void symbolsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void symbolsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
