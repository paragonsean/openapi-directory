/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillingAggregatedInformation_getByApp_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillingAggregatedInformation_getByApp_200_response::OAIBillingAggregatedInformation_getByApp_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillingAggregatedInformation_getByApp_200_response::OAIBillingAggregatedInformation_getByApp_200_response() {
    this->initializeModel();
}

OAIBillingAggregatedInformation_getByApp_200_response::~OAIBillingAggregatedInformation_getByApp_200_response() {}

void OAIBillingAggregatedInformation_getByApp_200_response::initializeModel() {

    m_azure_subscription_id_isSet = false;
    m_azure_subscription_id_isValid = false;

    m_azure_subscription_state_isSet = false;
    m_azure_subscription_state_isValid = false;

    m_billing_plans_isSet = false;
    m_billing_plans_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBillingAggregatedInformation_getByApp_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillingAggregatedInformation_getByApp_200_response::fromJsonObject(QJsonObject json) {

    m_azure_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_azure_subscription_id, json[QString("azureSubscriptionId")]);
    m_azure_subscription_id_isSet = !json[QString("azureSubscriptionId")].isNull() && m_azure_subscription_id_isValid;

    m_azure_subscription_state_isValid = ::OpenAPI::fromJsonValue(m_azure_subscription_state, json[QString("azureSubscriptionState")]);
    m_azure_subscription_state_isSet = !json[QString("azureSubscriptionState")].isNull() && m_azure_subscription_state_isValid;

    m_billing_plans_isValid = ::OpenAPI::fromJsonValue(m_billing_plans, json[QString("billingPlans")]);
    m_billing_plans_isSet = !json[QString("billingPlans")].isNull() && m_billing_plans_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBillingAggregatedInformation_getByApp_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillingAggregatedInformation_getByApp_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_subscription_id_isSet) {
        obj.insert(QString("azureSubscriptionId"), ::OpenAPI::toJsonValue(m_azure_subscription_id));
    }
    if (m_azure_subscription_state_isSet) {
        obj.insert(QString("azureSubscriptionState"), ::OpenAPI::toJsonValue(m_azure_subscription_state));
    }
    if (m_billing_plans.isSet()) {
        obj.insert(QString("billingPlans"), ::OpenAPI::toJsonValue(m_billing_plans));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_usage.isSet()) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIBillingAggregatedInformation_getByApp_200_response::getAzureSubscriptionId() const {
    return m_azure_subscription_id;
}
void OAIBillingAggregatedInformation_getByApp_200_response::setAzureSubscriptionId(const QString &azure_subscription_id) {
    m_azure_subscription_id = azure_subscription_id;
    m_azure_subscription_id_isSet = true;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_azure_subscription_id_Set() const{
    return m_azure_subscription_id_isSet;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_azure_subscription_id_Valid() const{
    return m_azure_subscription_id_isValid;
}

QString OAIBillingAggregatedInformation_getByApp_200_response::getAzureSubscriptionState() const {
    return m_azure_subscription_state;
}
void OAIBillingAggregatedInformation_getByApp_200_response::setAzureSubscriptionState(const QString &azure_subscription_state) {
    m_azure_subscription_state = azure_subscription_state;
    m_azure_subscription_state_isSet = true;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_azure_subscription_state_Set() const{
    return m_azure_subscription_state_isSet;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_azure_subscription_state_Valid() const{
    return m_azure_subscription_state_isValid;
}

OAIBillingAggregatedInformation_getByApp_200_response_billingPlans OAIBillingAggregatedInformation_getByApp_200_response::getBillingPlans() const {
    return m_billing_plans;
}
void OAIBillingAggregatedInformation_getByApp_200_response::setBillingPlans(const OAIBillingAggregatedInformation_getByApp_200_response_billingPlans &billing_plans) {
    m_billing_plans = billing_plans;
    m_billing_plans_isSet = true;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_billing_plans_Set() const{
    return m_billing_plans_isSet;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_billing_plans_Valid() const{
    return m_billing_plans_isValid;
}

QString OAIBillingAggregatedInformation_getByApp_200_response::getId() const {
    return m_id;
}
void OAIBillingAggregatedInformation_getByApp_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBillingAggregatedInformation_getByApp_200_response::getTimestamp() const {
    return m_timestamp;
}
void OAIBillingAggregatedInformation_getByApp_200_response::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIBillingAggregatedInformation_getByApp_200_response_usage OAIBillingAggregatedInformation_getByApp_200_response::getUsage() const {
    return m_usage;
}
void OAIBillingAggregatedInformation_getByApp_200_response::setUsage(const OAIBillingAggregatedInformation_getByApp_200_response_usage &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIBillingAggregatedInformation_getByApp_200_response::getVersion() const {
    return m_version;
}
void OAIBillingAggregatedInformation_getByApp_200_response::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_subscription_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_plans.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillingAggregatedInformation_getByApp_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
