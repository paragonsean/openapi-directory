/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreReleases_getLatest_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreReleases_getLatest_200_response_inner::OAIStoreReleases_getLatest_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreReleases_getLatest_200_response_inner::OAIStoreReleases_getLatest_200_response_inner() {
    this->initializeModel();
}

OAIStoreReleases_getLatest_200_response_inner::~OAIStoreReleases_getLatest_200_response_inner() {}

void OAIStoreReleases_getLatest_200_response_inner::initializeModel() {

    m_android_min_api_level_isSet = false;
    m_android_min_api_level_isValid = false;

    m_app_display_name_isSet = false;
    m_app_display_name_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_bundle_identifier_isSet = false;
    m_bundle_identifier_isValid = false;

    m_distribution_stores_isSet = false;
    m_distribution_stores_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_install_url_isSet = false;
    m_install_url_isValid = false;

    m_min_os_isSet = false;
    m_min_os_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;

    m_short_version_isSet = false;
    m_short_version_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uploaded_at_isSet = false;
    m_uploaded_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIStoreReleases_getLatest_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreReleases_getLatest_200_response_inner::fromJsonObject(QJsonObject json) {

    m_android_min_api_level_isValid = ::OpenAPI::fromJsonValue(m_android_min_api_level, json[QString("android_min_api_level")]);
    m_android_min_api_level_isSet = !json[QString("android_min_api_level")].isNull() && m_android_min_api_level_isValid;

    m_app_display_name_isValid = ::OpenAPI::fromJsonValue(m_app_display_name, json[QString("app_display_name")]);
    m_app_display_name_isSet = !json[QString("app_display_name")].isNull() && m_app_display_name_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("app_name")]);
    m_app_name_isSet = !json[QString("app_name")].isNull() && m_app_name_isValid;

    m_bundle_identifier_isValid = ::OpenAPI::fromJsonValue(m_bundle_identifier, json[QString("bundle_identifier")]);
    m_bundle_identifier_isSet = !json[QString("bundle_identifier")].isNull() && m_bundle_identifier_isValid;

    m_distribution_stores_isValid = ::OpenAPI::fromJsonValue(m_distribution_stores, json[QString("distribution_stores")]);
    m_distribution_stores_isSet = !json[QString("distribution_stores")].isNull() && m_distribution_stores_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_install_url_isValid = ::OpenAPI::fromJsonValue(m_install_url, json[QString("install_url")]);
    m_install_url_isSet = !json[QString("install_url")].isNull() && m_install_url_isValid;

    m_min_os_isValid = ::OpenAPI::fromJsonValue(m_min_os, json[QString("min_os")]);
    m_min_os_isSet = !json[QString("min_os")].isNull() && m_min_os_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("release_notes")]);
    m_release_notes_isSet = !json[QString("release_notes")].isNull() && m_release_notes_isValid;

    m_short_version_isValid = ::OpenAPI::fromJsonValue(m_short_version, json[QString("short_version")]);
    m_short_version_isSet = !json[QString("short_version")].isNull() && m_short_version_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uploaded_at_isValid = ::OpenAPI::fromJsonValue(m_uploaded_at, json[QString("uploaded_at")]);
    m_uploaded_at_isSet = !json[QString("uploaded_at")].isNull() && m_uploaded_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreReleases_getLatest_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_android_min_api_level_isSet) {
        obj.insert(QString("android_min_api_level"), ::OpenAPI::toJsonValue(m_android_min_api_level));
    }
    if (m_app_display_name_isSet) {
        obj.insert(QString("app_display_name"), ::OpenAPI::toJsonValue(m_app_display_name));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("app_name"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_bundle_identifier_isSet) {
        obj.insert(QString("bundle_identifier"), ::OpenAPI::toJsonValue(m_bundle_identifier));
    }
    if (m_distribution_stores.size() > 0) {
        obj.insert(QString("distribution_stores"), ::OpenAPI::toJsonValue(m_distribution_stores));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_install_url_isSet) {
        obj.insert(QString("install_url"), ::OpenAPI::toJsonValue(m_install_url));
    }
    if (m_min_os_isSet) {
        obj.insert(QString("min_os"), ::OpenAPI::toJsonValue(m_min_os));
    }
    if (m_release_notes_isSet) {
        obj.insert(QString("release_notes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    if (m_short_version_isSet) {
        obj.insert(QString("short_version"), ::OpenAPI::toJsonValue(m_short_version));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uploaded_at_isSet) {
        obj.insert(QString("uploaded_at"), ::OpenAPI::toJsonValue(m_uploaded_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIStoreReleases_getLatest_200_response_inner::getAndroidMinApiLevel() const {
    return m_android_min_api_level;
}
void OAIStoreReleases_getLatest_200_response_inner::setAndroidMinApiLevel(const QString &android_min_api_level) {
    m_android_min_api_level = android_min_api_level;
    m_android_min_api_level_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_android_min_api_level_Set() const{
    return m_android_min_api_level_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_android_min_api_level_Valid() const{
    return m_android_min_api_level_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getAppDisplayName() const {
    return m_app_display_name;
}
void OAIStoreReleases_getLatest_200_response_inner::setAppDisplayName(const QString &app_display_name) {
    m_app_display_name = app_display_name;
    m_app_display_name_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_app_display_name_Set() const{
    return m_app_display_name_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_app_display_name_Valid() const{
    return m_app_display_name_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getAppName() const {
    return m_app_name;
}
void OAIStoreReleases_getLatest_200_response_inner::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getBundleIdentifier() const {
    return m_bundle_identifier;
}
void OAIStoreReleases_getLatest_200_response_inner::setBundleIdentifier(const QString &bundle_identifier) {
    m_bundle_identifier = bundle_identifier;
    m_bundle_identifier_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_bundle_identifier_Set() const{
    return m_bundle_identifier_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_bundle_identifier_Valid() const{
    return m_bundle_identifier_isValid;
}

QList<OAIStoreReleases_getLatest_200_response_inner_distribution_stores_inner> OAIStoreReleases_getLatest_200_response_inner::getDistributionStores() const {
    return m_distribution_stores;
}
void OAIStoreReleases_getLatest_200_response_inner::setDistributionStores(const QList<OAIStoreReleases_getLatest_200_response_inner_distribution_stores_inner> &distribution_stores) {
    m_distribution_stores = distribution_stores;
    m_distribution_stores_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_distribution_stores_Set() const{
    return m_distribution_stores_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_distribution_stores_Valid() const{
    return m_distribution_stores_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getDownloadUrl() const {
    return m_download_url;
}
void OAIStoreReleases_getLatest_200_response_inner::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getFingerprint() const {
    return m_fingerprint;
}
void OAIStoreReleases_getLatest_200_response_inner::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

double OAIStoreReleases_getLatest_200_response_inner::getId() const {
    return m_id;
}
void OAIStoreReleases_getLatest_200_response_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getInstallUrl() const {
    return m_install_url;
}
void OAIStoreReleases_getLatest_200_response_inner::setInstallUrl(const QString &install_url) {
    m_install_url = install_url;
    m_install_url_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_install_url_Set() const{
    return m_install_url_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_install_url_Valid() const{
    return m_install_url_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getMinOs() const {
    return m_min_os;
}
void OAIStoreReleases_getLatest_200_response_inner::setMinOs(const QString &min_os) {
    m_min_os = min_os;
    m_min_os_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_min_os_Set() const{
    return m_min_os_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_min_os_Valid() const{
    return m_min_os_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getReleaseNotes() const {
    return m_release_notes;
}
void OAIStoreReleases_getLatest_200_response_inner::setReleaseNotes(const QString &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getShortVersion() const {
    return m_short_version;
}
void OAIStoreReleases_getLatest_200_response_inner::setShortVersion(const QString &short_version) {
    m_short_version = short_version;
    m_short_version_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_short_version_Set() const{
    return m_short_version_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_short_version_Valid() const{
    return m_short_version_isValid;
}

double OAIStoreReleases_getLatest_200_response_inner::getSize() const {
    return m_size;
}
void OAIStoreReleases_getLatest_200_response_inner::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getStatus() const {
    return m_status;
}
void OAIStoreReleases_getLatest_200_response_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getUploadedAt() const {
    return m_uploaded_at;
}
void OAIStoreReleases_getLatest_200_response_inner::setUploadedAt(const QString &uploaded_at) {
    m_uploaded_at = uploaded_at;
    m_uploaded_at_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_uploaded_at_Set() const{
    return m_uploaded_at_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_uploaded_at_Valid() const{
    return m_uploaded_at_isValid;
}

QString OAIStoreReleases_getLatest_200_response_inner::getVersion() const {
    return m_version;
}
void OAIStoreReleases_getLatest_200_response_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIStoreReleases_getLatest_200_response_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIStoreReleases_getLatest_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_min_api_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreReleases_getLatest_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
