/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepositoryConfigurations_list_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepositoryConfigurations_list_200_response_inner::OAIRepositoryConfigurations_list_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepositoryConfigurations_list_200_response_inner::OAIRepositoryConfigurations_list_200_response_inner() {
    this->initializeModel();
}

OAIRepositoryConfigurations_list_200_response_inner::~OAIRepositoryConfigurations_list_200_response_inner() {}

void OAIRepositoryConfigurations_list_200_response_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_installation_id_isSet = false;
    m_installation_id_isValid = false;

    m_external_user_id_isSet = false;
    m_external_user_id_isValid = false;

    m_repo_id_isSet = false;
    m_repo_id_isValid = false;

    m_repo_url_isSet = false;
    m_repo_url_isValid = false;

    m_service_connection_id_isSet = false;
    m_service_connection_id_isValid = false;
}

void OAIRepositoryConfigurations_list_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepositoryConfigurations_list_200_response_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;

    m_installation_id_isValid = ::OpenAPI::fromJsonValue(m_installation_id, json[QString("installation_id")]);
    m_installation_id_isSet = !json[QString("installation_id")].isNull() && m_installation_id_isValid;

    m_external_user_id_isValid = ::OpenAPI::fromJsonValue(m_external_user_id, json[QString("external_user_id")]);
    m_external_user_id_isSet = !json[QString("external_user_id")].isNull() && m_external_user_id_isValid;

    m_repo_id_isValid = ::OpenAPI::fromJsonValue(m_repo_id, json[QString("repo_id")]);
    m_repo_id_isSet = !json[QString("repo_id")].isNull() && m_repo_id_isValid;

    m_repo_url_isValid = ::OpenAPI::fromJsonValue(m_repo_url, json[QString("repo_url")]);
    m_repo_url_isSet = !json[QString("repo_url")].isNull() && m_repo_url_isValid;

    m_service_connection_id_isValid = ::OpenAPI::fromJsonValue(m_service_connection_id, json[QString("service_connection_id")]);
    m_service_connection_id_isSet = !json[QString("service_connection_id")].isNull() && m_service_connection_id_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepositoryConfigurations_list_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_installation_id_isSet) {
        obj.insert(QString("installation_id"), ::OpenAPI::toJsonValue(m_installation_id));
    }
    if (m_external_user_id_isSet) {
        obj.insert(QString("external_user_id"), ::OpenAPI::toJsonValue(m_external_user_id));
    }
    if (m_repo_id_isSet) {
        obj.insert(QString("repo_id"), ::OpenAPI::toJsonValue(m_repo_id));
    }
    if (m_repo_url_isSet) {
        obj.insert(QString("repo_url"), ::OpenAPI::toJsonValue(m_repo_url));
    }
    if (m_service_connection_id_isSet) {
        obj.insert(QString("service_connection_id"), ::OpenAPI::toJsonValue(m_service_connection_id));
    }
    return obj;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getId() const {
    return m_id;
}
void OAIRepositoryConfigurations_list_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getState() const {
    return m_state;
}
void OAIRepositoryConfigurations_list_200_response_inner::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getType() const {
    return m_type;
}
void OAIRepositoryConfigurations_list_200_response_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getUserEmail() const {
    return m_user_email;
}
void OAIRepositoryConfigurations_list_200_response_inner::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getInstallationId() const {
    return m_installation_id;
}
void OAIRepositoryConfigurations_list_200_response_inner::setInstallationId(const QString &installation_id) {
    m_installation_id = installation_id;
    m_installation_id_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_installation_id_Set() const{
    return m_installation_id_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_installation_id_Valid() const{
    return m_installation_id_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getExternalUserId() const {
    return m_external_user_id;
}
void OAIRepositoryConfigurations_list_200_response_inner::setExternalUserId(const QString &external_user_id) {
    m_external_user_id = external_user_id;
    m_external_user_id_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_external_user_id_Set() const{
    return m_external_user_id_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_external_user_id_Valid() const{
    return m_external_user_id_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getRepoId() const {
    return m_repo_id;
}
void OAIRepositoryConfigurations_list_200_response_inner::setRepoId(const QString &repo_id) {
    m_repo_id = repo_id;
    m_repo_id_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_repo_id_Set() const{
    return m_repo_id_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_repo_id_Valid() const{
    return m_repo_id_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getRepoUrl() const {
    return m_repo_url;
}
void OAIRepositoryConfigurations_list_200_response_inner::setRepoUrl(const QString &repo_url) {
    m_repo_url = repo_url;
    m_repo_url_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_repo_url_Set() const{
    return m_repo_url_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_repo_url_Valid() const{
    return m_repo_url_isValid;
}

QString OAIRepositoryConfigurations_list_200_response_inner::getServiceConnectionId() const {
    return m_service_connection_id;
}
void OAIRepositoryConfigurations_list_200_response_inner::setServiceConnectionId(const QString &service_connection_id) {
    m_service_connection_id = service_connection_id;
    m_service_connection_id_isSet = true;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_service_connection_id_Set() const{
    return m_service_connection_id_isSet;
}

bool OAIRepositoryConfigurations_list_200_response_inner::is_service_connection_id_Valid() const{
    return m_service_connection_id_isValid;
}

bool OAIRepositoryConfigurations_list_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepositoryConfigurations_list_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_state_isValid && m_type_isValid && m_repo_url_isValid && true;
}

} // namespace OpenAPI
