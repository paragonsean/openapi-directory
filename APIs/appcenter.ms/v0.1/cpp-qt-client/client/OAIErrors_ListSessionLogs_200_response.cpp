/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrors_ListSessionLogs_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrors_ListSessionLogs_200_response::OAIErrors_ListSessionLogs_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrors_ListSessionLogs_200_response::OAIErrors_ListSessionLogs_200_response() {
    this->initializeModel();
}

OAIErrors_ListSessionLogs_200_response::~OAIErrors_ListSessionLogs_200_response() {}

void OAIErrors_ListSessionLogs_200_response::initializeModel() {

    m_exceeded_max_limit_isSet = false;
    m_exceeded_max_limit_isValid = false;

    m_last_received_log_timestamp_isSet = false;
    m_last_received_log_timestamp_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;
}

void OAIErrors_ListSessionLogs_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrors_ListSessionLogs_200_response::fromJsonObject(QJsonObject json) {

    m_exceeded_max_limit_isValid = ::OpenAPI::fromJsonValue(m_exceeded_max_limit, json[QString("exceeded_max_limit")]);
    m_exceeded_max_limit_isSet = !json[QString("exceeded_max_limit")].isNull() && m_exceeded_max_limit_isValid;

    m_last_received_log_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_received_log_timestamp, json[QString("last_received_log_timestamp")]);
    m_last_received_log_timestamp_isSet = !json[QString("last_received_log_timestamp")].isNull() && m_last_received_log_timestamp_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;
}

QString OAIErrors_ListSessionLogs_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrors_ListSessionLogs_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_exceeded_max_limit_isSet) {
        obj.insert(QString("exceeded_max_limit"), ::OpenAPI::toJsonValue(m_exceeded_max_limit));
    }
    if (m_last_received_log_timestamp_isSet) {
        obj.insert(QString("last_received_log_timestamp"), ::OpenAPI::toJsonValue(m_last_received_log_timestamp));
    }
    if (m_logs.size() > 0) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    return obj;
}

bool OAIErrors_ListSessionLogs_200_response::isExceededMaxLimit() const {
    return m_exceeded_max_limit;
}
void OAIErrors_ListSessionLogs_200_response::setExceededMaxLimit(const bool &exceeded_max_limit) {
    m_exceeded_max_limit = exceeded_max_limit;
    m_exceeded_max_limit_isSet = true;
}

bool OAIErrors_ListSessionLogs_200_response::is_exceeded_max_limit_Set() const{
    return m_exceeded_max_limit_isSet;
}

bool OAIErrors_ListSessionLogs_200_response::is_exceeded_max_limit_Valid() const{
    return m_exceeded_max_limit_isValid;
}

QDateTime OAIErrors_ListSessionLogs_200_response::getLastReceivedLogTimestamp() const {
    return m_last_received_log_timestamp;
}
void OAIErrors_ListSessionLogs_200_response::setLastReceivedLogTimestamp(const QDateTime &last_received_log_timestamp) {
    m_last_received_log_timestamp = last_received_log_timestamp;
    m_last_received_log_timestamp_isSet = true;
}

bool OAIErrors_ListSessionLogs_200_response::is_last_received_log_timestamp_Set() const{
    return m_last_received_log_timestamp_isSet;
}

bool OAIErrors_ListSessionLogs_200_response::is_last_received_log_timestamp_Valid() const{
    return m_last_received_log_timestamp_isValid;
}

QList<OAIErrors_ListSessionLogs_200_response_logs_inner> OAIErrors_ListSessionLogs_200_response::getLogs() const {
    return m_logs;
}
void OAIErrors_ListSessionLogs_200_response::setLogs(const QList<OAIErrors_ListSessionLogs_200_response_logs_inner> &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIErrors_ListSessionLogs_200_response::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIErrors_ListSessionLogs_200_response::is_logs_Valid() const{
    return m_logs_isValid;
}

bool OAIErrors_ListSessionLogs_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exceeded_max_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_received_log_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrors_ListSessionLogs_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logs_isValid && true;
}

} // namespace OpenAPI
