/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerformanceReport_performance_data_steps_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerformanceReport_performance_data_steps_inner::OAIPerformanceReport_performance_data_steps_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerformanceReport_performance_data_steps_inner::OAIPerformanceReport_performance_data_steps_inner() {
    this->initializeModel();
}

OAIPerformanceReport_performance_data_steps_inner::~OAIPerformanceReport_performance_data_steps_inner() {}

void OAIPerformanceReport_performance_data_steps_inner::initializeModel() {

    m_avg_cpu_isSet = false;
    m_avg_cpu_isValid = false;

    m_avg_mem_isSet = false;
    m_avg_mem_isValid = false;

    m_elapsed_secs_isSet = false;
    m_elapsed_secs_isValid = false;

    m_elapsed_secs_end_isSet = false;
    m_elapsed_secs_end_isValid = false;

    m_elapsed_secs_start_isSet = false;
    m_elapsed_secs_start_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_samples_isSet = false;
    m_samples_isValid = false;
}

void OAIPerformanceReport_performance_data_steps_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerformanceReport_performance_data_steps_inner::fromJsonObject(QJsonObject json) {

    m_avg_cpu_isValid = ::OpenAPI::fromJsonValue(m_avg_cpu, json[QString("avg-cpu")]);
    m_avg_cpu_isSet = !json[QString("avg-cpu")].isNull() && m_avg_cpu_isValid;

    m_avg_mem_isValid = ::OpenAPI::fromJsonValue(m_avg_mem, json[QString("avg-mem")]);
    m_avg_mem_isSet = !json[QString("avg-mem")].isNull() && m_avg_mem_isValid;

    m_elapsed_secs_isValid = ::OpenAPI::fromJsonValue(m_elapsed_secs, json[QString("elapsed-secs")]);
    m_elapsed_secs_isSet = !json[QString("elapsed-secs")].isNull() && m_elapsed_secs_isValid;

    m_elapsed_secs_end_isValid = ::OpenAPI::fromJsonValue(m_elapsed_secs_end, json[QString("elapsed-secs-end")]);
    m_elapsed_secs_end_isSet = !json[QString("elapsed-secs-end")].isNull() && m_elapsed_secs_end_isValid;

    m_elapsed_secs_start_isValid = ::OpenAPI::fromJsonValue(m_elapsed_secs_start, json[QString("elapsed-secs-start")]);
    m_elapsed_secs_start_isSet = !json[QString("elapsed-secs-start")].isNull() && m_elapsed_secs_start_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_samples_isValid = ::OpenAPI::fromJsonValue(m_samples, json[QString("samples")]);
    m_samples_isSet = !json[QString("samples")].isNull() && m_samples_isValid;
}

QString OAIPerformanceReport_performance_data_steps_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerformanceReport_performance_data_steps_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_cpu_isSet) {
        obj.insert(QString("avg-cpu"), ::OpenAPI::toJsonValue(m_avg_cpu));
    }
    if (m_avg_mem_isSet) {
        obj.insert(QString("avg-mem"), ::OpenAPI::toJsonValue(m_avg_mem));
    }
    if (m_elapsed_secs_isSet) {
        obj.insert(QString("elapsed-secs"), ::OpenAPI::toJsonValue(m_elapsed_secs));
    }
    if (m_elapsed_secs_end_isSet) {
        obj.insert(QString("elapsed-secs-end"), ::OpenAPI::toJsonValue(m_elapsed_secs_end));
    }
    if (m_elapsed_secs_start_isSet) {
        obj.insert(QString("elapsed-secs-start"), ::OpenAPI::toJsonValue(m_elapsed_secs_start));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_samples.size() > 0) {
        obj.insert(QString("samples"), ::OpenAPI::toJsonValue(m_samples));
    }
    return obj;
}

double OAIPerformanceReport_performance_data_steps_inner::getAvgCpu() const {
    return m_avg_cpu;
}
void OAIPerformanceReport_performance_data_steps_inner::setAvgCpu(const double &avg_cpu) {
    m_avg_cpu = avg_cpu;
    m_avg_cpu_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_avg_cpu_Set() const{
    return m_avg_cpu_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_avg_cpu_Valid() const{
    return m_avg_cpu_isValid;
}

double OAIPerformanceReport_performance_data_steps_inner::getAvgMem() const {
    return m_avg_mem;
}
void OAIPerformanceReport_performance_data_steps_inner::setAvgMem(const double &avg_mem) {
    m_avg_mem = avg_mem;
    m_avg_mem_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_avg_mem_Set() const{
    return m_avg_mem_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_avg_mem_Valid() const{
    return m_avg_mem_isValid;
}

double OAIPerformanceReport_performance_data_steps_inner::getElapsedSecs() const {
    return m_elapsed_secs;
}
void OAIPerformanceReport_performance_data_steps_inner::setElapsedSecs(const double &elapsed_secs) {
    m_elapsed_secs = elapsed_secs;
    m_elapsed_secs_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_elapsed_secs_Set() const{
    return m_elapsed_secs_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_elapsed_secs_Valid() const{
    return m_elapsed_secs_isValid;
}

double OAIPerformanceReport_performance_data_steps_inner::getElapsedSecsEnd() const {
    return m_elapsed_secs_end;
}
void OAIPerformanceReport_performance_data_steps_inner::setElapsedSecsEnd(const double &elapsed_secs_end) {
    m_elapsed_secs_end = elapsed_secs_end;
    m_elapsed_secs_end_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_elapsed_secs_end_Set() const{
    return m_elapsed_secs_end_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_elapsed_secs_end_Valid() const{
    return m_elapsed_secs_end_isValid;
}

double OAIPerformanceReport_performance_data_steps_inner::getElapsedSecsStart() const {
    return m_elapsed_secs_start;
}
void OAIPerformanceReport_performance_data_steps_inner::setElapsedSecsStart(const double &elapsed_secs_start) {
    m_elapsed_secs_start = elapsed_secs_start;
    m_elapsed_secs_start_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_elapsed_secs_start_Set() const{
    return m_elapsed_secs_start_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_elapsed_secs_start_Valid() const{
    return m_elapsed_secs_start_isValid;
}

QString OAIPerformanceReport_performance_data_steps_inner::getId() const {
    return m_id;
}
void OAIPerformanceReport_performance_data_steps_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPerformanceReport_performance_data_steps_inner::getName() const {
    return m_name;
}
void OAIPerformanceReport_performance_data_steps_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPerformanceReport_performance_data_steps_inner_samples_inner> OAIPerformanceReport_performance_data_steps_inner::getSamples() const {
    return m_samples;
}
void OAIPerformanceReport_performance_data_steps_inner::setSamples(const QList<OAIPerformanceReport_performance_data_steps_inner_samples_inner> &samples) {
    m_samples = samples;
    m_samples_isSet = true;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_samples_Set() const{
    return m_samples_isSet;
}

bool OAIPerformanceReport_performance_data_steps_inner::is_samples_Valid() const{
    return m_samples_isValid;
}

bool OAIPerformanceReport_performance_data_steps_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_mem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_secs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_secs_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_secs_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samples.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerformanceReport_performance_data_steps_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
