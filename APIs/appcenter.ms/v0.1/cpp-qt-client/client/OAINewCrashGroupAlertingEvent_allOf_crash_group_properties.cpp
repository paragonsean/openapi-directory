/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewCrashGroupAlertingEvent_allOf_crash_group_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::OAINewCrashGroupAlertingEvent_allOf_crash_group_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::OAINewCrashGroupAlertingEvent_allOf_crash_group_properties() {
    this->initializeModel();
}

OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::~OAINewCrashGroupAlertingEvent_allOf_crash_group_properties() {}

void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::initializeModel() {

    m_app_display_name_isSet = false;
    m_app_display_name_isValid = false;

    m_app_platform_isSet = false;
    m_app_platform_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_stack_trace_isSet = false;
    m_stack_trace_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::fromJsonObject(QJsonObject json) {

    m_app_display_name_isValid = ::OpenAPI::fromJsonValue(m_app_display_name, json[QString("app_display_name")]);
    m_app_display_name_isSet = !json[QString("app_display_name")].isNull() && m_app_display_name_isValid;

    m_app_platform_isValid = ::OpenAPI::fromJsonValue(m_app_platform, json[QString("app_platform")]);
    m_app_platform_isSet = !json[QString("app_platform")].isNull() && m_app_platform_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("app_version")]);
    m_app_version_isSet = !json[QString("app_version")].isNull() && m_app_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_stack_trace_isValid = ::OpenAPI::fromJsonValue(m_stack_trace, json[QString("stack_trace")]);
    m_stack_trace_isSet = !json[QString("stack_trace")].isNull() && m_stack_trace_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_app_display_name_isSet) {
        obj.insert(QString("app_display_name"), ::OpenAPI::toJsonValue(m_app_display_name));
    }
    if (m_app_platform_isSet) {
        obj.insert(QString("app_platform"), ::OpenAPI::toJsonValue(m_app_platform));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("app_version"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_stack_trace.size() > 0) {
        obj.insert(QString("stack_trace"), ::OpenAPI::toJsonValue(m_stack_trace));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getAppDisplayName() const {
    return m_app_display_name;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setAppDisplayName(const QString &app_display_name) {
    m_app_display_name = app_display_name;
    m_app_display_name_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_app_display_name_Set() const{
    return m_app_display_name_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_app_display_name_Valid() const{
    return m_app_display_name_isValid;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getAppPlatform() const {
    return m_app_platform;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setAppPlatform(const QString &app_platform) {
    m_app_platform = app_platform;
    m_app_platform_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_app_platform_Set() const{
    return m_app_platform_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_app_platform_Valid() const{
    return m_app_platform_isValid;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getAppVersion() const {
    return m_app_version;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getId() const {
    return m_id;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_id_Set() const{
    return m_id_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getName() const {
    return m_name;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_name_Set() const{
    return m_name_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getReason() const {
    return m_reason;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_reason_Valid() const{
    return m_reason_isValid;
}

QList<QString> OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getStackTrace() const {
    return m_stack_trace;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setStackTrace(const QList<QString> &stack_trace) {
    m_stack_trace = stack_trace;
    m_stack_trace_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_stack_trace_Set() const{
    return m_stack_trace_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_stack_trace_Valid() const{
    return m_stack_trace_isValid;
}

QString OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::getUrl() const {
    return m_url;
}
void OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_url_Set() const{
    return m_url_isSet;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::is_url_Valid() const{
    return m_url_isValid;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_trace.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewCrashGroupAlertingEvent_allOf_crash_group_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_display_name_isValid && m_app_platform_isValid && m_app_version_isValid && m_id_isValid && m_name_isValid && m_reason_isValid && m_stack_trace_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
