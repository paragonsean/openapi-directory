/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppleCertificateNonSecretDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppleCertificateNonSecretDetails::OAIAppleCertificateNonSecretDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppleCertificateNonSecretDetails::OAIAppleCertificateNonSecretDetails() {
    this->initializeModel();
}

OAIAppleCertificateNonSecretDetails::~OAIAppleCertificateNonSecretDetails() {}

void OAIAppleCertificateNonSecretDetails::initializeModel() {

    m_certificate_validity_end_date_isSet = false;
    m_certificate_validity_end_date_isValid = false;

    m_certificate_validity_start_date_isSet = false;
    m_certificate_validity_start_date_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;
}

void OAIAppleCertificateNonSecretDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppleCertificateNonSecretDetails::fromJsonObject(QJsonObject json) {

    m_certificate_validity_end_date_isValid = ::OpenAPI::fromJsonValue(m_certificate_validity_end_date, json[QString("certificateValidityEndDate")]);
    m_certificate_validity_end_date_isSet = !json[QString("certificateValidityEndDate")].isNull() && m_certificate_validity_end_date_isValid;

    m_certificate_validity_start_date_isValid = ::OpenAPI::fromJsonValue(m_certificate_validity_start_date, json[QString("certificateValidityStartDate")]);
    m_certificate_validity_start_date_isSet = !json[QString("certificateValidityStartDate")].isNull() && m_certificate_validity_start_date_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;
}

QString OAIAppleCertificateNonSecretDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppleCertificateNonSecretDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_validity_end_date_isSet) {
        obj.insert(QString("certificateValidityEndDate"), ::OpenAPI::toJsonValue(m_certificate_validity_end_date));
    }
    if (m_certificate_validity_start_date_isSet) {
        obj.insert(QString("certificateValidityStartDate"), ::OpenAPI::toJsonValue(m_certificate_validity_start_date));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    return obj;
}

QString OAIAppleCertificateNonSecretDetails::getCertificateValidityEndDate() const {
    return m_certificate_validity_end_date;
}
void OAIAppleCertificateNonSecretDetails::setCertificateValidityEndDate(const QString &certificate_validity_end_date) {
    m_certificate_validity_end_date = certificate_validity_end_date;
    m_certificate_validity_end_date_isSet = true;
}

bool OAIAppleCertificateNonSecretDetails::is_certificate_validity_end_date_Set() const{
    return m_certificate_validity_end_date_isSet;
}

bool OAIAppleCertificateNonSecretDetails::is_certificate_validity_end_date_Valid() const{
    return m_certificate_validity_end_date_isValid;
}

QString OAIAppleCertificateNonSecretDetails::getCertificateValidityStartDate() const {
    return m_certificate_validity_start_date;
}
void OAIAppleCertificateNonSecretDetails::setCertificateValidityStartDate(const QString &certificate_validity_start_date) {
    m_certificate_validity_start_date = certificate_validity_start_date;
    m_certificate_validity_start_date_isSet = true;
}

bool OAIAppleCertificateNonSecretDetails::is_certificate_validity_start_date_Set() const{
    return m_certificate_validity_start_date_isSet;
}

bool OAIAppleCertificateNonSecretDetails::is_certificate_validity_start_date_Valid() const{
    return m_certificate_validity_start_date_isValid;
}

QString OAIAppleCertificateNonSecretDetails::getDisplayName() const {
    return m_display_name;
}
void OAIAppleCertificateNonSecretDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAppleCertificateNonSecretDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAppleCertificateNonSecretDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIAppleCertificateNonSecretDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_validity_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_validity_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppleCertificateNonSecretDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_validity_end_date_isValid && m_certificate_validity_start_date_isValid && m_display_name_isValid && true;
}

} // namespace OpenAPI
