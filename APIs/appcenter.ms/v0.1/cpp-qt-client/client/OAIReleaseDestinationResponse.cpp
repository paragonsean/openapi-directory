/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseDestinationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseDestinationResponse::OAIReleaseDestinationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseDestinationResponse::OAIReleaseDestinationResponse() {
    this->initializeModel();
}

OAIReleaseDestinationResponse::~OAIReleaseDestinationResponse() {}

void OAIReleaseDestinationResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_mandatory_update_isSet = false;
    m_mandatory_update_isValid = false;

    m_provisioning_status_url_isSet = false;
    m_provisioning_status_url_isValid = false;
}

void OAIReleaseDestinationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseDestinationResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mandatory_update_isValid = ::OpenAPI::fromJsonValue(m_mandatory_update, json[QString("mandatory_update")]);
    m_mandatory_update_isSet = !json[QString("mandatory_update")].isNull() && m_mandatory_update_isValid;

    m_provisioning_status_url_isValid = ::OpenAPI::fromJsonValue(m_provisioning_status_url, json[QString("provisioning_status_url")]);
    m_provisioning_status_url_isSet = !json[QString("provisioning_status_url")].isNull() && m_provisioning_status_url_isValid;
}

QString OAIReleaseDestinationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseDestinationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mandatory_update_isSet) {
        obj.insert(QString("mandatory_update"), ::OpenAPI::toJsonValue(m_mandatory_update));
    }
    if (m_provisioning_status_url_isSet) {
        obj.insert(QString("provisioning_status_url"), ::OpenAPI::toJsonValue(m_provisioning_status_url));
    }
    return obj;
}

QString OAIReleaseDestinationResponse::getId() const {
    return m_id;
}
void OAIReleaseDestinationResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReleaseDestinationResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReleaseDestinationResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIReleaseDestinationResponse::isMandatoryUpdate() const {
    return m_mandatory_update;
}
void OAIReleaseDestinationResponse::setMandatoryUpdate(const bool &mandatory_update) {
    m_mandatory_update = mandatory_update;
    m_mandatory_update_isSet = true;
}

bool OAIReleaseDestinationResponse::is_mandatory_update_Set() const{
    return m_mandatory_update_isSet;
}

bool OAIReleaseDestinationResponse::is_mandatory_update_Valid() const{
    return m_mandatory_update_isValid;
}

QString OAIReleaseDestinationResponse::getProvisioningStatusUrl() const {
    return m_provisioning_status_url;
}
void OAIReleaseDestinationResponse::setProvisioningStatusUrl(const QString &provisioning_status_url) {
    m_provisioning_status_url = provisioning_status_url;
    m_provisioning_status_url_isSet = true;
}

bool OAIReleaseDestinationResponse::is_provisioning_status_url_Set() const{
    return m_provisioning_status_url_isSet;
}

bool OAIReleaseDestinationResponse::is_provisioning_status_url_Valid() const{
    return m_provisioning_status_url_isValid;
}

bool OAIReleaseDestinationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_status_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseDestinationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_mandatory_update_isValid && true;
}

} // namespace OpenAPI
