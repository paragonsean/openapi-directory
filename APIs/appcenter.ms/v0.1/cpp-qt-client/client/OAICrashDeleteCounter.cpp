/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrashDeleteCounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrashDeleteCounter::OAICrashDeleteCounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrashDeleteCounter::OAICrashDeleteCounter() {
    this->initializeModel();
}

OAICrashDeleteCounter::~OAICrashDeleteCounter() {}

void OAICrashDeleteCounter::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_attachments_deleted_isSet = false;
    m_attachments_deleted_isValid = false;

    m_blobs_failed_isSet = false;
    m_blobs_failed_isValid = false;

    m_blobs_succeeded_isSet = false;
    m_blobs_succeeded_isValid = false;

    m_crash_group_id_isSet = false;
    m_crash_group_id_isValid = false;

    m_crash_id_isSet = false;
    m_crash_id_isValid = false;

    m_crashes_deleted_isSet = false;
    m_crashes_deleted_isValid = false;
}

void OAICrashDeleteCounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrashDeleteCounter::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_attachments_deleted_isValid = ::OpenAPI::fromJsonValue(m_attachments_deleted, json[QString("attachments_deleted")]);
    m_attachments_deleted_isSet = !json[QString("attachments_deleted")].isNull() && m_attachments_deleted_isValid;

    m_blobs_failed_isValid = ::OpenAPI::fromJsonValue(m_blobs_failed, json[QString("blobs_failed")]);
    m_blobs_failed_isSet = !json[QString("blobs_failed")].isNull() && m_blobs_failed_isValid;

    m_blobs_succeeded_isValid = ::OpenAPI::fromJsonValue(m_blobs_succeeded, json[QString("blobs_succeeded")]);
    m_blobs_succeeded_isSet = !json[QString("blobs_succeeded")].isNull() && m_blobs_succeeded_isValid;

    m_crash_group_id_isValid = ::OpenAPI::fromJsonValue(m_crash_group_id, json[QString("crash_group_id")]);
    m_crash_group_id_isSet = !json[QString("crash_group_id")].isNull() && m_crash_group_id_isValid;

    m_crash_id_isValid = ::OpenAPI::fromJsonValue(m_crash_id, json[QString("crash_id")]);
    m_crash_id_isSet = !json[QString("crash_id")].isNull() && m_crash_id_isValid;

    m_crashes_deleted_isValid = ::OpenAPI::fromJsonValue(m_crashes_deleted, json[QString("crashes_deleted")]);
    m_crashes_deleted_isSet = !json[QString("crashes_deleted")].isNull() && m_crashes_deleted_isValid;
}

QString OAICrashDeleteCounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrashDeleteCounter::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_attachments_deleted_isSet) {
        obj.insert(QString("attachments_deleted"), ::OpenAPI::toJsonValue(m_attachments_deleted));
    }
    if (m_blobs_failed_isSet) {
        obj.insert(QString("blobs_failed"), ::OpenAPI::toJsonValue(m_blobs_failed));
    }
    if (m_blobs_succeeded_isSet) {
        obj.insert(QString("blobs_succeeded"), ::OpenAPI::toJsonValue(m_blobs_succeeded));
    }
    if (m_crash_group_id_isSet) {
        obj.insert(QString("crash_group_id"), ::OpenAPI::toJsonValue(m_crash_group_id));
    }
    if (m_crash_id_isSet) {
        obj.insert(QString("crash_id"), ::OpenAPI::toJsonValue(m_crash_id));
    }
    if (m_crashes_deleted_isSet) {
        obj.insert(QString("crashes_deleted"), ::OpenAPI::toJsonValue(m_crashes_deleted));
    }
    return obj;
}

QString OAICrashDeleteCounter::getAppId() const {
    return m_app_id;
}
void OAICrashDeleteCounter::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAICrashDeleteCounter::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAICrashDeleteCounter::is_app_id_Valid() const{
    return m_app_id_isValid;
}

qint32 OAICrashDeleteCounter::getAttachmentsDeleted() const {
    return m_attachments_deleted;
}
void OAICrashDeleteCounter::setAttachmentsDeleted(const qint32 &attachments_deleted) {
    m_attachments_deleted = attachments_deleted;
    m_attachments_deleted_isSet = true;
}

bool OAICrashDeleteCounter::is_attachments_deleted_Set() const{
    return m_attachments_deleted_isSet;
}

bool OAICrashDeleteCounter::is_attachments_deleted_Valid() const{
    return m_attachments_deleted_isValid;
}

qint32 OAICrashDeleteCounter::getBlobsFailed() const {
    return m_blobs_failed;
}
void OAICrashDeleteCounter::setBlobsFailed(const qint32 &blobs_failed) {
    m_blobs_failed = blobs_failed;
    m_blobs_failed_isSet = true;
}

bool OAICrashDeleteCounter::is_blobs_failed_Set() const{
    return m_blobs_failed_isSet;
}

bool OAICrashDeleteCounter::is_blobs_failed_Valid() const{
    return m_blobs_failed_isValid;
}

qint32 OAICrashDeleteCounter::getBlobsSucceeded() const {
    return m_blobs_succeeded;
}
void OAICrashDeleteCounter::setBlobsSucceeded(const qint32 &blobs_succeeded) {
    m_blobs_succeeded = blobs_succeeded;
    m_blobs_succeeded_isSet = true;
}

bool OAICrashDeleteCounter::is_blobs_succeeded_Set() const{
    return m_blobs_succeeded_isSet;
}

bool OAICrashDeleteCounter::is_blobs_succeeded_Valid() const{
    return m_blobs_succeeded_isValid;
}

QString OAICrashDeleteCounter::getCrashGroupId() const {
    return m_crash_group_id;
}
void OAICrashDeleteCounter::setCrashGroupId(const QString &crash_group_id) {
    m_crash_group_id = crash_group_id;
    m_crash_group_id_isSet = true;
}

bool OAICrashDeleteCounter::is_crash_group_id_Set() const{
    return m_crash_group_id_isSet;
}

bool OAICrashDeleteCounter::is_crash_group_id_Valid() const{
    return m_crash_group_id_isValid;
}

QString OAICrashDeleteCounter::getCrashId() const {
    return m_crash_id;
}
void OAICrashDeleteCounter::setCrashId(const QString &crash_id) {
    m_crash_id = crash_id;
    m_crash_id_isSet = true;
}

bool OAICrashDeleteCounter::is_crash_id_Set() const{
    return m_crash_id_isSet;
}

bool OAICrashDeleteCounter::is_crash_id_Valid() const{
    return m_crash_id_isValid;
}

qint32 OAICrashDeleteCounter::getCrashesDeleted() const {
    return m_crashes_deleted;
}
void OAICrashDeleteCounter::setCrashesDeleted(const qint32 &crashes_deleted) {
    m_crashes_deleted = crashes_deleted;
    m_crashes_deleted_isSet = true;
}

bool OAICrashDeleteCounter::is_crashes_deleted_Set() const{
    return m_crashes_deleted_isSet;
}

bool OAICrashDeleteCounter::is_crashes_deleted_Valid() const{
    return m_crashes_deleted_isValid;
}

bool OAICrashDeleteCounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blobs_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blobs_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crashes_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrashDeleteCounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
