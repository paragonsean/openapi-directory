/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildParams::OAIBuildParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildParams::OAIBuildParams() {
    this->initializeModel();
}

OAIBuildParams::~OAIBuildParams() {}

void OAIBuildParams::initializeModel() {

    m_debug_isSet = false;
    m_debug_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;
}

void OAIBuildParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildParams::fromJsonObject(QJsonObject json) {

    m_debug_isValid = ::OpenAPI::fromJsonValue(m_debug, json[QString("debug")]);
    m_debug_isSet = !json[QString("debug")].isNull() && m_debug_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;
}

QString OAIBuildParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildParams::asJsonObject() const {
    QJsonObject obj;
    if (m_debug_isSet) {
        obj.insert(QString("debug"), ::OpenAPI::toJsonValue(m_debug));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    return obj;
}

bool OAIBuildParams::isDebug() const {
    return m_debug;
}
void OAIBuildParams::setDebug(const bool &debug) {
    m_debug = debug;
    m_debug_isSet = true;
}

bool OAIBuildParams::is_debug_Set() const{
    return m_debug_isSet;
}

bool OAIBuildParams::is_debug_Valid() const{
    return m_debug_isValid;
}

QString OAIBuildParams::getSourceVersion() const {
    return m_source_version;
}
void OAIBuildParams::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAIBuildParams::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAIBuildParams::is_source_version_Valid() const{
    return m_source_version_isValid;
}

bool OAIBuildParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_debug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
