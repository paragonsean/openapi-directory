/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranchConfigurations_get_200_response_allOf_toolsets_android.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranchConfigurations_get_200_response_allOf_toolsets_android::OAIBranchConfigurations_get_200_response_allOf_toolsets_android(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_android::OAIBranchConfigurations_get_200_response_allOf_toolsets_android() {
    this->initializeModel();
}

OAIBranchConfigurations_get_200_response_allOf_toolsets_android::~OAIBranchConfigurations_get_200_response_allOf_toolsets_android() {}

void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::initializeModel() {

    m_automatic_signing_isSet = false;
    m_automatic_signing_isValid = false;

    m_build_variant_isSet = false;
    m_build_variant_isValid = false;

    m_gradle_wrapper_path_isSet = false;
    m_gradle_wrapper_path_isValid = false;

    m_is_root_isSet = false;
    m_is_root_isValid = false;

    m_key_alias_isSet = false;
    m_key_alias_isValid = false;

    m_key_password_isSet = false;
    m_key_password_isValid = false;

    m_keystore_encoded_isSet = false;
    m_keystore_encoded_isValid = false;

    m_keystore_filename_isSet = false;
    m_keystore_filename_isValid = false;

    m_keystore_password_isSet = false;
    m_keystore_password_isValid = false;

    m_module_isSet = false;
    m_module_isValid = false;

    m_run_lint_isSet = false;
    m_run_lint_isValid = false;

    m_run_tests_isSet = false;
    m_run_tests_isValid = false;
}

void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::fromJsonObject(QJsonObject json) {

    m_automatic_signing_isValid = ::OpenAPI::fromJsonValue(m_automatic_signing, json[QString("automaticSigning")]);
    m_automatic_signing_isSet = !json[QString("automaticSigning")].isNull() && m_automatic_signing_isValid;

    m_build_variant_isValid = ::OpenAPI::fromJsonValue(m_build_variant, json[QString("buildVariant")]);
    m_build_variant_isSet = !json[QString("buildVariant")].isNull() && m_build_variant_isValid;

    m_gradle_wrapper_path_isValid = ::OpenAPI::fromJsonValue(m_gradle_wrapper_path, json[QString("gradleWrapperPath")]);
    m_gradle_wrapper_path_isSet = !json[QString("gradleWrapperPath")].isNull() && m_gradle_wrapper_path_isValid;

    m_is_root_isValid = ::OpenAPI::fromJsonValue(m_is_root, json[QString("isRoot")]);
    m_is_root_isSet = !json[QString("isRoot")].isNull() && m_is_root_isValid;

    m_key_alias_isValid = ::OpenAPI::fromJsonValue(m_key_alias, json[QString("keyAlias")]);
    m_key_alias_isSet = !json[QString("keyAlias")].isNull() && m_key_alias_isValid;

    m_key_password_isValid = ::OpenAPI::fromJsonValue(m_key_password, json[QString("keyPassword")]);
    m_key_password_isSet = !json[QString("keyPassword")].isNull() && m_key_password_isValid;

    m_keystore_encoded_isValid = ::OpenAPI::fromJsonValue(m_keystore_encoded, json[QString("keystoreEncoded")]);
    m_keystore_encoded_isSet = !json[QString("keystoreEncoded")].isNull() && m_keystore_encoded_isValid;

    m_keystore_filename_isValid = ::OpenAPI::fromJsonValue(m_keystore_filename, json[QString("keystoreFilename")]);
    m_keystore_filename_isSet = !json[QString("keystoreFilename")].isNull() && m_keystore_filename_isValid;

    m_keystore_password_isValid = ::OpenAPI::fromJsonValue(m_keystore_password, json[QString("keystorePassword")]);
    m_keystore_password_isSet = !json[QString("keystorePassword")].isNull() && m_keystore_password_isValid;

    m_module_isValid = ::OpenAPI::fromJsonValue(m_module, json[QString("module")]);
    m_module_isSet = !json[QString("module")].isNull() && m_module_isValid;

    m_run_lint_isValid = ::OpenAPI::fromJsonValue(m_run_lint, json[QString("runLint")]);
    m_run_lint_isSet = !json[QString("runLint")].isNull() && m_run_lint_isValid;

    m_run_tests_isValid = ::OpenAPI::fromJsonValue(m_run_tests, json[QString("runTests")]);
    m_run_tests_isSet = !json[QString("runTests")].isNull() && m_run_tests_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranchConfigurations_get_200_response_allOf_toolsets_android::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_signing_isSet) {
        obj.insert(QString("automaticSigning"), ::OpenAPI::toJsonValue(m_automatic_signing));
    }
    if (m_build_variant_isSet) {
        obj.insert(QString("buildVariant"), ::OpenAPI::toJsonValue(m_build_variant));
    }
    if (m_gradle_wrapper_path_isSet) {
        obj.insert(QString("gradleWrapperPath"), ::OpenAPI::toJsonValue(m_gradle_wrapper_path));
    }
    if (m_is_root_isSet) {
        obj.insert(QString("isRoot"), ::OpenAPI::toJsonValue(m_is_root));
    }
    if (m_key_alias_isSet) {
        obj.insert(QString("keyAlias"), ::OpenAPI::toJsonValue(m_key_alias));
    }
    if (m_key_password_isSet) {
        obj.insert(QString("keyPassword"), ::OpenAPI::toJsonValue(m_key_password));
    }
    if (m_keystore_encoded_isSet) {
        obj.insert(QString("keystoreEncoded"), ::OpenAPI::toJsonValue(m_keystore_encoded));
    }
    if (m_keystore_filename_isSet) {
        obj.insert(QString("keystoreFilename"), ::OpenAPI::toJsonValue(m_keystore_filename));
    }
    if (m_keystore_password_isSet) {
        obj.insert(QString("keystorePassword"), ::OpenAPI::toJsonValue(m_keystore_password));
    }
    if (m_module_isSet) {
        obj.insert(QString("module"), ::OpenAPI::toJsonValue(m_module));
    }
    if (m_run_lint_isSet) {
        obj.insert(QString("runLint"), ::OpenAPI::toJsonValue(m_run_lint));
    }
    if (m_run_tests_isSet) {
        obj.insert(QString("runTests"), ::OpenAPI::toJsonValue(m_run_tests));
    }
    return obj;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::isAutomaticSigning() const {
    return m_automatic_signing;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setAutomaticSigning(const bool &automatic_signing) {
    m_automatic_signing = automatic_signing;
    m_automatic_signing_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_automatic_signing_Set() const{
    return m_automatic_signing_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_automatic_signing_Valid() const{
    return m_automatic_signing_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getBuildVariant() const {
    return m_build_variant;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setBuildVariant(const QString &build_variant) {
    m_build_variant = build_variant;
    m_build_variant_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_build_variant_Set() const{
    return m_build_variant_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_build_variant_Valid() const{
    return m_build_variant_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getGradleWrapperPath() const {
    return m_gradle_wrapper_path;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setGradleWrapperPath(const QString &gradle_wrapper_path) {
    m_gradle_wrapper_path = gradle_wrapper_path;
    m_gradle_wrapper_path_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_gradle_wrapper_path_Set() const{
    return m_gradle_wrapper_path_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_gradle_wrapper_path_Valid() const{
    return m_gradle_wrapper_path_isValid;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::isIsRoot() const {
    return m_is_root;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setIsRoot(const bool &is_root) {
    m_is_root = is_root;
    m_is_root_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_is_root_Set() const{
    return m_is_root_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_is_root_Valid() const{
    return m_is_root_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getKeyAlias() const {
    return m_key_alias;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setKeyAlias(const QString &key_alias) {
    m_key_alias = key_alias;
    m_key_alias_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_key_alias_Set() const{
    return m_key_alias_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_key_alias_Valid() const{
    return m_key_alias_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getKeyPassword() const {
    return m_key_password;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setKeyPassword(const QString &key_password) {
    m_key_password = key_password;
    m_key_password_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_key_password_Set() const{
    return m_key_password_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_key_password_Valid() const{
    return m_key_password_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getKeystoreEncoded() const {
    return m_keystore_encoded;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setKeystoreEncoded(const QString &keystore_encoded) {
    m_keystore_encoded = keystore_encoded;
    m_keystore_encoded_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_keystore_encoded_Set() const{
    return m_keystore_encoded_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_keystore_encoded_Valid() const{
    return m_keystore_encoded_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getKeystoreFilename() const {
    return m_keystore_filename;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setKeystoreFilename(const QString &keystore_filename) {
    m_keystore_filename = keystore_filename;
    m_keystore_filename_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_keystore_filename_Set() const{
    return m_keystore_filename_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_keystore_filename_Valid() const{
    return m_keystore_filename_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getKeystorePassword() const {
    return m_keystore_password;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setKeystorePassword(const QString &keystore_password) {
    m_keystore_password = keystore_password;
    m_keystore_password_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_keystore_password_Set() const{
    return m_keystore_password_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_keystore_password_Valid() const{
    return m_keystore_password_isValid;
}

QString OAIBranchConfigurations_get_200_response_allOf_toolsets_android::getModule() const {
    return m_module;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setModule(const QString &module) {
    m_module = module;
    m_module_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_module_Set() const{
    return m_module_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_module_Valid() const{
    return m_module_isValid;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::isRunLint() const {
    return m_run_lint;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setRunLint(const bool &run_lint) {
    m_run_lint = run_lint;
    m_run_lint_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_run_lint_Set() const{
    return m_run_lint_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_run_lint_Valid() const{
    return m_run_lint_isValid;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::isRunTests() const {
    return m_run_tests;
}
void OAIBranchConfigurations_get_200_response_allOf_toolsets_android::setRunTests(const bool &run_tests) {
    m_run_tests = run_tests;
    m_run_tests_isSet = true;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_run_tests_Set() const{
    return m_run_tests_isSet;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::is_run_tests_Valid() const{
    return m_run_tests_isValid;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_signing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gradle_wrapper_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keystore_encoded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keystore_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keystore_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_lint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_tests_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranchConfigurations_get_200_response_allOf_toolsets_android::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
