/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionDurationsDistribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionDurationsDistribution::OAISessionDurationsDistribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionDurationsDistribution::OAISessionDurationsDistribution() {
    this->initializeModel();
}

OAISessionDurationsDistribution::~OAISessionDurationsDistribution() {}

void OAISessionDurationsDistribution::initializeModel() {

    m_average_duration_isSet = false;
    m_average_duration_isValid = false;

    m_distribution_isSet = false;
    m_distribution_isValid = false;

    m_previous_average_duration_isSet = false;
    m_previous_average_duration_isValid = false;
}

void OAISessionDurationsDistribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionDurationsDistribution::fromJsonObject(QJsonObject json) {

    m_average_duration_isValid = ::OpenAPI::fromJsonValue(m_average_duration, json[QString("average_duration")]);
    m_average_duration_isSet = !json[QString("average_duration")].isNull() && m_average_duration_isValid;

    m_distribution_isValid = ::OpenAPI::fromJsonValue(m_distribution, json[QString("distribution")]);
    m_distribution_isSet = !json[QString("distribution")].isNull() && m_distribution_isValid;

    m_previous_average_duration_isValid = ::OpenAPI::fromJsonValue(m_previous_average_duration, json[QString("previous_average_duration")]);
    m_previous_average_duration_isSet = !json[QString("previous_average_duration")].isNull() && m_previous_average_duration_isValid;
}

QString OAISessionDurationsDistribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionDurationsDistribution::asJsonObject() const {
    QJsonObject obj;
    if (m_average_duration_isSet) {
        obj.insert(QString("average_duration"), ::OpenAPI::toJsonValue(m_average_duration));
    }
    if (m_distribution.size() > 0) {
        obj.insert(QString("distribution"), ::OpenAPI::toJsonValue(m_distribution));
    }
    if (m_previous_average_duration_isSet) {
        obj.insert(QString("previous_average_duration"), ::OpenAPI::toJsonValue(m_previous_average_duration));
    }
    return obj;
}

QString OAISessionDurationsDistribution::getAverageDuration() const {
    return m_average_duration;
}
void OAISessionDurationsDistribution::setAverageDuration(const QString &average_duration) {
    m_average_duration = average_duration;
    m_average_duration_isSet = true;
}

bool OAISessionDurationsDistribution::is_average_duration_Set() const{
    return m_average_duration_isSet;
}

bool OAISessionDurationsDistribution::is_average_duration_Valid() const{
    return m_average_duration_isValid;
}

QList<OAIAnalytics_SessionDurationsDistribution_200_response_distribution_inner> OAISessionDurationsDistribution::getDistribution() const {
    return m_distribution;
}
void OAISessionDurationsDistribution::setDistribution(const QList<OAIAnalytics_SessionDurationsDistribution_200_response_distribution_inner> &distribution) {
    m_distribution = distribution;
    m_distribution_isSet = true;
}

bool OAISessionDurationsDistribution::is_distribution_Set() const{
    return m_distribution_isSet;
}

bool OAISessionDurationsDistribution::is_distribution_Valid() const{
    return m_distribution_isValid;
}

QString OAISessionDurationsDistribution::getPreviousAverageDuration() const {
    return m_previous_average_duration;
}
void OAISessionDurationsDistribution::setPreviousAverageDuration(const QString &previous_average_duration) {
    m_previous_average_duration = previous_average_duration;
    m_previous_average_duration_isSet = true;
}

bool OAISessionDurationsDistribution::is_previous_average_duration_Set() const{
    return m_previous_average_duration_isSet;
}

bool OAISessionDurationsDistribution::is_previous_average_duration_Valid() const{
    return m_previous_average_duration_isValid;
}

bool OAISessionDurationsDistribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_average_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionDurationsDistribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
