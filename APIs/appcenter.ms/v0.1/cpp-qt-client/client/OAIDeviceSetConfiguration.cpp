/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceSetConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceSetConfiguration::OAIDeviceSetConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceSetConfiguration::OAIDeviceSetConfiguration() {
    this->initializeModel();
}

OAIDeviceSetConfiguration::~OAIDeviceSetConfiguration() {}

void OAIDeviceSetConfiguration::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;
}

void OAIDeviceSetConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceSetConfiguration::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;
}

QString OAIDeviceSetConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceSetConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_model.isSet()) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    return obj;
}

QString OAIDeviceSetConfiguration::getId() const {
    return m_id;
}
void OAIDeviceSetConfiguration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeviceSetConfiguration::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeviceSetConfiguration::is_id_Valid() const{
    return m_id_isValid;
}

OAIDevice_Set_deviceConfigurations_inner_image OAIDeviceSetConfiguration::getImage() const {
    return m_image;
}
void OAIDeviceSetConfiguration::setImage(const OAIDevice_Set_deviceConfigurations_inner_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIDeviceSetConfiguration::is_image_Set() const{
    return m_image_isSet;
}

bool OAIDeviceSetConfiguration::is_image_Valid() const{
    return m_image_isValid;
}

OAIDevice_Set_deviceConfigurations_inner_model OAIDeviceSetConfiguration::getModel() const {
    return m_model;
}
void OAIDeviceSetConfiguration::setModel(const OAIDevice_Set_deviceConfigurations_inner_model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIDeviceSetConfiguration::is_model_Set() const{
    return m_model_isSet;
}

bool OAIDeviceSetConfiguration::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIDeviceSetConfiguration::getOs() const {
    return m_os;
}
void OAIDeviceSetConfiguration::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIDeviceSetConfiguration::is_os_Set() const{
    return m_os_isSet;
}

bool OAIDeviceSetConfiguration::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIDeviceSetConfiguration::getOsName() const {
    return m_os_name;
}
void OAIDeviceSetConfiguration::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIDeviceSetConfiguration::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIDeviceSetConfiguration::is_os_name_Valid() const{
    return m_os_name_isValid;
}

bool OAIDeviceSetConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceSetConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
