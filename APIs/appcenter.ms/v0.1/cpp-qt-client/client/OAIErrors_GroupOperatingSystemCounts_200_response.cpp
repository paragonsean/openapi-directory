/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrors_GroupOperatingSystemCounts_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrors_GroupOperatingSystemCounts_200_response::OAIErrors_GroupOperatingSystemCounts_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrors_GroupOperatingSystemCounts_200_response::OAIErrors_GroupOperatingSystemCounts_200_response() {
    this->initializeModel();
}

OAIErrors_GroupOperatingSystemCounts_200_response::~OAIErrors_GroupOperatingSystemCounts_200_response() {}

void OAIErrors_GroupOperatingSystemCounts_200_response::initializeModel() {

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_operating_systems_isSet = false;
    m_operating_systems_isValid = false;
}

void OAIErrors_GroupOperatingSystemCounts_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrors_GroupOperatingSystemCounts_200_response::fromJsonObject(QJsonObject json) {

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_operating_systems_isValid = ::OpenAPI::fromJsonValue(m_operating_systems, json[QString("operatingSystems")]);
    m_operating_systems_isSet = !json[QString("operatingSystems")].isNull() && m_operating_systems_isValid;
}

QString OAIErrors_GroupOperatingSystemCounts_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrors_GroupOperatingSystemCounts_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_operating_systems.size() > 0) {
        obj.insert(QString("operatingSystems"), ::OpenAPI::toJsonValue(m_operating_systems));
    }
    return obj;
}

qint64 OAIErrors_GroupOperatingSystemCounts_200_response::getErrorCount() const {
    return m_error_count;
}
void OAIErrors_GroupOperatingSystemCounts_200_response::setErrorCount(const qint64 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIErrors_GroupOperatingSystemCounts_200_response::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIErrors_GroupOperatingSystemCounts_200_response::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QList<OAIErrors_GroupOperatingSystemCounts_200_response_operatingSystems_inner> OAIErrors_GroupOperatingSystemCounts_200_response::getOperatingSystems() const {
    return m_operating_systems;
}
void OAIErrors_GroupOperatingSystemCounts_200_response::setOperatingSystems(const QList<OAIErrors_GroupOperatingSystemCounts_200_response_operatingSystems_inner> &operating_systems) {
    m_operating_systems = operating_systems;
    m_operating_systems_isSet = true;
}

bool OAIErrors_GroupOperatingSystemCounts_200_response::is_operating_systems_Set() const{
    return m_operating_systems_isSet;
}

bool OAIErrors_GroupOperatingSystemCounts_200_response::is_operating_systems_Valid() const{
    return m_operating_systems_isValid;
}

bool OAIErrors_GroupOperatingSystemCounts_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_systems.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrors_GroupOperatingSystemCounts_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
