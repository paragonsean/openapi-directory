/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITesterAppWithReleaseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITesterAppWithReleaseResponse::OAITesterAppWithReleaseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITesterAppWithReleaseResponse::OAITesterAppWithReleaseResponse() {
    this->initializeModel();
}

OAITesterAppWithReleaseResponse::~OAITesterAppWithReleaseResponse() {}

void OAITesterAppWithReleaseResponse::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;
}

void OAITesterAppWithReleaseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITesterAppWithReleaseResponse::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("icon_url")]);
    m_icon_url_isSet = !json[QString("icon_url")].isNull() && m_icon_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;
}

QString OAITesterAppWithReleaseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITesterAppWithReleaseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("icon_url"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_release.isSet()) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    return obj;
}

QString OAITesterAppWithReleaseResponse::getDescription() const {
    return m_description;
}
void OAITesterAppWithReleaseResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAITesterAppWithReleaseResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITesterAppWithReleaseResponse::getDisplayName() const {
    return m_display_name;
}
void OAITesterAppWithReleaseResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITesterAppWithReleaseResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITesterAppWithReleaseResponse::getIconUrl() const {
    return m_icon_url;
}
void OAITesterAppWithReleaseResponse::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAITesterAppWithReleaseResponse::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAITesterAppWithReleaseResponse::getId() const {
    return m_id;
}
void OAITesterAppWithReleaseResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAITesterAppWithReleaseResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITesterAppWithReleaseResponse::getName() const {
    return m_name;
}
void OAITesterAppWithReleaseResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAITesterAppWithReleaseResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITesterAppWithReleaseResponse::getOs() const {
    return m_os;
}
void OAITesterAppWithReleaseResponse::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_os_Set() const{
    return m_os_isSet;
}

bool OAITesterAppWithReleaseResponse::is_os_Valid() const{
    return m_os_isValid;
}

OAITesterAppWithReleaseResponse_owner OAITesterAppWithReleaseResponse::getOwner() const {
    return m_owner;
}
void OAITesterAppWithReleaseResponse::setOwner(const OAITesterAppWithReleaseResponse_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAITesterAppWithReleaseResponse::is_owner_Valid() const{
    return m_owner_isValid;
}

OAITesterAppWithReleaseResponse_release OAITesterAppWithReleaseResponse::getRelease() const {
    return m_release;
}
void OAITesterAppWithReleaseResponse::setRelease(const OAITesterAppWithReleaseResponse_release &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAITesterAppWithReleaseResponse::is_release_Set() const{
    return m_release_isSet;
}

bool OAITesterAppWithReleaseResponse::is_release_Valid() const{
    return m_release_isValid;
}

bool OAITesterAppWithReleaseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITesterAppWithReleaseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
