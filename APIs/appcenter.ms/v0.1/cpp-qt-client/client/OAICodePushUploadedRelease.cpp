/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodePushUploadedRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodePushUploadedRelease::OAICodePushUploadedRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodePushUploadedRelease::OAICodePushUploadedRelease() {
    this->initializeModel();
}

OAICodePushUploadedRelease::~OAICodePushUploadedRelease() {}

void OAICodePushUploadedRelease::initializeModel() {

    m_deployment_name_isSet = false;
    m_deployment_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_mandatory_isSet = false;
    m_mandatory_isValid = false;

    m_no_duplicate_release_error_isSet = false;
    m_no_duplicate_release_error_isValid = false;

    m_release_upload_isSet = false;
    m_release_upload_isValid = false;

    m_rollout_isSet = false;
    m_rollout_isValid = false;

    m_target_binary_version_isSet = false;
    m_target_binary_version_isValid = false;
}

void OAICodePushUploadedRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodePushUploadedRelease::fromJsonObject(QJsonObject json) {

    m_deployment_name_isValid = ::OpenAPI::fromJsonValue(m_deployment_name, json[QString("deployment_name")]);
    m_deployment_name_isSet = !json[QString("deployment_name")].isNull() && m_deployment_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_mandatory_isValid = ::OpenAPI::fromJsonValue(m_mandatory, json[QString("mandatory")]);
    m_mandatory_isSet = !json[QString("mandatory")].isNull() && m_mandatory_isValid;

    m_no_duplicate_release_error_isValid = ::OpenAPI::fromJsonValue(m_no_duplicate_release_error, json[QString("no_duplicate_release_error")]);
    m_no_duplicate_release_error_isSet = !json[QString("no_duplicate_release_error")].isNull() && m_no_duplicate_release_error_isValid;

    m_release_upload_isValid = ::OpenAPI::fromJsonValue(m_release_upload, json[QString("release_upload")]);
    m_release_upload_isSet = !json[QString("release_upload")].isNull() && m_release_upload_isValid;

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;

    m_target_binary_version_isValid = ::OpenAPI::fromJsonValue(m_target_binary_version, json[QString("target_binary_version")]);
    m_target_binary_version_isSet = !json[QString("target_binary_version")].isNull() && m_target_binary_version_isValid;
}

QString OAICodePushUploadedRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodePushUploadedRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_name_isSet) {
        obj.insert(QString("deployment_name"), ::OpenAPI::toJsonValue(m_deployment_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_mandatory_isSet) {
        obj.insert(QString("mandatory"), ::OpenAPI::toJsonValue(m_mandatory));
    }
    if (m_no_duplicate_release_error_isSet) {
        obj.insert(QString("no_duplicate_release_error"), ::OpenAPI::toJsonValue(m_no_duplicate_release_error));
    }
    if (m_release_upload.isSet()) {
        obj.insert(QString("release_upload"), ::OpenAPI::toJsonValue(m_release_upload));
    }
    if (m_rollout_isSet) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    if (m_target_binary_version_isSet) {
        obj.insert(QString("target_binary_version"), ::OpenAPI::toJsonValue(m_target_binary_version));
    }
    return obj;
}

QString OAICodePushUploadedRelease::getDeploymentName() const {
    return m_deployment_name;
}
void OAICodePushUploadedRelease::setDeploymentName(const QString &deployment_name) {
    m_deployment_name = deployment_name;
    m_deployment_name_isSet = true;
}

bool OAICodePushUploadedRelease::is_deployment_name_Set() const{
    return m_deployment_name_isSet;
}

bool OAICodePushUploadedRelease::is_deployment_name_Valid() const{
    return m_deployment_name_isValid;
}

QString OAICodePushUploadedRelease::getDescription() const {
    return m_description;
}
void OAICodePushUploadedRelease::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICodePushUploadedRelease::is_description_Set() const{
    return m_description_isSet;
}

bool OAICodePushUploadedRelease::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICodePushUploadedRelease::isDisabled() const {
    return m_disabled;
}
void OAICodePushUploadedRelease::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAICodePushUploadedRelease::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAICodePushUploadedRelease::is_disabled_Valid() const{
    return m_disabled_isValid;
}

bool OAICodePushUploadedRelease::isMandatory() const {
    return m_mandatory;
}
void OAICodePushUploadedRelease::setMandatory(const bool &mandatory) {
    m_mandatory = mandatory;
    m_mandatory_isSet = true;
}

bool OAICodePushUploadedRelease::is_mandatory_Set() const{
    return m_mandatory_isSet;
}

bool OAICodePushUploadedRelease::is_mandatory_Valid() const{
    return m_mandatory_isValid;
}

bool OAICodePushUploadedRelease::isNoDuplicateReleaseError() const {
    return m_no_duplicate_release_error;
}
void OAICodePushUploadedRelease::setNoDuplicateReleaseError(const bool &no_duplicate_release_error) {
    m_no_duplicate_release_error = no_duplicate_release_error;
    m_no_duplicate_release_error_isSet = true;
}

bool OAICodePushUploadedRelease::is_no_duplicate_release_error_Set() const{
    return m_no_duplicate_release_error_isSet;
}

bool OAICodePushUploadedRelease::is_no_duplicate_release_error_Valid() const{
    return m_no_duplicate_release_error_isValid;
}

OAICodePushDeploymentReleases_create_request_release_upload OAICodePushUploadedRelease::getReleaseUpload() const {
    return m_release_upload;
}
void OAICodePushUploadedRelease::setReleaseUpload(const OAICodePushDeploymentReleases_create_request_release_upload &release_upload) {
    m_release_upload = release_upload;
    m_release_upload_isSet = true;
}

bool OAICodePushUploadedRelease::is_release_upload_Set() const{
    return m_release_upload_isSet;
}

bool OAICodePushUploadedRelease::is_release_upload_Valid() const{
    return m_release_upload_isValid;
}

qint32 OAICodePushUploadedRelease::getRollout() const {
    return m_rollout;
}
void OAICodePushUploadedRelease::setRollout(const qint32 &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAICodePushUploadedRelease::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAICodePushUploadedRelease::is_rollout_Valid() const{
    return m_rollout_isValid;
}

QString OAICodePushUploadedRelease::getTargetBinaryVersion() const {
    return m_target_binary_version;
}
void OAICodePushUploadedRelease::setTargetBinaryVersion(const QString &target_binary_version) {
    m_target_binary_version = target_binary_version;
    m_target_binary_version_isSet = true;
}

bool OAICodePushUploadedRelease::is_target_binary_version_Set() const{
    return m_target_binary_version_isSet;
}

bool OAICodePushUploadedRelease::is_target_binary_version_Valid() const{
    return m_target_binary_version_isValid;
}

bool OAICodePushUploadedRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_duplicate_release_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_binary_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodePushUploadedRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_release_upload_isValid && m_target_binary_version_isValid && true;
}

} // namespace OpenAPI
