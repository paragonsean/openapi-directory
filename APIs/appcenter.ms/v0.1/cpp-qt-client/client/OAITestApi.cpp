/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITestApi::OAITestApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITestApi::~OAITestApi() {
}

void OAITestApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.appcenter.ms"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("testArchiveTestRun", defaultConf);
    _serverIndices.insert("testArchiveTestRun", 0);
    _serverConfigs.insert("testCreateDeviceSelection", defaultConf);
    _serverIndices.insert("testCreateDeviceSelection", 0);
    _serverConfigs.insert("testCreateDeviceSetOfOwner", defaultConf);
    _serverIndices.insert("testCreateDeviceSetOfOwner", 0);
    _serverConfigs.insert("testCreateDeviceSetOfUser", defaultConf);
    _serverIndices.insert("testCreateDeviceSetOfUser", 0);
    _serverConfigs.insert("testCreateSubscription", defaultConf);
    _serverIndices.insert("testCreateSubscription", 0);
    _serverConfigs.insert("testCreateTestRun", defaultConf);
    _serverIndices.insert("testCreateTestRun", 0);
    _serverConfigs.insert("testCreateTestSeries", defaultConf);
    _serverIndices.insert("testCreateTestSeries", 0);
    _serverConfigs.insert("testDeleteDeviceSetOfOwner", defaultConf);
    _serverIndices.insert("testDeleteDeviceSetOfOwner", 0);
    _serverConfigs.insert("testDeleteDeviceSetOfUser", defaultConf);
    _serverIndices.insert("testDeleteDeviceSetOfUser", 0);
    _serverConfigs.insert("testDeleteTestSeries", defaultConf);
    _serverIndices.insert("testDeleteTestSeries", 0);
    _serverConfigs.insert("testGdprExportAccount", defaultConf);
    _serverIndices.insert("testGdprExportAccount", 0);
    _serverConfigs.insert("testGdprExportAccounts", defaultConf);
    _serverIndices.insert("testGdprExportAccounts", 0);
    _serverConfigs.insert("testGdprExportApp", defaultConf);
    _serverIndices.insert("testGdprExportApp", 0);
    _serverConfigs.insert("testGdprExportApps", defaultConf);
    _serverIndices.insert("testGdprExportApps", 0);
    _serverConfigs.insert("testGdprExportFeatureFlag", defaultConf);
    _serverIndices.insert("testGdprExportFeatureFlag", 0);
    _serverConfigs.insert("testGdprExportFileSetFile", defaultConf);
    _serverIndices.insert("testGdprExportFileSetFile", 0);
    _serverConfigs.insert("testGdprExportHashFile", defaultConf);
    _serverIndices.insert("testGdprExportHashFile", 0);
    _serverConfigs.insert("testGdprExportPipelineTest", defaultConf);
    _serverIndices.insert("testGdprExportPipelineTest", 0);
    _serverConfigs.insert("testGdprExportTestRun", defaultConf);
    _serverIndices.insert("testGdprExportTestRun", 0);
    _serverConfigs.insert("testGetAllTestRunsForSeries", defaultConf);
    _serverIndices.insert("testGetAllTestRunsForSeries", 0);
    _serverConfigs.insert("testGetAllTestSeries", defaultConf);
    _serverIndices.insert("testGetAllTestSeries", 0);
    _serverConfigs.insert("testGetDeviceConfigurations", defaultConf);
    _serverIndices.insert("testGetDeviceConfigurations", 0);
    _serverConfigs.insert("testGetDeviceSetOfOwner", defaultConf);
    _serverIndices.insert("testGetDeviceSetOfOwner", 0);
    _serverConfigs.insert("testGetDeviceSetOfUser", defaultConf);
    _serverIndices.insert("testGetDeviceSetOfUser", 0);
    _serverConfigs.insert("testGetSubscriptions", defaultConf);
    _serverIndices.insert("testGetSubscriptions", 0);
    _serverConfigs.insert("testGetTestReport", defaultConf);
    _serverIndices.insert("testGetTestReport", 0);
    _serverConfigs.insert("testGetTestRun", defaultConf);
    _serverIndices.insert("testGetTestRun", 0);
    _serverConfigs.insert("testGetTestRunState", defaultConf);
    _serverIndices.insert("testGetTestRunState", 0);
    _serverConfigs.insert("testGetTestRuns", defaultConf);
    _serverIndices.insert("testGetTestRuns", 0);
    _serverConfigs.insert("testListDeviceSetsOfOwner", defaultConf);
    _serverIndices.insert("testListDeviceSetsOfOwner", 0);
    _serverConfigs.insert("testListDeviceSetsOfUser", defaultConf);
    _serverIndices.insert("testListDeviceSetsOfUser", 0);
    _serverConfigs.insert("testPatchTestSeries", defaultConf);
    _serverIndices.insert("testPatchTestSeries", 0);
    _serverConfigs.insert("testStartTestRun", defaultConf);
    _serverIndices.insert("testStartTestRun", 0);
    _serverConfigs.insert("testStartUploadingFile", defaultConf);
    _serverIndices.insert("testStartUploadingFile", 0);
    _serverConfigs.insert("testStopTestRun", defaultConf);
    _serverIndices.insert("testStopTestRun", 0);
    _serverConfigs.insert("testUpdateDeviceSetOfOwner", defaultConf);
    _serverIndices.insert("testUpdateDeviceSetOfOwner", 0);
    _serverConfigs.insert("testUpdateDeviceSetOfUser", defaultConf);
    _serverIndices.insert("testUpdateDeviceSetOfUser", 0);
    _serverConfigs.insert("testUploadHash", defaultConf);
    _serverIndices.insert("testUploadHash", 0);
    _serverConfigs.insert("testUploadHashesBatch", defaultConf);
    _serverIndices.insert("testUploadHashesBatch", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITestApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITestApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITestApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITestApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITestApi::setUsername(const QString &username) {
    _username = username;
}

void OAITestApi::setPassword(const QString &password) {
    _password = password;
}


void OAITestApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITestApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITestApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITestApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITestApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITestApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITestApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITestApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITestApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITestApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITestApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITestApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITestApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITestApi::testArchiveTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testArchiveTestRun"][_serverIndices.value("testArchiveTestRun")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testArchiveTestRunCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testArchiveTestRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_Run output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testArchiveTestRunSignal(output);
        Q_EMIT testArchiveTestRunSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testArchiveTestRunSignalE(output, error_type, error_str);
        Q_EMIT testArchiveTestRunSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testArchiveTestRunSignalError(output, error_type, error_str);
        Q_EMIT testArchiveTestRunSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testCreateDeviceSelection(const QString &owner_name, const QString &app_name, const OAIDevice_List &oai_device_list) {
    QString fullPath = QString(_serverConfigs["testCreateDeviceSelection"][_serverIndices.value("testCreateDeviceSelection")].URL()+"/v0.1/apps/{owner_name}/{app_name}/device_selection");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_device_list.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testCreateDeviceSelectionCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testCreateDeviceSelectionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDevice_Selection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testCreateDeviceSelectionSignal(output);
        Q_EMIT testCreateDeviceSelectionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testCreateDeviceSelectionSignalE(output, error_type, error_str);
        Q_EMIT testCreateDeviceSelectionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testCreateDeviceSelectionSignalError(output, error_type, error_str);
        Q_EMIT testCreateDeviceSelectionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testCreateDeviceSetOfOwner(const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information) {
    QString fullPath = QString(_serverConfigs["testCreateDeviceSetOfOwner"][_serverIndices.value("testCreateDeviceSetOfOwner")].URL()+"/v0.1/apps/{owner_name}/{app_name}/owner/device_sets");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_device_set_update_information.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testCreateDeviceSetOfOwnerCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testCreateDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDevice_Set output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testCreateDeviceSetOfOwnerSignal(output);
        Q_EMIT testCreateDeviceSetOfOwnerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testCreateDeviceSetOfOwnerSignalE(output, error_type, error_str);
        Q_EMIT testCreateDeviceSetOfOwnerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testCreateDeviceSetOfOwnerSignalError(output, error_type, error_str);
        Q_EMIT testCreateDeviceSetOfOwnerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testCreateDeviceSetOfUser(const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information) {
    QString fullPath = QString(_serverConfigs["testCreateDeviceSetOfUser"][_serverIndices.value("testCreateDeviceSetOfUser")].URL()+"/v0.1/apps/{owner_name}/{app_name}/user/device_sets");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_device_set_update_information.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testCreateDeviceSetOfUserCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testCreateDeviceSetOfUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDevice_Set output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testCreateDeviceSetOfUserSignal(output);
        Q_EMIT testCreateDeviceSetOfUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testCreateDeviceSetOfUserSignalE(output, error_type, error_str);
        Q_EMIT testCreateDeviceSetOfUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testCreateDeviceSetOfUserSignalError(output, error_type, error_str);
        Q_EMIT testCreateDeviceSetOfUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testCreateSubscription(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testCreateSubscription"][_serverIndices.value("testCreateSubscription")].URL()+"/v0.1/apps/{owner_name}/{app_name}/subscriptions");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testCreateSubscriptionCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testCreateSubscriptionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISubscription_1 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testCreateSubscriptionSignal(output);
        Q_EMIT testCreateSubscriptionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testCreateSubscriptionSignalE(output, error_type, error_str);
        Q_EMIT testCreateSubscriptionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testCreateSubscriptionSignalError(output, error_type, error_str);
        Q_EMIT testCreateSubscriptionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testCreateTestRun(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testCreateTestRun"][_serverIndices.value("testCreateTestRun")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testCreateTestRunCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testCreateTestRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testCreateTestRunSignal();
        Q_EMIT testCreateTestRunSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testCreateTestRunSignalE(error_type, error_str);
        Q_EMIT testCreateTestRunSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testCreateTestRunSignalError(error_type, error_str);
        Q_EMIT testCreateTestRunSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testCreateTestSeries(const QString &owner_name, const QString &app_name, const OAIName_of_the_test_series &oai_name_of_the_test_series) {
    QString fullPath = QString(_serverConfigs["testCreateTestSeries"][_serverIndices.value("testCreateTestSeries")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_series");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_name_of_the_test_series.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testCreateTestSeriesCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testCreateTestSeriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_Series output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testCreateTestSeriesSignal(output);
        Q_EMIT testCreateTestSeriesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testCreateTestSeriesSignalE(output, error_type, error_str);
        Q_EMIT testCreateTestSeriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testCreateTestSeriesSignalError(output, error_type, error_str);
        Q_EMIT testCreateTestSeriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testDeleteDeviceSetOfOwner(const QString &id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testDeleteDeviceSetOfOwner"][_serverIndices.value("testDeleteDeviceSetOfOwner")].URL()+"/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testDeleteDeviceSetOfOwnerCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testDeleteDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testDeleteDeviceSetOfOwnerSignal();
        Q_EMIT testDeleteDeviceSetOfOwnerSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testDeleteDeviceSetOfOwnerSignalE(error_type, error_str);
        Q_EMIT testDeleteDeviceSetOfOwnerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testDeleteDeviceSetOfOwnerSignalError(error_type, error_str);
        Q_EMIT testDeleteDeviceSetOfOwnerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testDeleteDeviceSetOfUser(const QString &id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testDeleteDeviceSetOfUser"][_serverIndices.value("testDeleteDeviceSetOfUser")].URL()+"/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testDeleteDeviceSetOfUserCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testDeleteDeviceSetOfUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testDeleteDeviceSetOfUserSignal();
        Q_EMIT testDeleteDeviceSetOfUserSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testDeleteDeviceSetOfUserSignalE(error_type, error_str);
        Q_EMIT testDeleteDeviceSetOfUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testDeleteDeviceSetOfUserSignalError(error_type, error_str);
        Q_EMIT testDeleteDeviceSetOfUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testDeleteTestSeries(const QString &test_series_slug, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testDeleteTestSeries"][_serverIndices.value("testDeleteTestSeries")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_series_slugPathParam("{");
        test_series_slugPathParam.append("test_series_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_series_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_series_slug"+pathSuffix : pathPrefix;
        fullPath.replace(test_series_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_series_slug)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testDeleteTestSeriesCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testDeleteTestSeriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testDeleteTestSeriesSignal();
        Q_EMIT testDeleteTestSeriesSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testDeleteTestSeriesSignalE(error_type, error_str);
        Q_EMIT testDeleteTestSeriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testDeleteTestSeriesSignalError(error_type, error_str);
        Q_EMIT testDeleteTestSeriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportAccount() {
    QString fullPath = QString(_serverConfigs["testGdprExportAccount"][_serverIndices.value("testGdprExportAccount")].URL()+"/v0.1/account/test/export/accounts");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportAccountCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportAccountCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportAccount_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportAccountSignal(output);
        Q_EMIT testGdprExportAccountSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportAccountSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportAccountSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportAccountSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportAccountSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportAccounts() {
    QString fullPath = QString(_serverConfigs["testGdprExportAccounts"][_serverIndices.value("testGdprExportAccounts")].URL()+"/v0.1/account/test/export");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportAccountsCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportAccountsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportAccounts_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportAccountsSignal(output);
        Q_EMIT testGdprExportAccountsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportAccountsSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportAccountsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportAccountsSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportAccountsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportApp(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGdprExportApp"][_serverIndices.value("testGdprExportApp")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test/export/apps");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportAppCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportAppCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportApp_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportAppSignal(output);
        Q_EMIT testGdprExportAppSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportAppSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportAppSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportAppSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportAppSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportApps(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGdprExportApps"][_serverIndices.value("testGdprExportApps")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test/export");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportAppsCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportAppsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportAccounts_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportAppsSignal(output);
        Q_EMIT testGdprExportAppsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportAppsSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportAppsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportAppsSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportAppsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportFeatureFlag() {
    QString fullPath = QString(_serverConfigs["testGdprExportFeatureFlag"][_serverIndices.value("testGdprExportFeatureFlag")].URL()+"/v0.1/account/test/export/featureFlags");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportFeatureFlagCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportFeatureFlagCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportFeatureFlag_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportFeatureFlagSignal(output);
        Q_EMIT testGdprExportFeatureFlagSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportFeatureFlagSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportFeatureFlagSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportFeatureFlagSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportFeatureFlagSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportFileSetFile(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGdprExportFileSetFile"][_serverIndices.value("testGdprExportFileSetFile")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportFileSetFileCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportFileSetFileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportFileSetFile_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportFileSetFileSignal(output);
        Q_EMIT testGdprExportFileSetFileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportFileSetFileSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportFileSetFileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportFileSetFileSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportFileSetFileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportHashFile(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGdprExportHashFile"][_serverIndices.value("testGdprExportHashFile")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportHashFileCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportHashFileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportHashFile_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportHashFileSignal(output);
        Q_EMIT testGdprExportHashFileSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportHashFileSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportHashFileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportHashFileSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportHashFileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportPipelineTest(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGdprExportPipelineTest"][_serverIndices.value("testGdprExportPipelineTest")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportPipelineTestCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportPipelineTestCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportPipelineTest_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportPipelineTestSignal(output);
        Q_EMIT testGdprExportPipelineTestSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportPipelineTestSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportPipelineTestSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportPipelineTestSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportPipelineTestSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGdprExportTestRun(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGdprExportTestRun"][_serverIndices.value("testGdprExportTestRun")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGdprExportTestRunCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGdprExportTestRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_gdprExportTestRun_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGdprExportTestRunSignal(output);
        Q_EMIT testGdprExportTestRunSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGdprExportTestRunSignalE(output, error_type, error_str);
        Q_EMIT testGdprExportTestRunSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGdprExportTestRunSignalError(output, error_type, error_str);
        Q_EMIT testGdprExportTestRunSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetAllTestRunsForSeries(const QString &test_series_slug, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetAllTestRunsForSeries"][_serverIndices.value("testGetAllTestRunsForSeries")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_series_slugPathParam("{");
        test_series_slugPathParam.append("test_series_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_series_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_series_slug"+pathSuffix : pathPrefix;
        fullPath.replace(test_series_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_series_slug)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetAllTestRunsForSeriesCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetAllTestRunsForSeriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITest_Run> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITest_Run val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetAllTestRunsForSeriesSignal(output);
        Q_EMIT testGetAllTestRunsForSeriesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetAllTestRunsForSeriesSignalE(output, error_type, error_str);
        Q_EMIT testGetAllTestRunsForSeriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetAllTestRunsForSeriesSignalError(output, error_type, error_str);
        Q_EMIT testGetAllTestRunsForSeriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetAllTestSeries(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &query) {
    QString fullPath = QString(_serverConfigs["testGetAllTestSeries"][_serverIndices.value("testGetAllTestSeries")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_series");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (query.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "query", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("query")).append(querySuffix).append(QUrl::toPercentEncoding(query.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetAllTestSeriesCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetAllTestSeriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITest_Series> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITest_Series val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetAllTestSeriesSignal(output);
        Q_EMIT testGetAllTestSeriesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetAllTestSeriesSignalE(output, error_type, error_str);
        Q_EMIT testGetAllTestSeriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetAllTestSeriesSignalError(output, error_type, error_str);
        Q_EMIT testGetAllTestSeriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetDeviceConfigurations(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &app_upload_id) {
    QString fullPath = QString(_serverConfigs["testGetDeviceConfigurations"][_serverIndices.value("testGetDeviceConfigurations")].URL()+"/v0.1/apps/{owner_name}/{app_name}/device_configurations");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (app_upload_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "app_upload_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("app_upload_id")).append(querySuffix).append(QUrl::toPercentEncoding(app_upload_id.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetDeviceConfigurationsCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetDeviceConfigurationsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITest_getDeviceConfigurations_200_response_inner> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITest_getDeviceConfigurations_200_response_inner val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetDeviceConfigurationsSignal(output);
        Q_EMIT testGetDeviceConfigurationsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetDeviceConfigurationsSignalE(output, error_type, error_str);
        Q_EMIT testGetDeviceConfigurationsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetDeviceConfigurationsSignalError(output, error_type, error_str);
        Q_EMIT testGetDeviceConfigurationsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetDeviceSetOfOwner(const QString &id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetDeviceSetOfOwner"][_serverIndices.value("testGetDeviceSetOfOwner")].URL()+"/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetDeviceSetOfOwnerCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDevice_Set output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetDeviceSetOfOwnerSignal(output);
        Q_EMIT testGetDeviceSetOfOwnerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetDeviceSetOfOwnerSignalE(output, error_type, error_str);
        Q_EMIT testGetDeviceSetOfOwnerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetDeviceSetOfOwnerSignalError(output, error_type, error_str);
        Q_EMIT testGetDeviceSetOfOwnerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetDeviceSetOfUser(const QString &id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetDeviceSetOfUser"][_serverIndices.value("testGetDeviceSetOfUser")].URL()+"/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetDeviceSetOfUserCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetDeviceSetOfUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDevice_Set output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetDeviceSetOfUserSignal(output);
        Q_EMIT testGetDeviceSetOfUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetDeviceSetOfUserSignalE(output, error_type, error_str);
        Q_EMIT testGetDeviceSetOfUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetDeviceSetOfUserSignalError(output, error_type, error_str);
        Q_EMIT testGetDeviceSetOfUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetSubscriptions(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetSubscriptions"][_serverIndices.value("testGetSubscriptions")].URL()+"/v0.1/apps/{owner_name}/{app_name}/subscriptions");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetSubscriptionsCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetSubscriptionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISubscription_1 output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetSubscriptionsSignal(output);
        Q_EMIT testGetSubscriptionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetSubscriptionsSignalE(output, error_type, error_str);
        Q_EMIT testGetSubscriptionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetSubscriptionsSignalError(output, error_type, error_str);
        Q_EMIT testGetSubscriptionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetTestReport(const QString &test_run_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetTestReport"][_serverIndices.value("testGetTestReport")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetTestReportCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetTestReportCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_getTestReport_200_response output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetTestReportSignal(output);
        Q_EMIT testGetTestReportSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetTestReportSignalE(output, error_type, error_str);
        Q_EMIT testGetTestReportSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetTestReportSignalError(output, error_type, error_str);
        Q_EMIT testGetTestReportSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetTestRun"][_serverIndices.value("testGetTestRun")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetTestRunCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetTestRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_Run output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetTestRunSignal(output);
        Q_EMIT testGetTestRunSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetTestRunSignalE(output, error_type, error_str);
        Q_EMIT testGetTestRunSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetTestRunSignalError(output, error_type, error_str);
        Q_EMIT testGetTestRunSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetTestRunState(const QString &test_run_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetTestRunState"][_serverIndices.value("testGetTestRunState")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetTestRunStateCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetTestRunStateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_Run_State output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetTestRunStateSignal(output);
        Q_EMIT testGetTestRunStateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetTestRunStateSignalE(output, error_type, error_str);
        Q_EMIT testGetTestRunStateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetTestRunStateSignalError(output, error_type, error_str);
        Q_EMIT testGetTestRunStateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testGetTestRuns(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testGetTestRuns"][_serverIndices.value("testGetTestRuns")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testGetTestRunsCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testGetTestRunsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITest_Run> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITest_Run val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testGetTestRunsSignal(output);
        Q_EMIT testGetTestRunsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testGetTestRunsSignalE(output, error_type, error_str);
        Q_EMIT testGetTestRunsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testGetTestRunsSignalError(output, error_type, error_str);
        Q_EMIT testGetTestRunsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testListDeviceSetsOfOwner(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testListDeviceSetsOfOwner"][_serverIndices.value("testListDeviceSetsOfOwner")].URL()+"/v0.1/apps/{owner_name}/{app_name}/owner/device_sets");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testListDeviceSetsOfOwnerCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testListDeviceSetsOfOwnerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDevice_Set> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDevice_Set val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testListDeviceSetsOfOwnerSignal(output);
        Q_EMIT testListDeviceSetsOfOwnerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testListDeviceSetsOfOwnerSignalE(output, error_type, error_str);
        Q_EMIT testListDeviceSetsOfOwnerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testListDeviceSetsOfOwnerSignalError(output, error_type, error_str);
        Q_EMIT testListDeviceSetsOfOwnerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testListDeviceSetsOfUser(const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testListDeviceSetsOfUser"][_serverIndices.value("testListDeviceSetsOfUser")].URL()+"/v0.1/apps/{owner_name}/{app_name}/user/device_sets");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testListDeviceSetsOfUserCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testListDeviceSetsOfUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIDevice_Set> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIDevice_Set val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testListDeviceSetsOfUserSignal(output);
        Q_EMIT testListDeviceSetsOfUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testListDeviceSetsOfUserSignalE(output, error_type, error_str);
        Q_EMIT testListDeviceSetsOfUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testListDeviceSetsOfUserSignalError(output, error_type, error_str);
        Q_EMIT testListDeviceSetsOfUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testPatchTestSeries(const QString &test_series_slug, const QString &owner_name, const QString &app_name, const OAIName_of_the_test_series &oai_name_of_the_test_series) {
    QString fullPath = QString(_serverConfigs["testPatchTestSeries"][_serverIndices.value("testPatchTestSeries")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_series_slugPathParam("{");
        test_series_slugPathParam.append("test_series_slug").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_series_slug", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_series_slug"+pathSuffix : pathPrefix;
        fullPath.replace(test_series_slugPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_series_slug)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_name_of_the_test_series.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testPatchTestSeriesCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testPatchTestSeriesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_Series output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testPatchTestSeriesSignal(output);
        Q_EMIT testPatchTestSeriesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testPatchTestSeriesSignalE(output, error_type, error_str);
        Q_EMIT testPatchTestSeriesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testPatchTestSeriesSignalError(output, error_type, error_str);
        Q_EMIT testPatchTestSeriesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testStartTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name, const OAITest_Cloud_Start_Test_Run_Options &oai_test_cloud_start_test_run_options) {
    QString fullPath = QString(_serverConfigs["testStartTestRun"][_serverIndices.value("testStartTestRun")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_test_cloud_start_test_run_options.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testStartTestRunCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testStartTestRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_Cloud_Test_Run_Start_Result output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testStartTestRunSignal(output);
        Q_EMIT testStartTestRunSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testStartTestRunSignalE(output, error_type, error_str);
        Q_EMIT testStartTestRunSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testStartTestRunSignalError(output, error_type, error_str);
        Q_EMIT testStartTestRunSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testStartUploadingFile(const QString &test_run_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testStartUploadingFile"][_serverIndices.value("testStartUploadingFile")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testStartUploadingFileCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testStartUploadingFileCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testStartUploadingFileSignal();
        Q_EMIT testStartUploadingFileSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testStartUploadingFileSignalE(error_type, error_str);
        Q_EMIT testStartUploadingFileSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testStartUploadingFileSignalError(error_type, error_str);
        Q_EMIT testStartUploadingFileSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testStopTestRun(const QString &test_run_id, const QString &owner_name, const QString &app_name) {
    QString fullPath = QString(_serverConfigs["testStopTestRun"][_serverIndices.value("testStopTestRun")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testStopTestRunCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testStopTestRunCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITest_Run output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testStopTestRunSignal(output);
        Q_EMIT testStopTestRunSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testStopTestRunSignalE(output, error_type, error_str);
        Q_EMIT testStopTestRunSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testStopTestRunSignalError(output, error_type, error_str);
        Q_EMIT testStopTestRunSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testUpdateDeviceSetOfOwner(const QString &id, const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information) {
    QString fullPath = QString(_serverConfigs["testUpdateDeviceSetOfOwner"][_serverIndices.value("testUpdateDeviceSetOfOwner")].URL()+"/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_device_set_update_information.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testUpdateDeviceSetOfOwnerCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testUpdateDeviceSetOfOwnerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDevice_Set output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testUpdateDeviceSetOfOwnerSignal(output);
        Q_EMIT testUpdateDeviceSetOfOwnerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testUpdateDeviceSetOfOwnerSignalE(output, error_type, error_str);
        Q_EMIT testUpdateDeviceSetOfOwnerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testUpdateDeviceSetOfOwnerSignalError(output, error_type, error_str);
        Q_EMIT testUpdateDeviceSetOfOwnerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testUpdateDeviceSetOfUser(const QString &id, const QString &owner_name, const QString &app_name, const OAIDevice_Set_update_information &oai_device_set_update_information) {
    QString fullPath = QString(_serverConfigs["testUpdateDeviceSetOfUser"][_serverIndices.value("testUpdateDeviceSetOfUser")].URL()+"/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_device_set_update_information.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testUpdateDeviceSetOfUserCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testUpdateDeviceSetOfUserCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDevice_Set output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testUpdateDeviceSetOfUserSignal(output);
        Q_EMIT testUpdateDeviceSetOfUserSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testUpdateDeviceSetOfUserSignalE(output, error_type, error_str);
        Q_EMIT testUpdateDeviceSetOfUserSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testUpdateDeviceSetOfUserSignalError(output, error_type, error_str);
        Q_EMIT testUpdateDeviceSetOfUserSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testUploadHash(const QString &test_run_id, const QString &owner_name, const QString &app_name, const OAITest_Cloud_File_Hash &oai_test_cloud_file_hash) {
    QString fullPath = QString(_serverConfigs["testUploadHash"][_serverIndices.value("testUploadHash")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_test_cloud_file_hash.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testUploadHashCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testUploadHashCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testUploadHashSignal();
        Q_EMIT testUploadHashSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testUploadHashSignalE(error_type, error_str);
        Q_EMIT testUploadHashSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testUploadHashSignalError(error_type, error_str);
        Q_EMIT testUploadHashSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::testUploadHashesBatch(const QString &test_run_id, const QString &owner_name, const QString &app_name, const QList<OAITest_Cloud_File_Hash_1> &oai_test_cloud_file_hash_1) {
    QString fullPath = QString(_serverConfigs["testUploadHashesBatch"][_serverIndices.value("testUploadHashesBatch")].URL()+"/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch");
    
    if (_apiKeys.contains("APIToken")) {
        addHeaders("APIToken",_apiKeys.find("APIToken").value());
    }
    
    
    {
        QString test_run_idPathParam("{");
        test_run_idPathParam.append("test_run_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "test_run_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"test_run_id"+pathSuffix : pathPrefix;
        fullPath.replace(test_run_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(test_run_id)));
    }
    
    {
        QString owner_namePathParam("{");
        owner_namePathParam.append("owner_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "owner_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"owner_name"+pathSuffix : pathPrefix;
        fullPath.replace(owner_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(owner_name)));
    }
    
    {
        QString app_namePathParam("{");
        app_namePathParam.append("app_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "app_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"app_name"+pathSuffix : pathPrefix;
        fullPath.replace(app_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(app_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_test_cloud_file_hash_1).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITestApi::testUploadHashesBatchCallback);
    connect(this, &OAITestApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITestApi::testUploadHashesBatchCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAITest_Cloud_File_Hash_Response> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAITest_Cloud_File_Hash_Response val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT testUploadHashesBatchSignal(output);
        Q_EMIT testUploadHashesBatchSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT testUploadHashesBatchSignalE(output, error_type, error_str);
        Q_EMIT testUploadHashesBatchSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT testUploadHashesBatchSignalError(output, error_type, error_str);
        Q_EMIT testUploadHashesBatchSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITestApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
