/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_getTestReport_200_response_features_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_getTestReport_200_response_features_inner::OAITest_getTestReport_200_response_features_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_getTestReport_200_response_features_inner::OAITest_getTestReport_200_response_features_inner() {
    this->initializeModel();
}

OAITest_getTestReport_200_response_features_inner::~OAITest_getTestReport_200_response_features_inner() {}

void OAITest_getTestReport_200_response_features_inner::initializeModel() {

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_peak_duration_isSet = false;
    m_peak_duration_isValid = false;

    m_peak_memory_isSet = false;
    m_peak_memory_isValid = false;

    m_skipped_isSet = false;
    m_skipped_isValid = false;

    m_tests_isSet = false;
    m_tests_isValid = false;
}

void OAITest_getTestReport_200_response_features_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_getTestReport_200_response_features_inner::fromJsonObject(QJsonObject json) {

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_peak_duration_isValid = ::OpenAPI::fromJsonValue(m_peak_duration, json[QString("peakDuration")]);
    m_peak_duration_isSet = !json[QString("peakDuration")].isNull() && m_peak_duration_isValid;

    m_peak_memory_isValid = ::OpenAPI::fromJsonValue(m_peak_memory, json[QString("peakMemory")]);
    m_peak_memory_isSet = !json[QString("peakMemory")].isNull() && m_peak_memory_isValid;

    m_skipped_isValid = ::OpenAPI::fromJsonValue(m_skipped, json[QString("skipped")]);
    m_skipped_isSet = !json[QString("skipped")].isNull() && m_skipped_isValid;

    m_tests_isValid = ::OpenAPI::fromJsonValue(m_tests, json[QString("tests")]);
    m_tests_isSet = !json[QString("tests")].isNull() && m_tests_isValid;
}

QString OAITest_getTestReport_200_response_features_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_getTestReport_200_response_features_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_peak_duration_isSet) {
        obj.insert(QString("peakDuration"), ::OpenAPI::toJsonValue(m_peak_duration));
    }
    if (m_peak_memory_isSet) {
        obj.insert(QString("peakMemory"), ::OpenAPI::toJsonValue(m_peak_memory));
    }
    if (m_skipped_isSet) {
        obj.insert(QString("skipped"), ::OpenAPI::toJsonValue(m_skipped));
    }
    if (m_tests.size() > 0) {
        obj.insert(QString("tests"), ::OpenAPI::toJsonValue(m_tests));
    }
    return obj;
}

double OAITest_getTestReport_200_response_features_inner::getFailed() const {
    return m_failed;
}
void OAITest_getTestReport_200_response_features_inner::setFailed(const double &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAITest_getTestReport_200_response_features_inner::is_failed_Valid() const{
    return m_failed_isValid;
}

QString OAITest_getTestReport_200_response_features_inner::getName() const {
    return m_name;
}
void OAITest_getTestReport_200_response_features_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITest_getTestReport_200_response_features_inner::is_name_Valid() const{
    return m_name_isValid;
}

double OAITest_getTestReport_200_response_features_inner::getPeakDuration() const {
    return m_peak_duration;
}
void OAITest_getTestReport_200_response_features_inner::setPeakDuration(const double &peak_duration) {
    m_peak_duration = peak_duration;
    m_peak_duration_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner::is_peak_duration_Set() const{
    return m_peak_duration_isSet;
}

bool OAITest_getTestReport_200_response_features_inner::is_peak_duration_Valid() const{
    return m_peak_duration_isValid;
}

double OAITest_getTestReport_200_response_features_inner::getPeakMemory() const {
    return m_peak_memory;
}
void OAITest_getTestReport_200_response_features_inner::setPeakMemory(const double &peak_memory) {
    m_peak_memory = peak_memory;
    m_peak_memory_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner::is_peak_memory_Set() const{
    return m_peak_memory_isSet;
}

bool OAITest_getTestReport_200_response_features_inner::is_peak_memory_Valid() const{
    return m_peak_memory_isValid;
}

double OAITest_getTestReport_200_response_features_inner::getSkipped() const {
    return m_skipped;
}
void OAITest_getTestReport_200_response_features_inner::setSkipped(const double &skipped) {
    m_skipped = skipped;
    m_skipped_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner::is_skipped_Set() const{
    return m_skipped_isSet;
}

bool OAITest_getTestReport_200_response_features_inner::is_skipped_Valid() const{
    return m_skipped_isValid;
}

QList<OAITest_getTestReport_200_response_features_inner_tests_inner> OAITest_getTestReport_200_response_features_inner::getTests() const {
    return m_tests;
}
void OAITest_getTestReport_200_response_features_inner::setTests(const QList<OAITest_getTestReport_200_response_features_inner_tests_inner> &tests) {
    m_tests = tests;
    m_tests_isSet = true;
}

bool OAITest_getTestReport_200_response_features_inner::is_tests_Set() const{
    return m_tests_isSet;
}

bool OAITest_getTestReport_200_response_features_inner::is_tests_Valid() const{
    return m_tests_isValid;
}

bool OAITest_getTestReport_200_response_features_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peak_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_getTestReport_200_response_features_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
