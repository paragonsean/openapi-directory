/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageRecordStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageRecordStatus::OAIUsageRecordStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageRecordStatus::OAIUsageRecordStatus() {
    this->initializeModel();
}

OAIUsageRecordStatus::~OAIUsageRecordStatus() {}

void OAIUsageRecordStatus::initializeModel() {

    m_expected_latest_build_exists_isSet = false;
    m_expected_latest_build_exists_isValid = false;

    m_expected_latest_test_exists_isSet = false;
    m_expected_latest_test_exists_isValid = false;

    m_latest_build_usage_record_time_isSet = false;
    m_latest_build_usage_record_time_isValid = false;

    m_latest_test_usage_record_time_isSet = false;
    m_latest_test_usage_record_time_isValid = false;
}

void OAIUsageRecordStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageRecordStatus::fromJsonObject(QJsonObject json) {

    m_expected_latest_build_exists_isValid = ::OpenAPI::fromJsonValue(m_expected_latest_build_exists, json[QString("expectedLatestBuildExists")]);
    m_expected_latest_build_exists_isSet = !json[QString("expectedLatestBuildExists")].isNull() && m_expected_latest_build_exists_isValid;

    m_expected_latest_test_exists_isValid = ::OpenAPI::fromJsonValue(m_expected_latest_test_exists, json[QString("expectedLatestTestExists")]);
    m_expected_latest_test_exists_isSet = !json[QString("expectedLatestTestExists")].isNull() && m_expected_latest_test_exists_isValid;

    m_latest_build_usage_record_time_isValid = ::OpenAPI::fromJsonValue(m_latest_build_usage_record_time, json[QString("latestBuildUsageRecordTime")]);
    m_latest_build_usage_record_time_isSet = !json[QString("latestBuildUsageRecordTime")].isNull() && m_latest_build_usage_record_time_isValid;

    m_latest_test_usage_record_time_isValid = ::OpenAPI::fromJsonValue(m_latest_test_usage_record_time, json[QString("latestTestUsageRecordTime")]);
    m_latest_test_usage_record_time_isSet = !json[QString("latestTestUsageRecordTime")].isNull() && m_latest_test_usage_record_time_isValid;
}

QString OAIUsageRecordStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageRecordStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_expected_latest_build_exists_isSet) {
        obj.insert(QString("expectedLatestBuildExists"), ::OpenAPI::toJsonValue(m_expected_latest_build_exists));
    }
    if (m_expected_latest_test_exists_isSet) {
        obj.insert(QString("expectedLatestTestExists"), ::OpenAPI::toJsonValue(m_expected_latest_test_exists));
    }
    if (m_latest_build_usage_record_time_isSet) {
        obj.insert(QString("latestBuildUsageRecordTime"), ::OpenAPI::toJsonValue(m_latest_build_usage_record_time));
    }
    if (m_latest_test_usage_record_time_isSet) {
        obj.insert(QString("latestTestUsageRecordTime"), ::OpenAPI::toJsonValue(m_latest_test_usage_record_time));
    }
    return obj;
}

bool OAIUsageRecordStatus::isExpectedLatestBuildExists() const {
    return m_expected_latest_build_exists;
}
void OAIUsageRecordStatus::setExpectedLatestBuildExists(const bool &expected_latest_build_exists) {
    m_expected_latest_build_exists = expected_latest_build_exists;
    m_expected_latest_build_exists_isSet = true;
}

bool OAIUsageRecordStatus::is_expected_latest_build_exists_Set() const{
    return m_expected_latest_build_exists_isSet;
}

bool OAIUsageRecordStatus::is_expected_latest_build_exists_Valid() const{
    return m_expected_latest_build_exists_isValid;
}

bool OAIUsageRecordStatus::isExpectedLatestTestExists() const {
    return m_expected_latest_test_exists;
}
void OAIUsageRecordStatus::setExpectedLatestTestExists(const bool &expected_latest_test_exists) {
    m_expected_latest_test_exists = expected_latest_test_exists;
    m_expected_latest_test_exists_isSet = true;
}

bool OAIUsageRecordStatus::is_expected_latest_test_exists_Set() const{
    return m_expected_latest_test_exists_isSet;
}

bool OAIUsageRecordStatus::is_expected_latest_test_exists_Valid() const{
    return m_expected_latest_test_exists_isValid;
}

QString OAIUsageRecordStatus::getLatestBuildUsageRecordTime() const {
    return m_latest_build_usage_record_time;
}
void OAIUsageRecordStatus::setLatestBuildUsageRecordTime(const QString &latest_build_usage_record_time) {
    m_latest_build_usage_record_time = latest_build_usage_record_time;
    m_latest_build_usage_record_time_isSet = true;
}

bool OAIUsageRecordStatus::is_latest_build_usage_record_time_Set() const{
    return m_latest_build_usage_record_time_isSet;
}

bool OAIUsageRecordStatus::is_latest_build_usage_record_time_Valid() const{
    return m_latest_build_usage_record_time_isValid;
}

QString OAIUsageRecordStatus::getLatestTestUsageRecordTime() const {
    return m_latest_test_usage_record_time;
}
void OAIUsageRecordStatus::setLatestTestUsageRecordTime(const QString &latest_test_usage_record_time) {
    m_latest_test_usage_record_time = latest_test_usage_record_time;
    m_latest_test_usage_record_time_isSet = true;
}

bool OAIUsageRecordStatus::is_latest_test_usage_record_time_Set() const{
    return m_latest_test_usage_record_time_isSet;
}

bool OAIUsageRecordStatus::is_latest_test_usage_record_time_Valid() const{
    return m_latest_test_usage_record_time_isValid;
}

bool OAIUsageRecordStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expected_latest_build_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_latest_test_exists_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_build_usage_record_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_test_usage_record_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageRecordStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
