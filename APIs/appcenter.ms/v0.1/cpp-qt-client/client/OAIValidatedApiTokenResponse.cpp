/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidatedApiTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidatedApiTokenResponse::OAIValidatedApiTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidatedApiTokenResponse::OAIValidatedApiTokenResponse() {
    this->initializeModel();
}

OAIValidatedApiTokenResponse::~OAIValidatedApiTokenResponse() {}

void OAIValidatedApiTokenResponse::initializeModel() {

    m_claims_isSet = false;
    m_claims_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_principal_type_isSet = false;
    m_principal_type_isValid = false;

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_token_scope_isSet = false;
    m_token_scope_isValid = false;
}

void OAIValidatedApiTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidatedApiTokenResponse::fromJsonObject(QJsonObject json) {

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principal_id")]);
    m_principal_id_isSet = !json[QString("principal_id")].isNull() && m_principal_id_isValid;

    m_principal_type_isValid = ::OpenAPI::fromJsonValue(m_principal_type, json[QString("principal_type")]);
    m_principal_type_isSet = !json[QString("principal_type")].isNull() && m_principal_type_isValid;

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("token_id")]);
    m_token_id_isSet = !json[QString("token_id")].isNull() && m_token_id_isValid;

    m_token_scope_isValid = ::OpenAPI::fromJsonValue(m_token_scope, json[QString("token_scope")]);
    m_token_scope_isSet = !json[QString("token_scope")].isNull() && m_token_scope_isValid;
}

QString OAIValidatedApiTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidatedApiTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_claims.size() > 0) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("principal_id"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_principal_type_isSet) {
        obj.insert(QString("principal_type"), ::OpenAPI::toJsonValue(m_principal_type));
    }
    if (m_token_id_isSet) {
        obj.insert(QString("token_id"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_token_scope.size() > 0) {
        obj.insert(QString("token_scope"), ::OpenAPI::toJsonValue(m_token_scope));
    }
    return obj;
}

QList<OAIValidatedApiTokenResponse_claims_inner> OAIValidatedApiTokenResponse::getClaims() const {
    return m_claims;
}
void OAIValidatedApiTokenResponse::setClaims(const QList<OAIValidatedApiTokenResponse_claims_inner> &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIValidatedApiTokenResponse::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIValidatedApiTokenResponse::is_claims_Valid() const{
    return m_claims_isValid;
}

QString OAIValidatedApiTokenResponse::getPrincipalId() const {
    return m_principal_id;
}
void OAIValidatedApiTokenResponse::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIValidatedApiTokenResponse::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIValidatedApiTokenResponse::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIValidatedApiTokenResponse::getPrincipalType() const {
    return m_principal_type;
}
void OAIValidatedApiTokenResponse::setPrincipalType(const QString &principal_type) {
    m_principal_type = principal_type;
    m_principal_type_isSet = true;
}

bool OAIValidatedApiTokenResponse::is_principal_type_Set() const{
    return m_principal_type_isSet;
}

bool OAIValidatedApiTokenResponse::is_principal_type_Valid() const{
    return m_principal_type_isValid;
}

QString OAIValidatedApiTokenResponse::getTokenId() const {
    return m_token_id;
}
void OAIValidatedApiTokenResponse::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAIValidatedApiTokenResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAIValidatedApiTokenResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

QList<QString> OAIValidatedApiTokenResponse::getTokenScope() const {
    return m_token_scope;
}
void OAIValidatedApiTokenResponse::setTokenScope(const QList<QString> &token_scope) {
    m_token_scope = token_scope;
    m_token_scope_isSet = true;
}

bool OAIValidatedApiTokenResponse::is_token_scope_Set() const{
    return m_token_scope_isSet;
}

bool OAIValidatedApiTokenResponse::is_token_scope_Valid() const{
    return m_token_scope_isValid;
}

bool OAIValidatedApiTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidatedApiTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_claims_isValid && m_principal_id_isValid && m_principal_type_isValid && m_token_id_isValid && m_token_scope_isValid && true;
}

} // namespace OpenAPI
