/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymbolUpload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymbolUpload::OAISymbolUpload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymbolUpload::OAISymbolUpload() {
    this->initializeModel();
}

OAISymbolUpload::~OAISymbolUpload() {}

void OAISymbolUpload::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_symbol_type_isSet = false;
    m_symbol_type_isValid = false;

    m_symbol_upload_id_isSet = false;
    m_symbol_upload_id_isValid = false;

    m_symbols_uploaded_isSet = false;
    m_symbols_uploaded_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAISymbolUpload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymbolUpload::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_symbol_type_isValid = ::OpenAPI::fromJsonValue(m_symbol_type, json[QString("symbol_type")]);
    m_symbol_type_isSet = !json[QString("symbol_type")].isNull() && m_symbol_type_isValid;

    m_symbol_upload_id_isValid = ::OpenAPI::fromJsonValue(m_symbol_upload_id, json[QString("symbol_upload_id")]);
    m_symbol_upload_id_isSet = !json[QString("symbol_upload_id")].isNull() && m_symbol_upload_id_isValid;

    m_symbols_uploaded_isValid = ::OpenAPI::fromJsonValue(m_symbols_uploaded, json[QString("symbols_uploaded")]);
    m_symbols_uploaded_isSet = !json[QString("symbols_uploaded")].isNull() && m_symbols_uploaded_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAISymbolUpload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymbolUpload::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_symbol_type_isSet) {
        obj.insert(QString("symbol_type"), ::OpenAPI::toJsonValue(m_symbol_type));
    }
    if (m_symbol_upload_id_isSet) {
        obj.insert(QString("symbol_upload_id"), ::OpenAPI::toJsonValue(m_symbol_upload_id));
    }
    if (m_symbols_uploaded.size() > 0) {
        obj.insert(QString("symbols_uploaded"), ::OpenAPI::toJsonValue(m_symbols_uploaded));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAISymbolUpload::getAppId() const {
    return m_app_id;
}
void OAISymbolUpload::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAISymbolUpload::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAISymbolUpload::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAISymbolUpload::getFileName() const {
    return m_file_name;
}
void OAISymbolUpload::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAISymbolUpload::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAISymbolUpload::is_file_name_Valid() const{
    return m_file_name_isValid;
}

double OAISymbolUpload::getFileSize() const {
    return m_file_size;
}
void OAISymbolUpload::setFileSize(const double &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAISymbolUpload::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAISymbolUpload::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAISymbolUpload::getOrigin() const {
    return m_origin;
}
void OAISymbolUpload::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAISymbolUpload::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAISymbolUpload::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAISymbolUpload::getStatus() const {
    return m_status;
}
void OAISymbolUpload::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISymbolUpload::is_status_Set() const{
    return m_status_isSet;
}

bool OAISymbolUpload::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISymbolUpload::getSymbolType() const {
    return m_symbol_type;
}
void OAISymbolUpload::setSymbolType(const QString &symbol_type) {
    m_symbol_type = symbol_type;
    m_symbol_type_isSet = true;
}

bool OAISymbolUpload::is_symbol_type_Set() const{
    return m_symbol_type_isSet;
}

bool OAISymbolUpload::is_symbol_type_Valid() const{
    return m_symbol_type_isValid;
}

QString OAISymbolUpload::getSymbolUploadId() const {
    return m_symbol_upload_id;
}
void OAISymbolUpload::setSymbolUploadId(const QString &symbol_upload_id) {
    m_symbol_upload_id = symbol_upload_id;
    m_symbol_upload_id_isSet = true;
}

bool OAISymbolUpload::is_symbol_upload_id_Set() const{
    return m_symbol_upload_id_isSet;
}

bool OAISymbolUpload::is_symbol_upload_id_Valid() const{
    return m_symbol_upload_id_isValid;
}

QList<OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner> OAISymbolUpload::getSymbolsUploaded() const {
    return m_symbols_uploaded;
}
void OAISymbolUpload::setSymbolsUploaded(const QList<OAISymbolUploads_list_200_response_inner_symbols_uploaded_inner> &symbols_uploaded) {
    m_symbols_uploaded = symbols_uploaded;
    m_symbols_uploaded_isSet = true;
}

bool OAISymbolUpload::is_symbols_uploaded_Set() const{
    return m_symbols_uploaded_isSet;
}

bool OAISymbolUpload::is_symbols_uploaded_Valid() const{
    return m_symbols_uploaded_isValid;
}

QDateTime OAISymbolUpload::getTimestamp() const {
    return m_timestamp;
}
void OAISymbolUpload::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISymbolUpload::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISymbolUpload::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAISymbolUploads_list_200_response_inner_user OAISymbolUpload::getUser() const {
    return m_user;
}
void OAISymbolUpload::setUser(const OAISymbolUploads_list_200_response_inner_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISymbolUpload::is_user_Set() const{
    return m_user_isSet;
}

bool OAISymbolUpload::is_user_Valid() const{
    return m_user_isValid;
}

bool OAISymbolUpload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbols_uploaded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymbolUpload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_id_isValid && m_status_isValid && m_symbol_type_isValid && m_symbol_upload_id_isValid && true;
}

} // namespace OpenAPI
