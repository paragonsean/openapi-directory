/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBillingPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBillingPlan::OAIBillingPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBillingPlan::OAIBillingPlan() {
    this->initializeModel();
}

OAIBillingPlan::~OAIBillingPlan() {}

void OAIBillingPlan::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_payment_source_isSet = false;
    m_payment_source_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIBillingPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBillingPlan::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_payment_source_isValid = ::OpenAPI::fromJsonValue(m_payment_source, json[QString("paymentSource")]);
    m_payment_source_isSet = !json[QString("paymentSource")].isNull() && m_payment_source_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIBillingPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBillingPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_limits.size() > 0) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_payment_source_isSet) {
        obj.insert(QString("paymentSource"), ::OpenAPI::toJsonValue(m_payment_source));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QMap<QString, OAIObject> OAIBillingPlan::getAttributes() const {
    return m_attributes;
}
void OAIBillingPlan::setAttributes(const QMap<QString, OAIObject> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIBillingPlan::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIBillingPlan::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIBillingPlan::getId() const {
    return m_id;
}
void OAIBillingPlan::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBillingPlan::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBillingPlan::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, double> OAIBillingPlan::getLimits() const {
    return m_limits;
}
void OAIBillingPlan::setLimits(const QMap<QString, double> &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIBillingPlan::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIBillingPlan::is_limits_Valid() const{
    return m_limits_isValid;
}

QString OAIBillingPlan::getParentId() const {
    return m_parent_id;
}
void OAIBillingPlan::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIBillingPlan::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIBillingPlan::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIBillingPlan::getPaymentSource() const {
    return m_payment_source;
}
void OAIBillingPlan::setPaymentSource(const QString &payment_source) {
    m_payment_source = payment_source;
    m_payment_source_isSet = true;
}

bool OAIBillingPlan::is_payment_source_Set() const{
    return m_payment_source_isSet;
}

bool OAIBillingPlan::is_payment_source_Valid() const{
    return m_payment_source_isValid;
}

double OAIBillingPlan::getPrice() const {
    return m_price;
}
void OAIBillingPlan::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIBillingPlan::is_price_Set() const{
    return m_price_isSet;
}

bool OAIBillingPlan::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIBillingPlan::getService() const {
    return m_service;
}
void OAIBillingPlan::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIBillingPlan::is_service_Set() const{
    return m_service_isSet;
}

bool OAIBillingPlan::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIBillingPlan::getVersion() const {
    return m_version;
}
void OAIBillingPlan::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIBillingPlan::is_version_Set() const{
    return m_version_isSet;
}

bool OAIBillingPlan::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIBillingPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBillingPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
