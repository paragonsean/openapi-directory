/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorDeleteCounter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorDeleteCounter::OAIErrorDeleteCounter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorDeleteCounter::OAIErrorDeleteCounter() {
    this->initializeModel();
}

OAIErrorDeleteCounter::~OAIErrorDeleteCounter() {}

void OAIErrorDeleteCounter::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_attachments_deleted_isSet = false;
    m_attachments_deleted_isValid = false;

    m_blobs_failed_isSet = false;
    m_blobs_failed_isValid = false;

    m_blobs_succeeded_isSet = false;
    m_blobs_succeeded_isValid = false;

    m_error_group_id_isSet = false;
    m_error_group_id_isValid = false;

    m_error_id_isSet = false;
    m_error_id_isValid = false;

    m_errors_deleted_isSet = false;
    m_errors_deleted_isValid = false;
}

void OAIErrorDeleteCounter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorDeleteCounter::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_attachments_deleted_isValid = ::OpenAPI::fromJsonValue(m_attachments_deleted, json[QString("attachmentsDeleted")]);
    m_attachments_deleted_isSet = !json[QString("attachmentsDeleted")].isNull() && m_attachments_deleted_isValid;

    m_blobs_failed_isValid = ::OpenAPI::fromJsonValue(m_blobs_failed, json[QString("blobsFailed")]);
    m_blobs_failed_isSet = !json[QString("blobsFailed")].isNull() && m_blobs_failed_isValid;

    m_blobs_succeeded_isValid = ::OpenAPI::fromJsonValue(m_blobs_succeeded, json[QString("blobsSucceeded")]);
    m_blobs_succeeded_isSet = !json[QString("blobsSucceeded")].isNull() && m_blobs_succeeded_isValid;

    m_error_group_id_isValid = ::OpenAPI::fromJsonValue(m_error_group_id, json[QString("errorGroupId")]);
    m_error_group_id_isSet = !json[QString("errorGroupId")].isNull() && m_error_group_id_isValid;

    m_error_id_isValid = ::OpenAPI::fromJsonValue(m_error_id, json[QString("errorId")]);
    m_error_id_isSet = !json[QString("errorId")].isNull() && m_error_id_isValid;

    m_errors_deleted_isValid = ::OpenAPI::fromJsonValue(m_errors_deleted, json[QString("errorsDeleted")]);
    m_errors_deleted_isSet = !json[QString("errorsDeleted")].isNull() && m_errors_deleted_isValid;
}

QString OAIErrorDeleteCounter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorDeleteCounter::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_attachments_deleted_isSet) {
        obj.insert(QString("attachmentsDeleted"), ::OpenAPI::toJsonValue(m_attachments_deleted));
    }
    if (m_blobs_failed_isSet) {
        obj.insert(QString("blobsFailed"), ::OpenAPI::toJsonValue(m_blobs_failed));
    }
    if (m_blobs_succeeded_isSet) {
        obj.insert(QString("blobsSucceeded"), ::OpenAPI::toJsonValue(m_blobs_succeeded));
    }
    if (m_error_group_id_isSet) {
        obj.insert(QString("errorGroupId"), ::OpenAPI::toJsonValue(m_error_group_id));
    }
    if (m_error_id_isSet) {
        obj.insert(QString("errorId"), ::OpenAPI::toJsonValue(m_error_id));
    }
    if (m_errors_deleted_isSet) {
        obj.insert(QString("errorsDeleted"), ::OpenAPI::toJsonValue(m_errors_deleted));
    }
    return obj;
}

QString OAIErrorDeleteCounter::getAppId() const {
    return m_app_id;
}
void OAIErrorDeleteCounter::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIErrorDeleteCounter::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIErrorDeleteCounter::is_app_id_Valid() const{
    return m_app_id_isValid;
}

qint32 OAIErrorDeleteCounter::getAttachmentsDeleted() const {
    return m_attachments_deleted;
}
void OAIErrorDeleteCounter::setAttachmentsDeleted(const qint32 &attachments_deleted) {
    m_attachments_deleted = attachments_deleted;
    m_attachments_deleted_isSet = true;
}

bool OAIErrorDeleteCounter::is_attachments_deleted_Set() const{
    return m_attachments_deleted_isSet;
}

bool OAIErrorDeleteCounter::is_attachments_deleted_Valid() const{
    return m_attachments_deleted_isValid;
}

qint32 OAIErrorDeleteCounter::getBlobsFailed() const {
    return m_blobs_failed;
}
void OAIErrorDeleteCounter::setBlobsFailed(const qint32 &blobs_failed) {
    m_blobs_failed = blobs_failed;
    m_blobs_failed_isSet = true;
}

bool OAIErrorDeleteCounter::is_blobs_failed_Set() const{
    return m_blobs_failed_isSet;
}

bool OAIErrorDeleteCounter::is_blobs_failed_Valid() const{
    return m_blobs_failed_isValid;
}

qint32 OAIErrorDeleteCounter::getBlobsSucceeded() const {
    return m_blobs_succeeded;
}
void OAIErrorDeleteCounter::setBlobsSucceeded(const qint32 &blobs_succeeded) {
    m_blobs_succeeded = blobs_succeeded;
    m_blobs_succeeded_isSet = true;
}

bool OAIErrorDeleteCounter::is_blobs_succeeded_Set() const{
    return m_blobs_succeeded_isSet;
}

bool OAIErrorDeleteCounter::is_blobs_succeeded_Valid() const{
    return m_blobs_succeeded_isValid;
}

QString OAIErrorDeleteCounter::getErrorGroupId() const {
    return m_error_group_id;
}
void OAIErrorDeleteCounter::setErrorGroupId(const QString &error_group_id) {
    m_error_group_id = error_group_id;
    m_error_group_id_isSet = true;
}

bool OAIErrorDeleteCounter::is_error_group_id_Set() const{
    return m_error_group_id_isSet;
}

bool OAIErrorDeleteCounter::is_error_group_id_Valid() const{
    return m_error_group_id_isValid;
}

QString OAIErrorDeleteCounter::getErrorId() const {
    return m_error_id;
}
void OAIErrorDeleteCounter::setErrorId(const QString &error_id) {
    m_error_id = error_id;
    m_error_id_isSet = true;
}

bool OAIErrorDeleteCounter::is_error_id_Set() const{
    return m_error_id_isSet;
}

bool OAIErrorDeleteCounter::is_error_id_Valid() const{
    return m_error_id_isValid;
}

qint32 OAIErrorDeleteCounter::getErrorsDeleted() const {
    return m_errors_deleted;
}
void OAIErrorDeleteCounter::setErrorsDeleted(const qint32 &errors_deleted) {
    m_errors_deleted = errors_deleted;
    m_errors_deleted_isSet = true;
}

bool OAIErrorDeleteCounter::is_errors_deleted_Set() const{
    return m_errors_deleted_isSet;
}

bool OAIErrorDeleteCounter::is_errors_deleted_Valid() const{
    return m_errors_deleted_isValid;
}

bool OAIErrorDeleteCounter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blobs_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blobs_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorDeleteCounter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
