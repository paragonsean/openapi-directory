/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseDailySessions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseDailySessions::OAIReleaseDailySessions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseDailySessions::OAIReleaseDailySessions() {
    this->initializeModel();
}

OAIReleaseDailySessions::~OAIReleaseDailySessions() {}

void OAIReleaseDailySessions::initializeModel() {

    m_avg_sessions_per_day_isSet = false;
    m_avg_sessions_per_day_isValid = false;

    m_sessions_isSet = false;
    m_sessions_isValid = false;

    m_total_session_counts_isSet = false;
    m_total_session_counts_isValid = false;
}

void OAIReleaseDailySessions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseDailySessions::fromJsonObject(QJsonObject json) {

    m_avg_sessions_per_day_isValid = ::OpenAPI::fromJsonValue(m_avg_sessions_per_day, json[QString("avgSessionsPerDay")]);
    m_avg_sessions_per_day_isSet = !json[QString("avgSessionsPerDay")].isNull() && m_avg_sessions_per_day_isValid;

    m_sessions_isValid = ::OpenAPI::fromJsonValue(m_sessions, json[QString("sessions")]);
    m_sessions_isSet = !json[QString("sessions")].isNull() && m_sessions_isValid;

    m_total_session_counts_isValid = ::OpenAPI::fromJsonValue(m_total_session_counts, json[QString("totalSessionCounts")]);
    m_total_session_counts_isSet = !json[QString("totalSessionCounts")].isNull() && m_total_session_counts_isValid;
}

QString OAIReleaseDailySessions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseDailySessions::asJsonObject() const {
    QJsonObject obj;
    if (m_avg_sessions_per_day_isSet) {
        obj.insert(QString("avgSessionsPerDay"), ::OpenAPI::toJsonValue(m_avg_sessions_per_day));
    }
    if (m_sessions.size() > 0) {
        obj.insert(QString("sessions"), ::OpenAPI::toJsonValue(m_sessions));
    }
    if (m_total_session_counts_isSet) {
        obj.insert(QString("totalSessionCounts"), ::OpenAPI::toJsonValue(m_total_session_counts));
    }
    return obj;
}

double OAIReleaseDailySessions::getAvgSessionsPerDay() const {
    return m_avg_sessions_per_day;
}
void OAIReleaseDailySessions::setAvgSessionsPerDay(const double &avg_sessions_per_day) {
    m_avg_sessions_per_day = avg_sessions_per_day;
    m_avg_sessions_per_day_isSet = true;
}

bool OAIReleaseDailySessions::is_avg_sessions_per_day_Set() const{
    return m_avg_sessions_per_day_isSet;
}

bool OAIReleaseDailySessions::is_avg_sessions_per_day_Valid() const{
    return m_avg_sessions_per_day_isValid;
}

QList<OAIReleaseDailySessions_sessions_inner> OAIReleaseDailySessions::getSessions() const {
    return m_sessions;
}
void OAIReleaseDailySessions::setSessions(const QList<OAIReleaseDailySessions_sessions_inner> &sessions) {
    m_sessions = sessions;
    m_sessions_isSet = true;
}

bool OAIReleaseDailySessions::is_sessions_Set() const{
    return m_sessions_isSet;
}

bool OAIReleaseDailySessions::is_sessions_Valid() const{
    return m_sessions_isValid;
}

qint64 OAIReleaseDailySessions::getTotalSessionCounts() const {
    return m_total_session_counts;
}
void OAIReleaseDailySessions::setTotalSessionCounts(const qint64 &total_session_counts) {
    m_total_session_counts = total_session_counts;
    m_total_session_counts_isSet = true;
}

bool OAIReleaseDailySessions::is_total_session_counts_Set() const{
    return m_total_session_counts_isSet;
}

bool OAIReleaseDailySessions::is_total_session_counts_Valid() const{
    return m_total_session_counts_isValid;
}

bool OAIReleaseDailySessions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avg_sessions_per_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_session_counts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseDailySessions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
