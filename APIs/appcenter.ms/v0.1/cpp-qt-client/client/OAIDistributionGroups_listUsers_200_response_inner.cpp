/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionGroups_listUsers_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionGroups_listUsers_200_response_inner::OAIDistributionGroups_listUsers_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionGroups_listUsers_200_response_inner::OAIDistributionGroups_listUsers_200_response_inner() {
    this->initializeModel();
}

OAIDistributionGroups_listUsers_200_response_inner::~OAIDistributionGroups_listUsers_200_response_inner() {}

void OAIDistributionGroups_listUsers_200_response_inner::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_can_change_password_isSet = false;
    m_can_change_password_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invite_pending_isSet = false;
    m_invite_pending_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIDistributionGroups_listUsers_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionGroups_listUsers_200_response_inner::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_can_change_password_isValid = ::OpenAPI::fromJsonValue(m_can_change_password, json[QString("can_change_password")]);
    m_can_change_password_isSet = !json[QString("can_change_password")].isNull() && m_can_change_password_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invite_pending_isValid = ::OpenAPI::fromJsonValue(m_invite_pending, json[QString("invite_pending")]);
    m_invite_pending_isSet = !json[QString("invite_pending")].isNull() && m_invite_pending_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIDistributionGroups_listUsers_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionGroups_listUsers_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_can_change_password_isSet) {
        obj.insert(QString("can_change_password"), ::OpenAPI::toJsonValue(m_can_change_password));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invite_pending_isSet) {
        obj.insert(QString("invite_pending"), ::OpenAPI::toJsonValue(m_invite_pending));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIDistributionGroups_listUsers_200_response_inner::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIDistributionGroups_listUsers_200_response_inner::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

bool OAIDistributionGroups_listUsers_200_response_inner::isCanChangePassword() const {
    return m_can_change_password;
}
void OAIDistributionGroups_listUsers_200_response_inner::setCanChangePassword(const bool &can_change_password) {
    m_can_change_password = can_change_password;
    m_can_change_password_isSet = true;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_can_change_password_Set() const{
    return m_can_change_password_isSet;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_can_change_password_Valid() const{
    return m_can_change_password_isValid;
}

QString OAIDistributionGroups_listUsers_200_response_inner::getDisplayName() const {
    return m_display_name;
}
void OAIDistributionGroups_listUsers_200_response_inner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDistributionGroups_listUsers_200_response_inner::getEmail() const {
    return m_email;
}
void OAIDistributionGroups_listUsers_200_response_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIDistributionGroups_listUsers_200_response_inner::getId() const {
    return m_id;
}
void OAIDistributionGroups_listUsers_200_response_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDistributionGroups_listUsers_200_response_inner::isInvitePending() const {
    return m_invite_pending;
}
void OAIDistributionGroups_listUsers_200_response_inner::setInvitePending(const bool &invite_pending) {
    m_invite_pending = invite_pending;
    m_invite_pending_isSet = true;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_invite_pending_Set() const{
    return m_invite_pending_isSet;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_invite_pending_Valid() const{
    return m_invite_pending_isValid;
}

QString OAIDistributionGroups_listUsers_200_response_inner::getName() const {
    return m_name;
}
void OAIDistributionGroups_listUsers_200_response_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDistributionGroups_listUsers_200_response_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDistributionGroups_listUsers_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionGroups_listUsers_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && true;
}

} // namespace OpenAPI
