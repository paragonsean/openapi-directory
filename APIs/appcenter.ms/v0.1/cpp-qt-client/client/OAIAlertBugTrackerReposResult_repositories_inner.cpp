/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertBugTrackerReposResult_repositories_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertBugTrackerReposResult_repositories_inner::OAIAlertBugTrackerReposResult_repositories_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertBugTrackerReposResult_repositories_inner::OAIAlertBugTrackerReposResult_repositories_inner() {
    this->initializeModel();
}

OAIAlertBugTrackerReposResult_repositories_inner::~OAIAlertBugTrackerReposResult_repositories_inner() {}

void OAIAlertBugTrackerReposResult_repositories_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAlertBugTrackerReposResult_repositories_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertBugTrackerReposResult_repositories_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAlertBugTrackerReposResult_repositories_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertBugTrackerReposResult_repositories_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAlertBugTrackerReposResult_repositories_inner::getDescription() const {
    return m_description;
}
void OAIAlertBugTrackerReposResult_repositories_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAlertBugTrackerReposResult_repositories_inner::getId() const {
    return m_id;
}
void OAIAlertBugTrackerReposResult_repositories_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAlertBugTrackerReposResult_repositories_inner::getName() const {
    return m_name;
}
void OAIAlertBugTrackerReposResult_repositories_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_name_Valid() const{
    return m_name_isValid;
}

OAIAlertBugTrackerRepo_owner OAIAlertBugTrackerReposResult_repositories_inner::getOwner() const {
    return m_owner;
}
void OAIAlertBugTrackerReposResult_repositories_inner::setOwner(const OAIAlertBugTrackerRepo_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::isRPrivate() const {
    return m_r_private;
}
void OAIAlertBugTrackerReposResult_repositories_inner::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QString OAIAlertBugTrackerReposResult_repositories_inner::getUrl() const {
    return m_url;
}
void OAIAlertBugTrackerReposResult_repositories_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertBugTrackerReposResult_repositories_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
