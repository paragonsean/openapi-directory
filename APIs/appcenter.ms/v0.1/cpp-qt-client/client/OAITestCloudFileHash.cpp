/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCloudFileHash.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCloudFileHash::OAITestCloudFileHash(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCloudFileHash::OAITestCloudFileHash() {
    this->initializeModel();
}

OAITestCloudFileHash::~OAITestCloudFileHash() {}

void OAITestCloudFileHash::initializeModel() {

    m_checksum_isSet = false;
    m_checksum_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;
}

void OAITestCloudFileHash::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCloudFileHash::fromJsonObject(QJsonObject json) {

    m_checksum_isValid = ::OpenAPI::fromJsonValue(m_checksum, json[QString("checksum")]);
    m_checksum_isSet = !json[QString("checksum")].isNull() && m_checksum_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;
}

QString OAITestCloudFileHash::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCloudFileHash::asJsonObject() const {
    QJsonObject obj;
    if (m_checksum_isSet) {
        obj.insert(QString("checksum"), ::OpenAPI::toJsonValue(m_checksum));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    return obj;
}

QString OAITestCloudFileHash::getChecksum() const {
    return m_checksum;
}
void OAITestCloudFileHash::setChecksum(const QString &checksum) {
    m_checksum = checksum;
    m_checksum_isSet = true;
}

bool OAITestCloudFileHash::is_checksum_Set() const{
    return m_checksum_isSet;
}

bool OAITestCloudFileHash::is_checksum_Valid() const{
    return m_checksum_isValid;
}

QString OAITestCloudFileHash::getFileType() const {
    return m_file_type;
}
void OAITestCloudFileHash::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAITestCloudFileHash::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAITestCloudFileHash::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QString OAITestCloudFileHash::getRelativePath() const {
    return m_relative_path;
}
void OAITestCloudFileHash::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAITestCloudFileHash::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAITestCloudFileHash::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

bool OAITestCloudFileHash::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCloudFileHash::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_checksum_isValid && m_file_type_isValid && m_relative_path_isValid && true;
}

} // namespace OpenAPI
