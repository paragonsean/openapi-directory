/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartServiceLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartServiceLog::OAIStartServiceLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartServiceLog::OAIStartServiceLog() {
    this->initializeModel();
}

OAIStartServiceLog::~OAIStartServiceLog() {}

void OAIStartServiceLog::initializeModel() {

    m_services_isSet = false;
    m_services_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_install_id_isSet = false;
    m_install_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStartServiceLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartServiceLog::fromJsonObject(QJsonObject json) {

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_install_id_isValid = ::OpenAPI::fromJsonValue(m_install_id, json[QString("install_id")]);
    m_install_id_isSet = !json[QString("install_id")].isNull() && m_install_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStartServiceLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartServiceLog::asJsonObject() const {
    QJsonObject obj;
    if (m_services.size() > 0) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_install_id_isSet) {
        obj.insert(QString("install_id"), ::OpenAPI::toJsonValue(m_install_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIStartServiceLog::getServices() const {
    return m_services;
}
void OAIStartServiceLog::setServices(const QList<QString> &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIStartServiceLog::is_services_Set() const{
    return m_services_isSet;
}

bool OAIStartServiceLog::is_services_Valid() const{
    return m_services_isValid;
}

OAIAnalytics_GenericLogFlow_200_response_logs_inner_device OAIStartServiceLog::getDevice() const {
    return m_device;
}
void OAIStartServiceLog::setDevice(const OAIAnalytics_GenericLogFlow_200_response_logs_inner_device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIStartServiceLog::is_device_Set() const{
    return m_device_isSet;
}

bool OAIStartServiceLog::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIStartServiceLog::getInstallId() const {
    return m_install_id;
}
void OAIStartServiceLog::setInstallId(const QString &install_id) {
    m_install_id = install_id;
    m_install_id_isSet = true;
}

bool OAIStartServiceLog::is_install_id_Set() const{
    return m_install_id_isSet;
}

bool OAIStartServiceLog::is_install_id_Valid() const{
    return m_install_id_isValid;
}

QDateTime OAIStartServiceLog::getTimestamp() const {
    return m_timestamp;
}
void OAIStartServiceLog::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIStartServiceLog::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIStartServiceLog::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIStartServiceLog::getType() const {
    return m_type;
}
void OAIStartServiceLog::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStartServiceLog::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStartServiceLog::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStartServiceLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartServiceLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_install_id_isValid && m_timestamp_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
