/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseTesterDestinationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseTesterDestinationRequest::OAIReleaseTesterDestinationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseTesterDestinationRequest::OAIReleaseTesterDestinationRequest() {
    this->initializeModel();
}

OAIReleaseTesterDestinationRequest::~OAIReleaseTesterDestinationRequest() {}

void OAIReleaseTesterDestinationRequest::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_mandatory_update_isSet = false;
    m_mandatory_update_isValid = false;

    m_notify_testers_isSet = false;
    m_notify_testers_isValid = false;
}

void OAIReleaseTesterDestinationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseTesterDestinationRequest::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_mandatory_update_isValid = ::OpenAPI::fromJsonValue(m_mandatory_update, json[QString("mandatory_update")]);
    m_mandatory_update_isSet = !json[QString("mandatory_update")].isNull() && m_mandatory_update_isValid;

    m_notify_testers_isValid = ::OpenAPI::fromJsonValue(m_notify_testers, json[QString("notify_testers")]);
    m_notify_testers_isSet = !json[QString("notify_testers")].isNull() && m_notify_testers_isValid;
}

QString OAIReleaseTesterDestinationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseTesterDestinationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_mandatory_update_isSet) {
        obj.insert(QString("mandatory_update"), ::OpenAPI::toJsonValue(m_mandatory_update));
    }
    if (m_notify_testers_isSet) {
        obj.insert(QString("notify_testers"), ::OpenAPI::toJsonValue(m_notify_testers));
    }
    return obj;
}

QString OAIReleaseTesterDestinationRequest::getEmail() const {
    return m_email;
}
void OAIReleaseTesterDestinationRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIReleaseTesterDestinationRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIReleaseTesterDestinationRequest::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIReleaseTesterDestinationRequest::isMandatoryUpdate() const {
    return m_mandatory_update;
}
void OAIReleaseTesterDestinationRequest::setMandatoryUpdate(const bool &mandatory_update) {
    m_mandatory_update = mandatory_update;
    m_mandatory_update_isSet = true;
}

bool OAIReleaseTesterDestinationRequest::is_mandatory_update_Set() const{
    return m_mandatory_update_isSet;
}

bool OAIReleaseTesterDestinationRequest::is_mandatory_update_Valid() const{
    return m_mandatory_update_isValid;
}

bool OAIReleaseTesterDestinationRequest::isNotifyTesters() const {
    return m_notify_testers;
}
void OAIReleaseTesterDestinationRequest::setNotifyTesters(const bool &notify_testers) {
    m_notify_testers = notify_testers;
    m_notify_testers_isSet = true;
}

bool OAIReleaseTesterDestinationRequest::is_notify_testers_Set() const{
    return m_notify_testers_isSet;
}

bool OAIReleaseTesterDestinationRequest::is_notify_testers_Valid() const{
    return m_notify_testers_isValid;
}

bool OAIReleaseTesterDestinationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_testers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseTesterDestinationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && true;
}

} // namespace OpenAPI
