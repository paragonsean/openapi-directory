/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestGDPRTestRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestGDPRTestRun::OAITestGDPRTestRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestGDPRTestRun::OAITestGDPRTestRun() {
    this->initializeModel();
}

OAITestGDPRTestRun::~OAITestGDPRTestRun() {}

void OAITestGDPRTestRun::initializeModel() {

    m_app_hash_file_id_isSet = false;
    m_app_hash_file_id_isValid = false;

    m_app_hash_file_url_isSet = false;
    m_app_hash_file_url_isValid = false;

    m_app_icon_url_isSet = false;
    m_app_icon_url_isValid = false;

    m_dsym_hash_file_id_isSet = false;
    m_dsym_hash_file_id_isValid = false;

    m_dsym_hash_file_url_isSet = false;
    m_dsym_hash_file_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;
}

void OAITestGDPRTestRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestGDPRTestRun::fromJsonObject(QJsonObject json) {

    m_app_hash_file_id_isValid = ::OpenAPI::fromJsonValue(m_app_hash_file_id, json[QString("app_hash_file_id")]);
    m_app_hash_file_id_isSet = !json[QString("app_hash_file_id")].isNull() && m_app_hash_file_id_isValid;

    m_app_hash_file_url_isValid = ::OpenAPI::fromJsonValue(m_app_hash_file_url, json[QString("app_hash_file_url")]);
    m_app_hash_file_url_isSet = !json[QString("app_hash_file_url")].isNull() && m_app_hash_file_url_isValid;

    m_app_icon_url_isValid = ::OpenAPI::fromJsonValue(m_app_icon_url, json[QString("app_icon_url")]);
    m_app_icon_url_isSet = !json[QString("app_icon_url")].isNull() && m_app_icon_url_isValid;

    m_dsym_hash_file_id_isValid = ::OpenAPI::fromJsonValue(m_dsym_hash_file_id, json[QString("dsym_hash_file_id")]);
    m_dsym_hash_file_id_isSet = !json[QString("dsym_hash_file_id")].isNull() && m_dsym_hash_file_id_isValid;

    m_dsym_hash_file_url_isValid = ::OpenAPI::fromJsonValue(m_dsym_hash_file_url, json[QString("dsym_hash_file_url")]);
    m_dsym_hash_file_url_isSet = !json[QString("dsym_hash_file_url")].isNull() && m_dsym_hash_file_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;
}

QString OAITestGDPRTestRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestGDPRTestRun::asJsonObject() const {
    QJsonObject obj;
    if (m_app_hash_file_id_isSet) {
        obj.insert(QString("app_hash_file_id"), ::OpenAPI::toJsonValue(m_app_hash_file_id));
    }
    if (m_app_hash_file_url_isSet) {
        obj.insert(QString("app_hash_file_url"), ::OpenAPI::toJsonValue(m_app_hash_file_url));
    }
    if (m_app_icon_url_isSet) {
        obj.insert(QString("app_icon_url"), ::OpenAPI::toJsonValue(m_app_icon_url));
    }
    if (m_dsym_hash_file_id_isSet) {
        obj.insert(QString("dsym_hash_file_id"), ::OpenAPI::toJsonValue(m_dsym_hash_file_id));
    }
    if (m_dsym_hash_file_url_isSet) {
        obj.insert(QString("dsym_hash_file_url"), ::OpenAPI::toJsonValue(m_dsym_hash_file_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    return obj;
}

QString OAITestGDPRTestRun::getAppHashFileId() const {
    return m_app_hash_file_id;
}
void OAITestGDPRTestRun::setAppHashFileId(const QString &app_hash_file_id) {
    m_app_hash_file_id = app_hash_file_id;
    m_app_hash_file_id_isSet = true;
}

bool OAITestGDPRTestRun::is_app_hash_file_id_Set() const{
    return m_app_hash_file_id_isSet;
}

bool OAITestGDPRTestRun::is_app_hash_file_id_Valid() const{
    return m_app_hash_file_id_isValid;
}

QString OAITestGDPRTestRun::getAppHashFileUrl() const {
    return m_app_hash_file_url;
}
void OAITestGDPRTestRun::setAppHashFileUrl(const QString &app_hash_file_url) {
    m_app_hash_file_url = app_hash_file_url;
    m_app_hash_file_url_isSet = true;
}

bool OAITestGDPRTestRun::is_app_hash_file_url_Set() const{
    return m_app_hash_file_url_isSet;
}

bool OAITestGDPRTestRun::is_app_hash_file_url_Valid() const{
    return m_app_hash_file_url_isValid;
}

QString OAITestGDPRTestRun::getAppIconUrl() const {
    return m_app_icon_url;
}
void OAITestGDPRTestRun::setAppIconUrl(const QString &app_icon_url) {
    m_app_icon_url = app_icon_url;
    m_app_icon_url_isSet = true;
}

bool OAITestGDPRTestRun::is_app_icon_url_Set() const{
    return m_app_icon_url_isSet;
}

bool OAITestGDPRTestRun::is_app_icon_url_Valid() const{
    return m_app_icon_url_isValid;
}

QString OAITestGDPRTestRun::getDsymHashFileId() const {
    return m_dsym_hash_file_id;
}
void OAITestGDPRTestRun::setDsymHashFileId(const QString &dsym_hash_file_id) {
    m_dsym_hash_file_id = dsym_hash_file_id;
    m_dsym_hash_file_id_isSet = true;
}

bool OAITestGDPRTestRun::is_dsym_hash_file_id_Set() const{
    return m_dsym_hash_file_id_isSet;
}

bool OAITestGDPRTestRun::is_dsym_hash_file_id_Valid() const{
    return m_dsym_hash_file_id_isValid;
}

QString OAITestGDPRTestRun::getDsymHashFileUrl() const {
    return m_dsym_hash_file_url;
}
void OAITestGDPRTestRun::setDsymHashFileUrl(const QString &dsym_hash_file_url) {
    m_dsym_hash_file_url = dsym_hash_file_url;
    m_dsym_hash_file_url_isSet = true;
}

bool OAITestGDPRTestRun::is_dsym_hash_file_url_Set() const{
    return m_dsym_hash_file_url_isSet;
}

bool OAITestGDPRTestRun::is_dsym_hash_file_url_Valid() const{
    return m_dsym_hash_file_url_isValid;
}

QString OAITestGDPRTestRun::getId() const {
    return m_id;
}
void OAITestGDPRTestRun::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITestGDPRTestRun::is_id_Set() const{
    return m_id_isSet;
}

bool OAITestGDPRTestRun::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITestGDPRTestRun::getLocale() const {
    return m_locale;
}
void OAITestGDPRTestRun::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAITestGDPRTestRun::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAITestGDPRTestRun::is_locale_Valid() const{
    return m_locale_isValid;
}

bool OAITestGDPRTestRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_hash_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_hash_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dsym_hash_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dsym_hash_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestGDPRTestRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
