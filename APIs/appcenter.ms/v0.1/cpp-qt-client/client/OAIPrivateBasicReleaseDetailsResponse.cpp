/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateBasicReleaseDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateBasicReleaseDetailsResponse::OAIPrivateBasicReleaseDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateBasicReleaseDetailsResponse::OAIPrivateBasicReleaseDetailsResponse() {
    this->initializeModel();
}

OAIPrivateBasicReleaseDetailsResponse::~OAIPrivateBasicReleaseDetailsResponse() {}

void OAIPrivateBasicReleaseDetailsResponse::initializeModel() {

    m_destination_type_isSet = false;
    m_destination_type_isValid = false;

    m_distribution_group_id_isSet = false;
    m_distribution_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_external_build_isSet = false;
    m_is_external_build_isValid = false;

    m_is_latest_isSet = false;
    m_is_latest_isValid = false;

    m_mandatory_update_isSet = false;
    m_mandatory_update_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_publishing_status_isSet = false;
    m_publishing_status_isValid = false;

    m_short_version_isSet = false;
    m_short_version_isValid = false;

    m_uploaded_at_isSet = false;
    m_uploaded_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPrivateBasicReleaseDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateBasicReleaseDetailsResponse::fromJsonObject(QJsonObject json) {

    m_destination_type_isValid = ::OpenAPI::fromJsonValue(m_destination_type, json[QString("destination_type")]);
    m_destination_type_isSet = !json[QString("destination_type")].isNull() && m_destination_type_isValid;

    m_distribution_group_id_isValid = ::OpenAPI::fromJsonValue(m_distribution_group_id, json[QString("distribution_group_id")]);
    m_distribution_group_id_isSet = !json[QString("distribution_group_id")].isNull() && m_distribution_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_external_build_isValid = ::OpenAPI::fromJsonValue(m_is_external_build, json[QString("is_external_build")]);
    m_is_external_build_isSet = !json[QString("is_external_build")].isNull() && m_is_external_build_isValid;

    m_is_latest_isValid = ::OpenAPI::fromJsonValue(m_is_latest, json[QString("is_latest")]);
    m_is_latest_isSet = !json[QString("is_latest")].isNull() && m_is_latest_isValid;

    m_mandatory_update_isValid = ::OpenAPI::fromJsonValue(m_mandatory_update, json[QString("mandatory_update")]);
    m_mandatory_update_isSet = !json[QString("mandatory_update")].isNull() && m_mandatory_update_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_publishing_status_isValid = ::OpenAPI::fromJsonValue(m_publishing_status, json[QString("publishing_status")]);
    m_publishing_status_isSet = !json[QString("publishing_status")].isNull() && m_publishing_status_isValid;

    m_short_version_isValid = ::OpenAPI::fromJsonValue(m_short_version, json[QString("short_version")]);
    m_short_version_isSet = !json[QString("short_version")].isNull() && m_short_version_isValid;

    m_uploaded_at_isValid = ::OpenAPI::fromJsonValue(m_uploaded_at, json[QString("uploaded_at")]);
    m_uploaded_at_isSet = !json[QString("uploaded_at")].isNull() && m_uploaded_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPrivateBasicReleaseDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateBasicReleaseDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_type_isSet) {
        obj.insert(QString("destination_type"), ::OpenAPI::toJsonValue(m_destination_type));
    }
    if (m_distribution_group_id_isSet) {
        obj.insert(QString("distribution_group_id"), ::OpenAPI::toJsonValue(m_distribution_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_external_build_isSet) {
        obj.insert(QString("is_external_build"), ::OpenAPI::toJsonValue(m_is_external_build));
    }
    if (m_is_latest_isSet) {
        obj.insert(QString("is_latest"), ::OpenAPI::toJsonValue(m_is_latest));
    }
    if (m_mandatory_update_isSet) {
        obj.insert(QString("mandatory_update"), ::OpenAPI::toJsonValue(m_mandatory_update));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_publishing_status_isSet) {
        obj.insert(QString("publishing_status"), ::OpenAPI::toJsonValue(m_publishing_status));
    }
    if (m_short_version_isSet) {
        obj.insert(QString("short_version"), ::OpenAPI::toJsonValue(m_short_version));
    }
    if (m_uploaded_at_isSet) {
        obj.insert(QString("uploaded_at"), ::OpenAPI::toJsonValue(m_uploaded_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPrivateBasicReleaseDetailsResponse::getDestinationType() const {
    return m_destination_type;
}
void OAIPrivateBasicReleaseDetailsResponse::setDestinationType(const QString &destination_type) {
    m_destination_type = destination_type;
    m_destination_type_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_destination_type_Set() const{
    return m_destination_type_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_destination_type_Valid() const{
    return m_destination_type_isValid;
}

QString OAIPrivateBasicReleaseDetailsResponse::getDistributionGroupId() const {
    return m_distribution_group_id;
}
void OAIPrivateBasicReleaseDetailsResponse::setDistributionGroupId(const QString &distribution_group_id) {
    m_distribution_group_id = distribution_group_id;
    m_distribution_group_id_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_distribution_group_id_Set() const{
    return m_distribution_group_id_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_distribution_group_id_Valid() const{
    return m_distribution_group_id_isValid;
}

qint32 OAIPrivateBasicReleaseDetailsResponse::getId() const {
    return m_id;
}
void OAIPrivateBasicReleaseDetailsResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPrivateBasicReleaseDetailsResponse::isIsExternalBuild() const {
    return m_is_external_build;
}
void OAIPrivateBasicReleaseDetailsResponse::setIsExternalBuild(const bool &is_external_build) {
    m_is_external_build = is_external_build;
    m_is_external_build_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_is_external_build_Set() const{
    return m_is_external_build_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_is_external_build_Valid() const{
    return m_is_external_build_isValid;
}

bool OAIPrivateBasicReleaseDetailsResponse::isIsLatest() const {
    return m_is_latest;
}
void OAIPrivateBasicReleaseDetailsResponse::setIsLatest(const bool &is_latest) {
    m_is_latest = is_latest;
    m_is_latest_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_is_latest_Set() const{
    return m_is_latest_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_is_latest_Valid() const{
    return m_is_latest_isValid;
}

bool OAIPrivateBasicReleaseDetailsResponse::isMandatoryUpdate() const {
    return m_mandatory_update;
}
void OAIPrivateBasicReleaseDetailsResponse::setMandatoryUpdate(const bool &mandatory_update) {
    m_mandatory_update = mandatory_update;
    m_mandatory_update_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_mandatory_update_Set() const{
    return m_mandatory_update_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_mandatory_update_Valid() const{
    return m_mandatory_update_isValid;
}

QString OAIPrivateBasicReleaseDetailsResponse::getOrigin() const {
    return m_origin;
}
void OAIPrivateBasicReleaseDetailsResponse::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIPrivateBasicReleaseDetailsResponse::getPublishingStatus() const {
    return m_publishing_status;
}
void OAIPrivateBasicReleaseDetailsResponse::setPublishingStatus(const QString &publishing_status) {
    m_publishing_status = publishing_status;
    m_publishing_status_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_publishing_status_Set() const{
    return m_publishing_status_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_publishing_status_Valid() const{
    return m_publishing_status_isValid;
}

QString OAIPrivateBasicReleaseDetailsResponse::getShortVersion() const {
    return m_short_version;
}
void OAIPrivateBasicReleaseDetailsResponse::setShortVersion(const QString &short_version) {
    m_short_version = short_version;
    m_short_version_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_short_version_Set() const{
    return m_short_version_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_short_version_Valid() const{
    return m_short_version_isValid;
}

QString OAIPrivateBasicReleaseDetailsResponse::getUploadedAt() const {
    return m_uploaded_at;
}
void OAIPrivateBasicReleaseDetailsResponse::setUploadedAt(const QString &uploaded_at) {
    m_uploaded_at = uploaded_at;
    m_uploaded_at_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_uploaded_at_Set() const{
    return m_uploaded_at_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_uploaded_at_Valid() const{
    return m_uploaded_at_isValid;
}

QString OAIPrivateBasicReleaseDetailsResponse::getVersion() const {
    return m_version;
}
void OAIPrivateBasicReleaseDetailsResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPrivateBasicReleaseDetailsResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPrivateBasicReleaseDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateBasicReleaseDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
