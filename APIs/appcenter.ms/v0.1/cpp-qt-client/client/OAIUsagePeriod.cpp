/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsagePeriod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsagePeriod::OAIUsagePeriod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsagePeriod::OAIUsagePeriod() {
    this->initializeModel();
}

OAIUsagePeriod::~OAIUsagePeriod() {}

void OAIUsagePeriod::initializeModel() {

    m_by_account_isSet = false;
    m_by_account_isValid = false;

    m_by_app_isSet = false;
    m_by_app_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIUsagePeriod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsagePeriod::fromJsonObject(QJsonObject json) {

    m_by_account_isValid = ::OpenAPI::fromJsonValue(m_by_account, json[QString("byAccount")]);
    m_by_account_isSet = !json[QString("byAccount")].isNull() && m_by_account_isValid;

    if(json["byApp"].isObject()){
        auto varmap = json["byApp"].toObject().toVariantMap();
        m_by_app_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, double> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_by_app_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_by_app_isSet &= !jval.isNull() && m_by_app_isValid;
                m_by_app.insert(m_by_app.end(), val, item);
            }
        }
    }

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIUsagePeriod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsagePeriod::asJsonObject() const {
    QJsonObject obj;
    if (m_by_account.size() > 0) {
        obj.insert(QString("byAccount"), ::OpenAPI::toJsonValue(m_by_account));
    }
    if (m_by_app.size() > 0) {
        
        obj.insert(QString("byApp"), toJsonValue(m_by_app));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QMap<QString, double> OAIUsagePeriod::getByAccount() const {
    return m_by_account;
}
void OAIUsagePeriod::setByAccount(const QMap<QString, double> &by_account) {
    m_by_account = by_account;
    m_by_account_isSet = true;
}

bool OAIUsagePeriod::is_by_account_Set() const{
    return m_by_account_isSet;
}

bool OAIUsagePeriod::is_by_account_Valid() const{
    return m_by_account_isValid;
}

QMap<QString, QMap<QString, double>> OAIUsagePeriod::getByApp() const {
    return m_by_app;
}
void OAIUsagePeriod::setByApp(const QMap<QString, QMap<QString, double>> &by_app) {
    m_by_app = by_app;
    m_by_app_isSet = true;
}

bool OAIUsagePeriod::is_by_app_Set() const{
    return m_by_app_isSet;
}

bool OAIUsagePeriod::is_by_app_Valid() const{
    return m_by_app_isValid;
}

QString OAIUsagePeriod::getEndTime() const {
    return m_end_time;
}
void OAIUsagePeriod::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIUsagePeriod::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIUsagePeriod::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIUsagePeriod::getStartTime() const {
    return m_start_time;
}
void OAIUsagePeriod::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIUsagePeriod::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIUsagePeriod::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIUsagePeriod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_by_account.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_by_app.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsagePeriod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
