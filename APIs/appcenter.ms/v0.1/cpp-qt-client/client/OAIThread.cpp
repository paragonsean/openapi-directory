/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThread.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThread::OAIThread(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThread::OAIThread() {
    this->initializeModel();
}

OAIThread::~OAIThread() {}

void OAIThread::initializeModel() {

    m_crashed_isSet = false;
    m_crashed_isValid = false;

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_frames_isSet = false;
    m_frames_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_relevant_isSet = false;
    m_relevant_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIThread::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThread::fromJsonObject(QJsonObject json) {

    m_crashed_isValid = ::OpenAPI::fromJsonValue(m_crashed, json[QString("crashed")]);
    m_crashed_isSet = !json[QString("crashed")].isNull() && m_crashed_isValid;

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("exception")]);
    m_exception_isSet = !json[QString("exception")].isNull() && m_exception_isValid;

    m_frames_isValid = ::OpenAPI::fromJsonValue(m_frames, json[QString("frames")]);
    m_frames_isSet = !json[QString("frames")].isNull() && m_frames_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_relevant_isValid = ::OpenAPI::fromJsonValue(m_relevant, json[QString("relevant")]);
    m_relevant_isSet = !json[QString("relevant")].isNull() && m_relevant_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIThread::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThread::asJsonObject() const {
    QJsonObject obj;
    if (m_crashed_isSet) {
        obj.insert(QString("crashed"), ::OpenAPI::toJsonValue(m_crashed));
    }
    if (m_exception.isSet()) {
        obj.insert(QString("exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    if (m_frames.size() > 0) {
        obj.insert(QString("frames"), ::OpenAPI::toJsonValue(m_frames));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_relevant_isSet) {
        obj.insert(QString("relevant"), ::OpenAPI::toJsonValue(m_relevant));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

bool OAIThread::isCrashed() const {
    return m_crashed;
}
void OAIThread::setCrashed(const bool &crashed) {
    m_crashed = crashed;
    m_crashed_isSet = true;
}

bool OAIThread::is_crashed_Set() const{
    return m_crashed_isSet;
}

bool OAIThread::is_crashed_Valid() const{
    return m_crashed_isValid;
}

OAIException OAIThread::getException() const {
    return m_exception;
}
void OAIThread::setException(const OAIException &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAIThread::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAIThread::is_exception_Valid() const{
    return m_exception_isValid;
}

QList<OAIException_frames_inner> OAIThread::getFrames() const {
    return m_frames;
}
void OAIThread::setFrames(const QList<OAIException_frames_inner> &frames) {
    m_frames = frames;
    m_frames_isSet = true;
}

bool OAIThread::is_frames_Set() const{
    return m_frames_isSet;
}

bool OAIThread::is_frames_Valid() const{
    return m_frames_isValid;
}

QString OAIThread::getPlatform() const {
    return m_platform;
}
void OAIThread::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIThread::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIThread::is_platform_Valid() const{
    return m_platform_isValid;
}

bool OAIThread::isRelevant() const {
    return m_relevant;
}
void OAIThread::setRelevant(const bool &relevant) {
    m_relevant = relevant;
    m_relevant_isSet = true;
}

bool OAIThread::is_relevant_Set() const{
    return m_relevant_isSet;
}

bool OAIThread::is_relevant_Valid() const{
    return m_relevant_isValid;
}

QString OAIThread::getTitle() const {
    return m_title;
}
void OAIThread::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIThread::is_title_Set() const{
    return m_title_isSet;
}

bool OAIThread::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIThread::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crashed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frames.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relevant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThread::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_frames_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
