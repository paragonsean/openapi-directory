/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReleaseUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReleaseUpdateRequest::OAIReleaseUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReleaseUpdateRequest::OAIReleaseUpdateRequest() {
    this->initializeModel();
}

OAIReleaseUpdateRequest::~OAIReleaseUpdateRequest() {}

void OAIReleaseUpdateRequest::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_destination_type_isSet = false;
    m_destination_type_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_distribution_group_id_isSet = false;
    m_distribution_group_id_isValid = false;

    m_distribution_group_name_isSet = false;
    m_distribution_group_name_isValid = false;

    m_mandatory_update_isSet = false;
    m_mandatory_update_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_notify_testers_isSet = false;
    m_notify_testers_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;
}

void OAIReleaseUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReleaseUpdateRequest::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("destination_id")]);
    m_destination_id_isSet = !json[QString("destination_id")].isNull() && m_destination_id_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destination_name")]);
    m_destination_name_isSet = !json[QString("destination_name")].isNull() && m_destination_name_isValid;

    m_destination_type_isValid = ::OpenAPI::fromJsonValue(m_destination_type, json[QString("destination_type")]);
    m_destination_type_isSet = !json[QString("destination_type")].isNull() && m_destination_type_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_distribution_group_id_isValid = ::OpenAPI::fromJsonValue(m_distribution_group_id, json[QString("distribution_group_id")]);
    m_distribution_group_id_isSet = !json[QString("distribution_group_id")].isNull() && m_distribution_group_id_isValid;

    m_distribution_group_name_isValid = ::OpenAPI::fromJsonValue(m_distribution_group_name, json[QString("distribution_group_name")]);
    m_distribution_group_name_isSet = !json[QString("distribution_group_name")].isNull() && m_distribution_group_name_isValid;

    m_mandatory_update_isValid = ::OpenAPI::fromJsonValue(m_mandatory_update, json[QString("mandatory_update")]);
    m_mandatory_update_isSet = !json[QString("mandatory_update")].isNull() && m_mandatory_update_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_notify_testers_isValid = ::OpenAPI::fromJsonValue(m_notify_testers, json[QString("notify_testers")]);
    m_notify_testers_isSet = !json[QString("notify_testers")].isNull() && m_notify_testers_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("release_notes")]);
    m_release_notes_isSet = !json[QString("release_notes")].isNull() && m_release_notes_isValid;
}

QString OAIReleaseUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReleaseUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_build.isSet()) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_destination_id_isSet) {
        obj.insert(QString("destination_id"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("destination_name"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_destination_type_isSet) {
        obj.insert(QString("destination_type"), ::OpenAPI::toJsonValue(m_destination_type));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_distribution_group_id_isSet) {
        obj.insert(QString("distribution_group_id"), ::OpenAPI::toJsonValue(m_distribution_group_id));
    }
    if (m_distribution_group_name_isSet) {
        obj.insert(QString("distribution_group_name"), ::OpenAPI::toJsonValue(m_distribution_group_name));
    }
    if (m_mandatory_update_isSet) {
        obj.insert(QString("mandatory_update"), ::OpenAPI::toJsonValue(m_mandatory_update));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_notify_testers_isSet) {
        obj.insert(QString("notify_testers"), ::OpenAPI::toJsonValue(m_notify_testers));
    }
    if (m_release_notes_isSet) {
        obj.insert(QString("release_notes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    return obj;
}

OAIReleases_getLatestByDistributionGroup_200_response_build OAIReleaseUpdateRequest::getBuild() const {
    return m_build;
}
void OAIReleaseUpdateRequest::setBuild(const OAIReleases_getLatestByDistributionGroup_200_response_build &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAIReleaseUpdateRequest::is_build_Set() const{
    return m_build_isSet;
}

bool OAIReleaseUpdateRequest::is_build_Valid() const{
    return m_build_isValid;
}

QString OAIReleaseUpdateRequest::getDestinationId() const {
    return m_destination_id;
}
void OAIReleaseUpdateRequest::setDestinationId(const QString &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAIReleaseUpdateRequest::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAIReleaseUpdateRequest::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

QString OAIReleaseUpdateRequest::getDestinationName() const {
    return m_destination_name;
}
void OAIReleaseUpdateRequest::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIReleaseUpdateRequest::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIReleaseUpdateRequest::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIReleaseUpdateRequest::getDestinationType() const {
    return m_destination_type;
}
void OAIReleaseUpdateRequest::setDestinationType(const QString &destination_type) {
    m_destination_type = destination_type;
    m_destination_type_isSet = true;
}

bool OAIReleaseUpdateRequest::is_destination_type_Set() const{
    return m_destination_type_isSet;
}

bool OAIReleaseUpdateRequest::is_destination_type_Valid() const{
    return m_destination_type_isValid;
}

QList<OAIReleases_update_request_destinations_inner> OAIReleaseUpdateRequest::getDestinations() const {
    return m_destinations;
}
void OAIReleaseUpdateRequest::setDestinations(const QList<OAIReleases_update_request_destinations_inner> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIReleaseUpdateRequest::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIReleaseUpdateRequest::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAIReleaseUpdateRequest::getDistributionGroupId() const {
    return m_distribution_group_id;
}
void OAIReleaseUpdateRequest::setDistributionGroupId(const QString &distribution_group_id) {
    m_distribution_group_id = distribution_group_id;
    m_distribution_group_id_isSet = true;
}

bool OAIReleaseUpdateRequest::is_distribution_group_id_Set() const{
    return m_distribution_group_id_isSet;
}

bool OAIReleaseUpdateRequest::is_distribution_group_id_Valid() const{
    return m_distribution_group_id_isValid;
}

QString OAIReleaseUpdateRequest::getDistributionGroupName() const {
    return m_distribution_group_name;
}
void OAIReleaseUpdateRequest::setDistributionGroupName(const QString &distribution_group_name) {
    m_distribution_group_name = distribution_group_name;
    m_distribution_group_name_isSet = true;
}

bool OAIReleaseUpdateRequest::is_distribution_group_name_Set() const{
    return m_distribution_group_name_isSet;
}

bool OAIReleaseUpdateRequest::is_distribution_group_name_Valid() const{
    return m_distribution_group_name_isValid;
}

bool OAIReleaseUpdateRequest::isMandatoryUpdate() const {
    return m_mandatory_update;
}
void OAIReleaseUpdateRequest::setMandatoryUpdate(const bool &mandatory_update) {
    m_mandatory_update = mandatory_update;
    m_mandatory_update_isSet = true;
}

bool OAIReleaseUpdateRequest::is_mandatory_update_Set() const{
    return m_mandatory_update_isSet;
}

bool OAIReleaseUpdateRequest::is_mandatory_update_Valid() const{
    return m_mandatory_update_isValid;
}

OAIReleases_update_request_metadata OAIReleaseUpdateRequest::getMetadata() const {
    return m_metadata;
}
void OAIReleaseUpdateRequest::setMetadata(const OAIReleases_update_request_metadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIReleaseUpdateRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIReleaseUpdateRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIReleaseUpdateRequest::isNotifyTesters() const {
    return m_notify_testers;
}
void OAIReleaseUpdateRequest::setNotifyTesters(const bool &notify_testers) {
    m_notify_testers = notify_testers;
    m_notify_testers_isSet = true;
}

bool OAIReleaseUpdateRequest::is_notify_testers_Set() const{
    return m_notify_testers_isSet;
}

bool OAIReleaseUpdateRequest::is_notify_testers_Valid() const{
    return m_notify_testers_isValid;
}

QString OAIReleaseUpdateRequest::getReleaseNotes() const {
    return m_release_notes;
}
void OAIReleaseUpdateRequest::setReleaseNotes(const QString &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAIReleaseUpdateRequest::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAIReleaseUpdateRequest::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

bool OAIReleaseUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_testers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReleaseUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
