/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExportApi_H
#define OAI_OAIExportApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExportConfigurations_List_200_response.h"
#include "OAIExportConfigurations_List_200_response_values_inner.h"
#include "OAIExportConfigurations_List_200_response_values_inner_export_configuration.h"
#include "OAIOrganizations_listAdministered_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExportApi : public QObject {
    Q_OBJECT

public:
    OAIExportApi(const int timeOut = 0);
    ~OAIExportApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_export_configurations_list_200_response_values_inner_export_configuration OAIExportConfigurations_List_200_response_values_inner_export_configuration [required]
    */
    virtual void exportConfigurationsCreate(const QString &owner_name, const QString &app_name, const OAIExportConfigurations_List_200_response_values_inner_export_configuration &oai_export_configurations_list_200_response_values_inner_export_configuration);

    /**
    * @param[in]  export_configuration_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void exportConfigurationsDelete(const QString &export_configuration_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  export_configuration_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void exportConfigurationsDisable(const QString &export_configuration_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  export_configuration_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void exportConfigurationsEnable(const QString &export_configuration_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  export_configuration_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void exportConfigurationsGet(const QString &export_configuration_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void exportConfigurationsList(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  export_configuration_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_export_configurations_list_200_response_values_inner_export_configuration OAIExportConfigurations_List_200_response_values_inner_export_configuration [required]
    */
    virtual void exportConfigurationsPartialUpdate(const QString &export_configuration_id, const QString &owner_name, const QString &app_name, const OAIExportConfigurations_List_200_response_values_inner_export_configuration &oai_export_configurations_list_200_response_values_inner_export_configuration);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void exportConfigurationsCreateCallback(OAIHttpRequestWorker *worker);
    void exportConfigurationsDeleteCallback(OAIHttpRequestWorker *worker);
    void exportConfigurationsDisableCallback(OAIHttpRequestWorker *worker);
    void exportConfigurationsEnableCallback(OAIHttpRequestWorker *worker);
    void exportConfigurationsGetCallback(OAIHttpRequestWorker *worker);
    void exportConfigurationsListCallback(OAIHttpRequestWorker *worker);
    void exportConfigurationsPartialUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void exportConfigurationsCreateSignal(OAIExportConfigurations_List_200_response_values_inner summary);
    void exportConfigurationsDeleteSignal();
    void exportConfigurationsDisableSignal();
    void exportConfigurationsEnableSignal();
    void exportConfigurationsGetSignal(OAIExportConfigurations_List_200_response_values_inner summary);
    void exportConfigurationsListSignal(OAIExportConfigurations_List_200_response summary);
    void exportConfigurationsPartialUpdateSignal(OAIExportConfigurations_List_200_response_values_inner summary);


    void exportConfigurationsCreateSignalFull(OAIHttpRequestWorker *worker, OAIExportConfigurations_List_200_response_values_inner summary);
    void exportConfigurationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void exportConfigurationsDisableSignalFull(OAIHttpRequestWorker *worker);
    void exportConfigurationsEnableSignalFull(OAIHttpRequestWorker *worker);
    void exportConfigurationsGetSignalFull(OAIHttpRequestWorker *worker, OAIExportConfigurations_List_200_response_values_inner summary);
    void exportConfigurationsListSignalFull(OAIHttpRequestWorker *worker, OAIExportConfigurations_List_200_response summary);
    void exportConfigurationsPartialUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExportConfigurations_List_200_response_values_inner summary);

    Q_DECL_DEPRECATED_X("Use exportConfigurationsCreateSignalError() instead")
    void exportConfigurationsCreateSignalE(OAIExportConfigurations_List_200_response_values_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsCreateSignalError(OAIExportConfigurations_List_200_response_values_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsDeleteSignalError() instead")
    void exportConfigurationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsDisableSignalError() instead")
    void exportConfigurationsDisableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsDisableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsEnableSignalError() instead")
    void exportConfigurationsEnableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsEnableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsGetSignalError() instead")
    void exportConfigurationsGetSignalE(OAIExportConfigurations_List_200_response_values_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsGetSignalError(OAIExportConfigurations_List_200_response_values_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsListSignalError() instead")
    void exportConfigurationsListSignalE(OAIExportConfigurations_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsListSignalError(OAIExportConfigurations_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsPartialUpdateSignalError() instead")
    void exportConfigurationsPartialUpdateSignalE(OAIExportConfigurations_List_200_response_values_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsPartialUpdateSignalError(OAIExportConfigurations_List_200_response_values_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use exportConfigurationsCreateSignalErrorFull() instead")
    void exportConfigurationsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsDeleteSignalErrorFull() instead")
    void exportConfigurationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsDisableSignalErrorFull() instead")
    void exportConfigurationsDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsEnableSignalErrorFull() instead")
    void exportConfigurationsEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsGetSignalErrorFull() instead")
    void exportConfigurationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsListSignalErrorFull() instead")
    void exportConfigurationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportConfigurationsPartialUpdateSignalErrorFull() instead")
    void exportConfigurationsPartialUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportConfigurationsPartialUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
