/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDistributeApi_H
#define OAI_OAIDistributeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppleMapping_TestFlightGroups_200_response_inner.h"
#include "OAIAppleMapping_create_request.h"
#include "OAIAppleMapping_get_200_response.h"
#include "OAIDevices_getReleaseUpdateDevicesStatus_200_response.h"
#include "OAIDevices_list_200_response_inner.h"
#include "OAIDevices_registerUserForDevice_request.h"
#include "OAIDistibutionReleases_installAnalytics_request.h"
#include "OAIOrganizations_listAdministered_default_response_error.h"
#include "OAIProvisioningProfileResponse.h"
#include "OAIReleases_addDistributionGroup_201_response.h"
#include "OAIReleases_addDistributionGroup_request.h"
#include "OAIReleases_addStore_201_response.h"
#include "OAIReleases_addStore_request.h"
#include "OAIReleases_addTesters_request.h"
#include "OAIReleases_createReleaseUpload_201_response.h"
#include "OAIReleases_createReleaseUpload_request.h"
#include "OAIReleases_getLatestByDistributionGroup_200_response.h"
#include "OAIReleases_getPublicGroupsForReleaseByHash_200_response_inner.h"
#include "OAIReleases_getReleaseUploadStatus_200_response.h"
#include "OAIReleases_listByDistributionGroup_200_response_inner.h"
#include "OAIReleases_listLatest_200_response_inner.h"
#include "OAIReleases_putDistributionGroup_request.h"
#include "OAIReleases_updateDetails_200_response.h"
#include "OAIReleases_updateDetails_400_response.h"
#include "OAIReleases_updateDetails_request.h"
#include "OAIReleases_updateReleaseUploadStatus_200_response.h"
#include "OAIReleases_updateReleaseUploadStatus_request.h"
#include "OAIReleases_update_200_response.h"
#include "OAIReleases_update_request.h"
#include "OAIStoreNotifications_getNotificationByAppId_200_response.h"
#include "OAIStoreReleases_getLatest_200_response_inner.h"
#include "OAIStoreReleases_getPublishError_200_response.h"
#include "OAIStoreReleases_getRealTimeStatusByReleaseId_200_response.h"
#include "OAIStoreReleases_list_200_response_inner.h"
#include "OAIStores_create_request.h"
#include "OAIStores_list_200_response_inner.h"
#include "OAIStores_patch_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDistributeApi : public QObject {
    Q_OBJECT

public:
    OAIDistributeApi(const int timeOut = 0);
    ~OAIDistributeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_apple_mapping_create_request OAIAppleMapping_create_request [required]
    */
    virtual void appleMappingCreate(const QString &owner_name, const QString &app_name, const OAIAppleMapping_create_request &oai_apple_mapping_create_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void appleMappingDelete(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void appleMappingGet(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void appleMappingTestFlightGroups(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  device_udid QString [required]
    */
    virtual void devicesDeviceDetails(const QString &device_udid);

    /**
    * @param[in]  release_id QString [required]
    * @param[in]  resign_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  include_provisioning_profile bool [optional]
    */
    virtual void devicesGetReleaseUpdateDevicesStatus(const QString &release_id, const QString &resign_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &include_provisioning_profile = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  release_id double [optional]
    */
    virtual void devicesList(const QString &distribution_group_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<double> &release_id = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  unprovisioned_only bool [optional]
    * @param[in]  udids QList<QString> [optional]
    */
    virtual void devicesListCsvFormat(const QString &distribution_group_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &unprovisioned_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &udids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_devices_register_user_for_device_request OAIDevices_registerUserForDevice_request [required]
    */
    virtual void devicesRegisterUserForDevice(const QString &user_id, const OAIDevices_registerUserForDevice_request &oai_devices_register_user_for_device_request);

    /**
    * @param[in]  device_udid QString [required]
    */
    virtual void devicesRemoveUserDevice(const QString &device_udid);


    virtual void devicesUserDevicesList();

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_distibution_releases_install_analytics_request OAIDistibutionReleases_installAnalytics_request [required]
    */
    virtual void distibutionReleasesInstallAnalytics(const QString &owner_name, const QString &app_name, const OAIDistibutionReleases_installAnalytics_request &oai_distibution_releases_install_analytics_request);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void provisioningProfile(const qint32 &release_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_add_distribution_group_request OAIReleases_addDistributionGroup_request [required]
    */
    virtual void releasesAddDistributionGroup(const qint32 &release_id, const QString &owner_name, const QString &app_name, const OAIReleases_addDistributionGroup_request &oai_releases_add_distribution_group_request);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_add_store_request OAIReleases_addStore_request [required]
    */
    virtual void releasesAddStore(const qint32 &release_id, const QString &owner_name, const QString &app_name, const OAIReleases_addStore_request &oai_releases_add_store_request);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_add_testers_request OAIReleases_addTesters_request [required]
    */
    virtual void releasesAddTesters(const qint32 &release_id, const QString &owner_name, const QString &app_name, const OAIReleases_addTesters_request &oai_releases_add_testers_request);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  published_only bool [optional]
    */
    Q_DECL_DEPRECATED virtual void releasesAvailableToTester(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &published_only = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_create_release_upload_request OAIReleases_createReleaseUpload_request [optional]
    */
    virtual void releasesCreateReleaseUpload(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIReleases_createReleaseUpload_request> &oai_releases_create_release_upload_request = ::OpenAPI::OptionalParam<OAIReleases_createReleaseUpload_request>());

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesDelete(const qint32 &release_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesDeleteDistributionGroup(const qint32 &release_id, const QString &group_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  store_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesDeleteDistributionStore(const qint32 &release_id, const QString &store_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  tester_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesDeleteDistributionTester(const qint32 &release_id, const QString &tester_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  tester_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesDeleteTesterFromDestinations(const QString &tester_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  release_id qint32 [required]
    */
    virtual void releasesDeleteWithDistributionGroupId(const QString &owner_name, const QString &app_name, const QString &distribution_group_name, const qint32 &release_id);

    /**
    * @param[in]  app_id QString [required]
    * @param[in]  release_id qint32 [required]
    * @param[in]  token QString [required]
    */
    virtual void releasesGetIosManifest(const QString &app_id, const qint32 &release_id, const QString &token);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  release_id QString [required]
    * @param[in]  is_install_page bool [optional]
    */
    virtual void releasesGetLatestByDistributionGroup(const QString &owner_name, const QString &app_name, const QString &distribution_group_name, const QString &release_id, const ::OpenAPI::OptionalParam<bool> &is_install_page = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_secret QString [required]
    * @param[in]  release_hash QString [required]
    * @param[in]  udid QString [optional]
    */
    virtual void releasesGetLatestByHash(const QString &app_secret, const QString &release_hash, const ::OpenAPI::OptionalParam<QString> &udid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_secret QString [required]
    * @param[in]  distribution_group_id QString [required]
    * @param[in]  is_install_page bool [optional]
    */
    virtual void releasesGetLatestByPublicDistributionGroup(const QString &app_secret, const QString &distribution_group_id, const ::OpenAPI::OptionalParam<bool> &is_install_page = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  release_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  udid QString [optional]
    * @param[in]  is_install_page bool [optional]
    */
    virtual void releasesGetLatestByUser(const QString &release_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &udid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_install_page = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  app_secret QString [required]
    * @param[in]  udid QString [optional]
    */
    virtual void releasesGetLatestPrivateRelease(const QString &app_secret, const ::OpenAPI::OptionalParam<QString> &udid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_secret QString [required]
    */
    Q_DECL_DEPRECATED virtual void releasesGetLatestPublicRelease(const QString &app_secret);

    /**
    * @param[in]  app_secret QString [required]
    * @param[in]  release_hash QString [required]
    */
    virtual void releasesGetPublicGroupsForReleaseByHash(const QString &app_secret, const QString &release_hash);

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesGetReleaseUploadStatus(const QString &upload_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  app_secret QString [required]
    */
    virtual void releasesGetSparkleFeed(const QString &app_secret);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  published_only bool [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  top double [optional]
    * @param[in]  release_id double [optional]
    */
    virtual void releasesList(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &published_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &top = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &release_id = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  distribution_group_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesListByDistributionGroup(const QString &distribution_group_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void releasesListLatest(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  group_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_put_distribution_group_request OAIReleases_putDistributionGroup_request [optional]
    */
    virtual void releasesPutDistributionGroup(const qint32 &release_id, const QString &group_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIReleases_putDistributionGroup_request> &oai_releases_put_distribution_group_request = ::OpenAPI::OptionalParam<OAIReleases_putDistributionGroup_request>());

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  tester_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_put_distribution_group_request OAIReleases_putDistributionGroup_request [optional]
    */
    virtual void releasesPutDistributionTester(const qint32 &release_id, const QString &tester_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<OAIReleases_putDistributionGroup_request> &oai_releases_put_distribution_group_request = ::OpenAPI::OptionalParam<OAIReleases_putDistributionGroup_request>());

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_update_request OAIReleases_update_request [required]
    */
    virtual void releasesUpdate(const qint32 &release_id, const QString &owner_name, const QString &app_name, const OAIReleases_update_request &oai_releases_update_request);

    /**
    * @param[in]  release_id qint32 [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_update_details_request OAIReleases_updateDetails_request [required]
    */
    virtual void releasesUpdateDetails(const qint32 &release_id, const QString &owner_name, const QString &app_name, const OAIReleases_updateDetails_request &oai_releases_update_details_request);

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_releases_update_release_upload_status_request OAIReleases_updateReleaseUploadStatus_request [required]
    * @param[in]  extract bool [optional]
    */
    virtual void releasesUpdateReleaseUploadStatus(const QString &upload_id, const QString &owner_name, const QString &app_name, const OAIReleases_updateReleaseUploadStatus_request &oai_releases_update_release_upload_status_request, const ::OpenAPI::OptionalParam<bool> &extract = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storeNotificationsGetNotificationByAppId(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  release_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storeReleasePublishLogsGet(const QString &store_name, const QString &release_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  release_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void storeReleasesDelete(const QString &store_name, const QString &release_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  release_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storeReleasesGet(const QString &store_name, const QString &release_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storeReleasesGetLatest(const QString &store_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  release_id double [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storeReleasesGetPublishError(const QString &store_name, const double &release_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  release_id double [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storeReleasesGetRealTimeStatusByReleaseId(const QString &store_name, const double &release_id, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storeReleasesList(const QString &store_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_stores_create_request OAIStores_create_request [required]
    */
    virtual void storesCreate(const QString &owner_name, const QString &app_name, const OAIStores_create_request &oai_stores_create_request);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  body QString [optional]
    */
    virtual void storesDelete(const QString &store_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storesGet(const QString &store_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void storesList(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  store_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_stores_patch_request OAIStores_patch_request [required]
    */
    virtual void storesPatch(const QString &store_name, const QString &owner_name, const QString &app_name, const OAIStores_patch_request &oai_stores_patch_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appleMappingCreateCallback(OAIHttpRequestWorker *worker);
    void appleMappingDeleteCallback(OAIHttpRequestWorker *worker);
    void appleMappingGetCallback(OAIHttpRequestWorker *worker);
    void appleMappingTestFlightGroupsCallback(OAIHttpRequestWorker *worker);
    void devicesDeviceDetailsCallback(OAIHttpRequestWorker *worker);
    void devicesGetReleaseUpdateDevicesStatusCallback(OAIHttpRequestWorker *worker);
    void devicesListCallback(OAIHttpRequestWorker *worker);
    void devicesListCsvFormatCallback(OAIHttpRequestWorker *worker);
    void devicesRegisterUserForDeviceCallback(OAIHttpRequestWorker *worker);
    void devicesRemoveUserDeviceCallback(OAIHttpRequestWorker *worker);
    void devicesUserDevicesListCallback(OAIHttpRequestWorker *worker);
    void distibutionReleasesInstallAnalyticsCallback(OAIHttpRequestWorker *worker);
    void provisioningProfileCallback(OAIHttpRequestWorker *worker);
    void releasesAddDistributionGroupCallback(OAIHttpRequestWorker *worker);
    void releasesAddStoreCallback(OAIHttpRequestWorker *worker);
    void releasesAddTestersCallback(OAIHttpRequestWorker *worker);
    void releasesAvailableToTesterCallback(OAIHttpRequestWorker *worker);
    void releasesCreateReleaseUploadCallback(OAIHttpRequestWorker *worker);
    void releasesDeleteCallback(OAIHttpRequestWorker *worker);
    void releasesDeleteDistributionGroupCallback(OAIHttpRequestWorker *worker);
    void releasesDeleteDistributionStoreCallback(OAIHttpRequestWorker *worker);
    void releasesDeleteDistributionTesterCallback(OAIHttpRequestWorker *worker);
    void releasesDeleteTesterFromDestinationsCallback(OAIHttpRequestWorker *worker);
    void releasesDeleteWithDistributionGroupIdCallback(OAIHttpRequestWorker *worker);
    void releasesGetIosManifestCallback(OAIHttpRequestWorker *worker);
    void releasesGetLatestByDistributionGroupCallback(OAIHttpRequestWorker *worker);
    void releasesGetLatestByHashCallback(OAIHttpRequestWorker *worker);
    void releasesGetLatestByPublicDistributionGroupCallback(OAIHttpRequestWorker *worker);
    void releasesGetLatestByUserCallback(OAIHttpRequestWorker *worker);
    void releasesGetLatestPrivateReleaseCallback(OAIHttpRequestWorker *worker);
    void releasesGetLatestPublicReleaseCallback(OAIHttpRequestWorker *worker);
    void releasesGetPublicGroupsForReleaseByHashCallback(OAIHttpRequestWorker *worker);
    void releasesGetReleaseUploadStatusCallback(OAIHttpRequestWorker *worker);
    void releasesGetSparkleFeedCallback(OAIHttpRequestWorker *worker);
    void releasesListCallback(OAIHttpRequestWorker *worker);
    void releasesListByDistributionGroupCallback(OAIHttpRequestWorker *worker);
    void releasesListLatestCallback(OAIHttpRequestWorker *worker);
    void releasesPutDistributionGroupCallback(OAIHttpRequestWorker *worker);
    void releasesPutDistributionTesterCallback(OAIHttpRequestWorker *worker);
    void releasesUpdateCallback(OAIHttpRequestWorker *worker);
    void releasesUpdateDetailsCallback(OAIHttpRequestWorker *worker);
    void releasesUpdateReleaseUploadStatusCallback(OAIHttpRequestWorker *worker);
    void storeNotificationsGetNotificationByAppIdCallback(OAIHttpRequestWorker *worker);
    void storeReleasePublishLogsGetCallback(OAIHttpRequestWorker *worker);
    void storeReleasesDeleteCallback(OAIHttpRequestWorker *worker);
    void storeReleasesGetCallback(OAIHttpRequestWorker *worker);
    void storeReleasesGetLatestCallback(OAIHttpRequestWorker *worker);
    void storeReleasesGetPublishErrorCallback(OAIHttpRequestWorker *worker);
    void storeReleasesGetRealTimeStatusByReleaseIdCallback(OAIHttpRequestWorker *worker);
    void storeReleasesListCallback(OAIHttpRequestWorker *worker);
    void storesCreateCallback(OAIHttpRequestWorker *worker);
    void storesDeleteCallback(OAIHttpRequestWorker *worker);
    void storesGetCallback(OAIHttpRequestWorker *worker);
    void storesListCallback(OAIHttpRequestWorker *worker);
    void storesPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appleMappingCreateSignal(OAIAppleMapping_get_200_response summary);
    void appleMappingDeleteSignal();
    void appleMappingGetSignal(OAIAppleMapping_get_200_response summary);
    void appleMappingTestFlightGroupsSignal(QList<OAIAppleMapping_TestFlightGroups_200_response_inner> summary);
    void devicesDeviceDetailsSignal(OAIDevices_list_200_response_inner summary);
    void devicesGetReleaseUpdateDevicesStatusSignal(OAIDevices_getReleaseUpdateDevicesStatus_200_response summary);
    void devicesListSignal(QList<OAIDevices_list_200_response_inner> summary);
    void devicesListCsvFormatSignal();
    void devicesRegisterUserForDeviceSignal(OAIDevices_list_200_response_inner summary);
    void devicesRemoveUserDeviceSignal();
    void devicesUserDevicesListSignal(QList<OAIDevices_list_200_response_inner> summary);
    void distibutionReleasesInstallAnalyticsSignal();
    void provisioningProfileSignal(OAIProvisioningProfileResponse summary);
    void releasesAddDistributionGroupSignal(OAIReleases_addDistributionGroup_201_response summary);
    void releasesAddStoreSignal(OAIReleases_addStore_201_response summary);
    void releasesAddTestersSignal(OAIReleases_addDistributionGroup_201_response summary);
    void releasesAvailableToTesterSignal(QList<OAIReleases_listLatest_200_response_inner> summary);
    void releasesCreateReleaseUploadSignal(OAIReleases_createReleaseUpload_201_response summary);
    void releasesDeleteSignal();
    void releasesDeleteDistributionGroupSignal();
    void releasesDeleteDistributionStoreSignal();
    void releasesDeleteDistributionTesterSignal();
    void releasesDeleteTesterFromDestinationsSignal();
    void releasesDeleteWithDistributionGroupIdSignal();
    void releasesGetIosManifestSignal();
    void releasesGetLatestByDistributionGroupSignal(OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestByHashSignal(OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestByPublicDistributionGroupSignal(OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestByUserSignal(OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestPrivateReleaseSignal(OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestPublicReleaseSignal(OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetPublicGroupsForReleaseByHashSignal(QList<OAIReleases_getPublicGroupsForReleaseByHash_200_response_inner> summary);
    void releasesGetReleaseUploadStatusSignal(OAIReleases_getReleaseUploadStatus_200_response summary);
    void releasesGetSparkleFeedSignal();
    void releasesListSignal(QList<OAIReleases_listLatest_200_response_inner> summary);
    void releasesListByDistributionGroupSignal(QList<OAIReleases_listByDistributionGroup_200_response_inner> summary);
    void releasesListLatestSignal(QList<OAIReleases_listLatest_200_response_inner> summary);
    void releasesPutDistributionGroupSignal();
    void releasesPutDistributionTesterSignal();
    void releasesUpdateSignal(OAIReleases_update_200_response summary);
    void releasesUpdateDetailsSignal(OAIReleases_updateDetails_200_response summary);
    void releasesUpdateReleaseUploadStatusSignal(OAIReleases_updateReleaseUploadStatus_200_response summary);
    void storeNotificationsGetNotificationByAppIdSignal(OAIStoreNotifications_getNotificationByAppId_200_response summary);
    void storeReleasePublishLogsGetSignal();
    void storeReleasesDeleteSignal();
    void storeReleasesGetSignal(QList<OAIStoreReleases_getLatest_200_response_inner> summary);
    void storeReleasesGetLatestSignal(QList<OAIStoreReleases_getLatest_200_response_inner> summary);
    void storeReleasesGetPublishErrorSignal(OAIStoreReleases_getPublishError_200_response summary);
    void storeReleasesGetRealTimeStatusByReleaseIdSignal(OAIStoreReleases_getRealTimeStatusByReleaseId_200_response summary);
    void storeReleasesListSignal(QList<OAIStoreReleases_list_200_response_inner> summary);
    void storesCreateSignal(OAIStores_list_200_response_inner summary);
    void storesDeleteSignal();
    void storesGetSignal(OAIStores_list_200_response_inner summary);
    void storesListSignal(QList<OAIStores_list_200_response_inner> summary);
    void storesPatchSignal();


    void appleMappingCreateSignalFull(OAIHttpRequestWorker *worker, OAIAppleMapping_get_200_response summary);
    void appleMappingDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appleMappingGetSignalFull(OAIHttpRequestWorker *worker, OAIAppleMapping_get_200_response summary);
    void appleMappingTestFlightGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAppleMapping_TestFlightGroups_200_response_inner> summary);
    void devicesDeviceDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDevices_list_200_response_inner summary);
    void devicesGetReleaseUpdateDevicesStatusSignalFull(OAIHttpRequestWorker *worker, OAIDevices_getReleaseUpdateDevicesStatus_200_response summary);
    void devicesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDevices_list_200_response_inner> summary);
    void devicesListCsvFormatSignalFull(OAIHttpRequestWorker *worker);
    void devicesRegisterUserForDeviceSignalFull(OAIHttpRequestWorker *worker, OAIDevices_list_200_response_inner summary);
    void devicesRemoveUserDeviceSignalFull(OAIHttpRequestWorker *worker);
    void devicesUserDevicesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDevices_list_200_response_inner> summary);
    void distibutionReleasesInstallAnalyticsSignalFull(OAIHttpRequestWorker *worker);
    void provisioningProfileSignalFull(OAIHttpRequestWorker *worker, OAIProvisioningProfileResponse summary);
    void releasesAddDistributionGroupSignalFull(OAIHttpRequestWorker *worker, OAIReleases_addDistributionGroup_201_response summary);
    void releasesAddStoreSignalFull(OAIHttpRequestWorker *worker, OAIReleases_addStore_201_response summary);
    void releasesAddTestersSignalFull(OAIHttpRequestWorker *worker, OAIReleases_addDistributionGroup_201_response summary);
    void releasesAvailableToTesterSignalFull(OAIHttpRequestWorker *worker, QList<OAIReleases_listLatest_200_response_inner> summary);
    void releasesCreateReleaseUploadSignalFull(OAIHttpRequestWorker *worker, OAIReleases_createReleaseUpload_201_response summary);
    void releasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void releasesDeleteDistributionGroupSignalFull(OAIHttpRequestWorker *worker);
    void releasesDeleteDistributionStoreSignalFull(OAIHttpRequestWorker *worker);
    void releasesDeleteDistributionTesterSignalFull(OAIHttpRequestWorker *worker);
    void releasesDeleteTesterFromDestinationsSignalFull(OAIHttpRequestWorker *worker);
    void releasesDeleteWithDistributionGroupIdSignalFull(OAIHttpRequestWorker *worker);
    void releasesGetIosManifestSignalFull(OAIHttpRequestWorker *worker);
    void releasesGetLatestByDistributionGroupSignalFull(OAIHttpRequestWorker *worker, OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestByHashSignalFull(OAIHttpRequestWorker *worker, OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestByPublicDistributionGroupSignalFull(OAIHttpRequestWorker *worker, OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestByUserSignalFull(OAIHttpRequestWorker *worker, OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestPrivateReleaseSignalFull(OAIHttpRequestWorker *worker, OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetLatestPublicReleaseSignalFull(OAIHttpRequestWorker *worker, OAIReleases_getLatestByDistributionGroup_200_response summary);
    void releasesGetPublicGroupsForReleaseByHashSignalFull(OAIHttpRequestWorker *worker, QList<OAIReleases_getPublicGroupsForReleaseByHash_200_response_inner> summary);
    void releasesGetReleaseUploadStatusSignalFull(OAIHttpRequestWorker *worker, OAIReleases_getReleaseUploadStatus_200_response summary);
    void releasesGetSparkleFeedSignalFull(OAIHttpRequestWorker *worker);
    void releasesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIReleases_listLatest_200_response_inner> summary);
    void releasesListByDistributionGroupSignalFull(OAIHttpRequestWorker *worker, QList<OAIReleases_listByDistributionGroup_200_response_inner> summary);
    void releasesListLatestSignalFull(OAIHttpRequestWorker *worker, QList<OAIReleases_listLatest_200_response_inner> summary);
    void releasesPutDistributionGroupSignalFull(OAIHttpRequestWorker *worker);
    void releasesPutDistributionTesterSignalFull(OAIHttpRequestWorker *worker);
    void releasesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIReleases_update_200_response summary);
    void releasesUpdateDetailsSignalFull(OAIHttpRequestWorker *worker, OAIReleases_updateDetails_200_response summary);
    void releasesUpdateReleaseUploadStatusSignalFull(OAIHttpRequestWorker *worker, OAIReleases_updateReleaseUploadStatus_200_response summary);
    void storeNotificationsGetNotificationByAppIdSignalFull(OAIHttpRequestWorker *worker, OAIStoreNotifications_getNotificationByAppId_200_response summary);
    void storeReleasePublishLogsGetSignalFull(OAIHttpRequestWorker *worker);
    void storeReleasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void storeReleasesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStoreReleases_getLatest_200_response_inner> summary);
    void storeReleasesGetLatestSignalFull(OAIHttpRequestWorker *worker, QList<OAIStoreReleases_getLatest_200_response_inner> summary);
    void storeReleasesGetPublishErrorSignalFull(OAIHttpRequestWorker *worker, OAIStoreReleases_getPublishError_200_response summary);
    void storeReleasesGetRealTimeStatusByReleaseIdSignalFull(OAIHttpRequestWorker *worker, OAIStoreReleases_getRealTimeStatusByReleaseId_200_response summary);
    void storeReleasesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIStoreReleases_list_200_response_inner> summary);
    void storesCreateSignalFull(OAIHttpRequestWorker *worker, OAIStores_list_200_response_inner summary);
    void storesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void storesGetSignalFull(OAIHttpRequestWorker *worker, OAIStores_list_200_response_inner summary);
    void storesListSignalFull(OAIHttpRequestWorker *worker, QList<OAIStores_list_200_response_inner> summary);
    void storesPatchSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use appleMappingCreateSignalError() instead")
    void appleMappingCreateSignalE(OAIAppleMapping_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingCreateSignalError(OAIAppleMapping_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appleMappingDeleteSignalError() instead")
    void appleMappingDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appleMappingGetSignalError() instead")
    void appleMappingGetSignalE(OAIAppleMapping_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingGetSignalError(OAIAppleMapping_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appleMappingTestFlightGroupsSignalError() instead")
    void appleMappingTestFlightGroupsSignalE(QList<OAIAppleMapping_TestFlightGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingTestFlightGroupsSignalError(QList<OAIAppleMapping_TestFlightGroups_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeviceDetailsSignalError() instead")
    void devicesDeviceDetailsSignalE(OAIDevices_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeviceDetailsSignalError(OAIDevices_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetReleaseUpdateDevicesStatusSignalError() instead")
    void devicesGetReleaseUpdateDevicesStatusSignalE(OAIDevices_getReleaseUpdateDevicesStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetReleaseUpdateDevicesStatusSignalError(OAIDevices_getReleaseUpdateDevicesStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListSignalError() instead")
    void devicesListSignalE(QList<OAIDevices_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListSignalError(QList<OAIDevices_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListCsvFormatSignalError() instead")
    void devicesListCsvFormatSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListCsvFormatSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesRegisterUserForDeviceSignalError() instead")
    void devicesRegisterUserForDeviceSignalE(OAIDevices_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesRegisterUserForDeviceSignalError(OAIDevices_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesRemoveUserDeviceSignalError() instead")
    void devicesRemoveUserDeviceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesRemoveUserDeviceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUserDevicesListSignalError() instead")
    void devicesUserDevicesListSignalE(QList<OAIDevices_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUserDevicesListSignalError(QList<OAIDevices_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distibutionReleasesInstallAnalyticsSignalError() instead")
    void distibutionReleasesInstallAnalyticsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void distibutionReleasesInstallAnalyticsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisioningProfileSignalError() instead")
    void provisioningProfileSignalE(OAIProvisioningProfileResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void provisioningProfileSignalError(OAIProvisioningProfileResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAddDistributionGroupSignalError() instead")
    void releasesAddDistributionGroupSignalE(OAIReleases_addDistributionGroup_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAddDistributionGroupSignalError(OAIReleases_addDistributionGroup_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAddStoreSignalError() instead")
    void releasesAddStoreSignalE(OAIReleases_addStore_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAddStoreSignalError(OAIReleases_addStore_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAddTestersSignalError() instead")
    void releasesAddTestersSignalE(OAIReleases_addDistributionGroup_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAddTestersSignalError(OAIReleases_addDistributionGroup_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAvailableToTesterSignalError() instead")
    void releasesAvailableToTesterSignalE(QList<OAIReleases_listLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAvailableToTesterSignalError(QList<OAIReleases_listLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesCreateReleaseUploadSignalError() instead")
    void releasesCreateReleaseUploadSignalE(OAIReleases_createReleaseUpload_201_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesCreateReleaseUploadSignalError(OAIReleases_createReleaseUpload_201_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteSignalError() instead")
    void releasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteDistributionGroupSignalError() instead")
    void releasesDeleteDistributionGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteDistributionGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteDistributionStoreSignalError() instead")
    void releasesDeleteDistributionStoreSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteDistributionStoreSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteDistributionTesterSignalError() instead")
    void releasesDeleteDistributionTesterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteDistributionTesterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteTesterFromDestinationsSignalError() instead")
    void releasesDeleteTesterFromDestinationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteTesterFromDestinationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteWithDistributionGroupIdSignalError() instead")
    void releasesDeleteWithDistributionGroupIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteWithDistributionGroupIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetIosManifestSignalError() instead")
    void releasesGetIosManifestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetIosManifestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByDistributionGroupSignalError() instead")
    void releasesGetLatestByDistributionGroupSignalE(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByDistributionGroupSignalError(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByHashSignalError() instead")
    void releasesGetLatestByHashSignalE(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByHashSignalError(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByPublicDistributionGroupSignalError() instead")
    void releasesGetLatestByPublicDistributionGroupSignalE(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByPublicDistributionGroupSignalError(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByUserSignalError() instead")
    void releasesGetLatestByUserSignalE(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByUserSignalError(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestPrivateReleaseSignalError() instead")
    void releasesGetLatestPrivateReleaseSignalE(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestPrivateReleaseSignalError(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestPublicReleaseSignalError() instead")
    void releasesGetLatestPublicReleaseSignalE(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestPublicReleaseSignalError(OAIReleases_getLatestByDistributionGroup_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetPublicGroupsForReleaseByHashSignalError() instead")
    void releasesGetPublicGroupsForReleaseByHashSignalE(QList<OAIReleases_getPublicGroupsForReleaseByHash_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetPublicGroupsForReleaseByHashSignalError(QList<OAIReleases_getPublicGroupsForReleaseByHash_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetReleaseUploadStatusSignalError() instead")
    void releasesGetReleaseUploadStatusSignalE(OAIReleases_getReleaseUploadStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetReleaseUploadStatusSignalError(OAIReleases_getReleaseUploadStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetSparkleFeedSignalError() instead")
    void releasesGetSparkleFeedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetSparkleFeedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesListSignalError() instead")
    void releasesListSignalE(QList<OAIReleases_listLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesListSignalError(QList<OAIReleases_listLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesListByDistributionGroupSignalError() instead")
    void releasesListByDistributionGroupSignalE(QList<OAIReleases_listByDistributionGroup_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesListByDistributionGroupSignalError(QList<OAIReleases_listByDistributionGroup_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesListLatestSignalError() instead")
    void releasesListLatestSignalE(QList<OAIReleases_listLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesListLatestSignalError(QList<OAIReleases_listLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesPutDistributionGroupSignalError() instead")
    void releasesPutDistributionGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesPutDistributionGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesPutDistributionTesterSignalError() instead")
    void releasesPutDistributionTesterSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void releasesPutDistributionTesterSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesUpdateSignalError() instead")
    void releasesUpdateSignalE(OAIReleases_update_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesUpdateSignalError(OAIReleases_update_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesUpdateDetailsSignalError() instead")
    void releasesUpdateDetailsSignalE(OAIReleases_updateDetails_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesUpdateDetailsSignalError(OAIReleases_updateDetails_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesUpdateReleaseUploadStatusSignalError() instead")
    void releasesUpdateReleaseUploadStatusSignalE(OAIReleases_updateReleaseUploadStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesUpdateReleaseUploadStatusSignalError(OAIReleases_updateReleaseUploadStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeNotificationsGetNotificationByAppIdSignalError() instead")
    void storeNotificationsGetNotificationByAppIdSignalE(OAIStoreNotifications_getNotificationByAppId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeNotificationsGetNotificationByAppIdSignalError(OAIStoreNotifications_getNotificationByAppId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasePublishLogsGetSignalError() instead")
    void storeReleasePublishLogsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasePublishLogsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesDeleteSignalError() instead")
    void storeReleasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetSignalError() instead")
    void storeReleasesGetSignalE(QList<OAIStoreReleases_getLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetSignalError(QList<OAIStoreReleases_getLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetLatestSignalError() instead")
    void storeReleasesGetLatestSignalE(QList<OAIStoreReleases_getLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetLatestSignalError(QList<OAIStoreReleases_getLatest_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetPublishErrorSignalError() instead")
    void storeReleasesGetPublishErrorSignalE(OAIStoreReleases_getPublishError_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetPublishErrorSignalError(OAIStoreReleases_getPublishError_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetRealTimeStatusByReleaseIdSignalError() instead")
    void storeReleasesGetRealTimeStatusByReleaseIdSignalE(OAIStoreReleases_getRealTimeStatusByReleaseId_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetRealTimeStatusByReleaseIdSignalError(OAIStoreReleases_getRealTimeStatusByReleaseId_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesListSignalError() instead")
    void storeReleasesListSignalE(QList<OAIStoreReleases_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesListSignalError(QList<OAIStoreReleases_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesCreateSignalError() instead")
    void storesCreateSignalE(OAIStores_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storesCreateSignalError(OAIStores_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesDeleteSignalError() instead")
    void storesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesGetSignalError() instead")
    void storesGetSignalE(OAIStores_list_200_response_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storesGetSignalError(OAIStores_list_200_response_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesListSignalError() instead")
    void storesListSignalE(QList<OAIStores_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storesListSignalError(QList<OAIStores_list_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesPatchSignalError() instead")
    void storesPatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storesPatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appleMappingCreateSignalErrorFull() instead")
    void appleMappingCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appleMappingDeleteSignalErrorFull() instead")
    void appleMappingDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appleMappingGetSignalErrorFull() instead")
    void appleMappingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appleMappingTestFlightGroupsSignalErrorFull() instead")
    void appleMappingTestFlightGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appleMappingTestFlightGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeviceDetailsSignalErrorFull() instead")
    void devicesDeviceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeviceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetReleaseUpdateDevicesStatusSignalErrorFull() instead")
    void devicesGetReleaseUpdateDevicesStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetReleaseUpdateDevicesStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListSignalErrorFull() instead")
    void devicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListCsvFormatSignalErrorFull() instead")
    void devicesListCsvFormatSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListCsvFormatSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesRegisterUserForDeviceSignalErrorFull() instead")
    void devicesRegisterUserForDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesRegisterUserForDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesRemoveUserDeviceSignalErrorFull() instead")
    void devicesRemoveUserDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesRemoveUserDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUserDevicesListSignalErrorFull() instead")
    void devicesUserDevicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUserDevicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distibutionReleasesInstallAnalyticsSignalErrorFull() instead")
    void distibutionReleasesInstallAnalyticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distibutionReleasesInstallAnalyticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provisioningProfileSignalErrorFull() instead")
    void provisioningProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provisioningProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAddDistributionGroupSignalErrorFull() instead")
    void releasesAddDistributionGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAddDistributionGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAddStoreSignalErrorFull() instead")
    void releasesAddStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAddStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAddTestersSignalErrorFull() instead")
    void releasesAddTestersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAddTestersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesAvailableToTesterSignalErrorFull() instead")
    void releasesAvailableToTesterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesAvailableToTesterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesCreateReleaseUploadSignalErrorFull() instead")
    void releasesCreateReleaseUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesCreateReleaseUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteSignalErrorFull() instead")
    void releasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteDistributionGroupSignalErrorFull() instead")
    void releasesDeleteDistributionGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteDistributionGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteDistributionStoreSignalErrorFull() instead")
    void releasesDeleteDistributionStoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteDistributionStoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteDistributionTesterSignalErrorFull() instead")
    void releasesDeleteDistributionTesterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteDistributionTesterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteTesterFromDestinationsSignalErrorFull() instead")
    void releasesDeleteTesterFromDestinationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteTesterFromDestinationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesDeleteWithDistributionGroupIdSignalErrorFull() instead")
    void releasesDeleteWithDistributionGroupIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesDeleteWithDistributionGroupIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetIosManifestSignalErrorFull() instead")
    void releasesGetIosManifestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetIosManifestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByDistributionGroupSignalErrorFull() instead")
    void releasesGetLatestByDistributionGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByDistributionGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByHashSignalErrorFull() instead")
    void releasesGetLatestByHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByPublicDistributionGroupSignalErrorFull() instead")
    void releasesGetLatestByPublicDistributionGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByPublicDistributionGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestByUserSignalErrorFull() instead")
    void releasesGetLatestByUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestByUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestPrivateReleaseSignalErrorFull() instead")
    void releasesGetLatestPrivateReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestPrivateReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetLatestPublicReleaseSignalErrorFull() instead")
    void releasesGetLatestPublicReleaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetLatestPublicReleaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetPublicGroupsForReleaseByHashSignalErrorFull() instead")
    void releasesGetPublicGroupsForReleaseByHashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetPublicGroupsForReleaseByHashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetReleaseUploadStatusSignalErrorFull() instead")
    void releasesGetReleaseUploadStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetReleaseUploadStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesGetSparkleFeedSignalErrorFull() instead")
    void releasesGetSparkleFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesGetSparkleFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesListSignalErrorFull() instead")
    void releasesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesListByDistributionGroupSignalErrorFull() instead")
    void releasesListByDistributionGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesListByDistributionGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesListLatestSignalErrorFull() instead")
    void releasesListLatestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesListLatestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesPutDistributionGroupSignalErrorFull() instead")
    void releasesPutDistributionGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesPutDistributionGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesPutDistributionTesterSignalErrorFull() instead")
    void releasesPutDistributionTesterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesPutDistributionTesterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesUpdateSignalErrorFull() instead")
    void releasesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesUpdateDetailsSignalErrorFull() instead")
    void releasesUpdateDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesUpdateDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use releasesUpdateReleaseUploadStatusSignalErrorFull() instead")
    void releasesUpdateReleaseUploadStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void releasesUpdateReleaseUploadStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeNotificationsGetNotificationByAppIdSignalErrorFull() instead")
    void storeNotificationsGetNotificationByAppIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeNotificationsGetNotificationByAppIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasePublishLogsGetSignalErrorFull() instead")
    void storeReleasePublishLogsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasePublishLogsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesDeleteSignalErrorFull() instead")
    void storeReleasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetSignalErrorFull() instead")
    void storeReleasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetLatestSignalErrorFull() instead")
    void storeReleasesGetLatestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetLatestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetPublishErrorSignalErrorFull() instead")
    void storeReleasesGetPublishErrorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetPublishErrorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesGetRealTimeStatusByReleaseIdSignalErrorFull() instead")
    void storeReleasesGetRealTimeStatusByReleaseIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesGetRealTimeStatusByReleaseIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storeReleasesListSignalErrorFull() instead")
    void storeReleasesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storeReleasesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesCreateSignalErrorFull() instead")
    void storesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesDeleteSignalErrorFull() instead")
    void storesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesGetSignalErrorFull() instead")
    void storesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesListSignalErrorFull() instead")
    void storesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storesPatchSignalErrorFull() instead")
    void storesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
