/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionGroupWithUsersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionGroupWithUsersResponse::OAIDistributionGroupWithUsersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionGroupWithUsersResponse::OAIDistributionGroupWithUsersResponse() {
    this->initializeModel();
}

OAIDistributionGroupWithUsersResponse::~OAIDistributionGroupWithUsersResponse() {}

void OAIDistributionGroupWithUsersResponse::initializeModel() {

    m_aad_groups_isSet = false;
    m_aad_groups_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notified_user_count_isSet = false;
    m_notified_user_count_isValid = false;

    m_total_groups_count_isSet = false;
    m_total_groups_count_isValid = false;

    m_total_user_count_isSet = false;
    m_total_user_count_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIDistributionGroupWithUsersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionGroupWithUsersResponse::fromJsonObject(QJsonObject json) {

    m_aad_groups_isValid = ::OpenAPI::fromJsonValue(m_aad_groups, json[QString("aad_groups")]);
    m_aad_groups_isSet = !json[QString("aad_groups")].isNull() && m_aad_groups_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notified_user_count_isValid = ::OpenAPI::fromJsonValue(m_notified_user_count, json[QString("notified_user_count")]);
    m_notified_user_count_isSet = !json[QString("notified_user_count")].isNull() && m_notified_user_count_isValid;

    m_total_groups_count_isValid = ::OpenAPI::fromJsonValue(m_total_groups_count, json[QString("total_groups_count")]);
    m_total_groups_count_isSet = !json[QString("total_groups_count")].isNull() && m_total_groups_count_isValid;

    m_total_user_count_isValid = ::OpenAPI::fromJsonValue(m_total_user_count, json[QString("total_user_count")]);
    m_total_user_count_isSet = !json[QString("total_user_count")].isNull() && m_total_user_count_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIDistributionGroupWithUsersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionGroupWithUsersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_groups.size() > 0) {
        obj.insert(QString("aad_groups"), ::OpenAPI::toJsonValue(m_aad_groups));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notified_user_count_isSet) {
        obj.insert(QString("notified_user_count"), ::OpenAPI::toJsonValue(m_notified_user_count));
    }
    if (m_total_groups_count_isSet) {
        obj.insert(QString("total_groups_count"), ::OpenAPI::toJsonValue(m_total_groups_count));
    }
    if (m_total_user_count_isSet) {
        obj.insert(QString("total_user_count"), ::OpenAPI::toJsonValue(m_total_user_count));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QList<OAIDistributionGroupWithUsersResponse_aad_groups_inner> OAIDistributionGroupWithUsersResponse::getAadGroups() const {
    return m_aad_groups;
}
void OAIDistributionGroupWithUsersResponse::setAadGroups(const QList<OAIDistributionGroupWithUsersResponse_aad_groups_inner> &aad_groups) {
    m_aad_groups = aad_groups;
    m_aad_groups_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_aad_groups_Set() const{
    return m_aad_groups_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_aad_groups_Valid() const{
    return m_aad_groups_isValid;
}

QString OAIDistributionGroupWithUsersResponse::getId() const {
    return m_id;
}
void OAIDistributionGroupWithUsersResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDistributionGroupWithUsersResponse::isIsPublic() const {
    return m_is_public;
}
void OAIDistributionGroupWithUsersResponse::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_is_public_Valid() const{
    return m_is_public_isValid;
}

QString OAIDistributionGroupWithUsersResponse::getName() const {
    return m_name;
}
void OAIDistributionGroupWithUsersResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_name_Valid() const{
    return m_name_isValid;
}

double OAIDistributionGroupWithUsersResponse::getNotifiedUserCount() const {
    return m_notified_user_count;
}
void OAIDistributionGroupWithUsersResponse::setNotifiedUserCount(const double &notified_user_count) {
    m_notified_user_count = notified_user_count;
    m_notified_user_count_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_notified_user_count_Set() const{
    return m_notified_user_count_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_notified_user_count_Valid() const{
    return m_notified_user_count_isValid;
}

double OAIDistributionGroupWithUsersResponse::getTotalGroupsCount() const {
    return m_total_groups_count;
}
void OAIDistributionGroupWithUsersResponse::setTotalGroupsCount(const double &total_groups_count) {
    m_total_groups_count = total_groups_count;
    m_total_groups_count_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_total_groups_count_Set() const{
    return m_total_groups_count_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_total_groups_count_Valid() const{
    return m_total_groups_count_isValid;
}

double OAIDistributionGroupWithUsersResponse::getTotalUserCount() const {
    return m_total_user_count;
}
void OAIDistributionGroupWithUsersResponse::setTotalUserCount(const double &total_user_count) {
    m_total_user_count = total_user_count;
    m_total_user_count_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_total_user_count_Set() const{
    return m_total_user_count_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_total_user_count_Valid() const{
    return m_total_user_count_isValid;
}

QList<OAIDistributionGroups_listUsers_200_response_inner> OAIDistributionGroupWithUsersResponse::getUsers() const {
    return m_users;
}
void OAIDistributionGroupWithUsersResponse::setUsers(const QList<OAIDistributionGroups_listUsers_200_response_inner> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIDistributionGroupWithUsersResponse::is_users_Set() const{
    return m_users_isSet;
}

bool OAIDistributionGroupWithUsersResponse::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIDistributionGroupWithUsersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notified_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_groups_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionGroupWithUsersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_notified_user_count_isValid && m_total_user_count_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
