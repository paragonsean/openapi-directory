/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrors_ErrorAttachments_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrors_ErrorAttachments_200_response_inner::OAIErrors_ErrorAttachments_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrors_ErrorAttachments_200_response_inner::OAIErrors_ErrorAttachments_200_response_inner() {
    this->initializeModel();
}

OAIErrors_ErrorAttachments_200_response_inner::~OAIErrors_ErrorAttachments_200_response_inner() {}

void OAIErrors_ErrorAttachments_200_response_inner::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_attachment_id_isSet = false;
    m_attachment_id_isValid = false;

    m_blob_location_isSet = false;
    m_blob_location_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_crash_id_isSet = false;
    m_crash_id_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIErrors_ErrorAttachments_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrors_ErrorAttachments_200_response_inner::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_attachment_id_isValid = ::OpenAPI::fromJsonValue(m_attachment_id, json[QString("attachmentId")]);
    m_attachment_id_isSet = !json[QString("attachmentId")].isNull() && m_attachment_id_isValid;

    m_blob_location_isValid = ::OpenAPI::fromJsonValue(m_blob_location, json[QString("blobLocation")]);
    m_blob_location_isSet = !json[QString("blobLocation")].isNull() && m_blob_location_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_crash_id_isValid = ::OpenAPI::fromJsonValue(m_crash_id, json[QString("crashId")]);
    m_crash_id_isSet = !json[QString("crashId")].isNull() && m_crash_id_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIErrors_ErrorAttachments_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrors_ErrorAttachments_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_attachment_id_isSet) {
        obj.insert(QString("attachmentId"), ::OpenAPI::toJsonValue(m_attachment_id));
    }
    if (m_blob_location_isSet) {
        obj.insert(QString("blobLocation"), ::OpenAPI::toJsonValue(m_blob_location));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_crash_id_isSet) {
        obj.insert(QString("crashId"), ::OpenAPI::toJsonValue(m_crash_id));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIErrors_ErrorAttachments_200_response_inner::getAppId() const {
    return m_app_id;
}
void OAIErrors_ErrorAttachments_200_response_inner::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIErrors_ErrorAttachments_200_response_inner::getAttachmentId() const {
    return m_attachment_id;
}
void OAIErrors_ErrorAttachments_200_response_inner::setAttachmentId(const QString &attachment_id) {
    m_attachment_id = attachment_id;
    m_attachment_id_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_attachment_id_Set() const{
    return m_attachment_id_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_attachment_id_Valid() const{
    return m_attachment_id_isValid;
}

QString OAIErrors_ErrorAttachments_200_response_inner::getBlobLocation() const {
    return m_blob_location;
}
void OAIErrors_ErrorAttachments_200_response_inner::setBlobLocation(const QString &blob_location) {
    m_blob_location = blob_location;
    m_blob_location_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_blob_location_Set() const{
    return m_blob_location_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_blob_location_Valid() const{
    return m_blob_location_isValid;
}

QString OAIErrors_ErrorAttachments_200_response_inner::getContentType() const {
    return m_content_type;
}
void OAIErrors_ErrorAttachments_200_response_inner::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIErrors_ErrorAttachments_200_response_inner::getCrashId() const {
    return m_crash_id;
}
void OAIErrors_ErrorAttachments_200_response_inner::setCrashId(const QString &crash_id) {
    m_crash_id = crash_id;
    m_crash_id_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_crash_id_Set() const{
    return m_crash_id_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_crash_id_Valid() const{
    return m_crash_id_isValid;
}

QDateTime OAIErrors_ErrorAttachments_200_response_inner::getCreatedTime() const {
    return m_created_time;
}
void OAIErrors_ErrorAttachments_200_response_inner::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIErrors_ErrorAttachments_200_response_inner::getFileName() const {
    return m_file_name;
}
void OAIErrors_ErrorAttachments_200_response_inner::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_file_name_Valid() const{
    return m_file_name_isValid;
}

qint64 OAIErrors_ErrorAttachments_200_response_inner::getSize() const {
    return m_size;
}
void OAIErrors_ErrorAttachments_200_response_inner::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIErrors_ErrorAttachments_200_response_inner::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIErrors_ErrorAttachments_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blob_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrors_ErrorAttachments_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
