/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrashGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrashGroup::OAICrashGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrashGroup::OAICrashGroup() {
    this->initializeModel();
}

OAICrashGroup::~OAICrashGroup() {}

void OAICrashGroup::initializeModel() {

    m_annotation_isSet = false;
    m_annotation_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_build_isSet = false;
    m_build_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_crash_group_id_isSet = false;
    m_crash_group_id_isValid = false;

    m_crash_reason_isSet = false;
    m_crash_reason_isValid = false;

    m_display_id_isSet = false;
    m_display_id_isValid = false;

    m_exception_isSet = false;
    m_exception_isValid = false;

    m_fatal_isSet = false;
    m_fatal_isValid = false;

    m_first_occurrence_isSet = false;
    m_first_occurrence_isValid = false;

    m_impacted_users_isSet = false;
    m_impacted_users_isValid = false;

    m_last_occurrence_isSet = false;
    m_last_occurrence_isValid = false;

    m_new_crash_group_id_isSet = false;
    m_new_crash_group_id_isValid = false;

    m_reason_frame_isSet = false;
    m_reason_frame_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICrashGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrashGroup::fromJsonObject(QJsonObject json) {

    m_annotation_isValid = ::OpenAPI::fromJsonValue(m_annotation, json[QString("annotation")]);
    m_annotation_isSet = !json[QString("annotation")].isNull() && m_annotation_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("app_version")]);
    m_app_version_isSet = !json[QString("app_version")].isNull() && m_app_version_isValid;

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_crash_group_id_isValid = ::OpenAPI::fromJsonValue(m_crash_group_id, json[QString("crash_group_id")]);
    m_crash_group_id_isSet = !json[QString("crash_group_id")].isNull() && m_crash_group_id_isValid;

    m_crash_reason_isValid = ::OpenAPI::fromJsonValue(m_crash_reason, json[QString("crash_reason")]);
    m_crash_reason_isSet = !json[QString("crash_reason")].isNull() && m_crash_reason_isValid;

    m_display_id_isValid = ::OpenAPI::fromJsonValue(m_display_id, json[QString("display_id")]);
    m_display_id_isSet = !json[QString("display_id")].isNull() && m_display_id_isValid;

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("exception")]);
    m_exception_isSet = !json[QString("exception")].isNull() && m_exception_isValid;

    m_fatal_isValid = ::OpenAPI::fromJsonValue(m_fatal, json[QString("fatal")]);
    m_fatal_isSet = !json[QString("fatal")].isNull() && m_fatal_isValid;

    m_first_occurrence_isValid = ::OpenAPI::fromJsonValue(m_first_occurrence, json[QString("first_occurrence")]);
    m_first_occurrence_isSet = !json[QString("first_occurrence")].isNull() && m_first_occurrence_isValid;

    m_impacted_users_isValid = ::OpenAPI::fromJsonValue(m_impacted_users, json[QString("impacted_users")]);
    m_impacted_users_isSet = !json[QString("impacted_users")].isNull() && m_impacted_users_isValid;

    m_last_occurrence_isValid = ::OpenAPI::fromJsonValue(m_last_occurrence, json[QString("last_occurrence")]);
    m_last_occurrence_isSet = !json[QString("last_occurrence")].isNull() && m_last_occurrence_isValid;

    m_new_crash_group_id_isValid = ::OpenAPI::fromJsonValue(m_new_crash_group_id, json[QString("new_crash_group_id")]);
    m_new_crash_group_id_isSet = !json[QString("new_crash_group_id")].isNull() && m_new_crash_group_id_isValid;

    m_reason_frame_isValid = ::OpenAPI::fromJsonValue(m_reason_frame, json[QString("reason_frame")]);
    m_reason_frame_isSet = !json[QString("reason_frame")].isNull() && m_reason_frame_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICrashGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrashGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_isSet) {
        obj.insert(QString("annotation"), ::OpenAPI::toJsonValue(m_annotation));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("app_version"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_build_isSet) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_crash_group_id_isSet) {
        obj.insert(QString("crash_group_id"), ::OpenAPI::toJsonValue(m_crash_group_id));
    }
    if (m_crash_reason_isSet) {
        obj.insert(QString("crash_reason"), ::OpenAPI::toJsonValue(m_crash_reason));
    }
    if (m_display_id_isSet) {
        obj.insert(QString("display_id"), ::OpenAPI::toJsonValue(m_display_id));
    }
    if (m_exception_isSet) {
        obj.insert(QString("exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    if (m_fatal_isSet) {
        obj.insert(QString("fatal"), ::OpenAPI::toJsonValue(m_fatal));
    }
    if (m_first_occurrence_isSet) {
        obj.insert(QString("first_occurrence"), ::OpenAPI::toJsonValue(m_first_occurrence));
    }
    if (m_impacted_users_isSet) {
        obj.insert(QString("impacted_users"), ::OpenAPI::toJsonValue(m_impacted_users));
    }
    if (m_last_occurrence_isSet) {
        obj.insert(QString("last_occurrence"), ::OpenAPI::toJsonValue(m_last_occurrence));
    }
    if (m_new_crash_group_id_isSet) {
        obj.insert(QString("new_crash_group_id"), ::OpenAPI::toJsonValue(m_new_crash_group_id));
    }
    if (m_reason_frame.isSet()) {
        obj.insert(QString("reason_frame"), ::OpenAPI::toJsonValue(m_reason_frame));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICrashGroup::getAnnotation() const {
    return m_annotation;
}
void OAICrashGroup::setAnnotation(const QString &annotation) {
    m_annotation = annotation;
    m_annotation_isSet = true;
}

bool OAICrashGroup::is_annotation_Set() const{
    return m_annotation_isSet;
}

bool OAICrashGroup::is_annotation_Valid() const{
    return m_annotation_isValid;
}

QString OAICrashGroup::getAppVersion() const {
    return m_app_version;
}
void OAICrashGroup::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAICrashGroup::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAICrashGroup::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAICrashGroup::getBuild() const {
    return m_build;
}
void OAICrashGroup::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAICrashGroup::is_build_Set() const{
    return m_build_isSet;
}

bool OAICrashGroup::is_build_Valid() const{
    return m_build_isValid;
}

qint32 OAICrashGroup::getCount() const {
    return m_count;
}
void OAICrashGroup::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICrashGroup::is_count_Set() const{
    return m_count_isSet;
}

bool OAICrashGroup::is_count_Valid() const{
    return m_count_isValid;
}

QString OAICrashGroup::getCrashGroupId() const {
    return m_crash_group_id;
}
void OAICrashGroup::setCrashGroupId(const QString &crash_group_id) {
    m_crash_group_id = crash_group_id;
    m_crash_group_id_isSet = true;
}

bool OAICrashGroup::is_crash_group_id_Set() const{
    return m_crash_group_id_isSet;
}

bool OAICrashGroup::is_crash_group_id_Valid() const{
    return m_crash_group_id_isValid;
}

QString OAICrashGroup::getCrashReason() const {
    return m_crash_reason;
}
void OAICrashGroup::setCrashReason(const QString &crash_reason) {
    m_crash_reason = crash_reason;
    m_crash_reason_isSet = true;
}

bool OAICrashGroup::is_crash_reason_Set() const{
    return m_crash_reason_isSet;
}

bool OAICrashGroup::is_crash_reason_Valid() const{
    return m_crash_reason_isValid;
}

QString OAICrashGroup::getDisplayId() const {
    return m_display_id;
}
void OAICrashGroup::setDisplayId(const QString &display_id) {
    m_display_id = display_id;
    m_display_id_isSet = true;
}

bool OAICrashGroup::is_display_id_Set() const{
    return m_display_id_isSet;
}

bool OAICrashGroup::is_display_id_Valid() const{
    return m_display_id_isValid;
}

QString OAICrashGroup::getException() const {
    return m_exception;
}
void OAICrashGroup::setException(const QString &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAICrashGroup::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAICrashGroup::is_exception_Valid() const{
    return m_exception_isValid;
}

bool OAICrashGroup::isFatal() const {
    return m_fatal;
}
void OAICrashGroup::setFatal(const bool &fatal) {
    m_fatal = fatal;
    m_fatal_isSet = true;
}

bool OAICrashGroup::is_fatal_Set() const{
    return m_fatal_isSet;
}

bool OAICrashGroup::is_fatal_Valid() const{
    return m_fatal_isValid;
}

QDateTime OAICrashGroup::getFirstOccurrence() const {
    return m_first_occurrence;
}
void OAICrashGroup::setFirstOccurrence(const QDateTime &first_occurrence) {
    m_first_occurrence = first_occurrence;
    m_first_occurrence_isSet = true;
}

bool OAICrashGroup::is_first_occurrence_Set() const{
    return m_first_occurrence_isSet;
}

bool OAICrashGroup::is_first_occurrence_Valid() const{
    return m_first_occurrence_isValid;
}

qint32 OAICrashGroup::getImpactedUsers() const {
    return m_impacted_users;
}
void OAICrashGroup::setImpactedUsers(const qint32 &impacted_users) {
    m_impacted_users = impacted_users;
    m_impacted_users_isSet = true;
}

bool OAICrashGroup::is_impacted_users_Set() const{
    return m_impacted_users_isSet;
}

bool OAICrashGroup::is_impacted_users_Valid() const{
    return m_impacted_users_isValid;
}

QDateTime OAICrashGroup::getLastOccurrence() const {
    return m_last_occurrence;
}
void OAICrashGroup::setLastOccurrence(const QDateTime &last_occurrence) {
    m_last_occurrence = last_occurrence;
    m_last_occurrence_isSet = true;
}

bool OAICrashGroup::is_last_occurrence_Set() const{
    return m_last_occurrence_isSet;
}

bool OAICrashGroup::is_last_occurrence_Valid() const{
    return m_last_occurrence_isValid;
}

QString OAICrashGroup::getNewCrashGroupId() const {
    return m_new_crash_group_id;
}
void OAICrashGroup::setNewCrashGroupId(const QString &new_crash_group_id) {
    m_new_crash_group_id = new_crash_group_id;
    m_new_crash_group_id_isSet = true;
}

bool OAICrashGroup::is_new_crash_group_id_Set() const{
    return m_new_crash_group_id_isSet;
}

bool OAICrashGroup::is_new_crash_group_id_Valid() const{
    return m_new_crash_group_id_isValid;
}

OAICrashGroups_list_200_response_crash_groups_inner_reason_frame OAICrashGroup::getReasonFrame() const {
    return m_reason_frame;
}
void OAICrashGroup::setReasonFrame(const OAICrashGroups_list_200_response_crash_groups_inner_reason_frame &reason_frame) {
    m_reason_frame = reason_frame;
    m_reason_frame_isSet = true;
}

bool OAICrashGroup::is_reason_frame_Set() const{
    return m_reason_frame_isSet;
}

bool OAICrashGroup::is_reason_frame_Valid() const{
    return m_reason_frame_isValid;
}

QString OAICrashGroup::getStatus() const {
    return m_status;
}
void OAICrashGroup::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICrashGroup::is_status_Set() const{
    return m_status_isSet;
}

bool OAICrashGroup::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICrashGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fatal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impacted_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_crash_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_frame.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrashGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_annotation_isValid && m_app_version_isValid && m_build_isValid && m_count_isValid && m_crash_group_id_isValid && m_crash_reason_isValid && m_display_id_isValid && m_fatal_isValid && m_first_occurrence_isValid && m_last_occurrence_isValid && m_new_crash_group_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
