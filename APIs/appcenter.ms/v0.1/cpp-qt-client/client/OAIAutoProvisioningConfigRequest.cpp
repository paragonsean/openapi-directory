/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoProvisioningConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoProvisioningConfigRequest::OAIAutoProvisioningConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoProvisioningConfigRequest::OAIAutoProvisioningConfigRequest() {
    this->initializeModel();
}

OAIAutoProvisioningConfigRequest::~OAIAutoProvisioningConfigRequest() {}

void OAIAutoProvisioningConfigRequest::initializeModel() {

    m_allow_auto_provisioning_isSet = false;
    m_allow_auto_provisioning_isValid = false;

    m_apple_developer_account_key_isSet = false;
    m_apple_developer_account_key_isValid = false;

    m_apple_distribution_certificate_key_isSet = false;
    m_apple_distribution_certificate_key_isValid = false;
}

void OAIAutoProvisioningConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoProvisioningConfigRequest::fromJsonObject(QJsonObject json) {

    m_allow_auto_provisioning_isValid = ::OpenAPI::fromJsonValue(m_allow_auto_provisioning, json[QString("allow_auto_provisioning")]);
    m_allow_auto_provisioning_isSet = !json[QString("allow_auto_provisioning")].isNull() && m_allow_auto_provisioning_isValid;

    m_apple_developer_account_key_isValid = ::OpenAPI::fromJsonValue(m_apple_developer_account_key, json[QString("apple_developer_account_key")]);
    m_apple_developer_account_key_isSet = !json[QString("apple_developer_account_key")].isNull() && m_apple_developer_account_key_isValid;

    m_apple_distribution_certificate_key_isValid = ::OpenAPI::fromJsonValue(m_apple_distribution_certificate_key, json[QString("apple_distribution_certificate_key")]);
    m_apple_distribution_certificate_key_isSet = !json[QString("apple_distribution_certificate_key")].isNull() && m_apple_distribution_certificate_key_isValid;
}

QString OAIAutoProvisioningConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoProvisioningConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_auto_provisioning_isSet) {
        obj.insert(QString("allow_auto_provisioning"), ::OpenAPI::toJsonValue(m_allow_auto_provisioning));
    }
    if (m_apple_developer_account_key_isSet) {
        obj.insert(QString("apple_developer_account_key"), ::OpenAPI::toJsonValue(m_apple_developer_account_key));
    }
    if (m_apple_distribution_certificate_key_isSet) {
        obj.insert(QString("apple_distribution_certificate_key"), ::OpenAPI::toJsonValue(m_apple_distribution_certificate_key));
    }
    return obj;
}

bool OAIAutoProvisioningConfigRequest::isAllowAutoProvisioning() const {
    return m_allow_auto_provisioning;
}
void OAIAutoProvisioningConfigRequest::setAllowAutoProvisioning(const bool &allow_auto_provisioning) {
    m_allow_auto_provisioning = allow_auto_provisioning;
    m_allow_auto_provisioning_isSet = true;
}

bool OAIAutoProvisioningConfigRequest::is_allow_auto_provisioning_Set() const{
    return m_allow_auto_provisioning_isSet;
}

bool OAIAutoProvisioningConfigRequest::is_allow_auto_provisioning_Valid() const{
    return m_allow_auto_provisioning_isValid;
}

QString OAIAutoProvisioningConfigRequest::getAppleDeveloperAccountKey() const {
    return m_apple_developer_account_key;
}
void OAIAutoProvisioningConfigRequest::setAppleDeveloperAccountKey(const QString &apple_developer_account_key) {
    m_apple_developer_account_key = apple_developer_account_key;
    m_apple_developer_account_key_isSet = true;
}

bool OAIAutoProvisioningConfigRequest::is_apple_developer_account_key_Set() const{
    return m_apple_developer_account_key_isSet;
}

bool OAIAutoProvisioningConfigRequest::is_apple_developer_account_key_Valid() const{
    return m_apple_developer_account_key_isValid;
}

QString OAIAutoProvisioningConfigRequest::getAppleDistributionCertificateKey() const {
    return m_apple_distribution_certificate_key;
}
void OAIAutoProvisioningConfigRequest::setAppleDistributionCertificateKey(const QString &apple_distribution_certificate_key) {
    m_apple_distribution_certificate_key = apple_distribution_certificate_key;
    m_apple_distribution_certificate_key_isSet = true;
}

bool OAIAutoProvisioningConfigRequest::is_apple_distribution_certificate_key_Set() const{
    return m_apple_distribution_certificate_key_isSet;
}

bool OAIAutoProvisioningConfigRequest::is_apple_distribution_certificate_key_Valid() const{
    return m_apple_distribution_certificate_key_isValid;
}

bool OAIAutoProvisioningConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_auto_provisioning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apple_developer_account_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apple_distribution_certificate_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoProvisioningConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
