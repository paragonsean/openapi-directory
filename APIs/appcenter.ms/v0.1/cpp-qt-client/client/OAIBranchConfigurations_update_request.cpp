/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranchConfigurations_update_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranchConfigurations_update_request::OAIBranchConfigurations_update_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranchConfigurations_update_request::OAIBranchConfigurations_update_request() {
    this->initializeModel();
}

OAIBranchConfigurations_update_request::~OAIBranchConfigurations_update_request() {}

void OAIBranchConfigurations_update_request::initializeModel() {

    m_artifact_versioning_isSet = false;
    m_artifact_versioning_isValid = false;

    m_badge_is_enabled_isSet = false;
    m_badge_is_enabled_isValid = false;

    m_clone_from_branch_isSet = false;
    m_clone_from_branch_isValid = false;

    m_r_signed_isSet = false;
    m_r_signed_isValid = false;

    m_tests_enabled_isSet = false;
    m_tests_enabled_isValid = false;

    m_toolsets_isSet = false;
    m_toolsets_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAIBranchConfigurations_update_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranchConfigurations_update_request::fromJsonObject(QJsonObject json) {

    m_artifact_versioning_isValid = ::OpenAPI::fromJsonValue(m_artifact_versioning, json[QString("artifactVersioning")]);
    m_artifact_versioning_isSet = !json[QString("artifactVersioning")].isNull() && m_artifact_versioning_isValid;

    m_badge_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_badge_is_enabled, json[QString("badgeIsEnabled")]);
    m_badge_is_enabled_isSet = !json[QString("badgeIsEnabled")].isNull() && m_badge_is_enabled_isValid;

    m_clone_from_branch_isValid = ::OpenAPI::fromJsonValue(m_clone_from_branch, json[QString("cloneFromBranch")]);
    m_clone_from_branch_isSet = !json[QString("cloneFromBranch")].isNull() && m_clone_from_branch_isValid;

    m_r_signed_isValid = ::OpenAPI::fromJsonValue(m_r_signed, json[QString("signed")]);
    m_r_signed_isSet = !json[QString("signed")].isNull() && m_r_signed_isValid;

    m_tests_enabled_isValid = ::OpenAPI::fromJsonValue(m_tests_enabled, json[QString("testsEnabled")]);
    m_tests_enabled_isSet = !json[QString("testsEnabled")].isNull() && m_tests_enabled_isValid;

    m_toolsets_isValid = ::OpenAPI::fromJsonValue(m_toolsets, json[QString("toolsets")]);
    m_toolsets_isSet = !json[QString("toolsets")].isNull() && m_toolsets_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAIBranchConfigurations_update_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranchConfigurations_update_request::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_versioning.isSet()) {
        obj.insert(QString("artifactVersioning"), ::OpenAPI::toJsonValue(m_artifact_versioning));
    }
    if (m_badge_is_enabled_isSet) {
        obj.insert(QString("badgeIsEnabled"), ::OpenAPI::toJsonValue(m_badge_is_enabled));
    }
    if (m_clone_from_branch_isSet) {
        obj.insert(QString("cloneFromBranch"), ::OpenAPI::toJsonValue(m_clone_from_branch));
    }
    if (m_r_signed_isSet) {
        obj.insert(QString("signed"), ::OpenAPI::toJsonValue(m_r_signed));
    }
    if (m_tests_enabled_isSet) {
        obj.insert(QString("testsEnabled"), ::OpenAPI::toJsonValue(m_tests_enabled));
    }
    if (m_toolsets.isSet()) {
        obj.insert(QString("toolsets"), ::OpenAPI::toJsonValue(m_toolsets));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

OAIBranchConfigurations_get_200_response_allOf_artifactVersioning OAIBranchConfigurations_update_request::getArtifactVersioning() const {
    return m_artifact_versioning;
}
void OAIBranchConfigurations_update_request::setArtifactVersioning(const OAIBranchConfigurations_get_200_response_allOf_artifactVersioning &artifact_versioning) {
    m_artifact_versioning = artifact_versioning;
    m_artifact_versioning_isSet = true;
}

bool OAIBranchConfigurations_update_request::is_artifact_versioning_Set() const{
    return m_artifact_versioning_isSet;
}

bool OAIBranchConfigurations_update_request::is_artifact_versioning_Valid() const{
    return m_artifact_versioning_isValid;
}

bool OAIBranchConfigurations_update_request::isBadgeIsEnabled() const {
    return m_badge_is_enabled;
}
void OAIBranchConfigurations_update_request::setBadgeIsEnabled(const bool &badge_is_enabled) {
    m_badge_is_enabled = badge_is_enabled;
    m_badge_is_enabled_isSet = true;
}

bool OAIBranchConfigurations_update_request::is_badge_is_enabled_Set() const{
    return m_badge_is_enabled_isSet;
}

bool OAIBranchConfigurations_update_request::is_badge_is_enabled_Valid() const{
    return m_badge_is_enabled_isValid;
}

QString OAIBranchConfigurations_update_request::getCloneFromBranch() const {
    return m_clone_from_branch;
}
void OAIBranchConfigurations_update_request::setCloneFromBranch(const QString &clone_from_branch) {
    m_clone_from_branch = clone_from_branch;
    m_clone_from_branch_isSet = true;
}

bool OAIBranchConfigurations_update_request::is_clone_from_branch_Set() const{
    return m_clone_from_branch_isSet;
}

bool OAIBranchConfigurations_update_request::is_clone_from_branch_Valid() const{
    return m_clone_from_branch_isValid;
}

bool OAIBranchConfigurations_update_request::isRSigned() const {
    return m_r_signed;
}
void OAIBranchConfigurations_update_request::setRSigned(const bool &r_signed) {
    m_r_signed = r_signed;
    m_r_signed_isSet = true;
}

bool OAIBranchConfigurations_update_request::is_r_signed_Set() const{
    return m_r_signed_isSet;
}

bool OAIBranchConfigurations_update_request::is_r_signed_Valid() const{
    return m_r_signed_isValid;
}

bool OAIBranchConfigurations_update_request::isTestsEnabled() const {
    return m_tests_enabled;
}
void OAIBranchConfigurations_update_request::setTestsEnabled(const bool &tests_enabled) {
    m_tests_enabled = tests_enabled;
    m_tests_enabled_isSet = true;
}

bool OAIBranchConfigurations_update_request::is_tests_enabled_Set() const{
    return m_tests_enabled_isSet;
}

bool OAIBranchConfigurations_update_request::is_tests_enabled_Valid() const{
    return m_tests_enabled_isValid;
}

OAIBranchConfigurations_get_200_response_allOf_toolsets OAIBranchConfigurations_update_request::getToolsets() const {
    return m_toolsets;
}
void OAIBranchConfigurations_update_request::setToolsets(const OAIBranchConfigurations_get_200_response_allOf_toolsets &toolsets) {
    m_toolsets = toolsets;
    m_toolsets_isSet = true;
}

bool OAIBranchConfigurations_update_request::is_toolsets_Set() const{
    return m_toolsets_isSet;
}

bool OAIBranchConfigurations_update_request::is_toolsets_Valid() const{
    return m_toolsets_isValid;
}

QString OAIBranchConfigurations_update_request::getTrigger() const {
    return m_trigger;
}
void OAIBranchConfigurations_update_request::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIBranchConfigurations_update_request::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIBranchConfigurations_update_request::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAIBranchConfigurations_update_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_versioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clone_from_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_signed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_toolsets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranchConfigurations_update_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
