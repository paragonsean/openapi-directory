/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationResponseInternal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationResponseInternal::OAIOrganizationResponseInternal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationResponseInternal::OAIOrganizationResponseInternal() {
    this->initializeModel();
}

OAIOrganizationResponseInternal::~OAIOrganizationResponseInternal() {}

void OAIOrganizationResponseInternal::initializeModel() {

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_feature_flags_isSet = false;
    m_feature_flags_isValid = false;
}

void OAIOrganizationResponseInternal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationResponseInternal::fromJsonObject(QJsonObject json) {

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_feature_flags_isValid = ::OpenAPI::fromJsonValue(m_feature_flags, json[QString("feature_flags")]);
    m_feature_flags_isSet = !json[QString("feature_flags")].isNull() && m_feature_flags_isValid;
}

QString OAIOrganizationResponseInternal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationResponseInternal::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_feature_flags.size() > 0) {
        obj.insert(QString("feature_flags"), ::OpenAPI::toJsonValue(m_feature_flags));
    }
    return obj;
}

QString OAIOrganizationResponseInternal::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIOrganizationResponseInternal::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIOrganizationResponseInternal::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIOrganizationResponseInternal::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIOrganizationResponseInternal::getCreatedAt() const {
    return m_created_at;
}
void OAIOrganizationResponseInternal::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrganizationResponseInternal::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrganizationResponseInternal::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOrganizationResponseInternal::getDisplayName() const {
    return m_display_name;
}
void OAIOrganizationResponseInternal::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIOrganizationResponseInternal::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIOrganizationResponseInternal::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIOrganizationResponseInternal::getId() const {
    return m_id;
}
void OAIOrganizationResponseInternal::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrganizationResponseInternal::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrganizationResponseInternal::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrganizationResponseInternal::getName() const {
    return m_name;
}
void OAIOrganizationResponseInternal::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganizationResponseInternal::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganizationResponseInternal::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOrganizationResponseInternal::getOrigin() const {
    return m_origin;
}
void OAIOrganizationResponseInternal::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIOrganizationResponseInternal::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIOrganizationResponseInternal::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIOrganizationResponseInternal::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOrganizationResponseInternal::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOrganizationResponseInternal::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOrganizationResponseInternal::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<QString> OAIOrganizationResponseInternal::getFeatureFlags() const {
    return m_feature_flags;
}
void OAIOrganizationResponseInternal::setFeatureFlags(const QList<QString> &feature_flags) {
    m_feature_flags = feature_flags;
    m_feature_flags_isSet = true;
}

bool OAIOrganizationResponseInternal::is_feature_flags_Set() const{
    return m_feature_flags_isSet;
}

bool OAIOrganizationResponseInternal::is_feature_flags_Valid() const{
    return m_feature_flags_isValid;
}

bool OAIOrganizationResponseInternal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationResponseInternal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_display_name_isValid && m_id_isValid && m_name_isValid && m_origin_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
