/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternalUserSignupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternalUserSignupResponse::OAIInternalUserSignupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternalUserSignupResponse::OAIInternalUserSignupResponse() {
    this->initializeModel();
}

OAIInternalUserSignupResponse::~OAIInternalUserSignupResponse() {}

void OAIInternalUserSignupResponse::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_external_provider_isSet = false;
    m_external_provider_isValid = false;

    m_external_user_id_isSet = false;
    m_external_user_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIInternalUserSignupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternalUserSignupResponse::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_external_provider_isValid = ::OpenAPI::fromJsonValue(m_external_provider, json[QString("external_provider")]);
    m_external_provider_isSet = !json[QString("external_provider")].isNull() && m_external_provider_isValid;

    m_external_user_id_isValid = ::OpenAPI::fromJsonValue(m_external_user_id, json[QString("external_user_id")]);
    m_external_user_id_isSet = !json[QString("external_user_id")].isNull() && m_external_user_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIInternalUserSignupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternalUserSignupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_external_provider_isSet) {
        obj.insert(QString("external_provider"), ::OpenAPI::toJsonValue(m_external_provider));
    }
    if (m_external_user_id_isSet) {
        obj.insert(QString("external_user_id"), ::OpenAPI::toJsonValue(m_external_user_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIInternalUserSignupResponse::getDisplayName() const {
    return m_display_name;
}
void OAIInternalUserSignupResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInternalUserSignupResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInternalUserSignupResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInternalUserSignupResponse::getEmail() const {
    return m_email;
}
void OAIInternalUserSignupResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIInternalUserSignupResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIInternalUserSignupResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIInternalUserSignupResponse::getExternalProvider() const {
    return m_external_provider;
}
void OAIInternalUserSignupResponse::setExternalProvider(const QString &external_provider) {
    m_external_provider = external_provider;
    m_external_provider_isSet = true;
}

bool OAIInternalUserSignupResponse::is_external_provider_Set() const{
    return m_external_provider_isSet;
}

bool OAIInternalUserSignupResponse::is_external_provider_Valid() const{
    return m_external_provider_isValid;
}

QString OAIInternalUserSignupResponse::getExternalUserId() const {
    return m_external_user_id;
}
void OAIInternalUserSignupResponse::setExternalUserId(const QString &external_user_id) {
    m_external_user_id = external_user_id;
    m_external_user_id_isSet = true;
}

bool OAIInternalUserSignupResponse::is_external_user_id_Set() const{
    return m_external_user_id_isSet;
}

bool OAIInternalUserSignupResponse::is_external_user_id_Valid() const{
    return m_external_user_id_isValid;
}

QString OAIInternalUserSignupResponse::getId() const {
    return m_id;
}
void OAIInternalUserSignupResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInternalUserSignupResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInternalUserSignupResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInternalUserSignupResponse::getName() const {
    return m_name;
}
void OAIInternalUserSignupResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInternalUserSignupResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInternalUserSignupResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInternalUserSignupResponse::getStatus() const {
    return m_status;
}
void OAIInternalUserSignupResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInternalUserSignupResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInternalUserSignupResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInternalUserSignupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternalUserSignupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_email_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
