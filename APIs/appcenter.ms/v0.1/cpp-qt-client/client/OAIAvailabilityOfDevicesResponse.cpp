/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAvailabilityOfDevicesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAvailabilityOfDevicesResponse::OAIAvailabilityOfDevicesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAvailabilityOfDevicesResponse::OAIAvailabilityOfDevicesResponse() {
    this->initializeModel();
}

OAIAvailabilityOfDevicesResponse::~OAIAvailabilityOfDevicesResponse() {}

void OAIAvailabilityOfDevicesResponse::initializeModel() {

    m_ipads_isSet = false;
    m_ipads_isValid = false;

    m_iphones_isSet = false;
    m_iphones_isValid = false;

    m_ipods_isSet = false;
    m_ipods_isValid = false;

    m_watches_isSet = false;
    m_watches_isValid = false;
}

void OAIAvailabilityOfDevicesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAvailabilityOfDevicesResponse::fromJsonObject(QJsonObject json) {

    m_ipads_isValid = ::OpenAPI::fromJsonValue(m_ipads, json[QString("ipads")]);
    m_ipads_isSet = !json[QString("ipads")].isNull() && m_ipads_isValid;

    m_iphones_isValid = ::OpenAPI::fromJsonValue(m_iphones, json[QString("iphones")]);
    m_iphones_isSet = !json[QString("iphones")].isNull() && m_iphones_isValid;

    m_ipods_isValid = ::OpenAPI::fromJsonValue(m_ipods, json[QString("ipods")]);
    m_ipods_isSet = !json[QString("ipods")].isNull() && m_ipods_isValid;

    m_watches_isValid = ::OpenAPI::fromJsonValue(m_watches, json[QString("watches")]);
    m_watches_isSet = !json[QString("watches")].isNull() && m_watches_isValid;
}

QString OAIAvailabilityOfDevicesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAvailabilityOfDevicesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ipads.isSet()) {
        obj.insert(QString("ipads"), ::OpenAPI::toJsonValue(m_ipads));
    }
    if (m_iphones.isSet()) {
        obj.insert(QString("iphones"), ::OpenAPI::toJsonValue(m_iphones));
    }
    if (m_ipods.isSet()) {
        obj.insert(QString("ipods"), ::OpenAPI::toJsonValue(m_ipods));
    }
    if (m_watches.isSet()) {
        obj.insert(QString("watches"), ::OpenAPI::toJsonValue(m_watches));
    }
    return obj;
}

OAIAvailabilityOfDevicesResponse_ipads OAIAvailabilityOfDevicesResponse::getIpads() const {
    return m_ipads;
}
void OAIAvailabilityOfDevicesResponse::setIpads(const OAIAvailabilityOfDevicesResponse_ipads &ipads) {
    m_ipads = ipads;
    m_ipads_isSet = true;
}

bool OAIAvailabilityOfDevicesResponse::is_ipads_Set() const{
    return m_ipads_isSet;
}

bool OAIAvailabilityOfDevicesResponse::is_ipads_Valid() const{
    return m_ipads_isValid;
}

OAIAvailabilityOfDevicesResponse_ipads OAIAvailabilityOfDevicesResponse::getIphones() const {
    return m_iphones;
}
void OAIAvailabilityOfDevicesResponse::setIphones(const OAIAvailabilityOfDevicesResponse_ipads &iphones) {
    m_iphones = iphones;
    m_iphones_isSet = true;
}

bool OAIAvailabilityOfDevicesResponse::is_iphones_Set() const{
    return m_iphones_isSet;
}

bool OAIAvailabilityOfDevicesResponse::is_iphones_Valid() const{
    return m_iphones_isValid;
}

OAIAvailabilityOfDevicesResponse_ipads OAIAvailabilityOfDevicesResponse::getIpods() const {
    return m_ipods;
}
void OAIAvailabilityOfDevicesResponse::setIpods(const OAIAvailabilityOfDevicesResponse_ipads &ipods) {
    m_ipods = ipods;
    m_ipods_isSet = true;
}

bool OAIAvailabilityOfDevicesResponse::is_ipods_Set() const{
    return m_ipods_isSet;
}

bool OAIAvailabilityOfDevicesResponse::is_ipods_Valid() const{
    return m_ipods_isValid;
}

OAIAvailabilityOfDevicesResponse_ipads OAIAvailabilityOfDevicesResponse::getWatches() const {
    return m_watches;
}
void OAIAvailabilityOfDevicesResponse::setWatches(const OAIAvailabilityOfDevicesResponse_ipads &watches) {
    m_watches = watches;
    m_watches_isSet = true;
}

bool OAIAvailabilityOfDevicesResponse::is_watches_Set() const{
    return m_watches_isSet;
}

bool OAIAvailabilityOfDevicesResponse::is_watches_Valid() const{
    return m_watches_isValid;
}

bool OAIAvailabilityOfDevicesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ipads.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iphones.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watches.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAvailabilityOfDevicesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ipads_isValid && m_iphones_isValid && m_ipods_isValid && m_watches_isValid && true;
}

} // namespace OpenAPI
