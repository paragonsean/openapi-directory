/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationInvitationDetailResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationInvitationDetailResponse::OAIOrganizationInvitationDetailResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationInvitationDetailResponse::OAIOrganizationInvitationDetailResponse() {
    this->initializeModel();
}

OAIOrganizationInvitationDetailResponse::~OAIOrganizationInvitationDetailResponse() {}

void OAIOrganizationInvitationDetailResponse::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invited_by_isSet = false;
    m_invited_by_isValid = false;

    m_is_existing_user_isSet = false;
    m_is_existing_user_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIOrganizationInvitationDetailResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationInvitationDetailResponse::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invited_by_isValid = ::OpenAPI::fromJsonValue(m_invited_by, json[QString("invited_by")]);
    m_invited_by_isSet = !json[QString("invited_by")].isNull() && m_invited_by_isValid;

    m_is_existing_user_isValid = ::OpenAPI::fromJsonValue(m_is_existing_user, json[QString("is_existing_user")]);
    m_is_existing_user_isSet = !json[QString("is_existing_user")].isNull() && m_is_existing_user_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIOrganizationInvitationDetailResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationInvitationDetailResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invited_by.isSet()) {
        obj.insert(QString("invited_by"), ::OpenAPI::toJsonValue(m_invited_by));
    }
    if (m_is_existing_user_isSet) {
        obj.insert(QString("is_existing_user"), ::OpenAPI::toJsonValue(m_is_existing_user));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIOrganizationInvitationDetailResponse::getEmail() const {
    return m_email;
}
void OAIOrganizationInvitationDetailResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrganizationInvitationDetailResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrganizationInvitationDetailResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIOrganizationInvitationDetailResponse::getId() const {
    return m_id;
}
void OAIOrganizationInvitationDetailResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrganizationInvitationDetailResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrganizationInvitationDetailResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIAppInvitations_list_200_response_invited_by OAIOrganizationInvitationDetailResponse::getInvitedBy() const {
    return m_invited_by;
}
void OAIOrganizationInvitationDetailResponse::setInvitedBy(const OAIAppInvitations_list_200_response_invited_by &invited_by) {
    m_invited_by = invited_by;
    m_invited_by_isSet = true;
}

bool OAIOrganizationInvitationDetailResponse::is_invited_by_Set() const{
    return m_invited_by_isSet;
}

bool OAIOrganizationInvitationDetailResponse::is_invited_by_Valid() const{
    return m_invited_by_isValid;
}

bool OAIOrganizationInvitationDetailResponse::isIsExistingUser() const {
    return m_is_existing_user;
}
void OAIOrganizationInvitationDetailResponse::setIsExistingUser(const bool &is_existing_user) {
    m_is_existing_user = is_existing_user;
    m_is_existing_user_isSet = true;
}

bool OAIOrganizationInvitationDetailResponse::is_is_existing_user_Set() const{
    return m_is_existing_user_isSet;
}

bool OAIOrganizationInvitationDetailResponse::is_is_existing_user_Valid() const{
    return m_is_existing_user_isValid;
}

OAIOrganizations_listAdministered_200_response_organizations OAIOrganizationInvitationDetailResponse::getOrganization() const {
    return m_organization;
}
void OAIOrganizationInvitationDetailResponse::setOrganization(const OAIOrganizations_listAdministered_200_response_organizations &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIOrganizationInvitationDetailResponse::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIOrganizationInvitationDetailResponse::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIOrganizationInvitationDetailResponse::getRole() const {
    return m_role;
}
void OAIOrganizationInvitationDetailResponse::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIOrganizationInvitationDetailResponse::is_role_Set() const{
    return m_role_isSet;
}

bool OAIOrganizationInvitationDetailResponse::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIOrganizationInvitationDetailResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_existing_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationInvitationDetailResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_id_isValid && m_invited_by_isValid && m_is_existing_user_isValid && m_organization_isValid && true;
}

} // namespace OpenAPI
