/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistributionGroupDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistributionGroupDetailsResponse::OAIDistributionGroupDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistributionGroupDetailsResponse::OAIDistributionGroupDetailsResponse() {
    this->initializeModel();
}

OAIDistributionGroupDetailsResponse::~OAIDistributionGroupDetailsResponse() {}

void OAIDistributionGroupDetailsResponse::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_public_isSet = false;
    m_is_public_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_group_type_isSet = false;
    m_group_type_isValid = false;

    m_is_shared_isSet = false;
    m_is_shared_isValid = false;

    m_notified_user_count_isSet = false;
    m_notified_user_count_isValid = false;

    m_total_apps_count_isSet = false;
    m_total_apps_count_isValid = false;

    m_total_user_count_isSet = false;
    m_total_user_count_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIDistributionGroupDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistributionGroupDetailsResponse::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_public_isValid = ::OpenAPI::fromJsonValue(m_is_public, json[QString("is_public")]);
    m_is_public_isSet = !json[QString("is_public")].isNull() && m_is_public_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_group_type_isValid = ::OpenAPI::fromJsonValue(m_group_type, json[QString("group_type")]);
    m_group_type_isSet = !json[QString("group_type")].isNull() && m_group_type_isValid;

    m_is_shared_isValid = ::OpenAPI::fromJsonValue(m_is_shared, json[QString("is_shared")]);
    m_is_shared_isSet = !json[QString("is_shared")].isNull() && m_is_shared_isValid;

    m_notified_user_count_isValid = ::OpenAPI::fromJsonValue(m_notified_user_count, json[QString("notified_user_count")]);
    m_notified_user_count_isSet = !json[QString("notified_user_count")].isNull() && m_notified_user_count_isValid;

    m_total_apps_count_isValid = ::OpenAPI::fromJsonValue(m_total_apps_count, json[QString("total_apps_count")]);
    m_total_apps_count_isSet = !json[QString("total_apps_count")].isNull() && m_total_apps_count_isValid;

    m_total_user_count_isValid = ::OpenAPI::fromJsonValue(m_total_user_count, json[QString("total_user_count")]);
    m_total_user_count_isSet = !json[QString("total_user_count")].isNull() && m_total_user_count_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIDistributionGroupDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistributionGroupDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_public_isSet) {
        obj.insert(QString("is_public"), ::OpenAPI::toJsonValue(m_is_public));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_group_type_isSet) {
        obj.insert(QString("group_type"), ::OpenAPI::toJsonValue(m_group_type));
    }
    if (m_is_shared_isSet) {
        obj.insert(QString("is_shared"), ::OpenAPI::toJsonValue(m_is_shared));
    }
    if (m_notified_user_count_isSet) {
        obj.insert(QString("notified_user_count"), ::OpenAPI::toJsonValue(m_notified_user_count));
    }
    if (m_total_apps_count_isSet) {
        obj.insert(QString("total_apps_count"), ::OpenAPI::toJsonValue(m_total_apps_count));
    }
    if (m_total_user_count_isSet) {
        obj.insert(QString("total_user_count"), ::OpenAPI::toJsonValue(m_total_user_count));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QString OAIDistributionGroupDetailsResponse::getDisplayName() const {
    return m_display_name;
}
void OAIDistributionGroupDetailsResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDistributionGroupDetailsResponse::getId() const {
    return m_id;
}
void OAIDistributionGroupDetailsResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDistributionGroupDetailsResponse::isIsPublic() const {
    return m_is_public;
}
void OAIDistributionGroupDetailsResponse::setIsPublic(const bool &is_public) {
    m_is_public = is_public;
    m_is_public_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_is_public_Set() const{
    return m_is_public_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_is_public_Valid() const{
    return m_is_public_isValid;
}

QString OAIDistributionGroupDetailsResponse::getName() const {
    return m_name;
}
void OAIDistributionGroupDetailsResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDistributionGroupDetailsResponse::getOrigin() const {
    return m_origin;
}
void OAIDistributionGroupDetailsResponse::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIDistributionGroupDetailsResponse::getGroupType() const {
    return m_group_type;
}
void OAIDistributionGroupDetailsResponse::setGroupType(const QString &group_type) {
    m_group_type = group_type;
    m_group_type_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_group_type_Set() const{
    return m_group_type_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_group_type_Valid() const{
    return m_group_type_isValid;
}

bool OAIDistributionGroupDetailsResponse::isIsShared() const {
    return m_is_shared;
}
void OAIDistributionGroupDetailsResponse::setIsShared(const bool &is_shared) {
    m_is_shared = is_shared;
    m_is_shared_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_is_shared_Set() const{
    return m_is_shared_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_is_shared_Valid() const{
    return m_is_shared_isValid;
}

double OAIDistributionGroupDetailsResponse::getNotifiedUserCount() const {
    return m_notified_user_count;
}
void OAIDistributionGroupDetailsResponse::setNotifiedUserCount(const double &notified_user_count) {
    m_notified_user_count = notified_user_count;
    m_notified_user_count_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_notified_user_count_Set() const{
    return m_notified_user_count_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_notified_user_count_Valid() const{
    return m_notified_user_count_isValid;
}

double OAIDistributionGroupDetailsResponse::getTotalAppsCount() const {
    return m_total_apps_count;
}
void OAIDistributionGroupDetailsResponse::setTotalAppsCount(const double &total_apps_count) {
    m_total_apps_count = total_apps_count;
    m_total_apps_count_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_total_apps_count_Set() const{
    return m_total_apps_count_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_total_apps_count_Valid() const{
    return m_total_apps_count_isValid;
}

double OAIDistributionGroupDetailsResponse::getTotalUserCount() const {
    return m_total_user_count;
}
void OAIDistributionGroupDetailsResponse::setTotalUserCount(const double &total_user_count) {
    m_total_user_count = total_user_count;
    m_total_user_count_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_total_user_count_Set() const{
    return m_total_user_count_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_total_user_count_Valid() const{
    return m_total_user_count_isValid;
}

QList<OAIDistributionGroups_listUsers_200_response_inner> OAIDistributionGroupDetailsResponse::getUsers() const {
    return m_users;
}
void OAIDistributionGroupDetailsResponse::setUsers(const QList<OAIDistributionGroups_listUsers_200_response_inner> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIDistributionGroupDetailsResponse::is_users_Set() const{
    return m_users_isSet;
}

bool OAIDistributionGroupDetailsResponse::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIDistributionGroupDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notified_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_apps_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_user_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistributionGroupDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_is_public_isValid && m_name_isValid && m_origin_isValid && m_is_shared_isValid && m_notified_user_count_isValid && m_total_apps_count_isValid && m_total_user_count_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
