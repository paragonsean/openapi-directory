/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreReleases_list_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreReleases_list_200_response_inner::OAIStoreReleases_list_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreReleases_list_200_response_inner::OAIStoreReleases_list_200_response_inner() {
    this->initializeModel();
}

OAIStoreReleases_list_200_response_inner::~OAIStoreReleases_list_200_response_inner() {}

void OAIStoreReleases_list_200_response_inner::initializeModel() {

    m_destination_type_isSet = false;
    m_destination_type_isValid = false;

    m_distribution_stores_isSet = false;
    m_distribution_stores_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_short_version_isSet = false;
    m_short_version_isValid = false;

    m_uploaded_at_isSet = false;
    m_uploaded_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIStoreReleases_list_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreReleases_list_200_response_inner::fromJsonObject(QJsonObject json) {

    m_destination_type_isValid = ::OpenAPI::fromJsonValue(m_destination_type, json[QString("destination_type")]);
    m_destination_type_isSet = !json[QString("destination_type")].isNull() && m_destination_type_isValid;

    m_distribution_stores_isValid = ::OpenAPI::fromJsonValue(m_distribution_stores, json[QString("distribution_stores")]);
    m_distribution_stores_isSet = !json[QString("distribution_stores")].isNull() && m_distribution_stores_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_short_version_isValid = ::OpenAPI::fromJsonValue(m_short_version, json[QString("short_version")]);
    m_short_version_isSet = !json[QString("short_version")].isNull() && m_short_version_isValid;

    m_uploaded_at_isValid = ::OpenAPI::fromJsonValue(m_uploaded_at, json[QString("uploaded_at")]);
    m_uploaded_at_isSet = !json[QString("uploaded_at")].isNull() && m_uploaded_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIStoreReleases_list_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreReleases_list_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_type_isSet) {
        obj.insert(QString("destination_type"), ::OpenAPI::toJsonValue(m_destination_type));
    }
    if (m_distribution_stores.size() > 0) {
        obj.insert(QString("distribution_stores"), ::OpenAPI::toJsonValue(m_distribution_stores));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_short_version_isSet) {
        obj.insert(QString("short_version"), ::OpenAPI::toJsonValue(m_short_version));
    }
    if (m_uploaded_at_isSet) {
        obj.insert(QString("uploaded_at"), ::OpenAPI::toJsonValue(m_uploaded_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIStoreReleases_list_200_response_inner::getDestinationType() const {
    return m_destination_type;
}
void OAIStoreReleases_list_200_response_inner::setDestinationType(const QString &destination_type) {
    m_destination_type = destination_type;
    m_destination_type_isSet = true;
}

bool OAIStoreReleases_list_200_response_inner::is_destination_type_Set() const{
    return m_destination_type_isSet;
}

bool OAIStoreReleases_list_200_response_inner::is_destination_type_Valid() const{
    return m_destination_type_isValid;
}

QList<OAIStoreReleases_list_200_response_inner_distribution_stores_inner> OAIStoreReleases_list_200_response_inner::getDistributionStores() const {
    return m_distribution_stores;
}
void OAIStoreReleases_list_200_response_inner::setDistributionStores(const QList<OAIStoreReleases_list_200_response_inner_distribution_stores_inner> &distribution_stores) {
    m_distribution_stores = distribution_stores;
    m_distribution_stores_isSet = true;
}

bool OAIStoreReleases_list_200_response_inner::is_distribution_stores_Set() const{
    return m_distribution_stores_isSet;
}

bool OAIStoreReleases_list_200_response_inner::is_distribution_stores_Valid() const{
    return m_distribution_stores_isValid;
}

double OAIStoreReleases_list_200_response_inner::getId() const {
    return m_id;
}
void OAIStoreReleases_list_200_response_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStoreReleases_list_200_response_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStoreReleases_list_200_response_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStoreReleases_list_200_response_inner::getShortVersion() const {
    return m_short_version;
}
void OAIStoreReleases_list_200_response_inner::setShortVersion(const QString &short_version) {
    m_short_version = short_version;
    m_short_version_isSet = true;
}

bool OAIStoreReleases_list_200_response_inner::is_short_version_Set() const{
    return m_short_version_isSet;
}

bool OAIStoreReleases_list_200_response_inner::is_short_version_Valid() const{
    return m_short_version_isValid;
}

QString OAIStoreReleases_list_200_response_inner::getUploadedAt() const {
    return m_uploaded_at;
}
void OAIStoreReleases_list_200_response_inner::setUploadedAt(const QString &uploaded_at) {
    m_uploaded_at = uploaded_at;
    m_uploaded_at_isSet = true;
}

bool OAIStoreReleases_list_200_response_inner::is_uploaded_at_Set() const{
    return m_uploaded_at_isSet;
}

bool OAIStoreReleases_list_200_response_inner::is_uploaded_at_Valid() const{
    return m_uploaded_at_isValid;
}

QString OAIStoreReleases_list_200_response_inner::getVersion() const {
    return m_version;
}
void OAIStoreReleases_list_200_response_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIStoreReleases_list_200_response_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIStoreReleases_list_200_response_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIStoreReleases_list_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreReleases_list_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
