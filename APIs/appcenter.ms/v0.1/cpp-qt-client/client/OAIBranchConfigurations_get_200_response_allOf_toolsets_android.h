/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBranchConfigurations_get_200_response_allOf_toolsets_android.h
 *
 * Build configuration for Android projects
 */

#ifndef OAIBranchConfigurations_get_200_response_allOf_toolsets_android_H
#define OAIBranchConfigurations_get_200_response_allOf_toolsets_android_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBranchConfigurations_get_200_response_allOf_toolsets_android : public OAIObject {
public:
    OAIBranchConfigurations_get_200_response_allOf_toolsets_android();
    OAIBranchConfigurations_get_200_response_allOf_toolsets_android(QString json);
    ~OAIBranchConfigurations_get_200_response_allOf_toolsets_android() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAutomaticSigning() const;
    void setAutomaticSigning(const bool &automatic_signing);
    bool is_automatic_signing_Set() const;
    bool is_automatic_signing_Valid() const;

    QString getBuildVariant() const;
    void setBuildVariant(const QString &build_variant);
    bool is_build_variant_Set() const;
    bool is_build_variant_Valid() const;

    QString getGradleWrapperPath() const;
    void setGradleWrapperPath(const QString &gradle_wrapper_path);
    bool is_gradle_wrapper_path_Set() const;
    bool is_gradle_wrapper_path_Valid() const;

    bool isIsRoot() const;
    void setIsRoot(const bool &is_root);
    bool is_is_root_Set() const;
    bool is_is_root_Valid() const;

    QString getKeyAlias() const;
    void setKeyAlias(const QString &key_alias);
    bool is_key_alias_Set() const;
    bool is_key_alias_Valid() const;

    QString getKeyPassword() const;
    void setKeyPassword(const QString &key_password);
    bool is_key_password_Set() const;
    bool is_key_password_Valid() const;

    QString getKeystoreEncoded() const;
    void setKeystoreEncoded(const QString &keystore_encoded);
    bool is_keystore_encoded_Set() const;
    bool is_keystore_encoded_Valid() const;

    QString getKeystoreFilename() const;
    void setKeystoreFilename(const QString &keystore_filename);
    bool is_keystore_filename_Set() const;
    bool is_keystore_filename_Valid() const;

    QString getKeystorePassword() const;
    void setKeystorePassword(const QString &keystore_password);
    bool is_keystore_password_Set() const;
    bool is_keystore_password_Valid() const;

    QString getModule() const;
    void setModule(const QString &module);
    bool is_module_Set() const;
    bool is_module_Valid() const;

    bool isRunLint() const;
    void setRunLint(const bool &run_lint);
    bool is_run_lint_Set() const;
    bool is_run_lint_Valid() const;

    bool isRunTests() const;
    void setRunTests(const bool &run_tests);
    bool is_run_tests_Set() const;
    bool is_run_tests_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_automatic_signing;
    bool m_automatic_signing_isSet;
    bool m_automatic_signing_isValid;

    QString m_build_variant;
    bool m_build_variant_isSet;
    bool m_build_variant_isValid;

    QString m_gradle_wrapper_path;
    bool m_gradle_wrapper_path_isSet;
    bool m_gradle_wrapper_path_isValid;

    bool m_is_root;
    bool m_is_root_isSet;
    bool m_is_root_isValid;

    QString m_key_alias;
    bool m_key_alias_isSet;
    bool m_key_alias_isValid;

    QString m_key_password;
    bool m_key_password_isSet;
    bool m_key_password_isValid;

    QString m_keystore_encoded;
    bool m_keystore_encoded_isSet;
    bool m_keystore_encoded_isValid;

    QString m_keystore_filename;
    bool m_keystore_filename_isSet;
    bool m_keystore_filename_isValid;

    QString m_keystore_password;
    bool m_keystore_password_isSet;
    bool m_keystore_password_isValid;

    QString m_module;
    bool m_module_isSet;
    bool m_module_isValid;

    bool m_run_lint;
    bool m_run_lint_isSet;
    bool m_run_lint_isValid;

    bool m_run_tests;
    bool m_run_tests_isSet;
    bool m_run_tests_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBranchConfigurations_get_200_response_allOf_toolsets_android)

#endif // OAIBranchConfigurations_get_200_response_allOf_toolsets_android_H
