/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhooks_list_200_response_values_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhooks_list_200_response_values_inner::OAIWebhooks_list_200_response_values_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhooks_list_200_response_values_inner::OAIWebhooks_list_200_response_values_inner() {
    this->initializeModel();
}

OAIWebhooks_list_200_response_values_inner::~OAIWebhooks_list_200_response_values_inner() {}

void OAIWebhooks_list_200_response_values_inner::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebhooks_list_200_response_values_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhooks_list_200_response_values_inner::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("event_types")]);
    m_event_types_isSet = !json[QString("event_types")].isNull() && m_event_types_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebhooks_list_200_response_values_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhooks_list_200_response_values_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_event_types.size() > 0) {
        obj.insert(QString("event_types"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAIWebhooks_list_200_response_values_inner::isEnabled() const {
    return m_enabled;
}
void OAIWebhooks_list_200_response_values_inner::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWebhooks_list_200_response_values_inner::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWebhooks_list_200_response_values_inner::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIWebhooks_list_200_response_values_inner::getEventTypes() const {
    return m_event_types;
}
void OAIWebhooks_list_200_response_values_inner::setEventTypes(const QList<QString> &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAIWebhooks_list_200_response_values_inner::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAIWebhooks_list_200_response_values_inner::is_event_types_Valid() const{
    return m_event_types_isValid;
}

QString OAIWebhooks_list_200_response_values_inner::getId() const {
    return m_id;
}
void OAIWebhooks_list_200_response_values_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebhooks_list_200_response_values_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebhooks_list_200_response_values_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWebhooks_list_200_response_values_inner::getName() const {
    return m_name;
}
void OAIWebhooks_list_200_response_values_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebhooks_list_200_response_values_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebhooks_list_200_response_values_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWebhooks_list_200_response_values_inner::getUrl() const {
    return m_url;
}
void OAIWebhooks_list_200_response_values_inner::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebhooks_list_200_response_values_inner::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebhooks_list_200_response_values_inner::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebhooks_list_200_response_values_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhooks_list_200_response_values_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_types_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
