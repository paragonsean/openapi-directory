/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersions_Diagnostics_versions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersions_Diagnostics_versions_inner::OAIVersions_Diagnostics_versions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersions_Diagnostics_versions_inner::OAIVersions_Diagnostics_versions_inner() {
    this->initializeModel();
}

OAIVersions_Diagnostics_versions_inner::~OAIVersions_Diagnostics_versions_inner() {}

void OAIVersions_Diagnostics_versions_inner::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_previous_count_isSet = false;
    m_previous_count_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIVersions_Diagnostics_versions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersions_Diagnostics_versions_inner::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_previous_count_isValid = ::OpenAPI::fromJsonValue(m_previous_count, json[QString("previous_count")]);
    m_previous_count_isSet = !json[QString("previous_count")].isNull() && m_previous_count_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIVersions_Diagnostics_versions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersions_Diagnostics_versions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_previous_count_isSet) {
        obj.insert(QString("previous_count"), ::OpenAPI::toJsonValue(m_previous_count));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint64 OAIVersions_Diagnostics_versions_inner::getCount() const {
    return m_count;
}
void OAIVersions_Diagnostics_versions_inner::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIVersions_Diagnostics_versions_inner::is_count_Set() const{
    return m_count_isSet;
}

bool OAIVersions_Diagnostics_versions_inner::is_count_Valid() const{
    return m_count_isValid;
}

qint64 OAIVersions_Diagnostics_versions_inner::getPreviousCount() const {
    return m_previous_count;
}
void OAIVersions_Diagnostics_versions_inner::setPreviousCount(const qint64 &previous_count) {
    m_previous_count = previous_count;
    m_previous_count_isSet = true;
}

bool OAIVersions_Diagnostics_versions_inner::is_previous_count_Set() const{
    return m_previous_count_isSet;
}

bool OAIVersions_Diagnostics_versions_inner::is_previous_count_Valid() const{
    return m_previous_count_isValid;
}

QString OAIVersions_Diagnostics_versions_inner::getVersion() const {
    return m_version;
}
void OAIVersions_Diagnostics_versions_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIVersions_Diagnostics_versions_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIVersions_Diagnostics_versions_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIVersions_Diagnostics_versions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersions_Diagnostics_versions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
