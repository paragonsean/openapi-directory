/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementReleaseDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementReleaseDetailsResponse::OAIManagementReleaseDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementReleaseDetailsResponse::OAIManagementReleaseDetailsResponse() {
    this->initializeModel();
}

OAIManagementReleaseDetailsResponse::~OAIManagementReleaseDetailsResponse() {}

void OAIManagementReleaseDetailsResponse::initializeModel() {

    m_build_version_isSet = false;
    m_build_version_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_distinct_id_isSet = false;
    m_distinct_id_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_sort_version_isSet = false;
    m_sort_version_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIManagementReleaseDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementReleaseDetailsResponse::fromJsonObject(QJsonObject json) {

    m_build_version_isValid = ::OpenAPI::fromJsonValue(m_build_version, json[QString("buildVersion")]);
    m_build_version_isSet = !json[QString("buildVersion")].isNull() && m_build_version_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deletedAt")]);
    m_deleted_at_isSet = !json[QString("deletedAt")].isNull() && m_deleted_at_isValid;

    m_distinct_id_isValid = ::OpenAPI::fromJsonValue(m_distinct_id, json[QString("distinctId")]);
    m_distinct_id_isSet = !json[QString("distinctId")].isNull() && m_distinct_id_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_sort_version_isValid = ::OpenAPI::fromJsonValue(m_sort_version, json[QString("sortVersion")]);
    m_sort_version_isSet = !json[QString("sortVersion")].isNull() && m_sort_version_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIManagementReleaseDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementReleaseDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_build_version_isSet) {
        obj.insert(QString("buildVersion"), ::OpenAPI::toJsonValue(m_build_version));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deletedAt"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_distinct_id_isSet) {
        obj.insert(QString("distinctId"), ::OpenAPI::toJsonValue(m_distinct_id));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_sort_version_isSet) {
        obj.insert(QString("sortVersion"), ::OpenAPI::toJsonValue(m_sort_version));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIManagementReleaseDetailsResponse::getBuildVersion() const {
    return m_build_version;
}
void OAIManagementReleaseDetailsResponse::setBuildVersion(const QString &build_version) {
    m_build_version = build_version;
    m_build_version_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_build_version_Set() const{
    return m_build_version_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_build_version_Valid() const{
    return m_build_version_isValid;
}

QString OAIManagementReleaseDetailsResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIManagementReleaseDetailsResponse::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIManagementReleaseDetailsResponse::getDeletedAt() const {
    return m_deleted_at;
}
void OAIManagementReleaseDetailsResponse::setDeletedAt(const QString &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

qint32 OAIManagementReleaseDetailsResponse::getDistinctId() const {
    return m_distinct_id;
}
void OAIManagementReleaseDetailsResponse::setDistinctId(const qint32 &distinct_id) {
    m_distinct_id = distinct_id;
    m_distinct_id_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_distinct_id_Set() const{
    return m_distinct_id_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_distinct_id_Valid() const{
    return m_distinct_id_isValid;
}

bool OAIManagementReleaseDetailsResponse::isEnabled() const {
    return m_enabled;
}
void OAIManagementReleaseDetailsResponse::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIManagementReleaseDetailsResponse::getOrigin() const {
    return m_origin;
}
void OAIManagementReleaseDetailsResponse::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIManagementReleaseDetailsResponse::getSortVersion() const {
    return m_sort_version;
}
void OAIManagementReleaseDetailsResponse::setSortVersion(const QString &sort_version) {
    m_sort_version = sort_version;
    m_sort_version_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_sort_version_Set() const{
    return m_sort_version_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_sort_version_Valid() const{
    return m_sort_version_isValid;
}

QString OAIManagementReleaseDetailsResponse::getVersion() const {
    return m_version;
}
void OAIManagementReleaseDetailsResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIManagementReleaseDetailsResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIManagementReleaseDetailsResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIManagementReleaseDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinct_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementReleaseDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
