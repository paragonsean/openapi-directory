/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXamarinSDKBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXamarinSDKBundle::OAIXamarinSDKBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXamarinSDKBundle::OAIXamarinSDKBundle() {
    this->initializeModel();
}

OAIXamarinSDKBundle::~OAIXamarinSDKBundle() {}

void OAIXamarinSDKBundle::initializeModel() {

    m_current_isSet = false;
    m_current_isValid = false;

    m_mono_version_isSet = false;
    m_mono_version_isValid = false;

    m_sdk_bundle_isSet = false;
    m_sdk_bundle_isValid = false;

    m_stable_isSet = false;
    m_stable_isValid = false;

    m_xcode_versions_isSet = false;
    m_xcode_versions_isValid = false;
}

void OAIXamarinSDKBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXamarinSDKBundle::fromJsonObject(QJsonObject json) {

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_mono_version_isValid = ::OpenAPI::fromJsonValue(m_mono_version, json[QString("monoVersion")]);
    m_mono_version_isSet = !json[QString("monoVersion")].isNull() && m_mono_version_isValid;

    m_sdk_bundle_isValid = ::OpenAPI::fromJsonValue(m_sdk_bundle, json[QString("sdkBundle")]);
    m_sdk_bundle_isSet = !json[QString("sdkBundle")].isNull() && m_sdk_bundle_isValid;

    m_stable_isValid = ::OpenAPI::fromJsonValue(m_stable, json[QString("stable")]);
    m_stable_isSet = !json[QString("stable")].isNull() && m_stable_isValid;

    m_xcode_versions_isValid = ::OpenAPI::fromJsonValue(m_xcode_versions, json[QString("xcodeVersions")]);
    m_xcode_versions_isSet = !json[QString("xcodeVersions")].isNull() && m_xcode_versions_isValid;
}

QString OAIXamarinSDKBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXamarinSDKBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_mono_version_isSet) {
        obj.insert(QString("monoVersion"), ::OpenAPI::toJsonValue(m_mono_version));
    }
    if (m_sdk_bundle_isSet) {
        obj.insert(QString("sdkBundle"), ::OpenAPI::toJsonValue(m_sdk_bundle));
    }
    if (m_stable_isSet) {
        obj.insert(QString("stable"), ::OpenAPI::toJsonValue(m_stable));
    }
    if (m_xcode_versions.size() > 0) {
        obj.insert(QString("xcodeVersions"), ::OpenAPI::toJsonValue(m_xcode_versions));
    }
    return obj;
}

bool OAIXamarinSDKBundle::isCurrent() const {
    return m_current;
}
void OAIXamarinSDKBundle::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIXamarinSDKBundle::is_current_Set() const{
    return m_current_isSet;
}

bool OAIXamarinSDKBundle::is_current_Valid() const{
    return m_current_isValid;
}

QString OAIXamarinSDKBundle::getMonoVersion() const {
    return m_mono_version;
}
void OAIXamarinSDKBundle::setMonoVersion(const QString &mono_version) {
    m_mono_version = mono_version;
    m_mono_version_isSet = true;
}

bool OAIXamarinSDKBundle::is_mono_version_Set() const{
    return m_mono_version_isSet;
}

bool OAIXamarinSDKBundle::is_mono_version_Valid() const{
    return m_mono_version_isValid;
}

QString OAIXamarinSDKBundle::getSdkBundle() const {
    return m_sdk_bundle;
}
void OAIXamarinSDKBundle::setSdkBundle(const QString &sdk_bundle) {
    m_sdk_bundle = sdk_bundle;
    m_sdk_bundle_isSet = true;
}

bool OAIXamarinSDKBundle::is_sdk_bundle_Set() const{
    return m_sdk_bundle_isSet;
}

bool OAIXamarinSDKBundle::is_sdk_bundle_Valid() const{
    return m_sdk_bundle_isValid;
}

bool OAIXamarinSDKBundle::isStable() const {
    return m_stable;
}
void OAIXamarinSDKBundle::setStable(const bool &stable) {
    m_stable = stable;
    m_stable_isSet = true;
}

bool OAIXamarinSDKBundle::is_stable_Set() const{
    return m_stable_isSet;
}

bool OAIXamarinSDKBundle::is_stable_Valid() const{
    return m_stable_isValid;
}

QList<QString> OAIXamarinSDKBundle::getXcodeVersions() const {
    return m_xcode_versions;
}
void OAIXamarinSDKBundle::setXcodeVersions(const QList<QString> &xcode_versions) {
    m_xcode_versions = xcode_versions;
    m_xcode_versions_isSet = true;
}

bool OAIXamarinSDKBundle::is_xcode_versions_Set() const{
    return m_xcode_versions_isSet;
}

bool OAIXamarinSDKBundle::is_xcode_versions_Valid() const{
    return m_xcode_versions_isValid;
}

bool OAIXamarinSDKBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mono_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_bundle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xcode_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXamarinSDKBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
