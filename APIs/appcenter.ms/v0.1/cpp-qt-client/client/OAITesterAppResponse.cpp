/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITesterAppResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITesterAppResponse::OAITesterAppResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITesterAppResponse::OAITesterAppResponse() {
    this->initializeModel();
}

OAITesterAppResponse::~OAITesterAppResponse() {}

void OAITesterAppResponse::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_source_isSet = false;
    m_icon_source_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_release_type_isSet = false;
    m_release_type_isValid = false;

    m_microsoft_internal_isSet = false;
    m_microsoft_internal_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAITesterAppResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITesterAppResponse::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_icon_source_isValid = ::OpenAPI::fromJsonValue(m_icon_source, json[QString("icon_source")]);
    m_icon_source_isSet = !json[QString("icon_source")].isNull() && m_icon_source_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("icon_url")]);
    m_icon_url_isSet = !json[QString("icon_url")].isNull() && m_icon_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_release_type_isValid = ::OpenAPI::fromJsonValue(m_release_type, json[QString("release_type")]);
    m_release_type_isSet = !json[QString("release_type")].isNull() && m_release_type_isValid;

    m_microsoft_internal_isValid = ::OpenAPI::fromJsonValue(m_microsoft_internal, json[QString("microsoft_internal")]);
    m_microsoft_internal_isSet = !json[QString("microsoft_internal")].isNull() && m_microsoft_internal_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAITesterAppResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITesterAppResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_source_isSet) {
        obj.insert(QString("icon_source"), ::OpenAPI::toJsonValue(m_icon_source));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("icon_url"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_release_type_isSet) {
        obj.insert(QString("release_type"), ::OpenAPI::toJsonValue(m_release_type));
    }
    if (m_microsoft_internal_isSet) {
        obj.insert(QString("microsoft_internal"), ::OpenAPI::toJsonValue(m_microsoft_internal));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QString OAITesterAppResponse::getDescription() const {
    return m_description;
}
void OAITesterAppResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITesterAppResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAITesterAppResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITesterAppResponse::getDisplayName() const {
    return m_display_name;
}
void OAITesterAppResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITesterAppResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITesterAppResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITesterAppResponse::getIconSource() const {
    return m_icon_source;
}
void OAITesterAppResponse::setIconSource(const QString &icon_source) {
    m_icon_source = icon_source;
    m_icon_source_isSet = true;
}

bool OAITesterAppResponse::is_icon_source_Set() const{
    return m_icon_source_isSet;
}

bool OAITesterAppResponse::is_icon_source_Valid() const{
    return m_icon_source_isValid;
}

QString OAITesterAppResponse::getIconUrl() const {
    return m_icon_url;
}
void OAITesterAppResponse::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAITesterAppResponse::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAITesterAppResponse::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAITesterAppResponse::getId() const {
    return m_id;
}
void OAITesterAppResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITesterAppResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAITesterAppResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITesterAppResponse::getName() const {
    return m_name;
}
void OAITesterAppResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITesterAppResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAITesterAppResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITesterAppResponse::getOs() const {
    return m_os;
}
void OAITesterAppResponse::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAITesterAppResponse::is_os_Set() const{
    return m_os_isSet;
}

bool OAITesterAppResponse::is_os_Valid() const{
    return m_os_isValid;
}

OAIApps_list_200_response_inner_allOf_owner OAITesterAppResponse::getOwner() const {
    return m_owner;
}
void OAITesterAppResponse::setOwner(const OAIApps_list_200_response_inner_allOf_owner &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAITesterAppResponse::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAITesterAppResponse::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAITesterAppResponse::getReleaseType() const {
    return m_release_type;
}
void OAITesterAppResponse::setReleaseType(const QString &release_type) {
    m_release_type = release_type;
    m_release_type_isSet = true;
}

bool OAITesterAppResponse::is_release_type_Set() const{
    return m_release_type_isSet;
}

bool OAITesterAppResponse::is_release_type_Valid() const{
    return m_release_type_isValid;
}

bool OAITesterAppResponse::isMicrosoftInternal() const {
    return m_microsoft_internal;
}
void OAITesterAppResponse::setMicrosoftInternal(const bool &microsoft_internal) {
    m_microsoft_internal = microsoft_internal;
    m_microsoft_internal_isSet = true;
}

bool OAITesterAppResponse::is_microsoft_internal_Set() const{
    return m_microsoft_internal_isSet;
}

bool OAITesterAppResponse::is_microsoft_internal_Valid() const{
    return m_microsoft_internal_isValid;
}

QList<QString> OAITesterAppResponse::getPermissions() const {
    return m_permissions;
}
void OAITesterAppResponse::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAITesterAppResponse::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAITesterAppResponse::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAITesterAppResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_internal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITesterAppResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_id_isValid && m_name_isValid && m_os_isValid && m_owner_isValid && true;
}

} // namespace OpenAPI
