/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRunState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRunState::OAITestRunState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRunState::OAITestRunState() {
    this->initializeModel();
}

OAITestRunState::~OAITestRunState() {}

void OAITestRunState::initializeModel() {

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_wait_time_isSet = false;
    m_wait_time_isValid = false;
}

void OAITestRunState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRunState::fromJsonObject(QJsonObject json) {

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exit_code")]);
    m_exit_code_isSet = !json[QString("exit_code")].isNull() && m_exit_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_wait_time_isValid = ::OpenAPI::fromJsonValue(m_wait_time, json[QString("wait_time")]);
    m_wait_time_isSet = !json[QString("wait_time")].isNull() && m_wait_time_isValid;
}

QString OAITestRunState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRunState::asJsonObject() const {
    QJsonObject obj;
    if (m_exit_code_isSet) {
        obj.insert(QString("exit_code"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_message.size() > 0) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_wait_time_isSet) {
        obj.insert(QString("wait_time"), ::OpenAPI::toJsonValue(m_wait_time));
    }
    return obj;
}

qint32 OAITestRunState::getExitCode() const {
    return m_exit_code;
}
void OAITestRunState::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAITestRunState::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAITestRunState::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QList<QString> OAITestRunState::getMessage() const {
    return m_message;
}
void OAITestRunState::setMessage(const QList<QString> &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITestRunState::is_message_Set() const{
    return m_message_isSet;
}

bool OAITestRunState::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAITestRunState::getWaitTime() const {
    return m_wait_time;
}
void OAITestRunState::setWaitTime(const qint32 &wait_time) {
    m_wait_time = wait_time;
    m_wait_time_isSet = true;
}

bool OAITestRunState::is_wait_time_Set() const{
    return m_wait_time_isSet;
}

bool OAITestRunState::is_wait_time_Valid() const{
    return m_wait_time_isValid;
}

bool OAITestRunState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRunState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
