/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_concurrent_devices_limit_isSet = false;
    m_concurrent_devices_limit_isValid = false;

    m_days_left_isSet = false;
    m_days_left_isValid = false;

    m_ends_at_isSet = false;
    m_ends_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_running_devices_isSet = false;
    m_running_devices_isValid = false;

    m_starts_at_isSet = false;
    m_starts_at_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_concurrent_devices_limit_isValid = ::OpenAPI::fromJsonValue(m_concurrent_devices_limit, json[QString("concurrentDevicesLimit")]);
    m_concurrent_devices_limit_isSet = !json[QString("concurrentDevicesLimit")].isNull() && m_concurrent_devices_limit_isValid;

    m_days_left_isValid = ::OpenAPI::fromJsonValue(m_days_left, json[QString("daysLeft")]);
    m_days_left_isSet = !json[QString("daysLeft")].isNull() && m_days_left_isValid;

    m_ends_at_isValid = ::OpenAPI::fromJsonValue(m_ends_at, json[QString("endsAt")]);
    m_ends_at_isSet = !json[QString("endsAt")].isNull() && m_ends_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_running_devices_isValid = ::OpenAPI::fromJsonValue(m_running_devices, json[QString("runningDevices")]);
    m_running_devices_isSet = !json[QString("runningDevices")].isNull() && m_running_devices_isValid;

    m_starts_at_isValid = ::OpenAPI::fromJsonValue(m_starts_at, json[QString("startsAt")]);
    m_starts_at_isSet = !json[QString("startsAt")].isNull() && m_starts_at_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_concurrent_devices_limit_isSet) {
        obj.insert(QString("concurrentDevicesLimit"), ::OpenAPI::toJsonValue(m_concurrent_devices_limit));
    }
    if (m_days_left_isSet) {
        obj.insert(QString("daysLeft"), ::OpenAPI::toJsonValue(m_days_left));
    }
    if (m_ends_at_isSet) {
        obj.insert(QString("endsAt"), ::OpenAPI::toJsonValue(m_ends_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_running_devices_isSet) {
        obj.insert(QString("runningDevices"), ::OpenAPI::toJsonValue(m_running_devices));
    }
    if (m_starts_at_isSet) {
        obj.insert(QString("startsAt"), ::OpenAPI::toJsonValue(m_starts_at));
    }
    if (m_tier.isSet()) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

bool OAISubscription::isActive() const {
    return m_active;
}
void OAISubscription::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISubscription::is_active_Set() const{
    return m_active_isSet;
}

bool OAISubscription::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAISubscription::getConcurrentDevicesLimit() const {
    return m_concurrent_devices_limit;
}
void OAISubscription::setConcurrentDevicesLimit(const qint32 &concurrent_devices_limit) {
    m_concurrent_devices_limit = concurrent_devices_limit;
    m_concurrent_devices_limit_isSet = true;
}

bool OAISubscription::is_concurrent_devices_limit_Set() const{
    return m_concurrent_devices_limit_isSet;
}

bool OAISubscription::is_concurrent_devices_limit_Valid() const{
    return m_concurrent_devices_limit_isValid;
}

double OAISubscription::getDaysLeft() const {
    return m_days_left;
}
void OAISubscription::setDaysLeft(const double &days_left) {
    m_days_left = days_left;
    m_days_left_isSet = true;
}

bool OAISubscription::is_days_left_Set() const{
    return m_days_left_isSet;
}

bool OAISubscription::is_days_left_Valid() const{
    return m_days_left_isValid;
}

QString OAISubscription::getEndsAt() const {
    return m_ends_at;
}
void OAISubscription::setEndsAt(const QString &ends_at) {
    m_ends_at = ends_at;
    m_ends_at_isSet = true;
}

bool OAISubscription::is_ends_at_Set() const{
    return m_ends_at_isSet;
}

bool OAISubscription::is_ends_at_Valid() const{
    return m_ends_at_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISubscription::getRunningDevices() const {
    return m_running_devices;
}
void OAISubscription::setRunningDevices(const qint32 &running_devices) {
    m_running_devices = running_devices;
    m_running_devices_isSet = true;
}

bool OAISubscription::is_running_devices_Set() const{
    return m_running_devices_isSet;
}

bool OAISubscription::is_running_devices_Valid() const{
    return m_running_devices_isValid;
}

QString OAISubscription::getStartsAt() const {
    return m_starts_at;
}
void OAISubscription::setStartsAt(const QString &starts_at) {
    m_starts_at = starts_at;
    m_starts_at_isSet = true;
}

bool OAISubscription::is_starts_at_Set() const{
    return m_starts_at_isSet;
}

bool OAISubscription::is_starts_at_Valid() const{
    return m_starts_at_isValid;
}

OAISubscription_Tier OAISubscription::getTier() const {
    return m_tier;
}
void OAISubscription::setTier(const OAISubscription_Tier &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAISubscription::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAISubscription::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_concurrent_devices_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_days_left_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ends_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_running_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
