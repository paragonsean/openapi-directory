/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportConfiguration::OAIExportConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportConfiguration::OAIExportConfiguration() {
    this->initializeModel();
}

OAIExportConfiguration::~OAIExportConfiguration() {}

void OAIExportConfiguration::initializeModel() {

    m_backfill_isSet = false;
    m_backfill_isValid = false;

    m_export_entities_isSet = false;
    m_export_entities_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExportConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportConfiguration::fromJsonObject(QJsonObject json) {

    m_backfill_isValid = ::OpenAPI::fromJsonValue(m_backfill, json[QString("backfill")]);
    m_backfill_isSet = !json[QString("backfill")].isNull() && m_backfill_isValid;

    m_export_entities_isValid = ::OpenAPI::fromJsonValue(m_export_entities, json[QString("export_entities")]);
    m_export_entities_isSet = !json[QString("export_entities")].isNull() && m_export_entities_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resource_group")]);
    m_resource_group_isSet = !json[QString("resource_group")].isNull() && m_resource_group_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resource_name")]);
    m_resource_name_isSet = !json[QString("resource_name")].isNull() && m_resource_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExportConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_backfill_isSet) {
        obj.insert(QString("backfill"), ::OpenAPI::toJsonValue(m_backfill));
    }
    if (m_export_entities.size() > 0) {
        obj.insert(QString("export_entities"), ::OpenAPI::toJsonValue(m_export_entities));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resource_group"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resource_name"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIExportConfiguration::isBackfill() const {
    return m_backfill;
}
void OAIExportConfiguration::setBackfill(const bool &backfill) {
    m_backfill = backfill;
    m_backfill_isSet = true;
}

bool OAIExportConfiguration::is_backfill_Set() const{
    return m_backfill_isSet;
}

bool OAIExportConfiguration::is_backfill_Valid() const{
    return m_backfill_isValid;
}

QList<QString> OAIExportConfiguration::getExportEntities() const {
    return m_export_entities;
}
void OAIExportConfiguration::setExportEntities(const QList<QString> &export_entities) {
    m_export_entities = export_entities;
    m_export_entities_isSet = true;
}

bool OAIExportConfiguration::is_export_entities_Set() const{
    return m_export_entities_isSet;
}

bool OAIExportConfiguration::is_export_entities_Valid() const{
    return m_export_entities_isValid;
}

QString OAIExportConfiguration::getResourceGroup() const {
    return m_resource_group;
}
void OAIExportConfiguration::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIExportConfiguration::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIExportConfiguration::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIExportConfiguration::getResourceName() const {
    return m_resource_name;
}
void OAIExportConfiguration::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIExportConfiguration::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIExportConfiguration::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIExportConfiguration::getType() const {
    return m_type;
}
void OAIExportConfiguration::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExportConfiguration::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExportConfiguration::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExportConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backfill_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
