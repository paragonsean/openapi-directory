/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddOrganizationAdminRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddOrganizationAdminRequest::OAIAddOrganizationAdminRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddOrganizationAdminRequest::OAIAddOrganizationAdminRequest() {
    this->initializeModel();
}

OAIAddOrganizationAdminRequest::~OAIAddOrganizationAdminRequest() {}

void OAIAddOrganizationAdminRequest::initializeModel() {

    m_assigning_reason_isSet = false;
    m_assigning_reason_isValid = false;

    m_issue_id_isSet = false;
    m_issue_id_isValid = false;

    m_new_org_admin_id_isSet = false;
    m_new_org_admin_id_isValid = false;

    m_responsible_admin_id_isSet = false;
    m_responsible_admin_id_isValid = false;
}

void OAIAddOrganizationAdminRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddOrganizationAdminRequest::fromJsonObject(QJsonObject json) {

    m_assigning_reason_isValid = ::OpenAPI::fromJsonValue(m_assigning_reason, json[QString("assigning_reason")]);
    m_assigning_reason_isSet = !json[QString("assigning_reason")].isNull() && m_assigning_reason_isValid;

    m_issue_id_isValid = ::OpenAPI::fromJsonValue(m_issue_id, json[QString("issue_id")]);
    m_issue_id_isSet = !json[QString("issue_id")].isNull() && m_issue_id_isValid;

    m_new_org_admin_id_isValid = ::OpenAPI::fromJsonValue(m_new_org_admin_id, json[QString("new_org_admin_id")]);
    m_new_org_admin_id_isSet = !json[QString("new_org_admin_id")].isNull() && m_new_org_admin_id_isValid;

    m_responsible_admin_id_isValid = ::OpenAPI::fromJsonValue(m_responsible_admin_id, json[QString("responsible_admin_id")]);
    m_responsible_admin_id_isSet = !json[QString("responsible_admin_id")].isNull() && m_responsible_admin_id_isValid;
}

QString OAIAddOrganizationAdminRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddOrganizationAdminRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assigning_reason_isSet) {
        obj.insert(QString("assigning_reason"), ::OpenAPI::toJsonValue(m_assigning_reason));
    }
    if (m_issue_id_isSet) {
        obj.insert(QString("issue_id"), ::OpenAPI::toJsonValue(m_issue_id));
    }
    if (m_new_org_admin_id_isSet) {
        obj.insert(QString("new_org_admin_id"), ::OpenAPI::toJsonValue(m_new_org_admin_id));
    }
    if (m_responsible_admin_id_isSet) {
        obj.insert(QString("responsible_admin_id"), ::OpenAPI::toJsonValue(m_responsible_admin_id));
    }
    return obj;
}

QString OAIAddOrganizationAdminRequest::getAssigningReason() const {
    return m_assigning_reason;
}
void OAIAddOrganizationAdminRequest::setAssigningReason(const QString &assigning_reason) {
    m_assigning_reason = assigning_reason;
    m_assigning_reason_isSet = true;
}

bool OAIAddOrganizationAdminRequest::is_assigning_reason_Set() const{
    return m_assigning_reason_isSet;
}

bool OAIAddOrganizationAdminRequest::is_assigning_reason_Valid() const{
    return m_assigning_reason_isValid;
}

QString OAIAddOrganizationAdminRequest::getIssueId() const {
    return m_issue_id;
}
void OAIAddOrganizationAdminRequest::setIssueId(const QString &issue_id) {
    m_issue_id = issue_id;
    m_issue_id_isSet = true;
}

bool OAIAddOrganizationAdminRequest::is_issue_id_Set() const{
    return m_issue_id_isSet;
}

bool OAIAddOrganizationAdminRequest::is_issue_id_Valid() const{
    return m_issue_id_isValid;
}

QString OAIAddOrganizationAdminRequest::getNewOrgAdminId() const {
    return m_new_org_admin_id;
}
void OAIAddOrganizationAdminRequest::setNewOrgAdminId(const QString &new_org_admin_id) {
    m_new_org_admin_id = new_org_admin_id;
    m_new_org_admin_id_isSet = true;
}

bool OAIAddOrganizationAdminRequest::is_new_org_admin_id_Set() const{
    return m_new_org_admin_id_isSet;
}

bool OAIAddOrganizationAdminRequest::is_new_org_admin_id_Valid() const{
    return m_new_org_admin_id_isValid;
}

QString OAIAddOrganizationAdminRequest::getResponsibleAdminId() const {
    return m_responsible_admin_id;
}
void OAIAddOrganizationAdminRequest::setResponsibleAdminId(const QString &responsible_admin_id) {
    m_responsible_admin_id = responsible_admin_id;
    m_responsible_admin_id_isSet = true;
}

bool OAIAddOrganizationAdminRequest::is_responsible_admin_id_Set() const{
    return m_responsible_admin_id_isSet;
}

bool OAIAddOrganizationAdminRequest::is_responsible_admin_id_Valid() const{
    return m_responsible_admin_id_isValid;
}

bool OAIAddOrganizationAdminRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigning_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_org_admin_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsible_admin_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddOrganizationAdminRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assigning_reason_isValid && m_issue_id_isValid && m_new_org_admin_id_isValid && m_responsible_admin_id_isValid && true;
}

} // namespace OpenAPI
