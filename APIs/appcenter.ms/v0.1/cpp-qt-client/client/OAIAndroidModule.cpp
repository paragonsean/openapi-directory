/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidModule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidModule::OAIAndroidModule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidModule::OAIAndroidModule() {
    this->initializeModel();
}

OAIAndroidModule::~OAIAndroidModule() {}

void OAIAndroidModule::initializeModel() {

    m_build_configurations_isSet = false;
    m_build_configurations_isValid = false;

    m_build_types_isSet = false;
    m_build_types_isValid = false;

    m_build_variants_isSet = false;
    m_build_variants_isValid = false;

    m_has_bundle_isSet = false;
    m_has_bundle_isValid = false;

    m_is_root_isSet = false;
    m_is_root_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_flavors_isSet = false;
    m_product_flavors_isValid = false;
}

void OAIAndroidModule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidModule::fromJsonObject(QJsonObject json) {

    m_build_configurations_isValid = ::OpenAPI::fromJsonValue(m_build_configurations, json[QString("buildConfigurations")]);
    m_build_configurations_isSet = !json[QString("buildConfigurations")].isNull() && m_build_configurations_isValid;

    m_build_types_isValid = ::OpenAPI::fromJsonValue(m_build_types, json[QString("buildTypes")]);
    m_build_types_isSet = !json[QString("buildTypes")].isNull() && m_build_types_isValid;

    m_build_variants_isValid = ::OpenAPI::fromJsonValue(m_build_variants, json[QString("buildVariants")]);
    m_build_variants_isSet = !json[QString("buildVariants")].isNull() && m_build_variants_isValid;

    m_has_bundle_isValid = ::OpenAPI::fromJsonValue(m_has_bundle, json[QString("hasBundle")]);
    m_has_bundle_isSet = !json[QString("hasBundle")].isNull() && m_has_bundle_isValid;

    m_is_root_isValid = ::OpenAPI::fromJsonValue(m_is_root, json[QString("isRoot")]);
    m_is_root_isSet = !json[QString("isRoot")].isNull() && m_is_root_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_flavors_isValid = ::OpenAPI::fromJsonValue(m_product_flavors, json[QString("productFlavors")]);
    m_product_flavors_isSet = !json[QString("productFlavors")].isNull() && m_product_flavors_isValid;
}

QString OAIAndroidModule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidModule::asJsonObject() const {
    QJsonObject obj;
    if (m_build_configurations.size() > 0) {
        obj.insert(QString("buildConfigurations"), ::OpenAPI::toJsonValue(m_build_configurations));
    }
    if (m_build_types.size() > 0) {
        obj.insert(QString("buildTypes"), ::OpenAPI::toJsonValue(m_build_types));
    }
    if (m_build_variants.size() > 0) {
        obj.insert(QString("buildVariants"), ::OpenAPI::toJsonValue(m_build_variants));
    }
    if (m_has_bundle_isSet) {
        obj.insert(QString("hasBundle"), ::OpenAPI::toJsonValue(m_has_bundle));
    }
    if (m_is_root_isSet) {
        obj.insert(QString("isRoot"), ::OpenAPI::toJsonValue(m_is_root));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_flavors.size() > 0) {
        obj.insert(QString("productFlavors"), ::OpenAPI::toJsonValue(m_product_flavors));
    }
    return obj;
}

QList<OAIBuilds_listToolsetProjects_200_response_android_androidModules_inner_buildConfigurations_inner> OAIAndroidModule::getBuildConfigurations() const {
    return m_build_configurations;
}
void OAIAndroidModule::setBuildConfigurations(const QList<OAIBuilds_listToolsetProjects_200_response_android_androidModules_inner_buildConfigurations_inner> &build_configurations) {
    m_build_configurations = build_configurations;
    m_build_configurations_isSet = true;
}

bool OAIAndroidModule::is_build_configurations_Set() const{
    return m_build_configurations_isSet;
}

bool OAIAndroidModule::is_build_configurations_Valid() const{
    return m_build_configurations_isValid;
}

QList<QString> OAIAndroidModule::getBuildTypes() const {
    return m_build_types;
}
void OAIAndroidModule::setBuildTypes(const QList<QString> &build_types) {
    m_build_types = build_types;
    m_build_types_isSet = true;
}

bool OAIAndroidModule::is_build_types_Set() const{
    return m_build_types_isSet;
}

bool OAIAndroidModule::is_build_types_Valid() const{
    return m_build_types_isValid;
}

QList<QString> OAIAndroidModule::getBuildVariants() const {
    return m_build_variants;
}
void OAIAndroidModule::setBuildVariants(const QList<QString> &build_variants) {
    m_build_variants = build_variants;
    m_build_variants_isSet = true;
}

bool OAIAndroidModule::is_build_variants_Set() const{
    return m_build_variants_isSet;
}

bool OAIAndroidModule::is_build_variants_Valid() const{
    return m_build_variants_isValid;
}

bool OAIAndroidModule::isHasBundle() const {
    return m_has_bundle;
}
void OAIAndroidModule::setHasBundle(const bool &has_bundle) {
    m_has_bundle = has_bundle;
    m_has_bundle_isSet = true;
}

bool OAIAndroidModule::is_has_bundle_Set() const{
    return m_has_bundle_isSet;
}

bool OAIAndroidModule::is_has_bundle_Valid() const{
    return m_has_bundle_isValid;
}

bool OAIAndroidModule::isIsRoot() const {
    return m_is_root;
}
void OAIAndroidModule::setIsRoot(const bool &is_root) {
    m_is_root = is_root;
    m_is_root_isSet = true;
}

bool OAIAndroidModule::is_is_root_Set() const{
    return m_is_root_isSet;
}

bool OAIAndroidModule::is_is_root_Valid() const{
    return m_is_root_isValid;
}

QString OAIAndroidModule::getName() const {
    return m_name;
}
void OAIAndroidModule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAndroidModule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAndroidModule::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIAndroidModule::getProductFlavors() const {
    return m_product_flavors;
}
void OAIAndroidModule::setProductFlavors(const QList<QString> &product_flavors) {
    m_product_flavors = product_flavors;
    m_product_flavors_isSet = true;
}

bool OAIAndroidModule::is_product_flavors_Set() const{
    return m_product_flavors_isSet;
}

bool OAIAndroidModule::is_product_flavors_Valid() const{
    return m_product_flavors_isValid;
}

bool OAIAndroidModule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_variants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_bundle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_flavors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidModule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
