/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildServiceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildServiceStatus::OAIBuildServiceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildServiceStatus::OAIBuildServiceStatus() {
    this->initializeModel();
}

OAIBuildServiceStatus::~OAIBuildServiceStatus() {}

void OAIBuildServiceStatus::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_valid_until_isSet = false;
    m_valid_until_isValid = false;
}

void OAIBuildServiceStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildServiceStatus::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_valid_until_isValid = ::OpenAPI::fromJsonValue(m_valid_until, json[QString("valid_until")]);
    m_valid_until_isSet = !json[QString("valid_until")].isNull() && m_valid_until_isValid;
}

QString OAIBuildServiceStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildServiceStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_valid_until_isSet) {
        obj.insert(QString("valid_until"), ::OpenAPI::toJsonValue(m_valid_until));
    }
    return obj;
}

QString OAIBuildServiceStatus::getMessage() const {
    return m_message;
}
void OAIBuildServiceStatus::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBuildServiceStatus::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBuildServiceStatus::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIBuildServiceStatus::getOs() const {
    return m_os;
}
void OAIBuildServiceStatus::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIBuildServiceStatus::is_os_Set() const{
    return m_os_isSet;
}

bool OAIBuildServiceStatus::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIBuildServiceStatus::getService() const {
    return m_service;
}
void OAIBuildServiceStatus::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIBuildServiceStatus::is_service_Set() const{
    return m_service_isSet;
}

bool OAIBuildServiceStatus::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIBuildServiceStatus::getStatus() const {
    return m_status;
}
void OAIBuildServiceStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBuildServiceStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBuildServiceStatus::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBuildServiceStatus::getUrl() const {
    return m_url;
}
void OAIBuildServiceStatus::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBuildServiceStatus::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBuildServiceStatus::is_url_Valid() const{
    return m_url_isValid;
}

qint32 OAIBuildServiceStatus::getValidUntil() const {
    return m_valid_until;
}
void OAIBuildServiceStatus::setValidUntil(const qint32 &valid_until) {
    m_valid_until = valid_until;
    m_valid_until_isSet = true;
}

bool OAIBuildServiceStatus::is_valid_until_Set() const{
    return m_valid_until_isSet;
}

bool OAIBuildServiceStatus::is_valid_until_Valid() const{
    return m_valid_until_isValid;
}

bool OAIBuildServiceStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildServiceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
