/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppRequest::OAIAppRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppRequest::OAIAppRequest() {
    this->initializeModel();
}

OAIAppRequest::~OAIAppRequest() {}

void OAIAppRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_release_type_isSet = false;
    m_release_type_isValid = false;
}

void OAIAppRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_release_type_isValid = ::OpenAPI::fromJsonValue(m_release_type, json[QString("release_type")]);
    m_release_type_isSet = !json[QString("release_type")].isNull() && m_release_type_isValid;
}

QString OAIAppRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_release_type_isSet) {
        obj.insert(QString("release_type"), ::OpenAPI::toJsonValue(m_release_type));
    }
    return obj;
}

QString OAIAppRequest::getDescription() const {
    return m_description;
}
void OAIAppRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAppRequest::getDisplayName() const {
    return m_display_name;
}
void OAIAppRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAppRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAppRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAppRequest::getName() const {
    return m_name;
}
void OAIAppRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAppRequest::getOs() const {
    return m_os;
}
void OAIAppRequest::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIAppRequest::is_os_Set() const{
    return m_os_isSet;
}

bool OAIAppRequest::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIAppRequest::getPlatform() const {
    return m_platform;
}
void OAIAppRequest::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAppRequest::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAppRequest::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIAppRequest::getReleaseType() const {
    return m_release_type;
}
void OAIAppRequest::setReleaseType(const QString &release_type) {
    m_release_type = release_type;
    m_release_type_isSet = true;
}

bool OAIAppRequest::is_release_type_Set() const{
    return m_release_type_isSet;
}

bool OAIAppRequest::is_release_type_Valid() const{
    return m_release_type_isValid;
}

bool OAIAppRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_os_isValid && m_platform_isValid && true;
}

} // namespace OpenAPI
