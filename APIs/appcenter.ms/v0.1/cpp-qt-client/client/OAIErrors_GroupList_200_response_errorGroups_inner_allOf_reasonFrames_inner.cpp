/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner() {
    this->initializeModel();
}

OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::~OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner() {}

void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::initializeModel() {

    m_app_code_isSet = false;
    m_app_code_isValid = false;

    m_class_method_isSet = false;
    m_class_method_isValid = false;

    m_class_name_isSet = false;
    m_class_name_isValid = false;

    m_code_formatted_isSet = false;
    m_code_formatted_isValid = false;

    m_code_raw_isSet = false;
    m_code_raw_isValid = false;

    m_exception_type_isSet = false;
    m_exception_type_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_framework_name_isSet = false;
    m_framework_name_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_method_params_isSet = false;
    m_method_params_isValid = false;

    m_os_exception_type_isSet = false;
    m_os_exception_type_isValid = false;
}

void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::fromJsonObject(QJsonObject json) {

    m_app_code_isValid = ::OpenAPI::fromJsonValue(m_app_code, json[QString("appCode")]);
    m_app_code_isSet = !json[QString("appCode")].isNull() && m_app_code_isValid;

    m_class_method_isValid = ::OpenAPI::fromJsonValue(m_class_method, json[QString("classMethod")]);
    m_class_method_isSet = !json[QString("classMethod")].isNull() && m_class_method_isValid;

    m_class_name_isValid = ::OpenAPI::fromJsonValue(m_class_name, json[QString("className")]);
    m_class_name_isSet = !json[QString("className")].isNull() && m_class_name_isValid;

    m_code_formatted_isValid = ::OpenAPI::fromJsonValue(m_code_formatted, json[QString("codeFormatted")]);
    m_code_formatted_isSet = !json[QString("codeFormatted")].isNull() && m_code_formatted_isValid;

    m_code_raw_isValid = ::OpenAPI::fromJsonValue(m_code_raw, json[QString("codeRaw")]);
    m_code_raw_isSet = !json[QString("codeRaw")].isNull() && m_code_raw_isValid;

    m_exception_type_isValid = ::OpenAPI::fromJsonValue(m_exception_type, json[QString("exceptionType")]);
    m_exception_type_isSet = !json[QString("exceptionType")].isNull() && m_exception_type_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_framework_name_isValid = ::OpenAPI::fromJsonValue(m_framework_name, json[QString("frameworkName")]);
    m_framework_name_isSet = !json[QString("frameworkName")].isNull() && m_framework_name_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_method_params_isValid = ::OpenAPI::fromJsonValue(m_method_params, json[QString("methodParams")]);
    m_method_params_isSet = !json[QString("methodParams")].isNull() && m_method_params_isValid;

    m_os_exception_type_isValid = ::OpenAPI::fromJsonValue(m_os_exception_type, json[QString("osExceptionType")]);
    m_os_exception_type_isSet = !json[QString("osExceptionType")].isNull() && m_os_exception_type_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_app_code_isSet) {
        obj.insert(QString("appCode"), ::OpenAPI::toJsonValue(m_app_code));
    }
    if (m_class_method_isSet) {
        obj.insert(QString("classMethod"), ::OpenAPI::toJsonValue(m_class_method));
    }
    if (m_class_name_isSet) {
        obj.insert(QString("className"), ::OpenAPI::toJsonValue(m_class_name));
    }
    if (m_code_formatted_isSet) {
        obj.insert(QString("codeFormatted"), ::OpenAPI::toJsonValue(m_code_formatted));
    }
    if (m_code_raw_isSet) {
        obj.insert(QString("codeRaw"), ::OpenAPI::toJsonValue(m_code_raw));
    }
    if (m_exception_type_isSet) {
        obj.insert(QString("exceptionType"), ::OpenAPI::toJsonValue(m_exception_type));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_framework_name_isSet) {
        obj.insert(QString("frameworkName"), ::OpenAPI::toJsonValue(m_framework_name));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_method_params_isSet) {
        obj.insert(QString("methodParams"), ::OpenAPI::toJsonValue(m_method_params));
    }
    if (m_os_exception_type_isSet) {
        obj.insert(QString("osExceptionType"), ::OpenAPI::toJsonValue(m_os_exception_type));
    }
    return obj;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::isAppCode() const {
    return m_app_code;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setAppCode(const bool &app_code) {
    m_app_code = app_code;
    m_app_code_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_app_code_Set() const{
    return m_app_code_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_app_code_Valid() const{
    return m_app_code_isValid;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::isClassMethod() const {
    return m_class_method;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setClassMethod(const bool &class_method) {
    m_class_method = class_method;
    m_class_method_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_class_method_Set() const{
    return m_class_method_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_class_method_Valid() const{
    return m_class_method_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getClassName() const {
    return m_class_name;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setClassName(const QString &class_name) {
    m_class_name = class_name;
    m_class_name_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_class_name_Set() const{
    return m_class_name_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_class_name_Valid() const{
    return m_class_name_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getCodeFormatted() const {
    return m_code_formatted;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setCodeFormatted(const QString &code_formatted) {
    m_code_formatted = code_formatted;
    m_code_formatted_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_code_formatted_Set() const{
    return m_code_formatted_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_code_formatted_Valid() const{
    return m_code_formatted_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getCodeRaw() const {
    return m_code_raw;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setCodeRaw(const QString &code_raw) {
    m_code_raw = code_raw;
    m_code_raw_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_code_raw_Set() const{
    return m_code_raw_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_code_raw_Valid() const{
    return m_code_raw_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getExceptionType() const {
    return m_exception_type;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setExceptionType(const QString &exception_type) {
    m_exception_type = exception_type;
    m_exception_type_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_exception_type_Set() const{
    return m_exception_type_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_exception_type_Valid() const{
    return m_exception_type_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getFile() const {
    return m_file;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_file_Set() const{
    return m_file_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getFrameworkName() const {
    return m_framework_name;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setFrameworkName(const QString &framework_name) {
    m_framework_name = framework_name;
    m_framework_name_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_framework_name_Set() const{
    return m_framework_name_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_framework_name_Valid() const{
    return m_framework_name_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getLanguage() const {
    return m_language;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_language_Set() const{
    return m_language_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_language_Valid() const{
    return m_language_isValid;
}

qint32 OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getLine() const {
    return m_line;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setLine(const qint32 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_line_Set() const{
    return m_line_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getMethod() const {
    return m_method;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_method_Set() const{
    return m_method_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getMethodParams() const {
    return m_method_params;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setMethodParams(const QString &method_params) {
    m_method_params = method_params;
    m_method_params_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_method_params_Set() const{
    return m_method_params_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_method_params_Valid() const{
    return m_method_params_isValid;
}

QString OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::getOsExceptionType() const {
    return m_os_exception_type;
}
void OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::setOsExceptionType(const QString &os_exception_type) {
    m_os_exception_type = os_exception_type;
    m_os_exception_type_isSet = true;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_os_exception_type_Set() const{
    return m_os_exception_type_isSet;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::is_os_exception_type_Valid() const{
    return m_os_exception_type_isValid;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_formatted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_exception_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrors_GroupList_200_response_errorGroups_inner_allOf_reasonFrames_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
