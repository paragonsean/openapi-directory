/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppleTestFlightGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppleTestFlightGroupRequest::OAIAppleTestFlightGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppleTestFlightGroupRequest::OAIAppleTestFlightGroupRequest() {
    this->initializeModel();
}

OAIAppleTestFlightGroupRequest::~OAIAppleTestFlightGroupRequest() {}

void OAIAppleTestFlightGroupRequest::initializeModel() {

    m_apple_id_isSet = false;
    m_apple_id_isValid = false;

    m_bundle_identifier_isSet = false;
    m_bundle_identifier_isValid = false;

    m_cookie_isSet = false;
    m_cookie_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_service_connection_id_isSet = false;
    m_service_connection_id_isValid = false;

    m_team_identifier_isSet = false;
    m_team_identifier_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIAppleTestFlightGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppleTestFlightGroupRequest::fromJsonObject(QJsonObject json) {

    m_apple_id_isValid = ::OpenAPI::fromJsonValue(m_apple_id, json[QString("apple_id")]);
    m_apple_id_isSet = !json[QString("apple_id")].isNull() && m_apple_id_isValid;

    m_bundle_identifier_isValid = ::OpenAPI::fromJsonValue(m_bundle_identifier, json[QString("bundle_identifier")]);
    m_bundle_identifier_isSet = !json[QString("bundle_identifier")].isNull() && m_bundle_identifier_isValid;

    m_cookie_isValid = ::OpenAPI::fromJsonValue(m_cookie, json[QString("cookie")]);
    m_cookie_isSet = !json[QString("cookie")].isNull() && m_cookie_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_service_connection_id_isValid = ::OpenAPI::fromJsonValue(m_service_connection_id, json[QString("service_connection_id")]);
    m_service_connection_id_isSet = !json[QString("service_connection_id")].isNull() && m_service_connection_id_isValid;

    m_team_identifier_isValid = ::OpenAPI::fromJsonValue(m_team_identifier, json[QString("team_identifier")]);
    m_team_identifier_isSet = !json[QString("team_identifier")].isNull() && m_team_identifier_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIAppleTestFlightGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppleTestFlightGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_apple_id_isSet) {
        obj.insert(QString("apple_id"), ::OpenAPI::toJsonValue(m_apple_id));
    }
    if (m_bundle_identifier_isSet) {
        obj.insert(QString("bundle_identifier"), ::OpenAPI::toJsonValue(m_bundle_identifier));
    }
    if (m_cookie_isSet) {
        obj.insert(QString("cookie"), ::OpenAPI::toJsonValue(m_cookie));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_service_connection_id_isSet) {
        obj.insert(QString("service_connection_id"), ::OpenAPI::toJsonValue(m_service_connection_id));
    }
    if (m_team_identifier_isSet) {
        obj.insert(QString("team_identifier"), ::OpenAPI::toJsonValue(m_team_identifier));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIAppleTestFlightGroupRequest::getAppleId() const {
    return m_apple_id;
}
void OAIAppleTestFlightGroupRequest::setAppleId(const QString &apple_id) {
    m_apple_id = apple_id;
    m_apple_id_isSet = true;
}

bool OAIAppleTestFlightGroupRequest::is_apple_id_Set() const{
    return m_apple_id_isSet;
}

bool OAIAppleTestFlightGroupRequest::is_apple_id_Valid() const{
    return m_apple_id_isValid;
}

QString OAIAppleTestFlightGroupRequest::getBundleIdentifier() const {
    return m_bundle_identifier;
}
void OAIAppleTestFlightGroupRequest::setBundleIdentifier(const QString &bundle_identifier) {
    m_bundle_identifier = bundle_identifier;
    m_bundle_identifier_isSet = true;
}

bool OAIAppleTestFlightGroupRequest::is_bundle_identifier_Set() const{
    return m_bundle_identifier_isSet;
}

bool OAIAppleTestFlightGroupRequest::is_bundle_identifier_Valid() const{
    return m_bundle_identifier_isValid;
}

QString OAIAppleTestFlightGroupRequest::getCookie() const {
    return m_cookie;
}
void OAIAppleTestFlightGroupRequest::setCookie(const QString &cookie) {
    m_cookie = cookie;
    m_cookie_isSet = true;
}

bool OAIAppleTestFlightGroupRequest::is_cookie_Set() const{
    return m_cookie_isSet;
}

bool OAIAppleTestFlightGroupRequest::is_cookie_Valid() const{
    return m_cookie_isValid;
}

QString OAIAppleTestFlightGroupRequest::getPassword() const {
    return m_password;
}
void OAIAppleTestFlightGroupRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIAppleTestFlightGroupRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIAppleTestFlightGroupRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIAppleTestFlightGroupRequest::getServiceConnectionId() const {
    return m_service_connection_id;
}
void OAIAppleTestFlightGroupRequest::setServiceConnectionId(const QString &service_connection_id) {
    m_service_connection_id = service_connection_id;
    m_service_connection_id_isSet = true;
}

bool OAIAppleTestFlightGroupRequest::is_service_connection_id_Set() const{
    return m_service_connection_id_isSet;
}

bool OAIAppleTestFlightGroupRequest::is_service_connection_id_Valid() const{
    return m_service_connection_id_isValid;
}

QString OAIAppleTestFlightGroupRequest::getTeamIdentifier() const {
    return m_team_identifier;
}
void OAIAppleTestFlightGroupRequest::setTeamIdentifier(const QString &team_identifier) {
    m_team_identifier = team_identifier;
    m_team_identifier_isSet = true;
}

bool OAIAppleTestFlightGroupRequest::is_team_identifier_Set() const{
    return m_team_identifier_isSet;
}

bool OAIAppleTestFlightGroupRequest::is_team_identifier_Valid() const{
    return m_team_identifier_isValid;
}

QString OAIAppleTestFlightGroupRequest::getUsername() const {
    return m_username;
}
void OAIAppleTestFlightGroupRequest::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAppleTestFlightGroupRequest::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAppleTestFlightGroupRequest::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIAppleTestFlightGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apple_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookie_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppleTestFlightGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
