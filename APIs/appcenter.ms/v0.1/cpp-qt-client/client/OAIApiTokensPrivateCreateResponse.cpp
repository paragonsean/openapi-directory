/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiTokensPrivateCreateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiTokensPrivateCreateResponse::OAIApiTokensPrivateCreateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiTokensPrivateCreateResponse::OAIApiTokensPrivateCreateResponse() {
    this->initializeModel();
}

OAIApiTokensPrivateCreateResponse::~OAIApiTokensPrivateCreateResponse() {}

void OAIApiTokensPrivateCreateResponse::initializeModel() {

    m_api_token_isSet = false;
    m_api_token_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encrypted_token_isSet = false;
    m_encrypted_token_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIApiTokensPrivateCreateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiTokensPrivateCreateResponse::fromJsonObject(QJsonObject json) {

    m_api_token_isValid = ::OpenAPI::fromJsonValue(m_api_token, json[QString("api_token")]);
    m_api_token_isSet = !json[QString("api_token")].isNull() && m_api_token_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encrypted_token_isValid = ::OpenAPI::fromJsonValue(m_encrypted_token, json[QString("encrypted_token")]);
    m_encrypted_token_isSet = !json[QString("encrypted_token")].isNull() && m_encrypted_token_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIApiTokensPrivateCreateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiTokensPrivateCreateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_token_isSet) {
        obj.insert(QString("api_token"), ::OpenAPI::toJsonValue(m_api_token));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encrypted_token_isSet) {
        obj.insert(QString("encrypted_token"), ::OpenAPI::toJsonValue(m_encrypted_token));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_scope.size() > 0) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIApiTokensPrivateCreateResponse::getApiToken() const {
    return m_api_token;
}
void OAIApiTokensPrivateCreateResponse::setApiToken(const QString &api_token) {
    m_api_token = api_token;
    m_api_token_isSet = true;
}

bool OAIApiTokensPrivateCreateResponse::is_api_token_Set() const{
    return m_api_token_isSet;
}

bool OAIApiTokensPrivateCreateResponse::is_api_token_Valid() const{
    return m_api_token_isValid;
}

QString OAIApiTokensPrivateCreateResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIApiTokensPrivateCreateResponse::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIApiTokensPrivateCreateResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIApiTokensPrivateCreateResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIApiTokensPrivateCreateResponse::getDescription() const {
    return m_description;
}
void OAIApiTokensPrivateCreateResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiTokensPrivateCreateResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiTokensPrivateCreateResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiTokensPrivateCreateResponse::getEncryptedToken() const {
    return m_encrypted_token;
}
void OAIApiTokensPrivateCreateResponse::setEncryptedToken(const QString &encrypted_token) {
    m_encrypted_token = encrypted_token;
    m_encrypted_token_isSet = true;
}

bool OAIApiTokensPrivateCreateResponse::is_encrypted_token_Set() const{
    return m_encrypted_token_isSet;
}

bool OAIApiTokensPrivateCreateResponse::is_encrypted_token_Valid() const{
    return m_encrypted_token_isValid;
}

QString OAIApiTokensPrivateCreateResponse::getId() const {
    return m_id;
}
void OAIApiTokensPrivateCreateResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApiTokensPrivateCreateResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApiTokensPrivateCreateResponse::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIApiTokensPrivateCreateResponse::getScope() const {
    return m_scope;
}
void OAIApiTokensPrivateCreateResponse::setScope(const QList<QString> &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIApiTokensPrivateCreateResponse::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIApiTokensPrivateCreateResponse::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIApiTokensPrivateCreateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiTokensPrivateCreateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_api_token_isValid && m_created_at_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
