/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalyticsApi_H
#define OAI_OAIAnalyticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalytics_CrashCounts_200_response.h"
#include "OAIAnalytics_CrashFreeDevicePercentages_200_response.h"
#include "OAIAnalytics_CrashGroupModelCounts_200_response.h"
#include "OAIAnalytics_CrashGroupOperatingSystemCounts_200_response.h"
#include "OAIAnalytics_CrashGroupsTotals_200_response_inner.h"
#include "OAIAnalytics_CrashGroupsTotals_200_response_inner_overall.h"
#include "OAIAnalytics_CrashGroupsTotals_request.h"
#include "OAIAnalytics_DeviceCounts_200_response.h"
#include "OAIAnalytics_DeviceCounts_200_response_daily_inner.h"
#include "OAIAnalytics_DeviceCounts_default_response.h"
#include "OAIAnalytics_DistributionReleaseCounts_200_response.h"
#include "OAIAnalytics_DistributionReleaseCounts_request.h"
#include "OAIAnalytics_EventCount_200_response.h"
#include "OAIAnalytics_EventDeviceCount_200_response.h"
#include "OAIAnalytics_EventPerDeviceCount_200_response.h"
#include "OAIAnalytics_EventPerSessionCount_200_response.h"
#include "OAIAnalytics_EventProperties_200_response.h"
#include "OAIAnalytics_EventPropertyCounts_200_response.h"
#include "OAIAnalytics_Events_200_response.h"
#include "OAIAnalytics_GenericLogFlow_200_response.h"
#include "OAIAnalytics_GetAudience_200_response.h"
#include "OAIAnalytics_LanguageCounts_200_response.h"
#include "OAIAnalytics_ListAudiences_200_response.h"
#include "OAIAnalytics_ListCustomProperties_200_response.h"
#include "OAIAnalytics_ListDevicePropertyValues_200_response.h"
#include "OAIAnalytics_LogFlow_200_response.h"
#include "OAIAnalytics_ModelCounts_200_response.h"
#include "OAIAnalytics_OperatingSystemCounts_200_response.h"
#include "OAIAnalytics_PerDeviceCounts_200_response.h"
#include "OAIAnalytics_PlaceCounts_200_response.h"
#include "OAIAnalytics_SessionDurationsDistribution_200_response.h"
#include "OAIAnalytics_TestAudience_200_response.h"
#include "OAIAnalytics_TestAudience_request.h"
#include "OAIAnalytics_Versions_200_response.h"
#include "OAICrashes_ListSessionLogs_200_response.h"
#include "OAIOrganizations_listAdministered_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalyticsApi : public QObject {
    Q_OBJECT

public:
    OAIAnalyticsApi(const int timeOut = 0);
    ~OAIAnalyticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  audience_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsAudienceNameExists(const QString &audience_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    Q_DECL_DEPRECATED virtual void analyticsCrashCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  version QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    */
    Q_DECL_DEPRECATED virtual void analyticsCrashFreeDevicePercentages(const QDateTime &start, const QString &version, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    */
    Q_DECL_DEPRECATED virtual void analyticsCrashGroupCounts(const QString &crash_group_id, const QString &version, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  top qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void analyticsCrashGroupModelCounts(const QString &crash_group_id, const QString &version, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  top qint64 [optional]
    */
    Q_DECL_DEPRECATED virtual void analyticsCrashGroupOperatingSystemCounts(const QString &crash_group_id, const QString &version, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  crash_group_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void analyticsCrashGroupTotals(const QString &crash_group_id, const QString &version, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_analytics_crash_groups_totals_request OAIAnalytics_CrashGroupsTotals_request [required]
    */
    virtual void analyticsCrashGroupsTotals(const QString &owner_name, const QString &app_name, const OAIAnalytics_CrashGroupsTotals_request &oai_analytics_crash_groups_totals_request);

    /**
    * @param[in]  audience_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_analytics_test_audience_request OAIAnalytics_TestAudience_request [required]
    */
    virtual void analyticsCreateOrUpdateAudience(const QString &audience_name, const QString &owner_name, const QString &app_name, const OAIAnalytics_TestAudience_request &oai_analytics_test_audience_request);

    /**
    * @param[in]  audience_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsDeleteAudience(const QString &audience_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    * @param[in]  app_build QString [optional]
    */
    virtual void analyticsDeviceCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &app_build = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_analytics_distribution_release_counts_request OAIAnalytics_DistributionReleaseCounts_request [required]
    */
    virtual void analyticsDistributionReleaseCounts(const QString &owner_name, const QString &app_name, const OAIAnalytics_DistributionReleaseCounts_request &oai_analytics_distribution_release_counts_request);

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsEventCount(const QString &event_name, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsEventDeviceCount(const QString &event_name, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsEventPerDeviceCount(const QString &event_name, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsEventPerSessionCount(const QString &event_name, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsEventProperties(const QString &event_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  event_property_name QString [required]
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    * @param[in]  top qint64 [optional]
    */
    virtual void analyticsEventPropertyCounts(const QString &event_name, const QString &event_property_name, const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    * @param[in]  event_name QList<QString> [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  skip qint64 [optional]
    * @param[in]  inlinecount QString [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void analyticsEvents(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &event_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &skip = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &inlinecount = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsEventsDelete(const QString &event_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  event_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsEventsDeleteLogs(const QString &event_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  start QDateTime [optional]
    */
    virtual void analyticsGenericLogFlow(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &start = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  audience_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsGetAudience(const QString &audience_name, const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsLanguageCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  include_disabled bool [optional]
    */
    virtual void analyticsListAudiences(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<bool> &include_disabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsListCustomProperties(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void analyticsListDeviceProperties(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  property_name QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  contains QString [optional]
    */
    virtual void analyticsListDevicePropertyValues(const QString &property_name, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QString> &contains = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  start QDateTime [optional]
    */
    virtual void analyticsLogFlow(const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &start = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsModelCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsOperatingSystemCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsPerDeviceCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsPlaceCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsSessionCounts(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsSessionDurationsDistribution(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  oai_analytics_test_audience_request OAIAnalytics_TestAudience_request [required]
    */
    virtual void analyticsTestAudience(const QString &owner_name, const QString &app_name, const OAIAnalytics_TestAudience_request &oai_analytics_test_audience_request);

    /**
    * @param[in]  start QDateTime [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  end QDateTime [optional]
    * @param[in]  top qint64 [optional]
    * @param[in]  versions QList<QString> [optional]
    */
    virtual void analyticsVersions(const QDateTime &start, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &end = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint64> &top = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QList<QString>> &versions = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void appBlockLogs(const QString &owner_name, const QString &app_name);

    /**
    * @param[in]  crash_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    * @param[in]  date QDateTime [optional]
    */
    virtual void crashesListSessionLogs(const QString &crash_id, const QString &owner_name, const QString &app_name, const ::OpenAPI::OptionalParam<QDateTime> &date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  install_id QString [required]
    * @param[in]  owner_name QString [required]
    * @param[in]  app_name QString [required]
    */
    virtual void devicesBlockLogs(const QString &install_id, const QString &owner_name, const QString &app_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void analyticsAudienceNameExistsCallback(OAIHttpRequestWorker *worker);
    void analyticsCrashCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsCrashFreeDevicePercentagesCallback(OAIHttpRequestWorker *worker);
    void analyticsCrashGroupCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsCrashGroupModelCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsCrashGroupOperatingSystemCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsCrashGroupTotalsCallback(OAIHttpRequestWorker *worker);
    void analyticsCrashGroupsTotalsCallback(OAIHttpRequestWorker *worker);
    void analyticsCreateOrUpdateAudienceCallback(OAIHttpRequestWorker *worker);
    void analyticsDeleteAudienceCallback(OAIHttpRequestWorker *worker);
    void analyticsDeviceCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsDistributionReleaseCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsEventCountCallback(OAIHttpRequestWorker *worker);
    void analyticsEventDeviceCountCallback(OAIHttpRequestWorker *worker);
    void analyticsEventPerDeviceCountCallback(OAIHttpRequestWorker *worker);
    void analyticsEventPerSessionCountCallback(OAIHttpRequestWorker *worker);
    void analyticsEventPropertiesCallback(OAIHttpRequestWorker *worker);
    void analyticsEventPropertyCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsEventsCallback(OAIHttpRequestWorker *worker);
    void analyticsEventsDeleteCallback(OAIHttpRequestWorker *worker);
    void analyticsEventsDeleteLogsCallback(OAIHttpRequestWorker *worker);
    void analyticsGenericLogFlowCallback(OAIHttpRequestWorker *worker);
    void analyticsGetAudienceCallback(OAIHttpRequestWorker *worker);
    void analyticsLanguageCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsListAudiencesCallback(OAIHttpRequestWorker *worker);
    void analyticsListCustomPropertiesCallback(OAIHttpRequestWorker *worker);
    void analyticsListDevicePropertiesCallback(OAIHttpRequestWorker *worker);
    void analyticsListDevicePropertyValuesCallback(OAIHttpRequestWorker *worker);
    void analyticsLogFlowCallback(OAIHttpRequestWorker *worker);
    void analyticsModelCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsOperatingSystemCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsPerDeviceCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsPlaceCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsSessionCountsCallback(OAIHttpRequestWorker *worker);
    void analyticsSessionDurationsDistributionCallback(OAIHttpRequestWorker *worker);
    void analyticsTestAudienceCallback(OAIHttpRequestWorker *worker);
    void analyticsVersionsCallback(OAIHttpRequestWorker *worker);
    void appBlockLogsCallback(OAIHttpRequestWorker *worker);
    void crashesListSessionLogsCallback(OAIHttpRequestWorker *worker);
    void devicesBlockLogsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void analyticsAudienceNameExistsSignal();
    void analyticsCrashCountsSignal(OAIAnalytics_CrashCounts_200_response summary);
    void analyticsCrashFreeDevicePercentagesSignal(OAIAnalytics_CrashFreeDevicePercentages_200_response summary);
    void analyticsCrashGroupCountsSignal(OAIAnalytics_CrashCounts_200_response summary);
    void analyticsCrashGroupModelCountsSignal(OAIAnalytics_CrashGroupModelCounts_200_response summary);
    void analyticsCrashGroupOperatingSystemCountsSignal(OAIAnalytics_CrashGroupOperatingSystemCounts_200_response summary);
    void analyticsCrashGroupTotalsSignal(OAIAnalytics_CrashGroupsTotals_200_response_inner_overall summary);
    void analyticsCrashGroupsTotalsSignal(QList<OAIAnalytics_CrashGroupsTotals_200_response_inner> summary);
    void analyticsCreateOrUpdateAudienceSignal(OAIAnalytics_GetAudience_200_response summary);
    void analyticsDeleteAudienceSignal();
    void analyticsDeviceCountsSignal(OAIAnalytics_DeviceCounts_200_response summary);
    void analyticsDistributionReleaseCountsSignal(OAIAnalytics_DistributionReleaseCounts_200_response summary);
    void analyticsEventCountSignal(OAIAnalytics_EventCount_200_response summary);
    void analyticsEventDeviceCountSignal(OAIAnalytics_EventDeviceCount_200_response summary);
    void analyticsEventPerDeviceCountSignal(OAIAnalytics_EventPerDeviceCount_200_response summary);
    void analyticsEventPerSessionCountSignal(OAIAnalytics_EventPerSessionCount_200_response summary);
    void analyticsEventPropertiesSignal(OAIAnalytics_EventProperties_200_response summary);
    void analyticsEventPropertyCountsSignal(OAIAnalytics_EventPropertyCounts_200_response summary);
    void analyticsEventsSignal(OAIAnalytics_Events_200_response summary);
    void analyticsEventsDeleteSignal();
    void analyticsEventsDeleteLogsSignal();
    void analyticsGenericLogFlowSignal(OAIAnalytics_GenericLogFlow_200_response summary);
    void analyticsGetAudienceSignal(OAIAnalytics_GetAudience_200_response summary);
    void analyticsLanguageCountsSignal(OAIAnalytics_LanguageCounts_200_response summary);
    void analyticsListAudiencesSignal(OAIAnalytics_ListAudiences_200_response summary);
    void analyticsListCustomPropertiesSignal(OAIAnalytics_ListCustomProperties_200_response summary);
    void analyticsListDevicePropertiesSignal(OAIAnalytics_ListCustomProperties_200_response summary);
    void analyticsListDevicePropertyValuesSignal(OAIAnalytics_ListDevicePropertyValues_200_response summary);
    void analyticsLogFlowSignal(OAIAnalytics_LogFlow_200_response summary);
    void analyticsModelCountsSignal(OAIAnalytics_ModelCounts_200_response summary);
    void analyticsOperatingSystemCountsSignal(OAIAnalytics_OperatingSystemCounts_200_response summary);
    void analyticsPerDeviceCountsSignal(OAIAnalytics_PerDeviceCounts_200_response summary);
    void analyticsPlaceCountsSignal(OAIAnalytics_PlaceCounts_200_response summary);
    void analyticsSessionCountsSignal(QList<OAIAnalytics_DeviceCounts_200_response_daily_inner> summary);
    void analyticsSessionDurationsDistributionSignal(OAIAnalytics_SessionDurationsDistribution_200_response summary);
    void analyticsTestAudienceSignal(OAIAnalytics_TestAudience_200_response summary);
    void analyticsVersionsSignal(OAIAnalytics_Versions_200_response summary);
    void appBlockLogsSignal(QString summary);
    void crashesListSessionLogsSignal(OAICrashes_ListSessionLogs_200_response summary);
    void devicesBlockLogsSignal(QString summary);


    void analyticsAudienceNameExistsSignalFull(OAIHttpRequestWorker *worker);
    void analyticsCrashCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_CrashCounts_200_response summary);
    void analyticsCrashFreeDevicePercentagesSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_CrashFreeDevicePercentages_200_response summary);
    void analyticsCrashGroupCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_CrashCounts_200_response summary);
    void analyticsCrashGroupModelCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_CrashGroupModelCounts_200_response summary);
    void analyticsCrashGroupOperatingSystemCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_CrashGroupOperatingSystemCounts_200_response summary);
    void analyticsCrashGroupTotalsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_CrashGroupsTotals_200_response_inner_overall summary);
    void analyticsCrashGroupsTotalsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnalytics_CrashGroupsTotals_200_response_inner> summary);
    void analyticsCreateOrUpdateAudienceSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_GetAudience_200_response summary);
    void analyticsDeleteAudienceSignalFull(OAIHttpRequestWorker *worker);
    void analyticsDeviceCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_DeviceCounts_200_response summary);
    void analyticsDistributionReleaseCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_DistributionReleaseCounts_200_response summary);
    void analyticsEventCountSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_EventCount_200_response summary);
    void analyticsEventDeviceCountSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_EventDeviceCount_200_response summary);
    void analyticsEventPerDeviceCountSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_EventPerDeviceCount_200_response summary);
    void analyticsEventPerSessionCountSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_EventPerSessionCount_200_response summary);
    void analyticsEventPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_EventProperties_200_response summary);
    void analyticsEventPropertyCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_EventPropertyCounts_200_response summary);
    void analyticsEventsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_Events_200_response summary);
    void analyticsEventsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void analyticsEventsDeleteLogsSignalFull(OAIHttpRequestWorker *worker);
    void analyticsGenericLogFlowSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_GenericLogFlow_200_response summary);
    void analyticsGetAudienceSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_GetAudience_200_response summary);
    void analyticsLanguageCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_LanguageCounts_200_response summary);
    void analyticsListAudiencesSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_ListAudiences_200_response summary);
    void analyticsListCustomPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_ListCustomProperties_200_response summary);
    void analyticsListDevicePropertiesSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_ListCustomProperties_200_response summary);
    void analyticsListDevicePropertyValuesSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_ListDevicePropertyValues_200_response summary);
    void analyticsLogFlowSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_LogFlow_200_response summary);
    void analyticsModelCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_ModelCounts_200_response summary);
    void analyticsOperatingSystemCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_OperatingSystemCounts_200_response summary);
    void analyticsPerDeviceCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_PerDeviceCounts_200_response summary);
    void analyticsPlaceCountsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_PlaceCounts_200_response summary);
    void analyticsSessionCountsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnalytics_DeviceCounts_200_response_daily_inner> summary);
    void analyticsSessionDurationsDistributionSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_SessionDurationsDistribution_200_response summary);
    void analyticsTestAudienceSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_TestAudience_200_response summary);
    void analyticsVersionsSignalFull(OAIHttpRequestWorker *worker, OAIAnalytics_Versions_200_response summary);
    void appBlockLogsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void crashesListSessionLogsSignalFull(OAIHttpRequestWorker *worker, OAICrashes_ListSessionLogs_200_response summary);
    void devicesBlockLogsSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use analyticsAudienceNameExistsSignalError() instead")
    void analyticsAudienceNameExistsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsAudienceNameExistsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashCountsSignalError() instead")
    void analyticsCrashCountsSignalE(OAIAnalytics_CrashCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashCountsSignalError(OAIAnalytics_CrashCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashFreeDevicePercentagesSignalError() instead")
    void analyticsCrashFreeDevicePercentagesSignalE(OAIAnalytics_CrashFreeDevicePercentages_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashFreeDevicePercentagesSignalError(OAIAnalytics_CrashFreeDevicePercentages_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupCountsSignalError() instead")
    void analyticsCrashGroupCountsSignalE(OAIAnalytics_CrashCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupCountsSignalError(OAIAnalytics_CrashCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupModelCountsSignalError() instead")
    void analyticsCrashGroupModelCountsSignalE(OAIAnalytics_CrashGroupModelCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupModelCountsSignalError(OAIAnalytics_CrashGroupModelCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupOperatingSystemCountsSignalError() instead")
    void analyticsCrashGroupOperatingSystemCountsSignalE(OAIAnalytics_CrashGroupOperatingSystemCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupOperatingSystemCountsSignalError(OAIAnalytics_CrashGroupOperatingSystemCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupTotalsSignalError() instead")
    void analyticsCrashGroupTotalsSignalE(OAIAnalytics_CrashGroupsTotals_200_response_inner_overall summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupTotalsSignalError(OAIAnalytics_CrashGroupsTotals_200_response_inner_overall summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupsTotalsSignalError() instead")
    void analyticsCrashGroupsTotalsSignalE(QList<OAIAnalytics_CrashGroupsTotals_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupsTotalsSignalError(QList<OAIAnalytics_CrashGroupsTotals_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCreateOrUpdateAudienceSignalError() instead")
    void analyticsCreateOrUpdateAudienceSignalE(OAIAnalytics_GetAudience_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCreateOrUpdateAudienceSignalError(OAIAnalytics_GetAudience_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsDeleteAudienceSignalError() instead")
    void analyticsDeleteAudienceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsDeleteAudienceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsDeviceCountsSignalError() instead")
    void analyticsDeviceCountsSignalE(OAIAnalytics_DeviceCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsDeviceCountsSignalError(OAIAnalytics_DeviceCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsDistributionReleaseCountsSignalError() instead")
    void analyticsDistributionReleaseCountsSignalE(OAIAnalytics_DistributionReleaseCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsDistributionReleaseCountsSignalError(OAIAnalytics_DistributionReleaseCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventCountSignalError() instead")
    void analyticsEventCountSignalE(OAIAnalytics_EventCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventCountSignalError(OAIAnalytics_EventCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventDeviceCountSignalError() instead")
    void analyticsEventDeviceCountSignalE(OAIAnalytics_EventDeviceCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventDeviceCountSignalError(OAIAnalytics_EventDeviceCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPerDeviceCountSignalError() instead")
    void analyticsEventPerDeviceCountSignalE(OAIAnalytics_EventPerDeviceCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPerDeviceCountSignalError(OAIAnalytics_EventPerDeviceCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPerSessionCountSignalError() instead")
    void analyticsEventPerSessionCountSignalE(OAIAnalytics_EventPerSessionCount_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPerSessionCountSignalError(OAIAnalytics_EventPerSessionCount_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPropertiesSignalError() instead")
    void analyticsEventPropertiesSignalE(OAIAnalytics_EventProperties_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPropertiesSignalError(OAIAnalytics_EventProperties_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPropertyCountsSignalError() instead")
    void analyticsEventPropertyCountsSignalE(OAIAnalytics_EventPropertyCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPropertyCountsSignalError(OAIAnalytics_EventPropertyCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventsSignalError() instead")
    void analyticsEventsSignalE(OAIAnalytics_Events_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventsSignalError(OAIAnalytics_Events_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventsDeleteSignalError() instead")
    void analyticsEventsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventsDeleteLogsSignalError() instead")
    void analyticsEventsDeleteLogsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventsDeleteLogsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsGenericLogFlowSignalError() instead")
    void analyticsGenericLogFlowSignalE(OAIAnalytics_GenericLogFlow_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsGenericLogFlowSignalError(OAIAnalytics_GenericLogFlow_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsGetAudienceSignalError() instead")
    void analyticsGetAudienceSignalE(OAIAnalytics_GetAudience_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsGetAudienceSignalError(OAIAnalytics_GetAudience_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsLanguageCountsSignalError() instead")
    void analyticsLanguageCountsSignalE(OAIAnalytics_LanguageCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsLanguageCountsSignalError(OAIAnalytics_LanguageCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListAudiencesSignalError() instead")
    void analyticsListAudiencesSignalE(OAIAnalytics_ListAudiences_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListAudiencesSignalError(OAIAnalytics_ListAudiences_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListCustomPropertiesSignalError() instead")
    void analyticsListCustomPropertiesSignalE(OAIAnalytics_ListCustomProperties_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListCustomPropertiesSignalError(OAIAnalytics_ListCustomProperties_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListDevicePropertiesSignalError() instead")
    void analyticsListDevicePropertiesSignalE(OAIAnalytics_ListCustomProperties_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListDevicePropertiesSignalError(OAIAnalytics_ListCustomProperties_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListDevicePropertyValuesSignalError() instead")
    void analyticsListDevicePropertyValuesSignalE(OAIAnalytics_ListDevicePropertyValues_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListDevicePropertyValuesSignalError(OAIAnalytics_ListDevicePropertyValues_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsLogFlowSignalError() instead")
    void analyticsLogFlowSignalE(OAIAnalytics_LogFlow_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsLogFlowSignalError(OAIAnalytics_LogFlow_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsModelCountsSignalError() instead")
    void analyticsModelCountsSignalE(OAIAnalytics_ModelCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsModelCountsSignalError(OAIAnalytics_ModelCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsOperatingSystemCountsSignalError() instead")
    void analyticsOperatingSystemCountsSignalE(OAIAnalytics_OperatingSystemCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsOperatingSystemCountsSignalError(OAIAnalytics_OperatingSystemCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsPerDeviceCountsSignalError() instead")
    void analyticsPerDeviceCountsSignalE(OAIAnalytics_PerDeviceCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsPerDeviceCountsSignalError(OAIAnalytics_PerDeviceCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsPlaceCountsSignalError() instead")
    void analyticsPlaceCountsSignalE(OAIAnalytics_PlaceCounts_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsPlaceCountsSignalError(OAIAnalytics_PlaceCounts_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsSessionCountsSignalError() instead")
    void analyticsSessionCountsSignalE(QList<OAIAnalytics_DeviceCounts_200_response_daily_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsSessionCountsSignalError(QList<OAIAnalytics_DeviceCounts_200_response_daily_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsSessionDurationsDistributionSignalError() instead")
    void analyticsSessionDurationsDistributionSignalE(OAIAnalytics_SessionDurationsDistribution_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsSessionDurationsDistributionSignalError(OAIAnalytics_SessionDurationsDistribution_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsTestAudienceSignalError() instead")
    void analyticsTestAudienceSignalE(OAIAnalytics_TestAudience_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsTestAudienceSignalError(OAIAnalytics_TestAudience_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsVersionsSignalError() instead")
    void analyticsVersionsSignalE(OAIAnalytics_Versions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsVersionsSignalError(OAIAnalytics_Versions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appBlockLogsSignalError() instead")
    void appBlockLogsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appBlockLogsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesListSessionLogsSignalError() instead")
    void crashesListSessionLogsSignalE(OAICrashes_ListSessionLogs_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesListSessionLogsSignalError(OAICrashes_ListSessionLogs_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesBlockLogsSignalError() instead")
    void devicesBlockLogsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesBlockLogsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use analyticsAudienceNameExistsSignalErrorFull() instead")
    void analyticsAudienceNameExistsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsAudienceNameExistsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashCountsSignalErrorFull() instead")
    void analyticsCrashCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashFreeDevicePercentagesSignalErrorFull() instead")
    void analyticsCrashFreeDevicePercentagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashFreeDevicePercentagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupCountsSignalErrorFull() instead")
    void analyticsCrashGroupCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupModelCountsSignalErrorFull() instead")
    void analyticsCrashGroupModelCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupModelCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupOperatingSystemCountsSignalErrorFull() instead")
    void analyticsCrashGroupOperatingSystemCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupOperatingSystemCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupTotalsSignalErrorFull() instead")
    void analyticsCrashGroupTotalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupTotalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCrashGroupsTotalsSignalErrorFull() instead")
    void analyticsCrashGroupsTotalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCrashGroupsTotalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsCreateOrUpdateAudienceSignalErrorFull() instead")
    void analyticsCreateOrUpdateAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsCreateOrUpdateAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsDeleteAudienceSignalErrorFull() instead")
    void analyticsDeleteAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsDeleteAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsDeviceCountsSignalErrorFull() instead")
    void analyticsDeviceCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsDeviceCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsDistributionReleaseCountsSignalErrorFull() instead")
    void analyticsDistributionReleaseCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsDistributionReleaseCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventCountSignalErrorFull() instead")
    void analyticsEventCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventDeviceCountSignalErrorFull() instead")
    void analyticsEventDeviceCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventDeviceCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPerDeviceCountSignalErrorFull() instead")
    void analyticsEventPerDeviceCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPerDeviceCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPerSessionCountSignalErrorFull() instead")
    void analyticsEventPerSessionCountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPerSessionCountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPropertiesSignalErrorFull() instead")
    void analyticsEventPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventPropertyCountsSignalErrorFull() instead")
    void analyticsEventPropertyCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventPropertyCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventsSignalErrorFull() instead")
    void analyticsEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventsDeleteSignalErrorFull() instead")
    void analyticsEventsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsEventsDeleteLogsSignalErrorFull() instead")
    void analyticsEventsDeleteLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsEventsDeleteLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsGenericLogFlowSignalErrorFull() instead")
    void analyticsGenericLogFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsGenericLogFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsGetAudienceSignalErrorFull() instead")
    void analyticsGetAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsGetAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsLanguageCountsSignalErrorFull() instead")
    void analyticsLanguageCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsLanguageCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListAudiencesSignalErrorFull() instead")
    void analyticsListAudiencesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListAudiencesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListCustomPropertiesSignalErrorFull() instead")
    void analyticsListCustomPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListCustomPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListDevicePropertiesSignalErrorFull() instead")
    void analyticsListDevicePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListDevicePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsListDevicePropertyValuesSignalErrorFull() instead")
    void analyticsListDevicePropertyValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsListDevicePropertyValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsLogFlowSignalErrorFull() instead")
    void analyticsLogFlowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsLogFlowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsModelCountsSignalErrorFull() instead")
    void analyticsModelCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsModelCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsOperatingSystemCountsSignalErrorFull() instead")
    void analyticsOperatingSystemCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsOperatingSystemCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsPerDeviceCountsSignalErrorFull() instead")
    void analyticsPerDeviceCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsPerDeviceCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsPlaceCountsSignalErrorFull() instead")
    void analyticsPlaceCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsPlaceCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsSessionCountsSignalErrorFull() instead")
    void analyticsSessionCountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsSessionCountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsSessionDurationsDistributionSignalErrorFull() instead")
    void analyticsSessionDurationsDistributionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsSessionDurationsDistributionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsTestAudienceSignalErrorFull() instead")
    void analyticsTestAudienceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsTestAudienceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use analyticsVersionsSignalErrorFull() instead")
    void analyticsVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void analyticsVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appBlockLogsSignalErrorFull() instead")
    void appBlockLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appBlockLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use crashesListSessionLogsSignalErrorFull() instead")
    void crashesListSessionLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void crashesListSessionLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesBlockLogsSignalErrorFull() instead")
    void devicesBlockLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesBlockLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
