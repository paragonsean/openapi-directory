/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodePushStatusMetricMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodePushStatusMetricMetadata::OAICodePushStatusMetricMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodePushStatusMetricMetadata::OAICodePushStatusMetricMetadata() {
    this->initializeModel();
}

OAICodePushStatusMetricMetadata::~OAICodePushStatusMetricMetadata() {}

void OAICodePushStatusMetricMetadata::initializeModel() {

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_client_unique_id_isSet = false;
    m_client_unique_id_isValid = false;

    m_deployment_key_isSet = false;
    m_deployment_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_previous_deployment_key_isSet = false;
    m_previous_deployment_key_isValid = false;

    m_previous_label_or_app_version_isSet = false;
    m_previous_label_or_app_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICodePushStatusMetricMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodePushStatusMetricMetadata::fromJsonObject(QJsonObject json) {

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("app_version")]);
    m_app_version_isSet = !json[QString("app_version")].isNull() && m_app_version_isValid;

    m_client_unique_id_isValid = ::OpenAPI::fromJsonValue(m_client_unique_id, json[QString("client_unique_id")]);
    m_client_unique_id_isSet = !json[QString("client_unique_id")].isNull() && m_client_unique_id_isValid;

    m_deployment_key_isValid = ::OpenAPI::fromJsonValue(m_deployment_key, json[QString("deployment_key")]);
    m_deployment_key_isSet = !json[QString("deployment_key")].isNull() && m_deployment_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_previous_deployment_key_isValid = ::OpenAPI::fromJsonValue(m_previous_deployment_key, json[QString("previous_deployment_key")]);
    m_previous_deployment_key_isSet = !json[QString("previous_deployment_key")].isNull() && m_previous_deployment_key_isValid;

    m_previous_label_or_app_version_isValid = ::OpenAPI::fromJsonValue(m_previous_label_or_app_version, json[QString("previous_label_or_app_version")]);
    m_previous_label_or_app_version_isSet = !json[QString("previous_label_or_app_version")].isNull() && m_previous_label_or_app_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICodePushStatusMetricMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodePushStatusMetricMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_app_version_isSet) {
        obj.insert(QString("app_version"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_client_unique_id_isSet) {
        obj.insert(QString("client_unique_id"), ::OpenAPI::toJsonValue(m_client_unique_id));
    }
    if (m_deployment_key_isSet) {
        obj.insert(QString("deployment_key"), ::OpenAPI::toJsonValue(m_deployment_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_previous_deployment_key_isSet) {
        obj.insert(QString("previous_deployment_key"), ::OpenAPI::toJsonValue(m_previous_deployment_key));
    }
    if (m_previous_label_or_app_version_isSet) {
        obj.insert(QString("previous_label_or_app_version"), ::OpenAPI::toJsonValue(m_previous_label_or_app_version));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICodePushStatusMetricMetadata::getAppVersion() const {
    return m_app_version;
}
void OAICodePushStatusMetricMetadata::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAICodePushStatusMetricMetadata::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAICodePushStatusMetricMetadata::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAICodePushStatusMetricMetadata::getClientUniqueId() const {
    return m_client_unique_id;
}
void OAICodePushStatusMetricMetadata::setClientUniqueId(const QString &client_unique_id) {
    m_client_unique_id = client_unique_id;
    m_client_unique_id_isSet = true;
}

bool OAICodePushStatusMetricMetadata::is_client_unique_id_Set() const{
    return m_client_unique_id_isSet;
}

bool OAICodePushStatusMetricMetadata::is_client_unique_id_Valid() const{
    return m_client_unique_id_isValid;
}

QString OAICodePushStatusMetricMetadata::getDeploymentKey() const {
    return m_deployment_key;
}
void OAICodePushStatusMetricMetadata::setDeploymentKey(const QString &deployment_key) {
    m_deployment_key = deployment_key;
    m_deployment_key_isSet = true;
}

bool OAICodePushStatusMetricMetadata::is_deployment_key_Set() const{
    return m_deployment_key_isSet;
}

bool OAICodePushStatusMetricMetadata::is_deployment_key_Valid() const{
    return m_deployment_key_isValid;
}

QString OAICodePushStatusMetricMetadata::getLabel() const {
    return m_label;
}
void OAICodePushStatusMetricMetadata::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICodePushStatusMetricMetadata::is_label_Set() const{
    return m_label_isSet;
}

bool OAICodePushStatusMetricMetadata::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICodePushStatusMetricMetadata::getPreviousDeploymentKey() const {
    return m_previous_deployment_key;
}
void OAICodePushStatusMetricMetadata::setPreviousDeploymentKey(const QString &previous_deployment_key) {
    m_previous_deployment_key = previous_deployment_key;
    m_previous_deployment_key_isSet = true;
}

bool OAICodePushStatusMetricMetadata::is_previous_deployment_key_Set() const{
    return m_previous_deployment_key_isSet;
}

bool OAICodePushStatusMetricMetadata::is_previous_deployment_key_Valid() const{
    return m_previous_deployment_key_isValid;
}

QString OAICodePushStatusMetricMetadata::getPreviousLabelOrAppVersion() const {
    return m_previous_label_or_app_version;
}
void OAICodePushStatusMetricMetadata::setPreviousLabelOrAppVersion(const QString &previous_label_or_app_version) {
    m_previous_label_or_app_version = previous_label_or_app_version;
    m_previous_label_or_app_version_isSet = true;
}

bool OAICodePushStatusMetricMetadata::is_previous_label_or_app_version_Set() const{
    return m_previous_label_or_app_version_isSet;
}

bool OAICodePushStatusMetricMetadata::is_previous_label_or_app_version_Valid() const{
    return m_previous_label_or_app_version_isValid;
}

QString OAICodePushStatusMetricMetadata::getStatus() const {
    return m_status;
}
void OAICodePushStatusMetricMetadata::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICodePushStatusMetricMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAICodePushStatusMetricMetadata::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICodePushStatusMetricMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_deployment_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_label_or_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodePushStatusMetricMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_deployment_key_isValid && true;
}

} // namespace OpenAPI
