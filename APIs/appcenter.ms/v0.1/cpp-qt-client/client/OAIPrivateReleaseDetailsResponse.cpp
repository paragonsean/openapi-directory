/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateReleaseDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateReleaseDetailsResponse::OAIPrivateReleaseDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateReleaseDetailsResponse::OAIPrivateReleaseDetailsResponse() {
    this->initializeModel();
}

OAIPrivateReleaseDetailsResponse::~OAIPrivateReleaseDetailsResponse() {}

void OAIPrivateReleaseDetailsResponse::initializeModel() {

    m_android_min_api_level_isSet = false;
    m_android_min_api_level_isValid = false;

    m_app_display_name_isSet = false;
    m_app_display_name_isValid = false;

    m_app_icon_url_isSet = false;
    m_app_icon_url_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_bundle_identifier_isSet = false;
    m_bundle_identifier_isValid = false;

    m_destination_type_isSet = false;
    m_destination_type_isValid = false;

    m_device_family_isSet = false;
    m_device_family_isValid = false;

    m_distribution_group_id_isSet = false;
    m_distribution_group_id_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_fingerprint_isSet = false;
    m_fingerprint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_install_url_isSet = false;
    m_install_url_isValid = false;

    m_is_external_build_isSet = false;
    m_is_external_build_isValid = false;

    m_is_provisioning_profile_syncing_isSet = false;
    m_is_provisioning_profile_syncing_isValid = false;

    m_min_os_isSet = false;
    m_min_os_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_provisioning_profile_name_isSet = false;
    m_provisioning_profile_name_isValid = false;

    m_provisioning_profile_type_isSet = false;
    m_provisioning_profile_type_isValid = false;

    m_publishing_status_isSet = false;
    m_publishing_status_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;

    m_secondary_download_url_isSet = false;
    m_secondary_download_url_isValid = false;

    m_short_version_isSet = false;
    m_short_version_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_uploaded_at_isSet = false;
    m_uploaded_at_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPrivateReleaseDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateReleaseDetailsResponse::fromJsonObject(QJsonObject json) {

    m_android_min_api_level_isValid = ::OpenAPI::fromJsonValue(m_android_min_api_level, json[QString("android_min_api_level")]);
    m_android_min_api_level_isSet = !json[QString("android_min_api_level")].isNull() && m_android_min_api_level_isValid;

    m_app_display_name_isValid = ::OpenAPI::fromJsonValue(m_app_display_name, json[QString("app_display_name")]);
    m_app_display_name_isSet = !json[QString("app_display_name")].isNull() && m_app_display_name_isValid;

    m_app_icon_url_isValid = ::OpenAPI::fromJsonValue(m_app_icon_url, json[QString("app_icon_url")]);
    m_app_icon_url_isSet = !json[QString("app_icon_url")].isNull() && m_app_icon_url_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("app_name")]);
    m_app_name_isSet = !json[QString("app_name")].isNull() && m_app_name_isValid;

    m_bundle_identifier_isValid = ::OpenAPI::fromJsonValue(m_bundle_identifier, json[QString("bundle_identifier")]);
    m_bundle_identifier_isSet = !json[QString("bundle_identifier")].isNull() && m_bundle_identifier_isValid;

    m_destination_type_isValid = ::OpenAPI::fromJsonValue(m_destination_type, json[QString("destination_type")]);
    m_destination_type_isSet = !json[QString("destination_type")].isNull() && m_destination_type_isValid;

    m_device_family_isValid = ::OpenAPI::fromJsonValue(m_device_family, json[QString("device_family")]);
    m_device_family_isSet = !json[QString("device_family")].isNull() && m_device_family_isValid;

    m_distribution_group_id_isValid = ::OpenAPI::fromJsonValue(m_distribution_group_id, json[QString("distribution_group_id")]);
    m_distribution_group_id_isSet = !json[QString("distribution_group_id")].isNull() && m_distribution_group_id_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("download_url")]);
    m_download_url_isSet = !json[QString("download_url")].isNull() && m_download_url_isValid;

    m_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_fingerprint, json[QString("fingerprint")]);
    m_fingerprint_isSet = !json[QString("fingerprint")].isNull() && m_fingerprint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_install_url_isValid = ::OpenAPI::fromJsonValue(m_install_url, json[QString("install_url")]);
    m_install_url_isSet = !json[QString("install_url")].isNull() && m_install_url_isValid;

    m_is_external_build_isValid = ::OpenAPI::fromJsonValue(m_is_external_build, json[QString("is_external_build")]);
    m_is_external_build_isSet = !json[QString("is_external_build")].isNull() && m_is_external_build_isValid;

    m_is_provisioning_profile_syncing_isValid = ::OpenAPI::fromJsonValue(m_is_provisioning_profile_syncing, json[QString("is_provisioning_profile_syncing")]);
    m_is_provisioning_profile_syncing_isSet = !json[QString("is_provisioning_profile_syncing")].isNull() && m_is_provisioning_profile_syncing_isValid;

    m_min_os_isValid = ::OpenAPI::fromJsonValue(m_min_os, json[QString("min_os")]);
    m_min_os_isSet = !json[QString("min_os")].isNull() && m_min_os_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_provisioning_profile_name_isValid = ::OpenAPI::fromJsonValue(m_provisioning_profile_name, json[QString("provisioning_profile_name")]);
    m_provisioning_profile_name_isSet = !json[QString("provisioning_profile_name")].isNull() && m_provisioning_profile_name_isValid;

    m_provisioning_profile_type_isValid = ::OpenAPI::fromJsonValue(m_provisioning_profile_type, json[QString("provisioning_profile_type")]);
    m_provisioning_profile_type_isSet = !json[QString("provisioning_profile_type")].isNull() && m_provisioning_profile_type_isValid;

    m_publishing_status_isValid = ::OpenAPI::fromJsonValue(m_publishing_status, json[QString("publishing_status")]);
    m_publishing_status_isSet = !json[QString("publishing_status")].isNull() && m_publishing_status_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("release_notes")]);
    m_release_notes_isSet = !json[QString("release_notes")].isNull() && m_release_notes_isValid;

    m_secondary_download_url_isValid = ::OpenAPI::fromJsonValue(m_secondary_download_url, json[QString("secondary_download_url")]);
    m_secondary_download_url_isSet = !json[QString("secondary_download_url")].isNull() && m_secondary_download_url_isValid;

    m_short_version_isValid = ::OpenAPI::fromJsonValue(m_short_version, json[QString("short_version")]);
    m_short_version_isSet = !json[QString("short_version")].isNull() && m_short_version_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_uploaded_at_isValid = ::OpenAPI::fromJsonValue(m_uploaded_at, json[QString("uploaded_at")]);
    m_uploaded_at_isSet = !json[QString("uploaded_at")].isNull() && m_uploaded_at_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPrivateReleaseDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateReleaseDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_android_min_api_level_isSet) {
        obj.insert(QString("android_min_api_level"), ::OpenAPI::toJsonValue(m_android_min_api_level));
    }
    if (m_app_display_name_isSet) {
        obj.insert(QString("app_display_name"), ::OpenAPI::toJsonValue(m_app_display_name));
    }
    if (m_app_icon_url_isSet) {
        obj.insert(QString("app_icon_url"), ::OpenAPI::toJsonValue(m_app_icon_url));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("app_name"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_bundle_identifier_isSet) {
        obj.insert(QString("bundle_identifier"), ::OpenAPI::toJsonValue(m_bundle_identifier));
    }
    if (m_destination_type_isSet) {
        obj.insert(QString("destination_type"), ::OpenAPI::toJsonValue(m_destination_type));
    }
    if (m_device_family_isSet) {
        obj.insert(QString("device_family"), ::OpenAPI::toJsonValue(m_device_family));
    }
    if (m_distribution_group_id_isSet) {
        obj.insert(QString("distribution_group_id"), ::OpenAPI::toJsonValue(m_distribution_group_id));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("download_url"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_fingerprint_isSet) {
        obj.insert(QString("fingerprint"), ::OpenAPI::toJsonValue(m_fingerprint));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_install_url_isSet) {
        obj.insert(QString("install_url"), ::OpenAPI::toJsonValue(m_install_url));
    }
    if (m_is_external_build_isSet) {
        obj.insert(QString("is_external_build"), ::OpenAPI::toJsonValue(m_is_external_build));
    }
    if (m_is_provisioning_profile_syncing_isSet) {
        obj.insert(QString("is_provisioning_profile_syncing"), ::OpenAPI::toJsonValue(m_is_provisioning_profile_syncing));
    }
    if (m_min_os_isSet) {
        obj.insert(QString("min_os"), ::OpenAPI::toJsonValue(m_min_os));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_provisioning_profile_name_isSet) {
        obj.insert(QString("provisioning_profile_name"), ::OpenAPI::toJsonValue(m_provisioning_profile_name));
    }
    if (m_provisioning_profile_type_isSet) {
        obj.insert(QString("provisioning_profile_type"), ::OpenAPI::toJsonValue(m_provisioning_profile_type));
    }
    if (m_publishing_status_isSet) {
        obj.insert(QString("publishing_status"), ::OpenAPI::toJsonValue(m_publishing_status));
    }
    if (m_release_notes_isSet) {
        obj.insert(QString("release_notes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    if (m_secondary_download_url_isSet) {
        obj.insert(QString("secondary_download_url"), ::OpenAPI::toJsonValue(m_secondary_download_url));
    }
    if (m_short_version_isSet) {
        obj.insert(QString("short_version"), ::OpenAPI::toJsonValue(m_short_version));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_uploaded_at_isSet) {
        obj.insert(QString("uploaded_at"), ::OpenAPI::toJsonValue(m_uploaded_at));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPrivateReleaseDetailsResponse::getAndroidMinApiLevel() const {
    return m_android_min_api_level;
}
void OAIPrivateReleaseDetailsResponse::setAndroidMinApiLevel(const QString &android_min_api_level) {
    m_android_min_api_level = android_min_api_level;
    m_android_min_api_level_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_android_min_api_level_Set() const{
    return m_android_min_api_level_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_android_min_api_level_Valid() const{
    return m_android_min_api_level_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getAppDisplayName() const {
    return m_app_display_name;
}
void OAIPrivateReleaseDetailsResponse::setAppDisplayName(const QString &app_display_name) {
    m_app_display_name = app_display_name;
    m_app_display_name_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_app_display_name_Set() const{
    return m_app_display_name_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_app_display_name_Valid() const{
    return m_app_display_name_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getAppIconUrl() const {
    return m_app_icon_url;
}
void OAIPrivateReleaseDetailsResponse::setAppIconUrl(const QString &app_icon_url) {
    m_app_icon_url = app_icon_url;
    m_app_icon_url_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_app_icon_url_Set() const{
    return m_app_icon_url_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_app_icon_url_Valid() const{
    return m_app_icon_url_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getAppName() const {
    return m_app_name;
}
void OAIPrivateReleaseDetailsResponse::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getBundleIdentifier() const {
    return m_bundle_identifier;
}
void OAIPrivateReleaseDetailsResponse::setBundleIdentifier(const QString &bundle_identifier) {
    m_bundle_identifier = bundle_identifier;
    m_bundle_identifier_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_bundle_identifier_Set() const{
    return m_bundle_identifier_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_bundle_identifier_Valid() const{
    return m_bundle_identifier_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getDestinationType() const {
    return m_destination_type;
}
void OAIPrivateReleaseDetailsResponse::setDestinationType(const QString &destination_type) {
    m_destination_type = destination_type;
    m_destination_type_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_destination_type_Set() const{
    return m_destination_type_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_destination_type_Valid() const{
    return m_destination_type_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getDeviceFamily() const {
    return m_device_family;
}
void OAIPrivateReleaseDetailsResponse::setDeviceFamily(const QString &device_family) {
    m_device_family = device_family;
    m_device_family_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_device_family_Set() const{
    return m_device_family_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_device_family_Valid() const{
    return m_device_family_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getDistributionGroupId() const {
    return m_distribution_group_id;
}
void OAIPrivateReleaseDetailsResponse::setDistributionGroupId(const QString &distribution_group_id) {
    m_distribution_group_id = distribution_group_id;
    m_distribution_group_id_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_distribution_group_id_Set() const{
    return m_distribution_group_id_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_distribution_group_id_Valid() const{
    return m_distribution_group_id_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getDownloadUrl() const {
    return m_download_url;
}
void OAIPrivateReleaseDetailsResponse::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getFingerprint() const {
    return m_fingerprint;
}
void OAIPrivateReleaseDetailsResponse::setFingerprint(const QString &fingerprint) {
    m_fingerprint = fingerprint;
    m_fingerprint_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_fingerprint_Set() const{
    return m_fingerprint_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_fingerprint_Valid() const{
    return m_fingerprint_isValid;
}

qint32 OAIPrivateReleaseDetailsResponse::getId() const {
    return m_id;
}
void OAIPrivateReleaseDetailsResponse::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getInstallUrl() const {
    return m_install_url;
}
void OAIPrivateReleaseDetailsResponse::setInstallUrl(const QString &install_url) {
    m_install_url = install_url;
    m_install_url_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_install_url_Set() const{
    return m_install_url_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_install_url_Valid() const{
    return m_install_url_isValid;
}

bool OAIPrivateReleaseDetailsResponse::isIsExternalBuild() const {
    return m_is_external_build;
}
void OAIPrivateReleaseDetailsResponse::setIsExternalBuild(const bool &is_external_build) {
    m_is_external_build = is_external_build;
    m_is_external_build_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_is_external_build_Set() const{
    return m_is_external_build_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_is_external_build_Valid() const{
    return m_is_external_build_isValid;
}

bool OAIPrivateReleaseDetailsResponse::isIsProvisioningProfileSyncing() const {
    return m_is_provisioning_profile_syncing;
}
void OAIPrivateReleaseDetailsResponse::setIsProvisioningProfileSyncing(const bool &is_provisioning_profile_syncing) {
    m_is_provisioning_profile_syncing = is_provisioning_profile_syncing;
    m_is_provisioning_profile_syncing_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_is_provisioning_profile_syncing_Set() const{
    return m_is_provisioning_profile_syncing_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_is_provisioning_profile_syncing_Valid() const{
    return m_is_provisioning_profile_syncing_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getMinOs() const {
    return m_min_os;
}
void OAIPrivateReleaseDetailsResponse::setMinOs(const QString &min_os) {
    m_min_os = min_os;
    m_min_os_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_min_os_Set() const{
    return m_min_os_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_min_os_Valid() const{
    return m_min_os_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getOrigin() const {
    return m_origin;
}
void OAIPrivateReleaseDetailsResponse::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_origin_Valid() const{
    return m_origin_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getProvisioningProfileName() const {
    return m_provisioning_profile_name;
}
void OAIPrivateReleaseDetailsResponse::setProvisioningProfileName(const QString &provisioning_profile_name) {
    m_provisioning_profile_name = provisioning_profile_name;
    m_provisioning_profile_name_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_provisioning_profile_name_Set() const{
    return m_provisioning_profile_name_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_provisioning_profile_name_Valid() const{
    return m_provisioning_profile_name_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getProvisioningProfileType() const {
    return m_provisioning_profile_type;
}
void OAIPrivateReleaseDetailsResponse::setProvisioningProfileType(const QString &provisioning_profile_type) {
    m_provisioning_profile_type = provisioning_profile_type;
    m_provisioning_profile_type_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_provisioning_profile_type_Set() const{
    return m_provisioning_profile_type_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_provisioning_profile_type_Valid() const{
    return m_provisioning_profile_type_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getPublishingStatus() const {
    return m_publishing_status;
}
void OAIPrivateReleaseDetailsResponse::setPublishingStatus(const QString &publishing_status) {
    m_publishing_status = publishing_status;
    m_publishing_status_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_publishing_status_Set() const{
    return m_publishing_status_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_publishing_status_Valid() const{
    return m_publishing_status_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getReleaseNotes() const {
    return m_release_notes;
}
void OAIPrivateReleaseDetailsResponse::setReleaseNotes(const QString &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getSecondaryDownloadUrl() const {
    return m_secondary_download_url;
}
void OAIPrivateReleaseDetailsResponse::setSecondaryDownloadUrl(const QString &secondary_download_url) {
    m_secondary_download_url = secondary_download_url;
    m_secondary_download_url_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_secondary_download_url_Set() const{
    return m_secondary_download_url_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_secondary_download_url_Valid() const{
    return m_secondary_download_url_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getShortVersion() const {
    return m_short_version;
}
void OAIPrivateReleaseDetailsResponse::setShortVersion(const QString &short_version) {
    m_short_version = short_version;
    m_short_version_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_short_version_Set() const{
    return m_short_version_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_short_version_Valid() const{
    return m_short_version_isValid;
}

qint32 OAIPrivateReleaseDetailsResponse::getSize() const {
    return m_size;
}
void OAIPrivateReleaseDetailsResponse::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getStatus() const {
    return m_status;
}
void OAIPrivateReleaseDetailsResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getUploadedAt() const {
    return m_uploaded_at;
}
void OAIPrivateReleaseDetailsResponse::setUploadedAt(const QString &uploaded_at) {
    m_uploaded_at = uploaded_at;
    m_uploaded_at_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_uploaded_at_Set() const{
    return m_uploaded_at_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_uploaded_at_Valid() const{
    return m_uploaded_at_isValid;
}

QString OAIPrivateReleaseDetailsResponse::getVersion() const {
    return m_version;
}
void OAIPrivateReleaseDetailsResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPrivateReleaseDetailsResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPrivateReleaseDetailsResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPrivateReleaseDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_min_api_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distribution_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_external_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_provisioning_profile_syncing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_profile_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publishing_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateReleaseDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
