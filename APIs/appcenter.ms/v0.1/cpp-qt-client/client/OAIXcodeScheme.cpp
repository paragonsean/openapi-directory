/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXcodeScheme.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXcodeScheme::OAIXcodeScheme(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXcodeScheme::OAIXcodeScheme() {
    this->initializeModel();
}

OAIXcodeScheme::~OAIXcodeScheme() {}

void OAIXcodeScheme::initializeModel() {

    m_archive_configuration_isSet = false;
    m_archive_configuration_isValid = false;

    m_archive_project_isSet = false;
    m_archive_project_isValid = false;

    m_has_test_action_isSet = false;
    m_has_test_action_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIXcodeScheme::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXcodeScheme::fromJsonObject(QJsonObject json) {

    m_archive_configuration_isValid = ::OpenAPI::fromJsonValue(m_archive_configuration, json[QString("archiveConfiguration")]);
    m_archive_configuration_isSet = !json[QString("archiveConfiguration")].isNull() && m_archive_configuration_isValid;

    m_archive_project_isValid = ::OpenAPI::fromJsonValue(m_archive_project, json[QString("archiveProject")]);
    m_archive_project_isSet = !json[QString("archiveProject")].isNull() && m_archive_project_isValid;

    m_has_test_action_isValid = ::OpenAPI::fromJsonValue(m_has_test_action, json[QString("hasTestAction")]);
    m_has_test_action_isSet = !json[QString("hasTestAction")].isNull() && m_has_test_action_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIXcodeScheme::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXcodeScheme::asJsonObject() const {
    QJsonObject obj;
    if (m_archive_configuration_isSet) {
        obj.insert(QString("archiveConfiguration"), ::OpenAPI::toJsonValue(m_archive_configuration));
    }
    if (m_archive_project.isSet()) {
        obj.insert(QString("archiveProject"), ::OpenAPI::toJsonValue(m_archive_project));
    }
    if (m_has_test_action_isSet) {
        obj.insert(QString("hasTestAction"), ::OpenAPI::toJsonValue(m_has_test_action));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIXcodeScheme::getArchiveConfiguration() const {
    return m_archive_configuration;
}
void OAIXcodeScheme::setArchiveConfiguration(const QString &archive_configuration) {
    m_archive_configuration = archive_configuration;
    m_archive_configuration_isSet = true;
}

bool OAIXcodeScheme::is_archive_configuration_Set() const{
    return m_archive_configuration_isSet;
}

bool OAIXcodeScheme::is_archive_configuration_Valid() const{
    return m_archive_configuration_isValid;
}

OAIBuilds_listToolsetProjects_200_response_xcode_xcodeSchemeContainers_inner_sharedSchemes_inner_archiveProject OAIXcodeScheme::getArchiveProject() const {
    return m_archive_project;
}
void OAIXcodeScheme::setArchiveProject(const OAIBuilds_listToolsetProjects_200_response_xcode_xcodeSchemeContainers_inner_sharedSchemes_inner_archiveProject &archive_project) {
    m_archive_project = archive_project;
    m_archive_project_isSet = true;
}

bool OAIXcodeScheme::is_archive_project_Set() const{
    return m_archive_project_isSet;
}

bool OAIXcodeScheme::is_archive_project_Valid() const{
    return m_archive_project_isValid;
}

bool OAIXcodeScheme::isHasTestAction() const {
    return m_has_test_action;
}
void OAIXcodeScheme::setHasTestAction(const bool &has_test_action) {
    m_has_test_action = has_test_action;
    m_has_test_action_isSet = true;
}

bool OAIXcodeScheme::is_has_test_action_Set() const{
    return m_has_test_action_isSet;
}

bool OAIXcodeScheme::is_has_test_action_Valid() const{
    return m_has_test_action_isValid;
}

QString OAIXcodeScheme::getName() const {
    return m_name;
}
void OAIXcodeScheme::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIXcodeScheme::is_name_Set() const{
    return m_name_isSet;
}

bool OAIXcodeScheme::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIXcodeScheme::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archive_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_archive_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_test_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXcodeScheme::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_test_action_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
