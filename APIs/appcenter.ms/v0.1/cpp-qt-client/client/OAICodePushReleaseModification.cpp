/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodePushReleaseModification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodePushReleaseModification::OAICodePushReleaseModification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodePushReleaseModification::OAICodePushReleaseModification() {
    this->initializeModel();
}

OAICodePushReleaseModification::~OAICodePushReleaseModification() {}

void OAICodePushReleaseModification::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_disabled_isSet = false;
    m_is_disabled_isValid = false;

    m_is_mandatory_isSet = false;
    m_is_mandatory_isValid = false;

    m_rollout_isSet = false;
    m_rollout_isValid = false;

    m_target_binary_range_isSet = false;
    m_target_binary_range_isValid = false;
}

void OAICodePushReleaseModification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodePushReleaseModification::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_disabled, json[QString("is_disabled")]);
    m_is_disabled_isSet = !json[QString("is_disabled")].isNull() && m_is_disabled_isValid;

    m_is_mandatory_isValid = ::OpenAPI::fromJsonValue(m_is_mandatory, json[QString("is_mandatory")]);
    m_is_mandatory_isSet = !json[QString("is_mandatory")].isNull() && m_is_mandatory_isValid;

    m_rollout_isValid = ::OpenAPI::fromJsonValue(m_rollout, json[QString("rollout")]);
    m_rollout_isSet = !json[QString("rollout")].isNull() && m_rollout_isValid;

    m_target_binary_range_isValid = ::OpenAPI::fromJsonValue(m_target_binary_range, json[QString("target_binary_range")]);
    m_target_binary_range_isSet = !json[QString("target_binary_range")].isNull() && m_target_binary_range_isValid;
}

QString OAICodePushReleaseModification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodePushReleaseModification::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_disabled_isSet) {
        obj.insert(QString("is_disabled"), ::OpenAPI::toJsonValue(m_is_disabled));
    }
    if (m_is_mandatory_isSet) {
        obj.insert(QString("is_mandatory"), ::OpenAPI::toJsonValue(m_is_mandatory));
    }
    if (m_rollout_isSet) {
        obj.insert(QString("rollout"), ::OpenAPI::toJsonValue(m_rollout));
    }
    if (m_target_binary_range_isSet) {
        obj.insert(QString("target_binary_range"), ::OpenAPI::toJsonValue(m_target_binary_range));
    }
    return obj;
}

QString OAICodePushReleaseModification::getDescription() const {
    return m_description;
}
void OAICodePushReleaseModification::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICodePushReleaseModification::is_description_Set() const{
    return m_description_isSet;
}

bool OAICodePushReleaseModification::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICodePushReleaseModification::isIsDisabled() const {
    return m_is_disabled;
}
void OAICodePushReleaseModification::setIsDisabled(const bool &is_disabled) {
    m_is_disabled = is_disabled;
    m_is_disabled_isSet = true;
}

bool OAICodePushReleaseModification::is_is_disabled_Set() const{
    return m_is_disabled_isSet;
}

bool OAICodePushReleaseModification::is_is_disabled_Valid() const{
    return m_is_disabled_isValid;
}

bool OAICodePushReleaseModification::isIsMandatory() const {
    return m_is_mandatory;
}
void OAICodePushReleaseModification::setIsMandatory(const bool &is_mandatory) {
    m_is_mandatory = is_mandatory;
    m_is_mandatory_isSet = true;
}

bool OAICodePushReleaseModification::is_is_mandatory_Set() const{
    return m_is_mandatory_isSet;
}

bool OAICodePushReleaseModification::is_is_mandatory_Valid() const{
    return m_is_mandatory_isValid;
}

qint32 OAICodePushReleaseModification::getRollout() const {
    return m_rollout;
}
void OAICodePushReleaseModification::setRollout(const qint32 &rollout) {
    m_rollout = rollout;
    m_rollout_isSet = true;
}

bool OAICodePushReleaseModification::is_rollout_Set() const{
    return m_rollout_isSet;
}

bool OAICodePushReleaseModification::is_rollout_Valid() const{
    return m_rollout_isValid;
}

QString OAICodePushReleaseModification::getTargetBinaryRange() const {
    return m_target_binary_range;
}
void OAICodePushReleaseModification::setTargetBinaryRange(const QString &target_binary_range) {
    m_target_binary_range = target_binary_range;
    m_target_binary_range_isSet = true;
}

bool OAICodePushReleaseModification::is_target_binary_range_Set() const{
    return m_target_binary_range_isSet;
}

bool OAICodePushReleaseModification::is_target_binary_range_Valid() const{
    return m_target_binary_range_isValid;
}

bool OAICodePushReleaseModification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_binary_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodePushReleaseModification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
