/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalytics_TestAudience_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalytics_TestAudience_request::OAIAnalytics_TestAudience_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalytics_TestAudience_request::OAIAnalytics_TestAudience_request() {
    this->initializeModel();
}

OAIAnalytics_TestAudience_request::~OAIAnalytics_TestAudience_request() {}

void OAIAnalytics_TestAudience_request::initializeModel() {

    m_custom_properties_isSet = false;
    m_custom_properties_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAIAnalytics_TestAudience_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalytics_TestAudience_request::fromJsonObject(QJsonObject json) {

    m_custom_properties_isValid = ::OpenAPI::fromJsonValue(m_custom_properties, json[QString("custom_properties")]);
    m_custom_properties_isSet = !json[QString("custom_properties")].isNull() && m_custom_properties_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;
}

QString OAIAnalytics_TestAudience_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalytics_TestAudience_request::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_properties.size() > 0) {
        obj.insert(QString("custom_properties"), ::OpenAPI::toJsonValue(m_custom_properties));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

QMap<QString, QString> OAIAnalytics_TestAudience_request::getCustomProperties() const {
    return m_custom_properties;
}
void OAIAnalytics_TestAudience_request::setCustomProperties(const QMap<QString, QString> &custom_properties) {
    m_custom_properties = custom_properties;
    m_custom_properties_isSet = true;
}

bool OAIAnalytics_TestAudience_request::is_custom_properties_Set() const{
    return m_custom_properties_isSet;
}

bool OAIAnalytics_TestAudience_request::is_custom_properties_Valid() const{
    return m_custom_properties_isValid;
}

QString OAIAnalytics_TestAudience_request::getDefinition() const {
    return m_definition;
}
void OAIAnalytics_TestAudience_request::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIAnalytics_TestAudience_request::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIAnalytics_TestAudience_request::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAIAnalytics_TestAudience_request::getDescription() const {
    return m_description;
}
void OAIAnalytics_TestAudience_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAnalytics_TestAudience_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAnalytics_TestAudience_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAnalytics_TestAudience_request::isEnabled() const {
    return m_enabled;
}
void OAIAnalytics_TestAudience_request::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAnalytics_TestAudience_request::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAnalytics_TestAudience_request::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIAnalytics_TestAudience_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalytics_TestAudience_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_definition_isValid && true;
}

} // namespace OpenAPI
