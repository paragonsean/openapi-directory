/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICodePushDeploymentMetrics_get_200_response_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICodePushDeploymentMetrics_get_200_response_inner::OAICodePushDeploymentMetrics_get_200_response_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICodePushDeploymentMetrics_get_200_response_inner::OAICodePushDeploymentMetrics_get_200_response_inner() {
    this->initializeModel();
}

OAICodePushDeploymentMetrics_get_200_response_inner::~OAICodePushDeploymentMetrics_get_200_response_inner() {}

void OAICodePushDeploymentMetrics_get_200_response_inner::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_downloaded_isSet = false;
    m_downloaded_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;

    m_installed_isSet = false;
    m_installed_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;
}

void OAICodePushDeploymentMetrics_get_200_response_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICodePushDeploymentMetrics_get_200_response_inner::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_downloaded_isValid = ::OpenAPI::fromJsonValue(m_downloaded, json[QString("downloaded")]);
    m_downloaded_isSet = !json[QString("downloaded")].isNull() && m_downloaded_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(m_failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;

    m_installed_isValid = ::OpenAPI::fromJsonValue(m_installed, json[QString("installed")]);
    m_installed_isSet = !json[QString("installed")].isNull() && m_installed_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;
}

QString OAICodePushDeploymentMetrics_get_200_response_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICodePushDeploymentMetrics_get_200_response_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_downloaded_isSet) {
        obj.insert(QString("downloaded"), ::OpenAPI::toJsonValue(m_downloaded));
    }
    if (m_failed_isSet) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(m_failed));
    }
    if (m_installed_isSet) {
        obj.insert(QString("installed"), ::OpenAPI::toJsonValue(m_installed));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    return obj;
}

qint32 OAICodePushDeploymentMetrics_get_200_response_inner::getActive() const {
    return m_active;
}
void OAICodePushDeploymentMetrics_get_200_response_inner::setActive(const qint32 &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_active_Set() const{
    return m_active_isSet;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_active_Valid() const{
    return m_active_isValid;
}

qint32 OAICodePushDeploymentMetrics_get_200_response_inner::getDownloaded() const {
    return m_downloaded;
}
void OAICodePushDeploymentMetrics_get_200_response_inner::setDownloaded(const qint32 &downloaded) {
    m_downloaded = downloaded;
    m_downloaded_isSet = true;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_downloaded_Set() const{
    return m_downloaded_isSet;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_downloaded_Valid() const{
    return m_downloaded_isValid;
}

qint32 OAICodePushDeploymentMetrics_get_200_response_inner::getFailed() const {
    return m_failed;
}
void OAICodePushDeploymentMetrics_get_200_response_inner::setFailed(const qint32 &failed) {
    m_failed = failed;
    m_failed_isSet = true;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_failed_Valid() const{
    return m_failed_isValid;
}

qint32 OAICodePushDeploymentMetrics_get_200_response_inner::getInstalled() const {
    return m_installed;
}
void OAICodePushDeploymentMetrics_get_200_response_inner::setInstalled(const qint32 &installed) {
    m_installed = installed;
    m_installed_isSet = true;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_installed_Set() const{
    return m_installed_isSet;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_installed_Valid() const{
    return m_installed_isValid;
}

QString OAICodePushDeploymentMetrics_get_200_response_inner::getLabel() const {
    return m_label;
}
void OAICodePushDeploymentMetrics_get_200_response_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::is_label_Valid() const{
    return m_label_isValid;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downloaded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICodePushDeploymentMetrics_get_200_response_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_label_isValid && true;
}

} // namespace OpenAPI
