/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrash.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrash::OAICrash(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrash::OAICrash() {
    this->initializeModel();
}

OAICrash::~OAICrash() {}

void OAICrash::initializeModel() {

    m_build_isSet = false;
    m_build_isValid = false;

    m_crash_id_isSet = false;
    m_crash_id_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_display_id_isSet = false;
    m_display_id_isValid = false;

    m_new_crash_group_id_isSet = false;
    m_new_crash_group_id_isValid = false;

    m_new_crash_id_isSet = false;
    m_new_crash_id_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_stacktrace_isSet = false;
    m_stacktrace_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICrash::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrash::fromJsonObject(QJsonObject json) {

    m_build_isValid = ::OpenAPI::fromJsonValue(m_build, json[QString("build")]);
    m_build_isSet = !json[QString("build")].isNull() && m_build_isValid;

    m_crash_id_isValid = ::OpenAPI::fromJsonValue(m_crash_id, json[QString("crash_id")]);
    m_crash_id_isSet = !json[QString("crash_id")].isNull() && m_crash_id_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("device_name")]);
    m_device_name_isSet = !json[QString("device_name")].isNull() && m_device_name_isValid;

    m_display_id_isValid = ::OpenAPI::fromJsonValue(m_display_id, json[QString("display_id")]);
    m_display_id_isSet = !json[QString("display_id")].isNull() && m_display_id_isValid;

    m_new_crash_group_id_isValid = ::OpenAPI::fromJsonValue(m_new_crash_group_id, json[QString("new_crash_group_id")]);
    m_new_crash_group_id_isSet = !json[QString("new_crash_group_id")].isNull() && m_new_crash_group_id_isValid;

    m_new_crash_id_isValid = ::OpenAPI::fromJsonValue(m_new_crash_id, json[QString("new_crash_id")]);
    m_new_crash_id_isSet = !json[QString("new_crash_id")].isNull() && m_new_crash_id_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("os_type")]);
    m_os_type_isSet = !json[QString("os_type")].isNull() && m_os_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("os_version")]);
    m_os_version_isSet = !json[QString("os_version")].isNull() && m_os_version_isValid;

    m_stacktrace_isValid = ::OpenAPI::fromJsonValue(m_stacktrace, json[QString("stacktrace")]);
    m_stacktrace_isSet = !json[QString("stacktrace")].isNull() && m_stacktrace_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICrash::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrash::asJsonObject() const {
    QJsonObject obj;
    if (m_build_isSet) {
        obj.insert(QString("build"), ::OpenAPI::toJsonValue(m_build));
    }
    if (m_crash_id_isSet) {
        obj.insert(QString("crash_id"), ::OpenAPI::toJsonValue(m_crash_id));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("device_name"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_display_id_isSet) {
        obj.insert(QString("display_id"), ::OpenAPI::toJsonValue(m_display_id));
    }
    if (m_new_crash_group_id_isSet) {
        obj.insert(QString("new_crash_group_id"), ::OpenAPI::toJsonValue(m_new_crash_group_id));
    }
    if (m_new_crash_id_isSet) {
        obj.insert(QString("new_crash_id"), ::OpenAPI::toJsonValue(m_new_crash_id));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("os_type"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("os_version"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_stacktrace.isSet()) {
        obj.insert(QString("stacktrace"), ::OpenAPI::toJsonValue(m_stacktrace));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICrash::getBuild() const {
    return m_build;
}
void OAICrash::setBuild(const QString &build) {
    m_build = build;
    m_build_isSet = true;
}

bool OAICrash::is_build_Set() const{
    return m_build_isSet;
}

bool OAICrash::is_build_Valid() const{
    return m_build_isValid;
}

QString OAICrash::getCrashId() const {
    return m_crash_id;
}
void OAICrash::setCrashId(const QString &crash_id) {
    m_crash_id = crash_id;
    m_crash_id_isSet = true;
}

bool OAICrash::is_crash_id_Set() const{
    return m_crash_id_isSet;
}

bool OAICrash::is_crash_id_Valid() const{
    return m_crash_id_isValid;
}

OAICrash_details OAICrash::getDetails() const {
    return m_details;
}
void OAICrash::setDetails(const OAICrash_details &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAICrash::is_details_Set() const{
    return m_details_isSet;
}

bool OAICrash::is_details_Valid() const{
    return m_details_isValid;
}

QString OAICrash::getDevice() const {
    return m_device;
}
void OAICrash::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAICrash::is_device_Set() const{
    return m_device_isSet;
}

bool OAICrash::is_device_Valid() const{
    return m_device_isValid;
}

QString OAICrash::getDeviceName() const {
    return m_device_name;
}
void OAICrash::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAICrash::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAICrash::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAICrash::getDisplayId() const {
    return m_display_id;
}
void OAICrash::setDisplayId(const QString &display_id) {
    m_display_id = display_id;
    m_display_id_isSet = true;
}

bool OAICrash::is_display_id_Set() const{
    return m_display_id_isSet;
}

bool OAICrash::is_display_id_Valid() const{
    return m_display_id_isValid;
}

QString OAICrash::getNewCrashGroupId() const {
    return m_new_crash_group_id;
}
void OAICrash::setNewCrashGroupId(const QString &new_crash_group_id) {
    m_new_crash_group_id = new_crash_group_id;
    m_new_crash_group_id_isSet = true;
}

bool OAICrash::is_new_crash_group_id_Set() const{
    return m_new_crash_group_id_isSet;
}

bool OAICrash::is_new_crash_group_id_Valid() const{
    return m_new_crash_group_id_isValid;
}

QString OAICrash::getNewCrashId() const {
    return m_new_crash_id;
}
void OAICrash::setNewCrashId(const QString &new_crash_id) {
    m_new_crash_id = new_crash_id;
    m_new_crash_id_isSet = true;
}

bool OAICrash::is_new_crash_id_Set() const{
    return m_new_crash_id_isSet;
}

bool OAICrash::is_new_crash_id_Valid() const{
    return m_new_crash_id_isValid;
}

QString OAICrash::getOsType() const {
    return m_os_type;
}
void OAICrash::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAICrash::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAICrash::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAICrash::getOsVersion() const {
    return m_os_version;
}
void OAICrash::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAICrash::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAICrash::is_os_version_Valid() const{
    return m_os_version_isValid;
}

OAIStacktrace OAICrash::getStacktrace() const {
    return m_stacktrace;
}
void OAICrash::setStacktrace(const OAIStacktrace &stacktrace) {
    m_stacktrace = stacktrace;
    m_stacktrace_isSet = true;
}

bool OAICrash::is_stacktrace_Set() const{
    return m_stacktrace_isSet;
}

bool OAICrash::is_stacktrace_Valid() const{
    return m_stacktrace_isValid;
}

QDateTime OAICrash::getTimestamp() const {
    return m_timestamp;
}
void OAICrash::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAICrash::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAICrash::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAICrash::getUserEmail() const {
    return m_user_email;
}
void OAICrash::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAICrash::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAICrash::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAICrash::getUserName() const {
    return m_user_name;
}
void OAICrash::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAICrash::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAICrash::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAICrash::getVersion() const {
    return m_version;
}
void OAICrash::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICrash::is_version_Set() const{
    return m_version_isSet;
}

bool OAICrash::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICrash::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_crash_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_crash_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacktrace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrash::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_build_isValid && m_crash_id_isValid && m_device_isValid && m_new_crash_group_id_isValid && m_new_crash_id_isValid && m_os_version_isValid && m_timestamp_isValid && m_user_name_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
