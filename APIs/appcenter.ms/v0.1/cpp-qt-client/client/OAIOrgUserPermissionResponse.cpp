/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgUserPermissionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgUserPermissionResponse::OAIOrgUserPermissionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgUserPermissionResponse::OAIOrgUserPermissionResponse() {
    this->initializeModel();
}

OAIOrgUserPermissionResponse::~OAIOrgUserPermissionResponse() {}

void OAIOrgUserPermissionResponse::initializeModel() {

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_user_role_isSet = false;
    m_user_role_isValid = false;
}

void OAIOrgUserPermissionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgUserPermissionResponse::fromJsonObject(QJsonObject json) {

    m_org_id_isValid = ::OpenAPI::fromJsonValue(m_org_id, json[QString("orgId")]);
    m_org_id_isSet = !json[QString("orgId")].isNull() && m_org_id_isValid;

    m_user_role_isValid = ::OpenAPI::fromJsonValue(m_user_role, json[QString("userRole")]);
    m_user_role_isSet = !json[QString("userRole")].isNull() && m_user_role_isValid;
}

QString OAIOrgUserPermissionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgUserPermissionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_org_id_isSet) {
        obj.insert(QString("orgId"), ::OpenAPI::toJsonValue(m_org_id));
    }
    if (m_user_role_isSet) {
        obj.insert(QString("userRole"), ::OpenAPI::toJsonValue(m_user_role));
    }
    return obj;
}

QString OAIOrgUserPermissionResponse::getOrgId() const {
    return m_org_id;
}
void OAIOrgUserPermissionResponse::setOrgId(const QString &org_id) {
    m_org_id = org_id;
    m_org_id_isSet = true;
}

bool OAIOrgUserPermissionResponse::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIOrgUserPermissionResponse::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIOrgUserPermissionResponse::getUserRole() const {
    return m_user_role;
}
void OAIOrgUserPermissionResponse::setUserRole(const QString &user_role) {
    m_user_role = user_role;
    m_user_role_isSet = true;
}

bool OAIOrgUserPermissionResponse::is_user_role_Set() const{
    return m_user_role_isSet;
}

bool OAIOrgUserPermissionResponse::is_user_role_Valid() const{
    return m_user_role_isValid;
}

bool OAIOrgUserPermissionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgUserPermissionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_org_id_isValid && m_user_role_isValid && true;
}

} // namespace OpenAPI
