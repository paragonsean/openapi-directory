/**
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITest_getDeviceConfigurations_200_response_inner_model_screenSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::OAITest_getDeviceConfigurations_200_response_inner_model_screenSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::OAITest_getDeviceConfigurations_200_response_inner_model_screenSize() {
    this->initializeModel();
}

OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::~OAITest_getDeviceConfigurations_200_response_inner_model_screenSize() {}

void OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::initializeModel() {

    m_cm_isSet = false;
    m_cm_isValid = false;

    m_in_isSet = false;
    m_in_isValid = false;
}

void OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::fromJsonObject(QJsonObject json) {

    m_cm_isValid = ::OpenAPI::fromJsonValue(m_cm, json[QString("cm")]);
    m_cm_isSet = !json[QString("cm")].isNull() && m_cm_isValid;

    m_in_isValid = ::OpenAPI::fromJsonValue(m_in, json[QString("in")]);
    m_in_isSet = !json[QString("in")].isNull() && m_in_isValid;
}

QString OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::asJsonObject() const {
    QJsonObject obj;
    if (m_cm_isSet) {
        obj.insert(QString("cm"), ::OpenAPI::toJsonValue(m_cm));
    }
    if (m_in_isSet) {
        obj.insert(QString("in"), ::OpenAPI::toJsonValue(m_in));
    }
    return obj;
}

QString OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::getCm() const {
    return m_cm;
}
void OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::setCm(const QString &cm) {
    m_cm = cm;
    m_cm_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::is_cm_Set() const{
    return m_cm_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::is_cm_Valid() const{
    return m_cm_isValid;
}

QString OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::getIn() const {
    return m_in;
}
void OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::setIn(const QString &in) {
    m_in = in;
    m_in_isSet = true;
}

bool OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::is_in_Set() const{
    return m_in_isSet;
}

bool OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::is_in_Valid() const{
    return m_in_isValid;
}

bool OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITest_getDeviceConfigurations_200_response_inner_model_screenSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
