/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response containing information about an iOS provisioning profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisioningProfileResponse {
  public static final String SERIALIZED_NAME_APPEX_PROFILES = "appex_profiles";
  @SerializedName(SERIALIZED_NAME_APPEX_PROFILES)
  private List<ProvisioningProfileResponse> appexProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_BUNDLE_ID = "provisioning_bundle_id";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_BUNDLE_ID)
  private String provisioningBundleId;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_NAME = "provisioning_profile_name";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_NAME)
  private String provisioningProfileName;

  /**
   * Gets or Sets provisioningProfileType
   */
  @JsonAdapter(ProvisioningProfileTypeEnum.Adapter.class)
  public enum ProvisioningProfileTypeEnum {
    ADHOC("adhoc"),
    
    ENTERPRISE("enterprise"),
    
    OTHER("other");

    private String value;

    ProvisioningProfileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningProfileTypeEnum fromValue(String value) {
      for (ProvisioningProfileTypeEnum b : ProvisioningProfileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningProfileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningProfileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningProfileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningProfileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningProfileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_TYPE = "provisioning_profile_type";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_TYPE)
  private ProvisioningProfileTypeEnum provisioningProfileType;

  public static final String SERIALIZED_NAME_TEAM_IDENTIFIER = "team_identifier";
  @SerializedName(SERIALIZED_NAME_TEAM_IDENTIFIER)
  private String teamIdentifier;

  public static final String SERIALIZED_NAME_UDIDS = "udids";
  @SerializedName(SERIALIZED_NAME_UDIDS)
  private List<String> udids = new ArrayList<>();

  public ProvisioningProfileResponse() {
  }

  public ProvisioningProfileResponse appexProfiles(List<ProvisioningProfileResponse> appexProfiles) {
    this.appexProfiles = appexProfiles;
    return this;
  }

  public ProvisioningProfileResponse addAppexProfilesItem(ProvisioningProfileResponse appexProfilesItem) {
    if (this.appexProfiles == null) {
      this.appexProfiles = new ArrayList<>();
    }
    this.appexProfiles.add(appexProfilesItem);
    return this;
  }

  /**
   * Array of provisioning profiles for any app extensions
   * @return appexProfiles
   */
  @javax.annotation.Nullable
  public List<ProvisioningProfileResponse> getAppexProfiles() {
    return appexProfiles;
  }

  public void setAppexProfiles(List<ProvisioningProfileResponse> appexProfiles) {
    this.appexProfiles = appexProfiles;
  }


  public ProvisioningProfileResponse provisioningBundleId(String provisioningBundleId) {
    this.provisioningBundleId = provisioningBundleId;
    return this;
  }

  /**
   * The bundle identifier associated with the profile.
   * @return provisioningBundleId
   */
  @javax.annotation.Nullable
  public String getProvisioningBundleId() {
    return provisioningBundleId;
  }

  public void setProvisioningBundleId(String provisioningBundleId) {
    this.provisioningBundleId = provisioningBundleId;
  }


  public ProvisioningProfileResponse provisioningProfileName(String provisioningProfileName) {
    this.provisioningProfileName = provisioningProfileName;
    return this;
  }

  /**
   * The name of the provisioning profile.
   * @return provisioningProfileName
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileName() {
    return provisioningProfileName;
  }

  public void setProvisioningProfileName(String provisioningProfileName) {
    this.provisioningProfileName = provisioningProfileName;
  }


  public ProvisioningProfileResponse provisioningProfileType(ProvisioningProfileTypeEnum provisioningProfileType) {
    this.provisioningProfileType = provisioningProfileType;
    return this;
  }

  /**
   * Get provisioningProfileType
   * @return provisioningProfileType
   */
  @javax.annotation.Nonnull
  public ProvisioningProfileTypeEnum getProvisioningProfileType() {
    return provisioningProfileType;
  }

  public void setProvisioningProfileType(ProvisioningProfileTypeEnum provisioningProfileType) {
    this.provisioningProfileType = provisioningProfileType;
  }


  public ProvisioningProfileResponse teamIdentifier(String teamIdentifier) {
    this.teamIdentifier = teamIdentifier;
    return this;
  }

  /**
   * The team identifier.
   * @return teamIdentifier
   */
  @javax.annotation.Nullable
  public String getTeamIdentifier() {
    return teamIdentifier;
  }

  public void setTeamIdentifier(String teamIdentifier) {
    this.teamIdentifier = teamIdentifier;
  }


  public ProvisioningProfileResponse udids(List<String> udids) {
    this.udids = udids;
    return this;
  }

  public ProvisioningProfileResponse addUdidsItem(String udidsItem) {
    if (this.udids == null) {
      this.udids = new ArrayList<>();
    }
    this.udids.add(udidsItem);
    return this;
  }

  /**
   * Get udids
   * @return udids
   */
  @javax.annotation.Nullable
  public List<String> getUdids() {
    return udids;
  }

  public void setUdids(List<String> udids) {
    this.udids = udids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisioningProfileResponse provisioningProfileResponse = (ProvisioningProfileResponse) o;
    return Objects.equals(this.appexProfiles, provisioningProfileResponse.appexProfiles) &&
        Objects.equals(this.provisioningBundleId, provisioningProfileResponse.provisioningBundleId) &&
        Objects.equals(this.provisioningProfileName, provisioningProfileResponse.provisioningProfileName) &&
        Objects.equals(this.provisioningProfileType, provisioningProfileResponse.provisioningProfileType) &&
        Objects.equals(this.teamIdentifier, provisioningProfileResponse.teamIdentifier) &&
        Objects.equals(this.udids, provisioningProfileResponse.udids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appexProfiles, provisioningBundleId, provisioningProfileName, provisioningProfileType, teamIdentifier, udids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisioningProfileResponse {\n");
    sb.append("    appexProfiles: ").append(toIndentedString(appexProfiles)).append("\n");
    sb.append("    provisioningBundleId: ").append(toIndentedString(provisioningBundleId)).append("\n");
    sb.append("    provisioningProfileName: ").append(toIndentedString(provisioningProfileName)).append("\n");
    sb.append("    provisioningProfileType: ").append(toIndentedString(provisioningProfileType)).append("\n");
    sb.append("    teamIdentifier: ").append(toIndentedString(teamIdentifier)).append("\n");
    sb.append("    udids: ").append(toIndentedString(udids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appex_profiles");
    openapiFields.add("provisioning_bundle_id");
    openapiFields.add("provisioning_profile_name");
    openapiFields.add("provisioning_profile_type");
    openapiFields.add("team_identifier");
    openapiFields.add("udids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("provisioning_profile_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisioningProfileResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisioningProfileResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisioningProfileResponse is not found in the empty JSON string", ProvisioningProfileResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisioningProfileResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisioningProfileResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvisioningProfileResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("appex_profiles") != null && !jsonObj.get("appex_profiles").isJsonNull()) {
        JsonArray jsonArrayappexProfiles = jsonObj.getAsJsonArray("appex_profiles");
        if (jsonArrayappexProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appex_profiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appex_profiles` to be an array in the JSON string but got `%s`", jsonObj.get("appex_profiles").toString()));
          }

          // validate the optional field `appex_profiles` (array)
          for (int i = 0; i < jsonArrayappexProfiles.size(); i++) {
            ProvisioningProfileResponse.validateJsonElement(jsonArrayappexProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioning_bundle_id") != null && !jsonObj.get("provisioning_bundle_id").isJsonNull()) && !jsonObj.get("provisioning_bundle_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioning_bundle_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioning_bundle_id").toString()));
      }
      if ((jsonObj.get("provisioning_profile_name") != null && !jsonObj.get("provisioning_profile_name").isJsonNull()) && !jsonObj.get("provisioning_profile_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioning_profile_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioning_profile_name").toString()));
      }
      if (!jsonObj.get("provisioning_profile_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioning_profile_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioning_profile_type").toString()));
      }
      // validate the required field `provisioning_profile_type`
      ProvisioningProfileTypeEnum.validateJsonElement(jsonObj.get("provisioning_profile_type"));
      if ((jsonObj.get("team_identifier") != null && !jsonObj.get("team_identifier").isJsonNull()) && !jsonObj.get("team_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_identifier").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("udids") != null && !jsonObj.get("udids").isJsonNull() && !jsonObj.get("udids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `udids` to be an array in the JSON string but got `%s`", jsonObj.get("udids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisioningProfileResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisioningProfileResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisioningProfileResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisioningProfileResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisioningProfileResponse>() {
           @Override
           public void write(JsonWriter out, ProvisioningProfileResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisioningProfileResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisioningProfileResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisioningProfileResponse
   * @throws IOException if the JSON string is invalid with respect to ProvisioningProfileResponse
   */
  public static ProvisioningProfileResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisioningProfileResponse.class);
  }

  /**
   * Convert an instance of ProvisioningProfileResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

