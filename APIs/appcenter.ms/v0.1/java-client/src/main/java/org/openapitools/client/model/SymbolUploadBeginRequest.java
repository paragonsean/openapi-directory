/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request containing information pertaining to starting a symbol upload process
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SymbolUploadBeginRequest {
  public static final String SERIALIZED_NAME_BUILD = "build";
  @SerializedName(SERIALIZED_NAME_BUILD)
  private String build;

  public static final String SERIALIZED_NAME_CLIENT_CALLBACK = "client_callback";
  @SerializedName(SERIALIZED_NAME_CLIENT_CALLBACK)
  private String clientCallback;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  /**
   * The type of the symbol for the current symbol upload
   */
  @JsonAdapter(SymbolTypeEnum.Adapter.class)
  public enum SymbolTypeEnum {
    APPLE("Apple"),
    
    JAVA_SCRIPT("JavaScript"),
    
    BREAKPAD("Breakpad"),
    
    ANDROID_PROGUARD("AndroidProguard"),
    
    UWP("UWP");

    private String value;

    SymbolTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SymbolTypeEnum fromValue(String value) {
      for (SymbolTypeEnum b : SymbolTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SymbolTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SymbolTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SymbolTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SymbolTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SymbolTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYMBOL_TYPE = "symbol_type";
  @SerializedName(SERIALIZED_NAME_SYMBOL_TYPE)
  private SymbolTypeEnum symbolType;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public SymbolUploadBeginRequest() {
  }

  public SymbolUploadBeginRequest build(String build) {
    this.build = build;
    return this;
  }

  /**
   * The build number. Optional for Apple. Required for Android.
   * @return build
   */
  @javax.annotation.Nullable
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }


  public SymbolUploadBeginRequest clientCallback(String clientCallback) {
    this.clientCallback = clientCallback;
    return this;
  }

  /**
   * The callback URL that the client can optionally provide to get status updates for the current symbol upload
   * @return clientCallback
   */
  @javax.annotation.Nullable
  public String getClientCallback() {
    return clientCallback;
  }

  public void setClientCallback(String clientCallback) {
    this.clientCallback = clientCallback;
  }


  public SymbolUploadBeginRequest fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The file name for the symbol upload
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public SymbolUploadBeginRequest symbolType(SymbolTypeEnum symbolType) {
    this.symbolType = symbolType;
    return this;
  }

  /**
   * The type of the symbol for the current symbol upload
   * @return symbolType
   */
  @javax.annotation.Nonnull
  public SymbolTypeEnum getSymbolType() {
    return symbolType;
  }

  public void setSymbolType(SymbolTypeEnum symbolType) {
    this.symbolType = symbolType;
  }


  public SymbolUploadBeginRequest version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version number. Optional for Apple. Required for Android.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolUploadBeginRequest symbolUploadBeginRequest = (SymbolUploadBeginRequest) o;
    return Objects.equals(this.build, symbolUploadBeginRequest.build) &&
        Objects.equals(this.clientCallback, symbolUploadBeginRequest.clientCallback) &&
        Objects.equals(this.fileName, symbolUploadBeginRequest.fileName) &&
        Objects.equals(this.symbolType, symbolUploadBeginRequest.symbolType) &&
        Objects.equals(this.version, symbolUploadBeginRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(build, clientCallback, fileName, symbolType, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolUploadBeginRequest {\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    clientCallback: ").append(toIndentedString(clientCallback)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    symbolType: ").append(toIndentedString(symbolType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("build");
    openapiFields.add("client_callback");
    openapiFields.add("file_name");
    openapiFields.add("symbol_type");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("symbol_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SymbolUploadBeginRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SymbolUploadBeginRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SymbolUploadBeginRequest is not found in the empty JSON string", SymbolUploadBeginRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SymbolUploadBeginRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SymbolUploadBeginRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SymbolUploadBeginRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("build") != null && !jsonObj.get("build").isJsonNull()) && !jsonObj.get("build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build").toString()));
      }
      if ((jsonObj.get("client_callback") != null && !jsonObj.get("client_callback").isJsonNull()) && !jsonObj.get("client_callback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_callback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_callback").toString()));
      }
      if ((jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonNull()) && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if (!jsonObj.get("symbol_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_type").toString()));
      }
      // validate the required field `symbol_type`
      SymbolTypeEnum.validateJsonElement(jsonObj.get("symbol_type"));
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SymbolUploadBeginRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SymbolUploadBeginRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SymbolUploadBeginRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SymbolUploadBeginRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SymbolUploadBeginRequest>() {
           @Override
           public void write(JsonWriter out, SymbolUploadBeginRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SymbolUploadBeginRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SymbolUploadBeginRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SymbolUploadBeginRequest
   * @throws IOException if the JSON string is invalid with respect to SymbolUploadBeginRequest
   */
  public static SymbolUploadBeginRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SymbolUploadBeginRequest.class);
  }

  /**
   * Convert an instance of SymbolUploadBeginRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

