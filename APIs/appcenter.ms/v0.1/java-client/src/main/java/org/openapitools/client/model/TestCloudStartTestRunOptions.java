/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options required to start the test run
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestCloudStartTestRunOptions {
  public static final String SERIALIZED_NAME_DEVICE_SELECTION = "device_selection";
  @SerializedName(SERIALIZED_NAME_DEVICE_SELECTION)
  private String deviceSelection;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_TEST_FRAMEWORK = "test_framework";
  @SerializedName(SERIALIZED_NAME_TEST_FRAMEWORK)
  private String testFramework;

  public static final String SERIALIZED_NAME_TEST_PARAMETERS = "test_parameters";
  @SerializedName(SERIALIZED_NAME_TEST_PARAMETERS)
  private Object testParameters;

  public static final String SERIALIZED_NAME_TEST_SERIES = "test_series";
  @SerializedName(SERIALIZED_NAME_TEST_SERIES)
  private String testSeries;

  public TestCloudStartTestRunOptions() {
  }

  public TestCloudStartTestRunOptions deviceSelection(String deviceSelection) {
    this.deviceSelection = deviceSelection;
    return this;
  }

  /**
   * Device selection string.
   * @return deviceSelection
   */
  @javax.annotation.Nonnull
  public String getDeviceSelection() {
    return deviceSelection;
  }

  public void setDeviceSelection(String deviceSelection) {
    this.deviceSelection = deviceSelection;
  }


  public TestCloudStartTestRunOptions language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Language that should be used to run tests.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public TestCloudStartTestRunOptions locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Locale that should be used to run tests.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public TestCloudStartTestRunOptions testFramework(String testFramework) {
    this.testFramework = testFramework;
    return this;
  }

  /**
   * Test framework used by tests.
   * @return testFramework
   */
  @javax.annotation.Nonnull
  public String getTestFramework() {
    return testFramework;
  }

  public void setTestFramework(String testFramework) {
    this.testFramework = testFramework;
  }


  public TestCloudStartTestRunOptions testParameters(Object testParameters) {
    this.testParameters = testParameters;
    return this;
  }

  /**
   * A JSON dictionary with additional test parameters
   * @return testParameters
   */
  @javax.annotation.Nullable
  public Object getTestParameters() {
    return testParameters;
  }

  public void setTestParameters(Object testParameters) {
    this.testParameters = testParameters;
  }


  public TestCloudStartTestRunOptions testSeries(String testSeries) {
    this.testSeries = testSeries;
    return this;
  }

  /**
   * Name of the test series.
   * @return testSeries
   */
  @javax.annotation.Nullable
  public String getTestSeries() {
    return testSeries;
  }

  public void setTestSeries(String testSeries) {
    this.testSeries = testSeries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCloudStartTestRunOptions testCloudStartTestRunOptions = (TestCloudStartTestRunOptions) o;
    return Objects.equals(this.deviceSelection, testCloudStartTestRunOptions.deviceSelection) &&
        Objects.equals(this.language, testCloudStartTestRunOptions.language) &&
        Objects.equals(this.locale, testCloudStartTestRunOptions.locale) &&
        Objects.equals(this.testFramework, testCloudStartTestRunOptions.testFramework) &&
        Objects.equals(this.testParameters, testCloudStartTestRunOptions.testParameters) &&
        Objects.equals(this.testSeries, testCloudStartTestRunOptions.testSeries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceSelection, language, locale, testFramework, testParameters, testSeries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCloudStartTestRunOptions {\n");
    sb.append("    deviceSelection: ").append(toIndentedString(deviceSelection)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    testFramework: ").append(toIndentedString(testFramework)).append("\n");
    sb.append("    testParameters: ").append(toIndentedString(testParameters)).append("\n");
    sb.append("    testSeries: ").append(toIndentedString(testSeries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_selection");
    openapiFields.add("language");
    openapiFields.add("locale");
    openapiFields.add("test_framework");
    openapiFields.add("test_parameters");
    openapiFields.add("test_series");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("device_selection");
    openapiRequiredFields.add("test_framework");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCloudStartTestRunOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCloudStartTestRunOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCloudStartTestRunOptions is not found in the empty JSON string", TestCloudStartTestRunOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCloudStartTestRunOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCloudStartTestRunOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestCloudStartTestRunOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("device_selection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_selection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_selection").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (!jsonObj.get("test_framework").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test_framework` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test_framework").toString()));
      }
      if ((jsonObj.get("test_series") != null && !jsonObj.get("test_series").isJsonNull()) && !jsonObj.get("test_series").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `test_series` to be a primitive type in the JSON string but got `%s`", jsonObj.get("test_series").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCloudStartTestRunOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCloudStartTestRunOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCloudStartTestRunOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCloudStartTestRunOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCloudStartTestRunOptions>() {
           @Override
           public void write(JsonWriter out, TestCloudStartTestRunOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCloudStartTestRunOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCloudStartTestRunOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCloudStartTestRunOptions
   * @throws IOException if the JSON string is invalid with respect to TestCloudStartTestRunOptions
   */
  public static TestCloudStartTestRunOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCloudStartTestRunOptions.class);
  }

  /**
   * Convert an instance of TestCloudStartTestRunOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

