/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object returned in response to getting a bug tracker issue related to a crash group id
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BugTrackerIssueResult {
  /**
   * Gets or Sets bugTrackerType
   */
  @JsonAdapter(BugTrackerTypeEnum.Adapter.class)
  public enum BugTrackerTypeEnum {
    GITHUB("github"),
    
    VSTS("vsts"),
    
    JIRA("jira");

    private String value;

    BugTrackerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BugTrackerTypeEnum fromValue(String value) {
      for (BugTrackerTypeEnum b : BugTrackerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BugTrackerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BugTrackerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BugTrackerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BugTrackerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BugTrackerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUG_TRACKER_TYPE = "bug_tracker_type";
  @SerializedName(SERIALIZED_NAME_BUG_TRACKER_TYPE)
  private BugTrackerTypeEnum bugTrackerType;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MOBILE_CENTER_ID = "mobile_center_id";
  @SerializedName(SERIALIZED_NAME_MOBILE_CENTER_ID)
  private String mobileCenterId;

  public static final String SERIALIZED_NAME_REPO_NAME = "repo_name";
  @SerializedName(SERIALIZED_NAME_REPO_NAME)
  private String repoName;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public BugTrackerIssueResult() {
  }

  public BugTrackerIssueResult bugTrackerType(BugTrackerTypeEnum bugTrackerType) {
    this.bugTrackerType = bugTrackerType;
    return this;
  }

  /**
   * Get bugTrackerType
   * @return bugTrackerType
   */
  @javax.annotation.Nullable
  public BugTrackerTypeEnum getBugTrackerType() {
    return bugTrackerType;
  }

  public void setBugTrackerType(BugTrackerTypeEnum bugTrackerType) {
    this.bugTrackerType = bugTrackerType;
  }


  public BugTrackerIssueResult eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public BugTrackerIssueResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BugTrackerIssueResult mobileCenterId(String mobileCenterId) {
    this.mobileCenterId = mobileCenterId;
    return this;
  }

  /**
   * Get mobileCenterId
   * @return mobileCenterId
   */
  @javax.annotation.Nullable
  public String getMobileCenterId() {
    return mobileCenterId;
  }

  public void setMobileCenterId(String mobileCenterId) {
    this.mobileCenterId = mobileCenterId;
  }


  public BugTrackerIssueResult repoName(String repoName) {
    this.repoName = repoName;
    return this;
  }

  /**
   * Get repoName
   * @return repoName
   */
  @javax.annotation.Nullable
  public String getRepoName() {
    return repoName;
  }

  public void setRepoName(String repoName) {
    this.repoName = repoName;
  }


  public BugTrackerIssueResult title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public BugTrackerIssueResult url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BugTrackerIssueResult bugTrackerIssueResult = (BugTrackerIssueResult) o;
    return Objects.equals(this.bugTrackerType, bugTrackerIssueResult.bugTrackerType) &&
        Objects.equals(this.eventType, bugTrackerIssueResult.eventType) &&
        Objects.equals(this.id, bugTrackerIssueResult.id) &&
        Objects.equals(this.mobileCenterId, bugTrackerIssueResult.mobileCenterId) &&
        Objects.equals(this.repoName, bugTrackerIssueResult.repoName) &&
        Objects.equals(this.title, bugTrackerIssueResult.title) &&
        Objects.equals(this.url, bugTrackerIssueResult.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bugTrackerType, eventType, id, mobileCenterId, repoName, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BugTrackerIssueResult {\n");
    sb.append("    bugTrackerType: ").append(toIndentedString(bugTrackerType)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mobileCenterId: ").append(toIndentedString(mobileCenterId)).append("\n");
    sb.append("    repoName: ").append(toIndentedString(repoName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bug_tracker_type");
    openapiFields.add("event_type");
    openapiFields.add("id");
    openapiFields.add("mobile_center_id");
    openapiFields.add("repo_name");
    openapiFields.add("title");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BugTrackerIssueResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BugTrackerIssueResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BugTrackerIssueResult is not found in the empty JSON string", BugTrackerIssueResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BugTrackerIssueResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BugTrackerIssueResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bug_tracker_type") != null && !jsonObj.get("bug_tracker_type").isJsonNull()) && !jsonObj.get("bug_tracker_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bug_tracker_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bug_tracker_type").toString()));
      }
      // validate the optional field `bug_tracker_type`
      if (jsonObj.get("bug_tracker_type") != null && !jsonObj.get("bug_tracker_type").isJsonNull()) {
        BugTrackerTypeEnum.validateJsonElement(jsonObj.get("bug_tracker_type"));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("mobile_center_id") != null && !jsonObj.get("mobile_center_id").isJsonNull()) && !jsonObj.get("mobile_center_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobile_center_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobile_center_id").toString()));
      }
      if ((jsonObj.get("repo_name") != null && !jsonObj.get("repo_name").isJsonNull()) && !jsonObj.get("repo_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_name").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BugTrackerIssueResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BugTrackerIssueResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BugTrackerIssueResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BugTrackerIssueResult.class));

       return (TypeAdapter<T>) new TypeAdapter<BugTrackerIssueResult>() {
           @Override
           public void write(JsonWriter out, BugTrackerIssueResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BugTrackerIssueResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BugTrackerIssueResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BugTrackerIssueResult
   * @throws IOException if the JSON string is invalid with respect to BugTrackerIssueResult
   */
  public static BugTrackerIssueResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BugTrackerIssueResult.class);
  }

  /**
   * Convert an instance of BugTrackerIssueResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

