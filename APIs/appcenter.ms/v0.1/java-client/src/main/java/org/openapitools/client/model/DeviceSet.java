/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceSetDeviceConfigurationsInner;
import org.openapitools.client.model.DeviceSetOwner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The name and devices of the device set
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceSet {
  public static final String SERIALIZED_NAME_DEVICE_CONFIGURATIONS = "deviceConfigurations";
  @SerializedName(SERIALIZED_NAME_DEVICE_CONFIGURATIONS)
  private List<DeviceSetDeviceConfigurationsInner> deviceConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MANUFACTURER_COUNT = "manufacturerCount";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_COUNT)
  private BigDecimal manufacturerCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OS_VERSION_COUNT = "osVersionCount";
  @SerializedName(SERIALIZED_NAME_OS_VERSION_COUNT)
  private BigDecimal osVersionCount;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private DeviceSetOwner owner;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public DeviceSet() {
  }

  public DeviceSet deviceConfigurations(List<DeviceSetDeviceConfigurationsInner> deviceConfigurations) {
    this.deviceConfigurations = deviceConfigurations;
    return this;
  }

  public DeviceSet addDeviceConfigurationsItem(DeviceSetDeviceConfigurationsInner deviceConfigurationsItem) {
    if (this.deviceConfigurations == null) {
      this.deviceConfigurations = new ArrayList<>();
    }
    this.deviceConfigurations.add(deviceConfigurationsItem);
    return this;
  }

  /**
   * Get deviceConfigurations
   * @return deviceConfigurations
   */
  @javax.annotation.Nonnull
  public List<DeviceSetDeviceConfigurationsInner> getDeviceConfigurations() {
    return deviceConfigurations;
  }

  public void setDeviceConfigurations(List<DeviceSetDeviceConfigurationsInner> deviceConfigurations) {
    this.deviceConfigurations = deviceConfigurations;
  }


  public DeviceSet id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier of the device set
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceSet manufacturerCount(BigDecimal manufacturerCount) {
    this.manufacturerCount = manufacturerCount;
    return this;
  }

  /**
   * The number of manufacturers in the device set&#39;s device selection
   * @return manufacturerCount
   */
  @javax.annotation.Nullable
  public BigDecimal getManufacturerCount() {
    return manufacturerCount;
  }

  public void setManufacturerCount(BigDecimal manufacturerCount) {
    this.manufacturerCount = manufacturerCount;
  }


  public DeviceSet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the device set
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeviceSet osVersionCount(BigDecimal osVersionCount) {
    this.osVersionCount = osVersionCount;
    return this;
  }

  /**
   * The number of os versions in the device set&#39;s device selection
   * @return osVersionCount
   */
  @javax.annotation.Nullable
  public BigDecimal getOsVersionCount() {
    return osVersionCount;
  }

  public void setOsVersionCount(BigDecimal osVersionCount) {
    this.osVersionCount = osVersionCount;
  }


  public DeviceSet owner(DeviceSetOwner owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nonnull
  public DeviceSetOwner getOwner() {
    return owner;
  }

  public void setOwner(DeviceSetOwner owner) {
    this.owner = owner;
  }


  public DeviceSet slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Slug of the device set
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceSet deviceSet = (DeviceSet) o;
    return Objects.equals(this.deviceConfigurations, deviceSet.deviceConfigurations) &&
        Objects.equals(this.id, deviceSet.id) &&
        Objects.equals(this.manufacturerCount, deviceSet.manufacturerCount) &&
        Objects.equals(this.name, deviceSet.name) &&
        Objects.equals(this.osVersionCount, deviceSet.osVersionCount) &&
        Objects.equals(this.owner, deviceSet.owner) &&
        Objects.equals(this.slug, deviceSet.slug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceConfigurations, id, manufacturerCount, name, osVersionCount, owner, slug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceSet {\n");
    sb.append("    deviceConfigurations: ").append(toIndentedString(deviceConfigurations)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    manufacturerCount: ").append(toIndentedString(manufacturerCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    osVersionCount: ").append(toIndentedString(osVersionCount)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceConfigurations");
    openapiFields.add("id");
    openapiFields.add("manufacturerCount");
    openapiFields.add("name");
    openapiFields.add("osVersionCount");
    openapiFields.add("owner");
    openapiFields.add("slug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deviceConfigurations");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("owner");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceSet is not found in the empty JSON string", DeviceSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeviceSet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("deviceConfigurations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("deviceConfigurations").toString()));
      }

      JsonArray jsonArraydeviceConfigurations = jsonObj.getAsJsonArray("deviceConfigurations");
      // validate the required field `deviceConfigurations` (array)
      for (int i = 0; i < jsonArraydeviceConfigurations.size(); i++) {
        DeviceSetDeviceConfigurationsInner.validateJsonElement(jsonArraydeviceConfigurations.get(i));
      };
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `owner`
      DeviceSetOwner.validateJsonElement(jsonObj.get("owner"));
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceSet.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceSet>() {
           @Override
           public void write(JsonWriter out, DeviceSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceSet
   * @throws IOException if the JSON string is invalid with respect to DeviceSet
   */
  public static DeviceSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceSet.class);
  }

  /**
   * Convert an instance of DeviceSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

