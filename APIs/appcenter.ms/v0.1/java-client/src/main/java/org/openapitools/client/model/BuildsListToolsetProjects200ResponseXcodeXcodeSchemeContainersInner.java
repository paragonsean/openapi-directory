/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner;
import org.openapitools.client.model.BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner {
  public static final String SERIALIZED_NAME_APP_EXTENSION_TARGETS = "appExtensionTargets";
  @SerializedName(SERIALIZED_NAME_APP_EXTENSION_TARGETS)
  private List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner> appExtensionTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARTFILE_PATH = "cartfilePath";
  @SerializedName(SERIALIZED_NAME_CARTFILE_PATH)
  private String cartfilePath;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PODFILE_PATH = "podfilePath";
  @SerializedName(SERIALIZED_NAME_PODFILE_PATH)
  private String podfilePath;

  public static final String SERIALIZED_NAME_SHARED_SCHEMES = "sharedSchemes";
  @SerializedName(SERIALIZED_NAME_SHARED_SCHEMES)
  private List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner> sharedSchemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKSPACE_PROJECT_PATHS = "workspaceProjectPaths";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_PROJECT_PATHS)
  private String workspaceProjectPaths;

  public static final String SERIALIZED_NAME_XCODE_PROJECT_SHA = "xcodeProjectSha";
  @SerializedName(SERIALIZED_NAME_XCODE_PROJECT_SHA)
  private String xcodeProjectSha;

  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner() {
  }

  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner appExtensionTargets(List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner> appExtensionTargets) {
    this.appExtensionTargets = appExtensionTargets;
    return this;
  }

  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner addAppExtensionTargetsItem(BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner appExtensionTargetsItem) {
    if (this.appExtensionTargets == null) {
      this.appExtensionTargets = new ArrayList<>();
    }
    this.appExtensionTargets.add(appExtensionTargetsItem);
    return this;
  }

  /**
   * Information regarding project app extensions, if present
   * @return appExtensionTargets
   */
  @javax.annotation.Nullable
  public List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner> getAppExtensionTargets() {
    return appExtensionTargets;
  }

  public void setAppExtensionTargets(List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner> appExtensionTargets) {
    this.appExtensionTargets = appExtensionTargets;
  }


  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner cartfilePath(String cartfilePath) {
    this.cartfilePath = cartfilePath;
    return this;
  }

  /**
   * Path to Carthage file, if present
   * @return cartfilePath
   */
  @javax.annotation.Nullable
  public String getCartfilePath() {
    return cartfilePath;
  }

  public void setCartfilePath(String cartfilePath) {
    this.cartfilePath = cartfilePath;
  }


  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Path to project
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner podfilePath(String podfilePath) {
    this.podfilePath = podfilePath;
    return this;
  }

  /**
   * Path to CocoaPods file, if present
   * @return podfilePath
   */
  @javax.annotation.Nullable
  public String getPodfilePath() {
    return podfilePath;
  }

  public void setPodfilePath(String podfilePath) {
    this.podfilePath = podfilePath;
  }


  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner sharedSchemes(List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner> sharedSchemes) {
    this.sharedSchemes = sharedSchemes;
    return this;
  }

  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner addSharedSchemesItem(BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner sharedSchemesItem) {
    if (this.sharedSchemes == null) {
      this.sharedSchemes = new ArrayList<>();
    }
    this.sharedSchemes.add(sharedSchemesItem);
    return this;
  }

  /**
   * Project schemes
   * @return sharedSchemes
   */
  @javax.annotation.Nonnull
  public List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner> getSharedSchemes() {
    return sharedSchemes;
  }

  public void setSharedSchemes(List<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner> sharedSchemes) {
    this.sharedSchemes = sharedSchemes;
  }


  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner workspaceProjectPaths(String workspaceProjectPaths) {
    this.workspaceProjectPaths = workspaceProjectPaths;
    return this;
  }

  /**
   * Related projects paths for xcworkspace
   * @return workspaceProjectPaths
   */
  @javax.annotation.Nullable
  public String getWorkspaceProjectPaths() {
    return workspaceProjectPaths;
  }

  public void setWorkspaceProjectPaths(String workspaceProjectPaths) {
    this.workspaceProjectPaths = workspaceProjectPaths;
  }


  public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner xcodeProjectSha(String xcodeProjectSha) {
    this.xcodeProjectSha = xcodeProjectSha;
    return this;
  }

  /**
   * repo object Id of the pbxproject
   * @return xcodeProjectSha
   */
  @javax.annotation.Nullable
  public String getXcodeProjectSha() {
    return xcodeProjectSha;
  }

  public void setXcodeProjectSha(String xcodeProjectSha) {
    this.xcodeProjectSha = xcodeProjectSha;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner = (BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner) o;
    return Objects.equals(this.appExtensionTargets, buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.appExtensionTargets) &&
        Objects.equals(this.cartfilePath, buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.cartfilePath) &&
        Objects.equals(this.path, buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.path) &&
        Objects.equals(this.podfilePath, buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.podfilePath) &&
        Objects.equals(this.sharedSchemes, buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.sharedSchemes) &&
        Objects.equals(this.workspaceProjectPaths, buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.workspaceProjectPaths) &&
        Objects.equals(this.xcodeProjectSha, buildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.xcodeProjectSha);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appExtensionTargets, cartfilePath, path, podfilePath, sharedSchemes, workspaceProjectPaths, xcodeProjectSha);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner {\n");
    sb.append("    appExtensionTargets: ").append(toIndentedString(appExtensionTargets)).append("\n");
    sb.append("    cartfilePath: ").append(toIndentedString(cartfilePath)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    podfilePath: ").append(toIndentedString(podfilePath)).append("\n");
    sb.append("    sharedSchemes: ").append(toIndentedString(sharedSchemes)).append("\n");
    sb.append("    workspaceProjectPaths: ").append(toIndentedString(workspaceProjectPaths)).append("\n");
    sb.append("    xcodeProjectSha: ").append(toIndentedString(xcodeProjectSha)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appExtensionTargets");
    openapiFields.add("cartfilePath");
    openapiFields.add("path");
    openapiFields.add("podfilePath");
    openapiFields.add("sharedSchemes");
    openapiFields.add("workspaceProjectPaths");
    openapiFields.add("xcodeProjectSha");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("sharedSchemes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner is not found in the empty JSON string", BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("appExtensionTargets") != null && !jsonObj.get("appExtensionTargets").isJsonNull()) {
        JsonArray jsonArrayappExtensionTargets = jsonObj.getAsJsonArray("appExtensionTargets");
        if (jsonArrayappExtensionTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appExtensionTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appExtensionTargets` to be an array in the JSON string but got `%s`", jsonObj.get("appExtensionTargets").toString()));
          }

          // validate the optional field `appExtensionTargets` (array)
          for (int i = 0; i < jsonArrayappExtensionTargets.size(); i++) {
            BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerAppExtensionTargetsInner.validateJsonElement(jsonArrayappExtensionTargets.get(i));
          };
        }
      }
      if ((jsonObj.get("cartfilePath") != null && !jsonObj.get("cartfilePath").isJsonNull()) && !jsonObj.get("cartfilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cartfilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cartfilePath").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("podfilePath") != null && !jsonObj.get("podfilePath").isJsonNull()) && !jsonObj.get("podfilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podfilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podfilePath").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sharedSchemes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedSchemes` to be an array in the JSON string but got `%s`", jsonObj.get("sharedSchemes").toString()));
      }

      JsonArray jsonArraysharedSchemes = jsonObj.getAsJsonArray("sharedSchemes");
      // validate the required field `sharedSchemes` (array)
      for (int i = 0; i < jsonArraysharedSchemes.size(); i++) {
        BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInnerSharedSchemesInner.validateJsonElement(jsonArraysharedSchemes.get(i));
      };
      if ((jsonObj.get("workspaceProjectPaths") != null && !jsonObj.get("workspaceProjectPaths").isJsonNull()) && !jsonObj.get("workspaceProjectPaths").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceProjectPaths` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceProjectPaths").toString()));
      }
      if ((jsonObj.get("xcodeProjectSha") != null && !jsonObj.get("xcodeProjectSha").isJsonNull()) && !jsonObj.get("xcodeProjectSha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xcodeProjectSha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xcodeProjectSha").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner>() {
           @Override
           public void write(JsonWriter out, BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner
   * @throws IOException if the JSON string is invalid with respect to BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner
   */
  public static BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner.class);
  }

  /**
   * Convert an instance of BuildsListToolsetProjects200ResponseXcodeXcodeSchemeContainersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

