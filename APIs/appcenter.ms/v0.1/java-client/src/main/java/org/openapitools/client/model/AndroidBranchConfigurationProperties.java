/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Build configuration for Android projects
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AndroidBranchConfigurationProperties {
  public static final String SERIALIZED_NAME_AUTOMATIC_SIGNING = "automaticSigning";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_SIGNING)
  private Boolean automaticSigning;

  public static final String SERIALIZED_NAME_BUILD_VARIANT = "buildVariant";
  @SerializedName(SERIALIZED_NAME_BUILD_VARIANT)
  private String buildVariant;

  public static final String SERIALIZED_NAME_GRADLE_WRAPPER_PATH = "gradleWrapperPath";
  @SerializedName(SERIALIZED_NAME_GRADLE_WRAPPER_PATH)
  private String gradleWrapperPath;

  public static final String SERIALIZED_NAME_IS_ROOT = "isRoot";
  @SerializedName(SERIALIZED_NAME_IS_ROOT)
  private Boolean isRoot;

  public static final String SERIALIZED_NAME_KEY_ALIAS = "keyAlias";
  @SerializedName(SERIALIZED_NAME_KEY_ALIAS)
  private String keyAlias;

  public static final String SERIALIZED_NAME_KEY_PASSWORD = "keyPassword";
  @SerializedName(SERIALIZED_NAME_KEY_PASSWORD)
  private String keyPassword;

  public static final String SERIALIZED_NAME_KEYSTORE_ENCODED = "keystoreEncoded";
  @SerializedName(SERIALIZED_NAME_KEYSTORE_ENCODED)
  private String keystoreEncoded;

  public static final String SERIALIZED_NAME_KEYSTORE_FILENAME = "keystoreFilename";
  @SerializedName(SERIALIZED_NAME_KEYSTORE_FILENAME)
  private String keystoreFilename;

  public static final String SERIALIZED_NAME_KEYSTORE_PASSWORD = "keystorePassword";
  @SerializedName(SERIALIZED_NAME_KEYSTORE_PASSWORD)
  private String keystorePassword;

  public static final String SERIALIZED_NAME_MODULE = "module";
  @SerializedName(SERIALIZED_NAME_MODULE)
  private String module;

  public static final String SERIALIZED_NAME_RUN_LINT = "runLint";
  @SerializedName(SERIALIZED_NAME_RUN_LINT)
  private Boolean runLint;

  public static final String SERIALIZED_NAME_RUN_TESTS = "runTests";
  @SerializedName(SERIALIZED_NAME_RUN_TESTS)
  private Boolean runTests = true;

  public AndroidBranchConfigurationProperties() {
  }

  public AndroidBranchConfigurationProperties automaticSigning(Boolean automaticSigning) {
    this.automaticSigning = automaticSigning;
    return this;
  }

  /**
   * Whether to apply automatic signing or not
   * @return automaticSigning
   */
  @javax.annotation.Nullable
  public Boolean getAutomaticSigning() {
    return automaticSigning;
  }

  public void setAutomaticSigning(Boolean automaticSigning) {
    this.automaticSigning = automaticSigning;
  }


  public AndroidBranchConfigurationProperties buildVariant(String buildVariant) {
    this.buildVariant = buildVariant;
    return this;
  }

  /**
   * The Android build variant to build
   * @return buildVariant
   */
  @javax.annotation.Nullable
  public String getBuildVariant() {
    return buildVariant;
  }

  public void setBuildVariant(String buildVariant) {
    this.buildVariant = buildVariant;
  }


  public AndroidBranchConfigurationProperties gradleWrapperPath(String gradleWrapperPath) {
    this.gradleWrapperPath = gradleWrapperPath;
    return this;
  }

  /**
   * Path to the Gradle wrapper script
   * @return gradleWrapperPath
   */
  @javax.annotation.Nullable
  public String getGradleWrapperPath() {
    return gradleWrapperPath;
  }

  public void setGradleWrapperPath(String gradleWrapperPath) {
    this.gradleWrapperPath = gradleWrapperPath;
  }


  public AndroidBranchConfigurationProperties isRoot(Boolean isRoot) {
    this.isRoot = isRoot;
    return this;
  }

  /**
   * Whether it is the root module or not
   * @return isRoot
   */
  @javax.annotation.Nullable
  public Boolean getIsRoot() {
    return isRoot;
  }

  public void setIsRoot(Boolean isRoot) {
    this.isRoot = isRoot;
  }


  public AndroidBranchConfigurationProperties keyAlias(String keyAlias) {
    this.keyAlias = keyAlias;
    return this;
  }

  /**
   * The key alias
   * @return keyAlias
   */
  @javax.annotation.Nullable
  public String getKeyAlias() {
    return keyAlias;
  }

  public void setKeyAlias(String keyAlias) {
    this.keyAlias = keyAlias;
  }


  public AndroidBranchConfigurationProperties keyPassword(String keyPassword) {
    this.keyPassword = keyPassword;
    return this;
  }

  /**
   * The key password
   * @return keyPassword
   */
  @javax.annotation.Nullable
  public String getKeyPassword() {
    return keyPassword;
  }

  public void setKeyPassword(String keyPassword) {
    this.keyPassword = keyPassword;
  }


  public AndroidBranchConfigurationProperties keystoreEncoded(String keystoreEncoded) {
    this.keystoreEncoded = keystoreEncoded;
    return this;
  }

  /**
   * The keystore encoded value
   * @return keystoreEncoded
   */
  @javax.annotation.Nullable
  public String getKeystoreEncoded() {
    return keystoreEncoded;
  }

  public void setKeystoreEncoded(String keystoreEncoded) {
    this.keystoreEncoded = keystoreEncoded;
  }


  public AndroidBranchConfigurationProperties keystoreFilename(String keystoreFilename) {
    this.keystoreFilename = keystoreFilename;
    return this;
  }

  /**
   * The name of the keystore file
   * @return keystoreFilename
   */
  @javax.annotation.Nullable
  public String getKeystoreFilename() {
    return keystoreFilename;
  }

  public void setKeystoreFilename(String keystoreFilename) {
    this.keystoreFilename = keystoreFilename;
  }


  public AndroidBranchConfigurationProperties keystorePassword(String keystorePassword) {
    this.keystorePassword = keystorePassword;
    return this;
  }

  /**
   * The password of the keystore
   * @return keystorePassword
   */
  @javax.annotation.Nullable
  public String getKeystorePassword() {
    return keystorePassword;
  }

  public void setKeystorePassword(String keystorePassword) {
    this.keystorePassword = keystorePassword;
  }


  public AndroidBranchConfigurationProperties module(String module) {
    this.module = module;
    return this;
  }

  /**
   * The Gradle module to build
   * @return module
   */
  @javax.annotation.Nullable
  public String getModule() {
    return module;
  }

  public void setModule(String module) {
    this.module = module;
  }


  public AndroidBranchConfigurationProperties runLint(Boolean runLint) {
    this.runLint = runLint;
    return this;
  }

  /**
   * Whether to run lint checks during the build (default)
   * @return runLint
   */
  @javax.annotation.Nullable
  public Boolean getRunLint() {
    return runLint;
  }

  public void setRunLint(Boolean runLint) {
    this.runLint = runLint;
  }


  public AndroidBranchConfigurationProperties runTests(Boolean runTests) {
    this.runTests = runTests;
    return this;
  }

  /**
   * Whether to run unit tests during the build (default)
   * @return runTests
   */
  @javax.annotation.Nullable
  public Boolean getRunTests() {
    return runTests;
  }

  public void setRunTests(Boolean runTests) {
    this.runTests = runTests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AndroidBranchConfigurationProperties androidBranchConfigurationProperties = (AndroidBranchConfigurationProperties) o;
    return Objects.equals(this.automaticSigning, androidBranchConfigurationProperties.automaticSigning) &&
        Objects.equals(this.buildVariant, androidBranchConfigurationProperties.buildVariant) &&
        Objects.equals(this.gradleWrapperPath, androidBranchConfigurationProperties.gradleWrapperPath) &&
        Objects.equals(this.isRoot, androidBranchConfigurationProperties.isRoot) &&
        Objects.equals(this.keyAlias, androidBranchConfigurationProperties.keyAlias) &&
        Objects.equals(this.keyPassword, androidBranchConfigurationProperties.keyPassword) &&
        Objects.equals(this.keystoreEncoded, androidBranchConfigurationProperties.keystoreEncoded) &&
        Objects.equals(this.keystoreFilename, androidBranchConfigurationProperties.keystoreFilename) &&
        Objects.equals(this.keystorePassword, androidBranchConfigurationProperties.keystorePassword) &&
        Objects.equals(this.module, androidBranchConfigurationProperties.module) &&
        Objects.equals(this.runLint, androidBranchConfigurationProperties.runLint) &&
        Objects.equals(this.runTests, androidBranchConfigurationProperties.runTests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automaticSigning, buildVariant, gradleWrapperPath, isRoot, keyAlias, keyPassword, keystoreEncoded, keystoreFilename, keystorePassword, module, runLint, runTests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AndroidBranchConfigurationProperties {\n");
    sb.append("    automaticSigning: ").append(toIndentedString(automaticSigning)).append("\n");
    sb.append("    buildVariant: ").append(toIndentedString(buildVariant)).append("\n");
    sb.append("    gradleWrapperPath: ").append(toIndentedString(gradleWrapperPath)).append("\n");
    sb.append("    isRoot: ").append(toIndentedString(isRoot)).append("\n");
    sb.append("    keyAlias: ").append(toIndentedString(keyAlias)).append("\n");
    sb.append("    keyPassword: ").append(toIndentedString(keyPassword)).append("\n");
    sb.append("    keystoreEncoded: ").append(toIndentedString(keystoreEncoded)).append("\n");
    sb.append("    keystoreFilename: ").append(toIndentedString(keystoreFilename)).append("\n");
    sb.append("    keystorePassword: ").append(toIndentedString(keystorePassword)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    runLint: ").append(toIndentedString(runLint)).append("\n");
    sb.append("    runTests: ").append(toIndentedString(runTests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automaticSigning");
    openapiFields.add("buildVariant");
    openapiFields.add("gradleWrapperPath");
    openapiFields.add("isRoot");
    openapiFields.add("keyAlias");
    openapiFields.add("keyPassword");
    openapiFields.add("keystoreEncoded");
    openapiFields.add("keystoreFilename");
    openapiFields.add("keystorePassword");
    openapiFields.add("module");
    openapiFields.add("runLint");
    openapiFields.add("runTests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AndroidBranchConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AndroidBranchConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AndroidBranchConfigurationProperties is not found in the empty JSON string", AndroidBranchConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AndroidBranchConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AndroidBranchConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildVariant") != null && !jsonObj.get("buildVariant").isJsonNull()) && !jsonObj.get("buildVariant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildVariant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildVariant").toString()));
      }
      if ((jsonObj.get("gradleWrapperPath") != null && !jsonObj.get("gradleWrapperPath").isJsonNull()) && !jsonObj.get("gradleWrapperPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradleWrapperPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradleWrapperPath").toString()));
      }
      if ((jsonObj.get("keyAlias") != null && !jsonObj.get("keyAlias").isJsonNull()) && !jsonObj.get("keyAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyAlias").toString()));
      }
      if ((jsonObj.get("keyPassword") != null && !jsonObj.get("keyPassword").isJsonNull()) && !jsonObj.get("keyPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyPassword").toString()));
      }
      if ((jsonObj.get("keystoreEncoded") != null && !jsonObj.get("keystoreEncoded").isJsonNull()) && !jsonObj.get("keystoreEncoded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keystoreEncoded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keystoreEncoded").toString()));
      }
      if ((jsonObj.get("keystoreFilename") != null && !jsonObj.get("keystoreFilename").isJsonNull()) && !jsonObj.get("keystoreFilename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keystoreFilename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keystoreFilename").toString()));
      }
      if ((jsonObj.get("keystorePassword") != null && !jsonObj.get("keystorePassword").isJsonNull()) && !jsonObj.get("keystorePassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keystorePassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keystorePassword").toString()));
      }
      if ((jsonObj.get("module") != null && !jsonObj.get("module").isJsonNull()) && !jsonObj.get("module").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `module` to be a primitive type in the JSON string but got `%s`", jsonObj.get("module").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AndroidBranchConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AndroidBranchConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AndroidBranchConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AndroidBranchConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AndroidBranchConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, AndroidBranchConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AndroidBranchConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AndroidBranchConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AndroidBranchConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to AndroidBranchConfigurationProperties
   */
  public static AndroidBranchConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AndroidBranchConfigurationProperties.class);
  }

  /**
   * Convert an instance of AndroidBranchConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

