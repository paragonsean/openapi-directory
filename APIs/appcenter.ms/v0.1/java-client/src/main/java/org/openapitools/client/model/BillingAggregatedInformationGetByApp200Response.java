/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BillingAggregatedInformationGetByApp200ResponseBillingPlans;
import org.openapitools.client.model.BillingAggregatedInformationGetByApp200ResponseUsage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Aggregated Billing Information for a user or an organization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BillingAggregatedInformationGetByApp200Response {
  public static final String SERIALIZED_NAME_AZURE_SUBSCRIPTION_ID = "azureSubscriptionId";
  @SerializedName(SERIALIZED_NAME_AZURE_SUBSCRIPTION_ID)
  private String azureSubscriptionId;

  /**
   * State of the Azure subscription used for billing
   */
  @JsonAdapter(AzureSubscriptionStateEnum.Adapter.class)
  public enum AzureSubscriptionStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    NOT_SET("NotSet");

    private String value;

    AzureSubscriptionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzureSubscriptionStateEnum fromValue(String value) {
      for (AzureSubscriptionStateEnum b : AzureSubscriptionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzureSubscriptionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureSubscriptionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzureSubscriptionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzureSubscriptionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzureSubscriptionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_SUBSCRIPTION_STATE = "azureSubscriptionState";
  @SerializedName(SERIALIZED_NAME_AZURE_SUBSCRIPTION_STATE)
  private AzureSubscriptionStateEnum azureSubscriptionState;

  public static final String SERIALIZED_NAME_BILLING_PLANS = "billingPlans";
  @SerializedName(SERIALIZED_NAME_BILLING_PLANS)
  private BillingAggregatedInformationGetByApp200ResponseBillingPlans billingPlans;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private BillingAggregatedInformationGetByApp200ResponseUsage usage;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public BillingAggregatedInformationGetByApp200Response() {
  }

  public BillingAggregatedInformationGetByApp200Response azureSubscriptionId(String azureSubscriptionId) {
    this.azureSubscriptionId = azureSubscriptionId;
    return this;
  }

  /**
   * Unique identifier for the Azure subscription used for billing
   * @return azureSubscriptionId
   */
  @javax.annotation.Nullable
  public String getAzureSubscriptionId() {
    return azureSubscriptionId;
  }

  public void setAzureSubscriptionId(String azureSubscriptionId) {
    this.azureSubscriptionId = azureSubscriptionId;
  }


  public BillingAggregatedInformationGetByApp200Response azureSubscriptionState(AzureSubscriptionStateEnum azureSubscriptionState) {
    this.azureSubscriptionState = azureSubscriptionState;
    return this;
  }

  /**
   * State of the Azure subscription used for billing
   * @return azureSubscriptionState
   */
  @javax.annotation.Nullable
  public AzureSubscriptionStateEnum getAzureSubscriptionState() {
    return azureSubscriptionState;
  }

  public void setAzureSubscriptionState(AzureSubscriptionStateEnum azureSubscriptionState) {
    this.azureSubscriptionState = azureSubscriptionState;
  }


  public BillingAggregatedInformationGetByApp200Response billingPlans(BillingAggregatedInformationGetByApp200ResponseBillingPlans billingPlans) {
    this.billingPlans = billingPlans;
    return this;
  }

  /**
   * Get billingPlans
   * @return billingPlans
   */
  @javax.annotation.Nullable
  public BillingAggregatedInformationGetByApp200ResponseBillingPlans getBillingPlans() {
    return billingPlans;
  }

  public void setBillingPlans(BillingAggregatedInformationGetByApp200ResponseBillingPlans billingPlans) {
    this.billingPlans = billingPlans;
  }


  public BillingAggregatedInformationGetByApp200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the user or organization
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BillingAggregatedInformationGetByApp200Response timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The ISO 8601 datetime of last modification
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public BillingAggregatedInformationGetByApp200Response usage(BillingAggregatedInformationGetByApp200ResponseUsage usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  public BillingAggregatedInformationGetByApp200ResponseUsage getUsage() {
    return usage;
  }

  public void setUsage(BillingAggregatedInformationGetByApp200ResponseUsage usage) {
    this.usage = usage;
  }


  public BillingAggregatedInformationGetByApp200Response version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the Billing Information schema
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingAggregatedInformationGetByApp200Response billingAggregatedInformationGetByApp200Response = (BillingAggregatedInformationGetByApp200Response) o;
    return Objects.equals(this.azureSubscriptionId, billingAggregatedInformationGetByApp200Response.azureSubscriptionId) &&
        Objects.equals(this.azureSubscriptionState, billingAggregatedInformationGetByApp200Response.azureSubscriptionState) &&
        Objects.equals(this.billingPlans, billingAggregatedInformationGetByApp200Response.billingPlans) &&
        Objects.equals(this.id, billingAggregatedInformationGetByApp200Response.id) &&
        Objects.equals(this.timestamp, billingAggregatedInformationGetByApp200Response.timestamp) &&
        Objects.equals(this.usage, billingAggregatedInformationGetByApp200Response.usage) &&
        Objects.equals(this.version, billingAggregatedInformationGetByApp200Response.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureSubscriptionId, azureSubscriptionState, billingPlans, id, timestamp, usage, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingAggregatedInformationGetByApp200Response {\n");
    sb.append("    azureSubscriptionId: ").append(toIndentedString(azureSubscriptionId)).append("\n");
    sb.append("    azureSubscriptionState: ").append(toIndentedString(azureSubscriptionState)).append("\n");
    sb.append("    billingPlans: ").append(toIndentedString(billingPlans)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureSubscriptionId");
    openapiFields.add("azureSubscriptionState");
    openapiFields.add("billingPlans");
    openapiFields.add("id");
    openapiFields.add("timestamp");
    openapiFields.add("usage");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingAggregatedInformationGetByApp200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingAggregatedInformationGetByApp200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingAggregatedInformationGetByApp200Response is not found in the empty JSON string", BillingAggregatedInformationGetByApp200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingAggregatedInformationGetByApp200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingAggregatedInformationGetByApp200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("azureSubscriptionId") != null && !jsonObj.get("azureSubscriptionId").isJsonNull()) && !jsonObj.get("azureSubscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureSubscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureSubscriptionId").toString()));
      }
      if ((jsonObj.get("azureSubscriptionState") != null && !jsonObj.get("azureSubscriptionState").isJsonNull()) && !jsonObj.get("azureSubscriptionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureSubscriptionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureSubscriptionState").toString()));
      }
      // validate the optional field `azureSubscriptionState`
      if (jsonObj.get("azureSubscriptionState") != null && !jsonObj.get("azureSubscriptionState").isJsonNull()) {
        AzureSubscriptionStateEnum.validateJsonElement(jsonObj.get("azureSubscriptionState"));
      }
      // validate the optional field `billingPlans`
      if (jsonObj.get("billingPlans") != null && !jsonObj.get("billingPlans").isJsonNull()) {
        BillingAggregatedInformationGetByApp200ResponseBillingPlans.validateJsonElement(jsonObj.get("billingPlans"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        BillingAggregatedInformationGetByApp200ResponseUsage.validateJsonElement(jsonObj.get("usage"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingAggregatedInformationGetByApp200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingAggregatedInformationGetByApp200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingAggregatedInformationGetByApp200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingAggregatedInformationGetByApp200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingAggregatedInformationGetByApp200Response>() {
           @Override
           public void write(JsonWriter out, BillingAggregatedInformationGetByApp200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingAggregatedInformationGetByApp200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingAggregatedInformationGetByApp200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingAggregatedInformationGetByApp200Response
   * @throws IOException if the JSON string is invalid with respect to BillingAggregatedInformationGetByApp200Response
   */
  public static BillingAggregatedInformationGetByApp200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingAggregatedInformationGetByApp200Response.class);
  }

  /**
   * Convert an instance of BillingAggregatedInformationGetByApp200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

