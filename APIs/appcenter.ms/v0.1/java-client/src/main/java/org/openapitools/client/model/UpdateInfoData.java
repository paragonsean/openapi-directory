/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateInfoData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateInfoData {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_DISABLED = "is_disabled";
  @SerializedName(SERIALIZED_NAME_IS_DISABLED)
  private Boolean isDisabled;

  public static final String SERIALIZED_NAME_IS_MANDATORY = "is_mandatory";
  @SerializedName(SERIALIZED_NAME_IS_MANDATORY)
  private Boolean isMandatory;

  public static final String SERIALIZED_NAME_ROLLOUT = "rollout";
  @SerializedName(SERIALIZED_NAME_ROLLOUT)
  private Integer rollout;

  public static final String SERIALIZED_NAME_TARGET_BINARY_RANGE = "target_binary_range";
  @SerializedName(SERIALIZED_NAME_TARGET_BINARY_RANGE)
  private String targetBinaryRange;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "is_available";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PACKAGE_HASH = "package_hash";
  @SerializedName(SERIALIZED_NAME_PACKAGE_HASH)
  private String packageHash;

  public static final String SERIALIZED_NAME_PACKAGE_SIZE = "package_size";
  @SerializedName(SERIALIZED_NAME_PACKAGE_SIZE)
  private BigDecimal packageSize;

  public static final String SERIALIZED_NAME_SHOULD_RUN_BINARY_VERSION = "should_run_binary_version";
  @SerializedName(SERIALIZED_NAME_SHOULD_RUN_BINARY_VERSION)
  private Boolean shouldRunBinaryVersion;

  public static final String SERIALIZED_NAME_UPDATE_APP_VERSION = "update_app_version";
  @SerializedName(SERIALIZED_NAME_UPDATE_APP_VERSION)
  private Boolean updateAppVersion;

  public UpdateInfoData() {
  }

  public UpdateInfoData description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateInfoData isDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
    return this;
  }

  /**
   * Get isDisabled
   * @return isDisabled
   */
  @javax.annotation.Nullable
  public Boolean getIsDisabled() {
    return isDisabled;
  }

  public void setIsDisabled(Boolean isDisabled) {
    this.isDisabled = isDisabled;
  }


  public UpdateInfoData isMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
    return this;
  }

  /**
   * Get isMandatory
   * @return isMandatory
   */
  @javax.annotation.Nullable
  public Boolean getIsMandatory() {
    return isMandatory;
  }

  public void setIsMandatory(Boolean isMandatory) {
    this.isMandatory = isMandatory;
  }


  public UpdateInfoData rollout(Integer rollout) {
    this.rollout = rollout;
    return this;
  }

  /**
   * Get rollout
   * minimum: 1
   * maximum: 100
   * @return rollout
   */
  @javax.annotation.Nullable
  public Integer getRollout() {
    return rollout;
  }

  public void setRollout(Integer rollout) {
    this.rollout = rollout;
  }


  public UpdateInfoData targetBinaryRange(String targetBinaryRange) {
    this.targetBinaryRange = targetBinaryRange;
    return this;
  }

  /**
   * Get targetBinaryRange
   * @return targetBinaryRange
   */
  @javax.annotation.Nullable
  public String getTargetBinaryRange() {
    return targetBinaryRange;
  }

  public void setTargetBinaryRange(String targetBinaryRange) {
    this.targetBinaryRange = targetBinaryRange;
  }


  public UpdateInfoData downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * Get downloadUrl
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public UpdateInfoData isAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
    return this;
  }

  /**
   * Get isAvailable
   * @return isAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getIsAvailable() {
    return isAvailable;
  }

  public void setIsAvailable(Boolean isAvailable) {
    this.isAvailable = isAvailable;
  }


  public UpdateInfoData label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public UpdateInfoData packageHash(String packageHash) {
    this.packageHash = packageHash;
    return this;
  }

  /**
   * Get packageHash
   * @return packageHash
   */
  @javax.annotation.Nullable
  public String getPackageHash() {
    return packageHash;
  }

  public void setPackageHash(String packageHash) {
    this.packageHash = packageHash;
  }


  public UpdateInfoData packageSize(BigDecimal packageSize) {
    this.packageSize = packageSize;
    return this;
  }

  /**
   * Get packageSize
   * @return packageSize
   */
  @javax.annotation.Nullable
  public BigDecimal getPackageSize() {
    return packageSize;
  }

  public void setPackageSize(BigDecimal packageSize) {
    this.packageSize = packageSize;
  }


  public UpdateInfoData shouldRunBinaryVersion(Boolean shouldRunBinaryVersion) {
    this.shouldRunBinaryVersion = shouldRunBinaryVersion;
    return this;
  }

  /**
   * Get shouldRunBinaryVersion
   * @return shouldRunBinaryVersion
   */
  @javax.annotation.Nullable
  public Boolean getShouldRunBinaryVersion() {
    return shouldRunBinaryVersion;
  }

  public void setShouldRunBinaryVersion(Boolean shouldRunBinaryVersion) {
    this.shouldRunBinaryVersion = shouldRunBinaryVersion;
  }


  public UpdateInfoData updateAppVersion(Boolean updateAppVersion) {
    this.updateAppVersion = updateAppVersion;
    return this;
  }

  /**
   * Get updateAppVersion
   * @return updateAppVersion
   */
  @javax.annotation.Nullable
  public Boolean getUpdateAppVersion() {
    return updateAppVersion;
  }

  public void setUpdateAppVersion(Boolean updateAppVersion) {
    this.updateAppVersion = updateAppVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateInfoData updateInfoData = (UpdateInfoData) o;
    return Objects.equals(this.description, updateInfoData.description) &&
        Objects.equals(this.isDisabled, updateInfoData.isDisabled) &&
        Objects.equals(this.isMandatory, updateInfoData.isMandatory) &&
        Objects.equals(this.rollout, updateInfoData.rollout) &&
        Objects.equals(this.targetBinaryRange, updateInfoData.targetBinaryRange) &&
        Objects.equals(this.downloadUrl, updateInfoData.downloadUrl) &&
        Objects.equals(this.isAvailable, updateInfoData.isAvailable) &&
        Objects.equals(this.label, updateInfoData.label) &&
        Objects.equals(this.packageHash, updateInfoData.packageHash) &&
        Objects.equals(this.packageSize, updateInfoData.packageSize) &&
        Objects.equals(this.shouldRunBinaryVersion, updateInfoData.shouldRunBinaryVersion) &&
        Objects.equals(this.updateAppVersion, updateInfoData.updateAppVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, isDisabled, isMandatory, rollout, targetBinaryRange, downloadUrl, isAvailable, label, packageHash, packageSize, shouldRunBinaryVersion, updateAppVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateInfoData {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDisabled: ").append(toIndentedString(isDisabled)).append("\n");
    sb.append("    isMandatory: ").append(toIndentedString(isMandatory)).append("\n");
    sb.append("    rollout: ").append(toIndentedString(rollout)).append("\n");
    sb.append("    targetBinaryRange: ").append(toIndentedString(targetBinaryRange)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    packageHash: ").append(toIndentedString(packageHash)).append("\n");
    sb.append("    packageSize: ").append(toIndentedString(packageSize)).append("\n");
    sb.append("    shouldRunBinaryVersion: ").append(toIndentedString(shouldRunBinaryVersion)).append("\n");
    sb.append("    updateAppVersion: ").append(toIndentedString(updateAppVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("is_disabled");
    openapiFields.add("is_mandatory");
    openapiFields.add("rollout");
    openapiFields.add("target_binary_range");
    openapiFields.add("download_url");
    openapiFields.add("is_available");
    openapiFields.add("label");
    openapiFields.add("package_hash");
    openapiFields.add("package_size");
    openapiFields.add("should_run_binary_version");
    openapiFields.add("update_app_version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_available");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateInfoData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateInfoData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateInfoData is not found in the empty JSON string", UpdateInfoData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateInfoData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateInfoData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateInfoData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("target_binary_range") != null && !jsonObj.get("target_binary_range").isJsonNull()) && !jsonObj.get("target_binary_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_binary_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_binary_range").toString()));
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("package_hash") != null && !jsonObj.get("package_hash").isJsonNull()) && !jsonObj.get("package_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_hash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateInfoData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateInfoData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateInfoData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateInfoData.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateInfoData>() {
           @Override
           public void write(JsonWriter out, UpdateInfoData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateInfoData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateInfoData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateInfoData
   * @throws IOException if the JSON string is invalid with respect to UpdateInfoData
   */
  public static UpdateInfoData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateInfoData.class);
  }

  /**
   * Convert an instance of UpdateInfoData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

