/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalyticsDeviceCounts200ResponseDailyInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalyticsEventCount200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyticsEventCount200Response {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private List<AnalyticsDeviceCounts200ResponseDailyInner> count = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVIOUS_TOTAL_COUNT = "previous_total_count";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TOTAL_COUNT)
  private Long previousTotalCount;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public AnalyticsEventCount200Response() {
  }

  public AnalyticsEventCount200Response count(List<AnalyticsDeviceCounts200ResponseDailyInner> count) {
    this.count = count;
    return this;
  }

  public AnalyticsEventCount200Response addCountItem(AnalyticsDeviceCounts200ResponseDailyInner countItem) {
    if (this.count == null) {
      this.count = new ArrayList<>();
    }
    this.count.add(countItem);
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public List<AnalyticsDeviceCounts200ResponseDailyInner> getCount() {
    return count;
  }

  public void setCount(List<AnalyticsDeviceCounts200ResponseDailyInner> count) {
    this.count = count;
  }


  public AnalyticsEventCount200Response previousTotalCount(Long previousTotalCount) {
    this.previousTotalCount = previousTotalCount;
    return this;
  }

  /**
   * Get previousTotalCount
   * @return previousTotalCount
   */
  @javax.annotation.Nullable
  public Long getPreviousTotalCount() {
    return previousTotalCount;
  }

  public void setPreviousTotalCount(Long previousTotalCount) {
    this.previousTotalCount = previousTotalCount;
  }


  public AnalyticsEventCount200Response totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Get totalCount
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsEventCount200Response analyticsEventCount200Response = (AnalyticsEventCount200Response) o;
    return Objects.equals(this.count, analyticsEventCount200Response.count) &&
        Objects.equals(this.previousTotalCount, analyticsEventCount200Response.previousTotalCount) &&
        Objects.equals(this.totalCount, analyticsEventCount200Response.totalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, previousTotalCount, totalCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsEventCount200Response {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    previousTotalCount: ").append(toIndentedString(previousTotalCount)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("previous_total_count");
    openapiFields.add("total_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyticsEventCount200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyticsEventCount200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyticsEventCount200Response is not found in the empty JSON string", AnalyticsEventCount200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyticsEventCount200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyticsEventCount200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) {
        JsonArray jsonArraycount = jsonObj.getAsJsonArray("count");
        if (jsonArraycount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("count").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `count` to be an array in the JSON string but got `%s`", jsonObj.get("count").toString()));
          }

          // validate the optional field `count` (array)
          for (int i = 0; i < jsonArraycount.size(); i++) {
            AnalyticsDeviceCounts200ResponseDailyInner.validateJsonElement(jsonArraycount.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyticsEventCount200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyticsEventCount200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyticsEventCount200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyticsEventCount200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyticsEventCount200Response>() {
           @Override
           public void write(JsonWriter out, AnalyticsEventCount200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyticsEventCount200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyticsEventCount200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyticsEventCount200Response
   * @throws IOException if the JSON string is invalid with respect to AnalyticsEventCount200Response
   */
  public static AnalyticsEventCount200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyticsEventCount200Response.class);
  }

  /**
   * Convert an instance of AnalyticsEventCount200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

