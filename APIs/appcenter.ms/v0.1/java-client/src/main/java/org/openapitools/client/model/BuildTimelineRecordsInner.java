/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildTimelineRecordsInnerIssuesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildTimelineRecordsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildTimelineRecordsInner {
  public static final String SERIALIZED_NAME_CURRENT_OPERATION = "currentOperation";
  @SerializedName(SERIALIZED_NAME_CURRENT_OPERATION)
  private String currentOperation;

  public static final String SERIALIZED_NAME_ERROR_COUNT = "errorCount";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  private BigDecimal errorCount;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finishTime";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  private String finishTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private List<BuildTimelineRecordsInnerIssuesInner> issues = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private BigDecimal order;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private BigDecimal percentComplete;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WARNING_COUNT = "warningCount";
  @SerializedName(SERIALIZED_NAME_WARNING_COUNT)
  private BigDecimal warningCount;

  public BuildTimelineRecordsInner() {
  }

  public BuildTimelineRecordsInner currentOperation(String currentOperation) {
    this.currentOperation = currentOperation;
    return this;
  }

  /**
   * Get currentOperation
   * @return currentOperation
   */
  @javax.annotation.Nullable
  public String getCurrentOperation() {
    return currentOperation;
  }

  public void setCurrentOperation(String currentOperation) {
    this.currentOperation = currentOperation;
  }


  public BuildTimelineRecordsInner errorCount(BigDecimal errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * Get errorCount
   * @return errorCount
   */
  @javax.annotation.Nullable
  public BigDecimal getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(BigDecimal errorCount) {
    this.errorCount = errorCount;
  }


  public BuildTimelineRecordsInner finishTime(String finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  /**
   * Get finishTime
   * @return finishTime
   */
  @javax.annotation.Nullable
  public String getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(String finishTime) {
    this.finishTime = finishTime;
  }


  public BuildTimelineRecordsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BuildTimelineRecordsInner issues(List<BuildTimelineRecordsInnerIssuesInner> issues) {
    this.issues = issues;
    return this;
  }

  public BuildTimelineRecordsInner addIssuesItem(BuildTimelineRecordsInnerIssuesInner issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * Get issues
   * @return issues
   */
  @javax.annotation.Nullable
  public List<BuildTimelineRecordsInnerIssuesInner> getIssues() {
    return issues;
  }

  public void setIssues(List<BuildTimelineRecordsInnerIssuesInner> issues) {
    this.issues = issues;
  }


  public BuildTimelineRecordsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BuildTimelineRecordsInner order(BigDecimal order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public BigDecimal getOrder() {
    return order;
  }

  public void setOrder(BigDecimal order) {
    this.order = order;
  }


  public BuildTimelineRecordsInner percentComplete(BigDecimal percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Get percentComplete
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public BigDecimal getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(BigDecimal percentComplete) {
    this.percentComplete = percentComplete;
  }


  public BuildTimelineRecordsInner result(String result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(String result) {
    this.result = result;
  }


  public BuildTimelineRecordsInner startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public BuildTimelineRecordsInner state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public BuildTimelineRecordsInner type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public BuildTimelineRecordsInner warningCount(BigDecimal warningCount) {
    this.warningCount = warningCount;
    return this;
  }

  /**
   * Get warningCount
   * @return warningCount
   */
  @javax.annotation.Nullable
  public BigDecimal getWarningCount() {
    return warningCount;
  }

  public void setWarningCount(BigDecimal warningCount) {
    this.warningCount = warningCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildTimelineRecordsInner buildTimelineRecordsInner = (BuildTimelineRecordsInner) o;
    return Objects.equals(this.currentOperation, buildTimelineRecordsInner.currentOperation) &&
        Objects.equals(this.errorCount, buildTimelineRecordsInner.errorCount) &&
        Objects.equals(this.finishTime, buildTimelineRecordsInner.finishTime) &&
        Objects.equals(this.id, buildTimelineRecordsInner.id) &&
        Objects.equals(this.issues, buildTimelineRecordsInner.issues) &&
        Objects.equals(this.name, buildTimelineRecordsInner.name) &&
        Objects.equals(this.order, buildTimelineRecordsInner.order) &&
        Objects.equals(this.percentComplete, buildTimelineRecordsInner.percentComplete) &&
        Objects.equals(this.result, buildTimelineRecordsInner.result) &&
        Objects.equals(this.startTime, buildTimelineRecordsInner.startTime) &&
        Objects.equals(this.state, buildTimelineRecordsInner.state) &&
        Objects.equals(this.type, buildTimelineRecordsInner.type) &&
        Objects.equals(this.warningCount, buildTimelineRecordsInner.warningCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentOperation, errorCount, finishTime, id, issues, name, order, percentComplete, result, startTime, state, type, warningCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildTimelineRecordsInner {\n");
    sb.append("    currentOperation: ").append(toIndentedString(currentOperation)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    warningCount: ").append(toIndentedString(warningCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentOperation");
    openapiFields.add("errorCount");
    openapiFields.add("finishTime");
    openapiFields.add("id");
    openapiFields.add("issues");
    openapiFields.add("name");
    openapiFields.add("order");
    openapiFields.add("percentComplete");
    openapiFields.add("result");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("warningCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildTimelineRecordsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildTimelineRecordsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildTimelineRecordsInner is not found in the empty JSON string", BuildTimelineRecordsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildTimelineRecordsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildTimelineRecordsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentOperation") != null && !jsonObj.get("currentOperation").isJsonNull()) && !jsonObj.get("currentOperation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentOperation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentOperation").toString()));
      }
      if ((jsonObj.get("finishTime") != null && !jsonObj.get("finishTime").isJsonNull()) && !jsonObj.get("finishTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finishTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finishTime").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) {
        JsonArray jsonArrayissues = jsonObj.getAsJsonArray("issues");
        if (jsonArrayissues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
          }

          // validate the optional field `issues` (array)
          for (int i = 0; i < jsonArrayissues.size(); i++) {
            BuildTimelineRecordsInnerIssuesInner.validateJsonElement(jsonArrayissues.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildTimelineRecordsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildTimelineRecordsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildTimelineRecordsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildTimelineRecordsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildTimelineRecordsInner>() {
           @Override
           public void write(JsonWriter out, BuildTimelineRecordsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildTimelineRecordsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildTimelineRecordsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildTimelineRecordsInner
   * @throws IOException if the JSON string is invalid with respect to BuildTimelineRecordsInner
   */
  public static BuildTimelineRecordsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildTimelineRecordsInner.class);
  }

  /**
   * Convert an instance of BuildTimelineRecordsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

