/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Access token details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertingAccessTokenResponse {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_ID = "access_token_id";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_ID)
  private String accessTokenId;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_NAME = "external_account_name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_NAME)
  private String externalAccountName;

  /**
   * External provider name
   */
  @JsonAdapter(ExternalProviderNameEnum.Adapter.class)
  public enum ExternalProviderNameEnum {
    GITHUB("github"),
    
    VSTS("vsts"),
    
    JIRA("jira");

    private String value;

    ExternalProviderNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExternalProviderNameEnum fromValue(String value) {
      for (ExternalProviderNameEnum b : ExternalProviderNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExternalProviderNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExternalProviderNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExternalProviderNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExternalProviderNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExternalProviderNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTERNAL_PROVIDER_NAME = "external_provider_name";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PROVIDER_NAME)
  private ExternalProviderNameEnum externalProviderName;

  public static final String SERIALIZED_NAME_EXTERNAL_USER_EMAIL = "external_user_email";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USER_EMAIL)
  private String externalUserEmail;

  public AlertingAccessTokenResponse() {
  }

  public AlertingAccessTokenResponse accessTokenId(String accessTokenId) {
    this.accessTokenId = accessTokenId;
    return this;
  }

  /**
   * ID of the access token
   * @return accessTokenId
   */
  @javax.annotation.Nonnull
  public String getAccessTokenId() {
    return accessTokenId;
  }

  public void setAccessTokenId(String accessTokenId) {
    this.accessTokenId = accessTokenId;
  }


  public AlertingAccessTokenResponse externalAccountName(String externalAccountName) {
    this.externalAccountName = externalAccountName;
    return this;
  }

  /**
   * The account name of external user that used to authenticate against the external oauth provider or basic auth
   * @return externalAccountName
   */
  @javax.annotation.Nonnull
  public String getExternalAccountName() {
    return externalAccountName;
  }

  public void setExternalAccountName(String externalAccountName) {
    this.externalAccountName = externalAccountName;
  }


  public AlertingAccessTokenResponse externalProviderName(ExternalProviderNameEnum externalProviderName) {
    this.externalProviderName = externalProviderName;
    return this;
  }

  /**
   * External provider name
   * @return externalProviderName
   */
  @javax.annotation.Nonnull
  public ExternalProviderNameEnum getExternalProviderName() {
    return externalProviderName;
  }

  public void setExternalProviderName(ExternalProviderNameEnum externalProviderName) {
    this.externalProviderName = externalProviderName;
  }


  public AlertingAccessTokenResponse externalUserEmail(String externalUserEmail) {
    this.externalUserEmail = externalUserEmail;
    return this;
  }

  /**
   * The email of external user that used to authenticate aginst the external oauth provider
   * @return externalUserEmail
   */
  @javax.annotation.Nonnull
  public String getExternalUserEmail() {
    return externalUserEmail;
  }

  public void setExternalUserEmail(String externalUserEmail) {
    this.externalUserEmail = externalUserEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertingAccessTokenResponse alertingAccessTokenResponse = (AlertingAccessTokenResponse) o;
    return Objects.equals(this.accessTokenId, alertingAccessTokenResponse.accessTokenId) &&
        Objects.equals(this.externalAccountName, alertingAccessTokenResponse.externalAccountName) &&
        Objects.equals(this.externalProviderName, alertingAccessTokenResponse.externalProviderName) &&
        Objects.equals(this.externalUserEmail, alertingAccessTokenResponse.externalUserEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenId, externalAccountName, externalProviderName, externalUserEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertingAccessTokenResponse {\n");
    sb.append("    accessTokenId: ").append(toIndentedString(accessTokenId)).append("\n");
    sb.append("    externalAccountName: ").append(toIndentedString(externalAccountName)).append("\n");
    sb.append("    externalProviderName: ").append(toIndentedString(externalProviderName)).append("\n");
    sb.append("    externalUserEmail: ").append(toIndentedString(externalUserEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_token_id");
    openapiFields.add("external_account_name");
    openapiFields.add("external_provider_name");
    openapiFields.add("external_user_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("access_token_id");
    openapiRequiredFields.add("external_account_name");
    openapiRequiredFields.add("external_provider_name");
    openapiRequiredFields.add("external_user_email");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertingAccessTokenResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertingAccessTokenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertingAccessTokenResponse is not found in the empty JSON string", AlertingAccessTokenResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertingAccessTokenResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertingAccessTokenResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertingAccessTokenResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("access_token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_token_id").toString()));
      }
      if (!jsonObj.get("external_account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_account_name").toString()));
      }
      if (!jsonObj.get("external_provider_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_provider_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_provider_name").toString()));
      }
      // validate the required field `external_provider_name`
      ExternalProviderNameEnum.validateJsonElement(jsonObj.get("external_provider_name"));
      if (!jsonObj.get("external_user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_user_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertingAccessTokenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertingAccessTokenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertingAccessTokenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertingAccessTokenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertingAccessTokenResponse>() {
           @Override
           public void write(JsonWriter out, AlertingAccessTokenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertingAccessTokenResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertingAccessTokenResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertingAccessTokenResponse
   * @throws IOException if the JSON string is invalid with respect to AlertingAccessTokenResponse
   */
  public static AlertingAccessTokenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertingAccessTokenResponse.class);
  }

  /**
   * Convert an instance of AlertingAccessTokenResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

