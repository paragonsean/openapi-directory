/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic information on a release for private apis
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateBasicReleaseDetailsResponse {
  /**
   * The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
   */
  @JsonAdapter(DestinationTypeEnum.Adapter.class)
  public enum DestinationTypeEnum {
    GROUP("group"),
    
    STORE("store"),
    
    TESTER("tester");

    private String value;

    DestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationTypeEnum fromValue(String value) {
      for (DestinationTypeEnum b : DestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destination_type";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private DestinationTypeEnum destinationType;

  public static final String SERIALIZED_NAME_DISTRIBUTION_GROUP_ID = "distribution_group_id";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_GROUP_ID)
  private String distributionGroupId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_BUILD = "is_external_build";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_BUILD)
  private Boolean isExternalBuild;

  public static final String SERIALIZED_NAME_IS_LATEST = "is_latest";
  @SerializedName(SERIALIZED_NAME_IS_LATEST)
  private Boolean isLatest;

  public static final String SERIALIZED_NAME_MANDATORY_UPDATE = "mandatory_update";
  @SerializedName(SERIALIZED_NAME_MANDATORY_UPDATE)
  private Boolean mandatoryUpdate;

  /**
   * The release&#39;s origin
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    HOCKEYAPP("hockeyapp"),
    
    APPCENTER("appcenter");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  public static final String SERIALIZED_NAME_PUBLISHING_STATUS = "publishing_status";
  @SerializedName(SERIALIZED_NAME_PUBLISHING_STATUS)
  private String publishingStatus;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "short_version";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public PrivateBasicReleaseDetailsResponse() {
  }

  public PrivateBasicReleaseDetailsResponse destinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
    return this;
  }

  /**
   * The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
   * @return destinationType
   */
  @javax.annotation.Nullable
  public DestinationTypeEnum getDestinationType() {
    return destinationType;
  }

  public void setDestinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
  }


  public PrivateBasicReleaseDetailsResponse distributionGroupId(String distributionGroupId) {
    this.distributionGroupId = distributionGroupId;
    return this;
  }

  /**
   * the destination id of release where it is distributed.
   * @return distributionGroupId
   */
  @javax.annotation.Nullable
  public String getDistributionGroupId() {
    return distributionGroupId;
  }

  public void setDistributionGroupId(String distributionGroupId) {
    this.distributionGroupId = distributionGroupId;
  }


  public PrivateBasicReleaseDetailsResponse id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID identifying this unique release.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PrivateBasicReleaseDetailsResponse isExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
    return this;
  }

  /**
   * This value determines if a release is external or not.
   * @return isExternalBuild
   */
  @javax.annotation.Nullable
  public Boolean getIsExternalBuild() {
    return isExternalBuild;
  }

  public void setIsExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
  }


  public PrivateBasicReleaseDetailsResponse isLatest(Boolean isLatest) {
    this.isLatest = isLatest;
    return this;
  }

  /**
   * Indicates if this is the latest release in the group.
   * @return isLatest
   */
  @javax.annotation.Nullable
  public Boolean getIsLatest() {
    return isLatest;
  }

  public void setIsLatest(Boolean isLatest) {
    this.isLatest = isLatest;
  }


  public PrivateBasicReleaseDetailsResponse mandatoryUpdate(Boolean mandatoryUpdate) {
    this.mandatoryUpdate = mandatoryUpdate;
    return this;
  }

  /**
   * A boolean which determines whether the release is a mandatory update or not.
   * @return mandatoryUpdate
   */
  @javax.annotation.Nullable
  public Boolean getMandatoryUpdate() {
    return mandatoryUpdate;
  }

  public void setMandatoryUpdate(Boolean mandatoryUpdate) {
    this.mandatoryUpdate = mandatoryUpdate;
  }


  public PrivateBasicReleaseDetailsResponse origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The release&#39;s origin
   * @return origin
   */
  @javax.annotation.Nullable
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public PrivateBasicReleaseDetailsResponse publishingStatus(String publishingStatus) {
    this.publishingStatus = publishingStatus;
    return this;
  }

  /**
   * the publishing status of the distributed release
   * @return publishingStatus
   */
  @javax.annotation.Nullable
  public String getPublishingStatus() {
    return publishingStatus;
  }

  public void setPublishingStatus(String publishingStatus) {
    this.publishingStatus = publishingStatus;
  }


  public PrivateBasicReleaseDetailsResponse shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * The release&#39;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml. 
   * @return shortVersion
   */
  @javax.annotation.Nullable
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public PrivateBasicReleaseDetailsResponse uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   * @return uploadedAt
   */
  @javax.annotation.Nullable
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public PrivateBasicReleaseDetailsResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release&#39;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml. 
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateBasicReleaseDetailsResponse privateBasicReleaseDetailsResponse = (PrivateBasicReleaseDetailsResponse) o;
    return Objects.equals(this.destinationType, privateBasicReleaseDetailsResponse.destinationType) &&
        Objects.equals(this.distributionGroupId, privateBasicReleaseDetailsResponse.distributionGroupId) &&
        Objects.equals(this.id, privateBasicReleaseDetailsResponse.id) &&
        Objects.equals(this.isExternalBuild, privateBasicReleaseDetailsResponse.isExternalBuild) &&
        Objects.equals(this.isLatest, privateBasicReleaseDetailsResponse.isLatest) &&
        Objects.equals(this.mandatoryUpdate, privateBasicReleaseDetailsResponse.mandatoryUpdate) &&
        Objects.equals(this.origin, privateBasicReleaseDetailsResponse.origin) &&
        Objects.equals(this.publishingStatus, privateBasicReleaseDetailsResponse.publishingStatus) &&
        Objects.equals(this.shortVersion, privateBasicReleaseDetailsResponse.shortVersion) &&
        Objects.equals(this.uploadedAt, privateBasicReleaseDetailsResponse.uploadedAt) &&
        Objects.equals(this.version, privateBasicReleaseDetailsResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationType, distributionGroupId, id, isExternalBuild, isLatest, mandatoryUpdate, origin, publishingStatus, shortVersion, uploadedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateBasicReleaseDetailsResponse {\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    distributionGroupId: ").append(toIndentedString(distributionGroupId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isExternalBuild: ").append(toIndentedString(isExternalBuild)).append("\n");
    sb.append("    isLatest: ").append(toIndentedString(isLatest)).append("\n");
    sb.append("    mandatoryUpdate: ").append(toIndentedString(mandatoryUpdate)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    publishingStatus: ").append(toIndentedString(publishingStatus)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination_type");
    openapiFields.add("distribution_group_id");
    openapiFields.add("id");
    openapiFields.add("is_external_build");
    openapiFields.add("is_latest");
    openapiFields.add("mandatory_update");
    openapiFields.add("origin");
    openapiFields.add("publishing_status");
    openapiFields.add("short_version");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateBasicReleaseDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateBasicReleaseDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateBasicReleaseDetailsResponse is not found in the empty JSON string", PrivateBasicReleaseDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateBasicReleaseDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateBasicReleaseDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) && !jsonObj.get("destination_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_type").toString()));
      }
      // validate the optional field `destination_type`
      if (jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) {
        DestinationTypeEnum.validateJsonElement(jsonObj.get("destination_type"));
      }
      if ((jsonObj.get("distribution_group_id") != null && !jsonObj.get("distribution_group_id").isJsonNull()) && !jsonObj.get("distribution_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distribution_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distribution_group_id").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        OriginEnum.validateJsonElement(jsonObj.get("origin"));
      }
      if ((jsonObj.get("publishing_status") != null && !jsonObj.get("publishing_status").isJsonNull()) && !jsonObj.get("publishing_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishing_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishing_status").toString()));
      }
      if ((jsonObj.get("short_version") != null && !jsonObj.get("short_version").isJsonNull()) && !jsonObj.get("short_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_version").toString()));
      }
      if ((jsonObj.get("uploaded_at") != null && !jsonObj.get("uploaded_at").isJsonNull()) && !jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateBasicReleaseDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateBasicReleaseDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateBasicReleaseDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateBasicReleaseDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateBasicReleaseDetailsResponse>() {
           @Override
           public void write(JsonWriter out, PrivateBasicReleaseDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateBasicReleaseDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateBasicReleaseDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateBasicReleaseDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to PrivateBasicReleaseDetailsResponse
   */
  public static PrivateBasicReleaseDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateBasicReleaseDetailsResponse.class);
  }

  /**
   * Convert an instance of PrivateBasicReleaseDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

