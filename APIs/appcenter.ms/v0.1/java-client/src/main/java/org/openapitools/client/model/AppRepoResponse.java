/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppRepoResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppRepoResponse {
  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private UUID appId;

  public static final String SERIALIZED_NAME_EXTERNAL_USER_ID = "external_user_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_USER_ID)
  private String externalUserId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INSTALLATION_ID = "installation_id";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_ID)
  private String installationId;

  public static final String SERIALIZED_NAME_REPO_ID = "repo_id";
  @SerializedName(SERIALIZED_NAME_REPO_ID)
  private String repoId;

  /**
   * The provider of the repository
   */
  @JsonAdapter(RepoProviderEnum.Adapter.class)
  public enum RepoProviderEnum {
    GITHUB("github"),
    
    BITBUCKET("bitbucket"),
    
    VSTS("vsts"),
    
    GITLAB("gitlab");

    private String value;

    RepoProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepoProviderEnum fromValue(String value) {
      for (RepoProviderEnum b : RepoProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepoProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepoProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepoProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepoProviderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepoProviderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPO_PROVIDER = "repo_provider";
  @SerializedName(SERIALIZED_NAME_REPO_PROVIDER)
  private RepoProviderEnum repoProvider;

  public static final String SERIALIZED_NAME_REPO_URL = "repo_url";
  @SerializedName(SERIALIZED_NAME_REPO_URL)
  private String repoUrl;

  public static final String SERIALIZED_NAME_SERVICE_CONNECTION_ID = "service_connection_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONNECTION_ID)
  private UUID serviceConnectionId;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public AppRepoResponse() {
  }

  public AppRepoResponse appId(UUID appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The unique id (UUID) of the app that this repository integration belongs to
   * @return appId
   */
  @javax.annotation.Nonnull
  public UUID getAppId() {
    return appId;
  }

  public void setAppId(UUID appId) {
    this.appId = appId;
  }


  public AppRepoResponse externalUserId(String externalUserId) {
    this.externalUserId = externalUserId;
    return this;
  }

  /**
   * User id from the provider
   * @return externalUserId
   */
  @javax.annotation.Nullable
  public String getExternalUserId() {
    return externalUserId;
  }

  public void setExternalUserId(String externalUserId) {
    this.externalUserId = externalUserId;
  }


  public AppRepoResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique id (UUID) of the repository integration
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public AppRepoResponse installationId(String installationId) {
    this.installationId = installationId;
    return this;
  }

  /**
   * Installation id from the provider
   * @return installationId
   */
  @javax.annotation.Nullable
  public String getInstallationId() {
    return installationId;
  }

  public void setInstallationId(String installationId) {
    this.installationId = installationId;
  }


  public AppRepoResponse repoId(String repoId) {
    this.repoId = repoId;
    return this;
  }

  /**
   * Repository id from the provider
   * @return repoId
   */
  @javax.annotation.Nullable
  public String getRepoId() {
    return repoId;
  }

  public void setRepoId(String repoId) {
    this.repoId = repoId;
  }


  public AppRepoResponse repoProvider(RepoProviderEnum repoProvider) {
    this.repoProvider = repoProvider;
    return this;
  }

  /**
   * The provider of the repository
   * @return repoProvider
   */
  @javax.annotation.Nullable
  public RepoProviderEnum getRepoProvider() {
    return repoProvider;
  }

  public void setRepoProvider(RepoProviderEnum repoProvider) {
    this.repoProvider = repoProvider;
  }


  public AppRepoResponse repoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
    return this;
  }

  /**
   * The absolute URL of the repository
   * @return repoUrl
   */
  @javax.annotation.Nonnull
  public String getRepoUrl() {
    return repoUrl;
  }

  public void setRepoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
  }


  public AppRepoResponse serviceConnectionId(UUID serviceConnectionId) {
    this.serviceConnectionId = serviceConnectionId;
    return this;
  }

  /**
   * The id of the service connection stored in customer credential store
   * @return serviceConnectionId
   */
  @javax.annotation.Nullable
  public UUID getServiceConnectionId() {
    return serviceConnectionId;
  }

  public void setServiceConnectionId(UUID serviceConnectionId) {
    this.serviceConnectionId = serviceConnectionId;
  }


  public AppRepoResponse userId(UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique id (UUID) of the user who configured the repository
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppRepoResponse appRepoResponse = (AppRepoResponse) o;
    return Objects.equals(this.appId, appRepoResponse.appId) &&
        Objects.equals(this.externalUserId, appRepoResponse.externalUserId) &&
        Objects.equals(this.id, appRepoResponse.id) &&
        Objects.equals(this.installationId, appRepoResponse.installationId) &&
        Objects.equals(this.repoId, appRepoResponse.repoId) &&
        Objects.equals(this.repoProvider, appRepoResponse.repoProvider) &&
        Objects.equals(this.repoUrl, appRepoResponse.repoUrl) &&
        Objects.equals(this.serviceConnectionId, appRepoResponse.serviceConnectionId) &&
        Objects.equals(this.userId, appRepoResponse.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, externalUserId, id, installationId, repoId, repoProvider, repoUrl, serviceConnectionId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppRepoResponse {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    externalUserId: ").append(toIndentedString(externalUserId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installationId: ").append(toIndentedString(installationId)).append("\n");
    sb.append("    repoId: ").append(toIndentedString(repoId)).append("\n");
    sb.append("    repoProvider: ").append(toIndentedString(repoProvider)).append("\n");
    sb.append("    repoUrl: ").append(toIndentedString(repoUrl)).append("\n");
    sb.append("    serviceConnectionId: ").append(toIndentedString(serviceConnectionId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_id");
    openapiFields.add("external_user_id");
    openapiFields.add("id");
    openapiFields.add("installation_id");
    openapiFields.add("repo_id");
    openapiFields.add("repo_provider");
    openapiFields.add("repo_url");
    openapiFields.add("service_connection_id");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("repo_url");
    openapiRequiredFields.add("user_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppRepoResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppRepoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppRepoResponse is not found in the empty JSON string", AppRepoResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppRepoResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppRepoResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppRepoResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("external_user_id") != null && !jsonObj.get("external_user_id").isJsonNull()) && !jsonObj.get("external_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_user_id").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("installation_id") != null && !jsonObj.get("installation_id").isJsonNull()) && !jsonObj.get("installation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installation_id").toString()));
      }
      if ((jsonObj.get("repo_id") != null && !jsonObj.get("repo_id").isJsonNull()) && !jsonObj.get("repo_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_id").toString()));
      }
      if ((jsonObj.get("repo_provider") != null && !jsonObj.get("repo_provider").isJsonNull()) && !jsonObj.get("repo_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_provider").toString()));
      }
      // validate the optional field `repo_provider`
      if (jsonObj.get("repo_provider") != null && !jsonObj.get("repo_provider").isJsonNull()) {
        RepoProviderEnum.validateJsonElement(jsonObj.get("repo_provider"));
      }
      if (!jsonObj.get("repo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_url").toString()));
      }
      if ((jsonObj.get("service_connection_id") != null && !jsonObj.get("service_connection_id").isJsonNull()) && !jsonObj.get("service_connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_connection_id").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppRepoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppRepoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppRepoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppRepoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AppRepoResponse>() {
           @Override
           public void write(JsonWriter out, AppRepoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppRepoResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppRepoResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppRepoResponse
   * @throws IOException if the JSON string is invalid with respect to AppRepoResponse
   */
  public static AppRepoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppRepoResponse.class);
  }

  /**
   * Convert an instance of AppRepoResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

