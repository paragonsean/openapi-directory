/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataSubjectRightCancelDeleteRequestRequest;
import org.openapitools.client.model.DataSubjectRightDeleteRequest202Response;
import org.openapitools.client.model.DataSubjectRightDeleteStatusRequest200Response;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GdprApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GdprApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GdprApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataSubjectRightCancelDeleteRequest
     * @param token Unique request ID (GUID) (required)
     * @param dataSubjectRightCancelDeleteRequestRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel delete request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightCancelDeleteRequestCall(UUID token, DataSubjectRightCancelDeleteRequestRequest dataSubjectRightCancelDeleteRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSubjectRightCancelDeleteRequestRequest;

        // create path and map variables
        String localVarPath = "/v0.1/user/dsr/delete/{token}/cancel"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSubjectRightCancelDeleteRequestValidateBeforeCall(UUID token, DataSubjectRightCancelDeleteRequestRequest dataSubjectRightCancelDeleteRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling dataSubjectRightCancelDeleteRequest(Async)");
        }

        return dataSubjectRightCancelDeleteRequestCall(token, dataSubjectRightCancelDeleteRequestRequest, _callback);

    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @param dataSubjectRightCancelDeleteRequestRequest  (optional)
     * @return DataSubjectRightDeleteRequest202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel delete request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DataSubjectRightDeleteRequest202Response dataSubjectRightCancelDeleteRequest(UUID token, DataSubjectRightCancelDeleteRequestRequest dataSubjectRightCancelDeleteRequestRequest) throws ApiException {
        ApiResponse<DataSubjectRightDeleteRequest202Response> localVarResp = dataSubjectRightCancelDeleteRequestWithHttpInfo(token, dataSubjectRightCancelDeleteRequestRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @param dataSubjectRightCancelDeleteRequestRequest  (optional)
     * @return ApiResponse&lt;DataSubjectRightDeleteRequest202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel delete request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSubjectRightDeleteRequest202Response> dataSubjectRightCancelDeleteRequestWithHttpInfo(UUID token, DataSubjectRightCancelDeleteRequestRequest dataSubjectRightCancelDeleteRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = dataSubjectRightCancelDeleteRequestValidateBeforeCall(token, dataSubjectRightCancelDeleteRequestRequest, null);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param token Unique request ID (GUID) (required)
     * @param dataSubjectRightCancelDeleteRequestRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel delete request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightCancelDeleteRequestAsync(UUID token, DataSubjectRightCancelDeleteRequestRequest dataSubjectRightCancelDeleteRequestRequest, final ApiCallback<DataSubjectRightDeleteRequest202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSubjectRightCancelDeleteRequestValidateBeforeCall(token, dataSubjectRightCancelDeleteRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSubjectRightCancelExportRequest
     * @param token Unique request ID (GUID) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel export request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightCancelExportRequestCall(UUID token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/dsr/export/{token}/cancel"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSubjectRightCancelExportRequestValidateBeforeCall(UUID token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling dataSubjectRightCancelExportRequest(Async)");
        }

        return dataSubjectRightCancelExportRequestCall(token, _callback);

    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @return DataSubjectRightDeleteRequest202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel export request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DataSubjectRightDeleteRequest202Response dataSubjectRightCancelExportRequest(UUID token) throws ApiException {
        ApiResponse<DataSubjectRightDeleteRequest202Response> localVarResp = dataSubjectRightCancelExportRequestWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @return ApiResponse&lt;DataSubjectRightDeleteRequest202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel export request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSubjectRightDeleteRequest202Response> dataSubjectRightCancelExportRequestWithHttpInfo(UUID token) throws ApiException {
        okhttp3.Call localVarCall = dataSubjectRightCancelExportRequestValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param token Unique request ID (GUID) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right cancel export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 503 </td><td> Cancel export request cannot be processed yet. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightCancelExportRequestAsync(UUID token, final ApiCallback<DataSubjectRightDeleteRequest202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSubjectRightCancelExportRequestValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSubjectRightDeleteRequest
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightDeleteRequestCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/dsr/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSubjectRightDeleteRequestValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dataSubjectRightDeleteRequestCall(_callback);

    }

    /**
     * 
     * 
     * @return DataSubjectRightDeleteRequest202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DataSubjectRightDeleteRequest202Response dataSubjectRightDeleteRequest() throws ApiException {
        ApiResponse<DataSubjectRightDeleteRequest202Response> localVarResp = dataSubjectRightDeleteRequestWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;DataSubjectRightDeleteRequest202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSubjectRightDeleteRequest202Response> dataSubjectRightDeleteRequestWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataSubjectRightDeleteRequestValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right delete request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightDeleteRequestAsync(final ApiCallback<DataSubjectRightDeleteRequest202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSubjectRightDeleteRequestValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSubjectRightDeleteStatusRequest
     * @param token Unique request ID (GUID) (required)
     * @param email Email used for delete with x-authz-bypass headers (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right delete request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightDeleteStatusRequestCall(UUID token, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/dsr/delete/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSubjectRightDeleteStatusRequestValidateBeforeCall(UUID token, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling dataSubjectRightDeleteStatusRequest(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling dataSubjectRightDeleteStatusRequest(Async)");
        }

        return dataSubjectRightDeleteStatusRequestCall(token, email, _callback);

    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @param email Email used for delete with x-authz-bypass headers (required)
     * @return DataSubjectRightDeleteStatusRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right delete request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DataSubjectRightDeleteStatusRequest200Response dataSubjectRightDeleteStatusRequest(UUID token, String email) throws ApiException {
        ApiResponse<DataSubjectRightDeleteStatusRequest200Response> localVarResp = dataSubjectRightDeleteStatusRequestWithHttpInfo(token, email);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @param email Email used for delete with x-authz-bypass headers (required)
     * @return ApiResponse&lt;DataSubjectRightDeleteStatusRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right delete request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSubjectRightDeleteStatusRequest200Response> dataSubjectRightDeleteStatusRequestWithHttpInfo(UUID token, String email) throws ApiException {
        okhttp3.Call localVarCall = dataSubjectRightDeleteStatusRequestValidateBeforeCall(token, email, null);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteStatusRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param token Unique request ID (GUID) (required)
     * @param email Email used for delete with x-authz-bypass headers (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right delete request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightDeleteStatusRequestAsync(UUID token, String email, final ApiCallback<DataSubjectRightDeleteStatusRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSubjectRightDeleteStatusRequestValidateBeforeCall(token, email, _callback);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteStatusRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSubjectRightExportRequest
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightExportRequestCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/dsr/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSubjectRightExportRequestValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dataSubjectRightExportRequestCall(_callback);

    }

    /**
     * 
     * 
     * @return DataSubjectRightDeleteRequest202Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DataSubjectRightDeleteRequest202Response dataSubjectRightExportRequest() throws ApiException {
        ApiResponse<DataSubjectRightDeleteRequest202Response> localVarResp = dataSubjectRightExportRequestWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;DataSubjectRightDeleteRequest202Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSubjectRightDeleteRequest202Response> dataSubjectRightExportRequestWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dataSubjectRightExportRequestValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data subject right export request has been accepted. </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightExportRequestAsync(final ApiCallback<DataSubjectRightDeleteRequest202Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSubjectRightExportRequestValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteRequest202Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSubjectRightExportStatusRequest
     * @param token Unique request ID (GUID) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right export request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightExportStatusRequestCall(UUID token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/dsr/export/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSubjectRightExportStatusRequestValidateBeforeCall(UUID token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling dataSubjectRightExportStatusRequest(Async)");
        }

        return dataSubjectRightExportStatusRequestCall(token, _callback);

    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @return DataSubjectRightDeleteStatusRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right export request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DataSubjectRightDeleteStatusRequest200Response dataSubjectRightExportStatusRequest(UUID token) throws ApiException {
        ApiResponse<DataSubjectRightDeleteStatusRequest200Response> localVarResp = dataSubjectRightExportStatusRequestWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param token Unique request ID (GUID) (required)
     * @return ApiResponse&lt;DataSubjectRightDeleteStatusRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right export request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSubjectRightDeleteStatusRequest200Response> dataSubjectRightExportStatusRequestWithHttpInfo(UUID token) throws ApiException {
        okhttp3.Call localVarCall = dataSubjectRightExportStatusRequestValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteStatusRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param token Unique request ID (GUID) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data subject right export request status successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSubjectRightExportStatusRequestAsync(UUID token, final ApiCallback<DataSubjectRightDeleteStatusRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSubjectRightExportStatusRequestValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<DataSubjectRightDeleteStatusRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
