/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner {
  public static final String SERIALIZED_NAME_APP_CODE = "appCode";
  @SerializedName(SERIALIZED_NAME_APP_CODE)
  private Boolean appCode;

  public static final String SERIALIZED_NAME_CLASS_METHOD = "classMethod";
  @SerializedName(SERIALIZED_NAME_CLASS_METHOD)
  private Boolean classMethod;

  public static final String SERIALIZED_NAME_CLASS_NAME = "className";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private String className;

  public static final String SERIALIZED_NAME_CODE_FORMATTED = "codeFormatted";
  @SerializedName(SERIALIZED_NAME_CODE_FORMATTED)
  private String codeFormatted;

  public static final String SERIALIZED_NAME_CODE_RAW = "codeRaw";
  @SerializedName(SERIALIZED_NAME_CODE_RAW)
  private String codeRaw;

  public static final String SERIALIZED_NAME_EXCEPTION_TYPE = "exceptionType";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_TYPE)
  private String exceptionType;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_FRAMEWORK_NAME = "frameworkName";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK_NAME)
  private String frameworkName;

  /**
   * programming language of the frame
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    JAVA_SCRIPT("JavaScript"),
    
    C_SHARP("CSharp"),
    
    OBJECTIVE_C("Objective-C"),
    
    OBJECTIVE_CPP("Objective-Cpp"),
    
    CPP("Cpp"),
    
    C("C"),
    
    SWIFT("Swift"),
    
    JAVA("Java"),
    
    UNKNOWN("Unknown");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_LINE = "line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Integer line;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_METHOD_PARAMS = "methodParams";
  @SerializedName(SERIALIZED_NAME_METHOD_PARAMS)
  private String methodParams;

  public static final String SERIALIZED_NAME_OS_EXCEPTION_TYPE = "osExceptionType";
  @SerializedName(SERIALIZED_NAME_OS_EXCEPTION_TYPE)
  private String osExceptionType;

  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner() {
  }

  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner appCode(Boolean appCode) {
    this.appCode = appCode;
    return this;
  }

  /**
   * this line isn&#39;t from any framework
   * @return appCode
   */
  @javax.annotation.Nullable
  public Boolean getAppCode() {
    return appCode;
  }

  public void setAppCode(Boolean appCode) {
    this.appCode = appCode;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner classMethod(Boolean classMethod) {
    this.classMethod = classMethod;
    return this;
  }

  /**
   * is a class method
   * @return classMethod
   */
  @javax.annotation.Nullable
  public Boolean getClassMethod() {
    return classMethod;
  }

  public void setClassMethod(Boolean classMethod) {
    this.classMethod = classMethod;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner className(String className) {
    this.className = className;
    return this;
  }

  /**
   * name of the class
   * @return className
   */
  @javax.annotation.Nullable
  public String getClassName() {
    return className;
  }

  public void setClassName(String className) {
    this.className = className;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner codeFormatted(String codeFormatted) {
    this.codeFormatted = codeFormatted;
    return this;
  }

  /**
   * Formatted frame string
   * @return codeFormatted
   */
  @javax.annotation.Nullable
  public String getCodeFormatted() {
    return codeFormatted;
  }

  public void setCodeFormatted(String codeFormatted) {
    this.codeFormatted = codeFormatted;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner codeRaw(String codeRaw) {
    this.codeRaw = codeRaw;
    return this;
  }

  /**
   * Unformatted Frame string
   * @return codeRaw
   */
  @javax.annotation.Nullable
  public String getCodeRaw() {
    return codeRaw;
  }

  public void setCodeRaw(String codeRaw) {
    this.codeRaw = codeRaw;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner exceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
    return this;
  }

  /**
   * Exception type.
   * @return exceptionType
   */
  @javax.annotation.Nullable
  public String getExceptionType() {
    return exceptionType;
  }

  public void setExceptionType(String exceptionType) {
    this.exceptionType = exceptionType;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner _file(String _file) {
    this._file = _file;
    return this;
  }

  /**
   * name of the file
   * @return _file
   */
  @javax.annotation.Nullable
  public String getFile() {
    return _file;
  }

  public void setFile(String _file) {
    this._file = _file;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner frameworkName(String frameworkName) {
    this.frameworkName = frameworkName;
    return this;
  }

  /**
   * Name of the framework
   * @return frameworkName
   */
  @javax.annotation.Nullable
  public String getFrameworkName() {
    return frameworkName;
  }

  public void setFrameworkName(String frameworkName) {
    this.frameworkName = frameworkName;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner language(LanguageEnum language) {
    this.language = language;
    return this;
  }

  /**
   * programming language of the frame
   * @return language
   */
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }

  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner line(Integer line) {
    this.line = line;
    return this;
  }

  /**
   * line number
   * @return line
   */
  @javax.annotation.Nullable
  public Integer getLine() {
    return line;
  }

  public void setLine(Integer line) {
    this.line = line;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner method(String method) {
    this.method = method;
    return this;
  }

  /**
   * name of the method
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner methodParams(String methodParams) {
    this.methodParams = methodParams;
    return this;
  }

  /**
   * parameters of the frames method
   * @return methodParams
   */
  @javax.annotation.Nullable
  public String getMethodParams() {
    return methodParams;
  }

  public void setMethodParams(String methodParams) {
    this.methodParams = methodParams;
  }


  public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner osExceptionType(String osExceptionType) {
    this.osExceptionType = osExceptionType;
    return this;
  }

  /**
   * OS exception type. (aka. SIGNAL)
   * @return osExceptionType
   */
  @javax.annotation.Nullable
  public String getOsExceptionType() {
    return osExceptionType;
  }

  public void setOsExceptionType(String osExceptionType) {
    this.osExceptionType = osExceptionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner = (ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner) o;
    return Objects.equals(this.appCode, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.appCode) &&
        Objects.equals(this.classMethod, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.classMethod) &&
        Objects.equals(this.className, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.className) &&
        Objects.equals(this.codeFormatted, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.codeFormatted) &&
        Objects.equals(this.codeRaw, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.codeRaw) &&
        Objects.equals(this.exceptionType, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.exceptionType) &&
        Objects.equals(this._file, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner._file) &&
        Objects.equals(this.frameworkName, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.frameworkName) &&
        Objects.equals(this.language, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.language) &&
        Objects.equals(this.line, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.line) &&
        Objects.equals(this.method, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.method) &&
        Objects.equals(this.methodParams, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.methodParams) &&
        Objects.equals(this.osExceptionType, errorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.osExceptionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appCode, classMethod, className, codeFormatted, codeRaw, exceptionType, _file, frameworkName, language, line, method, methodParams, osExceptionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner {\n");
    sb.append("    appCode: ").append(toIndentedString(appCode)).append("\n");
    sb.append("    classMethod: ").append(toIndentedString(classMethod)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    codeFormatted: ").append(toIndentedString(codeFormatted)).append("\n");
    sb.append("    codeRaw: ").append(toIndentedString(codeRaw)).append("\n");
    sb.append("    exceptionType: ").append(toIndentedString(exceptionType)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    frameworkName: ").append(toIndentedString(frameworkName)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    methodParams: ").append(toIndentedString(methodParams)).append("\n");
    sb.append("    osExceptionType: ").append(toIndentedString(osExceptionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appCode");
    openapiFields.add("classMethod");
    openapiFields.add("className");
    openapiFields.add("codeFormatted");
    openapiFields.add("codeRaw");
    openapiFields.add("exceptionType");
    openapiFields.add("file");
    openapiFields.add("frameworkName");
    openapiFields.add("language");
    openapiFields.add("line");
    openapiFields.add("method");
    openapiFields.add("methodParams");
    openapiFields.add("osExceptionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner is not found in the empty JSON string", ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("className") != null && !jsonObj.get("className").isJsonNull()) && !jsonObj.get("className").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `className` to be a primitive type in the JSON string but got `%s`", jsonObj.get("className").toString()));
      }
      if ((jsonObj.get("codeFormatted") != null && !jsonObj.get("codeFormatted").isJsonNull()) && !jsonObj.get("codeFormatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeFormatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeFormatted").toString()));
      }
      if ((jsonObj.get("codeRaw") != null && !jsonObj.get("codeRaw").isJsonNull()) && !jsonObj.get("codeRaw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeRaw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeRaw").toString()));
      }
      if ((jsonObj.get("exceptionType") != null && !jsonObj.get("exceptionType").isJsonNull()) && !jsonObj.get("exceptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exceptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exceptionType").toString()));
      }
      if ((jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) && !jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      if ((jsonObj.get("frameworkName") != null && !jsonObj.get("frameworkName").isJsonNull()) && !jsonObj.get("frameworkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `frameworkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("frameworkName").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `language`
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) {
        LanguageEnum.validateJsonElement(jsonObj.get("language"));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("methodParams") != null && !jsonObj.get("methodParams").isJsonNull()) && !jsonObj.get("methodParams").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodParams` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodParams").toString()));
      }
      if ((jsonObj.get("osExceptionType") != null && !jsonObj.get("osExceptionType").isJsonNull()) && !jsonObj.get("osExceptionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osExceptionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osExceptionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner>() {
           @Override
           public void write(JsonWriter out, ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner
   * @throws IOException if the JSON string is invalid with respect to ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner
   */
  public static ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner.class);
  }

  /**
   * Convert an instance of ErrorsGroupList200ResponseErrorGroupsInnerAllOfReasonFramesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

