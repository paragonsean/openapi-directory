/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AzureSubscriptionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureSubscriptionResponse {
  public static final String SERIALIZED_NAME_IS_BILLABLE = "is_billable";
  @SerializedName(SERIALIZED_NAME_IS_BILLABLE)
  private Boolean isBillable;

  public static final String SERIALIZED_NAME_IS_BILLING = "is_billing";
  @SerializedName(SERIALIZED_NAME_IS_BILLING)
  private Boolean isBilling;

  public static final String SERIALIZED_NAME_IS_MICROSOFT_INTERNAL = "is_microsoft_internal";
  @SerializedName(SERIALIZED_NAME_IS_MICROSOFT_INTERNAL)
  private Boolean isMicrosoftInternal;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private UUID subscriptionId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_NAME = "subscription_name";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_NAME)
  private String subscriptionName;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private UUID tenantId;

  public AzureSubscriptionResponse() {
  }

  public AzureSubscriptionResponse isBillable(Boolean isBillable) {
    this.isBillable = isBillable;
    return this;
  }

  /**
   * If the subscription can be used for billing
   * @return isBillable
   */
  @javax.annotation.Nullable
  public Boolean getIsBillable() {
    return isBillable;
  }

  public void setIsBillable(Boolean isBillable) {
    this.isBillable = isBillable;
  }


  public AzureSubscriptionResponse isBilling(Boolean isBilling) {
    this.isBilling = isBilling;
    return this;
  }

  /**
   * If the subscription is used for billing
   * @return isBilling
   */
  @javax.annotation.Nullable
  public Boolean getIsBilling() {
    return isBilling;
  }

  public void setIsBilling(Boolean isBilling) {
    this.isBilling = isBilling;
  }


  public AzureSubscriptionResponse isMicrosoftInternal(Boolean isMicrosoftInternal) {
    this.isMicrosoftInternal = isMicrosoftInternal;
    return this;
  }

  /**
   * If the subscription is internal Microsoft subscription
   * @return isMicrosoftInternal
   */
  @javax.annotation.Nullable
  public Boolean getIsMicrosoftInternal() {
    return isMicrosoftInternal;
  }

  public void setIsMicrosoftInternal(Boolean isMicrosoftInternal) {
    this.isMicrosoftInternal = isMicrosoftInternal;
  }


  public AzureSubscriptionResponse subscriptionId(UUID subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The azure subscription id
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public UUID getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(UUID subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public AzureSubscriptionResponse subscriptionName(String subscriptionName) {
    this.subscriptionName = subscriptionName;
    return this;
  }

  /**
   * The name of the azure subscription
   * @return subscriptionName
   */
  @javax.annotation.Nonnull
  public String getSubscriptionName() {
    return subscriptionName;
  }

  public void setSubscriptionName(String subscriptionName) {
    this.subscriptionName = subscriptionName;
  }


  public AzureSubscriptionResponse tenantId(UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The tenant id of the azure subscription belongs to
   * @return tenantId
   */
  @javax.annotation.Nonnull
  public UUID getTenantId() {
    return tenantId;
  }

  public void setTenantId(UUID tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureSubscriptionResponse azureSubscriptionResponse = (AzureSubscriptionResponse) o;
    return Objects.equals(this.isBillable, azureSubscriptionResponse.isBillable) &&
        Objects.equals(this.isBilling, azureSubscriptionResponse.isBilling) &&
        Objects.equals(this.isMicrosoftInternal, azureSubscriptionResponse.isMicrosoftInternal) &&
        Objects.equals(this.subscriptionId, azureSubscriptionResponse.subscriptionId) &&
        Objects.equals(this.subscriptionName, azureSubscriptionResponse.subscriptionName) &&
        Objects.equals(this.tenantId, azureSubscriptionResponse.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isBillable, isBilling, isMicrosoftInternal, subscriptionId, subscriptionName, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureSubscriptionResponse {\n");
    sb.append("    isBillable: ").append(toIndentedString(isBillable)).append("\n");
    sb.append("    isBilling: ").append(toIndentedString(isBilling)).append("\n");
    sb.append("    isMicrosoftInternal: ").append(toIndentedString(isMicrosoftInternal)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    subscriptionName: ").append(toIndentedString(subscriptionName)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_billable");
    openapiFields.add("is_billing");
    openapiFields.add("is_microsoft_internal");
    openapiFields.add("subscription_id");
    openapiFields.add("subscription_name");
    openapiFields.add("tenant_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("subscription_id");
    openapiRequiredFields.add("subscription_name");
    openapiRequiredFields.add("tenant_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureSubscriptionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureSubscriptionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureSubscriptionResponse is not found in the empty JSON string", AzureSubscriptionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureSubscriptionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureSubscriptionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AzureSubscriptionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      if (!jsonObj.get("subscription_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_name").toString()));
      }
      if (!jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureSubscriptionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureSubscriptionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureSubscriptionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureSubscriptionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureSubscriptionResponse>() {
           @Override
           public void write(JsonWriter out, AzureSubscriptionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureSubscriptionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureSubscriptionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureSubscriptionResponse
   * @throws IOException if the JSON string is invalid with respect to AzureSubscriptionResponse
   */
  public static AzureSubscriptionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureSubscriptionResponse.class);
  }

  /**
   * Convert an instance of AzureSubscriptionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

