/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.UserProfileResponseInternalAllOfSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserProfileResponseInternal
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserProfileResponseInternal {
  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_CAN_CHANGE_PASSWORD = "can_change_password";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_PASSWORD)
  private Boolean canChangePassword;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The creation origin of this user
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    APPCENTER("appcenter"),
    
    HOCKEYAPP("hockeyapp"),
    
    CODEPUSH("codepush");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  /**
   * Gets or Sets permissions
   */
  @JsonAdapter(PermissionsEnum.Adapter.class)
  public enum PermissionsEnum {
    MANAGER("manager"),
    
    DEVELOPER("developer"),
    
    VIEWER("viewer"),
    
    TESTER("tester");

    private String value;

    PermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionsEnum fromValue(String value) {
      for (PermissionsEnum b : PermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<PermissionsEnum> permissions = new ArrayList<>();

  /**
   * The new admin_role
   */
  @JsonAdapter(AdminRoleEnum.Adapter.class)
  public enum AdminRoleEnum {
    SUPER_ADMIN("superAdmin"),
    
    ADMIN("admin"),
    
    DEV_OPS("devOps"),
    
    CUSTOMER_SUPPORT("customerSupport"),
    
    NOT_ADMIN("notAdmin");

    private String value;

    AdminRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdminRoleEnum fromValue(String value) {
      for (AdminRoleEnum b : AdminRoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdminRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdminRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdminRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdminRoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdminRoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADMIN_ROLE = "admin_role";
  @SerializedName(SERIALIZED_NAME_ADMIN_ROLE)
  private AdminRoleEnum adminRole;

  public static final String SERIALIZED_NAME_FEATURE_FLAGS = "feature_flags";
  @SerializedName(SERIALIZED_NAME_FEATURE_FLAGS)
  private List<String> featureFlags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private UserProfileResponseInternalAllOfSettings settings;

  public UserProfileResponseInternal() {
  }

  public UserProfileResponseInternal avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * The avatar URL of the user
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public UserProfileResponseInternal canChangePassword(Boolean canChangePassword) {
    this.canChangePassword = canChangePassword;
    return this;
  }

  /**
   * User is required to send an old password in order to change the password.
   * @return canChangePassword
   */
  @javax.annotation.Nullable
  public Boolean getCanChangePassword() {
    return canChangePassword;
  }

  public void setCanChangePassword(Boolean canChangePassword) {
    this.canChangePassword = canChangePassword;
  }


  public UserProfileResponseInternal displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The full name of the user. Might for example be first and last name
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UserProfileResponseInternal email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the user
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserProfileResponseInternal id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique id (UUID) of the user
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public UserProfileResponseInternal name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name that is used to identify the user.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserProfileResponseInternal origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The creation origin of this user
   * @return origin
   */
  @javax.annotation.Nonnull
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public UserProfileResponseInternal permissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
    return this;
  }

  public UserProfileResponseInternal addPermissionsItem(PermissionsEnum permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * The permissions the user has for the app
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<PermissionsEnum> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
  }


  public UserProfileResponseInternal adminRole(AdminRoleEnum adminRole) {
    this.adminRole = adminRole;
    return this;
  }

  /**
   * The new admin_role
   * @return adminRole
   */
  @javax.annotation.Nullable
  public AdminRoleEnum getAdminRole() {
    return adminRole;
  }

  public void setAdminRole(AdminRoleEnum adminRole) {
    this.adminRole = adminRole;
  }


  public UserProfileResponseInternal featureFlags(List<String> featureFlags) {
    this.featureFlags = featureFlags;
    return this;
  }

  public UserProfileResponseInternal addFeatureFlagsItem(String featureFlagsItem) {
    if (this.featureFlags == null) {
      this.featureFlags = new ArrayList<>();
    }
    this.featureFlags.add(featureFlagsItem);
    return this;
  }

  /**
   * The feature flags that are enabled for this app
   * @return featureFlags
   */
  @javax.annotation.Nullable
  public List<String> getFeatureFlags() {
    return featureFlags;
  }

  public void setFeatureFlags(List<String> featureFlags) {
    this.featureFlags = featureFlags;
  }


  public UserProfileResponseInternal settings(UserProfileResponseInternalAllOfSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public UserProfileResponseInternalAllOfSettings getSettings() {
    return settings;
  }

  public void setSettings(UserProfileResponseInternalAllOfSettings settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProfileResponseInternal userProfileResponseInternal = (UserProfileResponseInternal) o;
    return Objects.equals(this.avatarUrl, userProfileResponseInternal.avatarUrl) &&
        Objects.equals(this.canChangePassword, userProfileResponseInternal.canChangePassword) &&
        Objects.equals(this.displayName, userProfileResponseInternal.displayName) &&
        Objects.equals(this.email, userProfileResponseInternal.email) &&
        Objects.equals(this.id, userProfileResponseInternal.id) &&
        Objects.equals(this.name, userProfileResponseInternal.name) &&
        Objects.equals(this.origin, userProfileResponseInternal.origin) &&
        Objects.equals(this.permissions, userProfileResponseInternal.permissions) &&
        Objects.equals(this.adminRole, userProfileResponseInternal.adminRole) &&
        Objects.equals(this.featureFlags, userProfileResponseInternal.featureFlags) &&
        Objects.equals(this.settings, userProfileResponseInternal.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarUrl, canChangePassword, displayName, email, id, name, origin, permissions, adminRole, featureFlags, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProfileResponseInternal {\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    canChangePassword: ").append(toIndentedString(canChangePassword)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    adminRole: ").append(toIndentedString(adminRole)).append("\n");
    sb.append("    featureFlags: ").append(toIndentedString(featureFlags)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar_url");
    openapiFields.add("can_change_password");
    openapiFields.add("display_name");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("origin");
    openapiFields.add("permissions");
    openapiFields.add("admin_role");
    openapiFields.add("feature_flags");
    openapiFields.add("settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("origin");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserProfileResponseInternal
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserProfileResponseInternal.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProfileResponseInternal is not found in the empty JSON string", UserProfileResponseInternal.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserProfileResponseInternal.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProfileResponseInternal` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserProfileResponseInternal.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the required field `origin`
      OriginEnum.validateJsonElement(jsonObj.get("origin"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("admin_role") != null && !jsonObj.get("admin_role").isJsonNull()) && !jsonObj.get("admin_role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_role").toString()));
      }
      // validate the optional field `admin_role`
      if (jsonObj.get("admin_role") != null && !jsonObj.get("admin_role").isJsonNull()) {
        AdminRoleEnum.validateJsonElement(jsonObj.get("admin_role"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("feature_flags") != null && !jsonObj.get("feature_flags").isJsonNull() && !jsonObj.get("feature_flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `feature_flags` to be an array in the JSON string but got `%s`", jsonObj.get("feature_flags").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        UserProfileResponseInternalAllOfSettings.validateJsonElement(jsonObj.get("settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProfileResponseInternal.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProfileResponseInternal' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProfileResponseInternal> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProfileResponseInternal.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProfileResponseInternal>() {
           @Override
           public void write(JsonWriter out, UserProfileResponseInternal value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProfileResponseInternal read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserProfileResponseInternal given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserProfileResponseInternal
   * @throws IOException if the JSON string is invalid with respect to UserProfileResponseInternal
   */
  public static UserProfileResponseInternal fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProfileResponseInternal.class);
  }

  /**
   * Convert an instance of UserProfileResponseInternal to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

