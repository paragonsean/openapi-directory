/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SymbolUploadsList200ResponseInnerSymbolsUploadedInner;
import org.openapitools.client.model.SymbolUploadsList200ResponseInnerUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single symbol upload entity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SymbolUploadsList200ResponseInner {
  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private BigDecimal fileSize;

  /**
   * The origin of the symbol upload
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    USER("User"),
    
    SYSTEM("System");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  /**
   * The current status for the symbol upload
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("created"),
    
    COMMITTED("committed"),
    
    ABORTED("aborted"),
    
    PROCESSING("processing"),
    
    INDEXED("indexed"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The type of the symbol for the current symbol upload
   */
  @JsonAdapter(SymbolTypeEnum.Adapter.class)
  public enum SymbolTypeEnum {
    APPLE("Apple"),
    
    JAVA_SCRIPT("JavaScript"),
    
    BREAKPAD("Breakpad"),
    
    ANDROID_PROGUARD("AndroidProguard"),
    
    UWP("UWP");

    private String value;

    SymbolTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SymbolTypeEnum fromValue(String value) {
      for (SymbolTypeEnum b : SymbolTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SymbolTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SymbolTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SymbolTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SymbolTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SymbolTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYMBOL_TYPE = "symbol_type";
  @SerializedName(SERIALIZED_NAME_SYMBOL_TYPE)
  private SymbolTypeEnum symbolType;

  public static final String SERIALIZED_NAME_SYMBOL_UPLOAD_ID = "symbol_upload_id";
  @SerializedName(SERIALIZED_NAME_SYMBOL_UPLOAD_ID)
  private String symbolUploadId;

  public static final String SERIALIZED_NAME_SYMBOLS_UPLOADED = "symbols_uploaded";
  @SerializedName(SERIALIZED_NAME_SYMBOLS_UPLOADED)
  private List<SymbolUploadsList200ResponseInnerSymbolsUploadedInner> symbolsUploaded = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private SymbolUploadsList200ResponseInnerUser user;

  public SymbolUploadsList200ResponseInner() {
  }

  public SymbolUploadsList200ResponseInner appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The application that this symbol upload belongs to
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public SymbolUploadsList200ResponseInner fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The file name for the symbol upload
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public SymbolUploadsList200ResponseInner fileSize(BigDecimal fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * The size of the file in Mebibytes. This may be 0 until the status is indexed
   * @return fileSize
   */
  @javax.annotation.Nullable
  public BigDecimal getFileSize() {
    return fileSize;
  }

  public void setFileSize(BigDecimal fileSize) {
    this.fileSize = fileSize;
  }


  public SymbolUploadsList200ResponseInner origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The origin of the symbol upload
   * @return origin
   */
  @javax.annotation.Nullable
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public SymbolUploadsList200ResponseInner status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The current status for the symbol upload
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public SymbolUploadsList200ResponseInner symbolType(SymbolTypeEnum symbolType) {
    this.symbolType = symbolType;
    return this;
  }

  /**
   * The type of the symbol for the current symbol upload
   * @return symbolType
   */
  @javax.annotation.Nonnull
  public SymbolTypeEnum getSymbolType() {
    return symbolType;
  }

  public void setSymbolType(SymbolTypeEnum symbolType) {
    this.symbolType = symbolType;
  }


  public SymbolUploadsList200ResponseInner symbolUploadId(String symbolUploadId) {
    this.symbolUploadId = symbolUploadId;
    return this;
  }

  /**
   * The id for the current symbol upload
   * @return symbolUploadId
   */
  @javax.annotation.Nonnull
  public String getSymbolUploadId() {
    return symbolUploadId;
  }

  public void setSymbolUploadId(String symbolUploadId) {
    this.symbolUploadId = symbolUploadId;
  }


  public SymbolUploadsList200ResponseInner symbolsUploaded(List<SymbolUploadsList200ResponseInnerSymbolsUploadedInner> symbolsUploaded) {
    this.symbolsUploaded = symbolsUploaded;
    return this;
  }

  public SymbolUploadsList200ResponseInner addSymbolsUploadedItem(SymbolUploadsList200ResponseInnerSymbolsUploadedInner symbolsUploadedItem) {
    if (this.symbolsUploaded == null) {
      this.symbolsUploaded = new ArrayList<>();
    }
    this.symbolsUploaded.add(symbolsUploadedItem);
    return this;
  }

  /**
   * The symbols found in the upload. This may be empty until the status is indexed
   * @return symbolsUploaded
   */
  @javax.annotation.Nullable
  public List<SymbolUploadsList200ResponseInnerSymbolsUploadedInner> getSymbolsUploaded() {
    return symbolsUploaded;
  }

  public void setSymbolsUploaded(List<SymbolUploadsList200ResponseInnerSymbolsUploadedInner> symbolsUploaded) {
    this.symbolsUploaded = symbolsUploaded;
  }


  public SymbolUploadsList200ResponseInner timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * When the symbol upload was committed, or last transaction time if not committed
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public SymbolUploadsList200ResponseInner user(SymbolUploadsList200ResponseInnerUser user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public SymbolUploadsList200ResponseInnerUser getUser() {
    return user;
  }

  public void setUser(SymbolUploadsList200ResponseInnerUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolUploadsList200ResponseInner symbolUploadsList200ResponseInner = (SymbolUploadsList200ResponseInner) o;
    return Objects.equals(this.appId, symbolUploadsList200ResponseInner.appId) &&
        Objects.equals(this.fileName, symbolUploadsList200ResponseInner.fileName) &&
        Objects.equals(this.fileSize, symbolUploadsList200ResponseInner.fileSize) &&
        Objects.equals(this.origin, symbolUploadsList200ResponseInner.origin) &&
        Objects.equals(this.status, symbolUploadsList200ResponseInner.status) &&
        Objects.equals(this.symbolType, symbolUploadsList200ResponseInner.symbolType) &&
        Objects.equals(this.symbolUploadId, symbolUploadsList200ResponseInner.symbolUploadId) &&
        Objects.equals(this.symbolsUploaded, symbolUploadsList200ResponseInner.symbolsUploaded) &&
        Objects.equals(this.timestamp, symbolUploadsList200ResponseInner.timestamp) &&
        Objects.equals(this.user, symbolUploadsList200ResponseInner.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, fileName, fileSize, origin, status, symbolType, symbolUploadId, symbolsUploaded, timestamp, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolUploadsList200ResponseInner {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    symbolType: ").append(toIndentedString(symbolType)).append("\n");
    sb.append("    symbolUploadId: ").append(toIndentedString(symbolUploadId)).append("\n");
    sb.append("    symbolsUploaded: ").append(toIndentedString(symbolsUploaded)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_id");
    openapiFields.add("file_name");
    openapiFields.add("file_size");
    openapiFields.add("origin");
    openapiFields.add("status");
    openapiFields.add("symbol_type");
    openapiFields.add("symbol_upload_id");
    openapiFields.add("symbols_uploaded");
    openapiFields.add("timestamp");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("symbol_type");
    openapiRequiredFields.add("symbol_upload_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SymbolUploadsList200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SymbolUploadsList200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SymbolUploadsList200ResponseInner is not found in the empty JSON string", SymbolUploadsList200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SymbolUploadsList200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SymbolUploadsList200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SymbolUploadsList200ResponseInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if ((jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonNull()) && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        OriginEnum.validateJsonElement(jsonObj.get("origin"));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("symbol_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_type").toString()));
      }
      // validate the required field `symbol_type`
      SymbolTypeEnum.validateJsonElement(jsonObj.get("symbol_type"));
      if (!jsonObj.get("symbol_upload_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol_upload_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_upload_id").toString()));
      }
      if (jsonObj.get("symbols_uploaded") != null && !jsonObj.get("symbols_uploaded").isJsonNull()) {
        JsonArray jsonArraysymbolsUploaded = jsonObj.getAsJsonArray("symbols_uploaded");
        if (jsonArraysymbolsUploaded != null) {
          // ensure the json data is an array
          if (!jsonObj.get("symbols_uploaded").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `symbols_uploaded` to be an array in the JSON string but got `%s`", jsonObj.get("symbols_uploaded").toString()));
          }

          // validate the optional field `symbols_uploaded` (array)
          for (int i = 0; i < jsonArraysymbolsUploaded.size(); i++) {
            SymbolUploadsList200ResponseInnerSymbolsUploadedInner.validateJsonElement(jsonArraysymbolsUploaded.get(i));
          };
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        SymbolUploadsList200ResponseInnerUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SymbolUploadsList200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SymbolUploadsList200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SymbolUploadsList200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SymbolUploadsList200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SymbolUploadsList200ResponseInner>() {
           @Override
           public void write(JsonWriter out, SymbolUploadsList200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SymbolUploadsList200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SymbolUploadsList200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SymbolUploadsList200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to SymbolUploadsList200ResponseInner
   */
  public static SymbolUploadsList200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SymbolUploadsList200ResponseInner.class);
  }

  /**
   * Convert an instance of SymbolUploadsList200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

