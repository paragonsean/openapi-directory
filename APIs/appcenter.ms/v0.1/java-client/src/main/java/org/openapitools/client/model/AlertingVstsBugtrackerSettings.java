/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VSTS bugtracker specific settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertingVstsBugtrackerSettings {
  public static final String SERIALIZED_NAME_VSTS_ACCOUNT_NAME = "vsts_account_name";
  @SerializedName(SERIALIZED_NAME_VSTS_ACCOUNT_NAME)
  private String vstsAccountName;

  public static final String SERIALIZED_NAME_VSTS_AREA_PATH = "vsts_area_path";
  @SerializedName(SERIALIZED_NAME_VSTS_AREA_PATH)
  private String vstsAreaPath;

  public static final String SERIALIZED_NAME_VSTS_DEFAULT_PAYLOAD = "vsts_default_payload";
  @SerializedName(SERIALIZED_NAME_VSTS_DEFAULT_PAYLOAD)
  private Object vstsDefaultPayload;

  public static final String SERIALIZED_NAME_VSTS_PROJECT_ID = "vsts_project_id";
  @SerializedName(SERIALIZED_NAME_VSTS_PROJECT_ID)
  private String vstsProjectId;

  public static final String SERIALIZED_NAME_VSTS_PROJECT_NAME = "vsts_project_name";
  @SerializedName(SERIALIZED_NAME_VSTS_PROJECT_NAME)
  private String vstsProjectName;

  public static final String SERIALIZED_NAME_VSTS_PROJECT_URI = "vsts_project_uri";
  @SerializedName(SERIALIZED_NAME_VSTS_PROJECT_URI)
  private String vstsProjectUri;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_OWNER_NAME = "owner_name";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  /**
   * type of bugtracker
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GITHUB("github"),
    
    VSTS("vsts"),
    
    JIRA("jira");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected TypeEnum type;

  public AlertingVstsBugtrackerSettings() {
    this.type = this.getClass().getSimpleName();
  }

  public AlertingVstsBugtrackerSettings vstsAccountName(String vstsAccountName) {
    this.vstsAccountName = vstsAccountName;
    return this;
  }

  /**
   * Get vstsAccountName
   * @return vstsAccountName
   */
  @javax.annotation.Nullable
  public String getVstsAccountName() {
    return vstsAccountName;
  }

  public void setVstsAccountName(String vstsAccountName) {
    this.vstsAccountName = vstsAccountName;
  }


  public AlertingVstsBugtrackerSettings vstsAreaPath(String vstsAreaPath) {
    this.vstsAreaPath = vstsAreaPath;
    return this;
  }

  /**
   * Get vstsAreaPath
   * @return vstsAreaPath
   */
  @javax.annotation.Nullable
  public String getVstsAreaPath() {
    return vstsAreaPath;
  }

  public void setVstsAreaPath(String vstsAreaPath) {
    this.vstsAreaPath = vstsAreaPath;
  }


  public AlertingVstsBugtrackerSettings vstsDefaultPayload(Object vstsDefaultPayload) {
    this.vstsDefaultPayload = vstsDefaultPayload;
    return this;
  }

  /**
   * Get vstsDefaultPayload
   * @return vstsDefaultPayload
   */
  @javax.annotation.Nullable
  public Object getVstsDefaultPayload() {
    return vstsDefaultPayload;
  }

  public void setVstsDefaultPayload(Object vstsDefaultPayload) {
    this.vstsDefaultPayload = vstsDefaultPayload;
  }


  public AlertingVstsBugtrackerSettings vstsProjectId(String vstsProjectId) {
    this.vstsProjectId = vstsProjectId;
    return this;
  }

  /**
   * Get vstsProjectId
   * @return vstsProjectId
   */
  @javax.annotation.Nonnull
  public String getVstsProjectId() {
    return vstsProjectId;
  }

  public void setVstsProjectId(String vstsProjectId) {
    this.vstsProjectId = vstsProjectId;
  }


  public AlertingVstsBugtrackerSettings vstsProjectName(String vstsProjectName) {
    this.vstsProjectName = vstsProjectName;
    return this;
  }

  /**
   * Get vstsProjectName
   * @return vstsProjectName
   */
  @javax.annotation.Nullable
  public String getVstsProjectName() {
    return vstsProjectName;
  }

  public void setVstsProjectName(String vstsProjectName) {
    this.vstsProjectName = vstsProjectName;
  }


  public AlertingVstsBugtrackerSettings vstsProjectUri(String vstsProjectUri) {
    this.vstsProjectUri = vstsProjectUri;
    return this;
  }

  /**
   * Get vstsProjectUri
   * @return vstsProjectUri
   */
  @javax.annotation.Nonnull
  public String getVstsProjectUri() {
    return vstsProjectUri;
  }

  public void setVstsProjectUri(String vstsProjectUri) {
    this.vstsProjectUri = vstsProjectUri;
  }


  public AlertingVstsBugtrackerSettings callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * Get callbackUrl
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public AlertingVstsBugtrackerSettings ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * Get ownerName
   * @return ownerName
   */
  @javax.annotation.Nonnull
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public AlertingVstsBugtrackerSettings type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * type of bugtracker
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertingVstsBugtrackerSettings alertingVstsBugtrackerSettings = (AlertingVstsBugtrackerSettings) o;
    return Objects.equals(this.vstsAccountName, alertingVstsBugtrackerSettings.vstsAccountName) &&
        Objects.equals(this.vstsAreaPath, alertingVstsBugtrackerSettings.vstsAreaPath) &&
        Objects.equals(this.vstsDefaultPayload, alertingVstsBugtrackerSettings.vstsDefaultPayload) &&
        Objects.equals(this.vstsProjectId, alertingVstsBugtrackerSettings.vstsProjectId) &&
        Objects.equals(this.vstsProjectName, alertingVstsBugtrackerSettings.vstsProjectName) &&
        Objects.equals(this.vstsProjectUri, alertingVstsBugtrackerSettings.vstsProjectUri) &&
        Objects.equals(this.callbackUrl, alertingVstsBugtrackerSettings.callbackUrl) &&
        Objects.equals(this.ownerName, alertingVstsBugtrackerSettings.ownerName) &&
        Objects.equals(this.type, alertingVstsBugtrackerSettings.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vstsAccountName, vstsAreaPath, vstsDefaultPayload, vstsProjectId, vstsProjectName, vstsProjectUri, callbackUrl, ownerName, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertingVstsBugtrackerSettings {\n");
    sb.append("    vstsAccountName: ").append(toIndentedString(vstsAccountName)).append("\n");
    sb.append("    vstsAreaPath: ").append(toIndentedString(vstsAreaPath)).append("\n");
    sb.append("    vstsDefaultPayload: ").append(toIndentedString(vstsDefaultPayload)).append("\n");
    sb.append("    vstsProjectId: ").append(toIndentedString(vstsProjectId)).append("\n");
    sb.append("    vstsProjectName: ").append(toIndentedString(vstsProjectName)).append("\n");
    sb.append("    vstsProjectUri: ").append(toIndentedString(vstsProjectUri)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callback_url");
    openapiFields.add("owner_name");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vsts_project_id");
    openapiRequiredFields.add("vsts_project_uri");
    openapiRequiredFields.add("owner_name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertingVstsBugtrackerSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertingVstsBugtrackerSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertingVstsBugtrackerSettings is not found in the empty JSON string", AlertingVstsBugtrackerSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertingVstsBugtrackerSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertingVstsBugtrackerSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertingVstsBugtrackerSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertingVstsBugtrackerSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertingVstsBugtrackerSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertingVstsBugtrackerSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertingVstsBugtrackerSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertingVstsBugtrackerSettings>() {
           @Override
           public void write(JsonWriter out, AlertingVstsBugtrackerSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertingVstsBugtrackerSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertingVstsBugtrackerSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertingVstsBugtrackerSettings
   * @throws IOException if the JSON string is invalid with respect to AlertingVstsBugtrackerSettings
   */
  public static AlertingVstsBugtrackerSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertingVstsBugtrackerSettings.class);
  }

  /**
   * Convert an instance of AlertingVstsBugtrackerSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

