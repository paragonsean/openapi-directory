/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppInvitationsCreateByEmailRequest;
import org.openapitools.client.model.AppInvitationsCreateRequest;
import org.openapitools.client.model.AppInvitationsList200Response;
import org.openapitools.client.model.AppInvitationsList200ResponseInvitedBy;
import org.openapitools.client.model.AppInvitationsUpdatePermissionsRequest;
import org.openapitools.client.model.AppsCreateRequest;
import org.openapitools.client.model.AppsGetTeams200ResponseInner;
import org.openapitools.client.model.AppsList200ResponseInner;
import org.openapitools.client.model.AppsList200ResponseInnerAllOfAzureSubscription;
import org.openapitools.client.model.AppsUpdateRequest;
import org.openapitools.client.model.AppsUpdateUserPermissionsRequest;
import org.openapitools.client.model.AzureSubscriptionLinkForAppRequest;
import java.math.BigDecimal;
import org.openapitools.client.model.DistributionGroupsAddAppsRequest;
import org.openapitools.client.model.DistributionGroupsAddAppsRequestAppsInner;
import org.openapitools.client.model.DistributionGroupsAddUser200ResponseInner;
import org.openapitools.client.model.DistributionGroupsAddUserRequest;
import org.openapitools.client.model.DistributionGroupsBulkDeleteAppsRequest;
import org.openapitools.client.model.DistributionGroupsCreateRequest;
import org.openapitools.client.model.DistributionGroupsDetailsForOrg200ResponseInner;
import org.openapitools.client.model.DistributionGroupsGetApps200ResponseInner;
import org.openapitools.client.model.DistributionGroupsList200ResponseInner;
import org.openapitools.client.model.DistributionGroupsListAllTestersForOrg200ResponseInner;
import org.openapitools.client.model.DistributionGroupsListUsers200ResponseInner;
import org.openapitools.client.model.DistributionGroupsRemoveUser200ResponseInner;
import org.openapitools.client.model.DistributionGroupsUpdateRequest;
import java.io.File;
import org.openapitools.client.model.InvitationsSent200ResponseInner;
import org.openapitools.client.model.OrgInvitationsDeleteRequest;
import org.openapitools.client.model.OrgInvitationsListPending200ResponseInner;
import org.openapitools.client.model.OrgInvitationsUpdateRequest;
import org.openapitools.client.model.OrganizationsCreateOrUpdateRequest;
import org.openapitools.client.model.OrganizationsList200ResponseInner;
import org.openapitools.client.model.OrganizationsListAdministered200Response;
import org.openapitools.client.model.OrganizationsListAdministered200ResponseOrganizations;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponseError;
import org.openapitools.client.model.OrganizationsUpdateRequest;
import org.openapitools.client.model.SharedconnectionConnections200ResponseInner;
import org.openapitools.client.model.TeamsCreateTeamRequest;
import org.openapitools.client.model.TeamsGetUsers200Response;
import org.openapitools.client.model.TeamsListAll200ResponseInner;
import org.openapitools.client.model.TeamsListApps200ResponseInner;
import org.openapitools.client.model.TeamsUpdatePermissionsRequest;
import org.openapitools.client.model.TeamsUpdateRequest;
import java.util.UUID;
import org.openapitools.client.model.UserApiTokensList200ResponseInner;
import org.openapitools.client.model.UserApiTokensNew201Response;
import org.openapitools.client.model.UserApiTokensNewRequest;
import org.openapitools.client.model.UsersGetUserMetadata200Response;
import org.openapitools.client.model.UsersGetUserMetadataDefaultResponse;
import org.openapitools.client.model.UsersListForOrg200ResponseInner;
import org.openapitools.client.model.UsersUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appApiTokensDelete
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiTokensDeleteCall(String ownerName, String appName, String apiTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens/{api_token_id}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "api_token_id" + "}", localVarApiClient.escapeString(apiTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiTokensDeleteValidateBeforeCall(String ownerName, String appName, String apiTokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appApiTokensDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appApiTokensDelete(Async)");
        }

        // verify the required parameter 'apiTokenId' is set
        if (apiTokenId == null) {
            throw new ApiException("Missing the required parameter 'apiTokenId' when calling appApiTokensDelete(Async)");
        }

        return appApiTokensDeleteCall(ownerName, appName, apiTokenId, _callback);

    }

    /**
     * 
     * Delete the App Api Token object with the specific ID
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public void appApiTokensDelete(String ownerName, String appName, String apiTokenId) throws ApiException {
        appApiTokensDeleteWithHttpInfo(ownerName, appName, apiTokenId);
    }

    /**
     * 
     * Delete the App Api Token object with the specific ID
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appApiTokensDeleteWithHttpInfo(String ownerName, String appName, String apiTokenId) throws ApiException {
        okhttp3.Call localVarCall = appApiTokensDeleteValidateBeforeCall(ownerName, appName, apiTokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the App Api Token object with the specific ID
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiTokensDeleteAsync(String ownerName, String appName, String apiTokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiTokensDeleteValidateBeforeCall(ownerName, appName, apiTokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appApiTokensList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiTokensListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiTokensListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appApiTokensList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appApiTokensList(Async)");
        }

        return appApiTokensListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns App API tokens for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;UserApiTokensList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<UserApiTokensList200ResponseInner> appApiTokensList(String ownerName, String appName) throws ApiException {
        ApiResponse<List<UserApiTokensList200ResponseInner>> localVarResp = appApiTokensListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns App API tokens for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;UserApiTokensList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserApiTokensList200ResponseInner>> appApiTokensListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appApiTokensListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<UserApiTokensList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns App API tokens for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiTokensListAsync(String ownerName, String appName, final ApiCallback<List<UserApiTokensList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiTokensListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<UserApiTokensList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appApiTokensNew
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userApiTokensNewRequest Description of the token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiTokensNewCall(String ownerName, String appName, UserApiTokensNewRequest userApiTokensNewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userApiTokensNewRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/api_tokens"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appApiTokensNewValidateBeforeCall(String ownerName, String appName, UserApiTokensNewRequest userApiTokensNewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appApiTokensNew(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appApiTokensNew(Async)");
        }

        return appApiTokensNewCall(ownerName, appName, userApiTokensNewRequest, _callback);

    }

    /**
     * 
     * Creates a new App API token
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userApiTokensNewRequest Description of the token (optional)
     * @return UserApiTokensNew201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public UserApiTokensNew201Response appApiTokensNew(String ownerName, String appName, UserApiTokensNewRequest userApiTokensNewRequest) throws ApiException {
        ApiResponse<UserApiTokensNew201Response> localVarResp = appApiTokensNewWithHttpInfo(ownerName, appName, userApiTokensNewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new App API token
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userApiTokensNewRequest Description of the token (optional)
     * @return ApiResponse&lt;UserApiTokensNew201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserApiTokensNew201Response> appApiTokensNewWithHttpInfo(String ownerName, String appName, UserApiTokensNewRequest userApiTokensNewRequest) throws ApiException {
        okhttp3.Call localVarCall = appApiTokensNewValidateBeforeCall(ownerName, appName, userApiTokensNewRequest, null);
        Type localVarReturnType = new TypeToken<UserApiTokensNew201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new App API token
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userApiTokensNewRequest Description of the token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appApiTokensNewAsync(String ownerName, String appName, UserApiTokensNewRequest userApiTokensNewRequest, final ApiCallback<UserApiTokensNew201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appApiTokensNewValidateBeforeCall(ownerName, appName, userApiTokensNewRequest, _callback);
        Type localVarReturnType = new TypeToken<UserApiTokensNew201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appInvitationsAccept
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsAcceptCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/user/invitations/apps/{invitation_token}/accept"
            .replace("{" + "invitation_token" + "}", localVarApiClient.escapeString(invitationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appInvitationsAcceptValidateBeforeCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationToken' is set
        if (invitationToken == null) {
            throw new ApiException("Missing the required parameter 'invitationToken' when calling appInvitationsAccept(Async)");
        }

        return appInvitationsAcceptCall(invitationToken, body, _callback);

    }

    /**
     * 
     * Accepts a pending invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void appInvitationsAccept(String invitationToken, Object body) throws ApiException {
        appInvitationsAcceptWithHttpInfo(invitationToken, body);
    }

    /**
     * 
     * Accepts a pending invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appInvitationsAcceptWithHttpInfo(String invitationToken, Object body) throws ApiException {
        okhttp3.Call localVarCall = appInvitationsAcceptValidateBeforeCall(invitationToken, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Accepts a pending invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsAcceptAsync(String invitationToken, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appInvitationsAcceptValidateBeforeCall(invitationToken, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appInvitationsCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appInvitationsCreateRequest The email of the user to invite (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsCreateCall(String ownerName, String appName, AppInvitationsCreateRequest appInvitationsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appInvitationsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appInvitationsCreateValidateBeforeCall(String ownerName, String appName, AppInvitationsCreateRequest appInvitationsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appInvitationsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appInvitationsCreate(Async)");
        }

        return appInvitationsCreateCall(ownerName, appName, appInvitationsCreateRequest, _callback);

    }

    /**
     * 
     * Invites a new or existing user to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appInvitationsCreateRequest The email of the user to invite (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void appInvitationsCreate(String ownerName, String appName, AppInvitationsCreateRequest appInvitationsCreateRequest) throws ApiException {
        appInvitationsCreateWithHttpInfo(ownerName, appName, appInvitationsCreateRequest);
    }

    /**
     * 
     * Invites a new or existing user to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appInvitationsCreateRequest The email of the user to invite (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appInvitationsCreateWithHttpInfo(String ownerName, String appName, AppInvitationsCreateRequest appInvitationsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = appInvitationsCreateValidateBeforeCall(ownerName, appName, appInvitationsCreateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Invites a new or existing user to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appInvitationsCreateRequest The email of the user to invite (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsCreateAsync(String ownerName, String appName, AppInvitationsCreateRequest appInvitationsCreateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appInvitationsCreateValidateBeforeCall(ownerName, appName, appInvitationsCreateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appInvitationsCreateByEmail
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appInvitationsCreateByEmailCall(String ownerName, String appName, String userEmail, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appInvitationsCreateByEmailRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "user_email" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call appInvitationsCreateByEmailValidateBeforeCall(String ownerName, String appName, String userEmail, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appInvitationsCreateByEmail(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appInvitationsCreateByEmail(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling appInvitationsCreateByEmail(Async)");
        }

        return appInvitationsCreateByEmailCall(ownerName, appName, userEmail, appInvitationsCreateByEmailRequest, _callback);

    }

    /**
     * 
     * Invites a new or existing user to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void appInvitationsCreateByEmail(String ownerName, String appName, String userEmail, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest) throws ApiException {
        appInvitationsCreateByEmailWithHttpInfo(ownerName, appName, userEmail, appInvitationsCreateByEmailRequest);
    }

    /**
     * 
     * Invites a new or existing user to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> appInvitationsCreateByEmailWithHttpInfo(String ownerName, String appName, String userEmail, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = appInvitationsCreateByEmailValidateBeforeCall(ownerName, appName, userEmail, appInvitationsCreateByEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Invites a new or existing user to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call appInvitationsCreateByEmailAsync(String ownerName, String appName, String userEmail, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appInvitationsCreateByEmailValidateBeforeCall(ownerName, appName, userEmail, appInvitationsCreateByEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appInvitationsDelete
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsDeleteCall(String ownerName, String appName, String userEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "user_email" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appInvitationsDeleteValidateBeforeCall(String ownerName, String appName, String userEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appInvitationsDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appInvitationsDelete(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling appInvitationsDelete(Async)");
        }

        return appInvitationsDeleteCall(ownerName, appName, userEmail, _callback);

    }

    /**
     * 
     * Removes a user&#39;s invitation to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void appInvitationsDelete(String ownerName, String appName, String userEmail) throws ApiException {
        appInvitationsDeleteWithHttpInfo(ownerName, appName, userEmail);
    }

    /**
     * 
     * Removes a user&#39;s invitation to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appInvitationsDeleteWithHttpInfo(String ownerName, String appName, String userEmail) throws ApiException {
        okhttp3.Call localVarCall = appInvitationsDeleteValidateBeforeCall(ownerName, appName, userEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user&#39;s invitation to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsDeleteAsync(String ownerName, String appName, String userEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appInvitationsDeleteValidateBeforeCall(ownerName, appName, userEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appInvitationsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appInvitationsListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appInvitationsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appInvitationsList(Async)");
        }

        return appInvitationsListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the pending invitations for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AppInvitationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppInvitationsList200Response appInvitationsList(String ownerName, String appName) throws ApiException {
        ApiResponse<AppInvitationsList200Response> localVarResp = appInvitationsListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the pending invitations for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AppInvitationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppInvitationsList200Response> appInvitationsListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appInvitationsListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AppInvitationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the pending invitations for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsListAsync(String ownerName, String appName, final ApiCallback<AppInvitationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = appInvitationsListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AppInvitationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appInvitationsReject
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsRejectCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/user/invitations/apps/{invitation_token}/reject"
            .replace("{" + "invitation_token" + "}", localVarApiClient.escapeString(invitationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appInvitationsRejectValidateBeforeCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationToken' is set
        if (invitationToken == null) {
            throw new ApiException("Missing the required parameter 'invitationToken' when calling appInvitationsReject(Async)");
        }

        return appInvitationsRejectCall(invitationToken, body, _callback);

    }

    /**
     * 
     * Rejects a pending invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void appInvitationsReject(String invitationToken, Object body) throws ApiException {
        appInvitationsRejectWithHttpInfo(invitationToken, body);
    }

    /**
     * 
     * Rejects a pending invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appInvitationsRejectWithHttpInfo(String invitationToken, Object body) throws ApiException {
        okhttp3.Call localVarCall = appInvitationsRejectValidateBeforeCall(invitationToken, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Rejects a pending invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsRejectAsync(String invitationToken, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appInvitationsRejectValidateBeforeCall(invitationToken, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appInvitationsUpdatePermissions
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsUpdatePermissionsRequest The value to update the user permission in the invite. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsUpdatePermissionsCall(String ownerName, String appName, String userEmail, AppInvitationsUpdatePermissionsRequest appInvitationsUpdatePermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appInvitationsUpdatePermissionsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/invitations/{user_email}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "user_email" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appInvitationsUpdatePermissionsValidateBeforeCall(String ownerName, String appName, String userEmail, AppInvitationsUpdatePermissionsRequest appInvitationsUpdatePermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appInvitationsUpdatePermissions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appInvitationsUpdatePermissions(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling appInvitationsUpdatePermissions(Async)");
        }

        // verify the required parameter 'appInvitationsUpdatePermissionsRequest' is set
        if (appInvitationsUpdatePermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'appInvitationsUpdatePermissionsRequest' when calling appInvitationsUpdatePermissions(Async)");
        }

        return appInvitationsUpdatePermissionsCall(ownerName, appName, userEmail, appInvitationsUpdatePermissionsRequest, _callback);

    }

    /**
     * 
     * Update pending invitation permission
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsUpdatePermissionsRequest The value to update the user permission in the invite. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void appInvitationsUpdatePermissions(String ownerName, String appName, String userEmail, AppInvitationsUpdatePermissionsRequest appInvitationsUpdatePermissionsRequest) throws ApiException {
        appInvitationsUpdatePermissionsWithHttpInfo(ownerName, appName, userEmail, appInvitationsUpdatePermissionsRequest);
    }

    /**
     * 
     * Update pending invitation permission
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsUpdatePermissionsRequest The value to update the user permission in the invite. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appInvitationsUpdatePermissionsWithHttpInfo(String ownerName, String appName, String userEmail, AppInvitationsUpdatePermissionsRequest appInvitationsUpdatePermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = appInvitationsUpdatePermissionsValidateBeforeCall(ownerName, appName, userEmail, appInvitationsUpdatePermissionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update pending invitation permission
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The email of the user to invite (required)
     * @param appInvitationsUpdatePermissionsRequest The value to update the user permission in the invite. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appInvitationsUpdatePermissionsAsync(String ownerName, String appName, String userEmail, AppInvitationsUpdatePermissionsRequest appInvitationsUpdatePermissionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appInvitationsUpdatePermissionsValidateBeforeCall(ownerName, appName, userEmail, appInvitationsUpdatePermissionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsCreate
     * @param appsCreateRequest The data for the app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsCreateCall(AppsCreateRequest appsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsCreateValidateBeforeCall(AppsCreateRequest appsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appsCreateRequest' is set
        if (appsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'appsCreateRequest' when calling appsCreate(Async)");
        }

        return appsCreateCall(appsCreateRequest, _callback);

    }

    /**
     * 
     * Creates a new app and returns it to the caller
     * @param appsCreateRequest The data for the app (required)
     * @return AppsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppsList200ResponseInner appsCreate(AppsCreateRequest appsCreateRequest) throws ApiException {
        ApiResponse<AppsList200ResponseInner> localVarResp = appsCreateWithHttpInfo(appsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new app and returns it to the caller
     * @param appsCreateRequest The data for the app (required)
     * @return ApiResponse&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsList200ResponseInner> appsCreateWithHttpInfo(AppsCreateRequest appsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = appsCreateValidateBeforeCall(appsCreateRequest, null);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new app and returns it to the caller
     * @param appsCreateRequest The data for the app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsCreateAsync(AppsCreateRequest appsCreateRequest, final ApiCallback<AppsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsCreateValidateBeforeCall(appsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsCreateForOrg
     * @param orgName The organization&#39;s name (required)
     * @param appsCreateRequest The data for the app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsCreateForOrgCall(String orgName, AppsCreateRequest appsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/apps"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsCreateForOrgValidateBeforeCall(String orgName, AppsCreateRequest appsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling appsCreateForOrg(Async)");
        }

        // verify the required parameter 'appsCreateRequest' is set
        if (appsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'appsCreateRequest' when calling appsCreateForOrg(Async)");
        }

        return appsCreateForOrgCall(orgName, appsCreateRequest, _callback);

    }

    /**
     * 
     * Creates a new app for the organization and returns it to the caller
     * @param orgName The organization&#39;s name (required)
     * @param appsCreateRequest The data for the app (required)
     * @return AppsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppsList200ResponseInner appsCreateForOrg(String orgName, AppsCreateRequest appsCreateRequest) throws ApiException {
        ApiResponse<AppsList200ResponseInner> localVarResp = appsCreateForOrgWithHttpInfo(orgName, appsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new app for the organization and returns it to the caller
     * @param orgName The organization&#39;s name (required)
     * @param appsCreateRequest The data for the app (required)
     * @return ApiResponse&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsList200ResponseInner> appsCreateForOrgWithHttpInfo(String orgName, AppsCreateRequest appsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = appsCreateForOrgValidateBeforeCall(orgName, appsCreateRequest, null);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new app for the organization and returns it to the caller
     * @param orgName The organization&#39;s name (required)
     * @param appsCreateRequest The data for the app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsCreateForOrgAsync(String orgName, AppsCreateRequest appsCreateRequest, final ApiCallback<AppsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsCreateForOrgValidateBeforeCall(orgName, appsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsDelete
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDeleteCall(String appName, String ownerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}"
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsDeleteValidateBeforeCall(String appName, String ownerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsDelete(Async)");
        }

        return appsDeleteCall(appName, ownerName, _callback);

    }

    /**
     * 
     * Delete an app
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void appsDelete(String appName, String ownerName) throws ApiException {
        appsDeleteWithHttpInfo(appName, ownerName);
    }

    /**
     * 
     * Delete an app
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsDeleteWithHttpInfo(String appName, String ownerName) throws ApiException {
        okhttp3.Call localVarCall = appsDeleteValidateBeforeCall(appName, ownerName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an app
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDeleteAsync(String appName, String ownerName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsDeleteValidateBeforeCall(appName, ownerName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsDeleteAvatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDeleteAvatarCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/avatar"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsDeleteAvatarValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsDeleteAvatar(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsDeleteAvatar(Async)");
        }

        return appsDeleteAvatarCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Deletes the uploaded app avatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AppsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppsList200ResponseInner appsDeleteAvatar(String ownerName, String appName) throws ApiException {
        ApiResponse<AppsList200ResponseInner> localVarResp = appsDeleteAvatarWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the uploaded app avatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsList200ResponseInner> appsDeleteAvatarWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appsDeleteAvatarValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the uploaded app avatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDeleteAvatarAsync(String ownerName, String appName, final ApiCallback<AppsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsDeleteAvatarValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGet
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsGet(Async)");
        }

        return appsGetCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Return a specific app with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AppsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppsList200ResponseInner appsGet(String ownerName, String appName) throws ApiException {
        ApiResponse<AppsList200ResponseInner> localVarResp = appsGetWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a specific app with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsList200ResponseInner> appsGetWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appsGetValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a specific app with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetAsync(String ownerName, String appName, final ApiCallback<AppsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGetForOrgUser
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetForOrgUserCall(String orgName, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}/apps"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetForOrgUserValidateBeforeCall(String orgName, String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling appsGetForOrgUser(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling appsGetForOrgUser(Async)");
        }

        return appsGetForOrgUserCall(orgName, userName, _callback);

    }

    /**
     * 
     * Get a user apps information from an organization by name
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @return List&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppsList200ResponseInner> appsGetForOrgUser(String orgName, String userName) throws ApiException {
        ApiResponse<List<AppsList200ResponseInner>> localVarResp = appsGetForOrgUserWithHttpInfo(orgName, userName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a user apps information from an organization by name
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @return ApiResponse&lt;List&lt;AppsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppsList200ResponseInner>> appsGetForOrgUserWithHttpInfo(String orgName, String userName) throws ApiException {
        okhttp3.Call localVarCall = appsGetForOrgUserValidateBeforeCall(orgName, userName, null);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a user apps information from an organization by name
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetForOrgUserAsync(String orgName, String userName, final ApiCallback<List<AppsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetForOrgUserValidateBeforeCall(orgName, userName, _callback);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGetTeams
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetTeamsCall(String appName, String ownerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/teams"
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetTeamsValidateBeforeCall(String appName, String ownerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsGetTeams(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsGetTeams(Async)");
        }

        return appsGetTeamsCall(appName, ownerName, _callback);

    }

    /**
     * 
     * Returns the details of all teams that have access to the app.
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @return List&lt;AppsGetTeams200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppsGetTeams200ResponseInner> appsGetTeams(String appName, String ownerName) throws ApiException {
        ApiResponse<List<AppsGetTeams200ResponseInner>> localVarResp = appsGetTeamsWithHttpInfo(appName, ownerName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the details of all teams that have access to the app.
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @return ApiResponse&lt;List&lt;AppsGetTeams200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppsGetTeams200ResponseInner>> appsGetTeamsWithHttpInfo(String appName, String ownerName) throws ApiException {
        okhttp3.Call localVarCall = appsGetTeamsValidateBeforeCall(appName, ownerName, null);
        Type localVarReturnType = new TypeToken<List<AppsGetTeams200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the details of all teams that have access to the app.
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetTeamsAsync(String appName, String ownerName, final ApiCallback<List<AppsGetTeams200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetTeamsValidateBeforeCall(appName, ownerName, _callback);
        Type localVarReturnType = new TypeToken<List<AppsGetTeams200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsList
     * @param $orderBy The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListCall(String $orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderBy", $orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListValidateBeforeCall(String $orderBy, final ApiCallback _callback) throws ApiException {
        return appsListCall($orderBy, _callback);

    }

    /**
     * 
     * Returns a list of apps
     * @param $orderBy The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)
     * @return List&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppsList200ResponseInner> appsList(String $orderBy) throws ApiException {
        ApiResponse<List<AppsList200ResponseInner>> localVarResp = appsListWithHttpInfo($orderBy);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of apps
     * @param $orderBy The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)
     * @return ApiResponse&lt;List&lt;AppsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppsList200ResponseInner>> appsListWithHttpInfo(String $orderBy) throws ApiException {
        okhttp3.Call localVarCall = appsListValidateBeforeCall($orderBy, null);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of apps
     * @param $orderBy The name of the attribute by which to order the response by. By default, apps are in order of creation. All results are ordered in ascending order. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListAsync(String $orderBy, final ApiCallback<List<AppsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListValidateBeforeCall($orderBy, _callback);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListForOrg
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListForOrgCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/apps"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListForOrgValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling appsListForOrg(Async)");
        }

        return appsListForOrgCall(orgName, _callback);

    }

    /**
     * 
     * Returns a list of apps for the organization
     * @param orgName The organization&#39;s name (required)
     * @return List&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppsList200ResponseInner> appsListForOrg(String orgName) throws ApiException {
        ApiResponse<List<AppsList200ResponseInner>> localVarResp = appsListForOrgWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of apps for the organization
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;List&lt;AppsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppsList200ResponseInner>> appsListForOrgWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = appsListForOrgValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of apps for the organization
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListForOrgAsync(String orgName, final ApiCallback<List<AppsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListForOrgValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListTesters
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListTestersCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/testers"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListTestersValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsListTesters(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsListTesters(Async)");
        }

        return appsListTestersCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;AppInvitationsList200ResponseInvitedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppInvitationsList200ResponseInvitedBy> appsListTesters(String ownerName, String appName) throws ApiException {
        ApiResponse<List<AppInvitationsList200ResponseInvitedBy>> localVarResp = appsListTestersWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;AppInvitationsList200ResponseInvitedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppInvitationsList200ResponseInvitedBy>> appsListTestersWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appsListTestersValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<AppInvitationsList200ResponseInvitedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the testers associated with the app specified with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListTestersAsync(String ownerName, String appName, final ApiCallback<List<AppInvitationsList200ResponseInvitedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListTestersValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<AppInvitationsList200ResponseInvitedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsRemoveUser
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsRemoveUserCall(String ownerName, String appName, String userEmail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "user_email" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsRemoveUserValidateBeforeCall(String ownerName, String appName, String userEmail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsRemoveUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsRemoveUser(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling appsRemoveUser(Async)");
        }

        return appsRemoveUserCall(ownerName, appName, userEmail, _callback);

    }

    /**
     * 
     * Removes the user from the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void appsRemoveUser(String ownerName, String appName, String userEmail) throws ApiException {
        appsRemoveUserWithHttpInfo(ownerName, appName, userEmail);
    }

    /**
     * 
     * Removes the user from the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsRemoveUserWithHttpInfo(String ownerName, String appName, String userEmail) throws ApiException {
        okhttp3.Call localVarCall = appsRemoveUserValidateBeforeCall(ownerName, appName, userEmail, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes the user from the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsRemoveUserAsync(String ownerName, String appName, String userEmail, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsRemoveUserValidateBeforeCall(ownerName, appName, userEmail, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsTransferOwnership
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param destinationOwnerName The name of the owner (user or organization) to which the app is being transferred (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsTransferOwnershipCall(String ownerName, String appName, String destinationOwnerName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/transfer/{destination_owner_name}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "destination_owner_name" + "}", localVarApiClient.escapeString(destinationOwnerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsTransferOwnershipValidateBeforeCall(String ownerName, String appName, String destinationOwnerName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsTransferOwnership(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsTransferOwnership(Async)");
        }

        // verify the required parameter 'destinationOwnerName' is set
        if (destinationOwnerName == null) {
            throw new ApiException("Missing the required parameter 'destinationOwnerName' when calling appsTransferOwnership(Async)");
        }

        return appsTransferOwnershipCall(ownerName, appName, destinationOwnerName, body, _callback);

    }

    /**
     * 
     * Transfers ownership of an app to a different user or organization
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param destinationOwnerName The name of the owner (user or organization) to which the app is being transferred (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return AppsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppsList200ResponseInner appsTransferOwnership(String ownerName, String appName, String destinationOwnerName, Object body) throws ApiException {
        ApiResponse<AppsList200ResponseInner> localVarResp = appsTransferOwnershipWithHttpInfo(ownerName, appName, destinationOwnerName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Transfers ownership of an app to a different user or organization
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param destinationOwnerName The name of the owner (user or organization) to which the app is being transferred (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsList200ResponseInner> appsTransferOwnershipWithHttpInfo(String ownerName, String appName, String destinationOwnerName, Object body) throws ApiException {
        okhttp3.Call localVarCall = appsTransferOwnershipValidateBeforeCall(ownerName, appName, destinationOwnerName, body, null);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Transfers ownership of an app to a different user or organization
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param destinationOwnerName The name of the owner (user or organization) to which the app is being transferred (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsTransferOwnershipAsync(String ownerName, String appName, String destinationOwnerName, Object body, final ApiCallback<AppsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsTransferOwnershipValidateBeforeCall(ownerName, appName, destinationOwnerName, body, _callback);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsTransferToOrg
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsTransferToOrgCall(String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/transfer_to_org"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsTransferToOrgValidateBeforeCall(String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsTransferToOrg(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsTransferToOrg(Async)");
        }

        return appsTransferToOrgCall(ownerName, appName, body, _callback);

    }

    /**
     * 
     * Transfers ownership of an app to a new organization
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return OrganizationsListAdministered200ResponseOrganizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationsListAdministered200ResponseOrganizations appsTransferToOrg(String ownerName, String appName, Object body) throws ApiException {
        ApiResponse<OrganizationsListAdministered200ResponseOrganizations> localVarResp = appsTransferToOrgWithHttpInfo(ownerName, appName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Transfers ownership of an app to a new organization
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;OrganizationsListAdministered200ResponseOrganizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationsListAdministered200ResponseOrganizations> appsTransferToOrgWithHttpInfo(String ownerName, String appName, Object body) throws ApiException {
        okhttp3.Call localVarCall = appsTransferToOrgValidateBeforeCall(ownerName, appName, body, null);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Transfers ownership of an app to a new organization
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsTransferToOrgAsync(String ownerName, String appName, Object body, final ApiCallback<OrganizationsListAdministered200ResponseOrganizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsTransferToOrgValidateBeforeCall(ownerName, appName, body, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsUpdate
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param appsUpdateRequest The partial data for the app (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateCall(String appName, String ownerName, AppsUpdateRequest appsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}"
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsUpdateValidateBeforeCall(String appName, String ownerName, AppsUpdateRequest appsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsUpdate(Async)");
        }

        return appsUpdateCall(appName, ownerName, appsUpdateRequest, _callback);

    }

    /**
     * 
     * Partially updates a single app
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param appsUpdateRequest The partial data for the app (optional)
     * @return AppsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public AppsList200ResponseInner appsUpdate(String appName, String ownerName, AppsUpdateRequest appsUpdateRequest) throws ApiException {
        ApiResponse<AppsList200ResponseInner> localVarResp = appsUpdateWithHttpInfo(appName, ownerName, appsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Partially updates a single app
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param appsUpdateRequest The partial data for the app (optional)
     * @return ApiResponse&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsList200ResponseInner> appsUpdateWithHttpInfo(String appName, String ownerName, AppsUpdateRequest appsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = appsUpdateValidateBeforeCall(appName, ownerName, appsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partially updates a single app
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param appsUpdateRequest The partial data for the app (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateAsync(String appName, String ownerName, AppsUpdateRequest appsUpdateRequest, final ApiCallback<AppsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsUpdateValidateBeforeCall(appName, ownerName, appsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsUpdateAvatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param avatar The image for an app avatar to upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateAvatarCall(String ownerName, String appName, File avatar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/avatar"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (avatar != null) {
            localVarFormParams.put("avatar", avatar);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsUpdateAvatarValidateBeforeCall(String ownerName, String appName, File avatar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsUpdateAvatar(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsUpdateAvatar(Async)");
        }

        return appsUpdateAvatarCall(ownerName, appName, avatar, _callback);

    }

    /**
     * 
     * Sets the app avatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param avatar The image for an app avatar to upload. (optional)
     * @return AppsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppsList200ResponseInner appsUpdateAvatar(String ownerName, String appName, File avatar) throws ApiException {
        ApiResponse<AppsList200ResponseInner> localVarResp = appsUpdateAvatarWithHttpInfo(ownerName, appName, avatar);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the app avatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param avatar The image for an app avatar to upload. (optional)
     * @return ApiResponse&lt;AppsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppsList200ResponseInner> appsUpdateAvatarWithHttpInfo(String ownerName, String appName, File avatar) throws ApiException {
        okhttp3.Call localVarCall = appsUpdateAvatarValidateBeforeCall(ownerName, appName, avatar, null);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the app avatar
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param avatar The image for an app avatar to upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateAvatarAsync(String ownerName, String appName, File avatar, final ApiCallback<AppsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsUpdateAvatarValidateBeforeCall(ownerName, appName, avatar, _callback);
        Type localVarReturnType = new TypeToken<AppsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsUpdateUserPermissions
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to patch (required)
     * @param appsUpdateUserPermissionsRequest The value to update the user permission for the app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateUserPermissionsCall(String ownerName, String appName, String userEmail, AppsUpdateUserPermissionsRequest appsUpdateUserPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appsUpdateUserPermissionsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users/{user_email}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "user_email" + "}", localVarApiClient.escapeString(userEmail.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsUpdateUserPermissionsValidateBeforeCall(String ownerName, String appName, String userEmail, AppsUpdateUserPermissionsRequest appsUpdateUserPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appsUpdateUserPermissions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appsUpdateUserPermissions(Async)");
        }

        // verify the required parameter 'userEmail' is set
        if (userEmail == null) {
            throw new ApiException("Missing the required parameter 'userEmail' when calling appsUpdateUserPermissions(Async)");
        }

        // verify the required parameter 'appsUpdateUserPermissionsRequest' is set
        if (appsUpdateUserPermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'appsUpdateUserPermissionsRequest' when calling appsUpdateUserPermissions(Async)");
        }

        return appsUpdateUserPermissionsCall(ownerName, appName, userEmail, appsUpdateUserPermissionsRequest, _callback);

    }

    /**
     * 
     * Update user permission for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to patch (required)
     * @param appsUpdateUserPermissionsRequest The value to update the user permission for the app. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public void appsUpdateUserPermissions(String ownerName, String appName, String userEmail, AppsUpdateUserPermissionsRequest appsUpdateUserPermissionsRequest) throws ApiException {
        appsUpdateUserPermissionsWithHttpInfo(ownerName, appName, userEmail, appsUpdateUserPermissionsRequest);
    }

    /**
     * 
     * Update user permission for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to patch (required)
     * @param appsUpdateUserPermissionsRequest The value to update the user permission for the app. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> appsUpdateUserPermissionsWithHttpInfo(String ownerName, String appName, String userEmail, AppsUpdateUserPermissionsRequest appsUpdateUserPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = appsUpdateUserPermissionsValidateBeforeCall(ownerName, appName, userEmail, appsUpdateUserPermissionsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update user permission for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param userEmail The user email of the user to patch (required)
     * @param appsUpdateUserPermissionsRequest The value to update the user permission for the app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateUserPermissionsAsync(String ownerName, String appName, String userEmail, AppsUpdateUserPermissionsRequest appsUpdateUserPermissionsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsUpdateUserPermissionsValidateBeforeCall(ownerName, appName, userEmail, appsUpdateUserPermissionsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureSubscriptionDeleteForApp
     * @param azureSubscriptionId The unique ID (UUID) of the azure subscription (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionDeleteForAppCall(UUID azureSubscriptionId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions/{azure_subscription_id}"
            .replace("{" + "azure_subscription_id" + "}", localVarApiClient.escapeString(azureSubscriptionId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureSubscriptionDeleteForAppValidateBeforeCall(UUID azureSubscriptionId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'azureSubscriptionId' is set
        if (azureSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'azureSubscriptionId' when calling azureSubscriptionDeleteForApp(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling azureSubscriptionDeleteForApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling azureSubscriptionDeleteForApp(Async)");
        }

        return azureSubscriptionDeleteForAppCall(azureSubscriptionId, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete the azure subscriptions for the app
     * @param azureSubscriptionId The unique ID (UUID) of the azure subscription (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void azureSubscriptionDeleteForApp(UUID azureSubscriptionId, String ownerName, String appName) throws ApiException {
        azureSubscriptionDeleteForAppWithHttpInfo(azureSubscriptionId, ownerName, appName);
    }

    /**
     * 
     * Delete the azure subscriptions for the app
     * @param azureSubscriptionId The unique ID (UUID) of the azure subscription (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> azureSubscriptionDeleteForAppWithHttpInfo(UUID azureSubscriptionId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = azureSubscriptionDeleteForAppValidateBeforeCall(azureSubscriptionId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the azure subscriptions for the app
     * @param azureSubscriptionId The unique ID (UUID) of the azure subscription (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionDeleteForAppAsync(UUID azureSubscriptionId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureSubscriptionDeleteForAppValidateBeforeCall(azureSubscriptionId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureSubscriptionLinkForApp
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param azureSubscriptionLinkForAppRequest The azure subscription data needed to be link to the app. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionLinkForAppCall(String ownerName, String appName, AzureSubscriptionLinkForAppRequest azureSubscriptionLinkForAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = azureSubscriptionLinkForAppRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureSubscriptionLinkForAppValidateBeforeCall(String ownerName, String appName, AzureSubscriptionLinkForAppRequest azureSubscriptionLinkForAppRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling azureSubscriptionLinkForApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling azureSubscriptionLinkForApp(Async)");
        }

        // verify the required parameter 'azureSubscriptionLinkForAppRequest' is set
        if (azureSubscriptionLinkForAppRequest == null) {
            throw new ApiException("Missing the required parameter 'azureSubscriptionLinkForAppRequest' when calling azureSubscriptionLinkForApp(Async)");
        }

        return azureSubscriptionLinkForAppCall(ownerName, appName, azureSubscriptionLinkForAppRequest, _callback);

    }

    /**
     * 
     * Link azure subscription to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param azureSubscriptionLinkForAppRequest The azure subscription data needed to be link to the app. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void azureSubscriptionLinkForApp(String ownerName, String appName, AzureSubscriptionLinkForAppRequest azureSubscriptionLinkForAppRequest) throws ApiException {
        azureSubscriptionLinkForAppWithHttpInfo(ownerName, appName, azureSubscriptionLinkForAppRequest);
    }

    /**
     * 
     * Link azure subscription to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param azureSubscriptionLinkForAppRequest The azure subscription data needed to be link to the app. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> azureSubscriptionLinkForAppWithHttpInfo(String ownerName, String appName, AzureSubscriptionLinkForAppRequest azureSubscriptionLinkForAppRequest) throws ApiException {
        okhttp3.Call localVarCall = azureSubscriptionLinkForAppValidateBeforeCall(ownerName, appName, azureSubscriptionLinkForAppRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Link azure subscription to an app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param azureSubscriptionLinkForAppRequest The azure subscription data needed to be link to the app. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionLinkForAppAsync(String ownerName, String appName, AzureSubscriptionLinkForAppRequest azureSubscriptionLinkForAppRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureSubscriptionLinkForAppValidateBeforeCall(ownerName, appName, azureSubscriptionLinkForAppRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureSubscriptionListForApp
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionListForAppCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/azure_subscriptions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureSubscriptionListForAppValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling azureSubscriptionListForApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling azureSubscriptionListForApp(Async)");
        }

        return azureSubscriptionListForAppCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns a list of azure subscriptions for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;AppsList200ResponseInnerAllOfAzureSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppsList200ResponseInnerAllOfAzureSubscription> azureSubscriptionListForApp(String ownerName, String appName) throws ApiException {
        ApiResponse<List<AppsList200ResponseInnerAllOfAzureSubscription>> localVarResp = azureSubscriptionListForAppWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of azure subscriptions for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;AppsList200ResponseInnerAllOfAzureSubscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppsList200ResponseInnerAllOfAzureSubscription>> azureSubscriptionListForAppWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = azureSubscriptionListForAppValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInnerAllOfAzureSubscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of azure subscriptions for the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionListForAppAsync(String ownerName, String appName, final ApiCallback<List<AppsList200ResponseInnerAllOfAzureSubscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureSubscriptionListForAppValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInnerAllOfAzureSubscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureSubscriptionListForOrg
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionListForOrgCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/azure_subscriptions"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureSubscriptionListForOrgValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling azureSubscriptionListForOrg(Async)");
        }

        return azureSubscriptionListForOrgCall(orgName, _callback);

    }

    /**
     * 
     * Returns a list of azure subscriptions for the organization
     * @param orgName The organization&#39;s name (required)
     * @return List&lt;AppsList200ResponseInnerAllOfAzureSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppsList200ResponseInnerAllOfAzureSubscription> azureSubscriptionListForOrg(String orgName) throws ApiException {
        ApiResponse<List<AppsList200ResponseInnerAllOfAzureSubscription>> localVarResp = azureSubscriptionListForOrgWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of azure subscriptions for the organization
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;List&lt;AppsList200ResponseInnerAllOfAzureSubscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppsList200ResponseInnerAllOfAzureSubscription>> azureSubscriptionListForOrgWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = azureSubscriptionListForOrgValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInnerAllOfAzureSubscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of azure subscriptions for the organization
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionListForOrgAsync(String orgName, final ApiCallback<List<AppsList200ResponseInnerAllOfAzureSubscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureSubscriptionListForOrgValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInnerAllOfAzureSubscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureSubscriptionListForUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionListForUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/azure_subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureSubscriptionListForUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return azureSubscriptionListForUserCall(_callback);

    }

    /**
     * 
     * Returns a list of azure subscriptions for the user
     * @return List&lt;AppsList200ResponseInnerAllOfAzureSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public List<AppsList200ResponseInnerAllOfAzureSubscription> azureSubscriptionListForUser() throws ApiException {
        ApiResponse<List<AppsList200ResponseInnerAllOfAzureSubscription>> localVarResp = azureSubscriptionListForUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of azure subscriptions for the user
     * @return ApiResponse&lt;List&lt;AppsList200ResponseInnerAllOfAzureSubscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppsList200ResponseInnerAllOfAzureSubscription>> azureSubscriptionListForUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = azureSubscriptionListForUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInnerAllOfAzureSubscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of azure subscriptions for the user
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureSubscriptionListForUserAsync(final ApiCallback<List<AppsList200ResponseInnerAllOfAzureSubscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureSubscriptionListForUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AppsList200ResponseInnerAllOfAzureSubscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupInvitationsAcceptAll
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupInvitationsAcceptAllCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/user/invitations/distribution_groups/accept";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupInvitationsAcceptAllValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return distributionGroupInvitationsAcceptAllCall(body, _callback);

    }

    /**
     * 
     * Accepts all pending invitations to distribution groups for the specified user
     * @param body allow empty body for custom http-client lib (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupInvitationsAcceptAll(Object body) throws ApiException {
        distributionGroupInvitationsAcceptAllWithHttpInfo(body);
    }

    /**
     * 
     * Accepts all pending invitations to distribution groups for the specified user
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupInvitationsAcceptAllWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupInvitationsAcceptAllValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Accepts all pending invitations to distribution groups for the specified user
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupInvitationsAcceptAllAsync(Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupInvitationsAcceptAllValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsAddApps
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddAppsRequest The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsAddAppsCall(String orgName, String distributionGroupName, DistributionGroupsAddAppsRequest distributionGroupsAddAppsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddAppsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsAddAppsValidateBeforeCall(String orgName, String distributionGroupName, DistributionGroupsAddAppsRequest distributionGroupsAddAppsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsAddApps(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsAddApps(Async)");
        }

        // verify the required parameter 'distributionGroupsAddAppsRequest' is set
        if (distributionGroupsAddAppsRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddAppsRequest' when calling distributionGroupsAddApps(Async)");
        }

        return distributionGroupsAddAppsCall(orgName, distributionGroupName, distributionGroupsAddAppsRequest, _callback);

    }

    /**
     * 
     * Add apps to distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddAppsRequest The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupsAddApps(String orgName, String distributionGroupName, DistributionGroupsAddAppsRequest distributionGroupsAddAppsRequest) throws ApiException {
        distributionGroupsAddAppsWithHttpInfo(orgName, distributionGroupName, distributionGroupsAddAppsRequest);
    }

    /**
     * 
     * Add apps to distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddAppsRequest The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupsAddAppsWithHttpInfo(String orgName, String distributionGroupName, DistributionGroupsAddAppsRequest distributionGroupsAddAppsRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsAddAppsValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddAppsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add apps to distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddAppsRequest The name of the apps to be added to the distribution group. The apps have to be owned by the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsAddAppsAsync(String orgName, String distributionGroupName, DistributionGroupsAddAppsRequest distributionGroupsAddAppsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsAddAppsValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddAppsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsAddUser
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsAddUserCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddUserRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsAddUserValidateBeforeCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsAddUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsAddUser(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsAddUser(Async)");
        }

        // verify the required parameter 'distributionGroupsAddUserRequest' is set
        if (distributionGroupsAddUserRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsAddUser(Async)");
        }

        return distributionGroupsAddUserCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, _callback);

    }

    /**
     * 
     * Adds the members to the specified distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @return List&lt;DistributionGroupsAddUser200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsAddUser200ResponseInner> distributionGroupsAddUser(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        ApiResponse<List<DistributionGroupsAddUser200ResponseInner>> localVarResp = distributionGroupsAddUserWithHttpInfo(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds the members to the specified distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsAddUser200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsAddUser200ResponseInner>> distributionGroupsAddUserWithHttpInfo(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsAddUserValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsAddUser200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds the members to the specified distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsAddUserAsync(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback<List<DistributionGroupsAddUser200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsAddUserValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsAddUser200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsAddUsersForOrg
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest list of user email addresses that should get added as members to the specified group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsAddUsersForOrgCall(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddUserRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsAddUsersForOrgValidateBeforeCall(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsAddUsersForOrg(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsAddUsersForOrg(Async)");
        }

        // verify the required parameter 'distributionGroupsAddUserRequest' is set
        if (distributionGroupsAddUserRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsAddUsersForOrg(Async)");
        }

        return distributionGroupsAddUsersForOrgCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, _callback);

    }

    /**
     * 
     * Accepts an array of user email addresses to get added to the specified group
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest list of user email addresses that should get added as members to the specified group (required)
     * @return List&lt;DistributionGroupsAddUser200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsAddUser200ResponseInner> distributionGroupsAddUsersForOrg(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        ApiResponse<List<DistributionGroupsAddUser200ResponseInner>> localVarResp = distributionGroupsAddUsersForOrgWithHttpInfo(orgName, distributionGroupName, distributionGroupsAddUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Accepts an array of user email addresses to get added to the specified group
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest list of user email addresses that should get added as members to the specified group (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsAddUser200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsAddUser200ResponseInner>> distributionGroupsAddUsersForOrgWithHttpInfo(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsAddUsersForOrgValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsAddUser200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accepts an array of user email addresses to get added to the specified group
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest list of user email addresses that should get added as members to the specified group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsAddUsersForOrgAsync(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback<List<DistributionGroupsAddUser200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsAddUsersForOrgValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsAddUser200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsBulkDeleteApps
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsBulkDeleteAppsRequest The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsBulkDeleteAppsCall(String orgName, String distributionGroupName, DistributionGroupsBulkDeleteAppsRequest distributionGroupsBulkDeleteAppsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsBulkDeleteAppsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps/bulk_delete"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsBulkDeleteAppsValidateBeforeCall(String orgName, String distributionGroupName, DistributionGroupsBulkDeleteAppsRequest distributionGroupsBulkDeleteAppsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsBulkDeleteApps(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsBulkDeleteApps(Async)");
        }

        // verify the required parameter 'distributionGroupsBulkDeleteAppsRequest' is set
        if (distributionGroupsBulkDeleteAppsRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsBulkDeleteAppsRequest' when calling distributionGroupsBulkDeleteApps(Async)");
        }

        return distributionGroupsBulkDeleteAppsCall(orgName, distributionGroupName, distributionGroupsBulkDeleteAppsRequest, _callback);

    }

    /**
     * 
     * Delete apps from distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsBulkDeleteAppsRequest The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupsBulkDeleteApps(String orgName, String distributionGroupName, DistributionGroupsBulkDeleteAppsRequest distributionGroupsBulkDeleteAppsRequest) throws ApiException {
        distributionGroupsBulkDeleteAppsWithHttpInfo(orgName, distributionGroupName, distributionGroupsBulkDeleteAppsRequest);
    }

    /**
     * 
     * Delete apps from distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsBulkDeleteAppsRequest The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupsBulkDeleteAppsWithHttpInfo(String orgName, String distributionGroupName, DistributionGroupsBulkDeleteAppsRequest distributionGroupsBulkDeleteAppsRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsBulkDeleteAppsValidateBeforeCall(orgName, distributionGroupName, distributionGroupsBulkDeleteAppsRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete apps from distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsBulkDeleteAppsRequest The name of the apps to be deleted from the distribution group. The apps have to be owned by the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsBulkDeleteAppsAsync(String orgName, String distributionGroupName, DistributionGroupsBulkDeleteAppsRequest distributionGroupsBulkDeleteAppsRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsBulkDeleteAppsValidateBeforeCall(orgName, distributionGroupName, distributionGroupsBulkDeleteAppsRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsBulkDeleteUsers
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsBulkDeleteUsersCall(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddUserRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members/bulk_delete"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsBulkDeleteUsersValidateBeforeCall(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsBulkDeleteUsers(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsBulkDeleteUsers(Async)");
        }

        // verify the required parameter 'distributionGroupsAddUserRequest' is set
        if (distributionGroupsAddUserRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsBulkDeleteUsers(Async)");
        }

        return distributionGroupsBulkDeleteUsersCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, _callback);

    }

    /**
     * 
     * Delete testers from distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupsBulkDeleteUsers(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        distributionGroupsBulkDeleteUsersWithHttpInfo(orgName, distributionGroupName, distributionGroupsAddUserRequest);
    }

    /**
     * 
     * Delete testers from distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupsBulkDeleteUsersWithHttpInfo(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsBulkDeleteUsersValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete testers from distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsBulkDeleteUsersAsync(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsBulkDeleteUsersValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsCreateCall(String ownerName, String appName, DistributionGroupsCreateRequest distributionGroupsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsCreateValidateBeforeCall(String ownerName, String appName, DistributionGroupsCreateRequest distributionGroupsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsCreate(Async)");
        }

        // verify the required parameter 'distributionGroupsCreateRequest' is set
        if (distributionGroupsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsCreateRequest' when calling distributionGroupsCreate(Async)");
        }

        return distributionGroupsCreateCall(ownerName, appName, distributionGroupsCreateRequest, _callback);

    }

    /**
     * 
     * Creates a new distribution group and returns it to the caller
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @return DistributionGroupsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DistributionGroupsList200ResponseInner distributionGroupsCreate(String ownerName, String appName, DistributionGroupsCreateRequest distributionGroupsCreateRequest) throws ApiException {
        ApiResponse<DistributionGroupsList200ResponseInner> localVarResp = distributionGroupsCreateWithHttpInfo(ownerName, appName, distributionGroupsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new distribution group and returns it to the caller
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @return ApiResponse&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistributionGroupsList200ResponseInner> distributionGroupsCreateWithHttpInfo(String ownerName, String appName, DistributionGroupsCreateRequest distributionGroupsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsCreateValidateBeforeCall(ownerName, appName, distributionGroupsCreateRequest, null);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new distribution group and returns it to the caller
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsCreateAsync(String ownerName, String appName, DistributionGroupsCreateRequest distributionGroupsCreateRequest, final ApiCallback<DistributionGroupsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsCreateValidateBeforeCall(ownerName, appName, distributionGroupsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsCreateForOrg
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsCreateForOrgCall(String orgName, DistributionGroupsCreateRequest distributionGroupsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsCreateForOrgValidateBeforeCall(String orgName, DistributionGroupsCreateRequest distributionGroupsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsCreateForOrg(Async)");
        }

        // verify the required parameter 'distributionGroupsCreateRequest' is set
        if (distributionGroupsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsCreateRequest' when calling distributionGroupsCreateForOrg(Async)");
        }

        return distributionGroupsCreateForOrgCall(orgName, distributionGroupsCreateRequest, _callback);

    }

    /**
     * 
     * Creates a disribution goup which can be shared across apps under an organization
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @return DistributionGroupsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DistributionGroupsList200ResponseInner distributionGroupsCreateForOrg(String orgName, DistributionGroupsCreateRequest distributionGroupsCreateRequest) throws ApiException {
        ApiResponse<DistributionGroupsList200ResponseInner> localVarResp = distributionGroupsCreateForOrgWithHttpInfo(orgName, distributionGroupsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a disribution goup which can be shared across apps under an organization
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @return ApiResponse&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistributionGroupsList200ResponseInner> distributionGroupsCreateForOrgWithHttpInfo(String orgName, DistributionGroupsCreateRequest distributionGroupsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsCreateForOrgValidateBeforeCall(orgName, distributionGroupsCreateRequest, null);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a disribution goup which can be shared across apps under an organization
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupsCreateRequest The attributes to update for the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsCreateForOrgAsync(String orgName, DistributionGroupsCreateRequest distributionGroupsCreateRequest, final ApiCallback<DistributionGroupsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsCreateForOrgValidateBeforeCall(orgName, distributionGroupsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsDelete
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsDeleteCall(String appName, String ownerName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}"
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsDeleteValidateBeforeCall(String appName, String ownerName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsDelete(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsDelete(Async)");
        }

        return distributionGroupsDeleteCall(appName, ownerName, distributionGroupName, _callback);

    }

    /**
     * 
     * Deletes a distribution group
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupsDelete(String appName, String ownerName, String distributionGroupName) throws ApiException {
        distributionGroupsDeleteWithHttpInfo(appName, ownerName, distributionGroupName);
    }

    /**
     * 
     * Deletes a distribution group
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupsDeleteWithHttpInfo(String appName, String ownerName, String distributionGroupName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsDeleteValidateBeforeCall(appName, ownerName, distributionGroupName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a distribution group
     * @param appName The name of the application (required)
     * @param ownerName The name of the owner (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsDeleteAsync(String appName, String ownerName, String distributionGroupName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsDeleteValidateBeforeCall(appName, ownerName, distributionGroupName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsDeleteForOrg
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsDeleteForOrgCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsDeleteForOrgValidateBeforeCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsDeleteForOrg(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsDeleteForOrg(Async)");
        }

        return distributionGroupsDeleteForOrgCall(orgName, distributionGroupName, _callback);

    }

    /**
     * 
     * Deletes a single distribution group from an org with a given distribution group name
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupsDeleteForOrg(String orgName, String distributionGroupName) throws ApiException {
        distributionGroupsDeleteForOrgWithHttpInfo(orgName, distributionGroupName);
    }

    /**
     * 
     * Deletes a single distribution group from an org with a given distribution group name
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupsDeleteForOrgWithHttpInfo(String orgName, String distributionGroupName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsDeleteForOrgValidateBeforeCall(orgName, distributionGroupName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a single distribution group from an org with a given distribution group name
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsDeleteForOrgAsync(String orgName, String distributionGroupName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsDeleteForOrgValidateBeforeCall(orgName, distributionGroupName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsDetailsForOrg
     * @param orgName The organization&#39;s name (required)
     * @param appsLimit The max number of apps to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsDetailsForOrgCall(String orgName, BigDecimal appsLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups_details"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apps_limit", appsLimit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsDetailsForOrgValidateBeforeCall(String orgName, BigDecimal appsLimit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsDetailsForOrg(Async)");
        }

        return distributionGroupsDetailsForOrgCall(orgName, appsLimit, _callback);

    }

    /**
     * 
     * Returns a list of distribution groups with details for an organization
     * @param orgName The organization&#39;s name (required)
     * @param appsLimit The max number of apps to include in the response (optional)
     * @return List&lt;DistributionGroupsDetailsForOrg200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsDetailsForOrg200ResponseInner> distributionGroupsDetailsForOrg(String orgName, BigDecimal appsLimit) throws ApiException {
        ApiResponse<List<DistributionGroupsDetailsForOrg200ResponseInner>> localVarResp = distributionGroupsDetailsForOrgWithHttpInfo(orgName, appsLimit);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of distribution groups with details for an organization
     * @param orgName The organization&#39;s name (required)
     * @param appsLimit The max number of apps to include in the response (optional)
     * @return ApiResponse&lt;List&lt;DistributionGroupsDetailsForOrg200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsDetailsForOrg200ResponseInner>> distributionGroupsDetailsForOrgWithHttpInfo(String orgName, BigDecimal appsLimit) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsDetailsForOrgValidateBeforeCall(orgName, appsLimit, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsDetailsForOrg200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of distribution groups with details for an organization
     * @param orgName The organization&#39;s name (required)
     * @param appsLimit The max number of apps to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsDetailsForOrgAsync(String orgName, BigDecimal appsLimit, final ApiCallback<List<DistributionGroupsDetailsForOrg200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsDetailsForOrgValidateBeforeCall(orgName, appsLimit, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsDetailsForOrg200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsGet
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsGetCall(String ownerName, String appName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsGetValidateBeforeCall(String ownerName, String appName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsGet(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsGet(Async)");
        }

        return distributionGroupsGetCall(ownerName, appName, distributionGroupName, _callback);

    }

    /**
     * 
     * Returns a single distribution group for a given distribution group name
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return DistributionGroupsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DistributionGroupsList200ResponseInner distributionGroupsGet(String ownerName, String appName, String distributionGroupName) throws ApiException {
        ApiResponse<DistributionGroupsList200ResponseInner> localVarResp = distributionGroupsGetWithHttpInfo(ownerName, appName, distributionGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a single distribution group for a given distribution group name
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return ApiResponse&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistributionGroupsList200ResponseInner> distributionGroupsGetWithHttpInfo(String ownerName, String appName, String distributionGroupName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsGetValidateBeforeCall(ownerName, appName, distributionGroupName, null);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a single distribution group for a given distribution group name
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsGetAsync(String ownerName, String appName, String distributionGroupName, final ApiCallback<DistributionGroupsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsGetValidateBeforeCall(ownerName, appName, distributionGroupName, _callback);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsGetApps
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsGetAppsCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/apps"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsGetAppsValidateBeforeCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsGetApps(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsGetApps(Async)");
        }

        return distributionGroupsGetAppsCall(orgName, distributionGroupName, _callback);

    }

    /**
     * 
     * Get apps from a distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return List&lt;DistributionGroupsGetApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsGetApps200ResponseInner> distributionGroupsGetApps(String orgName, String distributionGroupName) throws ApiException {
        ApiResponse<List<DistributionGroupsGetApps200ResponseInner>> localVarResp = distributionGroupsGetAppsWithHttpInfo(orgName, distributionGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get apps from a distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsGetApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsGetApps200ResponseInner>> distributionGroupsGetAppsWithHttpInfo(String orgName, String distributionGroupName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsGetAppsValidateBeforeCall(orgName, distributionGroupName, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsGetApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get apps from a distribution group in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsGetAppsAsync(String orgName, String distributionGroupName, final ApiCallback<List<DistributionGroupsGetApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsGetAppsValidateBeforeCall(orgName, distributionGroupName, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsGetApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsGetForOrg
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsGetForOrgCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsGetForOrgValidateBeforeCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsGetForOrg(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsGetForOrg(Async)");
        }

        return distributionGroupsGetForOrgCall(orgName, distributionGroupName, _callback);

    }

    /**
     * 
     * Returns a single distribution group in org for a given distribution group name
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return DistributionGroupsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DistributionGroupsList200ResponseInner distributionGroupsGetForOrg(String orgName, String distributionGroupName) throws ApiException {
        ApiResponse<DistributionGroupsList200ResponseInner> localVarResp = distributionGroupsGetForOrgWithHttpInfo(orgName, distributionGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a single distribution group in org for a given distribution group name
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return ApiResponse&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistributionGroupsList200ResponseInner> distributionGroupsGetForOrgWithHttpInfo(String orgName, String distributionGroupName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsGetForOrgValidateBeforeCall(orgName, distributionGroupName, null);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a single distribution group in org for a given distribution group name
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsGetForOrgAsync(String orgName, String distributionGroupName, final ApiCallback<DistributionGroupsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsGetForOrgValidateBeforeCall(orgName, distributionGroupName, _callback);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsList(Async)");
        }

        return distributionGroupsListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns a list of distribution groups in the app specified
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsList200ResponseInner> distributionGroupsList(String ownerName, String appName) throws ApiException {
        ApiResponse<List<DistributionGroupsList200ResponseInner>> localVarResp = distributionGroupsListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of distribution groups in the app specified
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsList200ResponseInner>> distributionGroupsListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of distribution groups in the app specified
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListAsync(String ownerName, String appName, final ApiCallback<List<DistributionGroupsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsListAllTestersForOrg
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListAllTestersForOrgCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/testers"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsListAllTestersForOrgValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsListAllTestersForOrg(Async)");
        }

        return distributionGroupsListAllTestersForOrgCall(orgName, _callback);

    }

    /**
     * 
     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org
     * @param orgName The organization&#39;s name (required)
     * @return List&lt;DistributionGroupsListAllTestersForOrg200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsListAllTestersForOrg200ResponseInner> distributionGroupsListAllTestersForOrg(String orgName) throws ApiException {
        ApiResponse<List<DistributionGroupsListAllTestersForOrg200ResponseInner>> localVarResp = distributionGroupsListAllTestersForOrgWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsListAllTestersForOrg200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsListAllTestersForOrg200ResponseInner>> distributionGroupsListAllTestersForOrgWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsListAllTestersForOrgValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsListAllTestersForOrg200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a unique list of users including the whole organization members plus testers in any shared group of that org
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListAllTestersForOrgAsync(String orgName, final ApiCallback<List<DistributionGroupsListAllTestersForOrg200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsListAllTestersForOrgValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsListAllTestersForOrg200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsListForOrg
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListForOrgCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsListForOrgValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsListForOrg(Async)");
        }

        return distributionGroupsListForOrgCall(orgName, _callback);

    }

    /**
     * 
     * Returns a list of distribution groups in the org specified
     * @param orgName The organization&#39;s name (required)
     * @return List&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsList200ResponseInner> distributionGroupsListForOrg(String orgName) throws ApiException {
        ApiResponse<List<DistributionGroupsList200ResponseInner>> localVarResp = distributionGroupsListForOrgWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of distribution groups in the org specified
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsList200ResponseInner>> distributionGroupsListForOrgWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsListForOrgValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of distribution groups in the org specified
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListForOrgAsync(String orgName, final ApiCallback<List<DistributionGroupsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsListForOrgValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsListUsers
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param excludePendingInvitations Whether to exclude pending invitations in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListUsersCall(String ownerName, String appName, String distributionGroupName, Boolean excludePendingInvitations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (excludePendingInvitations != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_pending_invitations", excludePendingInvitations));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsListUsersValidateBeforeCall(String ownerName, String appName, String distributionGroupName, Boolean excludePendingInvitations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsListUsers(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsListUsers(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsListUsers(Async)");
        }

        return distributionGroupsListUsersCall(ownerName, appName, distributionGroupName, excludePendingInvitations, _callback);

    }

    /**
     * 
     * Returns a list of member details in the distribution group specified
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param excludePendingInvitations Whether to exclude pending invitations in the response (optional)
     * @return List&lt;DistributionGroupsListUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsListUsers200ResponseInner> distributionGroupsListUsers(String ownerName, String appName, String distributionGroupName, Boolean excludePendingInvitations) throws ApiException {
        ApiResponse<List<DistributionGroupsListUsers200ResponseInner>> localVarResp = distributionGroupsListUsersWithHttpInfo(ownerName, appName, distributionGroupName, excludePendingInvitations);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of member details in the distribution group specified
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param excludePendingInvitations Whether to exclude pending invitations in the response (optional)
     * @return ApiResponse&lt;List&lt;DistributionGroupsListUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsListUsers200ResponseInner>> distributionGroupsListUsersWithHttpInfo(String ownerName, String appName, String distributionGroupName, Boolean excludePendingInvitations) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsListUsersValidateBeforeCall(ownerName, appName, distributionGroupName, excludePendingInvitations, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsListUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of member details in the distribution group specified
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param excludePendingInvitations Whether to exclude pending invitations in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListUsersAsync(String ownerName, String appName, String distributionGroupName, Boolean excludePendingInvitations, final ApiCallback<List<DistributionGroupsListUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsListUsersValidateBeforeCall(ownerName, appName, distributionGroupName, excludePendingInvitations, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsListUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsListUsersForOrg
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListUsersForOrgCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/members"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsListUsersForOrgValidateBeforeCall(String orgName, String distributionGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsListUsersForOrg(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsListUsersForOrg(Async)");
        }

        return distributionGroupsListUsersForOrgCall(orgName, distributionGroupName, _callback);

    }

    /**
     * 
     * Returns a list of member in the distribution group specified
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return List&lt;DistributionGroupsListUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsListUsers200ResponseInner> distributionGroupsListUsersForOrg(String orgName, String distributionGroupName) throws ApiException {
        ApiResponse<List<DistributionGroupsListUsers200ResponseInner>> localVarResp = distributionGroupsListUsersForOrgWithHttpInfo(orgName, distributionGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of member in the distribution group specified
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsListUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsListUsers200ResponseInner>> distributionGroupsListUsersForOrgWithHttpInfo(String orgName, String distributionGroupName) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsListUsersForOrgValidateBeforeCall(orgName, distributionGroupName, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsListUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of member in the distribution group specified
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsListUsersForOrgAsync(String orgName, String distributionGroupName, final ApiCallback<List<DistributionGroupsListUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsListUsersForOrgValidateBeforeCall(orgName, distributionGroupName, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsListUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsPatchForOrg
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsPatchForOrgCall(String orgName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsPatchForOrgValidateBeforeCall(String orgName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsPatchForOrg(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsPatchForOrg(Async)");
        }

        return distributionGroupsPatchForOrgCall(orgName, distributionGroupName, distributionGroupsUpdateRequest, _callback);

    }

    /**
     * 
     * Update one given distribution group name in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (optional)
     * @return DistributionGroupsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DistributionGroupsList200ResponseInner distributionGroupsPatchForOrg(String orgName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest) throws ApiException {
        ApiResponse<DistributionGroupsList200ResponseInner> localVarResp = distributionGroupsPatchForOrgWithHttpInfo(orgName, distributionGroupName, distributionGroupsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update one given distribution group name in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (optional)
     * @return ApiResponse&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistributionGroupsList200ResponseInner> distributionGroupsPatchForOrgWithHttpInfo(String orgName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsPatchForOrgValidateBeforeCall(orgName, distributionGroupName, distributionGroupsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update one given distribution group name in an org
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsPatchForOrgAsync(String orgName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest, final ApiCallback<DistributionGroupsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsPatchForOrgValidateBeforeCall(orgName, distributionGroupName, distributionGroupsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsRemoveUser
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsRemoveUserCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddUserRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/members/bulk_delete"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsRemoveUserValidateBeforeCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsRemoveUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsRemoveUser(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsRemoveUser(Async)");
        }

        // verify the required parameter 'distributionGroupsAddUserRequest' is set
        if (distributionGroupsAddUserRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsRemoveUser(Async)");
        }

        return distributionGroupsRemoveUserCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, _callback);

    }

    /**
     * 
     * Remove the users from the distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @return List&lt;DistributionGroupsRemoveUser200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<DistributionGroupsRemoveUser200ResponseInner> distributionGroupsRemoveUser(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        ApiResponse<List<DistributionGroupsRemoveUser200ResponseInner>> localVarResp = distributionGroupsRemoveUserWithHttpInfo(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove the users from the distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @return ApiResponse&lt;List&lt;DistributionGroupsRemoveUser200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DistributionGroupsRemoveUser200ResponseInner>> distributionGroupsRemoveUserWithHttpInfo(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsRemoveUserValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, null);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsRemoveUser200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove the users from the distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsRemoveUserAsync(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback<List<DistributionGroupsRemoveUser200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsRemoveUserValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, _callback);
        Type localVarReturnType = new TypeToken<List<DistributionGroupsRemoveUser200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsResendInvite
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsResendInviteCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddUserRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/resend_invite"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsResendInviteValidateBeforeCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsResendInvite(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsResendInvite(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsResendInvite(Async)");
        }

        // verify the required parameter 'distributionGroupsAddUserRequest' is set
        if (distributionGroupsAddUserRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsResendInvite(Async)");
        }

        return distributionGroupsResendInviteCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, _callback);

    }

    /**
     * 
     * Resend distribution group app invite notification to previously invited testers
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupsResendInvite(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        distributionGroupsResendInviteWithHttpInfo(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest);
    }

    /**
     * 
     * Resend distribution group app invite notification to previously invited testers
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupsResendInviteWithHttpInfo(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsResendInviteValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resend distribution group app invite notification to previously invited testers
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsResendInviteAsync(String ownerName, String appName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsResendInviteValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsAddUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsResendSharedInvite
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsResendSharedInviteCall(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddUserRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/distribution_groups/{distribution_group_name}/resend_invite"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsResendSharedInviteValidateBeforeCall(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling distributionGroupsResendSharedInvite(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsResendSharedInvite(Async)");
        }

        // verify the required parameter 'distributionGroupsAddUserRequest' is set
        if (distributionGroupsAddUserRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddUserRequest' when calling distributionGroupsResendSharedInvite(Async)");
        }

        return distributionGroupsResendSharedInviteCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, _callback);

    }

    /**
     * 
     * Resend shared distribution group invite notification to previously invited testers
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void distributionGroupsResendSharedInvite(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        distributionGroupsResendSharedInviteWithHttpInfo(orgName, distributionGroupName, distributionGroupsAddUserRequest);
    }

    /**
     * 
     * Resend shared distribution group invite notification to previously invited testers
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> distributionGroupsResendSharedInviteWithHttpInfo(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsResendSharedInviteValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resend shared distribution group invite notification to previously invited testers
     * @param orgName The organization&#39;s name (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsAddUserRequest The list of members to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsResendSharedInviteAsync(String orgName, String distributionGroupName, DistributionGroupsAddUserRequest distributionGroupsAddUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsResendSharedInviteValidateBeforeCall(orgName, distributionGroupName, distributionGroupsAddUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for distributionGroupsUpdate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsUpdateCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()))
            .replace("{" + "distribution_group_name" + "}", localVarApiClient.escapeString(distributionGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distributionGroupsUpdateValidateBeforeCall(String ownerName, String appName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling distributionGroupsUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling distributionGroupsUpdate(Async)");
        }

        // verify the required parameter 'distributionGroupName' is set
        if (distributionGroupName == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupName' when calling distributionGroupsUpdate(Async)");
        }

        // verify the required parameter 'distributionGroupsUpdateRequest' is set
        if (distributionGroupsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsUpdateRequest' when calling distributionGroupsUpdate(Async)");
        }

        return distributionGroupsUpdateCall(ownerName, appName, distributionGroupName, distributionGroupsUpdateRequest, _callback);

    }

    /**
     * 
     * Updates the attributes of distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (required)
     * @return DistributionGroupsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public DistributionGroupsList200ResponseInner distributionGroupsUpdate(String ownerName, String appName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest) throws ApiException {
        ApiResponse<DistributionGroupsList200ResponseInner> localVarResp = distributionGroupsUpdateWithHttpInfo(ownerName, appName, distributionGroupName, distributionGroupsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the attributes of distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (required)
     * @return ApiResponse&lt;DistributionGroupsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DistributionGroupsList200ResponseInner> distributionGroupsUpdateWithHttpInfo(String ownerName, String appName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = distributionGroupsUpdateValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the attributes of distribution group
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param distributionGroupName The name of the distribution group (required)
     * @param distributionGroupsUpdateRequest The attributes to update for the distribution group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distributionGroupsUpdateAsync(String ownerName, String appName, String distributionGroupName, DistributionGroupsUpdateRequest distributionGroupsUpdateRequest, final ApiCallback<DistributionGroupsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = distributionGroupsUpdateValidateBeforeCall(ownerName, appName, distributionGroupName, distributionGroupsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<DistributionGroupsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invitationsSent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invitationsSentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/invitations/sent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invitationsSentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return invitationsSentCall(_callback);

    }

    /**
     * 
     * Returns all invitations sent by the caller
     * @return List&lt;InvitationsSent200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<InvitationsSent200ResponseInner> invitationsSent() throws ApiException {
        ApiResponse<List<InvitationsSent200ResponseInner>> localVarResp = invitationsSentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all invitations sent by the caller
     * @return ApiResponse&lt;List&lt;InvitationsSent200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InvitationsSent200ResponseInner>> invitationsSentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = invitationsSentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InvitationsSent200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all invitations sent by the caller
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invitationsSentAsync(final ApiCallback<List<InvitationsSent200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = invitationsSentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InvitationsSent200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitations
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsCall(String orgName, String email, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}/revoke"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsValidateBeforeCall(String orgName, String email, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling orgInvitations(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling orgInvitations(Async)");
        }

        return orgInvitationsCall(orgName, email, body, _callback);

    }

    /**
     * 
     * Removes a user&#39;s invitation to an organization
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void orgInvitations(String orgName, String email, Object body) throws ApiException {
        orgInvitationsWithHttpInfo(orgName, email, body);
    }

    /**
     * 
     * Removes a user&#39;s invitation to an organization
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgInvitationsWithHttpInfo(String orgName, String email, Object body) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsValidateBeforeCall(orgName, email, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user&#39;s invitation to an organization
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsAsync(String orgName, String email, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsValidateBeforeCall(orgName, email, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitationsAccept
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsAcceptCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/user/invitations/orgs/{invitation_token}/accept"
            .replace("{" + "invitation_token" + "}", localVarApiClient.escapeString(invitationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsAcceptValidateBeforeCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationToken' is set
        if (invitationToken == null) {
            throw new ApiException("Missing the required parameter 'invitationToken' when calling orgInvitationsAccept(Async)");
        }

        return orgInvitationsAcceptCall(invitationToken, body, _callback);

    }

    /**
     * 
     * Accepts a pending organization invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void orgInvitationsAccept(String invitationToken, Object body) throws ApiException {
        orgInvitationsAcceptWithHttpInfo(invitationToken, body);
    }

    /**
     * 
     * Accepts a pending organization invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgInvitationsAcceptWithHttpInfo(String invitationToken, Object body) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsAcceptValidateBeforeCall(invitationToken, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Accepts a pending organization invitation for the specified user
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsAcceptAsync(String invitationToken, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsAcceptValidateBeforeCall(invitationToken, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitationsCreate
     * @param orgName The organization&#39;s name (required)
     * @param appInvitationsCreateRequest The email of the user to invite (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsCreateCall(String orgName, AppInvitationsCreateRequest appInvitationsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appInvitationsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/invitations"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsCreateValidateBeforeCall(String orgName, AppInvitationsCreateRequest appInvitationsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling orgInvitationsCreate(Async)");
        }

        // verify the required parameter 'appInvitationsCreateRequest' is set
        if (appInvitationsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'appInvitationsCreateRequest' when calling orgInvitationsCreate(Async)");
        }

        return orgInvitationsCreateCall(orgName, appInvitationsCreateRequest, _callback);

    }

    /**
     * 
     * Invites a new or existing user to an organization
     * @param orgName The organization&#39;s name (required)
     * @param appInvitationsCreateRequest The email of the user to invite (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void orgInvitationsCreate(String orgName, AppInvitationsCreateRequest appInvitationsCreateRequest) throws ApiException {
        orgInvitationsCreateWithHttpInfo(orgName, appInvitationsCreateRequest);
    }

    /**
     * 
     * Invites a new or existing user to an organization
     * @param orgName The organization&#39;s name (required)
     * @param appInvitationsCreateRequest The email of the user to invite (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgInvitationsCreateWithHttpInfo(String orgName, AppInvitationsCreateRequest appInvitationsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsCreateValidateBeforeCall(orgName, appInvitationsCreateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Invites a new or existing user to an organization
     * @param orgName The organization&#39;s name (required)
     * @param appInvitationsCreateRequest The email of the user to invite (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsCreateAsync(String orgName, AppInvitationsCreateRequest appInvitationsCreateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsCreateValidateBeforeCall(orgName, appInvitationsCreateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitationsDelete
     * @param orgName The organization&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user whose invitation should be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsDeleteCall(String orgName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgInvitationsDeleteRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/invitations"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsDeleteValidateBeforeCall(String orgName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling orgInvitationsDelete(Async)");
        }

        // verify the required parameter 'orgInvitationsDeleteRequest' is set
        if (orgInvitationsDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'orgInvitationsDeleteRequest' when calling orgInvitationsDelete(Async)");
        }

        return orgInvitationsDeleteCall(orgName, orgInvitationsDeleteRequest, _callback);

    }

    /**
     * 
     * Removes a user&#39;s invitation to an organization
     * @param orgName The organization&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user whose invitation should be removed (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void orgInvitationsDelete(String orgName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest) throws ApiException {
        orgInvitationsDeleteWithHttpInfo(orgName, orgInvitationsDeleteRequest);
    }

    /**
     * 
     * Removes a user&#39;s invitation to an organization
     * @param orgName The organization&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user whose invitation should be removed (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgInvitationsDeleteWithHttpInfo(String orgName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsDeleteValidateBeforeCall(orgName, orgInvitationsDeleteRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user&#39;s invitation to an organization
     * @param orgName The organization&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user whose invitation should be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsDeleteAsync(String orgName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsDeleteValidateBeforeCall(orgName, orgInvitationsDeleteRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitationsListPending
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsListPendingCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/invitations"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsListPendingValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling orgInvitationsListPending(Async)");
        }

        return orgInvitationsListPendingCall(orgName, _callback);

    }

    /**
     * 
     * Gets the pending invitations for the organization
     * @param orgName The organization&#39;s name (required)
     * @return List&lt;OrgInvitationsListPending200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<OrgInvitationsListPending200ResponseInner> orgInvitationsListPending(String orgName) throws ApiException {
        ApiResponse<List<OrgInvitationsListPending200ResponseInner>> localVarResp = orgInvitationsListPendingWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the pending invitations for the organization
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;List&lt;OrgInvitationsListPending200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrgInvitationsListPending200ResponseInner>> orgInvitationsListPendingWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsListPendingValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<List<OrgInvitationsListPending200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the pending invitations for the organization
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsListPendingAsync(String orgName, final ApiCallback<List<OrgInvitationsListPending200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsListPendingValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<List<OrgInvitationsListPending200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitationsReject
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsRejectCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/user/invitations/orgs/{invitation_token}/reject"
            .replace("{" + "invitation_token" + "}", localVarApiClient.escapeString(invitationToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsRejectValidateBeforeCall(String invitationToken, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invitationToken' is set
        if (invitationToken == null) {
            throw new ApiException("Missing the required parameter 'invitationToken' when calling orgInvitationsReject(Async)");
        }

        return orgInvitationsRejectCall(invitationToken, body, _callback);

    }

    /**
     * 
     * Rejects a pending organization invitation
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void orgInvitationsReject(String invitationToken, Object body) throws ApiException {
        orgInvitationsRejectWithHttpInfo(invitationToken, body);
    }

    /**
     * 
     * Rejects a pending organization invitation
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgInvitationsRejectWithHttpInfo(String invitationToken, Object body) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsRejectValidateBeforeCall(invitationToken, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Rejects a pending organization invitation
     * @param invitationToken The app invitation token that was sent to the user (required)
     * @param body allow empty body for custom http-client lib (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsRejectAsync(String invitationToken, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsRejectValidateBeforeCall(invitationToken, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitationsSendNewInvitation
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsSendNewInvitationCall(String orgName, String email, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appInvitationsCreateByEmailRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}/resend"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsSendNewInvitationValidateBeforeCall(String orgName, String email, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling orgInvitationsSendNewInvitation(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling orgInvitationsSendNewInvitation(Async)");
        }

        return orgInvitationsSendNewInvitationCall(orgName, email, appInvitationsCreateByEmailRequest, _callback);

    }

    /**
     * 
     * Cancels an existing organization invitation for the user and sends a new one
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void orgInvitationsSendNewInvitation(String orgName, String email, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest) throws ApiException {
        orgInvitationsSendNewInvitationWithHttpInfo(orgName, email, appInvitationsCreateByEmailRequest);
    }

    /**
     * 
     * Cancels an existing organization invitation for the user and sends a new one
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgInvitationsSendNewInvitationWithHttpInfo(String orgName, String email, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsSendNewInvitationValidateBeforeCall(orgName, email, appInvitationsCreateByEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancels an existing organization invitation for the user and sends a new one
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param appInvitationsCreateByEmailRequest The role of the user to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsSendNewInvitationAsync(String orgName, String email, AppInvitationsCreateByEmailRequest appInvitationsCreateByEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsSendNewInvitationValidateBeforeCall(orgName, email, appInvitationsCreateByEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for orgInvitationsUpdate
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param orgInvitationsUpdateRequest The new role of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsUpdateCall(String orgName, String email, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgInvitationsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/invitations/{email}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "email" + "}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgInvitationsUpdateValidateBeforeCall(String orgName, String email, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling orgInvitationsUpdate(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling orgInvitationsUpdate(Async)");
        }

        // verify the required parameter 'orgInvitationsUpdateRequest' is set
        if (orgInvitationsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'orgInvitationsUpdateRequest' when calling orgInvitationsUpdate(Async)");
        }

        return orgInvitationsUpdateCall(orgName, email, orgInvitationsUpdateRequest, _callback);

    }

    /**
     * 
     * Allows the role of an invited user to be changed
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param orgInvitationsUpdateRequest The new role of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void orgInvitationsUpdate(String orgName, String email, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest) throws ApiException {
        orgInvitationsUpdateWithHttpInfo(orgName, email, orgInvitationsUpdateRequest);
    }

    /**
     * 
     * Allows the role of an invited user to be changed
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param orgInvitationsUpdateRequest The new role of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> orgInvitationsUpdateWithHttpInfo(String orgName, String email, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = orgInvitationsUpdateValidateBeforeCall(orgName, email, orgInvitationsUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allows the role of an invited user to be changed
     * @param orgName The organization&#39;s name (required)
     * @param email The email address of the user to send the password reset mail to. (required)
     * @param orgInvitationsUpdateRequest The new role of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call orgInvitationsUpdateAsync(String orgName, String email, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgInvitationsUpdateValidateBeforeCall(orgName, email, orgInvitationsUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationDeleteAvatar
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationDeleteAvatarCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/avatar"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationDeleteAvatarValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling organizationDeleteAvatar(Async)");
        }

        return organizationDeleteAvatarCall(orgName, _callback);

    }

    /**
     * 
     * Deletes the uploaded organization avatar
     * @param orgName The organization&#39;s name (required)
     * @return OrganizationsListAdministered200ResponseOrganizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationsListAdministered200ResponseOrganizations organizationDeleteAvatar(String orgName) throws ApiException {
        ApiResponse<OrganizationsListAdministered200ResponseOrganizations> localVarResp = organizationDeleteAvatarWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the uploaded organization avatar
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;OrganizationsListAdministered200ResponseOrganizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationsListAdministered200ResponseOrganizations> organizationDeleteAvatarWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = organizationDeleteAvatarValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the uploaded organization avatar
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationDeleteAvatarAsync(String orgName, final ApiCallback<OrganizationsListAdministered200ResponseOrganizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationDeleteAvatarValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationUpdateAvatar
     * @param orgName The organization&#39;s name (required)
     * @param avatar The image for an Organization avatar to upload. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUpdateAvatarCall(String orgName, File avatar, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/avatar"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (avatar != null) {
            localVarFormParams.put("avatar", avatar);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationUpdateAvatarValidateBeforeCall(String orgName, File avatar, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling organizationUpdateAvatar(Async)");
        }

        return organizationUpdateAvatarCall(orgName, avatar, _callback);

    }

    /**
     * 
     * Sets the organization avatar
     * @param orgName The organization&#39;s name (required)
     * @param avatar The image for an Organization avatar to upload. (optional)
     * @return OrganizationsListAdministered200ResponseOrganizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationsListAdministered200ResponseOrganizations organizationUpdateAvatar(String orgName, File avatar) throws ApiException {
        ApiResponse<OrganizationsListAdministered200ResponseOrganizations> localVarResp = organizationUpdateAvatarWithHttpInfo(orgName, avatar);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the organization avatar
     * @param orgName The organization&#39;s name (required)
     * @param avatar The image for an Organization avatar to upload. (optional)
     * @return ApiResponse&lt;OrganizationsListAdministered200ResponseOrganizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationsListAdministered200ResponseOrganizations> organizationUpdateAvatarWithHttpInfo(String orgName, File avatar) throws ApiException {
        okhttp3.Call localVarCall = organizationUpdateAvatarValidateBeforeCall(orgName, avatar, null);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the organization avatar
     * @param orgName The organization&#39;s name (required)
     * @param avatar The image for an Organization avatar to upload. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationUpdateAvatarAsync(String orgName, File avatar, final ApiCallback<OrganizationsListAdministered200ResponseOrganizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationUpdateAvatarValidateBeforeCall(orgName, avatar, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsCreateOrUpdate
     * @param organizationsCreateOrUpdateRequest The organization data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsCreateOrUpdateCall(OrganizationsCreateOrUpdateRequest organizationsCreateOrUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsCreateOrUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsCreateOrUpdateValidateBeforeCall(OrganizationsCreateOrUpdateRequest organizationsCreateOrUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationsCreateOrUpdateRequest' is set
        if (organizationsCreateOrUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'organizationsCreateOrUpdateRequest' when calling organizationsCreateOrUpdate(Async)");
        }

        return organizationsCreateOrUpdateCall(organizationsCreateOrUpdateRequest, _callback);

    }

    /**
     * 
     * Creates a new organization and returns it to the caller
     * @param organizationsCreateOrUpdateRequest The organization data (required)
     * @return OrganizationsListAdministered200ResponseOrganizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationsListAdministered200ResponseOrganizations organizationsCreateOrUpdate(OrganizationsCreateOrUpdateRequest organizationsCreateOrUpdateRequest) throws ApiException {
        ApiResponse<OrganizationsListAdministered200ResponseOrganizations> localVarResp = organizationsCreateOrUpdateWithHttpInfo(organizationsCreateOrUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new organization and returns it to the caller
     * @param organizationsCreateOrUpdateRequest The organization data (required)
     * @return ApiResponse&lt;OrganizationsListAdministered200ResponseOrganizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationsListAdministered200ResponseOrganizations> organizationsCreateOrUpdateWithHttpInfo(OrganizationsCreateOrUpdateRequest organizationsCreateOrUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = organizationsCreateOrUpdateValidateBeforeCall(organizationsCreateOrUpdateRequest, null);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new organization and returns it to the caller
     * @param organizationsCreateOrUpdateRequest The organization data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsCreateOrUpdateAsync(OrganizationsCreateOrUpdateRequest organizationsCreateOrUpdateRequest, final ApiCallback<OrganizationsListAdministered200ResponseOrganizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsCreateOrUpdateValidateBeforeCall(organizationsCreateOrUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsDelete
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsDeleteCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsDeleteValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling organizationsDelete(Async)");
        }

        return organizationsDeleteCall(orgName, _callback);

    }

    /**
     * 
     * Deletes a single organization
     * @param orgName The organization&#39;s name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void organizationsDelete(String orgName) throws ApiException {
        organizationsDeleteWithHttpInfo(orgName);
    }

    /**
     * 
     * Deletes a single organization
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> organizationsDeleteWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = organizationsDeleteValidateBeforeCall(orgName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a single organization
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsDeleteAsync(String orgName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsDeleteValidateBeforeCall(orgName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsGet
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsGetCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsGetValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling organizationsGet(Async)");
        }

        return organizationsGetCall(orgName, _callback);

    }

    /**
     * 
     * Returns the details of a single organization
     * @param orgName The organization&#39;s name (required)
     * @return OrganizationsListAdministered200ResponseOrganizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationsListAdministered200ResponseOrganizations organizationsGet(String orgName) throws ApiException {
        ApiResponse<OrganizationsListAdministered200ResponseOrganizations> localVarResp = organizationsGetWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the details of a single organization
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;OrganizationsListAdministered200ResponseOrganizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationsListAdministered200ResponseOrganizations> organizationsGetWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = organizationsGetValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the details of a single organization
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsGetAsync(String orgName, final ApiCallback<OrganizationsListAdministered200ResponseOrganizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsGetValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return organizationsListCall(_callback);

    }

    /**
     * 
     * Returns a list of organizations the requesting user has access to
     * @return List&lt;OrganizationsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<OrganizationsList200ResponseInner> organizationsList() throws ApiException {
        ApiResponse<List<OrganizationsList200ResponseInner>> localVarResp = organizationsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of organizations the requesting user has access to
     * @return ApiResponse&lt;List&lt;OrganizationsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OrganizationsList200ResponseInner>> organizationsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = organizationsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OrganizationsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of organizations the requesting user has access to
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsListAsync(final ApiCallback<List<OrganizationsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OrganizationsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsListAdministered
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsListAdministeredCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/administeredOrgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsListAdministeredValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return organizationsListAdministeredCall(_callback);

    }

    /**
     * 
     * Returns a list organizations in which the requesting user is an admin
     * @return OrganizationsListAdministered200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationsListAdministered200Response organizationsListAdministered() throws ApiException {
        ApiResponse<OrganizationsListAdministered200Response> localVarResp = organizationsListAdministeredWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list organizations in which the requesting user is an admin
     * @return ApiResponse&lt;OrganizationsListAdministered200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationsListAdministered200Response> organizationsListAdministeredWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = organizationsListAdministeredValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list organizations in which the requesting user is an admin
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsListAdministeredAsync(final ApiCallback<OrganizationsListAdministered200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsListAdministeredValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for organizationsUpdate
     * @param orgName The organization&#39;s name (required)
     * @param organizationsUpdateRequest The data for the org (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsUpdateCall(String orgName, OrganizationsUpdateRequest organizationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call organizationsUpdateValidateBeforeCall(String orgName, OrganizationsUpdateRequest organizationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling organizationsUpdate(Async)");
        }

        // verify the required parameter 'organizationsUpdateRequest' is set
        if (organizationsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'organizationsUpdateRequest' when calling organizationsUpdate(Async)");
        }

        return organizationsUpdateCall(orgName, organizationsUpdateRequest, _callback);

    }

    /**
     * 
     * Returns a list of organizations the requesting user has access to
     * @param orgName The organization&#39;s name (required)
     * @param organizationsUpdateRequest The data for the org (required)
     * @return OrganizationsListAdministered200ResponseOrganizations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationsListAdministered200ResponseOrganizations organizationsUpdate(String orgName, OrganizationsUpdateRequest organizationsUpdateRequest) throws ApiException {
        ApiResponse<OrganizationsListAdministered200ResponseOrganizations> localVarResp = organizationsUpdateWithHttpInfo(orgName, organizationsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of organizations the requesting user has access to
     * @param orgName The organization&#39;s name (required)
     * @param organizationsUpdateRequest The data for the org (required)
     * @return ApiResponse&lt;OrganizationsListAdministered200ResponseOrganizations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationsListAdministered200ResponseOrganizations> organizationsUpdateWithHttpInfo(String orgName, OrganizationsUpdateRequest organizationsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = organizationsUpdateValidateBeforeCall(orgName, organizationsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of organizations the requesting user has access to
     * @param orgName The organization&#39;s name (required)
     * @param organizationsUpdateRequest The data for the org (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call organizationsUpdateAsync(String orgName, OrganizationsUpdateRequest organizationsUpdateRequest, final ApiCallback<OrganizationsListAdministered200ResponseOrganizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = organizationsUpdateValidateBeforeCall(orgName, organizationsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsListAdministered200ResponseOrganizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharedconnectionConnections
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> bad_request: proper details are not provided for connection in body.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedconnectionConnectionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/export/serviceConnections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharedconnectionConnectionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return sharedconnectionConnectionsCall(_callback);

    }

    /**
     * 
     * Gets all service connections of the service type for GDPR export.
     * @return List&lt;SharedconnectionConnections200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> bad_request: proper details are not provided for connection in body.  </td><td>  -  </td></tr>
     </table>
     */
    public List<SharedconnectionConnections200ResponseInner> sharedconnectionConnections() throws ApiException {
        ApiResponse<List<SharedconnectionConnections200ResponseInner>> localVarResp = sharedconnectionConnectionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all service connections of the service type for GDPR export.
     * @return ApiResponse&lt;List&lt;SharedconnectionConnections200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> bad_request: proper details are not provided for connection in body.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SharedconnectionConnections200ResponseInner>> sharedconnectionConnectionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sharedconnectionConnectionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SharedconnectionConnections200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all service connections of the service type for GDPR export.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> bad_request: proper details are not provided for connection in body.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharedconnectionConnectionsAsync(final ApiCallback<List<SharedconnectionConnections200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharedconnectionConnectionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SharedconnectionConnections200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddApp
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param distributionGroupsAddAppsRequestAppsInner The name of the app to be added to the team. The app has to be owned by the organization. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsAddAppCall(String orgName, String teamName, DistributionGroupsAddAppsRequestAppsInner distributionGroupsAddAppsRequestAppsInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = distributionGroupsAddAppsRequestAppsInner;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddAppValidateBeforeCall(String orgName, String teamName, DistributionGroupsAddAppsRequestAppsInner distributionGroupsAddAppsRequestAppsInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsAddApp(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsAddApp(Async)");
        }

        // verify the required parameter 'distributionGroupsAddAppsRequestAppsInner' is set
        if (distributionGroupsAddAppsRequestAppsInner == null) {
            throw new ApiException("Missing the required parameter 'distributionGroupsAddAppsRequestAppsInner' when calling teamsAddApp(Async)");
        }

        return teamsAddAppCall(orgName, teamName, distributionGroupsAddAppsRequestAppsInner, _callback);

    }

    /**
     * 
     * Adds an app to a team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param distributionGroupsAddAppsRequestAppsInner The name of the app to be added to the team. The app has to be owned by the organization. (required)
     * @return TeamsListApps200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamsListApps200ResponseInner teamsAddApp(String orgName, String teamName, DistributionGroupsAddAppsRequestAppsInner distributionGroupsAddAppsRequestAppsInner) throws ApiException {
        ApiResponse<TeamsListApps200ResponseInner> localVarResp = teamsAddAppWithHttpInfo(orgName, teamName, distributionGroupsAddAppsRequestAppsInner);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds an app to a team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param distributionGroupsAddAppsRequestAppsInner The name of the app to be added to the team. The app has to be owned by the organization. (required)
     * @return ApiResponse&lt;TeamsListApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsListApps200ResponseInner> teamsAddAppWithHttpInfo(String orgName, String teamName, DistributionGroupsAddAppsRequestAppsInner distributionGroupsAddAppsRequestAppsInner) throws ApiException {
        okhttp3.Call localVarCall = teamsAddAppValidateBeforeCall(orgName, teamName, distributionGroupsAddAppsRequestAppsInner, null);
        Type localVarReturnType = new TypeToken<TeamsListApps200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds an app to a team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param distributionGroupsAddAppsRequestAppsInner The name of the app to be added to the team. The app has to be owned by the organization. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsAddAppAsync(String orgName, String teamName, DistributionGroupsAddAppsRequestAppsInner distributionGroupsAddAppsRequestAppsInner, final ApiCallback<TeamsListApps200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddAppValidateBeforeCall(orgName, teamName, distributionGroupsAddAppsRequestAppsInner, _callback);
        Type localVarReturnType = new TypeToken<TeamsListApps200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsAddUser
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user to add to the team (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsAddUserCall(String orgName, String teamName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgInvitationsDeleteRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsAddUserValidateBeforeCall(String orgName, String teamName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsAddUser(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsAddUser(Async)");
        }

        // verify the required parameter 'orgInvitationsDeleteRequest' is set
        if (orgInvitationsDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'orgInvitationsDeleteRequest' when calling teamsAddUser(Async)");
        }

        return teamsAddUserCall(orgName, teamName, orgInvitationsDeleteRequest, _callback);

    }

    /**
     * 
     * Adds a new user to a team that is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user to add to the team (required)
     * @return TeamsGetUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamsGetUsers200Response teamsAddUser(String orgName, String teamName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest) throws ApiException {
        ApiResponse<TeamsGetUsers200Response> localVarResp = teamsAddUserWithHttpInfo(orgName, teamName, orgInvitationsDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a new user to a team that is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user to add to the team (required)
     * @return ApiResponse&lt;TeamsGetUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsGetUsers200Response> teamsAddUserWithHttpInfo(String orgName, String teamName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsAddUserValidateBeforeCall(orgName, teamName, orgInvitationsDeleteRequest, null);
        Type localVarReturnType = new TypeToken<TeamsGetUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a new user to a team that is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param orgInvitationsDeleteRequest The email of the user to add to the team (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsAddUserAsync(String orgName, String teamName, OrgInvitationsDeleteRequest orgInvitationsDeleteRequest, final ApiCallback<TeamsGetUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsAddUserValidateBeforeCall(orgName, teamName, orgInvitationsDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsGetUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateTeam
     * @param orgName The organization&#39;s name (required)
     * @param teamsCreateTeamRequest The information used to create the team (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateTeamCall(String orgName, TeamsCreateTeamRequest teamsCreateTeamRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateTeamRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateTeamValidateBeforeCall(String orgName, TeamsCreateTeamRequest teamsCreateTeamRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsCreateTeam(Async)");
        }

        // verify the required parameter 'teamsCreateTeamRequest' is set
        if (teamsCreateTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsCreateTeamRequest' when calling teamsCreateTeam(Async)");
        }

        return teamsCreateTeamCall(orgName, teamsCreateTeamRequest, _callback);

    }

    /**
     * 
     * Creates a team and returns it
     * @param orgName The organization&#39;s name (required)
     * @param teamsCreateTeamRequest The information used to create the team (required)
     * @return List&lt;TeamsListAll200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamsListAll200ResponseInner> teamsCreateTeam(String orgName, TeamsCreateTeamRequest teamsCreateTeamRequest) throws ApiException {
        ApiResponse<List<TeamsListAll200ResponseInner>> localVarResp = teamsCreateTeamWithHttpInfo(orgName, teamsCreateTeamRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a team and returns it
     * @param orgName The organization&#39;s name (required)
     * @param teamsCreateTeamRequest The information used to create the team (required)
     * @return ApiResponse&lt;List&lt;TeamsListAll200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamsListAll200ResponseInner>> teamsCreateTeamWithHttpInfo(String orgName, TeamsCreateTeamRequest teamsCreateTeamRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateTeamValidateBeforeCall(orgName, teamsCreateTeamRequest, null);
        Type localVarReturnType = new TypeToken<List<TeamsListAll200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a team and returns it
     * @param orgName The organization&#39;s name (required)
     * @param teamsCreateTeamRequest The information used to create the team (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateTeamAsync(String orgName, TeamsCreateTeamRequest teamsCreateTeamRequest, final ApiCallback<List<TeamsListAll200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateTeamValidateBeforeCall(orgName, teamsCreateTeamRequest, _callback);
        Type localVarReturnType = new TypeToken<List<TeamsListAll200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDelete
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteValidateBeforeCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsDelete(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsDelete(Async)");
        }

        return teamsDeleteCall(orgName, teamName, _callback);

    }

    /**
     * 
     * Deletes a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void teamsDelete(String orgName, String teamName) throws ApiException {
        teamsDeleteWithHttpInfo(orgName, teamName);
    }

    /**
     * 
     * Deletes a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsDeleteWithHttpInfo(String orgName, String teamName) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(orgName, teamName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteAsync(String orgName, String teamName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(orgName, teamName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetTeam
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetTeamCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetTeamValidateBeforeCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsGetTeam(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsGetTeam(Async)");
        }

        return teamsGetTeamCall(orgName, teamName, _callback);

    }

    /**
     * 
     * Returns the details of a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @return TeamsListAll200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamsListAll200ResponseInner teamsGetTeam(String orgName, String teamName) throws ApiException {
        ApiResponse<TeamsListAll200ResponseInner> localVarResp = teamsGetTeamWithHttpInfo(orgName, teamName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the details of a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @return ApiResponse&lt;TeamsListAll200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsListAll200ResponseInner> teamsGetTeamWithHttpInfo(String orgName, String teamName) throws ApiException {
        okhttp3.Call localVarCall = teamsGetTeamValidateBeforeCall(orgName, teamName, null);
        Type localVarReturnType = new TypeToken<TeamsListAll200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the details of a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetTeamAsync(String orgName, String teamName, final ApiCallback<TeamsListAll200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetTeamValidateBeforeCall(orgName, teamName, _callback);
        Type localVarReturnType = new TypeToken<TeamsListAll200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetUsers
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetUsersCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetUsersValidateBeforeCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsGetUsers(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsGetUsers(Async)");
        }

        return teamsGetUsersCall(orgName, teamName, _callback);

    }

    /**
     * 
     * Returns the users of a team which is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @return TeamsGetUsers200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamsGetUsers200Response teamsGetUsers(String orgName, String teamName) throws ApiException {
        ApiResponse<TeamsGetUsers200Response> localVarResp = teamsGetUsersWithHttpInfo(orgName, teamName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the users of a team which is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @return ApiResponse&lt;TeamsGetUsers200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsGetUsers200Response> teamsGetUsersWithHttpInfo(String orgName, String teamName) throws ApiException {
        okhttp3.Call localVarCall = teamsGetUsersValidateBeforeCall(orgName, teamName, null);
        Type localVarReturnType = new TypeToken<TeamsGetUsers200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the users of a team which is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetUsersAsync(String orgName, String teamName, final ApiCallback<TeamsGetUsers200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetUsersValidateBeforeCall(orgName, teamName, _callback);
        Type localVarReturnType = new TypeToken<TeamsGetUsers200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListAll
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListAllCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListAllValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsListAll(Async)");
        }

        return teamsListAllCall(orgName, _callback);

    }

    /**
     * 
     * Returns the list of all teams in this org
     * @param orgName The organization&#39;s name (required)
     * @return List&lt;TeamsListAll200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamsListAll200ResponseInner> teamsListAll(String orgName) throws ApiException {
        ApiResponse<List<TeamsListAll200ResponseInner>> localVarResp = teamsListAllWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of all teams in this org
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;List&lt;TeamsListAll200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamsListAll200ResponseInner>> teamsListAllWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = teamsListAllValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<List<TeamsListAll200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of all teams in this org
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListAllAsync(String orgName, final ApiCallback<List<TeamsListAll200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListAllValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<List<TeamsListAll200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsListApps
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListAppsCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListAppsValidateBeforeCall(String orgName, String teamName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsListApps(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsListApps(Async)");
        }

        return teamsListAppsCall(orgName, teamName, _callback);

    }

    /**
     * 
     * Returns the apps a team has access to
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @return List&lt;TeamsListApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TeamsListApps200ResponseInner> teamsListApps(String orgName, String teamName) throws ApiException {
        ApiResponse<List<TeamsListApps200ResponseInner>> localVarResp = teamsListAppsWithHttpInfo(orgName, teamName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the apps a team has access to
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @return ApiResponse&lt;List&lt;TeamsListApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TeamsListApps200ResponseInner>> teamsListAppsWithHttpInfo(String orgName, String teamName) throws ApiException {
        okhttp3.Call localVarCall = teamsListAppsValidateBeforeCall(orgName, teamName, null);
        Type localVarReturnType = new TypeToken<List<TeamsListApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the apps a team has access to
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListAppsAsync(String orgName, String teamName, final ApiCallback<List<TeamsListApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListAppsValidateBeforeCall(orgName, teamName, _callback);
        Type localVarReturnType = new TypeToken<List<TeamsListApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveApp
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsRemoveAppCall(String orgName, String teamName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveAppValidateBeforeCall(String orgName, String teamName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsRemoveApp(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsRemoveApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling teamsRemoveApp(Async)");
        }

        return teamsRemoveAppCall(orgName, teamName, appName, _callback);

    }

    /**
     * 
     * Removes an app from a team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void teamsRemoveApp(String orgName, String teamName, String appName) throws ApiException {
        teamsRemoveAppWithHttpInfo(orgName, teamName, appName);
    }

    /**
     * 
     * Removes an app from a team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsRemoveAppWithHttpInfo(String orgName, String teamName, String appName) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveAppValidateBeforeCall(orgName, teamName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes an app from a team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsRemoveAppAsync(String orgName, String teamName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveAppValidateBeforeCall(orgName, teamName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsRemoveUser
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsRemoveUserCall(String orgName, String teamName, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/users/{user_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsRemoveUserValidateBeforeCall(String orgName, String teamName, String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsRemoveUser(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsRemoveUser(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling teamsRemoveUser(Async)");
        }

        return teamsRemoveUserCall(orgName, teamName, userName, _callback);

    }

    /**
     * 
     * Removes a user from a team that is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void teamsRemoveUser(String orgName, String teamName, String userName) throws ApiException {
        teamsRemoveUserWithHttpInfo(orgName, teamName, userName);
    }

    /**
     * 
     * Removes a user from a team that is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsRemoveUserWithHttpInfo(String orgName, String teamName, String userName) throws ApiException {
        okhttp3.Call localVarCall = teamsRemoveUserValidateBeforeCall(orgName, teamName, userName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user from a team that is owned by an organization
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsRemoveUserAsync(String orgName, String teamName, String userName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsRemoveUserValidateBeforeCall(orgName, teamName, userName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdate
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param teamsUpdateRequest The information used to update the team (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateCall(String orgName, String teamName, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateValidateBeforeCall(String orgName, String teamName, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsUpdate(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsUpdate(Async)");
        }

        // verify the required parameter 'teamsUpdateRequest' is set
        if (teamsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsUpdateRequest' when calling teamsUpdate(Async)");
        }

        return teamsUpdateCall(orgName, teamName, teamsUpdateRequest, _callback);

    }

    /**
     * 
     * Updates a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param teamsUpdateRequest The information used to update the team (required)
     * @return TeamsListAll200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamsListAll200ResponseInner teamsUpdate(String orgName, String teamName, TeamsUpdateRequest teamsUpdateRequest) throws ApiException {
        ApiResponse<TeamsListAll200ResponseInner> localVarResp = teamsUpdateWithHttpInfo(orgName, teamName, teamsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param teamsUpdateRequest The information used to update the team (required)
     * @return ApiResponse&lt;TeamsListAll200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsListAll200ResponseInner> teamsUpdateWithHttpInfo(String orgName, String teamName, TeamsUpdateRequest teamsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(orgName, teamName, teamsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<TeamsListAll200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a single team
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param teamsUpdateRequest The information used to update the team (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateAsync(String orgName, String teamName, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback<TeamsListAll200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(orgName, teamName, teamsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsListAll200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdatePermissions
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @param teamsUpdatePermissionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdatePermissionsCall(String orgName, String teamName, String appName, TeamsUpdatePermissionsRequest teamsUpdatePermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdatePermissionsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/teams/{team_name}/apps/{app_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "team_name" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdatePermissionsValidateBeforeCall(String orgName, String teamName, String appName, TeamsUpdatePermissionsRequest teamsUpdatePermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling teamsUpdatePermissions(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling teamsUpdatePermissions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling teamsUpdatePermissions(Async)");
        }

        // verify the required parameter 'teamsUpdatePermissionsRequest' is set
        if (teamsUpdatePermissionsRequest == null) {
            throw new ApiException("Missing the required parameter 'teamsUpdatePermissionsRequest' when calling teamsUpdatePermissions(Async)");
        }

        return teamsUpdatePermissionsCall(orgName, teamName, appName, teamsUpdatePermissionsRequest, _callback);

    }

    /**
     * 
     * Updates the permissions the team has to the app
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @param teamsUpdatePermissionsRequest  (required)
     * @return TeamsListApps200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TeamsListApps200ResponseInner teamsUpdatePermissions(String orgName, String teamName, String appName, TeamsUpdatePermissionsRequest teamsUpdatePermissionsRequest) throws ApiException {
        ApiResponse<TeamsListApps200ResponseInner> localVarResp = teamsUpdatePermissionsWithHttpInfo(orgName, teamName, appName, teamsUpdatePermissionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the permissions the team has to the app
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @param teamsUpdatePermissionsRequest  (required)
     * @return ApiResponse&lt;TeamsListApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamsListApps200ResponseInner> teamsUpdatePermissionsWithHttpInfo(String orgName, String teamName, String appName, TeamsUpdatePermissionsRequest teamsUpdatePermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdatePermissionsValidateBeforeCall(orgName, teamName, appName, teamsUpdatePermissionsRequest, null);
        Type localVarReturnType = new TypeToken<TeamsListApps200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the permissions the team has to the app
     * @param orgName The organization&#39;s name (required)
     * @param teamName The team&#39;s name (required)
     * @param appName The name of the application (required)
     * @param teamsUpdatePermissionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdatePermissionsAsync(String orgName, String teamName, String appName, TeamsUpdatePermissionsRequest teamsUpdatePermissionsRequest, final ApiCallback<TeamsListApps200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdatePermissionsValidateBeforeCall(orgName, teamName, appName, teamsUpdatePermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<TeamsListApps200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensDelete
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensDeleteCall(String apiTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/api_tokens/{api_token_id}"
            .replace("{" + "api_token_id" + "}", localVarApiClient.escapeString(apiTokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensDeleteValidateBeforeCall(String apiTokenId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiTokenId' is set
        if (apiTokenId == null) {
            throw new ApiException("Missing the required parameter 'apiTokenId' when calling userApiTokensDelete(Async)");
        }

        return userApiTokensDeleteCall(apiTokenId, _callback);

    }

    /**
     * 
     * Delete the user api_token object with the specific id
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public void userApiTokensDelete(String apiTokenId) throws ApiException {
        userApiTokensDeleteWithHttpInfo(apiTokenId);
    }

    /**
     * 
     * Delete the user api_token object with the specific id
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> userApiTokensDeleteWithHttpInfo(String apiTokenId) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensDeleteValidateBeforeCall(apiTokenId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the user api_token object with the specific id
     * @param apiTokenId The unique ID (UUID) of the api token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensDeleteAsync(String apiTokenId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensDeleteValidateBeforeCall(apiTokenId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/api_tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return userApiTokensListCall(_callback);

    }

    /**
     * 
     * Returns api tokens for the authenticated user
     * @return List&lt;UserApiTokensList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public List<UserApiTokensList200ResponseInner> userApiTokensList() throws ApiException {
        ApiResponse<List<UserApiTokensList200ResponseInner>> localVarResp = userApiTokensListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns api tokens for the authenticated user
     * @return ApiResponse&lt;List&lt;UserApiTokensList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserApiTokensList200ResponseInner>> userApiTokensListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = userApiTokensListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<UserApiTokensList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns api tokens for the authenticated user
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensListAsync(final ApiCallback<List<UserApiTokensList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<UserApiTokensList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userApiTokensNew
     * @param userApiTokensNewRequest Description of the token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensNewCall(UserApiTokensNewRequest userApiTokensNewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userApiTokensNewRequest;

        // create path and map variables
        String localVarPath = "/v0.1/api_tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userApiTokensNewValidateBeforeCall(UserApiTokensNewRequest userApiTokensNewRequest, final ApiCallback _callback) throws ApiException {
        return userApiTokensNewCall(userApiTokensNewRequest, _callback);

    }

    /**
     * 
     * Creates a new User API token
     * @param userApiTokensNewRequest Description of the token (optional)
     * @return UserApiTokensNew201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public UserApiTokensNew201Response userApiTokensNew(UserApiTokensNewRequest userApiTokensNewRequest) throws ApiException {
        ApiResponse<UserApiTokensNew201Response> localVarResp = userApiTokensNewWithHttpInfo(userApiTokensNewRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new User API token
     * @param userApiTokensNewRequest Description of the token (optional)
     * @return ApiResponse&lt;UserApiTokensNew201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserApiTokensNew201Response> userApiTokensNewWithHttpInfo(UserApiTokensNewRequest userApiTokensNewRequest) throws ApiException {
        okhttp3.Call localVarCall = userApiTokensNewValidateBeforeCall(userApiTokensNewRequest, null);
        Type localVarReturnType = new TypeToken<UserApiTokensNew201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new User API token
     * @param userApiTokensNewRequest Description of the token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userApiTokensNewAsync(UserApiTokensNewRequest userApiTokensNewRequest, final ApiCallback<UserApiTokensNew201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userApiTokensNewValidateBeforeCall(userApiTokensNewRequest, _callback);
        Type localVarReturnType = new TypeToken<UserApiTokensNew201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersGetCall(_callback);

    }

    /**
     * 
     * Returns the user profile data
     * @return AppInvitationsList200ResponseInvitedBy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppInvitationsList200ResponseInvitedBy usersGet() throws ApiException {
        ApiResponse<AppInvitationsList200ResponseInvitedBy> localVarResp = usersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the user profile data
     * @return ApiResponse&lt;AppInvitationsList200ResponseInvitedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppInvitationsList200ResponseInvitedBy> usersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AppInvitationsList200ResponseInvitedBy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the user profile data
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetAsync(final ApiCallback<AppInvitationsList200ResponseInvitedBy> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AppInvitationsList200ResponseInvitedBy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetForOrg
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetForOrgCall(String orgName, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetForOrgValidateBeforeCall(String orgName, String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling usersGetForOrg(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling usersGetForOrg(Async)");
        }

        return usersGetForOrgCall(orgName, userName, _callback);

    }

    /**
     * 
     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @return UsersListForOrg200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UsersListForOrg200ResponseInner usersGetForOrg(String orgName, String userName) throws ApiException {
        ApiResponse<UsersListForOrg200ResponseInner> localVarResp = usersGetForOrgWithHttpInfo(orgName, userName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @return ApiResponse&lt;UsersListForOrg200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersListForOrg200ResponseInner> usersGetForOrgWithHttpInfo(String orgName, String userName) throws ApiException {
        okhttp3.Call localVarCall = usersGetForOrgValidateBeforeCall(orgName, userName, null);
        Type localVarReturnType = new TypeToken<UsersListForOrg200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a user information from an organization by name - if there is explicit permission return it, if not if not return highest implicit permission
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetForOrgAsync(String orgName, String userName, final ApiCallback<UsersListForOrg200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetForOrgValidateBeforeCall(orgName, userName, _callback);
        Type localVarReturnType = new TypeToken<UsersListForOrg200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersGetUserMetadata
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetUserMetadataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/user/metadata/optimizely";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersGetUserMetadataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return usersGetUserMetadataCall(_callback);

    }

    /**
     * 
     * 
     * @return UsersGetUserMetadata200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UsersGetUserMetadata200Response usersGetUserMetadata() throws ApiException {
        ApiResponse<UsersGetUserMetadata200Response> localVarResp = usersGetUserMetadataWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;UsersGetUserMetadata200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersGetUserMetadata200Response> usersGetUserMetadataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = usersGetUserMetadataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UsersGetUserMetadata200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersGetUserMetadataAsync(final ApiCallback<UsersGetUserMetadata200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersGetUserMetadataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UsersGetUserMetadata200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/users"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling usersList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling usersList(Async)");
        }

        return usersListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns the users associated with the app specified with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;AppInvitationsList200ResponseInvitedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<AppInvitationsList200ResponseInvitedBy> usersList(String ownerName, String appName) throws ApiException {
        ApiResponse<List<AppInvitationsList200ResponseInvitedBy>> localVarResp = usersListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the users associated with the app specified with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;AppInvitationsList200ResponseInvitedBy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppInvitationsList200ResponseInvitedBy>> usersListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = usersListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<AppInvitationsList200ResponseInvitedBy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the users associated with the app specified with the given app name which belongs to the given owner.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListAsync(String ownerName, String appName, final ApiCallback<List<AppInvitationsList200ResponseInvitedBy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<AppInvitationsList200ResponseInvitedBy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersListForOrg
     * @param orgName The organization&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListForOrgCall(String orgName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/users"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersListForOrgValidateBeforeCall(String orgName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling usersListForOrg(Async)");
        }

        return usersListForOrgCall(orgName, _callback);

    }

    /**
     * 
     * Returns a list of users that belong to an organization
     * @param orgName The organization&#39;s name (required)
     * @return List&lt;UsersListForOrg200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<UsersListForOrg200ResponseInner> usersListForOrg(String orgName) throws ApiException {
        ApiResponse<List<UsersListForOrg200ResponseInner>> localVarResp = usersListForOrgWithHttpInfo(orgName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of users that belong to an organization
     * @param orgName The organization&#39;s name (required)
     * @return ApiResponse&lt;List&lt;UsersListForOrg200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UsersListForOrg200ResponseInner>> usersListForOrgWithHttpInfo(String orgName) throws ApiException {
        okhttp3.Call localVarCall = usersListForOrgValidateBeforeCall(orgName, null);
        Type localVarReturnType = new TypeToken<List<UsersListForOrg200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of users that belong to an organization
     * @param orgName The organization&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersListForOrgAsync(String orgName, final ApiCallback<List<UsersListForOrg200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersListForOrgValidateBeforeCall(orgName, _callback);
        Type localVarReturnType = new TypeToken<List<UsersListForOrg200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersRemoveFromOrg
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersRemoveFromOrgCall(String orgName, String userName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersRemoveFromOrgValidateBeforeCall(String orgName, String userName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling usersRemoveFromOrg(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling usersRemoveFromOrg(Async)");
        }

        return usersRemoveFromOrgCall(orgName, userName, _callback);

    }

    /**
     * 
     * Removes a user from an organization.
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void usersRemoveFromOrg(String orgName, String userName) throws ApiException {
        usersRemoveFromOrgWithHttpInfo(orgName, userName);
    }

    /**
     * 
     * Removes a user from an organization.
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> usersRemoveFromOrgWithHttpInfo(String orgName, String userName) throws ApiException {
        okhttp3.Call localVarCall = usersRemoveFromOrgValidateBeforeCall(orgName, userName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a user from an organization.
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersRemoveFromOrgAsync(String orgName, String userName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersRemoveFromOrgValidateBeforeCall(orgName, userName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUpdate
     * @param usersUpdateRequest The data for the created user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateCall(UsersUpdateRequest usersUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUpdateValidateBeforeCall(UsersUpdateRequest usersUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usersUpdateRequest' is set
        if (usersUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'usersUpdateRequest' when calling usersUpdate(Async)");
        }

        return usersUpdateCall(usersUpdateRequest, _callback);

    }

    /**
     * 
     * Updates the user profile and returns the updated user data
     * @param usersUpdateRequest The data for the created user (required)
     * @return AppInvitationsList200ResponseInvitedBy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public AppInvitationsList200ResponseInvitedBy usersUpdate(UsersUpdateRequest usersUpdateRequest) throws ApiException {
        ApiResponse<AppInvitationsList200ResponseInvitedBy> localVarResp = usersUpdateWithHttpInfo(usersUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the user profile and returns the updated user data
     * @param usersUpdateRequest The data for the created user (required)
     * @return ApiResponse&lt;AppInvitationsList200ResponseInvitedBy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppInvitationsList200ResponseInvitedBy> usersUpdateWithHttpInfo(UsersUpdateRequest usersUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(usersUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AppInvitationsList200ResponseInvitedBy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the user profile and returns the updated user data
     * @param usersUpdateRequest The data for the created user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateAsync(UsersUpdateRequest usersUpdateRequest, final ApiCallback<AppInvitationsList200ResponseInvitedBy> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUpdateValidateBeforeCall(usersUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppInvitationsList200ResponseInvitedBy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usersUpdateOrgRole
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param orgInvitationsUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateOrgRoleCall(String orgName, String userName, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgInvitationsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{org_name}/users/{user_name}"
            .replace("{" + "org_name" + "}", localVarApiClient.escapeString(orgName.toString()))
            .replace("{" + "user_name" + "}", localVarApiClient.escapeString(userName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usersUpdateOrgRoleValidateBeforeCall(String orgName, String userName, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling usersUpdateOrgRole(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling usersUpdateOrgRole(Async)");
        }

        // verify the required parameter 'orgInvitationsUpdateRequest' is set
        if (orgInvitationsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'orgInvitationsUpdateRequest' when calling usersUpdateOrgRole(Async)");
        }

        return usersUpdateOrgRoleCall(orgName, userName, orgInvitationsUpdateRequest, _callback);

    }

    /**
     * 
     * Updates the given organization user
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param orgInvitationsUpdateRequest  (required)
     * @return UsersListForOrg200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UsersListForOrg200ResponseInner usersUpdateOrgRole(String orgName, String userName, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest) throws ApiException {
        ApiResponse<UsersListForOrg200ResponseInner> localVarResp = usersUpdateOrgRoleWithHttpInfo(orgName, userName, orgInvitationsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given organization user
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param orgInvitationsUpdateRequest  (required)
     * @return ApiResponse&lt;UsersListForOrg200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsersListForOrg200ResponseInner> usersUpdateOrgRoleWithHttpInfo(String orgName, String userName, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = usersUpdateOrgRoleValidateBeforeCall(orgName, userName, orgInvitationsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<UsersListForOrg200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given organization user
     * @param orgName The organization&#39;s name (required)
     * @param userName The slug name of the user (required)
     * @param orgInvitationsUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usersUpdateOrgRoleAsync(String orgName, String userName, OrgInvitationsUpdateRequest orgInvitationsUpdateRequest, final ApiCallback<UsersListForOrg200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = usersUpdateOrgRoleValidateBeforeCall(orgName, userName, orgInvitationsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersListForOrg200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
