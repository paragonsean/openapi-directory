/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInnerModelCpu;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInnerModelDimensions;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInnerModelMemory;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInnerModelResolution;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInnerModelScreenSize;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceModel {
  public static final String SERIALIZED_NAME_AVAILABILITY_COUNT = "availabilityCount";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_COUNT)
  private BigDecimal availabilityCount;

  public static final String SERIALIZED_NAME_CPU = "cpu";
  @SerializedName(SERIALIZED_NAME_CPU)
  private TestGetDeviceConfigurations200ResponseInnerModelCpu cpu;

  public static final String SERIALIZED_NAME_DEVICE_FRAME = "deviceFrame";
  @SerializedName(SERIALIZED_NAME_DEVICE_FRAME)
  private TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame deviceFrame;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private TestGetDeviceConfigurations200ResponseInnerModelDimensions dimensions;

  public static final String SERIALIZED_NAME_FORM_FACTOR = "formFactor";
  @SerializedName(SERIALIZED_NAME_FORM_FACTOR)
  private String formFactor;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_MEMORY = "memory";
  @SerializedName(SERIALIZED_NAME_MEMORY)
  private TestGetDeviceConfigurations200ResponseInnerModelMemory memory;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private TestGetDeviceConfigurations200ResponseInnerModelResolution resolution;

  public static final String SERIALIZED_NAME_SCREEN_ROTATION = "screenRotation";
  @SerializedName(SERIALIZED_NAME_SCREEN_ROTATION)
  private BigDecimal screenRotation;

  public static final String SERIALIZED_NAME_SCREEN_SIZE = "screenSize";
  @SerializedName(SERIALIZED_NAME_SCREEN_SIZE)
  private TestGetDeviceConfigurations200ResponseInnerModelScreenSize screenSize;

  public DeviceModel() {
  }

  public DeviceModel availabilityCount(BigDecimal availabilityCount) {
    this.availabilityCount = availabilityCount;
    return this;
  }

  /**
   * Get availabilityCount
   * @return availabilityCount
   */
  @javax.annotation.Nullable
  public BigDecimal getAvailabilityCount() {
    return availabilityCount;
  }

  public void setAvailabilityCount(BigDecimal availabilityCount) {
    this.availabilityCount = availabilityCount;
  }


  public DeviceModel cpu(TestGetDeviceConfigurations200ResponseInnerModelCpu cpu) {
    this.cpu = cpu;
    return this;
  }

  /**
   * Get cpu
   * @return cpu
   */
  @javax.annotation.Nullable
  public TestGetDeviceConfigurations200ResponseInnerModelCpu getCpu() {
    return cpu;
  }

  public void setCpu(TestGetDeviceConfigurations200ResponseInnerModelCpu cpu) {
    this.cpu = cpu;
  }


  public DeviceModel deviceFrame(TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame deviceFrame) {
    this.deviceFrame = deviceFrame;
    return this;
  }

  /**
   * Get deviceFrame
   * @return deviceFrame
   */
  @javax.annotation.Nullable
  public TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame getDeviceFrame() {
    return deviceFrame;
  }

  public void setDeviceFrame(TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame deviceFrame) {
    this.deviceFrame = deviceFrame;
  }


  public DeviceModel dimensions(TestGetDeviceConfigurations200ResponseInnerModelDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public TestGetDeviceConfigurations200ResponseInnerModelDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(TestGetDeviceConfigurations200ResponseInnerModelDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public DeviceModel formFactor(String formFactor) {
    this.formFactor = formFactor;
    return this;
  }

  /**
   * Get formFactor
   * @return formFactor
   */
  @javax.annotation.Nullable
  public String getFormFactor() {
    return formFactor;
  }

  public void setFormFactor(String formFactor) {
    this.formFactor = formFactor;
  }


  public DeviceModel manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Get manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceModel memory(TestGetDeviceConfigurations200ResponseInnerModelMemory memory) {
    this.memory = memory;
    return this;
  }

  /**
   * Get memory
   * @return memory
   */
  @javax.annotation.Nullable
  public TestGetDeviceConfigurations200ResponseInnerModelMemory getMemory() {
    return memory;
  }

  public void setMemory(TestGetDeviceConfigurations200ResponseInnerModelMemory memory) {
    this.memory = memory;
  }


  public DeviceModel model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public DeviceModel name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeviceModel platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public DeviceModel releaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public String getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
  }


  public DeviceModel resolution(TestGetDeviceConfigurations200ResponseInnerModelResolution resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * Get resolution
   * @return resolution
   */
  @javax.annotation.Nullable
  public TestGetDeviceConfigurations200ResponseInnerModelResolution getResolution() {
    return resolution;
  }

  public void setResolution(TestGetDeviceConfigurations200ResponseInnerModelResolution resolution) {
    this.resolution = resolution;
  }


  public DeviceModel screenRotation(BigDecimal screenRotation) {
    this.screenRotation = screenRotation;
    return this;
  }

  /**
   * Get screenRotation
   * @return screenRotation
   */
  @javax.annotation.Nullable
  public BigDecimal getScreenRotation() {
    return screenRotation;
  }

  public void setScreenRotation(BigDecimal screenRotation) {
    this.screenRotation = screenRotation;
  }


  public DeviceModel screenSize(TestGetDeviceConfigurations200ResponseInnerModelScreenSize screenSize) {
    this.screenSize = screenSize;
    return this;
  }

  /**
   * Get screenSize
   * @return screenSize
   */
  @javax.annotation.Nullable
  public TestGetDeviceConfigurations200ResponseInnerModelScreenSize getScreenSize() {
    return screenSize;
  }

  public void setScreenSize(TestGetDeviceConfigurations200ResponseInnerModelScreenSize screenSize) {
    this.screenSize = screenSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceModel deviceModel = (DeviceModel) o;
    return Objects.equals(this.availabilityCount, deviceModel.availabilityCount) &&
        Objects.equals(this.cpu, deviceModel.cpu) &&
        Objects.equals(this.deviceFrame, deviceModel.deviceFrame) &&
        Objects.equals(this.dimensions, deviceModel.dimensions) &&
        Objects.equals(this.formFactor, deviceModel.formFactor) &&
        Objects.equals(this.manufacturer, deviceModel.manufacturer) &&
        Objects.equals(this.memory, deviceModel.memory) &&
        Objects.equals(this.model, deviceModel.model) &&
        Objects.equals(this.name, deviceModel.name) &&
        Objects.equals(this.platform, deviceModel.platform) &&
        Objects.equals(this.releaseDate, deviceModel.releaseDate) &&
        Objects.equals(this.resolution, deviceModel.resolution) &&
        Objects.equals(this.screenRotation, deviceModel.screenRotation) &&
        Objects.equals(this.screenSize, deviceModel.screenSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityCount, cpu, deviceFrame, dimensions, formFactor, manufacturer, memory, model, name, platform, releaseDate, resolution, screenRotation, screenSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceModel {\n");
    sb.append("    availabilityCount: ").append(toIndentedString(availabilityCount)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    deviceFrame: ").append(toIndentedString(deviceFrame)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    formFactor: ").append(toIndentedString(formFactor)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    screenRotation: ").append(toIndentedString(screenRotation)).append("\n");
    sb.append("    screenSize: ").append(toIndentedString(screenSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityCount");
    openapiFields.add("cpu");
    openapiFields.add("deviceFrame");
    openapiFields.add("dimensions");
    openapiFields.add("formFactor");
    openapiFields.add("manufacturer");
    openapiFields.add("memory");
    openapiFields.add("model");
    openapiFields.add("name");
    openapiFields.add("platform");
    openapiFields.add("releaseDate");
    openapiFields.add("resolution");
    openapiFields.add("screenRotation");
    openapiFields.add("screenSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceModel is not found in the empty JSON string", DeviceModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cpu`
      if (jsonObj.get("cpu") != null && !jsonObj.get("cpu").isJsonNull()) {
        TestGetDeviceConfigurations200ResponseInnerModelCpu.validateJsonElement(jsonObj.get("cpu"));
      }
      // validate the optional field `deviceFrame`
      if (jsonObj.get("deviceFrame") != null && !jsonObj.get("deviceFrame").isJsonNull()) {
        TestGetDeviceConfigurations200ResponseInnerModelDeviceFrame.validateJsonElement(jsonObj.get("deviceFrame"));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        TestGetDeviceConfigurations200ResponseInnerModelDimensions.validateJsonElement(jsonObj.get("dimensions"));
      }
      if ((jsonObj.get("formFactor") != null && !jsonObj.get("formFactor").isJsonNull()) && !jsonObj.get("formFactor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formFactor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formFactor").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      // validate the optional field `memory`
      if (jsonObj.get("memory") != null && !jsonObj.get("memory").isJsonNull()) {
        TestGetDeviceConfigurations200ResponseInnerModelMemory.validateJsonElement(jsonObj.get("memory"));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("releaseDate") != null && !jsonObj.get("releaseDate").isJsonNull()) && !jsonObj.get("releaseDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseDate").toString()));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        TestGetDeviceConfigurations200ResponseInnerModelResolution.validateJsonElement(jsonObj.get("resolution"));
      }
      // validate the optional field `screenSize`
      if (jsonObj.get("screenSize") != null && !jsonObj.get("screenSize").isJsonNull()) {
        TestGetDeviceConfigurations200ResponseInnerModelScreenSize.validateJsonElement(jsonObj.get("screenSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceModel>() {
           @Override
           public void write(JsonWriter out, DeviceModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceModel
   * @throws IOException if the JSON string is invalid with respect to DeviceModel
   */
  public static DeviceModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceModel.class);
  }

  /**
   * Convert an instance of DeviceModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

