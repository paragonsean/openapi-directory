/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateDevicesRequestDestinationsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information required to publish devices to the Apple Developer account and resign the application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDevicesRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_SERVICE_CONNECTION_ID = "account_service_connection_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SERVICE_CONNECTION_ID)
  private String accountServiceConnectionId;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<UpdateDevicesRequestDestinationsInner> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<String> devices = new ArrayList<>();

  public static final String SERIALIZED_NAME_P12_BASE64 = "p12_base64";
  @SerializedName(SERIALIZED_NAME_P12_BASE64)
  private String p12Base64;

  public static final String SERIALIZED_NAME_P12_PASSWORD = "p12_password";
  @SerializedName(SERIALIZED_NAME_P12_PASSWORD)
  private String p12Password;

  public static final String SERIALIZED_NAME_P12_SERVICE_CONNECTION_ID = "p12_service_connection_id";
  @SerializedName(SERIALIZED_NAME_P12_SERVICE_CONNECTION_ID)
  private String p12ServiceConnectionId;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PUBLISH_ALL_DEVICES = "publish_all_devices";
  @SerializedName(SERIALIZED_NAME_PUBLISH_ALL_DEVICES)
  private Boolean publishAllDevices;

  public static final String SERIALIZED_NAME_RELEASE_ID = "release_id";
  @SerializedName(SERIALIZED_NAME_RELEASE_ID)
  private BigDecimal releaseId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public UpdateDevicesRequest() {
  }

  public UpdateDevicesRequest accountServiceConnectionId(String accountServiceConnectionId) {
    this.accountServiceConnectionId = accountServiceConnectionId;
    return this;
  }

  /**
   * The service_connection_id of the stored Apple credentials instead of username, password.
   * @return accountServiceConnectionId
   */
  @javax.annotation.Nullable
  public String getAccountServiceConnectionId() {
    return accountServiceConnectionId;
  }

  public void setAccountServiceConnectionId(String accountServiceConnectionId) {
    this.accountServiceConnectionId = accountServiceConnectionId;
  }


  public UpdateDevicesRequest destinations(List<UpdateDevicesRequestDestinationsInner> destinations) {
    this.destinations = destinations;
    return this;
  }

  public UpdateDevicesRequest addDestinationsItem(UpdateDevicesRequestDestinationsInner destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * Array of distribution groups that the devices should be provisioned from.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<UpdateDevicesRequestDestinationsInner> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<UpdateDevicesRequestDestinationsInner> destinations) {
    this.destinations = destinations;
  }


  public UpdateDevicesRequest devices(List<String> devices) {
    this.devices = devices;
    return this;
  }

  public UpdateDevicesRequest addDevicesItem(String devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

  /**
   * Array of device UDID&#39;s to be published to the Apple Developer account.
   * @return devices
   */
  @javax.annotation.Nullable
  public List<String> getDevices() {
    return devices;
  }

  public void setDevices(List<String> devices) {
    this.devices = devices;
  }


  public UpdateDevicesRequest p12Base64(String p12Base64) {
    this.p12Base64 = p12Base64;
    return this;
  }

  /**
   * The certificate to use for resigning the application with the updated provisioning profiles.
   * @return p12Base64
   */
  @javax.annotation.Nullable
  public String getP12Base64() {
    return p12Base64;
  }

  public void setP12Base64(String p12Base64) {
    this.p12Base64 = p12Base64;
  }


  public UpdateDevicesRequest p12Password(String p12Password) {
    this.p12Password = p12Password;
    return this;
  }

  /**
   * The password certificate if one is needed.
   * @return p12Password
   */
  @javax.annotation.Nullable
  public String getP12Password() {
    return p12Password;
  }

  public void setP12Password(String p12Password) {
    this.p12Password = p12Password;
  }


  public UpdateDevicesRequest p12ServiceConnectionId(String p12ServiceConnectionId) {
    this.p12ServiceConnectionId = p12ServiceConnectionId;
    return this;
  }

  /**
   * The service_connection_id of the stored Apple certificate instead of p12_base64 value.
   * @return p12ServiceConnectionId
   */
  @javax.annotation.Nullable
  public String getP12ServiceConnectionId() {
    return p12ServiceConnectionId;
  }

  public void setP12ServiceConnectionId(String p12ServiceConnectionId) {
    this.p12ServiceConnectionId = p12ServiceConnectionId;
  }


  public UpdateDevicesRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password for the Apple Developer account to publish the devices to.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public UpdateDevicesRequest publishAllDevices(Boolean publishAllDevices) {
    this.publishAllDevices = publishAllDevices;
    return this;
  }

  /**
   * When set to true, all unprovisioned devices will be published to the Apple Developer account.  When false, only the provided devices will be published to the Apple Developer account.
   * @return publishAllDevices
   */
  @javax.annotation.Nullable
  public Boolean getPublishAllDevices() {
    return publishAllDevices;
  }

  public void setPublishAllDevices(Boolean publishAllDevices) {
    this.publishAllDevices = publishAllDevices;
  }


  public UpdateDevicesRequest releaseId(BigDecimal releaseId) {
    this.releaseId = releaseId;
    return this;
  }

  /**
   * When provided, will update the provided release with the new set of devices. By default the latest release of the distribution group is used when this property is omitted. If &#x60;release_id&#x60; is passed in the path, there is no need to pass in the body as well.
   * @return releaseId
   */
  @javax.annotation.Nullable
  public BigDecimal getReleaseId() {
    return releaseId;
  }

  public void setReleaseId(BigDecimal releaseId) {
    this.releaseId = releaseId;
  }


  public UpdateDevicesRequest username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username for the Apple Developer account to publish the devices to.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDevicesRequest updateDevicesRequest = (UpdateDevicesRequest) o;
    return Objects.equals(this.accountServiceConnectionId, updateDevicesRequest.accountServiceConnectionId) &&
        Objects.equals(this.destinations, updateDevicesRequest.destinations) &&
        Objects.equals(this.devices, updateDevicesRequest.devices) &&
        Objects.equals(this.p12Base64, updateDevicesRequest.p12Base64) &&
        Objects.equals(this.p12Password, updateDevicesRequest.p12Password) &&
        Objects.equals(this.p12ServiceConnectionId, updateDevicesRequest.p12ServiceConnectionId) &&
        Objects.equals(this.password, updateDevicesRequest.password) &&
        Objects.equals(this.publishAllDevices, updateDevicesRequest.publishAllDevices) &&
        Objects.equals(this.releaseId, updateDevicesRequest.releaseId) &&
        Objects.equals(this.username, updateDevicesRequest.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountServiceConnectionId, destinations, devices, p12Base64, p12Password, p12ServiceConnectionId, password, publishAllDevices, releaseId, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDevicesRequest {\n");
    sb.append("    accountServiceConnectionId: ").append(toIndentedString(accountServiceConnectionId)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    p12Base64: ").append(toIndentedString(p12Base64)).append("\n");
    sb.append("    p12Password: ").append(toIndentedString(p12Password)).append("\n");
    sb.append("    p12ServiceConnectionId: ").append(toIndentedString(p12ServiceConnectionId)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    publishAllDevices: ").append(toIndentedString(publishAllDevices)).append("\n");
    sb.append("    releaseId: ").append(toIndentedString(releaseId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_service_connection_id");
    openapiFields.add("destinations");
    openapiFields.add("devices");
    openapiFields.add("p12_base64");
    openapiFields.add("p12_password");
    openapiFields.add("p12_service_connection_id");
    openapiFields.add("password");
    openapiFields.add("publish_all_devices");
    openapiFields.add("release_id");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDevicesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDevicesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDevicesRequest is not found in the empty JSON string", UpdateDevicesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDevicesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDevicesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_service_connection_id") != null && !jsonObj.get("account_service_connection_id").isJsonNull()) && !jsonObj.get("account_service_connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_service_connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_service_connection_id").toString()));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            UpdateDevicesRequestDestinationsInner.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull() && !jsonObj.get("devices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `devices` to be an array in the JSON string but got `%s`", jsonObj.get("devices").toString()));
      }
      if ((jsonObj.get("p12_base64") != null && !jsonObj.get("p12_base64").isJsonNull()) && !jsonObj.get("p12_base64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p12_base64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p12_base64").toString()));
      }
      if ((jsonObj.get("p12_password") != null && !jsonObj.get("p12_password").isJsonNull()) && !jsonObj.get("p12_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p12_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p12_password").toString()));
      }
      if ((jsonObj.get("p12_service_connection_id") != null && !jsonObj.get("p12_service_connection_id").isJsonNull()) && !jsonObj.get("p12_service_connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p12_service_connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p12_service_connection_id").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDevicesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDevicesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDevicesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDevicesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDevicesRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDevicesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDevicesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDevicesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDevicesRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDevicesRequest
   */
  public static UpdateDevicesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDevicesRequest.class);
  }

  /**
   * Convert an instance of UpdateDevicesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

