/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CrashDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrashDetails {
  public static final String SERIALIZED_NAME_APP_START_TIMESTAMP = "app_start_timestamp";
  @SerializedName(SERIALIZED_NAME_APP_START_TIMESTAMP)
  private OffsetDateTime appStartTimestamp;

  public static final String SERIALIZED_NAME_CARRIER_COUNTRY = "carrier_country";
  @SerializedName(SERIALIZED_NAME_CARRIER_COUNTRY)
  private String carrierCountry;

  public static final String SERIALIZED_NAME_CARRIER_NAME = "carrier_name";
  @SerializedName(SERIALIZED_NAME_CARRIER_NAME)
  private String carrierName;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_OS_BUILD = "os_build";
  @SerializedName(SERIALIZED_NAME_OS_BUILD)
  private String osBuild;

  public static final String SERIALIZED_NAME_ROOTED = "rooted";
  @SerializedName(SERIALIZED_NAME_ROOTED)
  private Boolean rooted;

  public static final String SERIALIZED_NAME_SCREEN_SIZE = "screen_size";
  @SerializedName(SERIALIZED_NAME_SCREEN_SIZE)
  private String screenSize;

  public CrashDetails() {
  }

  public CrashDetails appStartTimestamp(OffsetDateTime appStartTimestamp) {
    this.appStartTimestamp = appStartTimestamp;
    return this;
  }

  /**
   * Application launch timestamp (example: 1985-04-12T23:20:50.52Z). 
   * @return appStartTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAppStartTimestamp() {
    return appStartTimestamp;
  }

  public void setAppStartTimestamp(OffsetDateTime appStartTimestamp) {
    this.appStartTimestamp = appStartTimestamp;
  }


  public CrashDetails carrierCountry(String carrierCountry) {
    this.carrierCountry = carrierCountry;
    return this;
  }

  /**
   * Carrier country code (for mobile devices). 
   * @return carrierCountry
   */
  @javax.annotation.Nullable
  public String getCarrierCountry() {
    return carrierCountry;
  }

  public void setCarrierCountry(String carrierCountry) {
    this.carrierCountry = carrierCountry;
  }


  public CrashDetails carrierName(String carrierName) {
    this.carrierName = carrierName;
    return this;
  }

  /**
   * Carrier name (for mobile devices). 
   * @return carrierName
   */
  @javax.annotation.Nullable
  public String getCarrierName() {
    return carrierName;
  }

  public void setCarrierName(String carrierName) {
    this.carrierName = carrierName;
  }


  public CrashDetails locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Language code (example: en_US). 
   * @return locale
   */
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public CrashDetails osBuild(String osBuild) {
    this.osBuild = osBuild;
    return this;
  }

  /**
   * OS build code (example: LMY47X). 
   * @return osBuild
   */
  @javax.annotation.Nullable
  public String getOsBuild() {
    return osBuild;
  }

  public void setOsBuild(String osBuild) {
    this.osBuild = osBuild;
  }


  public CrashDetails rooted(Boolean rooted) {
    this.rooted = rooted;
    return this;
  }

  /**
   * Whether the device where the crash occurred is rooted or jailbroken 
   * @return rooted
   */
  @javax.annotation.Nonnull
  public Boolean getRooted() {
    return rooted;
  }

  public void setRooted(Boolean rooted) {
    this.rooted = rooted;
  }


  public CrashDetails screenSize(String screenSize) {
    this.screenSize = screenSize;
    return this;
  }

  /**
   * Screen size of the device in pixels (example: 640x480). 
   * @return screenSize
   */
  @javax.annotation.Nonnull
  public String getScreenSize() {
    return screenSize;
  }

  public void setScreenSize(String screenSize) {
    this.screenSize = screenSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrashDetails crashDetails = (CrashDetails) o;
    return Objects.equals(this.appStartTimestamp, crashDetails.appStartTimestamp) &&
        Objects.equals(this.carrierCountry, crashDetails.carrierCountry) &&
        Objects.equals(this.carrierName, crashDetails.carrierName) &&
        Objects.equals(this.locale, crashDetails.locale) &&
        Objects.equals(this.osBuild, crashDetails.osBuild) &&
        Objects.equals(this.rooted, crashDetails.rooted) &&
        Objects.equals(this.screenSize, crashDetails.screenSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appStartTimestamp, carrierCountry, carrierName, locale, osBuild, rooted, screenSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrashDetails {\n");
    sb.append("    appStartTimestamp: ").append(toIndentedString(appStartTimestamp)).append("\n");
    sb.append("    carrierCountry: ").append(toIndentedString(carrierCountry)).append("\n");
    sb.append("    carrierName: ").append(toIndentedString(carrierName)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    osBuild: ").append(toIndentedString(osBuild)).append("\n");
    sb.append("    rooted: ").append(toIndentedString(rooted)).append("\n");
    sb.append("    screenSize: ").append(toIndentedString(screenSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_start_timestamp");
    openapiFields.add("carrier_country");
    openapiFields.add("carrier_name");
    openapiFields.add("locale");
    openapiFields.add("os_build");
    openapiFields.add("rooted");
    openapiFields.add("screen_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("rooted");
    openapiRequiredFields.add("screen_size");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrashDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrashDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrashDetails is not found in the empty JSON string", CrashDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrashDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrashDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CrashDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("carrier_country") != null && !jsonObj.get("carrier_country").isJsonNull()) && !jsonObj.get("carrier_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_country").toString()));
      }
      if ((jsonObj.get("carrier_name") != null && !jsonObj.get("carrier_name").isJsonNull()) && !jsonObj.get("carrier_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_name").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("os_build") != null && !jsonObj.get("os_build").isJsonNull()) && !jsonObj.get("os_build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_build").toString()));
      }
      if (!jsonObj.get("screen_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_size").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrashDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrashDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrashDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrashDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CrashDetails>() {
           @Override
           public void write(JsonWriter out, CrashDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrashDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrashDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrashDetails
   * @throws IOException if the JSON string is invalid with respect to CrashDetails
   */
  public static CrashDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrashDetails.class);
  }

  /**
   * Convert an instance of CrashDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

