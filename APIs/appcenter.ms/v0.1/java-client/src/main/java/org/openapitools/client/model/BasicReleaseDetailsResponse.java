/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner;
import org.openapitools.client.model.ReleasesListLatest200ResponseInnerBuild;
import org.openapitools.client.model.ReleasesListLatest200ResponseInnerDistributionGroupsInner;
import org.openapitools.client.model.ReleasesListLatest200ResponseInnerDistributionStoresInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic information on a release
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasicReleaseDetailsResponse {
  public static final String SERIALIZED_NAME_BUILD = "build";
  @SerializedName(SERIALIZED_NAME_BUILD)
  private ReleasesListLatest200ResponseInnerBuild build;

  /**
   * OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
   */
  @JsonAdapter(DestinationTypeEnum.Adapter.class)
  public enum DestinationTypeEnum {
    GROUP("group"),
    
    STORE("store"),
    
    TESTER("tester");

    private String value;

    DestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationTypeEnum fromValue(String value) {
      for (DestinationTypeEnum b : DestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destination_type";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private DestinationTypeEnum destinationType;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTRIBUTION_GROUPS = "distribution_groups";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_GROUPS)
  private List<ReleasesListLatest200ResponseInnerDistributionGroupsInner> distributionGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISTRIBUTION_STORES = "distribution_stores";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_STORES)
  private List<ReleasesListLatest200ResponseInnerDistributionStoresInner> distributionStores = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FILE_EXTENSION = "file_extension";
  @SerializedName(SERIALIZED_NAME_FILE_EXTENSION)
  private String fileExtension;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_BUILD = "is_external_build";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_BUILD)
  private Boolean isExternalBuild;

  /**
   * The release&#39;s origin
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    HOCKEYAPP("hockeyapp"),
    
    APPCENTER("appcenter");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "short_version";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public BasicReleaseDetailsResponse() {
  }

  public BasicReleaseDetailsResponse build(ReleasesListLatest200ResponseInnerBuild build) {
    this.build = build;
    return this;
  }

  /**
   * Get build
   * @return build
   */
  @javax.annotation.Nullable
  public ReleasesListLatest200ResponseInnerBuild getBuild() {
    return build;
  }

  public void setBuild(ReleasesListLatest200ResponseInnerBuild build) {
    this.build = build;
  }


  public BasicReleaseDetailsResponse destinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
    return this;
  }

  /**
   * OBSOLETE. Will be removed in next version. The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
   * @return destinationType
   */
  @javax.annotation.Nullable
  public DestinationTypeEnum getDestinationType() {
    return destinationType;
  }

  public void setDestinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
  }


  public BasicReleaseDetailsResponse destinations(List<ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner> destinations) {
    this.destinations = destinations;
    return this;
  }

  public BasicReleaseDetailsResponse addDestinationsItem(ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * A list of distribution groups or stores.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner> destinations) {
    this.destinations = destinations;
  }


  public BasicReleaseDetailsResponse distributionGroups(List<ReleasesListLatest200ResponseInnerDistributionGroupsInner> distributionGroups) {
    this.distributionGroups = distributionGroups;
    return this;
  }

  public BasicReleaseDetailsResponse addDistributionGroupsItem(ReleasesListLatest200ResponseInnerDistributionGroupsInner distributionGroupsItem) {
    if (this.distributionGroups == null) {
      this.distributionGroups = new ArrayList<>();
    }
    this.distributionGroups.add(distributionGroupsItem);
    return this;
  }

  /**
   * OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
   * @return distributionGroups
   */
  @javax.annotation.Nullable
  public List<ReleasesListLatest200ResponseInnerDistributionGroupsInner> getDistributionGroups() {
    return distributionGroups;
  }

  public void setDistributionGroups(List<ReleasesListLatest200ResponseInnerDistributionGroupsInner> distributionGroups) {
    this.distributionGroups = distributionGroups;
  }


  public BasicReleaseDetailsResponse distributionStores(List<ReleasesListLatest200ResponseInnerDistributionStoresInner> distributionStores) {
    this.distributionStores = distributionStores;
    return this;
  }

  public BasicReleaseDetailsResponse addDistributionStoresItem(ReleasesListLatest200ResponseInnerDistributionStoresInner distributionStoresItem) {
    if (this.distributionStores == null) {
      this.distributionStores = new ArrayList<>();
    }
    this.distributionStores.add(distributionStoresItem);
    return this;
  }

  /**
   * OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
   * @return distributionStores
   */
  @javax.annotation.Nullable
  public List<ReleasesListLatest200ResponseInnerDistributionStoresInner> getDistributionStores() {
    return distributionStores;
  }

  public void setDistributionStores(List<ReleasesListLatest200ResponseInnerDistributionStoresInner> distributionStores) {
    this.distributionStores = distributionStores;
  }


  public BasicReleaseDetailsResponse enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * This value determines the whether a release currently is enabled or disabled.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public BasicReleaseDetailsResponse fileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
    return this;
  }

  /**
   * The file extension of the main (user-uploaded) package file.
   * @return fileExtension
   */
  @javax.annotation.Nullable
  public String getFileExtension() {
    return fileExtension;
  }

  public void setFileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
  }


  public BasicReleaseDetailsResponse id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID identifying this unique release.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public BasicReleaseDetailsResponse isExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
    return this;
  }

  /**
   * This value determines if a release is external or not.
   * @return isExternalBuild
   */
  @javax.annotation.Nullable
  public Boolean getIsExternalBuild() {
    return isExternalBuild;
  }

  public void setIsExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
  }


  public BasicReleaseDetailsResponse origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The release&#39;s origin
   * @return origin
   */
  @javax.annotation.Nullable
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public BasicReleaseDetailsResponse shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * The release&#39;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml. 
   * @return shortVersion
   */
  @javax.annotation.Nonnull
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public BasicReleaseDetailsResponse uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   * @return uploadedAt
   */
  @javax.annotation.Nonnull
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public BasicReleaseDetailsResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release&#39;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml. 
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicReleaseDetailsResponse basicReleaseDetailsResponse = (BasicReleaseDetailsResponse) o;
    return Objects.equals(this.build, basicReleaseDetailsResponse.build) &&
        Objects.equals(this.destinationType, basicReleaseDetailsResponse.destinationType) &&
        Objects.equals(this.destinations, basicReleaseDetailsResponse.destinations) &&
        Objects.equals(this.distributionGroups, basicReleaseDetailsResponse.distributionGroups) &&
        Objects.equals(this.distributionStores, basicReleaseDetailsResponse.distributionStores) &&
        Objects.equals(this.enabled, basicReleaseDetailsResponse.enabled) &&
        Objects.equals(this.fileExtension, basicReleaseDetailsResponse.fileExtension) &&
        Objects.equals(this.id, basicReleaseDetailsResponse.id) &&
        Objects.equals(this.isExternalBuild, basicReleaseDetailsResponse.isExternalBuild) &&
        Objects.equals(this.origin, basicReleaseDetailsResponse.origin) &&
        Objects.equals(this.shortVersion, basicReleaseDetailsResponse.shortVersion) &&
        Objects.equals(this.uploadedAt, basicReleaseDetailsResponse.uploadedAt) &&
        Objects.equals(this.version, basicReleaseDetailsResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(build, destinationType, destinations, distributionGroups, distributionStores, enabled, fileExtension, id, isExternalBuild, origin, shortVersion, uploadedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicReleaseDetailsResponse {\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    distributionGroups: ").append(toIndentedString(distributionGroups)).append("\n");
    sb.append("    distributionStores: ").append(toIndentedString(distributionStores)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isExternalBuild: ").append(toIndentedString(isExternalBuild)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("build");
    openapiFields.add("destination_type");
    openapiFields.add("destinations");
    openapiFields.add("distribution_groups");
    openapiFields.add("distribution_stores");
    openapiFields.add("enabled");
    openapiFields.add("file_extension");
    openapiFields.add("id");
    openapiFields.add("is_external_build");
    openapiFields.add("origin");
    openapiFields.add("short_version");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("short_version");
    openapiRequiredFields.add("uploaded_at");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasicReleaseDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasicReleaseDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasicReleaseDetailsResponse is not found in the empty JSON string", BasicReleaseDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasicReleaseDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasicReleaseDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BasicReleaseDetailsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `build`
      if (jsonObj.get("build") != null && !jsonObj.get("build").isJsonNull()) {
        ReleasesListLatest200ResponseInnerBuild.validateJsonElement(jsonObj.get("build"));
      }
      if ((jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) && !jsonObj.get("destination_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_type").toString()));
      }
      // validate the optional field `destination_type`
      if (jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) {
        DestinationTypeEnum.validateJsonElement(jsonObj.get("destination_type"));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            ReleasesGetLatestByDistributionGroup200ResponseDestinationsInner.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if (jsonObj.get("distribution_groups") != null && !jsonObj.get("distribution_groups").isJsonNull()) {
        JsonArray jsonArraydistributionGroups = jsonObj.getAsJsonArray("distribution_groups");
        if (jsonArraydistributionGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distribution_groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distribution_groups` to be an array in the JSON string but got `%s`", jsonObj.get("distribution_groups").toString()));
          }

          // validate the optional field `distribution_groups` (array)
          for (int i = 0; i < jsonArraydistributionGroups.size(); i++) {
            ReleasesListLatest200ResponseInnerDistributionGroupsInner.validateJsonElement(jsonArraydistributionGroups.get(i));
          };
        }
      }
      if (jsonObj.get("distribution_stores") != null && !jsonObj.get("distribution_stores").isJsonNull()) {
        JsonArray jsonArraydistributionStores = jsonObj.getAsJsonArray("distribution_stores");
        if (jsonArraydistributionStores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distribution_stores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distribution_stores` to be an array in the JSON string but got `%s`", jsonObj.get("distribution_stores").toString()));
          }

          // validate the optional field `distribution_stores` (array)
          for (int i = 0; i < jsonArraydistributionStores.size(); i++) {
            ReleasesListLatest200ResponseInnerDistributionStoresInner.validateJsonElement(jsonArraydistributionStores.get(i));
          };
        }
      }
      if ((jsonObj.get("file_extension") != null && !jsonObj.get("file_extension").isJsonNull()) && !jsonObj.get("file_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_extension").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        OriginEnum.validateJsonElement(jsonObj.get("origin"));
      }
      if (!jsonObj.get("short_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_version").toString()));
      }
      if (!jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasicReleaseDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasicReleaseDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasicReleaseDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasicReleaseDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BasicReleaseDetailsResponse>() {
           @Override
           public void write(JsonWriter out, BasicReleaseDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasicReleaseDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasicReleaseDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasicReleaseDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to BasicReleaseDetailsResponse
   */
  public static BasicReleaseDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasicReleaseDetailsResponse.class);
  }

  /**
   * Convert an instance of BasicReleaseDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

