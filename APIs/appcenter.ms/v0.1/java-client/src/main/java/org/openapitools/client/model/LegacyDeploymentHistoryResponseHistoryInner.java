/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LegacyCodePushReleaseResponsePackage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a specific release.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegacyDeploymentHistoryResponseHistoryInner {
  public static final String SERIALIZED_NAME_ALL_OF = "allOf";
  @SerializedName(SERIALIZED_NAME_ALL_OF)
  private LegacyCodePushReleaseResponsePackage allOf;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ORIGINAL_DEPLOYMENT = "originalDeployment";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DEPLOYMENT)
  private String originalDeployment;

  public static final String SERIALIZED_NAME_ORIGINAL_LABEL = "originalLabel";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_LABEL)
  private String originalLabel;

  public static final String SERIALIZED_NAME_PACKAGE_HASH = "packageHash";
  @SerializedName(SERIALIZED_NAME_PACKAGE_HASH)
  private String packageHash;

  public LegacyDeploymentHistoryResponseHistoryInner() {
  }

  public LegacyDeploymentHistoryResponseHistoryInner allOf(LegacyCodePushReleaseResponsePackage allOf) {
    this.allOf = allOf;
    return this;
  }

  /**
   * Get allOf
   * @return allOf
   */
  @javax.annotation.Nullable
  public LegacyCodePushReleaseResponsePackage getAllOf() {
    return allOf;
  }

  public void setAllOf(LegacyCodePushReleaseResponsePackage allOf) {
    this.allOf = allOf;
  }


  public LegacyDeploymentHistoryResponseHistoryInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the release.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LegacyDeploymentHistoryResponseHistoryInner originalDeployment(String originalDeployment) {
    this.originalDeployment = originalDeployment;
    return this;
  }

  /**
   * The original deployment of the release, if it&#39;s ever been promoted.
   * @return originalDeployment
   */
  @javax.annotation.Nullable
  public String getOriginalDeployment() {
    return originalDeployment;
  }

  public void setOriginalDeployment(String originalDeployment) {
    this.originalDeployment = originalDeployment;
  }


  public LegacyDeploymentHistoryResponseHistoryInner originalLabel(String originalLabel) {
    this.originalLabel = originalLabel;
    return this;
  }

  /**
   * The original label of the release, if it&#39;s ever been updated.
   * @return originalLabel
   */
  @javax.annotation.Nullable
  public String getOriginalLabel() {
    return originalLabel;
  }

  public void setOriginalLabel(String originalLabel) {
    this.originalLabel = originalLabel;
  }


  public LegacyDeploymentHistoryResponseHistoryInner packageHash(String packageHash) {
    this.packageHash = packageHash;
    return this;
  }

  /**
   * The package&#39;s hash value (internal use).
   * @return packageHash
   */
  @javax.annotation.Nullable
  public String getPackageHash() {
    return packageHash;
  }

  public void setPackageHash(String packageHash) {
    this.packageHash = packageHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegacyDeploymentHistoryResponseHistoryInner legacyDeploymentHistoryResponseHistoryInner = (LegacyDeploymentHistoryResponseHistoryInner) o;
    return Objects.equals(this.allOf, legacyDeploymentHistoryResponseHistoryInner.allOf) &&
        Objects.equals(this.description, legacyDeploymentHistoryResponseHistoryInner.description) &&
        Objects.equals(this.originalDeployment, legacyDeploymentHistoryResponseHistoryInner.originalDeployment) &&
        Objects.equals(this.originalLabel, legacyDeploymentHistoryResponseHistoryInner.originalLabel) &&
        Objects.equals(this.packageHash, legacyDeploymentHistoryResponseHistoryInner.packageHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allOf, description, originalDeployment, originalLabel, packageHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegacyDeploymentHistoryResponseHistoryInner {\n");
    sb.append("    allOf: ").append(toIndentedString(allOf)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    originalDeployment: ").append(toIndentedString(originalDeployment)).append("\n");
    sb.append("    originalLabel: ").append(toIndentedString(originalLabel)).append("\n");
    sb.append("    packageHash: ").append(toIndentedString(packageHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allOf");
    openapiFields.add("description");
    openapiFields.add("originalDeployment");
    openapiFields.add("originalLabel");
    openapiFields.add("packageHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegacyDeploymentHistoryResponseHistoryInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegacyDeploymentHistoryResponseHistoryInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegacyDeploymentHistoryResponseHistoryInner is not found in the empty JSON string", LegacyDeploymentHistoryResponseHistoryInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegacyDeploymentHistoryResponseHistoryInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegacyDeploymentHistoryResponseHistoryInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allOf`
      if (jsonObj.get("allOf") != null && !jsonObj.get("allOf").isJsonNull()) {
        LegacyCodePushReleaseResponsePackage.validateJsonElement(jsonObj.get("allOf"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("originalDeployment") != null && !jsonObj.get("originalDeployment").isJsonNull()) && !jsonObj.get("originalDeployment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalDeployment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalDeployment").toString()));
      }
      if ((jsonObj.get("originalLabel") != null && !jsonObj.get("originalLabel").isJsonNull()) && !jsonObj.get("originalLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalLabel").toString()));
      }
      if ((jsonObj.get("packageHash") != null && !jsonObj.get("packageHash").isJsonNull()) && !jsonObj.get("packageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegacyDeploymentHistoryResponseHistoryInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegacyDeploymentHistoryResponseHistoryInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegacyDeploymentHistoryResponseHistoryInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegacyDeploymentHistoryResponseHistoryInner.class));

       return (TypeAdapter<T>) new TypeAdapter<LegacyDeploymentHistoryResponseHistoryInner>() {
           @Override
           public void write(JsonWriter out, LegacyDeploymentHistoryResponseHistoryInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegacyDeploymentHistoryResponseHistoryInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegacyDeploymentHistoryResponseHistoryInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegacyDeploymentHistoryResponseHistoryInner
   * @throws IOException if the JSON string is invalid with respect to LegacyDeploymentHistoryResponseHistoryInner
   */
  public static LegacyDeploymentHistoryResponseHistoryInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegacyDeploymentHistoryResponseHistoryInner.class);
  }

  /**
   * Convert an instance of LegacyDeploymentHistoryResponseHistoryInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

