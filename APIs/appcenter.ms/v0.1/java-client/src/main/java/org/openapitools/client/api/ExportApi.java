/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExportConfigurationsList200Response;
import org.openapitools.client.model.ExportConfigurationsList200ResponseValuesInner;
import org.openapitools.client.model.ExportConfigurationsList200ResponseValuesInnerExportConfiguration;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exportConfigurationsCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Create export configuration request successfully received. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsCreateCall(String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportConfigurationsList200ResponseValuesInnerExportConfiguration;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportConfigurationsCreateValidateBeforeCall(String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling exportConfigurationsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling exportConfigurationsCreate(Async)");
        }

        // verify the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' is set
        if (exportConfigurationsList200ResponseValuesInnerExportConfiguration == null) {
            throw new ApiException("Missing the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' when calling exportConfigurationsCreate(Async)");
        }

        return exportConfigurationsCreateCall(ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, _callback);

    }

    /**
     * 
     * Create new export configuration
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @return ExportConfigurationsList200ResponseValuesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Create export configuration request successfully received. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ExportConfigurationsList200ResponseValuesInner exportConfigurationsCreate(String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration) throws ApiException {
        ApiResponse<ExportConfigurationsList200ResponseValuesInner> localVarResp = exportConfigurationsCreateWithHttpInfo(ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * Create new export configuration
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @return ApiResponse&lt;ExportConfigurationsList200ResponseValuesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Create export configuration request successfully received. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportConfigurationsList200ResponseValuesInner> exportConfigurationsCreateWithHttpInfo(String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration) throws ApiException {
        okhttp3.Call localVarCall = exportConfigurationsCreateValidateBeforeCall(ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, null);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200ResponseValuesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create new export configuration
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Create export configuration request successfully received. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsCreateAsync(String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration, final ApiCallback<ExportConfigurationsList200ResponseValuesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportConfigurationsCreateValidateBeforeCall(ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, _callback);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200ResponseValuesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportConfigurationsDelete
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsDeleteCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}"
            .replace("{" + "export_configuration_id" + "}", localVarApiClient.escapeString(exportConfigurationId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportConfigurationsDeleteValidateBeforeCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportConfigurationId' is set
        if (exportConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling exportConfigurationsDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling exportConfigurationsDelete(Async)");
        }

        return exportConfigurationsDeleteCall(exportConfigurationId, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public void exportConfigurationsDelete(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        exportConfigurationsDeleteWithHttpInfo(exportConfigurationId, ownerName, appName);
    }

    /**
     * 
     * Delete export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportConfigurationsDeleteWithHttpInfo(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = exportConfigurationsDeleteValidateBeforeCall(exportConfigurationId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsDeleteAsync(String exportConfigurationId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportConfigurationsDeleteValidateBeforeCall(exportConfigurationId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportConfigurationsDisable
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully disabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsDisableCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/disable"
            .replace("{" + "export_configuration_id" + "}", localVarApiClient.escapeString(exportConfigurationId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportConfigurationsDisableValidateBeforeCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportConfigurationId' is set
        if (exportConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsDisable(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling exportConfigurationsDisable(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling exportConfigurationsDisable(Async)");
        }

        return exportConfigurationsDisableCall(exportConfigurationId, ownerName, appName, _callback);

    }

    /**
     * 
     * Disable export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully disabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public void exportConfigurationsDisable(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        exportConfigurationsDisableWithHttpInfo(exportConfigurationId, ownerName, appName);
    }

    /**
     * 
     * Disable export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully disabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportConfigurationsDisableWithHttpInfo(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = exportConfigurationsDisableValidateBeforeCall(exportConfigurationId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disable export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully disabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsDisableAsync(String exportConfigurationId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportConfigurationsDisableValidateBeforeCall(exportConfigurationId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportConfigurationsEnable
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsEnableCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}/enable"
            .replace("{" + "export_configuration_id" + "}", localVarApiClient.escapeString(exportConfigurationId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportConfigurationsEnableValidateBeforeCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportConfigurationId' is set
        if (exportConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsEnable(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling exportConfigurationsEnable(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling exportConfigurationsEnable(Async)");
        }

        return exportConfigurationsEnableCall(exportConfigurationId, ownerName, appName, _callback);

    }

    /**
     * 
     * Enable export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public void exportConfigurationsEnable(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        exportConfigurationsEnableWithHttpInfo(exportConfigurationId, ownerName, appName);
    }

    /**
     * 
     * Enable export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> exportConfigurationsEnableWithHttpInfo(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = exportConfigurationsEnableValidateBeforeCall(exportConfigurationId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enable export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration was successfully enabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsEnableAsync(String exportConfigurationId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportConfigurationsEnableValidateBeforeCall(exportConfigurationId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportConfigurationsGet
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get export configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsGetCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}"
            .replace("{" + "export_configuration_id" + "}", localVarApiClient.escapeString(exportConfigurationId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportConfigurationsGetValidateBeforeCall(String exportConfigurationId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportConfigurationId' is set
        if (exportConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling exportConfigurationsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling exportConfigurationsGet(Async)");
        }

        return exportConfigurationsGetCall(exportConfigurationId, ownerName, appName, _callback);

    }

    /**
     * 
     * Get export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ExportConfigurationsList200ResponseValuesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get export configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ExportConfigurationsList200ResponseValuesInner exportConfigurationsGet(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        ApiResponse<ExportConfigurationsList200ResponseValuesInner> localVarResp = exportConfigurationsGetWithHttpInfo(exportConfigurationId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ExportConfigurationsList200ResponseValuesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get export configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportConfigurationsList200ResponseValuesInner> exportConfigurationsGetWithHttpInfo(String exportConfigurationId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = exportConfigurationsGetValidateBeforeCall(exportConfigurationId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200ResponseValuesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get export configuration. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsGetAsync(String exportConfigurationId, String ownerName, String appName, final ApiCallback<ExportConfigurationsList200ResponseValuesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportConfigurationsGetValidateBeforeCall(exportConfigurationId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200ResponseValuesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportConfigurationsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List export configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportConfigurationsListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling exportConfigurationsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling exportConfigurationsList(Async)");
        }

        return exportConfigurationsListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * List export configurations.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ExportConfigurationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List export configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ExportConfigurationsList200Response exportConfigurationsList(String ownerName, String appName) throws ApiException {
        ApiResponse<ExportConfigurationsList200Response> localVarResp = exportConfigurationsListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * List export configurations.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ExportConfigurationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List export configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportConfigurationsList200Response> exportConfigurationsListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = exportConfigurationsListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List export configurations.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List export configurations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsListAsync(String ownerName, String appName, final ApiCallback<ExportConfigurationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportConfigurationsListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportConfigurationsPartialUpdate
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsPartialUpdateCall(String exportConfigurationId, String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportConfigurationsList200ResponseValuesInnerExportConfiguration;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/export_configurations/{export_configuration_id}"
            .replace("{" + "export_configuration_id" + "}", localVarApiClient.escapeString(exportConfigurationId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportConfigurationsPartialUpdateValidateBeforeCall(String exportConfigurationId, String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportConfigurationId' is set
        if (exportConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'exportConfigurationId' when calling exportConfigurationsPartialUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling exportConfigurationsPartialUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling exportConfigurationsPartialUpdate(Async)");
        }

        // verify the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' is set
        if (exportConfigurationsList200ResponseValuesInnerExportConfiguration == null) {
            throw new ApiException("Missing the required parameter 'exportConfigurationsList200ResponseValuesInnerExportConfiguration' when calling exportConfigurationsPartialUpdate(Async)");
        }

        return exportConfigurationsPartialUpdateCall(exportConfigurationId, ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, _callback);

    }

    /**
     * 
     * Partially update export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @return ExportConfigurationsList200ResponseValuesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ExportConfigurationsList200ResponseValuesInner exportConfigurationsPartialUpdate(String exportConfigurationId, String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration) throws ApiException {
        ApiResponse<ExportConfigurationsList200ResponseValuesInner> localVarResp = exportConfigurationsPartialUpdateWithHttpInfo(exportConfigurationId, ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * Partially update export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @return ApiResponse&lt;ExportConfigurationsList200ResponseValuesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportConfigurationsList200ResponseValuesInner> exportConfigurationsPartialUpdateWithHttpInfo(String exportConfigurationId, String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration) throws ApiException {
        okhttp3.Call localVarCall = exportConfigurationsPartialUpdateValidateBeforeCall(exportConfigurationId, ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, null);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200ResponseValuesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partially update export configuration.
     * @param exportConfigurationId The id of the export configuration. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param exportConfigurationsList200ResponseValuesInnerExportConfiguration Export configurations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Export configuration updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportConfigurationsPartialUpdateAsync(String exportConfigurationId, String ownerName, String appName, ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfigurationsList200ResponseValuesInnerExportConfiguration, final ApiCallback<ExportConfigurationsList200ResponseValuesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportConfigurationsPartialUpdateValidateBeforeCall(exportConfigurationId, ownerName, appName, exportConfigurationsList200ResponseValuesInnerExportConfiguration, _callback);
        Type localVarReturnType = new TypeToken<ExportConfigurationsList200ResponseValuesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
