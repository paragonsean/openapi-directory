/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.ValidatedApiTokenResponseClaimsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ValidatedApiTokenResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValidatedApiTokenResponse {
  public static final String SERIALIZED_NAME_CLAIMS = "claims";
  @SerializedName(SERIALIZED_NAME_CLAIMS)
  private List<ValidatedApiTokenResponseClaimsInner> claims = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRINCIPAL_ID = "principal_id";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ID)
  private UUID principalId;

  /**
   * Indicates the type of the principal (app or user)
   */
  @JsonAdapter(PrincipalTypeEnum.Adapter.class)
  public enum PrincipalTypeEnum {
    APP("app"),
    
    USER("user");

    private String value;

    PrincipalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrincipalTypeEnum fromValue(String value) {
      for (PrincipalTypeEnum b : PrincipalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrincipalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrincipalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrincipalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrincipalTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrincipalTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRINCIPAL_TYPE = "principal_type";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_TYPE)
  private PrincipalTypeEnum principalType;

  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private UUID tokenId;

  /**
   * Gets or Sets tokenScope
   */
  @JsonAdapter(TokenScopeEnum.Adapter.class)
  public enum TokenScopeEnum {
    ALL("all"),
    
    IN_APP_UPDATE("in_app_update"),
    
    VIEWER("viewer");

    private String value;

    TokenScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TokenScopeEnum fromValue(String value) {
      for (TokenScopeEnum b : TokenScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TokenScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TokenScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TokenScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TokenScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TokenScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOKEN_SCOPE = "token_scope";
  @SerializedName(SERIALIZED_NAME_TOKEN_SCOPE)
  private List<TokenScopeEnum> tokenScope = new ArrayList<>();

  public ValidatedApiTokenResponse() {
  }

  public ValidatedApiTokenResponse claims(List<ValidatedApiTokenResponseClaimsInner> claims) {
    this.claims = claims;
    return this;
  }

  public ValidatedApiTokenResponse addClaimsItem(ValidatedApiTokenResponseClaimsInner claimsItem) {
    if (this.claims == null) {
      this.claims = new ArrayList<>();
    }
    this.claims.add(claimsItem);
    return this;
  }

  /**
   * Collection of attributes that describe the principal of the specified API Token
   * @return claims
   */
  @javax.annotation.Nonnull
  public List<ValidatedApiTokenResponseClaimsInner> getClaims() {
    return claims;
  }

  public void setClaims(List<ValidatedApiTokenResponseClaimsInner> claims) {
    this.claims = claims;
  }


  public ValidatedApiTokenResponse principalId(UUID principalId) {
    this.principalId = principalId;
    return this;
  }

  /**
   * The ID of the owner of the API Token (user_id or app_id)
   * @return principalId
   */
  @javax.annotation.Nonnull
  public UUID getPrincipalId() {
    return principalId;
  }

  public void setPrincipalId(UUID principalId) {
    this.principalId = principalId;
  }


  public ValidatedApiTokenResponse principalType(PrincipalTypeEnum principalType) {
    this.principalType = principalType;
    return this;
  }

  /**
   * Indicates the type of the principal (app or user)
   * @return principalType
   */
  @javax.annotation.Nonnull
  public PrincipalTypeEnum getPrincipalType() {
    return principalType;
  }

  public void setPrincipalType(PrincipalTypeEnum principalType) {
    this.principalType = principalType;
  }


  public ValidatedApiTokenResponse tokenId(UUID tokenId) {
    this.tokenId = tokenId;
    return this;
  }

  /**
   * The token&#39;s unique id (UUID)
   * @return tokenId
   */
  @javax.annotation.Nonnull
  public UUID getTokenId() {
    return tokenId;
  }

  public void setTokenId(UUID tokenId) {
    this.tokenId = tokenId;
  }


  public ValidatedApiTokenResponse tokenScope(List<TokenScopeEnum> tokenScope) {
    this.tokenScope = tokenScope;
    return this;
  }

  public ValidatedApiTokenResponse addTokenScopeItem(TokenScopeEnum tokenScopeItem) {
    if (this.tokenScope == null) {
      this.tokenScope = new ArrayList<>();
    }
    this.tokenScope.add(tokenScopeItem);
    return this;
  }

  /**
   * The token&#39;s scope. A list of allowed roles.
   * @return tokenScope
   */
  @javax.annotation.Nonnull
  public List<TokenScopeEnum> getTokenScope() {
    return tokenScope;
  }

  public void setTokenScope(List<TokenScopeEnum> tokenScope) {
    this.tokenScope = tokenScope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidatedApiTokenResponse validatedApiTokenResponse = (ValidatedApiTokenResponse) o;
    return Objects.equals(this.claims, validatedApiTokenResponse.claims) &&
        Objects.equals(this.principalId, validatedApiTokenResponse.principalId) &&
        Objects.equals(this.principalType, validatedApiTokenResponse.principalType) &&
        Objects.equals(this.tokenId, validatedApiTokenResponse.tokenId) &&
        Objects.equals(this.tokenScope, validatedApiTokenResponse.tokenScope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claims, principalId, principalType, tokenId, tokenScope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidatedApiTokenResponse {\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    principalId: ").append(toIndentedString(principalId)).append("\n");
    sb.append("    principalType: ").append(toIndentedString(principalType)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    tokenScope: ").append(toIndentedString(tokenScope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("claims");
    openapiFields.add("principal_id");
    openapiFields.add("principal_type");
    openapiFields.add("token_id");
    openapiFields.add("token_scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("claims");
    openapiRequiredFields.add("principal_id");
    openapiRequiredFields.add("principal_type");
    openapiRequiredFields.add("token_id");
    openapiRequiredFields.add("token_scope");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidatedApiTokenResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidatedApiTokenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidatedApiTokenResponse is not found in the empty JSON string", ValidatedApiTokenResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidatedApiTokenResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidatedApiTokenResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValidatedApiTokenResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("claims").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `claims` to be an array in the JSON string but got `%s`", jsonObj.get("claims").toString()));
      }

      JsonArray jsonArrayclaims = jsonObj.getAsJsonArray("claims");
      // validate the required field `claims` (array)
      for (int i = 0; i < jsonArrayclaims.size(); i++) {
        ValidatedApiTokenResponseClaimsInner.validateJsonElement(jsonArrayclaims.get(i));
      };
      if (!jsonObj.get("principal_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principal_id").toString()));
      }
      if (!jsonObj.get("principal_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principal_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principal_type").toString()));
      }
      // validate the required field `principal_type`
      PrincipalTypeEnum.validateJsonElement(jsonObj.get("principal_type"));
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("token_scope") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("token_scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_scope` to be an array in the JSON string but got `%s`", jsonObj.get("token_scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidatedApiTokenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidatedApiTokenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidatedApiTokenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidatedApiTokenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidatedApiTokenResponse>() {
           @Override
           public void write(JsonWriter out, ValidatedApiTokenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidatedApiTokenResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidatedApiTokenResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidatedApiTokenResponse
   * @throws IOException if the JSON string is invalid with respect to ValidatedApiTokenResponse
   */
  public static ValidatedApiTokenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidatedApiTokenResponse.class);
  }

  /**
   * Convert an instance of ValidatedApiTokenResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

