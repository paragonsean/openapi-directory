/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * test flight group details for the app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppleTestFlightGroupResponse {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_APP_ADAM_ID = "appAdamId";
  @SerializedName(SERIALIZED_NAME_APP_ADAM_ID)
  private BigDecimal appAdamId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_INTERNAL_GROUP = "isInternalGroup";
  @SerializedName(SERIALIZED_NAME_IS_INTERNAL_GROUP)
  private Boolean isInternalGroup;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private BigDecimal providerId;

  public AppleTestFlightGroupResponse() {
  }

  public AppleTestFlightGroupResponse active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * true if group is in active state.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public AppleTestFlightGroupResponse appAdamId(BigDecimal appAdamId) {
    this.appAdamId = appAdamId;
    return this;
  }

  /**
   * apple id of the group.
   * @return appAdamId
   */
  @javax.annotation.Nullable
  public BigDecimal getAppAdamId() {
    return appAdamId;
  }

  public void setAppAdamId(BigDecimal appAdamId) {
    this.appAdamId = appAdamId;
  }


  public AppleTestFlightGroupResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * id of the group.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AppleTestFlightGroupResponse isInternalGroup(Boolean isInternalGroup) {
    this.isInternalGroup = isInternalGroup;
    return this;
  }

  /**
   * true if the group is an internal group.
   * @return isInternalGroup
   */
  @javax.annotation.Nullable
  public Boolean getIsInternalGroup() {
    return isInternalGroup;
  }

  public void setIsInternalGroup(Boolean isInternalGroup) {
    this.isInternalGroup = isInternalGroup;
  }


  public AppleTestFlightGroupResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the group.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AppleTestFlightGroupResponse providerId(BigDecimal providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * provider id of the group.
   * @return providerId
   */
  @javax.annotation.Nullable
  public BigDecimal getProviderId() {
    return providerId;
  }

  public void setProviderId(BigDecimal providerId) {
    this.providerId = providerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppleTestFlightGroupResponse appleTestFlightGroupResponse = (AppleTestFlightGroupResponse) o;
    return Objects.equals(this.active, appleTestFlightGroupResponse.active) &&
        Objects.equals(this.appAdamId, appleTestFlightGroupResponse.appAdamId) &&
        Objects.equals(this.id, appleTestFlightGroupResponse.id) &&
        Objects.equals(this.isInternalGroup, appleTestFlightGroupResponse.isInternalGroup) &&
        Objects.equals(this.name, appleTestFlightGroupResponse.name) &&
        Objects.equals(this.providerId, appleTestFlightGroupResponse.providerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, appAdamId, id, isInternalGroup, name, providerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppleTestFlightGroupResponse {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    appAdamId: ").append(toIndentedString(appAdamId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isInternalGroup: ").append(toIndentedString(isInternalGroup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("appAdamId");
    openapiFields.add("id");
    openapiFields.add("isInternalGroup");
    openapiFields.add("name");
    openapiFields.add("providerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppleTestFlightGroupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppleTestFlightGroupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppleTestFlightGroupResponse is not found in the empty JSON string", AppleTestFlightGroupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppleTestFlightGroupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppleTestFlightGroupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppleTestFlightGroupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppleTestFlightGroupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppleTestFlightGroupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppleTestFlightGroupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AppleTestFlightGroupResponse>() {
           @Override
           public void write(JsonWriter out, AppleTestFlightGroupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppleTestFlightGroupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppleTestFlightGroupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppleTestFlightGroupResponse
   * @throws IOException if the JSON string is invalid with respect to AppleTestFlightGroupResponse
   */
  public static AppleTestFlightGroupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppleTestFlightGroupResponse.class);
  }

  /**
   * Convert an instance of AppleTestFlightGroupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

