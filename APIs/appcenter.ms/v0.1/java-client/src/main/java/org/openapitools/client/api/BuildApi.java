/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BranchConfigurationsDelete200Response;
import org.openapitools.client.model.BranchConfigurationsGet200Response;
import org.openapitools.client.model.BranchConfigurationsUpdateRequest;
import org.openapitools.client.model.BuildConfigurationsGet200Response;
import org.openapitools.client.model.BuildsCreateRequest;
import org.openapitools.client.model.BuildsDistribute200Response;
import org.openapitools.client.model.BuildsDistributeRequest;
import org.openapitools.client.model.BuildsGetDownloadUri200Response;
import org.openapitools.client.model.BuildsGetLog200Response;
import org.openapitools.client.model.BuildsGetStatusByAppId200Response;
import org.openapitools.client.model.BuildsListBranches200ResponseInner;
import org.openapitools.client.model.BuildsListBranches200ResponseInnerLastBuild;
import org.openapitools.client.model.BuildsListBranchesDefaultResponse;
import org.openapitools.client.model.BuildsListToolsetProjects200Response;
import org.openapitools.client.model.BuildsListToolsets200Response;
import org.openapitools.client.model.BuildsListToolsets200ResponseXamarinInner;
import org.openapitools.client.model.BuildsListToolsets200ResponseXcodeInner;
import org.openapitools.client.model.BuildsUpdateRequest;
import org.openapitools.client.model.CommitsListByShaList200ResponseInner;
import org.openapitools.client.model.FileAssetsCreate200Response;
import org.openapitools.client.model.RepositoriesList200ResponseInner;
import org.openapitools.client.model.RepositoryConfigurationsCreateOrUpdateRequest;
import org.openapitools.client.model.RepositoryConfigurationsList200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BuildApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BuildApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BuildApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for branchConfigurationsCreate
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsCreateCall(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = branchConfigurationsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call branchConfigurationsCreateValidateBeforeCall(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling branchConfigurationsCreate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling branchConfigurationsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling branchConfigurationsCreate(Async)");
        }

        // verify the required parameter 'branchConfigurationsUpdateRequest' is set
        if (branchConfigurationsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'branchConfigurationsUpdateRequest' when calling branchConfigurationsCreate(Async)");
        }

        return branchConfigurationsCreateCall(branch, ownerName, appName, branchConfigurationsUpdateRequest, _callback);

    }

    /**
     * 
     * Configures the branch for build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @return BranchConfigurationsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BranchConfigurationsGet200Response branchConfigurationsCreate(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest) throws ApiException {
        ApiResponse<BranchConfigurationsGet200Response> localVarResp = branchConfigurationsCreateWithHttpInfo(branch, ownerName, appName, branchConfigurationsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Configures the branch for build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @return ApiResponse&lt;BranchConfigurationsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchConfigurationsGet200Response> branchConfigurationsCreateWithHttpInfo(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = branchConfigurationsCreateValidateBeforeCall(branch, ownerName, appName, branchConfigurationsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BranchConfigurationsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Configures the branch for build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsCreateAsync(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest, final ApiCallback<BranchConfigurationsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = branchConfigurationsCreateValidateBeforeCall(branch, ownerName, appName, branchConfigurationsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BranchConfigurationsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for branchConfigurationsDelete
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsDeleteCall(String branch, String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call branchConfigurationsDeleteValidateBeforeCall(String branch, String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling branchConfigurationsDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling branchConfigurationsDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling branchConfigurationsDelete(Async)");
        }

        return branchConfigurationsDeleteCall(branch, ownerName, appName, body, _callback);

    }

    /**
     * 
     * Deletes the branch build configuration
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return BranchConfigurationsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BranchConfigurationsDelete200Response branchConfigurationsDelete(String branch, String ownerName, String appName, Object body) throws ApiException {
        ApiResponse<BranchConfigurationsDelete200Response> localVarResp = branchConfigurationsDeleteWithHttpInfo(branch, ownerName, appName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the branch build configuration
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return ApiResponse&lt;BranchConfigurationsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchConfigurationsDelete200Response> branchConfigurationsDeleteWithHttpInfo(String branch, String ownerName, String appName, Object body) throws ApiException {
        okhttp3.Call localVarCall = branchConfigurationsDeleteValidateBeforeCall(branch, ownerName, appName, body, null);
        Type localVarReturnType = new TypeToken<BranchConfigurationsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the branch build configuration
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsDeleteAsync(String branch, String ownerName, String appName, Object body, final ApiCallback<BranchConfigurationsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = branchConfigurationsDeleteValidateBeforeCall(branch, ownerName, appName, body, _callback);
        Type localVarReturnType = new TypeToken<BranchConfigurationsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for branchConfigurationsGet
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsGetCall(String branch, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call branchConfigurationsGetValidateBeforeCall(String branch, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling branchConfigurationsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling branchConfigurationsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling branchConfigurationsGet(Async)");
        }

        return branchConfigurationsGetCall(branch, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the branch configuration
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BranchConfigurationsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BranchConfigurationsGet200Response branchConfigurationsGet(String branch, String ownerName, String appName) throws ApiException {
        ApiResponse<BranchConfigurationsGet200Response> localVarResp = branchConfigurationsGetWithHttpInfo(branch, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the branch configuration
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BranchConfigurationsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchConfigurationsGet200Response> branchConfigurationsGetWithHttpInfo(String branch, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = branchConfigurationsGetValidateBeforeCall(branch, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BranchConfigurationsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the branch configuration
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsGetAsync(String branch, String ownerName, String appName, final ApiCallback<BranchConfigurationsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = branchConfigurationsGetValidateBeforeCall(branch, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BranchConfigurationsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for branchConfigurationsUpdate
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsUpdateCall(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = branchConfigurationsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call branchConfigurationsUpdateValidateBeforeCall(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling branchConfigurationsUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling branchConfigurationsUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling branchConfigurationsUpdate(Async)");
        }

        // verify the required parameter 'branchConfigurationsUpdateRequest' is set
        if (branchConfigurationsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'branchConfigurationsUpdateRequest' when calling branchConfigurationsUpdate(Async)");
        }

        return branchConfigurationsUpdateCall(branch, ownerName, appName, branchConfigurationsUpdateRequest, _callback);

    }

    /**
     * 
     * Reconfigures the branch for build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @return BranchConfigurationsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BranchConfigurationsGet200Response branchConfigurationsUpdate(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest) throws ApiException {
        ApiResponse<BranchConfigurationsGet200Response> localVarResp = branchConfigurationsUpdateWithHttpInfo(branch, ownerName, appName, branchConfigurationsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Reconfigures the branch for build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @return ApiResponse&lt;BranchConfigurationsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchConfigurationsGet200Response> branchConfigurationsUpdateWithHttpInfo(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = branchConfigurationsUpdateValidateBeforeCall(branch, ownerName, appName, branchConfigurationsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BranchConfigurationsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Reconfigures the branch for build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param branchConfigurationsUpdateRequest Parameters of the configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call branchConfigurationsUpdateAsync(String branch, String ownerName, String appName, BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest, final ApiCallback<BranchConfigurationsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = branchConfigurationsUpdateValidateBeforeCall(branch, ownerName, appName, branchConfigurationsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BranchConfigurationsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildConfigurationsGet
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format Configuration format (optional, default to yaml)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildConfigurationsGetCall(String branch, String ownerName, String appName, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildConfigurationsGetValidateBeforeCall(String branch, String ownerName, String appName, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling buildConfigurationsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildConfigurationsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildConfigurationsGet(Async)");
        }

        return buildConfigurationsGetCall(branch, ownerName, appName, format, _callback);

    }

    /**
     * 
     * Gets the build configuration in Azure pipeline YAML format
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format Configuration format (optional, default to yaml)
     * @return BuildConfigurationsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BuildConfigurationsGet200Response buildConfigurationsGet(String branch, String ownerName, String appName, String format) throws ApiException {
        ApiResponse<BuildConfigurationsGet200Response> localVarResp = buildConfigurationsGetWithHttpInfo(branch, ownerName, appName, format);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the build configuration in Azure pipeline YAML format
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format Configuration format (optional, default to yaml)
     * @return ApiResponse&lt;BuildConfigurationsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildConfigurationsGet200Response> buildConfigurationsGetWithHttpInfo(String branch, String ownerName, String appName, String format) throws ApiException {
        okhttp3.Call localVarCall = buildConfigurationsGetValidateBeforeCall(branch, ownerName, appName, format, null);
        Type localVarReturnType = new TypeToken<BuildConfigurationsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the build configuration in Azure pipeline YAML format
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format Configuration format (optional, default to yaml)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildConfigurationsGetAsync(String branch, String ownerName, String appName, String format, final ApiCallback<BuildConfigurationsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildConfigurationsGetValidateBeforeCall(branch, ownerName, appName, format, _callback);
        Type localVarReturnType = new TypeToken<BuildConfigurationsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsCreate
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsCreateRequest Parameters of the build (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created build(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsCreateCall(String branch, String ownerName, String appName, BuildsCreateRequest buildsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsCreateValidateBeforeCall(String branch, String ownerName, String appName, BuildsCreateRequest buildsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling buildsCreate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsCreate(Async)");
        }

        return buildsCreateCall(branch, ownerName, appName, buildsCreateRequest, _callback);

    }

    /**
     * 
     * Create a build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsCreateRequest Parameters of the build (optional)
     * @return BuildsListBranches200ResponseInnerLastBuild
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created build(s) </td><td>  -  </td></tr>
     </table>
     */
    public BuildsListBranches200ResponseInnerLastBuild buildsCreate(String branch, String ownerName, String appName, BuildsCreateRequest buildsCreateRequest) throws ApiException {
        ApiResponse<BuildsListBranches200ResponseInnerLastBuild> localVarResp = buildsCreateWithHttpInfo(branch, ownerName, appName, buildsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsCreateRequest Parameters of the build (optional)
     * @return ApiResponse&lt;BuildsListBranches200ResponseInnerLastBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created build(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsListBranches200ResponseInnerLastBuild> buildsCreateWithHttpInfo(String branch, String ownerName, String appName, BuildsCreateRequest buildsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsCreateValidateBeforeCall(branch, ownerName, appName, buildsCreateRequest, null);
        Type localVarReturnType = new TypeToken<BuildsListBranches200ResponseInnerLastBuild>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a build
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsCreateRequest Parameters of the build (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created build(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsCreateAsync(String branch, String ownerName, String appName, BuildsCreateRequest buildsCreateRequest, final ApiCallback<BuildsListBranches200ResponseInnerLastBuild> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsCreateValidateBeforeCall(branch, ownerName, appName, buildsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<BuildsListBranches200ResponseInnerLastBuild>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsDistribute
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsDistributeRequest The distribution details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsDistributeCall(Integer buildId, String ownerName, String appName, BuildsDistributeRequest buildsDistributeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildsDistributeRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute"
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsDistributeValidateBeforeCall(Integer buildId, String ownerName, String appName, BuildsDistributeRequest buildsDistributeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsDistribute(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsDistribute(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsDistribute(Async)");
        }

        // verify the required parameter 'buildsDistributeRequest' is set
        if (buildsDistributeRequest == null) {
            throw new ApiException("Missing the required parameter 'buildsDistributeRequest' when calling buildsDistribute(Async)");
        }

        return buildsDistributeCall(buildId, ownerName, appName, buildsDistributeRequest, _callback);

    }

    /**
     * 
     * Distribute a build
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsDistributeRequest The distribution details (required)
     * @return BuildsDistribute200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BuildsDistribute200Response buildsDistribute(Integer buildId, String ownerName, String appName, BuildsDistributeRequest buildsDistributeRequest) throws ApiException {
        ApiResponse<BuildsDistribute200Response> localVarResp = buildsDistributeWithHttpInfo(buildId, ownerName, appName, buildsDistributeRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Distribute a build
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsDistributeRequest The distribution details (required)
     * @return ApiResponse&lt;BuildsDistribute200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsDistribute200Response> buildsDistributeWithHttpInfo(Integer buildId, String ownerName, String appName, BuildsDistributeRequest buildsDistributeRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsDistributeValidateBeforeCall(buildId, ownerName, appName, buildsDistributeRequest, null);
        Type localVarReturnType = new TypeToken<BuildsDistribute200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Distribute a build
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsDistributeRequest The distribution details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsDistributeAsync(Integer buildId, String ownerName, String appName, BuildsDistributeRequest buildsDistributeRequest, final ApiCallback<BuildsDistribute200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsDistributeValidateBeforeCall(buildId, ownerName, appName, buildsDistributeRequest, _callback);
        Type localVarReturnType = new TypeToken<BuildsDistribute200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGet
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetCall(Integer buildId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}"
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetValidateBeforeCall(Integer buildId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsGet(Async)");
        }

        return buildsGetCall(buildId, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns the build detail for the given build ID
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BuildsListBranches200ResponseInnerLastBuild
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BuildsListBranches200ResponseInnerLastBuild buildsGet(Integer buildId, String ownerName, String appName) throws ApiException {
        ApiResponse<BuildsListBranches200ResponseInnerLastBuild> localVarResp = buildsGetWithHttpInfo(buildId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the build detail for the given build ID
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BuildsListBranches200ResponseInnerLastBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsListBranches200ResponseInnerLastBuild> buildsGetWithHttpInfo(Integer buildId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsGetValidateBeforeCall(buildId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BuildsListBranches200ResponseInnerLastBuild>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the build detail for the given build ID
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetAsync(Integer buildId, String ownerName, String appName, final ApiCallback<BuildsListBranches200ResponseInnerLastBuild> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetValidateBeforeCall(buildId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BuildsListBranches200ResponseInnerLastBuild>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGetDownloadUri
     * @param buildId The build ID (required)
     * @param downloadType The download type (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetDownloadUriCall(Integer buildId, String downloadType, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}"
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()))
            .replace("{" + "download_type" + "}", localVarApiClient.escapeString(downloadType.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetDownloadUriValidateBeforeCall(Integer buildId, String downloadType, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsGetDownloadUri(Async)");
        }

        // verify the required parameter 'downloadType' is set
        if (downloadType == null) {
            throw new ApiException("Missing the required parameter 'downloadType' when calling buildsGetDownloadUri(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsGetDownloadUri(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsGetDownloadUri(Async)");
        }

        return buildsGetDownloadUriCall(buildId, downloadType, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the download URI
     * @param buildId The build ID (required)
     * @param downloadType The download type (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BuildsGetDownloadUri200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BuildsGetDownloadUri200Response buildsGetDownloadUri(Integer buildId, String downloadType, String ownerName, String appName) throws ApiException {
        ApiResponse<BuildsGetDownloadUri200Response> localVarResp = buildsGetDownloadUriWithHttpInfo(buildId, downloadType, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the download URI
     * @param buildId The build ID (required)
     * @param downloadType The download type (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BuildsGetDownloadUri200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsGetDownloadUri200Response> buildsGetDownloadUriWithHttpInfo(Integer buildId, String downloadType, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsGetDownloadUriValidateBeforeCall(buildId, downloadType, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BuildsGetDownloadUri200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the download URI
     * @param buildId The build ID (required)
     * @param downloadType The download type (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetDownloadUriAsync(Integer buildId, String downloadType, String ownerName, String appName, final ApiCallback<BuildsGetDownloadUri200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetDownloadUriValidateBeforeCall(buildId, downloadType, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BuildsGetDownloadUri200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGetLog
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetLogCall(Integer buildId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs"
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetLogValidateBeforeCall(Integer buildId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsGetLog(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsGetLog(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsGetLog(Async)");
        }

        return buildsGetLogCall(buildId, ownerName, appName, _callback);

    }

    /**
     * 
     * Get the build log
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BuildsGetLog200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BuildsGetLog200Response buildsGetLog(Integer buildId, String ownerName, String appName) throws ApiException {
        ApiResponse<BuildsGetLog200Response> localVarResp = buildsGetLogWithHttpInfo(buildId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the build log
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BuildsGetLog200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsGetLog200Response> buildsGetLogWithHttpInfo(Integer buildId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsGetLogValidateBeforeCall(buildId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BuildsGetLog200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the build log
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetLogAsync(Integer buildId, String ownerName, String appName, final ApiCallback<BuildsGetLog200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetLogValidateBeforeCall(buildId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BuildsGetLog200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsGetStatusByAppId
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for build service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetStatusByAppIdCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/build_service_status"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsGetStatusByAppIdValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsGetStatusByAppId(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsGetStatusByAppId(Async)");
        }

        return buildsGetStatusByAppIdCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Application specific build service status
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BuildsGetStatusByAppId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for build service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BuildsGetStatusByAppId200Response buildsGetStatusByAppId(String ownerName, String appName) throws ApiException {
        ApiResponse<BuildsGetStatusByAppId200Response> localVarResp = buildsGetStatusByAppIdWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Application specific build service status
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BuildsGetStatusByAppId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for build service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsGetStatusByAppId200Response> buildsGetStatusByAppIdWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsGetStatusByAppIdValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BuildsGetStatusByAppId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Application specific build service status
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. Availability for build service status is stored in response schema. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsGetStatusByAppIdAsync(String ownerName, String appName, final ApiCallback<BuildsGetStatusByAppId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsGetStatusByAppIdValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BuildsGetStatusByAppId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsListBranches
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListBranchesCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsListBranchesValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsListBranches(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsListBranches(Async)");
        }

        return buildsListBranchesCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns the list of Git branches for this application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;BuildsListBranches200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<BuildsListBranches200ResponseInner> buildsListBranches(String ownerName, String appName) throws ApiException {
        ApiResponse<List<BuildsListBranches200ResponseInner>> localVarResp = buildsListBranchesWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of Git branches for this application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;BuildsListBranches200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BuildsListBranches200ResponseInner>> buildsListBranchesWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsListBranchesValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<BuildsListBranches200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of Git branches for this application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListBranchesAsync(String ownerName, String appName, final ApiCallback<List<BuildsListBranches200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsListBranchesValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<BuildsListBranches200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsListByBranch
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListByBranchCall(String branch, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsListByBranchValidateBeforeCall(String branch, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling buildsListByBranch(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsListByBranch(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsListByBranch(Async)");
        }

        return buildsListByBranchCall(branch, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns the list of builds for the branch
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;BuildsListBranches200ResponseInnerLastBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<BuildsListBranches200ResponseInnerLastBuild> buildsListByBranch(String branch, String ownerName, String appName) throws ApiException {
        ApiResponse<List<BuildsListBranches200ResponseInnerLastBuild>> localVarResp = buildsListByBranchWithHttpInfo(branch, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of builds for the branch
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;BuildsListBranches200ResponseInnerLastBuild&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BuildsListBranches200ResponseInnerLastBuild>> buildsListByBranchWithHttpInfo(String branch, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsListByBranchValidateBeforeCall(branch, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<BuildsListBranches200ResponseInnerLastBuild>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of builds for the branch
     * @param branch The branch name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListByBranchAsync(String branch, String ownerName, String appName, final ApiCallback<List<BuildsListBranches200ResponseInnerLastBuild>> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsListByBranchValidateBeforeCall(branch, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<BuildsListBranches200ResponseInnerLastBuild>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsListToolsetProjects
     * @param branch The branch name (required)
     * @param os The desired OS for the project scan; normally the same as the app OS (required)
     * @param platform The desired platform for the project scan (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param maxSearchDepth The depth of the repository to search for project files (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListToolsetProjectsCall(String branch, String os, String platform, String ownerName, String appName, Integer maxSearchDepth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects"
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (os != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("os", os));
        }

        if (platform != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platform", platform));
        }

        if (maxSearchDepth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSearchDepth", maxSearchDepth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsListToolsetProjectsValidateBeforeCall(String branch, String os, String platform, String ownerName, String appName, Integer maxSearchDepth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling buildsListToolsetProjects(Async)");
        }

        // verify the required parameter 'os' is set
        if (os == null) {
            throw new ApiException("Missing the required parameter 'os' when calling buildsListToolsetProjects(Async)");
        }

        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling buildsListToolsetProjects(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsListToolsetProjects(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsListToolsetProjects(Async)");
        }

        return buildsListToolsetProjectsCall(branch, os, platform, ownerName, appName, maxSearchDepth, _callback);

    }

    /**
     * 
     * Returns the projects in the repository for the branch, for all toolsets
     * @param branch The branch name (required)
     * @param os The desired OS for the project scan; normally the same as the app OS (required)
     * @param platform The desired platform for the project scan (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param maxSearchDepth The depth of the repository to search for project files (optional)
     * @return BuildsListToolsetProjects200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BuildsListToolsetProjects200Response buildsListToolsetProjects(String branch, String os, String platform, String ownerName, String appName, Integer maxSearchDepth) throws ApiException {
        ApiResponse<BuildsListToolsetProjects200Response> localVarResp = buildsListToolsetProjectsWithHttpInfo(branch, os, platform, ownerName, appName, maxSearchDepth);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the projects in the repository for the branch, for all toolsets
     * @param branch The branch name (required)
     * @param os The desired OS for the project scan; normally the same as the app OS (required)
     * @param platform The desired platform for the project scan (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param maxSearchDepth The depth of the repository to search for project files (optional)
     * @return ApiResponse&lt;BuildsListToolsetProjects200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsListToolsetProjects200Response> buildsListToolsetProjectsWithHttpInfo(String branch, String os, String platform, String ownerName, String appName, Integer maxSearchDepth) throws ApiException {
        okhttp3.Call localVarCall = buildsListToolsetProjectsValidateBeforeCall(branch, os, platform, ownerName, appName, maxSearchDepth, null);
        Type localVarReturnType = new TypeToken<BuildsListToolsetProjects200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the projects in the repository for the branch, for all toolsets
     * @param branch The branch name (required)
     * @param os The desired OS for the project scan; normally the same as the app OS (required)
     * @param platform The desired platform for the project scan (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param maxSearchDepth The depth of the repository to search for project files (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListToolsetProjectsAsync(String branch, String os, String platform, String ownerName, String appName, Integer maxSearchDepth, final ApiCallback<BuildsListToolsetProjects200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsListToolsetProjectsValidateBeforeCall(branch, os, platform, ownerName, appName, maxSearchDepth, _callback);
        Type localVarReturnType = new TypeToken<BuildsListToolsetProjects200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsListToolsets
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param tools Toolset name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListToolsetsCall(String ownerName, String appName, String tools, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/toolsets"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tools != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tools", tools));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsListToolsetsValidateBeforeCall(String ownerName, String appName, String tools, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsListToolsets(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsListToolsets(Async)");
        }

        return buildsListToolsetsCall(ownerName, appName, tools, _callback);

    }

    /**
     * 
     * Returns available toolsets for application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param tools Toolset name (optional)
     * @return BuildsListToolsets200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BuildsListToolsets200Response buildsListToolsets(String ownerName, String appName, String tools) throws ApiException {
        ApiResponse<BuildsListToolsets200Response> localVarResp = buildsListToolsetsWithHttpInfo(ownerName, appName, tools);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns available toolsets for application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param tools Toolset name (optional)
     * @return ApiResponse&lt;BuildsListToolsets200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsListToolsets200Response> buildsListToolsetsWithHttpInfo(String ownerName, String appName, String tools) throws ApiException {
        okhttp3.Call localVarCall = buildsListToolsetsValidateBeforeCall(ownerName, appName, tools, null);
        Type localVarReturnType = new TypeToken<BuildsListToolsets200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns available toolsets for application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param tools Toolset name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsListToolsetsAsync(String ownerName, String appName, String tools, final ApiCallback<BuildsListToolsets200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsListToolsetsValidateBeforeCall(ownerName, appName, tools, _callback);
        Type localVarReturnType = new TypeToken<BuildsListToolsets200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsListXamarinSDKBundles
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call buildsListXamarinSDKBundlesCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsListXamarinSDKBundlesValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsListXamarinSDKBundles(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsListXamarinSDKBundles(Async)");
        }

        return buildsListXamarinSDKBundlesCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the Xamarin SDK bundles available to this app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;BuildsListToolsets200ResponseXamarinInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<BuildsListToolsets200ResponseXamarinInner> buildsListXamarinSDKBundles(String ownerName, String appName) throws ApiException {
        ApiResponse<List<BuildsListToolsets200ResponseXamarinInner>> localVarResp = buildsListXamarinSDKBundlesWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Xamarin SDK bundles available to this app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;BuildsListToolsets200ResponseXamarinInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<BuildsListToolsets200ResponseXamarinInner>> buildsListXamarinSDKBundlesWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsListXamarinSDKBundlesValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<BuildsListToolsets200ResponseXamarinInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Xamarin SDK bundles available to this app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call buildsListXamarinSDKBundlesAsync(String ownerName, String appName, final ApiCallback<List<BuildsListToolsets200ResponseXamarinInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsListXamarinSDKBundlesValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<BuildsListToolsets200ResponseXamarinInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsListXcodeVersions
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call buildsListXcodeVersionsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/xcode_versions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsListXcodeVersionsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsListXcodeVersions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsListXcodeVersions(Async)");
        }

        return buildsListXcodeVersionsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the Xcode versions available to this app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;BuildsListToolsets200ResponseXcodeInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<BuildsListToolsets200ResponseXcodeInner> buildsListXcodeVersions(String ownerName, String appName) throws ApiException {
        ApiResponse<List<BuildsListToolsets200ResponseXcodeInner>> localVarResp = buildsListXcodeVersionsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Xcode versions available to this app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;BuildsListToolsets200ResponseXcodeInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<BuildsListToolsets200ResponseXcodeInner>> buildsListXcodeVersionsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = buildsListXcodeVersionsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<BuildsListToolsets200ResponseXcodeInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Xcode versions available to this app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call buildsListXcodeVersionsAsync(String ownerName, String appName, final ApiCallback<List<BuildsListToolsets200ResponseXcodeInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsListXcodeVersionsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<BuildsListToolsets200ResponseXcodeInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsUpdate
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsUpdateCall(Integer buildId, String ownerName, String appName, BuildsUpdateRequest buildsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = buildsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}"
            .replace("{" + "build_id" + "}", localVarApiClient.escapeString(buildId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsUpdateValidateBeforeCall(Integer buildId, String ownerName, String appName, BuildsUpdateRequest buildsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'buildId' is set
        if (buildId == null) {
            throw new ApiException("Missing the required parameter 'buildId' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling buildsUpdate(Async)");
        }

        // verify the required parameter 'buildsUpdateRequest' is set
        if (buildsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'buildsUpdateRequest' when calling buildsUpdate(Async)");
        }

        return buildsUpdateCall(buildId, ownerName, appName, buildsUpdateRequest, _callback);

    }

    /**
     * 
     * Cancels a build
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsUpdateRequest  (required)
     * @return BuildsListBranches200ResponseInnerLastBuild
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public BuildsListBranches200ResponseInnerLastBuild buildsUpdate(Integer buildId, String ownerName, String appName, BuildsUpdateRequest buildsUpdateRequest) throws ApiException {
        ApiResponse<BuildsListBranches200ResponseInnerLastBuild> localVarResp = buildsUpdateWithHttpInfo(buildId, ownerName, appName, buildsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Cancels a build
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsUpdateRequest  (required)
     * @return ApiResponse&lt;BuildsListBranches200ResponseInnerLastBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BuildsListBranches200ResponseInnerLastBuild> buildsUpdateWithHttpInfo(Integer buildId, String ownerName, String appName, BuildsUpdateRequest buildsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = buildsUpdateValidateBeforeCall(buildId, ownerName, appName, buildsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BuildsListBranches200ResponseInnerLastBuild>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Cancels a build
     * @param buildId The build ID (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param buildsUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsUpdateAsync(Integer buildId, String ownerName, String appName, BuildsUpdateRequest buildsUpdateRequest, final ApiCallback<BuildsListBranches200ResponseInnerLastBuild> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsUpdateValidateBeforeCall(buildId, ownerName, appName, buildsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BuildsListBranches200ResponseInnerLastBuild>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for buildsWebhook
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsWebhookCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/public/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call buildsWebhookValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return buildsWebhookCall(body, _callback);

    }

    /**
     * 
     * Public webhook sink
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public void buildsWebhook(Object body) throws ApiException {
        buildsWebhookWithHttpInfo(body);
    }

    /**
     * 
     * Public webhook sink
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> buildsWebhookWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = buildsWebhookValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Public webhook sink
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call buildsWebhookAsync(Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = buildsWebhookValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for commitsListByShaList
     * @param hashes A collection of commit SHAs comma-delimited (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitsListByShaListCall(List<String> hashes, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/commits/batch"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hashes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "hashes", hashes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call commitsListByShaListValidateBeforeCall(List<String> hashes, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hashes' is set
        if (hashes == null) {
            throw new ApiException("Missing the required parameter 'hashes' when calling commitsListByShaList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling commitsListByShaList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling commitsListByShaList(Async)");
        }

        return commitsListByShaListCall(hashes, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns commit information for a batch of shas
     * @param hashes A collection of commit SHAs comma-delimited (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;CommitsListByShaList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public List<CommitsListByShaList200ResponseInner> commitsListByShaList(List<String> hashes, String ownerName, String appName) throws ApiException {
        ApiResponse<List<CommitsListByShaList200ResponseInner>> localVarResp = commitsListByShaListWithHttpInfo(hashes, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns commit information for a batch of shas
     * @param hashes A collection of commit SHAs comma-delimited (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;CommitsListByShaList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CommitsListByShaList200ResponseInner>> commitsListByShaListWithHttpInfo(List<String> hashes, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = commitsListByShaListValidateBeforeCall(hashes, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<CommitsListByShaList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns commit information for a batch of shas
     * @param hashes A collection of commit SHAs comma-delimited (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call commitsListByShaListAsync(List<String> hashes, String ownerName, String appName, final ApiCallback<List<CommitsListByShaList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = commitsListByShaListValidateBeforeCall(hashes, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<CommitsListByShaList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileAssetsCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileAssetsCreateCall(String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/file_asset"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileAssetsCreateValidateBeforeCall(String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling fileAssetsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling fileAssetsCreate(Async)");
        }

        return fileAssetsCreateCall(ownerName, appName, body, _callback);

    }

    /**
     * 
     * Create a new asset to upload a file
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return FileAssetsCreate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public FileAssetsCreate200Response fileAssetsCreate(String ownerName, String appName, Object body) throws ApiException {
        ApiResponse<FileAssetsCreate200Response> localVarResp = fileAssetsCreateWithHttpInfo(ownerName, appName, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new asset to upload a file
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return ApiResponse&lt;FileAssetsCreate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileAssetsCreate200Response> fileAssetsCreateWithHttpInfo(String ownerName, String appName, Object body) throws ApiException {
        okhttp3.Call localVarCall = fileAssetsCreateValidateBeforeCall(ownerName, appName, body, null);
        Type localVarReturnType = new TypeToken<FileAssetsCreate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new asset to upload a file
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileAssetsCreateAsync(String ownerName, String appName, Object body, final ApiCallback<FileAssetsCreate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileAssetsCreateValidateBeforeCall(ownerName, appName, body, _callback);
        Type localVarReturnType = new TypeToken<FileAssetsCreate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoriesList
     * @param sourceHost The source host (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param vstsAccountName Filter repositories only for specified account and project, \&quot;vstsProjectId\&quot; is required (optional)
     * @param vstsProjectId Filter repositories only for specified account and project, \&quot;vstsAccountName\&quot; is required (optional)
     * @param serviceConnectionId The id of the service connection (private). Required for GitLab self-hosted repositories (optional)
     * @param form The selected form of the object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesListCall(String sourceHost, String ownerName, String appName, String vstsAccountName, String vstsProjectId, String serviceConnectionId, String form, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories"
            .replace("{" + "source_host" + "}", localVarApiClient.escapeString(sourceHost.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vstsAccountName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vstsAccountName", vstsAccountName));
        }

        if (vstsProjectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vstsProjectId", vstsProjectId));
        }

        if (serviceConnectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_connection_id", serviceConnectionId));
        }

        if (form != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("form", form));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoriesListValidateBeforeCall(String sourceHost, String ownerName, String appName, String vstsAccountName, String vstsProjectId, String serviceConnectionId, String form, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceHost' is set
        if (sourceHost == null) {
            throw new ApiException("Missing the required parameter 'sourceHost' when calling repositoriesList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling repositoriesList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling repositoriesList(Async)");
        }

        return repositoriesListCall(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, serviceConnectionId, form, _callback);

    }

    /**
     * 
     * Gets the repositories available from the source code host
     * @param sourceHost The source host (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param vstsAccountName Filter repositories only for specified account and project, \&quot;vstsProjectId\&quot; is required (optional)
     * @param vstsProjectId Filter repositories only for specified account and project, \&quot;vstsAccountName\&quot; is required (optional)
     * @param serviceConnectionId The id of the service connection (private). Required for GitLab self-hosted repositories (optional)
     * @param form The selected form of the object (optional)
     * @return List&lt;RepositoriesList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<RepositoriesList200ResponseInner> repositoriesList(String sourceHost, String ownerName, String appName, String vstsAccountName, String vstsProjectId, String serviceConnectionId, String form) throws ApiException {
        ApiResponse<List<RepositoriesList200ResponseInner>> localVarResp = repositoriesListWithHttpInfo(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, serviceConnectionId, form);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the repositories available from the source code host
     * @param sourceHost The source host (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param vstsAccountName Filter repositories only for specified account and project, \&quot;vstsProjectId\&quot; is required (optional)
     * @param vstsProjectId Filter repositories only for specified account and project, \&quot;vstsAccountName\&quot; is required (optional)
     * @param serviceConnectionId The id of the service connection (private). Required for GitLab self-hosted repositories (optional)
     * @param form The selected form of the object (optional)
     * @return ApiResponse&lt;List&lt;RepositoriesList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RepositoriesList200ResponseInner>> repositoriesListWithHttpInfo(String sourceHost, String ownerName, String appName, String vstsAccountName, String vstsProjectId, String serviceConnectionId, String form) throws ApiException {
        okhttp3.Call localVarCall = repositoriesListValidateBeforeCall(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, serviceConnectionId, form, null);
        Type localVarReturnType = new TypeToken<List<RepositoriesList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the repositories available from the source code host
     * @param sourceHost The source host (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param vstsAccountName Filter repositories only for specified account and project, \&quot;vstsProjectId\&quot; is required (optional)
     * @param vstsProjectId Filter repositories only for specified account and project, \&quot;vstsAccountName\&quot; is required (optional)
     * @param serviceConnectionId The id of the service connection (private). Required for GitLab self-hosted repositories (optional)
     * @param form The selected form of the object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoriesListAsync(String sourceHost, String ownerName, String appName, String vstsAccountName, String vstsProjectId, String serviceConnectionId, String form, final ApiCallback<List<RepositoriesList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoriesListValidateBeforeCall(sourceHost, ownerName, appName, vstsAccountName, vstsProjectId, serviceConnectionId, form, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoriesList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoryConfigurationsCreateOrUpdate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param repositoryConfigurationsCreateOrUpdateRequest The repository information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoryConfigurationsCreateOrUpdateCall(String ownerName, String appName, RepositoryConfigurationsCreateOrUpdateRequest repositoryConfigurationsCreateOrUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = repositoryConfigurationsCreateOrUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/repo_config"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoryConfigurationsCreateOrUpdateValidateBeforeCall(String ownerName, String appName, RepositoryConfigurationsCreateOrUpdateRequest repositoryConfigurationsCreateOrUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling repositoryConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling repositoryConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'repositoryConfigurationsCreateOrUpdateRequest' is set
        if (repositoryConfigurationsCreateOrUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'repositoryConfigurationsCreateOrUpdateRequest' when calling repositoryConfigurationsCreateOrUpdate(Async)");
        }

        return repositoryConfigurationsCreateOrUpdateCall(ownerName, appName, repositoryConfigurationsCreateOrUpdateRequest, _callback);

    }

    /**
     * 
     * Configures the repository for build
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param repositoryConfigurationsCreateOrUpdateRequest The repository information (required)
     * @return BranchConfigurationsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BranchConfigurationsDelete200Response repositoryConfigurationsCreateOrUpdate(String ownerName, String appName, RepositoryConfigurationsCreateOrUpdateRequest repositoryConfigurationsCreateOrUpdateRequest) throws ApiException {
        ApiResponse<BranchConfigurationsDelete200Response> localVarResp = repositoryConfigurationsCreateOrUpdateWithHttpInfo(ownerName, appName, repositoryConfigurationsCreateOrUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Configures the repository for build
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param repositoryConfigurationsCreateOrUpdateRequest The repository information (required)
     * @return ApiResponse&lt;BranchConfigurationsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchConfigurationsDelete200Response> repositoryConfigurationsCreateOrUpdateWithHttpInfo(String ownerName, String appName, RepositoryConfigurationsCreateOrUpdateRequest repositoryConfigurationsCreateOrUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = repositoryConfigurationsCreateOrUpdateValidateBeforeCall(ownerName, appName, repositoryConfigurationsCreateOrUpdateRequest, null);
        Type localVarReturnType = new TypeToken<BranchConfigurationsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Configures the repository for build
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param repositoryConfigurationsCreateOrUpdateRequest The repository information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoryConfigurationsCreateOrUpdateAsync(String ownerName, String appName, RepositoryConfigurationsCreateOrUpdateRequest repositoryConfigurationsCreateOrUpdateRequest, final ApiCallback<BranchConfigurationsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoryConfigurationsCreateOrUpdateValidateBeforeCall(ownerName, appName, repositoryConfigurationsCreateOrUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<BranchConfigurationsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoryConfigurationsDelete
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoryConfigurationsDeleteCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/repo_config"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoryConfigurationsDeleteValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling repositoryConfigurationsDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling repositoryConfigurationsDelete(Async)");
        }

        return repositoryConfigurationsDeleteCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Removes the configuration for the repository
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return BranchConfigurationsDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public BranchConfigurationsDelete200Response repositoryConfigurationsDelete(String ownerName, String appName) throws ApiException {
        ApiResponse<BranchConfigurationsDelete200Response> localVarResp = repositoryConfigurationsDeleteWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the configuration for the repository
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;BranchConfigurationsDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchConfigurationsDelete200Response> repositoryConfigurationsDeleteWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = repositoryConfigurationsDeleteValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<BranchConfigurationsDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the configuration for the repository
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoryConfigurationsDeleteAsync(String ownerName, String appName, final ApiCallback<BranchConfigurationsDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoryConfigurationsDeleteValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<BranchConfigurationsDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repositoryConfigurationsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeInactive Include inactive configurations if none are active (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of repository configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoryConfigurationsListCall(String ownerName, String appName, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/repo_config"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repositoryConfigurationsListValidateBeforeCall(String ownerName, String appName, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling repositoryConfigurationsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling repositoryConfigurationsList(Async)");
        }

        return repositoryConfigurationsListCall(ownerName, appName, includeInactive, _callback);

    }

    /**
     * 
     * Returns the repository build configuration status of the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeInactive Include inactive configurations if none are active (optional)
     * @return List&lt;RepositoryConfigurationsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of repository configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<RepositoryConfigurationsList200ResponseInner> repositoryConfigurationsList(String ownerName, String appName, Boolean includeInactive) throws ApiException {
        ApiResponse<List<RepositoryConfigurationsList200ResponseInner>> localVarResp = repositoryConfigurationsListWithHttpInfo(ownerName, appName, includeInactive);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the repository build configuration status of the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeInactive Include inactive configurations if none are active (optional)
     * @return ApiResponse&lt;List&lt;RepositoryConfigurationsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of repository configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RepositoryConfigurationsList200ResponseInner>> repositoryConfigurationsListWithHttpInfo(String ownerName, String appName, Boolean includeInactive) throws ApiException {
        okhttp3.Call localVarCall = repositoryConfigurationsListValidateBeforeCall(ownerName, appName, includeInactive, null);
        Type localVarReturnType = new TypeToken<List<RepositoryConfigurationsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the repository build configuration status of the app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeInactive Include inactive configurations if none are active (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of repository configurations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repositoryConfigurationsListAsync(String ownerName, String appName, Boolean includeInactive, final ApiCallback<List<RepositoryConfigurationsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = repositoryConfigurationsListValidateBeforeCall(ownerName, appName, includeInactive, _callback);
        Type localVarReturnType = new TypeToken<List<RepositoryConfigurationsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
