/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReleaseCreateRequestAppexProvisioningProfilesInner;
import org.openapitools.client.model.ReleaseCreateRequestIpaUuidsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request containing information for creating a release.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReleaseCreateRequest {
  public static final String SERIALIZED_NAME_APPEX_PROVISIONING_PROFILES = "appex_provisioning_profiles";
  @SerializedName(SERIALIZED_NAME_APPEX_PROVISIONING_PROFILES)
  private List<ReleaseCreateRequestAppexProvisioningProfilesInner> appexProvisioningProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUILD_VERSION = "build_version";
  @SerializedName(SERIALIZED_NAME_BUILD_VERSION)
  private String buildVersion;

  public static final String SERIALIZED_NAME_DEVICE_FAMILY = "device_family";
  @SerializedName(SERIALIZED_NAME_DEVICE_FAMILY)
  private String deviceFamily;

  public static final String SERIALIZED_NAME_FILE_EXTENSION = "file_extension";
  @SerializedName(SERIALIZED_NAME_FILE_EXTENSION)
  private String fileExtension;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_ICON_ASSET_ID = "icon_asset_id";
  @SerializedName(SERIALIZED_NAME_ICON_ASSET_ID)
  private String iconAssetId;

  public static final String SERIALIZED_NAME_IPA_UUIDS = "ipa_uuids";
  @SerializedName(SERIALIZED_NAME_IPA_UUIDS)
  private List<ReleaseCreateRequestIpaUuidsInner> ipaUuids = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private List<String> languages = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUM_OS_VERSION = "minimum_os_version";
  @SerializedName(SERIALIZED_NAME_MINIMUM_OS_VERSION)
  private String minimumOsVersion;

  public static final String SERIALIZED_NAME_PACKAGE_URL = "package_url";
  @SerializedName(SERIALIZED_NAME_PACKAGE_URL)
  private String packageUrl;

  public static final String SERIALIZED_NAME_PROVISION = "provision";
  @SerializedName(SERIALIZED_NAME_PROVISION)
  private ReleaseCreateRequestAppexProvisioningProfilesInner provision;

  public static final String SERIALIZED_NAME_PROXY_FLOW = "proxy_flow";
  @SerializedName(SERIALIZED_NAME_PROXY_FLOW)
  private Boolean proxyFlow;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_UPLOAD_ID = "upload_id";
  @SerializedName(SERIALIZED_NAME_UPLOAD_ID)
  private String uploadId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ReleaseCreateRequest() {
  }

  public ReleaseCreateRequest appexProvisioningProfiles(List<ReleaseCreateRequestAppexProvisioningProfilesInner> appexProvisioningProfiles) {
    this.appexProvisioningProfiles = appexProvisioningProfiles;
    return this;
  }

  public ReleaseCreateRequest addAppexProvisioningProfilesItem(ReleaseCreateRequestAppexProvisioningProfilesInner appexProvisioningProfilesItem) {
    if (this.appexProvisioningProfiles == null) {
      this.appexProvisioningProfiles = new ArrayList<>();
    }
    this.appexProvisioningProfiles.add(appexProvisioningProfilesItem);
    return this;
  }

  /**
   * iOS app extension provisioning profiles included in the release.
   * @return appexProvisioningProfiles
   */
  @javax.annotation.Nullable
  public List<ReleaseCreateRequestAppexProvisioningProfilesInner> getAppexProvisioningProfiles() {
    return appexProvisioningProfiles;
  }

  public void setAppexProvisioningProfiles(List<ReleaseCreateRequestAppexProvisioningProfilesInner> appexProvisioningProfiles) {
    this.appexProvisioningProfiles = appexProvisioningProfiles;
  }


  public ReleaseCreateRequest buildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
    return this;
  }

  /**
   * The release&#39;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml. 
   * @return buildVersion
   */
  @javax.annotation.Nullable
  public String getBuildVersion() {
    return buildVersion;
  }

  public void setBuildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
  }


  public ReleaseCreateRequest deviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
    return this;
  }

  /**
   * The release&#39;s device family.
   * @return deviceFamily
   */
  @javax.annotation.Nullable
  public String getDeviceFamily() {
    return deviceFamily;
  }

  public void setDeviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
  }


  public ReleaseCreateRequest fileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
    return this;
  }

  /**
   * The file extension of the asset. Does not include the initial period.
   * @return fileExtension
   */
  @javax.annotation.Nullable
  public String getFileExtension() {
    return fileExtension;
  }

  public void setFileExtension(String fileExtension) {
    this.fileExtension = fileExtension;
  }


  public ReleaseCreateRequest fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * MD5 checksum of the release binary.
   * @return fingerprint
   */
  @javax.annotation.Nonnull
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public ReleaseCreateRequest iconAssetId(String iconAssetId) {
    this.iconAssetId = iconAssetId;
    return this;
  }

  /**
   * The assetId associated with the icon uploaded to app center file upload service.
   * @return iconAssetId
   */
  @javax.annotation.Nullable
  public String getIconAssetId() {
    return iconAssetId;
  }

  public void setIconAssetId(String iconAssetId) {
    this.iconAssetId = iconAssetId;
  }


  public ReleaseCreateRequest ipaUuids(List<ReleaseCreateRequestIpaUuidsInner> ipaUuids) {
    this.ipaUuids = ipaUuids;
    return this;
  }

  public ReleaseCreateRequest addIpaUuidsItem(ReleaseCreateRequestIpaUuidsInner ipaUuidsItem) {
    if (this.ipaUuids == null) {
      this.ipaUuids = new ArrayList<>();
    }
    this.ipaUuids.add(ipaUuidsItem);
    return this;
  }

  /**
   * A list of UUIDs for architectures for an iOS app.
   * @return ipaUuids
   */
  @javax.annotation.Nullable
  public List<ReleaseCreateRequestIpaUuidsInner> getIpaUuids() {
    return ipaUuids;
  }

  public void setIpaUuids(List<ReleaseCreateRequestIpaUuidsInner> ipaUuids) {
    this.ipaUuids = ipaUuids;
  }


  public ReleaseCreateRequest languages(List<String> languages) {
    this.languages = languages;
    return this;
  }

  public ReleaseCreateRequest addLanguagesItem(String languagesItem) {
    if (this.languages == null) {
      this.languages = new ArrayList<>();
    }
    this.languages.add(languagesItem);
    return this;
  }

  /**
   * The languages supported by the release. Limited to 510 characters in a serialized array.
   * @return languages
   */
  @javax.annotation.Nullable
  public List<String> getLanguages() {
    return languages;
  }

  public void setLanguages(List<String> languages) {
    this.languages = languages;
  }


  public ReleaseCreateRequest minimumOsVersion(String minimumOsVersion) {
    this.minimumOsVersion = minimumOsVersion;
    return this;
  }

  /**
   * The release&#39;s minimum required operating system.
   * @return minimumOsVersion
   */
  @javax.annotation.Nullable
  public String getMinimumOsVersion() {
    return minimumOsVersion;
  }

  public void setMinimumOsVersion(String minimumOsVersion) {
    this.minimumOsVersion = minimumOsVersion;
  }


  public ReleaseCreateRequest packageUrl(String packageUrl) {
    this.packageUrl = packageUrl;
    return this;
  }

  /**
   * The URL to the release&#39;s binary.
   * @return packageUrl
   */
  @javax.annotation.Nullable
  public String getPackageUrl() {
    return packageUrl;
  }

  public void setPackageUrl(String packageUrl) {
    this.packageUrl = packageUrl;
  }


  public ReleaseCreateRequest provision(ReleaseCreateRequestAppexProvisioningProfilesInner provision) {
    this.provision = provision;
    return this;
  }

  /**
   * Get provision
   * @return provision
   */
  @javax.annotation.Nullable
  public ReleaseCreateRequestAppexProvisioningProfilesInner getProvision() {
    return provision;
  }

  public void setProvision(ReleaseCreateRequestAppexProvisioningProfilesInner provision) {
    this.provision = provision;
  }


  public ReleaseCreateRequest proxyFlow(Boolean proxyFlow) {
    this.proxyFlow = proxyFlow;
    return this;
  }

  /**
   * If true this release was uploaded to the AKS upload proxy
   * @return proxyFlow
   */
  @javax.annotation.Nullable
  public Boolean getProxyFlow() {
    return proxyFlow;
  }

  public void setProxyFlow(Boolean proxyFlow) {
    this.proxyFlow = proxyFlow;
  }


  public ReleaseCreateRequest size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The release&#39;s size in bytes.
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public ReleaseCreateRequest uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

  /**
   * The identifier of the app&#39;s bundle.
   * @return uniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public ReleaseCreateRequest uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

  /**
   * The upload id associated with the release, to map to the releases upload table.
   * @return uploadId
   */
  @javax.annotation.Nonnull
  public String getUploadId() {
    return uploadId;
  }

  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }


  public ReleaseCreateRequest version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release&#39;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml. 
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReleaseCreateRequest releaseCreateRequest = (ReleaseCreateRequest) o;
    return Objects.equals(this.appexProvisioningProfiles, releaseCreateRequest.appexProvisioningProfiles) &&
        Objects.equals(this.buildVersion, releaseCreateRequest.buildVersion) &&
        Objects.equals(this.deviceFamily, releaseCreateRequest.deviceFamily) &&
        Objects.equals(this.fileExtension, releaseCreateRequest.fileExtension) &&
        Objects.equals(this.fingerprint, releaseCreateRequest.fingerprint) &&
        Objects.equals(this.iconAssetId, releaseCreateRequest.iconAssetId) &&
        Objects.equals(this.ipaUuids, releaseCreateRequest.ipaUuids) &&
        Objects.equals(this.languages, releaseCreateRequest.languages) &&
        Objects.equals(this.minimumOsVersion, releaseCreateRequest.minimumOsVersion) &&
        Objects.equals(this.packageUrl, releaseCreateRequest.packageUrl) &&
        Objects.equals(this.provision, releaseCreateRequest.provision) &&
        Objects.equals(this.proxyFlow, releaseCreateRequest.proxyFlow) &&
        Objects.equals(this.size, releaseCreateRequest.size) &&
        Objects.equals(this.uniqueIdentifier, releaseCreateRequest.uniqueIdentifier) &&
        Objects.equals(this.uploadId, releaseCreateRequest.uploadId) &&
        Objects.equals(this.version, releaseCreateRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appexProvisioningProfiles, buildVersion, deviceFamily, fileExtension, fingerprint, iconAssetId, ipaUuids, languages, minimumOsVersion, packageUrl, provision, proxyFlow, size, uniqueIdentifier, uploadId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReleaseCreateRequest {\n");
    sb.append("    appexProvisioningProfiles: ").append(toIndentedString(appexProvisioningProfiles)).append("\n");
    sb.append("    buildVersion: ").append(toIndentedString(buildVersion)).append("\n");
    sb.append("    deviceFamily: ").append(toIndentedString(deviceFamily)).append("\n");
    sb.append("    fileExtension: ").append(toIndentedString(fileExtension)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    iconAssetId: ").append(toIndentedString(iconAssetId)).append("\n");
    sb.append("    ipaUuids: ").append(toIndentedString(ipaUuids)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    minimumOsVersion: ").append(toIndentedString(minimumOsVersion)).append("\n");
    sb.append("    packageUrl: ").append(toIndentedString(packageUrl)).append("\n");
    sb.append("    provision: ").append(toIndentedString(provision)).append("\n");
    sb.append("    proxyFlow: ").append(toIndentedString(proxyFlow)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appex_provisioning_profiles");
    openapiFields.add("build_version");
    openapiFields.add("device_family");
    openapiFields.add("file_extension");
    openapiFields.add("fingerprint");
    openapiFields.add("icon_asset_id");
    openapiFields.add("ipa_uuids");
    openapiFields.add("languages");
    openapiFields.add("minimum_os_version");
    openapiFields.add("package_url");
    openapiFields.add("provision");
    openapiFields.add("proxy_flow");
    openapiFields.add("size");
    openapiFields.add("unique_identifier");
    openapiFields.add("upload_id");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fingerprint");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("upload_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReleaseCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReleaseCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReleaseCreateRequest is not found in the empty JSON string", ReleaseCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReleaseCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReleaseCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReleaseCreateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("appex_provisioning_profiles") != null && !jsonObj.get("appex_provisioning_profiles").isJsonNull()) {
        JsonArray jsonArrayappexProvisioningProfiles = jsonObj.getAsJsonArray("appex_provisioning_profiles");
        if (jsonArrayappexProvisioningProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("appex_provisioning_profiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `appex_provisioning_profiles` to be an array in the JSON string but got `%s`", jsonObj.get("appex_provisioning_profiles").toString()));
          }

          // validate the optional field `appex_provisioning_profiles` (array)
          for (int i = 0; i < jsonArrayappexProvisioningProfiles.size(); i++) {
            ReleaseCreateRequestAppexProvisioningProfilesInner.validateJsonElement(jsonArrayappexProvisioningProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("build_version") != null && !jsonObj.get("build_version").isJsonNull()) && !jsonObj.get("build_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_version").toString()));
      }
      if ((jsonObj.get("device_family") != null && !jsonObj.get("device_family").isJsonNull()) && !jsonObj.get("device_family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_family").toString()));
      }
      if ((jsonObj.get("file_extension") != null && !jsonObj.get("file_extension").isJsonNull()) && !jsonObj.get("file_extension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_extension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_extension").toString()));
      }
      if (!jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("icon_asset_id") != null && !jsonObj.get("icon_asset_id").isJsonNull()) && !jsonObj.get("icon_asset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_asset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_asset_id").toString()));
      }
      if (jsonObj.get("ipa_uuids") != null && !jsonObj.get("ipa_uuids").isJsonNull()) {
        JsonArray jsonArrayipaUuids = jsonObj.getAsJsonArray("ipa_uuids");
        if (jsonArrayipaUuids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipa_uuids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipa_uuids` to be an array in the JSON string but got `%s`", jsonObj.get("ipa_uuids").toString()));
          }

          // validate the optional field `ipa_uuids` (array)
          for (int i = 0; i < jsonArrayipaUuids.size(); i++) {
            ReleaseCreateRequestIpaUuidsInner.validateJsonElement(jsonArrayipaUuids.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languages") != null && !jsonObj.get("languages").isJsonNull() && !jsonObj.get("languages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languages` to be an array in the JSON string but got `%s`", jsonObj.get("languages").toString()));
      }
      if ((jsonObj.get("minimum_os_version") != null && !jsonObj.get("minimum_os_version").isJsonNull()) && !jsonObj.get("minimum_os_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_os_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_os_version").toString()));
      }
      if ((jsonObj.get("package_url") != null && !jsonObj.get("package_url").isJsonNull()) && !jsonObj.get("package_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `package_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("package_url").toString()));
      }
      // validate the optional field `provision`
      if (jsonObj.get("provision") != null && !jsonObj.get("provision").isJsonNull()) {
        ReleaseCreateRequestAppexProvisioningProfilesInner.validateJsonElement(jsonObj.get("provision"));
      }
      if ((jsonObj.get("unique_identifier") != null && !jsonObj.get("unique_identifier").isJsonNull()) && !jsonObj.get("unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_identifier").toString()));
      }
      if (!jsonObj.get("upload_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_id").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReleaseCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReleaseCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReleaseCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReleaseCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReleaseCreateRequest>() {
           @Override
           public void write(JsonWriter out, ReleaseCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReleaseCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReleaseCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReleaseCreateRequest
   * @throws IOException if the JSON string is invalid with respect to ReleaseCreateRequest
   */
  public static ReleaseCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReleaseCreateRequest.class);
  }

  /**
   * Convert an instance of ReleaseCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

