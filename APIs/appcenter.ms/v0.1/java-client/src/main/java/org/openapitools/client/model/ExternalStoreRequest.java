/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StoresCreateRequestIntuneDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExternalStoreRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalStoreRequest {
  public static final String SERIALIZED_NAME_INTUNE_DETAILS = "intune_details";
  @SerializedName(SERIALIZED_NAME_INTUNE_DETAILS)
  private StoresCreateRequestIntuneDetails intuneDetails;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_CONNECTION_ID = "service_connection_id";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONNECTION_ID)
  private String serviceConnectionId;

  /**
   * track of the store. Can be production, alpha &amp; beta for googleplay. Can be production, testflight-internal &amp; testflight-external for Apple Store.
   */
  @JsonAdapter(TrackEnum.Adapter.class)
  public enum TrackEnum {
    PRODUCTION("production"),
    
    ALPHA("alpha"),
    
    BETA("beta"),
    
    TESTFLIGHT_INTERNAL("testflight-internal"),
    
    TESTFLIGHT_EXTERNAL("testflight-external");

    private String value;

    TrackEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackEnum fromValue(String value) {
      for (TrackEnum b : TrackEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrackEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRACK = "track";
  @SerializedName(SERIALIZED_NAME_TRACK)
  private TrackEnum track;

  /**
   * store Type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GOOGLEPLAY("googleplay"),
    
    APPLE("apple"),
    
    INTUNE("intune");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ExternalStoreRequest() {
  }

  public ExternalStoreRequest intuneDetails(StoresCreateRequestIntuneDetails intuneDetails) {
    this.intuneDetails = intuneDetails;
    return this;
  }

  /**
   * Get intuneDetails
   * @return intuneDetails
   */
  @javax.annotation.Nullable
  public StoresCreateRequestIntuneDetails getIntuneDetails() {
    return intuneDetails;
  }

  public void setIntuneDetails(StoresCreateRequestIntuneDetails intuneDetails) {
    this.intuneDetails = intuneDetails;
  }


  public ExternalStoreRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of the store. In case of googleplay, and Apple store this is fixed to Production.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ExternalStoreRequest serviceConnectionId(String serviceConnectionId) {
    this.serviceConnectionId = serviceConnectionId;
    return this;
  }

  /**
   * Id for the shared service connection. In case of Apple AppStore, this connection will be used to create and connect to the Apple AppStore in Mobile Center.
   * @return serviceConnectionId
   */
  @javax.annotation.Nullable
  public String getServiceConnectionId() {
    return serviceConnectionId;
  }

  public void setServiceConnectionId(String serviceConnectionId) {
    this.serviceConnectionId = serviceConnectionId;
  }


  public ExternalStoreRequest track(TrackEnum track) {
    this.track = track;
    return this;
  }

  /**
   * track of the store. Can be production, alpha &amp; beta for googleplay. Can be production, testflight-internal &amp; testflight-external for Apple Store.
   * @return track
   */
  @javax.annotation.Nullable
  public TrackEnum getTrack() {
    return track;
  }

  public void setTrack(TrackEnum track) {
    this.track = track;
  }


  public ExternalStoreRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * store Type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalStoreRequest externalStoreRequest = (ExternalStoreRequest) o;
    return Objects.equals(this.intuneDetails, externalStoreRequest.intuneDetails) &&
        Objects.equals(this.name, externalStoreRequest.name) &&
        Objects.equals(this.serviceConnectionId, externalStoreRequest.serviceConnectionId) &&
        Objects.equals(this.track, externalStoreRequest.track) &&
        Objects.equals(this.type, externalStoreRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intuneDetails, name, serviceConnectionId, track, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalStoreRequest {\n");
    sb.append("    intuneDetails: ").append(toIndentedString(intuneDetails)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceConnectionId: ").append(toIndentedString(serviceConnectionId)).append("\n");
    sb.append("    track: ").append(toIndentedString(track)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intune_details");
    openapiFields.add("name");
    openapiFields.add("service_connection_id");
    openapiFields.add("track");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalStoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalStoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalStoreRequest is not found in the empty JSON string", ExternalStoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalStoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalStoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `intune_details`
      if (jsonObj.get("intune_details") != null && !jsonObj.get("intune_details").isJsonNull()) {
        StoresCreateRequestIntuneDetails.validateJsonElement(jsonObj.get("intune_details"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("service_connection_id") != null && !jsonObj.get("service_connection_id").isJsonNull()) && !jsonObj.get("service_connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_connection_id").toString()));
      }
      if ((jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) && !jsonObj.get("track").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track").toString()));
      }
      // validate the optional field `track`
      if (jsonObj.get("track") != null && !jsonObj.get("track").isJsonNull()) {
        TrackEnum.validateJsonElement(jsonObj.get("track"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalStoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalStoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalStoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalStoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalStoreRequest>() {
           @Override
           public void write(JsonWriter out, ExternalStoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalStoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalStoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalStoreRequest
   * @throws IOException if the JSON string is invalid with respect to ExternalStoreRequest
   */
  public static ExternalStoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalStoreRequest.class);
  }

  /**
   * Convert an instance of ExternalStoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

