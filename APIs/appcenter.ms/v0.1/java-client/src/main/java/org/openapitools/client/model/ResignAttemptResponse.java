/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * URL that can be used to check the status of the update devices operation and the updated profiles.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResignAttemptResponse {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CONTEXT_ID = "contextId";
  @SerializedName(SERIALIZED_NAME_CONTEXT_ID)
  private String contextId;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<Object> destinations = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ORIGINAL_RELEASE_ID = "originalReleaseId";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_RELEASE_ID)
  private BigDecimal originalReleaseId;

  public static final String SERIALIZED_NAME_RESIGN_ID = "resignId";
  @SerializedName(SERIALIZED_NAME_RESIGN_ID)
  private String resignId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private BigDecimal startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ResignAttemptResponse() {
  }

  public ResignAttemptResponse appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * App ID that the resign operation is being performed against.
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public ResignAttemptResponse contextId(String contextId) {
    this.contextId = contextId;
    return this;
  }

  /**
   * Context ID for the resigning operation.
   * @return contextId
   */
  @javax.annotation.Nonnull
  public String getContextId() {
    return contextId;
  }

  public void setContextId(String contextId) {
    this.contextId = contextId;
  }


  public ResignAttemptResponse destinations(List<Object> destinations) {
    this.destinations = destinations;
    return this;
  }

  public ResignAttemptResponse addDestinationsItem(Object destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * List of destinations that the resign operation is being performed against.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<Object> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<Object> destinations) {
    this.destinations = destinations;
  }


  public ResignAttemptResponse errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Error code associated with the exception.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public ResignAttemptResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error message associated with the exception.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ResignAttemptResponse originalReleaseId(BigDecimal originalReleaseId) {
    this.originalReleaseId = originalReleaseId;
    return this;
  }

  /**
   * ID of the release which is being resigned.
   * @return originalReleaseId
   */
  @javax.annotation.Nonnull
  public BigDecimal getOriginalReleaseId() {
    return originalReleaseId;
  }

  public void setOriginalReleaseId(BigDecimal originalReleaseId) {
    this.originalReleaseId = originalReleaseId;
  }


  public ResignAttemptResponse resignId(String resignId) {
    this.resignId = resignId;
    return this;
  }

  /**
   * ID of the resign operation.
   * @return resignId
   */
  @javax.annotation.Nonnull
  public String getResignId() {
    return resignId;
  }

  public void setResignId(String resignId) {
    this.resignId = resignId;
  }


  public ResignAttemptResponse startTime(BigDecimal startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time that the resign operation was started.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public BigDecimal getStartTime() {
    return startTime;
  }

  public void setStartTime(BigDecimal startTime) {
    this.startTime = startTime;
  }


  public ResignAttemptResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the resigning operation.
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ResignAttemptResponse userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ID of the user performing the resign operaiton.
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResignAttemptResponse resignAttemptResponse = (ResignAttemptResponse) o;
    return Objects.equals(this.appId, resignAttemptResponse.appId) &&
        Objects.equals(this.contextId, resignAttemptResponse.contextId) &&
        Objects.equals(this.destinations, resignAttemptResponse.destinations) &&
        Objects.equals(this.errorCode, resignAttemptResponse.errorCode) &&
        Objects.equals(this.errorMessage, resignAttemptResponse.errorMessage) &&
        Objects.equals(this.originalReleaseId, resignAttemptResponse.originalReleaseId) &&
        Objects.equals(this.resignId, resignAttemptResponse.resignId) &&
        Objects.equals(this.startTime, resignAttemptResponse.startTime) &&
        Objects.equals(this.status, resignAttemptResponse.status) &&
        Objects.equals(this.userId, resignAttemptResponse.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, contextId, destinations, errorCode, errorMessage, originalReleaseId, resignId, startTime, status, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResignAttemptResponse {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    originalReleaseId: ").append(toIndentedString(originalReleaseId)).append("\n");
    sb.append("    resignId: ").append(toIndentedString(resignId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("contextId");
    openapiFields.add("destinations");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");
    openapiFields.add("originalReleaseId");
    openapiFields.add("resignId");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appId");
    openapiRequiredFields.add("contextId");
    openapiRequiredFields.add("originalReleaseId");
    openapiRequiredFields.add("resignId");
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResignAttemptResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResignAttemptResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResignAttemptResponse is not found in the empty JSON string", ResignAttemptResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResignAttemptResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResignAttemptResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResignAttemptResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("contextId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contextId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contextId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull() && !jsonObj.get("destinations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if (!jsonObj.get("resignId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resignId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resignId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResignAttemptResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResignAttemptResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResignAttemptResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResignAttemptResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ResignAttemptResponse>() {
           @Override
           public void write(JsonWriter out, ResignAttemptResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResignAttemptResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResignAttemptResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResignAttemptResponse
   * @throws IOException if the JSON string is invalid with respect to ResignAttemptResponse
   */
  public static ResignAttemptResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResignAttemptResponse.class);
  }

  /**
   * Convert an instance of ResignAttemptResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

