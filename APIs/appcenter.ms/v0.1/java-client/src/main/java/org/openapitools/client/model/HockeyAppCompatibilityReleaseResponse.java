/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HockeyAppCompatibilityReleaseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HockeyAppCompatibilityReleaseResponse {
  public static final String SERIALIZED_NAME_APPSIZE = "appsize";
  @SerializedName(SERIALIZED_NAME_APPSIZE)
  private Integer appsize;

  public static final String SERIALIZED_NAME_BUNDLE_IDENTIFIER = "bundle_identifier";
  @SerializedName(SERIALIZED_NAME_BUNDLE_IDENTIFIER)
  private String bundleIdentifier;

  public static final String SERIALIZED_NAME_DEVICE_FAMILY = "device_family";
  @SerializedName(SERIALIZED_NAME_DEVICE_FAMILY)
  private String deviceFamily;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private Boolean external;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTALL_URL = "install_url";
  @SerializedName(SERIALIZED_NAME_INSTALL_URL)
  private String installUrl;

  public static final String SERIALIZED_NAME_MANDATORY = "mandatory";
  @SerializedName(SERIALIZED_NAME_MANDATORY)
  private Boolean mandatory;

  public static final String SERIALIZED_NAME_MINIMUM_OS_VERSION = "minimum_os_version";
  @SerializedName(SERIALIZED_NAME_MINIMUM_OS_VERSION)
  private String minimumOsVersion;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_SHORTVERSION = "shortversion";
  @SerializedName(SERIALIZED_NAME_SHORTVERSION)
  private String shortversion;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public HockeyAppCompatibilityReleaseResponse() {
  }

  public HockeyAppCompatibilityReleaseResponse appsize(Integer appsize) {
    this.appsize = appsize;
    return this;
  }

  /**
   * Get appsize
   * @return appsize
   */
  @javax.annotation.Nullable
  public Integer getAppsize() {
    return appsize;
  }

  public void setAppsize(Integer appsize) {
    this.appsize = appsize;
  }


  public HockeyAppCompatibilityReleaseResponse bundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
    return this;
  }

  /**
   * Get bundleIdentifier
   * @return bundleIdentifier
   */
  @javax.annotation.Nullable
  public String getBundleIdentifier() {
    return bundleIdentifier;
  }

  public void setBundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
  }


  public HockeyAppCompatibilityReleaseResponse deviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
    return this;
  }

  /**
   * Get deviceFamily
   * @return deviceFamily
   */
  @javax.annotation.Nullable
  public String getDeviceFamily() {
    return deviceFamily;
  }

  public void setDeviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
  }


  public HockeyAppCompatibilityReleaseResponse external(Boolean external) {
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @javax.annotation.Nullable
  public Boolean getExternal() {
    return external;
  }

  public void setExternal(Boolean external) {
    this.external = external;
  }


  public HockeyAppCompatibilityReleaseResponse id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public HockeyAppCompatibilityReleaseResponse installUrl(String installUrl) {
    this.installUrl = installUrl;
    return this;
  }

  /**
   * Get installUrl
   * @return installUrl
   */
  @javax.annotation.Nullable
  public String getInstallUrl() {
    return installUrl;
  }

  public void setInstallUrl(String installUrl) {
    this.installUrl = installUrl;
  }


  public HockeyAppCompatibilityReleaseResponse mandatory(Boolean mandatory) {
    this.mandatory = mandatory;
    return this;
  }

  /**
   * Get mandatory
   * @return mandatory
   */
  @javax.annotation.Nullable
  public Boolean getMandatory() {
    return mandatory;
  }

  public void setMandatory(Boolean mandatory) {
    this.mandatory = mandatory;
  }


  public HockeyAppCompatibilityReleaseResponse minimumOsVersion(String minimumOsVersion) {
    this.minimumOsVersion = minimumOsVersion;
    return this;
  }

  /**
   * Get minimumOsVersion
   * @return minimumOsVersion
   */
  @javax.annotation.Nullable
  public String getMinimumOsVersion() {
    return minimumOsVersion;
  }

  public void setMinimumOsVersion(String minimumOsVersion) {
    this.minimumOsVersion = minimumOsVersion;
  }


  public HockeyAppCompatibilityReleaseResponse notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public HockeyAppCompatibilityReleaseResponse shortversion(String shortversion) {
    this.shortversion = shortversion;
    return this;
  }

  /**
   * Get shortversion
   * @return shortversion
   */
  @javax.annotation.Nullable
  public String getShortversion() {
    return shortversion;
  }

  public void setShortversion(String shortversion) {
    this.shortversion = shortversion;
  }


  public HockeyAppCompatibilityReleaseResponse uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * Get uploadedAt
   * @return uploadedAt
   */
  @javax.annotation.Nullable
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public HockeyAppCompatibilityReleaseResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HockeyAppCompatibilityReleaseResponse hockeyAppCompatibilityReleaseResponse = (HockeyAppCompatibilityReleaseResponse) o;
    return Objects.equals(this.appsize, hockeyAppCompatibilityReleaseResponse.appsize) &&
        Objects.equals(this.bundleIdentifier, hockeyAppCompatibilityReleaseResponse.bundleIdentifier) &&
        Objects.equals(this.deviceFamily, hockeyAppCompatibilityReleaseResponse.deviceFamily) &&
        Objects.equals(this.external, hockeyAppCompatibilityReleaseResponse.external) &&
        Objects.equals(this.id, hockeyAppCompatibilityReleaseResponse.id) &&
        Objects.equals(this.installUrl, hockeyAppCompatibilityReleaseResponse.installUrl) &&
        Objects.equals(this.mandatory, hockeyAppCompatibilityReleaseResponse.mandatory) &&
        Objects.equals(this.minimumOsVersion, hockeyAppCompatibilityReleaseResponse.minimumOsVersion) &&
        Objects.equals(this.notes, hockeyAppCompatibilityReleaseResponse.notes) &&
        Objects.equals(this.shortversion, hockeyAppCompatibilityReleaseResponse.shortversion) &&
        Objects.equals(this.uploadedAt, hockeyAppCompatibilityReleaseResponse.uploadedAt) &&
        Objects.equals(this.version, hockeyAppCompatibilityReleaseResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appsize, bundleIdentifier, deviceFamily, external, id, installUrl, mandatory, minimumOsVersion, notes, shortversion, uploadedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HockeyAppCompatibilityReleaseResponse {\n");
    sb.append("    appsize: ").append(toIndentedString(appsize)).append("\n");
    sb.append("    bundleIdentifier: ").append(toIndentedString(bundleIdentifier)).append("\n");
    sb.append("    deviceFamily: ").append(toIndentedString(deviceFamily)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installUrl: ").append(toIndentedString(installUrl)).append("\n");
    sb.append("    mandatory: ").append(toIndentedString(mandatory)).append("\n");
    sb.append("    minimumOsVersion: ").append(toIndentedString(minimumOsVersion)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    shortversion: ").append(toIndentedString(shortversion)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appsize");
    openapiFields.add("bundle_identifier");
    openapiFields.add("device_family");
    openapiFields.add("external");
    openapiFields.add("id");
    openapiFields.add("install_url");
    openapiFields.add("mandatory");
    openapiFields.add("minimum_os_version");
    openapiFields.add("notes");
    openapiFields.add("shortversion");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HockeyAppCompatibilityReleaseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HockeyAppCompatibilityReleaseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HockeyAppCompatibilityReleaseResponse is not found in the empty JSON string", HockeyAppCompatibilityReleaseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HockeyAppCompatibilityReleaseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HockeyAppCompatibilityReleaseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bundle_identifier") != null && !jsonObj.get("bundle_identifier").isJsonNull()) && !jsonObj.get("bundle_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_identifier").toString()));
      }
      if ((jsonObj.get("device_family") != null && !jsonObj.get("device_family").isJsonNull()) && !jsonObj.get("device_family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_family").toString()));
      }
      if ((jsonObj.get("install_url") != null && !jsonObj.get("install_url").isJsonNull()) && !jsonObj.get("install_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `install_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("install_url").toString()));
      }
      if ((jsonObj.get("minimum_os_version") != null && !jsonObj.get("minimum_os_version").isJsonNull()) && !jsonObj.get("minimum_os_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum_os_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum_os_version").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("shortversion") != null && !jsonObj.get("shortversion").isJsonNull()) && !jsonObj.get("shortversion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortversion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortversion").toString()));
      }
      if ((jsonObj.get("uploaded_at") != null && !jsonObj.get("uploaded_at").isJsonNull()) && !jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HockeyAppCompatibilityReleaseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HockeyAppCompatibilityReleaseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HockeyAppCompatibilityReleaseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HockeyAppCompatibilityReleaseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HockeyAppCompatibilityReleaseResponse>() {
           @Override
           public void write(JsonWriter out, HockeyAppCompatibilityReleaseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HockeyAppCompatibilityReleaseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HockeyAppCompatibilityReleaseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HockeyAppCompatibilityReleaseResponse
   * @throws IOException if the JSON string is invalid with respect to HockeyAppCompatibilityReleaseResponse
   */
  public static HockeyAppCompatibilityReleaseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HockeyAppCompatibilityReleaseResponse.class);
  }

  /**
   * Convert an instance of HockeyAppCompatibilityReleaseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

