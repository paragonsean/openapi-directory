/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppWithTeamPermissionsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppWithTeamPermissionsResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ICON_SOURCE = "icon_source";
  @SerializedName(SERIALIZED_NAME_ICON_SOURCE)
  private String iconSource;

  public static final String SERIALIZED_NAME_ICON_URL = "icon_url";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The OS the app will be running on
   */
  @JsonAdapter(OsEnum.Adapter.class)
  public enum OsEnum {
    ANDROID("Android"),
    
    I_OS("iOS"),
    
    MAC_OS("macOS"),
    
    TIZEN("Tizen"),
    
    TV_OS("tvOS"),
    
    WINDOWS("Windows"),
    
    LINUX("Linux"),
    
    CUSTOM("Custom");

    private String value;

    OsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsEnum fromValue(String value) {
      for (OsEnum b : OsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private OsEnum os;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private Object owner;

  public static final String SERIALIZED_NAME_RELEASE_TYPE = "release_type";
  @SerializedName(SERIALIZED_NAME_RELEASE_TYPE)
  private String releaseType;

  public static final String SERIALIZED_NAME_APP_SECRET = "app_secret";
  @SerializedName(SERIALIZED_NAME_APP_SECRET)
  private String appSecret;

  public static final String SERIALIZED_NAME_AZURE_SUBSCRIPTION = "azure_subscription";
  @SerializedName(SERIALIZED_NAME_AZURE_SUBSCRIPTION)
  private Object azureSubscription;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  /**
   * Gets or Sets memberPermissions
   */
  @JsonAdapter(MemberPermissionsEnum.Adapter.class)
  public enum MemberPermissionsEnum {
    MANAGER("manager"),
    
    DEVELOPER("developer"),
    
    VIEWER("viewer"),
    
    TESTER("tester");

    private String value;

    MemberPermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemberPermissionsEnum fromValue(String value) {
      for (MemberPermissionsEnum b : MemberPermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MemberPermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemberPermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemberPermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MemberPermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MemberPermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEMBER_PERMISSIONS = "member_permissions";
  @SerializedName(SERIALIZED_NAME_MEMBER_PERMISSIONS)
  private List<MemberPermissionsEnum> memberPermissions = new ArrayList<>();

  /**
   * The creation origin of this app
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    APPCENTER("appcenter"),
    
    HOCKEYAPP("hockeyapp"),
    
    CODEPUSH("codepush");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  /**
   * The platform of the app
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
  public enum PlatformEnum {
    JAVA("Java"),
    
    OBJECTIVE_C_SWIFT("Objective-C-Swift"),
    
    UWP("UWP"),
    
    CORDOVA("Cordova"),
    
    REACT_NATIVE("React-Native"),
    
    UNITY("Unity"),
    
    ELECTRON("Electron"),
    
    XAMARIN("Xamarin"),
    
    WPF("WPF"),
    
    WIN_FORMS("WinForms"),
    
    UNKNOWN("Unknown"),
    
    CUSTOM("Custom");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformEnum platform;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  /**
   * Gets or Sets teamPermissions
   */
  @JsonAdapter(TeamPermissionsEnum.Adapter.class)
  public enum TeamPermissionsEnum {
    MANAGER("manager"),
    
    DEVELOPER("developer"),
    
    VIEWER("viewer");

    private String value;

    TeamPermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TeamPermissionsEnum fromValue(String value) {
      for (TeamPermissionsEnum b : TeamPermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TeamPermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TeamPermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TeamPermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TeamPermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TeamPermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEAM_PERMISSIONS = "team_permissions";
  @SerializedName(SERIALIZED_NAME_TEAM_PERMISSIONS)
  private List<TeamPermissionsEnum> teamPermissions = new ArrayList<>();

  public AppWithTeamPermissionsResponse() {
  }

  public AppWithTeamPermissionsResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the app
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AppWithTeamPermissionsResponse displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the app
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AppWithTeamPermissionsResponse iconSource(String iconSource) {
    this.iconSource = iconSource;
    return this;
  }

  /**
   * The string representation of the source of the app&#39;s icon
   * @return iconSource
   */
  @javax.annotation.Nullable
  public String getIconSource() {
    return iconSource;
  }

  public void setIconSource(String iconSource) {
    this.iconSource = iconSource;
  }


  public AppWithTeamPermissionsResponse iconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
    return this;
  }

  /**
   * The string representation of the URL pointing to the app&#39;s icon
   * @return iconUrl
   */
  @javax.annotation.Nullable
  public String getIconUrl() {
    return iconUrl;
  }

  public void setIconUrl(String iconUrl) {
    this.iconUrl = iconUrl;
  }


  public AppWithTeamPermissionsResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID (UUID) of the app
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public AppWithTeamPermissionsResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the app used in URLs
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AppWithTeamPermissionsResponse os(OsEnum os) {
    this.os = os;
    return this;
  }

  /**
   * The OS the app will be running on
   * @return os
   */
  @javax.annotation.Nonnull
  public OsEnum getOs() {
    return os;
  }

  public void setOs(OsEnum os) {
    this.os = os;
  }


  public AppWithTeamPermissionsResponse owner(Object owner) {
    this.owner = owner;
    return this;
  }

  /**
   * The information about the app&#39;s owner
   * @return owner
   */
  @javax.annotation.Nullable
  public Object getOwner() {
    return owner;
  }

  public void setOwner(Object owner) {
    this.owner = owner;
  }


  public AppWithTeamPermissionsResponse releaseType(String releaseType) {
    this.releaseType = releaseType;
    return this;
  }

  /**
   * A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
   * @return releaseType
   */
  @javax.annotation.Nullable
  public String getReleaseType() {
    return releaseType;
  }

  public void setReleaseType(String releaseType) {
    this.releaseType = releaseType;
  }


  public AppWithTeamPermissionsResponse appSecret(String appSecret) {
    this.appSecret = appSecret;
    return this;
  }

  /**
   * A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
   * @return appSecret
   */
  @javax.annotation.Nonnull
  public String getAppSecret() {
    return appSecret;
  }

  public void setAppSecret(String appSecret) {
    this.appSecret = appSecret;
  }


  public AppWithTeamPermissionsResponse azureSubscription(Object azureSubscription) {
    this.azureSubscription = azureSubscription;
    return this;
  }

  /**
   * Get azureSubscription
   * @return azureSubscription
   */
  @javax.annotation.Nullable
  public Object getAzureSubscription() {
    return azureSubscription;
  }

  public void setAzureSubscription(Object azureSubscription) {
    this.azureSubscription = azureSubscription;
  }


  public AppWithTeamPermissionsResponse createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The created date of this app
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public AppWithTeamPermissionsResponse memberPermissions(List<MemberPermissionsEnum> memberPermissions) {
    this.memberPermissions = memberPermissions;
    return this;
  }

  public AppWithTeamPermissionsResponse addMemberPermissionsItem(MemberPermissionsEnum memberPermissionsItem) {
    if (this.memberPermissions == null) {
      this.memberPermissions = new ArrayList<>();
    }
    this.memberPermissions.add(memberPermissionsItem);
    return this;
  }

  /**
   * The permissions of the calling user
   * @return memberPermissions
   */
  @javax.annotation.Nullable
  public List<MemberPermissionsEnum> getMemberPermissions() {
    return memberPermissions;
  }

  public void setMemberPermissions(List<MemberPermissionsEnum> memberPermissions) {
    this.memberPermissions = memberPermissions;
  }


  public AppWithTeamPermissionsResponse origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The creation origin of this app
   * @return origin
   */
  @javax.annotation.Nonnull
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public AppWithTeamPermissionsResponse platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

  /**
   * The platform of the app
   * @return platform
   */
  @javax.annotation.Nonnull
  public PlatformEnum getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }


  public AppWithTeamPermissionsResponse updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The last updated date of this app
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AppWithTeamPermissionsResponse teamPermissions(List<TeamPermissionsEnum> teamPermissions) {
    this.teamPermissions = teamPermissions;
    return this;
  }

  public AppWithTeamPermissionsResponse addTeamPermissionsItem(TeamPermissionsEnum teamPermissionsItem) {
    if (this.teamPermissions == null) {
      this.teamPermissions = new ArrayList<>();
    }
    this.teamPermissions.add(teamPermissionsItem);
    return this;
  }

  /**
   * The permissions the team has for the app
   * @return teamPermissions
   */
  @javax.annotation.Nullable
  public List<TeamPermissionsEnum> getTeamPermissions() {
    return teamPermissions;
  }

  public void setTeamPermissions(List<TeamPermissionsEnum> teamPermissions) {
    this.teamPermissions = teamPermissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppWithTeamPermissionsResponse appWithTeamPermissionsResponse = (AppWithTeamPermissionsResponse) o;
    return Objects.equals(this.description, appWithTeamPermissionsResponse.description) &&
        Objects.equals(this.displayName, appWithTeamPermissionsResponse.displayName) &&
        Objects.equals(this.iconSource, appWithTeamPermissionsResponse.iconSource) &&
        Objects.equals(this.iconUrl, appWithTeamPermissionsResponse.iconUrl) &&
        Objects.equals(this.id, appWithTeamPermissionsResponse.id) &&
        Objects.equals(this.name, appWithTeamPermissionsResponse.name) &&
        Objects.equals(this.os, appWithTeamPermissionsResponse.os) &&
        Objects.equals(this.owner, appWithTeamPermissionsResponse.owner) &&
        Objects.equals(this.releaseType, appWithTeamPermissionsResponse.releaseType) &&
        Objects.equals(this.appSecret, appWithTeamPermissionsResponse.appSecret) &&
        Objects.equals(this.azureSubscription, appWithTeamPermissionsResponse.azureSubscription) &&
        Objects.equals(this.createdAt, appWithTeamPermissionsResponse.createdAt) &&
        Objects.equals(this.memberPermissions, appWithTeamPermissionsResponse.memberPermissions) &&
        Objects.equals(this.origin, appWithTeamPermissionsResponse.origin) &&
        Objects.equals(this.platform, appWithTeamPermissionsResponse.platform) &&
        Objects.equals(this.updatedAt, appWithTeamPermissionsResponse.updatedAt) &&
        Objects.equals(this.teamPermissions, appWithTeamPermissionsResponse.teamPermissions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, iconSource, iconUrl, id, name, os, owner, releaseType, appSecret, azureSubscription, createdAt, memberPermissions, origin, platform, updatedAt, teamPermissions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppWithTeamPermissionsResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    iconSource: ").append(toIndentedString(iconSource)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    releaseType: ").append(toIndentedString(releaseType)).append("\n");
    sb.append("    appSecret: ").append(toIndentedString(appSecret)).append("\n");
    sb.append("    azureSubscription: ").append(toIndentedString(azureSubscription)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    memberPermissions: ").append(toIndentedString(memberPermissions)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    teamPermissions: ").append(toIndentedString(teamPermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("display_name");
    openapiFields.add("icon_source");
    openapiFields.add("icon_url");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("os");
    openapiFields.add("owner");
    openapiFields.add("release_type");
    openapiFields.add("app_secret");
    openapiFields.add("azure_subscription");
    openapiFields.add("created_at");
    openapiFields.add("member_permissions");
    openapiFields.add("origin");
    openapiFields.add("platform");
    openapiFields.add("updated_at");
    openapiFields.add("team_permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("display_name");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("os");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("app_secret");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("platform");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppWithTeamPermissionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppWithTeamPermissionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppWithTeamPermissionsResponse is not found in the empty JSON string", AppWithTeamPermissionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppWithTeamPermissionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppWithTeamPermissionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppWithTeamPermissionsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("icon_source") != null && !jsonObj.get("icon_source").isJsonNull()) && !jsonObj.get("icon_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_source").toString()));
      }
      if ((jsonObj.get("icon_url") != null && !jsonObj.get("icon_url").isJsonNull()) && !jsonObj.get("icon_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_url").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os").toString()));
      }
      // validate the required field `os`
      OsEnum.validateJsonElement(jsonObj.get("os"));
      // validate the required field `owner`
      Object.validateJsonElement(jsonObj.get("owner"));
      if ((jsonObj.get("release_type") != null && !jsonObj.get("release_type").isJsonNull()) && !jsonObj.get("release_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_type").toString()));
      }
      if (!jsonObj.get("app_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_secret").toString()));
      }
      // validate the optional field `azure_subscription`
      if (jsonObj.get("azure_subscription") != null && !jsonObj.get("azure_subscription").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("azure_subscription"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("member_permissions") != null && !jsonObj.get("member_permissions").isJsonNull() && !jsonObj.get("member_permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `member_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("member_permissions").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the required field `origin`
      OriginEnum.validateJsonElement(jsonObj.get("origin"));
      if (!jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // validate the required field `platform`
      PlatformEnum.validateJsonElement(jsonObj.get("platform"));
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("team_permissions") != null && !jsonObj.get("team_permissions").isJsonNull() && !jsonObj.get("team_permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("team_permissions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppWithTeamPermissionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppWithTeamPermissionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppWithTeamPermissionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppWithTeamPermissionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AppWithTeamPermissionsResponse>() {
           @Override
           public void write(JsonWriter out, AppWithTeamPermissionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppWithTeamPermissionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppWithTeamPermissionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppWithTeamPermissionsResponse
   * @throws IOException if the JSON string is invalid with respect to AppWithTeamPermissionsResponse
   */
  public static AppWithTeamPermissionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppWithTeamPermissionsResponse.class);
  }

  /**
   * Convert an instance of AppWithTeamPermissionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

