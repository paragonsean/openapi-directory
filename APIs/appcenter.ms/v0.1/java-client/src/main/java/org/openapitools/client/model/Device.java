/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Device characteristics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Device {
  public static final String SERIALIZED_NAME_APP_BUILD = "app_build";
  @SerializedName(SERIALIZED_NAME_APP_BUILD)
  private String appBuild;

  public static final String SERIALIZED_NAME_APP_NAMESPACE = "app_namespace";
  @SerializedName(SERIALIZED_NAME_APP_NAMESPACE)
  private String appNamespace;

  public static final String SERIALIZED_NAME_APP_VERSION = "app_version";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private String appVersion;

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrier_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_CARRIER_COUNTRY = "carrier_country";
  @SerializedName(SERIALIZED_NAME_CARRIER_COUNTRY)
  private String carrierCountry;

  public static final String SERIALIZED_NAME_CARRIER_NAME = "carrier_name";
  @SerializedName(SERIALIZED_NAME_CARRIER_NAME)
  private String carrierName;

  public static final String SERIALIZED_NAME_LIVE_UPDATE_DEPLOYMENT_KEY = "live_update_deployment_key";
  @SerializedName(SERIALIZED_NAME_LIVE_UPDATE_DEPLOYMENT_KEY)
  private String liveUpdateDeploymentKey;

  public static final String SERIALIZED_NAME_LIVE_UPDATE_PACKAGE_HASH = "live_update_package_hash";
  @SerializedName(SERIALIZED_NAME_LIVE_UPDATE_PACKAGE_HASH)
  private String liveUpdatePackageHash;

  public static final String SERIALIZED_NAME_LIVE_UPDATE_RELEASE_LABEL = "live_update_release_label";
  @SerializedName(SERIALIZED_NAME_LIVE_UPDATE_RELEASE_LABEL)
  private String liveUpdateReleaseLabel;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_OEM_NAME = "oem_name";
  @SerializedName(SERIALIZED_NAME_OEM_NAME)
  private String oemName;

  public static final String SERIALIZED_NAME_OS_API_LEVEL = "os_api_level";
  @SerializedName(SERIALIZED_NAME_OS_API_LEVEL)
  private Integer osApiLevel;

  public static final String SERIALIZED_NAME_OS_BUILD = "os_build";
  @SerializedName(SERIALIZED_NAME_OS_BUILD)
  private String osBuild;

  public static final String SERIALIZED_NAME_OS_NAME = "os_name";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "os_version";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_SCREEN_SIZE = "screen_size";
  @SerializedName(SERIALIZED_NAME_SCREEN_SIZE)
  private String screenSize;

  public static final String SERIALIZED_NAME_SDK_NAME = "sdk_name";
  @SerializedName(SERIALIZED_NAME_SDK_NAME)
  private String sdkName;

  public static final String SERIALIZED_NAME_SDK_VERSION = "sdk_version";
  @SerializedName(SERIALIZED_NAME_SDK_VERSION)
  private String sdkVersion;

  public static final String SERIALIZED_NAME_TIME_ZONE_OFFSET = "time_zone_offset";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_OFFSET)
  private Integer timeZoneOffset;

  public static final String SERIALIZED_NAME_WRAPPER_RUNTIME_VERSION = "wrapper_runtime_version";
  @SerializedName(SERIALIZED_NAME_WRAPPER_RUNTIME_VERSION)
  private String wrapperRuntimeVersion;

  public static final String SERIALIZED_NAME_WRAPPER_SDK_NAME = "wrapper_sdk_name";
  @SerializedName(SERIALIZED_NAME_WRAPPER_SDK_NAME)
  private String wrapperSdkName;

  public static final String SERIALIZED_NAME_WRAPPER_SDK_VERSION = "wrapper_sdk_version";
  @SerializedName(SERIALIZED_NAME_WRAPPER_SDK_VERSION)
  private String wrapperSdkVersion;

  public Device() {
  }

  public Device appBuild(String appBuild) {
    this.appBuild = appBuild;
    return this;
  }

  /**
   * The app&#39;s build number, e.g. 42. 
   * @return appBuild
   */
  @javax.annotation.Nonnull
  public String getAppBuild() {
    return appBuild;
  }

  public void setAppBuild(String appBuild) {
    this.appBuild = appBuild;
  }


  public Device appNamespace(String appNamespace) {
    this.appNamespace = appNamespace;
    return this;
  }

  /**
   * The bundle identifier, package identifier, or namespace, depending on what the individual plattforms use,  .e.g com.microsoft.example. 
   * @return appNamespace
   */
  @javax.annotation.Nullable
  public String getAppNamespace() {
    return appNamespace;
  }

  public void setAppNamespace(String appNamespace) {
    this.appNamespace = appNamespace;
  }


  public Device appVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * Application version name, e.g. 1.1.0 
   * @return appVersion
   */
  @javax.annotation.Nonnull
  public String getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(String appVersion) {
    this.appVersion = appVersion;
  }


  public Device carrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * Carrier country code (for mobile devices). 
   * @return carrierCode
   */
  @javax.annotation.Nullable
  public String getCarrierCode() {
    return carrierCode;
  }

  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }


  public Device carrierCountry(String carrierCountry) {
    this.carrierCountry = carrierCountry;
    return this;
  }

  /**
   * Carrier country. 
   * @return carrierCountry
   */
  @javax.annotation.Nullable
  public String getCarrierCountry() {
    return carrierCountry;
  }

  public void setCarrierCountry(String carrierCountry) {
    this.carrierCountry = carrierCountry;
  }


  public Device carrierName(String carrierName) {
    this.carrierName = carrierName;
    return this;
  }

  /**
   * Carrier name (for mobile devices). 
   * @return carrierName
   */
  @javax.annotation.Nullable
  public String getCarrierName() {
    return carrierName;
  }

  public void setCarrierName(String carrierName) {
    this.carrierName = carrierName;
  }


  public Device liveUpdateDeploymentKey(String liveUpdateDeploymentKey) {
    this.liveUpdateDeploymentKey = liveUpdateDeploymentKey;
    return this;
  }

  /**
   * Identifier of environment that current application release belongs to, deployment key then maps to environment like Production, Staging. 
   * @return liveUpdateDeploymentKey
   */
  @javax.annotation.Nullable
  public String getLiveUpdateDeploymentKey() {
    return liveUpdateDeploymentKey;
  }

  public void setLiveUpdateDeploymentKey(String liveUpdateDeploymentKey) {
    this.liveUpdateDeploymentKey = liveUpdateDeploymentKey;
  }


  public Device liveUpdatePackageHash(String liveUpdatePackageHash) {
    this.liveUpdatePackageHash = liveUpdatePackageHash;
    return this;
  }

  /**
   * Hash of all files (ReactNative or Cordova) deployed to device via LiveUpdate beacon. Helps identify the Release version on device or need to download updates in future. 
   * @return liveUpdatePackageHash
   */
  @javax.annotation.Nullable
  public String getLiveUpdatePackageHash() {
    return liveUpdatePackageHash;
  }

  public void setLiveUpdatePackageHash(String liveUpdatePackageHash) {
    this.liveUpdatePackageHash = liveUpdatePackageHash;
  }


  public Device liveUpdateReleaseLabel(String liveUpdateReleaseLabel) {
    this.liveUpdateReleaseLabel = liveUpdateReleaseLabel;
    return this;
  }

  /**
   * Label that is used to identify application code &#39;version&#39; released via Live Update beacon running on device 
   * @return liveUpdateReleaseLabel
   */
  @javax.annotation.Nullable
  public String getLiveUpdateReleaseLabel() {
    return liveUpdateReleaseLabel;
  }

  public void setLiveUpdateReleaseLabel(String liveUpdateReleaseLabel) {
    this.liveUpdateReleaseLabel = liveUpdateReleaseLabel;
  }


  public Device locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Language code (example: en_US). 
   * @return locale
   */
  @javax.annotation.Nonnull
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public Device model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Device model (example: iPad2,3). 
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public Device oemName(String oemName) {
    this.oemName = oemName;
    return this;
  }

  /**
   * Device manufacturer (example: HTC). 
   * @return oemName
   */
  @javax.annotation.Nullable
  public String getOemName() {
    return oemName;
  }

  public void setOemName(String oemName) {
    this.oemName = oemName;
  }


  public Device osApiLevel(Integer osApiLevel) {
    this.osApiLevel = osApiLevel;
    return this;
  }

  /**
   * API level when applicable like in Android (example: 15). 
   * @return osApiLevel
   */
  @javax.annotation.Nullable
  public Integer getOsApiLevel() {
    return osApiLevel;
  }

  public void setOsApiLevel(Integer osApiLevel) {
    this.osApiLevel = osApiLevel;
  }


  public Device osBuild(String osBuild) {
    this.osBuild = osBuild;
    return this;
  }

  /**
   * OS build code (example: LMY47X). 
   * @return osBuild
   */
  @javax.annotation.Nullable
  public String getOsBuild() {
    return osBuild;
  }

  public void setOsBuild(String osBuild) {
    this.osBuild = osBuild;
  }


  public Device osName(String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * OS name (example: iOS). The following OS names are standardized (non-exclusive): Android, iOS, macOS, tvOS, Windows. 
   * @return osName
   */
  @javax.annotation.Nonnull
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public Device osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * OS version (example: 9.3.0). 
   * @return osVersion
   */
  @javax.annotation.Nonnull
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public Device screenSize(String screenSize) {
    this.screenSize = screenSize;
    return this;
  }

  /**
   * Screen size of the device in pixels (example: 640x480). 
   * @return screenSize
   */
  @javax.annotation.Nullable
  public String getScreenSize() {
    return screenSize;
  }

  public void setScreenSize(String screenSize) {
    this.screenSize = screenSize;
  }


  public Device sdkName(String sdkName) {
    this.sdkName = sdkName;
    return this;
  }

  /**
   * Name of the SDK. Consists of the name of the SDK and the platform, e.g. \&quot;appcenter.ios\&quot;, \&quot;hockeysdk.android\&quot;. 
   * @return sdkName
   */
  @javax.annotation.Nonnull
  public String getSdkName() {
    return sdkName;
  }

  public void setSdkName(String sdkName) {
    this.sdkName = sdkName;
  }


  public Device sdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

  /**
   * Version of the SDK in semver format, e.g. \&quot;1.2.0\&quot; or \&quot;0.12.3-alpha.1\&quot;. 
   * @return sdkVersion
   */
  @javax.annotation.Nonnull
  public String getSdkVersion() {
    return sdkVersion;
  }

  public void setSdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
  }


  public Device timeZoneOffset(Integer timeZoneOffset) {
    this.timeZoneOffset = timeZoneOffset;
    return this;
  }

  /**
   * The offset in minutes from UTC for the device time zone, including daylight savings time. 
   * minimum: -840
   * maximum: 840
   * @return timeZoneOffset
   */
  @javax.annotation.Nonnull
  public Integer getTimeZoneOffset() {
    return timeZoneOffset;
  }

  public void setTimeZoneOffset(Integer timeZoneOffset) {
    this.timeZoneOffset = timeZoneOffset;
  }


  public Device wrapperRuntimeVersion(String wrapperRuntimeVersion) {
    this.wrapperRuntimeVersion = wrapperRuntimeVersion;
    return this;
  }

  /**
   * Version of the wrapper technology framework (Xamarin runtime version or ReactNative or Cordova etc...). See wrapper_sdk_name to see if this version refers to Xamarin or ReactNative or other. 
   * @return wrapperRuntimeVersion
   */
  @javax.annotation.Nullable
  public String getWrapperRuntimeVersion() {
    return wrapperRuntimeVersion;
  }

  public void setWrapperRuntimeVersion(String wrapperRuntimeVersion) {
    this.wrapperRuntimeVersion = wrapperRuntimeVersion;
  }


  public Device wrapperSdkName(String wrapperSdkName) {
    this.wrapperSdkName = wrapperSdkName;
    return this;
  }

  /**
   * Name of the wrapper SDK. Consists of the name of the SDK and the wrapper platform, e.g. \&quot;appcenter.xamarin\&quot;, \&quot;hockeysdk.cordova\&quot;. 
   * @return wrapperSdkName
   */
  @javax.annotation.Nullable
  public String getWrapperSdkName() {
    return wrapperSdkName;
  }

  public void setWrapperSdkName(String wrapperSdkName) {
    this.wrapperSdkName = wrapperSdkName;
  }


  public Device wrapperSdkVersion(String wrapperSdkVersion) {
    this.wrapperSdkVersion = wrapperSdkVersion;
    return this;
  }

  /**
   * Version of the wrapper SDK in semver format. When the SDK is embedding another base SDK (for example Xamarin.Android wraps Android), the Xamarin specific version is populated into this field while sdkVersion refers to the original Android SDK. 
   * @return wrapperSdkVersion
   */
  @javax.annotation.Nullable
  public String getWrapperSdkVersion() {
    return wrapperSdkVersion;
  }

  public void setWrapperSdkVersion(String wrapperSdkVersion) {
    this.wrapperSdkVersion = wrapperSdkVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Device device = (Device) o;
    return Objects.equals(this.appBuild, device.appBuild) &&
        Objects.equals(this.appNamespace, device.appNamespace) &&
        Objects.equals(this.appVersion, device.appVersion) &&
        Objects.equals(this.carrierCode, device.carrierCode) &&
        Objects.equals(this.carrierCountry, device.carrierCountry) &&
        Objects.equals(this.carrierName, device.carrierName) &&
        Objects.equals(this.liveUpdateDeploymentKey, device.liveUpdateDeploymentKey) &&
        Objects.equals(this.liveUpdatePackageHash, device.liveUpdatePackageHash) &&
        Objects.equals(this.liveUpdateReleaseLabel, device.liveUpdateReleaseLabel) &&
        Objects.equals(this.locale, device.locale) &&
        Objects.equals(this.model, device.model) &&
        Objects.equals(this.oemName, device.oemName) &&
        Objects.equals(this.osApiLevel, device.osApiLevel) &&
        Objects.equals(this.osBuild, device.osBuild) &&
        Objects.equals(this.osName, device.osName) &&
        Objects.equals(this.osVersion, device.osVersion) &&
        Objects.equals(this.screenSize, device.screenSize) &&
        Objects.equals(this.sdkName, device.sdkName) &&
        Objects.equals(this.sdkVersion, device.sdkVersion) &&
        Objects.equals(this.timeZoneOffset, device.timeZoneOffset) &&
        Objects.equals(this.wrapperRuntimeVersion, device.wrapperRuntimeVersion) &&
        Objects.equals(this.wrapperSdkName, device.wrapperSdkName) &&
        Objects.equals(this.wrapperSdkVersion, device.wrapperSdkVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appBuild, appNamespace, appVersion, carrierCode, carrierCountry, carrierName, liveUpdateDeploymentKey, liveUpdatePackageHash, liveUpdateReleaseLabel, locale, model, oemName, osApiLevel, osBuild, osName, osVersion, screenSize, sdkName, sdkVersion, timeZoneOffset, wrapperRuntimeVersion, wrapperSdkName, wrapperSdkVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Device {\n");
    sb.append("    appBuild: ").append(toIndentedString(appBuild)).append("\n");
    sb.append("    appNamespace: ").append(toIndentedString(appNamespace)).append("\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    carrierCountry: ").append(toIndentedString(carrierCountry)).append("\n");
    sb.append("    carrierName: ").append(toIndentedString(carrierName)).append("\n");
    sb.append("    liveUpdateDeploymentKey: ").append(toIndentedString(liveUpdateDeploymentKey)).append("\n");
    sb.append("    liveUpdatePackageHash: ").append(toIndentedString(liveUpdatePackageHash)).append("\n");
    sb.append("    liveUpdateReleaseLabel: ").append(toIndentedString(liveUpdateReleaseLabel)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    oemName: ").append(toIndentedString(oemName)).append("\n");
    sb.append("    osApiLevel: ").append(toIndentedString(osApiLevel)).append("\n");
    sb.append("    osBuild: ").append(toIndentedString(osBuild)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    screenSize: ").append(toIndentedString(screenSize)).append("\n");
    sb.append("    sdkName: ").append(toIndentedString(sdkName)).append("\n");
    sb.append("    sdkVersion: ").append(toIndentedString(sdkVersion)).append("\n");
    sb.append("    timeZoneOffset: ").append(toIndentedString(timeZoneOffset)).append("\n");
    sb.append("    wrapperRuntimeVersion: ").append(toIndentedString(wrapperRuntimeVersion)).append("\n");
    sb.append("    wrapperSdkName: ").append(toIndentedString(wrapperSdkName)).append("\n");
    sb.append("    wrapperSdkVersion: ").append(toIndentedString(wrapperSdkVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_build");
    openapiFields.add("app_namespace");
    openapiFields.add("app_version");
    openapiFields.add("carrier_code");
    openapiFields.add("carrier_country");
    openapiFields.add("carrier_name");
    openapiFields.add("live_update_deployment_key");
    openapiFields.add("live_update_package_hash");
    openapiFields.add("live_update_release_label");
    openapiFields.add("locale");
    openapiFields.add("model");
    openapiFields.add("oem_name");
    openapiFields.add("os_api_level");
    openapiFields.add("os_build");
    openapiFields.add("os_name");
    openapiFields.add("os_version");
    openapiFields.add("screen_size");
    openapiFields.add("sdk_name");
    openapiFields.add("sdk_version");
    openapiFields.add("time_zone_offset");
    openapiFields.add("wrapper_runtime_version");
    openapiFields.add("wrapper_sdk_name");
    openapiFields.add("wrapper_sdk_version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_build");
    openapiRequiredFields.add("app_version");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("os_name");
    openapiRequiredFields.add("os_version");
    openapiRequiredFields.add("sdk_name");
    openapiRequiredFields.add("sdk_version");
    openapiRequiredFields.add("time_zone_offset");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Device
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Device.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Device is not found in the empty JSON string", Device.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Device.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Device` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Device.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_build").toString()));
      }
      if ((jsonObj.get("app_namespace") != null && !jsonObj.get("app_namespace").isJsonNull()) && !jsonObj.get("app_namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_namespace").toString()));
      }
      if (!jsonObj.get("app_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_version").toString()));
      }
      if ((jsonObj.get("carrier_code") != null && !jsonObj.get("carrier_code").isJsonNull()) && !jsonObj.get("carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_code").toString()));
      }
      if ((jsonObj.get("carrier_country") != null && !jsonObj.get("carrier_country").isJsonNull()) && !jsonObj.get("carrier_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_country").toString()));
      }
      if ((jsonObj.get("carrier_name") != null && !jsonObj.get("carrier_name").isJsonNull()) && !jsonObj.get("carrier_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_name").toString()));
      }
      if ((jsonObj.get("live_update_deployment_key") != null && !jsonObj.get("live_update_deployment_key").isJsonNull()) && !jsonObj.get("live_update_deployment_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live_update_deployment_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live_update_deployment_key").toString()));
      }
      if ((jsonObj.get("live_update_package_hash") != null && !jsonObj.get("live_update_package_hash").isJsonNull()) && !jsonObj.get("live_update_package_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live_update_package_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live_update_package_hash").toString()));
      }
      if ((jsonObj.get("live_update_release_label") != null && !jsonObj.get("live_update_release_label").isJsonNull()) && !jsonObj.get("live_update_release_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live_update_release_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live_update_release_label").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
      if ((jsonObj.get("oem_name") != null && !jsonObj.get("oem_name").isJsonNull()) && !jsonObj.get("oem_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oem_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oem_name").toString()));
      }
      if ((jsonObj.get("os_build") != null && !jsonObj.get("os_build").isJsonNull()) && !jsonObj.get("os_build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_build").toString()));
      }
      if (!jsonObj.get("os_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_name").toString()));
      }
      if (!jsonObj.get("os_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_version").toString()));
      }
      if ((jsonObj.get("screen_size") != null && !jsonObj.get("screen_size").isJsonNull()) && !jsonObj.get("screen_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screen_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screen_size").toString()));
      }
      if (!jsonObj.get("sdk_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdk_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdk_name").toString()));
      }
      if (!jsonObj.get("sdk_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdk_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdk_version").toString()));
      }
      if ((jsonObj.get("wrapper_runtime_version") != null && !jsonObj.get("wrapper_runtime_version").isJsonNull()) && !jsonObj.get("wrapper_runtime_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapper_runtime_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wrapper_runtime_version").toString()));
      }
      if ((jsonObj.get("wrapper_sdk_name") != null && !jsonObj.get("wrapper_sdk_name").isJsonNull()) && !jsonObj.get("wrapper_sdk_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapper_sdk_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wrapper_sdk_name").toString()));
      }
      if ((jsonObj.get("wrapper_sdk_version") != null && !jsonObj.get("wrapper_sdk_version").isJsonNull()) && !jsonObj.get("wrapper_sdk_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapper_sdk_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wrapper_sdk_version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Device.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Device' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Device> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Device.class));

       return (TypeAdapter<T>) new TypeAdapter<Device>() {
           @Override
           public void write(JsonWriter out, Device value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Device read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Device given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Device
   * @throws IOException if the JSON string is invalid with respect to Device
   */
  public static Device fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Device.class);
  }

  /**
   * Convert an instance of Device to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

