/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestGetTestReport200ResponseFeaturesInnerTestsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestGetTestReport200ResponseFeaturesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestGetTestReport200ResponseFeaturesInner {
  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private BigDecimal failed;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PEAK_DURATION = "peakDuration";
  @SerializedName(SERIALIZED_NAME_PEAK_DURATION)
  private BigDecimal peakDuration;

  public static final String SERIALIZED_NAME_PEAK_MEMORY = "peakMemory";
  @SerializedName(SERIALIZED_NAME_PEAK_MEMORY)
  private BigDecimal peakMemory;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  private BigDecimal skipped;

  public static final String SERIALIZED_NAME_TESTS = "tests";
  @SerializedName(SERIALIZED_NAME_TESTS)
  private List<TestGetTestReport200ResponseFeaturesInnerTestsInner> tests = new ArrayList<>();

  public TestGetTestReport200ResponseFeaturesInner() {
  }

  public TestGetTestReport200ResponseFeaturesInner failed(BigDecimal failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public BigDecimal getFailed() {
    return failed;
  }

  public void setFailed(BigDecimal failed) {
    this.failed = failed;
  }


  public TestGetTestReport200ResponseFeaturesInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TestGetTestReport200ResponseFeaturesInner peakDuration(BigDecimal peakDuration) {
    this.peakDuration = peakDuration;
    return this;
  }

  /**
   * Get peakDuration
   * @return peakDuration
   */
  @javax.annotation.Nullable
  public BigDecimal getPeakDuration() {
    return peakDuration;
  }

  public void setPeakDuration(BigDecimal peakDuration) {
    this.peakDuration = peakDuration;
  }


  public TestGetTestReport200ResponseFeaturesInner peakMemory(BigDecimal peakMemory) {
    this.peakMemory = peakMemory;
    return this;
  }

  /**
   * Get peakMemory
   * @return peakMemory
   */
  @javax.annotation.Nullable
  public BigDecimal getPeakMemory() {
    return peakMemory;
  }

  public void setPeakMemory(BigDecimal peakMemory) {
    this.peakMemory = peakMemory;
  }


  public TestGetTestReport200ResponseFeaturesInner skipped(BigDecimal skipped) {
    this.skipped = skipped;
    return this;
  }

  /**
   * Get skipped
   * @return skipped
   */
  @javax.annotation.Nullable
  public BigDecimal getSkipped() {
    return skipped;
  }

  public void setSkipped(BigDecimal skipped) {
    this.skipped = skipped;
  }


  public TestGetTestReport200ResponseFeaturesInner tests(List<TestGetTestReport200ResponseFeaturesInnerTestsInner> tests) {
    this.tests = tests;
    return this;
  }

  public TestGetTestReport200ResponseFeaturesInner addTestsItem(TestGetTestReport200ResponseFeaturesInnerTestsInner testsItem) {
    if (this.tests == null) {
      this.tests = new ArrayList<>();
    }
    this.tests.add(testsItem);
    return this;
  }

  /**
   * Get tests
   * @return tests
   */
  @javax.annotation.Nullable
  public List<TestGetTestReport200ResponseFeaturesInnerTestsInner> getTests() {
    return tests;
  }

  public void setTests(List<TestGetTestReport200ResponseFeaturesInnerTestsInner> tests) {
    this.tests = tests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestGetTestReport200ResponseFeaturesInner testGetTestReport200ResponseFeaturesInner = (TestGetTestReport200ResponseFeaturesInner) o;
    return Objects.equals(this.failed, testGetTestReport200ResponseFeaturesInner.failed) &&
        Objects.equals(this.name, testGetTestReport200ResponseFeaturesInner.name) &&
        Objects.equals(this.peakDuration, testGetTestReport200ResponseFeaturesInner.peakDuration) &&
        Objects.equals(this.peakMemory, testGetTestReport200ResponseFeaturesInner.peakMemory) &&
        Objects.equals(this.skipped, testGetTestReport200ResponseFeaturesInner.skipped) &&
        Objects.equals(this.tests, testGetTestReport200ResponseFeaturesInner.tests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failed, name, peakDuration, peakMemory, skipped, tests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestGetTestReport200ResponseFeaturesInner {\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    peakDuration: ").append(toIndentedString(peakDuration)).append("\n");
    sb.append("    peakMemory: ").append(toIndentedString(peakMemory)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failed");
    openapiFields.add("name");
    openapiFields.add("peakDuration");
    openapiFields.add("peakMemory");
    openapiFields.add("skipped");
    openapiFields.add("tests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestGetTestReport200ResponseFeaturesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestGetTestReport200ResponseFeaturesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestGetTestReport200ResponseFeaturesInner is not found in the empty JSON string", TestGetTestReport200ResponseFeaturesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestGetTestReport200ResponseFeaturesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestGetTestReport200ResponseFeaturesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("tests") != null && !jsonObj.get("tests").isJsonNull()) {
        JsonArray jsonArraytests = jsonObj.getAsJsonArray("tests");
        if (jsonArraytests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tests` to be an array in the JSON string but got `%s`", jsonObj.get("tests").toString()));
          }

          // validate the optional field `tests` (array)
          for (int i = 0; i < jsonArraytests.size(); i++) {
            TestGetTestReport200ResponseFeaturesInnerTestsInner.validateJsonElement(jsonArraytests.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestGetTestReport200ResponseFeaturesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestGetTestReport200ResponseFeaturesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestGetTestReport200ResponseFeaturesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestGetTestReport200ResponseFeaturesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TestGetTestReport200ResponseFeaturesInner>() {
           @Override
           public void write(JsonWriter out, TestGetTestReport200ResponseFeaturesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestGetTestReport200ResponseFeaturesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestGetTestReport200ResponseFeaturesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestGetTestReport200ResponseFeaturesInner
   * @throws IOException if the JSON string is invalid with respect to TestGetTestReport200ResponseFeaturesInner
   */
  public static TestGetTestReport200ResponseFeaturesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestGetTestReport200ResponseFeaturesInner.class);
  }

  /**
   * Convert an instance of TestGetTestReport200ResponseFeaturesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

