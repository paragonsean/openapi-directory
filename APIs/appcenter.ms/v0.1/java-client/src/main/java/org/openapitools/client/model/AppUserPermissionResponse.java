/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppUserPermissionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppUserPermissionResponse {
  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private UUID appId;

  /**
   * The creation origin of this app
   */
  @JsonAdapter(AppOriginEnum.Adapter.class)
  public enum AppOriginEnum {
    APPCENTER("appcenter"),
    
    CODEPUSH("codepush");

    private String value;

    AppOriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppOriginEnum fromValue(String value) {
      for (AppOriginEnum b : AppOriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppOriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppOriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppOriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppOriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppOriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_ORIGIN = "app_origin";
  @SerializedName(SERIALIZED_NAME_APP_ORIGIN)
  private AppOriginEnum appOrigin;

  public static final String SERIALIZED_NAME_APP_SECRET = "app_secret";
  @SerializedName(SERIALIZED_NAME_APP_SECRET)
  private String appSecret;

  /**
   * Gets or Sets permissions
   */
  @JsonAdapter(PermissionsEnum.Adapter.class)
  public enum PermissionsEnum {
    MANAGER("manager"),
    
    DEVELOPER("developer"),
    
    VIEWER("viewer"),
    
    TESTER("tester");

    private String value;

    PermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionsEnum fromValue(String value) {
      for (PermissionsEnum b : PermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<PermissionsEnum> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public AppUserPermissionResponse() {
  }

  public AppUserPermissionResponse appId(UUID appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The unique id (UUID) of the app
   * @return appId
   */
  @javax.annotation.Nonnull
  public UUID getAppId() {
    return appId;
  }

  public void setAppId(UUID appId) {
    this.appId = appId;
  }


  public AppUserPermissionResponse appOrigin(AppOriginEnum appOrigin) {
    this.appOrigin = appOrigin;
    return this;
  }

  /**
   * The creation origin of this app
   * @return appOrigin
   */
  @javax.annotation.Nonnull
  public AppOriginEnum getAppOrigin() {
    return appOrigin;
  }

  public void setAppOrigin(AppOriginEnum appOrigin) {
    this.appOrigin = appOrigin;
  }


  public AppUserPermissionResponse appSecret(String appSecret) {
    this.appSecret = appSecret;
    return this;
  }

  /**
   * A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
   * @return appSecret
   */
  @javax.annotation.Nonnull
  public String getAppSecret() {
    return appSecret;
  }

  public void setAppSecret(String appSecret) {
    this.appSecret = appSecret;
  }


  public AppUserPermissionResponse permissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
    return this;
  }

  public AppUserPermissionResponse addPermissionsItem(PermissionsEnum permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * The permissions the user has for the app
   * @return permissions
   */
  @javax.annotation.Nonnull
  public List<PermissionsEnum> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
  }


  public AppUserPermissionResponse userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * The email of the user
   * @return userEmail
   */
  @javax.annotation.Nonnull
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public AppUserPermissionResponse userId(UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique id (UUID) of the user
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppUserPermissionResponse appUserPermissionResponse = (AppUserPermissionResponse) o;
    return Objects.equals(this.appId, appUserPermissionResponse.appId) &&
        Objects.equals(this.appOrigin, appUserPermissionResponse.appOrigin) &&
        Objects.equals(this.appSecret, appUserPermissionResponse.appSecret) &&
        Objects.equals(this.permissions, appUserPermissionResponse.permissions) &&
        Objects.equals(this.userEmail, appUserPermissionResponse.userEmail) &&
        Objects.equals(this.userId, appUserPermissionResponse.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, appOrigin, appSecret, permissions, userEmail, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppUserPermissionResponse {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appOrigin: ").append(toIndentedString(appOrigin)).append("\n");
    sb.append("    appSecret: ").append(toIndentedString(appSecret)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_id");
    openapiFields.add("app_origin");
    openapiFields.add("app_secret");
    openapiFields.add("permissions");
    openapiFields.add("user_email");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("app_origin");
    openapiRequiredFields.add("app_secret");
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("user_email");
    openapiRequiredFields.add("user_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppUserPermissionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppUserPermissionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppUserPermissionResponse is not found in the empty JSON string", AppUserPermissionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppUserPermissionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppUserPermissionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppUserPermissionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (!jsonObj.get("app_origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_origin").toString()));
      }
      // validate the required field `app_origin`
      AppOriginEnum.validateJsonElement(jsonObj.get("app_origin"));
      if (!jsonObj.get("app_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_secret").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if (!jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppUserPermissionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppUserPermissionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppUserPermissionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppUserPermissionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AppUserPermissionResponse>() {
           @Override
           public void write(JsonWriter out, AppUserPermissionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppUserPermissionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppUserPermissionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppUserPermissionResponse
   * @throws IOException if the JSON string is invalid with respect to AppUserPermissionResponse
   */
  public static AppUserPermissionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppUserPermissionResponse.class);
  }

  /**
   * Convert an instance of AppUserPermissionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

