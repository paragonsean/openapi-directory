/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of new application release
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewAppReleaseAlertingEventAllOfAppReleaseProperties {
  public static final String SERIALIZED_NAME_APP_DISPLAY_NAME = "app_display_name";
  @SerializedName(SERIALIZED_NAME_APP_DISPLAY_NAME)
  private String appDisplayName;

  public static final String SERIALIZED_NAME_APP_NAME = "app_name";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_BUNDLE_IDENTIFIER = "bundle_identifier";
  @SerializedName(SERIALIZED_NAME_BUNDLE_IDENTIFIER)
  private String bundleIdentifier;

  public static final String SERIALIZED_NAME_DISTRIBUTION_GROUP_ID = "distribution_group_id";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_GROUP_ID)
  private String distributionGroupId;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_ICON_LINK = "icon_link";
  @SerializedName(SERIALIZED_NAME_ICON_LINK)
  private String iconLink;

  public static final String SERIALIZED_NAME_INSTALL_LINK = "install_link";
  @SerializedName(SERIALIZED_NAME_INSTALL_LINK)
  private String installLink;

  public static final String SERIALIZED_NAME_INSTALLABLE = "installable";
  @SerializedName(SERIALIZED_NAME_INSTALLABLE)
  private Boolean installable;

  public static final String SERIALIZED_NAME_MANDATORY_UPDATE = "mandatory_update";
  @SerializedName(SERIALIZED_NAME_MANDATORY_UPDATE)
  private Boolean mandatoryUpdate;

  public static final String SERIALIZED_NAME_MIN_OS = "min_os";
  @SerializedName(SERIALIZED_NAME_MIN_OS)
  private String minOs;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_NAME = "provisioning_profile_name";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_NAME)
  private String provisioningProfileName;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_TYPE = "provisioning_profile_type";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_TYPE)
  private String provisioningProfileType;

  public static final String SERIALIZED_NAME_RELEASE_ID = "release_id";
  @SerializedName(SERIALIZED_NAME_RELEASE_ID)
  private String releaseId;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "release_notes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  private String releaseNotes;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "short_version";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public NewAppReleaseAlertingEventAllOfAppReleaseProperties() {
  }

  public NewAppReleaseAlertingEventAllOfAppReleaseProperties appDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
    return this;
  }

  /**
   * Get appDisplayName
   * @return appDisplayName
   */
  @javax.annotation.Nonnull
  public String getAppDisplayName() {
    return appDisplayName;
  }

  public void setAppDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Get appName
   * @return appName
   */
  @javax.annotation.Nonnull
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties bundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
    return this;
  }

  /**
   * Get bundleIdentifier
   * @return bundleIdentifier
   */
  @javax.annotation.Nonnull
  public String getBundleIdentifier() {
    return bundleIdentifier;
  }

  public void setBundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties distributionGroupId(String distributionGroupId) {
    this.distributionGroupId = distributionGroupId;
    return this;
  }

  /**
   * Get distributionGroupId
   * @return distributionGroupId
   */
  @javax.annotation.Nullable
  public String getDistributionGroupId() {
    return distributionGroupId;
  }

  public void setDistributionGroupId(String distributionGroupId) {
    this.distributionGroupId = distributionGroupId;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * Get fingerprint
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties iconLink(String iconLink) {
    this.iconLink = iconLink;
    return this;
  }

  /**
   * Get iconLink
   * @return iconLink
   */
  @javax.annotation.Nullable
  public String getIconLink() {
    return iconLink;
  }

  public void setIconLink(String iconLink) {
    this.iconLink = iconLink;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties installLink(String installLink) {
    this.installLink = installLink;
    return this;
  }

  /**
   * Get installLink
   * @return installLink
   */
  @javax.annotation.Nonnull
  public String getInstallLink() {
    return installLink;
  }

  public void setInstallLink(String installLink) {
    this.installLink = installLink;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties installable(Boolean installable) {
    this.installable = installable;
    return this;
  }

  /**
   * Get installable
   * @return installable
   */
  @javax.annotation.Nullable
  public Boolean getInstallable() {
    return installable;
  }

  public void setInstallable(Boolean installable) {
    this.installable = installable;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties mandatoryUpdate(Boolean mandatoryUpdate) {
    this.mandatoryUpdate = mandatoryUpdate;
    return this;
  }

  /**
   * Get mandatoryUpdate
   * @return mandatoryUpdate
   */
  @javax.annotation.Nullable
  public Boolean getMandatoryUpdate() {
    return mandatoryUpdate;
  }

  public void setMandatoryUpdate(Boolean mandatoryUpdate) {
    this.mandatoryUpdate = mandatoryUpdate;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties minOs(String minOs) {
    this.minOs = minOs;
    return this;
  }

  /**
   * Get minOs
   * @return minOs
   */
  @javax.annotation.Nullable
  public String getMinOs() {
    return minOs;
  }

  public void setMinOs(String minOs) {
    this.minOs = minOs;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nonnull
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties provisioningProfileName(String provisioningProfileName) {
    this.provisioningProfileName = provisioningProfileName;
    return this;
  }

  /**
   * Get provisioningProfileName
   * @return provisioningProfileName
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileName() {
    return provisioningProfileName;
  }

  public void setProvisioningProfileName(String provisioningProfileName) {
    this.provisioningProfileName = provisioningProfileName;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties provisioningProfileType(String provisioningProfileType) {
    this.provisioningProfileType = provisioningProfileType;
    return this;
  }

  /**
   * Get provisioningProfileType
   * @return provisioningProfileType
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileType() {
    return provisioningProfileType;
  }

  public void setProvisioningProfileType(String provisioningProfileType) {
    this.provisioningProfileType = provisioningProfileType;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties releaseId(String releaseId) {
    this.releaseId = releaseId;
    return this;
  }

  /**
   * Get releaseId
   * @return releaseId
   */
  @javax.annotation.Nonnull
  public String getReleaseId() {
    return releaseId;
  }

  public void setReleaseId(String releaseId) {
    this.releaseId = releaseId;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  /**
   * Get releaseNotes
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * Get shortVersion
   * @return shortVersion
   */
  @javax.annotation.Nonnull
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * Date and time in ISO 8601 format
   * @return uploadedAt
   */
  @javax.annotation.Nonnull
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public NewAppReleaseAlertingEventAllOfAppReleaseProperties version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewAppReleaseAlertingEventAllOfAppReleaseProperties newAppReleaseAlertingEventAllOfAppReleaseProperties = (NewAppReleaseAlertingEventAllOfAppReleaseProperties) o;
    return Objects.equals(this.appDisplayName, newAppReleaseAlertingEventAllOfAppReleaseProperties.appDisplayName) &&
        Objects.equals(this.appName, newAppReleaseAlertingEventAllOfAppReleaseProperties.appName) &&
        Objects.equals(this.bundleIdentifier, newAppReleaseAlertingEventAllOfAppReleaseProperties.bundleIdentifier) &&
        Objects.equals(this.distributionGroupId, newAppReleaseAlertingEventAllOfAppReleaseProperties.distributionGroupId) &&
        Objects.equals(this.fingerprint, newAppReleaseAlertingEventAllOfAppReleaseProperties.fingerprint) &&
        Objects.equals(this.iconLink, newAppReleaseAlertingEventAllOfAppReleaseProperties.iconLink) &&
        Objects.equals(this.installLink, newAppReleaseAlertingEventAllOfAppReleaseProperties.installLink) &&
        Objects.equals(this.installable, newAppReleaseAlertingEventAllOfAppReleaseProperties.installable) &&
        Objects.equals(this.mandatoryUpdate, newAppReleaseAlertingEventAllOfAppReleaseProperties.mandatoryUpdate) &&
        Objects.equals(this.minOs, newAppReleaseAlertingEventAllOfAppReleaseProperties.minOs) &&
        Objects.equals(this.platform, newAppReleaseAlertingEventAllOfAppReleaseProperties.platform) &&
        Objects.equals(this.provisioningProfileName, newAppReleaseAlertingEventAllOfAppReleaseProperties.provisioningProfileName) &&
        Objects.equals(this.provisioningProfileType, newAppReleaseAlertingEventAllOfAppReleaseProperties.provisioningProfileType) &&
        Objects.equals(this.releaseId, newAppReleaseAlertingEventAllOfAppReleaseProperties.releaseId) &&
        Objects.equals(this.releaseNotes, newAppReleaseAlertingEventAllOfAppReleaseProperties.releaseNotes) &&
        Objects.equals(this.shortVersion, newAppReleaseAlertingEventAllOfAppReleaseProperties.shortVersion) &&
        Objects.equals(this.size, newAppReleaseAlertingEventAllOfAppReleaseProperties.size) &&
        Objects.equals(this.uploadedAt, newAppReleaseAlertingEventAllOfAppReleaseProperties.uploadedAt) &&
        Objects.equals(this.version, newAppReleaseAlertingEventAllOfAppReleaseProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appDisplayName, appName, bundleIdentifier, distributionGroupId, fingerprint, iconLink, installLink, installable, mandatoryUpdate, minOs, platform, provisioningProfileName, provisioningProfileType, releaseId, releaseNotes, shortVersion, size, uploadedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewAppReleaseAlertingEventAllOfAppReleaseProperties {\n");
    sb.append("    appDisplayName: ").append(toIndentedString(appDisplayName)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    bundleIdentifier: ").append(toIndentedString(bundleIdentifier)).append("\n");
    sb.append("    distributionGroupId: ").append(toIndentedString(distributionGroupId)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    iconLink: ").append(toIndentedString(iconLink)).append("\n");
    sb.append("    installLink: ").append(toIndentedString(installLink)).append("\n");
    sb.append("    installable: ").append(toIndentedString(installable)).append("\n");
    sb.append("    mandatoryUpdate: ").append(toIndentedString(mandatoryUpdate)).append("\n");
    sb.append("    minOs: ").append(toIndentedString(minOs)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    provisioningProfileName: ").append(toIndentedString(provisioningProfileName)).append("\n");
    sb.append("    provisioningProfileType: ").append(toIndentedString(provisioningProfileType)).append("\n");
    sb.append("    releaseId: ").append(toIndentedString(releaseId)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_display_name");
    openapiFields.add("app_name");
    openapiFields.add("bundle_identifier");
    openapiFields.add("distribution_group_id");
    openapiFields.add("fingerprint");
    openapiFields.add("icon_link");
    openapiFields.add("install_link");
    openapiFields.add("installable");
    openapiFields.add("mandatory_update");
    openapiFields.add("min_os");
    openapiFields.add("platform");
    openapiFields.add("provisioning_profile_name");
    openapiFields.add("provisioning_profile_type");
    openapiFields.add("release_id");
    openapiFields.add("release_notes");
    openapiFields.add("short_version");
    openapiFields.add("size");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_display_name");
    openapiRequiredFields.add("app_name");
    openapiRequiredFields.add("bundle_identifier");
    openapiRequiredFields.add("install_link");
    openapiRequiredFields.add("platform");
    openapiRequiredFields.add("release_id");
    openapiRequiredFields.add("short_version");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("uploaded_at");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewAppReleaseAlertingEventAllOfAppReleaseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewAppReleaseAlertingEventAllOfAppReleaseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewAppReleaseAlertingEventAllOfAppReleaseProperties is not found in the empty JSON string", NewAppReleaseAlertingEventAllOfAppReleaseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewAppReleaseAlertingEventAllOfAppReleaseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewAppReleaseAlertingEventAllOfAppReleaseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewAppReleaseAlertingEventAllOfAppReleaseProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_display_name").toString()));
      }
      if (!jsonObj.get("app_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_name").toString()));
      }
      if (!jsonObj.get("bundle_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_identifier").toString()));
      }
      if ((jsonObj.get("distribution_group_id") != null && !jsonObj.get("distribution_group_id").isJsonNull()) && !jsonObj.get("distribution_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distribution_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distribution_group_id").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("icon_link") != null && !jsonObj.get("icon_link").isJsonNull()) && !jsonObj.get("icon_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_link").toString()));
      }
      if (!jsonObj.get("install_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `install_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("install_link").toString()));
      }
      if ((jsonObj.get("min_os") != null && !jsonObj.get("min_os").isJsonNull()) && !jsonObj.get("min_os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_os").toString()));
      }
      if (!jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("provisioning_profile_name") != null && !jsonObj.get("provisioning_profile_name").isJsonNull()) && !jsonObj.get("provisioning_profile_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioning_profile_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioning_profile_name").toString()));
      }
      if ((jsonObj.get("provisioning_profile_type") != null && !jsonObj.get("provisioning_profile_type").isJsonNull()) && !jsonObj.get("provisioning_profile_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioning_profile_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioning_profile_type").toString()));
      }
      if (!jsonObj.get("release_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_id").toString()));
      }
      if ((jsonObj.get("release_notes") != null && !jsonObj.get("release_notes").isJsonNull()) && !jsonObj.get("release_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_notes").toString()));
      }
      if (!jsonObj.get("short_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_version").toString()));
      }
      if (!jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewAppReleaseAlertingEventAllOfAppReleaseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewAppReleaseAlertingEventAllOfAppReleaseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewAppReleaseAlertingEventAllOfAppReleaseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewAppReleaseAlertingEventAllOfAppReleaseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NewAppReleaseAlertingEventAllOfAppReleaseProperties>() {
           @Override
           public void write(JsonWriter out, NewAppReleaseAlertingEventAllOfAppReleaseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewAppReleaseAlertingEventAllOfAppReleaseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewAppReleaseAlertingEventAllOfAppReleaseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewAppReleaseAlertingEventAllOfAppReleaseProperties
   * @throws IOException if the JSON string is invalid with respect to NewAppReleaseAlertingEventAllOfAppReleaseProperties
   */
  public static NewAppReleaseAlertingEventAllOfAppReleaseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewAppReleaseAlertingEventAllOfAppReleaseProperties.class);
  }

  /**
   * Convert an instance of NewAppReleaseAlertingEventAllOfAppReleaseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

