/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SubscriptionTier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription1 {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CONCURRENT_DEVICES_LIMIT = "concurrentDevicesLimit";
  @SerializedName(SERIALIZED_NAME_CONCURRENT_DEVICES_LIMIT)
  private Integer concurrentDevicesLimit;

  public static final String SERIALIZED_NAME_DAYS_LEFT = "daysLeft";
  @SerializedName(SERIALIZED_NAME_DAYS_LEFT)
  private BigDecimal daysLeft;

  public static final String SERIALIZED_NAME_ENDS_AT = "endsAt";
  @SerializedName(SERIALIZED_NAME_ENDS_AT)
  private String endsAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_RUNNING_DEVICES = "runningDevices";
  @SerializedName(SERIALIZED_NAME_RUNNING_DEVICES)
  private Integer runningDevices;

  public static final String SERIALIZED_NAME_STARTS_AT = "startsAt";
  @SerializedName(SERIALIZED_NAME_STARTS_AT)
  private String startsAt;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private SubscriptionTier tier;

  public Subscription1() {
  }

  public Subscription1 active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Is the subscription currently active?
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public Subscription1 concurrentDevicesLimit(Integer concurrentDevicesLimit) {
    this.concurrentDevicesLimit = concurrentDevicesLimit;
    return this;
  }

  /**
   * Customer limits on concurrent devices
   * @return concurrentDevicesLimit
   */
  @javax.annotation.Nullable
  public Integer getConcurrentDevicesLimit() {
    return concurrentDevicesLimit;
  }

  public void setConcurrentDevicesLimit(Integer concurrentDevicesLimit) {
    this.concurrentDevicesLimit = concurrentDevicesLimit;
  }


  public Subscription1 daysLeft(BigDecimal daysLeft) {
    this.daysLeft = daysLeft;
    return this;
  }

  /**
   * The number of days left in the subscription
   * @return daysLeft
   */
  @javax.annotation.Nullable
  public BigDecimal getDaysLeft() {
    return daysLeft;
  }

  public void setDaysLeft(BigDecimal daysLeft) {
    this.daysLeft = daysLeft;
  }


  public Subscription1 endsAt(String endsAt) {
    this.endsAt = endsAt;
    return this;
  }

  /**
   * The date the subscription will end or ended
   * @return endsAt
   */
  @javax.annotation.Nullable
  public String getEndsAt() {
    return endsAt;
  }

  public void setEndsAt(String endsAt) {
    this.endsAt = endsAt;
  }


  public Subscription1 id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Id of the subscription
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public Subscription1 runningDevices(Integer runningDevices) {
    this.runningDevices = runningDevices;
    return this;
  }

  /**
   * Current device concurrency utilization
   * @return runningDevices
   */
  @javax.annotation.Nullable
  public Integer getRunningDevices() {
    return runningDevices;
  }

  public void setRunningDevices(Integer runningDevices) {
    this.runningDevices = runningDevices;
  }


  public Subscription1 startsAt(String startsAt) {
    this.startsAt = startsAt;
    return this;
  }

  /**
   * The date the subscription began
   * @return startsAt
   */
  @javax.annotation.Nullable
  public String getStartsAt() {
    return startsAt;
  }

  public void setStartsAt(String startsAt) {
    this.startsAt = startsAt;
  }


  public Subscription1 tier(SubscriptionTier tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public SubscriptionTier getTier() {
    return tier;
  }

  public void setTier(SubscriptionTier tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription1 subscription1 = (Subscription1) o;
    return Objects.equals(this.active, subscription1.active) &&
        Objects.equals(this.concurrentDevicesLimit, subscription1.concurrentDevicesLimit) &&
        Objects.equals(this.daysLeft, subscription1.daysLeft) &&
        Objects.equals(this.endsAt, subscription1.endsAt) &&
        Objects.equals(this.id, subscription1.id) &&
        Objects.equals(this.runningDevices, subscription1.runningDevices) &&
        Objects.equals(this.startsAt, subscription1.startsAt) &&
        Objects.equals(this.tier, subscription1.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, concurrentDevicesLimit, daysLeft, endsAt, id, runningDevices, startsAt, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription1 {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    concurrentDevicesLimit: ").append(toIndentedString(concurrentDevicesLimit)).append("\n");
    sb.append("    daysLeft: ").append(toIndentedString(daysLeft)).append("\n");
    sb.append("    endsAt: ").append(toIndentedString(endsAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    runningDevices: ").append(toIndentedString(runningDevices)).append("\n");
    sb.append("    startsAt: ").append(toIndentedString(startsAt)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("concurrentDevicesLimit");
    openapiFields.add("daysLeft");
    openapiFields.add("endsAt");
    openapiFields.add("id");
    openapiFields.add("runningDevices");
    openapiFields.add("startsAt");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription1 is not found in the empty JSON string", Subscription1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endsAt") != null && !jsonObj.get("endsAt").isJsonNull()) && !jsonObj.get("endsAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endsAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endsAt").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("startsAt") != null && !jsonObj.get("startsAt").isJsonNull()) && !jsonObj.get("startsAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startsAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startsAt").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        SubscriptionTier.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription1.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription1>() {
           @Override
           public void write(JsonWriter out, Subscription1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription1
   * @throws IOException if the JSON string is invalid with respect to Subscription1
   */
  public static Subscription1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription1.class);
  }

  /**
   * Convert an instance of Subscription1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

