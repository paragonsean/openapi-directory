/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestGetTestReport200ResponseFeaturesInnerTestsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestGetTestReport200ResponseFeaturesInnerTestsInner {
  public static final String SERIALIZED_NAME_PEAK_DURATION = "peakDuration";
  @SerializedName(SERIALIZED_NAME_PEAK_DURATION)
  private BigDecimal peakDuration;

  public static final String SERIALIZED_NAME_PEAK_MEMORY = "peakMemory";
  @SerializedName(SERIALIZED_NAME_PEAK_MEMORY)
  private BigDecimal peakMemory;

  public static final String SERIALIZED_NAME_RUNS = "runs";
  @SerializedName(SERIALIZED_NAME_RUNS)
  private List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner> runs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST_NAME = "testName";
  @SerializedName(SERIALIZED_NAME_TEST_NAME)
  private String testName;

  public TestGetTestReport200ResponseFeaturesInnerTestsInner() {
  }

  public TestGetTestReport200ResponseFeaturesInnerTestsInner peakDuration(BigDecimal peakDuration) {
    this.peakDuration = peakDuration;
    return this;
  }

  /**
   * Get peakDuration
   * @return peakDuration
   */
  @javax.annotation.Nullable
  public BigDecimal getPeakDuration() {
    return peakDuration;
  }

  public void setPeakDuration(BigDecimal peakDuration) {
    this.peakDuration = peakDuration;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInner peakMemory(BigDecimal peakMemory) {
    this.peakMemory = peakMemory;
    return this;
  }

  /**
   * Get peakMemory
   * @return peakMemory
   */
  @javax.annotation.Nullable
  public BigDecimal getPeakMemory() {
    return peakMemory;
  }

  public void setPeakMemory(BigDecimal peakMemory) {
    this.peakMemory = peakMemory;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInner runs(List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner> runs) {
    this.runs = runs;
    return this;
  }

  public TestGetTestReport200ResponseFeaturesInnerTestsInner addRunsItem(TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner runsItem) {
    if (this.runs == null) {
      this.runs = new ArrayList<>();
    }
    this.runs.add(runsItem);
    return this;
  }

  /**
   * Get runs
   * @return runs
   */
  @javax.annotation.Nullable
  public List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner> getRuns() {
    return runs;
  }

  public void setRuns(List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner> runs) {
    this.runs = runs;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInner testName(String testName) {
    this.testName = testName;
    return this;
  }

  /**
   * Get testName
   * @return testName
   */
  @javax.annotation.Nullable
  public String getTestName() {
    return testName;
  }

  public void setTestName(String testName) {
    this.testName = testName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestGetTestReport200ResponseFeaturesInnerTestsInner testGetTestReport200ResponseFeaturesInnerTestsInner = (TestGetTestReport200ResponseFeaturesInnerTestsInner) o;
    return Objects.equals(this.peakDuration, testGetTestReport200ResponseFeaturesInnerTestsInner.peakDuration) &&
        Objects.equals(this.peakMemory, testGetTestReport200ResponseFeaturesInnerTestsInner.peakMemory) &&
        Objects.equals(this.runs, testGetTestReport200ResponseFeaturesInnerTestsInner.runs) &&
        Objects.equals(this.testName, testGetTestReport200ResponseFeaturesInnerTestsInner.testName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(peakDuration, peakMemory, runs, testName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestGetTestReport200ResponseFeaturesInnerTestsInner {\n");
    sb.append("    peakDuration: ").append(toIndentedString(peakDuration)).append("\n");
    sb.append("    peakMemory: ").append(toIndentedString(peakMemory)).append("\n");
    sb.append("    runs: ").append(toIndentedString(runs)).append("\n");
    sb.append("    testName: ").append(toIndentedString(testName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("peakDuration");
    openapiFields.add("peakMemory");
    openapiFields.add("runs");
    openapiFields.add("testName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestGetTestReport200ResponseFeaturesInnerTestsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestGetTestReport200ResponseFeaturesInnerTestsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestGetTestReport200ResponseFeaturesInnerTestsInner is not found in the empty JSON string", TestGetTestReport200ResponseFeaturesInnerTestsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestGetTestReport200ResponseFeaturesInnerTestsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestGetTestReport200ResponseFeaturesInnerTestsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("runs") != null && !jsonObj.get("runs").isJsonNull()) {
        JsonArray jsonArrayruns = jsonObj.getAsJsonArray("runs");
        if (jsonArrayruns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runs` to be an array in the JSON string but got `%s`", jsonObj.get("runs").toString()));
          }

          // validate the optional field `runs` (array)
          for (int i = 0; i < jsonArrayruns.size(); i++) {
            TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.validateJsonElement(jsonArrayruns.get(i));
          };
        }
      }
      if ((jsonObj.get("testName") != null && !jsonObj.get("testName").isJsonNull()) && !jsonObj.get("testName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestGetTestReport200ResponseFeaturesInnerTestsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestGetTestReport200ResponseFeaturesInnerTestsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestGetTestReport200ResponseFeaturesInnerTestsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestGetTestReport200ResponseFeaturesInnerTestsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TestGetTestReport200ResponseFeaturesInnerTestsInner>() {
           @Override
           public void write(JsonWriter out, TestGetTestReport200ResponseFeaturesInnerTestsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestGetTestReport200ResponseFeaturesInnerTestsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestGetTestReport200ResponseFeaturesInnerTestsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestGetTestReport200ResponseFeaturesInnerTestsInner
   * @throws IOException if the JSON string is invalid with respect to TestGetTestReport200ResponseFeaturesInnerTestsInner
   */
  public static TestGetTestReport200ResponseFeaturesInnerTestsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestGetTestReport200ResponseFeaturesInnerTestsInner.class);
  }

  /**
   * Convert an instance of TestGetTestReport200ResponseFeaturesInnerTestsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

