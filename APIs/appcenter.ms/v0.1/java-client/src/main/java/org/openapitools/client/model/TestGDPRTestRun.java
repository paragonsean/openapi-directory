/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestGDPRTestRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestGDPRTestRun {
  public static final String SERIALIZED_NAME_APP_HASH_FILE_ID = "app_hash_file_id";
  @SerializedName(SERIALIZED_NAME_APP_HASH_FILE_ID)
  private UUID appHashFileId;

  public static final String SERIALIZED_NAME_APP_HASH_FILE_URL = "app_hash_file_url";
  @SerializedName(SERIALIZED_NAME_APP_HASH_FILE_URL)
  private String appHashFileUrl;

  public static final String SERIALIZED_NAME_APP_ICON_URL = "app_icon_url";
  @SerializedName(SERIALIZED_NAME_APP_ICON_URL)
  private String appIconUrl;

  public static final String SERIALIZED_NAME_DSYM_HASH_FILE_ID = "dsym_hash_file_id";
  @SerializedName(SERIALIZED_NAME_DSYM_HASH_FILE_ID)
  private UUID dsymHashFileId;

  public static final String SERIALIZED_NAME_DSYM_HASH_FILE_URL = "dsym_hash_file_url";
  @SerializedName(SERIALIZED_NAME_DSYM_HASH_FILE_URL)
  private String dsymHashFileUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public TestGDPRTestRun() {
  }

  public TestGDPRTestRun appHashFileId(UUID appHashFileId) {
    this.appHashFileId = appHashFileId;
    return this;
  }

  /**
   * Get appHashFileId
   * @return appHashFileId
   */
  @javax.annotation.Nullable
  public UUID getAppHashFileId() {
    return appHashFileId;
  }

  public void setAppHashFileId(UUID appHashFileId) {
    this.appHashFileId = appHashFileId;
  }


  public TestGDPRTestRun appHashFileUrl(String appHashFileUrl) {
    this.appHashFileUrl = appHashFileUrl;
    return this;
  }

  /**
   * Get appHashFileUrl
   * @return appHashFileUrl
   */
  @javax.annotation.Nullable
  public String getAppHashFileUrl() {
    return appHashFileUrl;
  }

  public void setAppHashFileUrl(String appHashFileUrl) {
    this.appHashFileUrl = appHashFileUrl;
  }


  public TestGDPRTestRun appIconUrl(String appIconUrl) {
    this.appIconUrl = appIconUrl;
    return this;
  }

  /**
   * Get appIconUrl
   * @return appIconUrl
   */
  @javax.annotation.Nullable
  public String getAppIconUrl() {
    return appIconUrl;
  }

  public void setAppIconUrl(String appIconUrl) {
    this.appIconUrl = appIconUrl;
  }


  public TestGDPRTestRun dsymHashFileId(UUID dsymHashFileId) {
    this.dsymHashFileId = dsymHashFileId;
    return this;
  }

  /**
   * Get dsymHashFileId
   * @return dsymHashFileId
   */
  @javax.annotation.Nullable
  public UUID getDsymHashFileId() {
    return dsymHashFileId;
  }

  public void setDsymHashFileId(UUID dsymHashFileId) {
    this.dsymHashFileId = dsymHashFileId;
  }


  public TestGDPRTestRun dsymHashFileUrl(String dsymHashFileUrl) {
    this.dsymHashFileUrl = dsymHashFileUrl;
    return this;
  }

  /**
   * Get dsymHashFileUrl
   * @return dsymHashFileUrl
   */
  @javax.annotation.Nullable
  public String getDsymHashFileUrl() {
    return dsymHashFileUrl;
  }

  public void setDsymHashFileUrl(String dsymHashFileUrl) {
    this.dsymHashFileUrl = dsymHashFileUrl;
  }


  public TestGDPRTestRun id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public TestGDPRTestRun locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestGDPRTestRun testGDPRTestRun = (TestGDPRTestRun) o;
    return Objects.equals(this.appHashFileId, testGDPRTestRun.appHashFileId) &&
        Objects.equals(this.appHashFileUrl, testGDPRTestRun.appHashFileUrl) &&
        Objects.equals(this.appIconUrl, testGDPRTestRun.appIconUrl) &&
        Objects.equals(this.dsymHashFileId, testGDPRTestRun.dsymHashFileId) &&
        Objects.equals(this.dsymHashFileUrl, testGDPRTestRun.dsymHashFileUrl) &&
        Objects.equals(this.id, testGDPRTestRun.id) &&
        Objects.equals(this.locale, testGDPRTestRun.locale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appHashFileId, appHashFileUrl, appIconUrl, dsymHashFileId, dsymHashFileUrl, id, locale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestGDPRTestRun {\n");
    sb.append("    appHashFileId: ").append(toIndentedString(appHashFileId)).append("\n");
    sb.append("    appHashFileUrl: ").append(toIndentedString(appHashFileUrl)).append("\n");
    sb.append("    appIconUrl: ").append(toIndentedString(appIconUrl)).append("\n");
    sb.append("    dsymHashFileId: ").append(toIndentedString(dsymHashFileId)).append("\n");
    sb.append("    dsymHashFileUrl: ").append(toIndentedString(dsymHashFileUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_hash_file_id");
    openapiFields.add("app_hash_file_url");
    openapiFields.add("app_icon_url");
    openapiFields.add("dsym_hash_file_id");
    openapiFields.add("dsym_hash_file_url");
    openapiFields.add("id");
    openapiFields.add("locale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestGDPRTestRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestGDPRTestRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestGDPRTestRun is not found in the empty JSON string", TestGDPRTestRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestGDPRTestRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestGDPRTestRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("app_hash_file_id") != null && !jsonObj.get("app_hash_file_id").isJsonNull()) && !jsonObj.get("app_hash_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_hash_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_hash_file_id").toString()));
      }
      if ((jsonObj.get("app_hash_file_url") != null && !jsonObj.get("app_hash_file_url").isJsonNull()) && !jsonObj.get("app_hash_file_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_hash_file_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_hash_file_url").toString()));
      }
      if ((jsonObj.get("app_icon_url") != null && !jsonObj.get("app_icon_url").isJsonNull()) && !jsonObj.get("app_icon_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_icon_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_icon_url").toString()));
      }
      if ((jsonObj.get("dsym_hash_file_id") != null && !jsonObj.get("dsym_hash_file_id").isJsonNull()) && !jsonObj.get("dsym_hash_file_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsym_hash_file_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsym_hash_file_id").toString()));
      }
      if ((jsonObj.get("dsym_hash_file_url") != null && !jsonObj.get("dsym_hash_file_url").isJsonNull()) && !jsonObj.get("dsym_hash_file_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dsym_hash_file_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dsym_hash_file_url").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestGDPRTestRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestGDPRTestRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestGDPRTestRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestGDPRTestRun.class));

       return (TypeAdapter<T>) new TypeAdapter<TestGDPRTestRun>() {
           @Override
           public void write(JsonWriter out, TestGDPRTestRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestGDPRTestRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestGDPRTestRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestGDPRTestRun
   * @throws IOException if the JSON string is invalid with respect to TestGDPRTestRun
   */
  public static TestGDPRTestRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestGDPRTestRun.class);
  }

  /**
   * Convert an instance of TestGDPRTestRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

