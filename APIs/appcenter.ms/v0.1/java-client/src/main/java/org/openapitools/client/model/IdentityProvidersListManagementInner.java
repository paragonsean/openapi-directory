/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IdentityProvidersListManagementInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityProvidersListManagementInner {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  /**
   * The name of the identity provider type
   */
  @JsonAdapter(ProviderNameEnum.Adapter.class)
  public enum ProviderNameEnum {
    GITHUB("github"),
    
    AAD("aad"),
    
    FACEBOOK("facebook"),
    
    GOOGLE("google");

    private String value;

    ProviderNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderNameEnum fromValue(String value) {
      for (ProviderNameEnum b : ProviderNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProviderNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "provider_name";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private ProviderNameEnum providerName;

  public static final String SERIALIZED_NAME_PROVIDER_USER_ID = "provider_user_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_USER_ID)
  private String providerUserId;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public IdentityProvidersListManagementInner() {
  }

  public IdentityProvidersListManagementInner createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date-time
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public IdentityProvidersListManagementInner providerName(ProviderNameEnum providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * The name of the identity provider type
   * @return providerName
   */
  @javax.annotation.Nullable
  public ProviderNameEnum getProviderName() {
    return providerName;
  }

  public void setProviderName(ProviderNameEnum providerName) {
    this.providerName = providerName;
  }


  public IdentityProvidersListManagementInner providerUserId(String providerUserId) {
    this.providerUserId = providerUserId;
    return this;
  }

  /**
   * The external user id
   * @return providerUserId
   */
  @javax.annotation.Nullable
  public String getProviderUserId() {
    return providerUserId;
  }

  public void setProviderUserId(String providerUserId) {
    this.providerUserId = providerUserId;
  }


  public IdentityProvidersListManagementInner updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Last update date-time
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public IdentityProvidersListManagementInner userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The account id (UUID)
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityProvidersListManagementInner identityProvidersListManagementInner = (IdentityProvidersListManagementInner) o;
    return Objects.equals(this.createdAt, identityProvidersListManagementInner.createdAt) &&
        Objects.equals(this.providerName, identityProvidersListManagementInner.providerName) &&
        Objects.equals(this.providerUserId, identityProvidersListManagementInner.providerUserId) &&
        Objects.equals(this.updatedAt, identityProvidersListManagementInner.updatedAt) &&
        Objects.equals(this.userId, identityProvidersListManagementInner.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, providerName, providerUserId, updatedAt, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityProvidersListManagementInner {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    providerUserId: ").append(toIndentedString(providerUserId)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("provider_name");
    openapiFields.add("provider_user_id");
    openapiFields.add("updated_at");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityProvidersListManagementInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityProvidersListManagementInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityProvidersListManagementInner is not found in the empty JSON string", IdentityProvidersListManagementInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityProvidersListManagementInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityProvidersListManagementInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("provider_name") != null && !jsonObj.get("provider_name").isJsonNull()) && !jsonObj.get("provider_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_name").toString()));
      }
      // validate the optional field `provider_name`
      if (jsonObj.get("provider_name") != null && !jsonObj.get("provider_name").isJsonNull()) {
        ProviderNameEnum.validateJsonElement(jsonObj.get("provider_name"));
      }
      if ((jsonObj.get("provider_user_id") != null && !jsonObj.get("provider_user_id").isJsonNull()) && !jsonObj.get("provider_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_user_id").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityProvidersListManagementInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityProvidersListManagementInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityProvidersListManagementInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityProvidersListManagementInner.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityProvidersListManagementInner>() {
           @Override
           public void write(JsonWriter out, IdentityProvidersListManagementInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityProvidersListManagementInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityProvidersListManagementInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityProvidersListManagementInner
   * @throws IOException if the JSON string is invalid with respect to IdentityProvidersListManagementInner
   */
  public static IdentityProvidersListManagementInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityProvidersListManagementInner.class);
  }

  /**
   * Convert an instance of IdentityProvidersListManagementInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

