/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an uploaded release
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateReleaseDetailsResponse {
  public static final String SERIALIZED_NAME_ANDROID_MIN_API_LEVEL = "android_min_api_level";
  @SerializedName(SERIALIZED_NAME_ANDROID_MIN_API_LEVEL)
  private String androidMinApiLevel;

  public static final String SERIALIZED_NAME_APP_DISPLAY_NAME = "app_display_name";
  @SerializedName(SERIALIZED_NAME_APP_DISPLAY_NAME)
  private String appDisplayName;

  public static final String SERIALIZED_NAME_APP_ICON_URL = "app_icon_url";
  @SerializedName(SERIALIZED_NAME_APP_ICON_URL)
  private String appIconUrl;

  public static final String SERIALIZED_NAME_APP_NAME = "app_name";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_BUNDLE_IDENTIFIER = "bundle_identifier";
  @SerializedName(SERIALIZED_NAME_BUNDLE_IDENTIFIER)
  private String bundleIdentifier;

  /**
   * The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
   */
  @JsonAdapter(DestinationTypeEnum.Adapter.class)
  public enum DestinationTypeEnum {
    GROUP("group"),
    
    STORE("store"),
    
    TESTER("tester");

    private String value;

    DestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationTypeEnum fromValue(String value) {
      for (DestinationTypeEnum b : DestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destination_type";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private DestinationTypeEnum destinationType;

  public static final String SERIALIZED_NAME_DEVICE_FAMILY = "device_family";
  @SerializedName(SERIALIZED_NAME_DEVICE_FAMILY)
  private String deviceFamily;

  public static final String SERIALIZED_NAME_DISTRIBUTION_GROUP_ID = "distribution_group_id";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_GROUP_ID)
  private String distributionGroupId;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTALL_URL = "install_url";
  @SerializedName(SERIALIZED_NAME_INSTALL_URL)
  private String installUrl;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_BUILD = "is_external_build";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_BUILD)
  private Boolean isExternalBuild;

  public static final String SERIALIZED_NAME_IS_PROVISIONING_PROFILE_SYNCING = "is_provisioning_profile_syncing";
  @SerializedName(SERIALIZED_NAME_IS_PROVISIONING_PROFILE_SYNCING)
  private Boolean isProvisioningProfileSyncing;

  public static final String SERIALIZED_NAME_MIN_OS = "min_os";
  @SerializedName(SERIALIZED_NAME_MIN_OS)
  private String minOs;

  /**
   * The release&#39;s origin
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    HOCKEYAPP("hockeyapp"),
    
    APPCENTER("appcenter");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_NAME = "provisioning_profile_name";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_NAME)
  private String provisioningProfileName;

  /**
   * The type of the provisioning profile for the requested app version.
   */
  @JsonAdapter(ProvisioningProfileTypeEnum.Adapter.class)
  public enum ProvisioningProfileTypeEnum {
    ADHOC("adhoc"),
    
    ENTERPRISE("enterprise"),
    
    OTHER("other");

    private String value;

    ProvisioningProfileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningProfileTypeEnum fromValue(String value) {
      for (ProvisioningProfileTypeEnum b : ProvisioningProfileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningProfileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningProfileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningProfileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningProfileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningProfileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_PROFILE_TYPE = "provisioning_profile_type";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_PROFILE_TYPE)
  private ProvisioningProfileTypeEnum provisioningProfileType;

  public static final String SERIALIZED_NAME_PUBLISHING_STATUS = "publishing_status";
  @SerializedName(SERIALIZED_NAME_PUBLISHING_STATUS)
  private String publishingStatus;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "release_notes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  private String releaseNotes;

  public static final String SERIALIZED_NAME_SECONDARY_DOWNLOAD_URL = "secondary_download_url";
  @SerializedName(SERIALIZED_NAME_SECONDARY_DOWNLOAD_URL)
  private String secondaryDownloadUrl;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "short_version";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  /**
   * OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#39;available&#39; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("available"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public PrivateReleaseDetailsResponse() {
  }

  public PrivateReleaseDetailsResponse androidMinApiLevel(String androidMinApiLevel) {
    this.androidMinApiLevel = androidMinApiLevel;
    return this;
  }

  /**
   * The release&#39;s minimum required Android API level.
   * @return androidMinApiLevel
   */
  @javax.annotation.Nullable
  public String getAndroidMinApiLevel() {
    return androidMinApiLevel;
  }

  public void setAndroidMinApiLevel(String androidMinApiLevel) {
    this.androidMinApiLevel = androidMinApiLevel;
  }


  public PrivateReleaseDetailsResponse appDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
    return this;
  }

  /**
   * The app&#39;s display name.
   * @return appDisplayName
   */
  @javax.annotation.Nullable
  public String getAppDisplayName() {
    return appDisplayName;
  }

  public void setAppDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
  }


  public PrivateReleaseDetailsResponse appIconUrl(String appIconUrl) {
    this.appIconUrl = appIconUrl;
    return this;
  }

  /**
   * A URL to the app&#39;s icon.
   * @return appIconUrl
   */
  @javax.annotation.Nullable
  public String getAppIconUrl() {
    return appIconUrl;
  }

  public void setAppIconUrl(String appIconUrl) {
    this.appIconUrl = appIconUrl;
  }


  public PrivateReleaseDetailsResponse appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * The app&#39;s name (extracted from the uploaded release).
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public PrivateReleaseDetailsResponse bundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
    return this;
  }

  /**
   * The identifier of the apps bundle.
   * @return bundleIdentifier
   */
  @javax.annotation.Nullable
  public String getBundleIdentifier() {
    return bundleIdentifier;
  }

  public void setBundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
  }


  public PrivateReleaseDetailsResponse destinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
    return this;
  }

  /**
   * The destination type.&lt;br&gt; &lt;b&gt;group&lt;/b&gt;: The release distributed to internal groups and distribution_groups details will be returned.&lt;br&gt; &lt;b&gt;store&lt;/b&gt;: The release distributed to external stores and distribution_stores details will be returned. &lt;br&gt; 
   * @return destinationType
   */
  @javax.annotation.Nullable
  public DestinationTypeEnum getDestinationType() {
    return destinationType;
  }

  public void setDestinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
  }


  public PrivateReleaseDetailsResponse deviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
    return this;
  }

  /**
   * The release&#39;s device family.
   * @return deviceFamily
   */
  @javax.annotation.Nullable
  public String getDeviceFamily() {
    return deviceFamily;
  }

  public void setDeviceFamily(String deviceFamily) {
    this.deviceFamily = deviceFamily;
  }


  public PrivateReleaseDetailsResponse distributionGroupId(String distributionGroupId) {
    this.distributionGroupId = distributionGroupId;
    return this;
  }

  /**
   * the destination where release is distributed
   * @return distributionGroupId
   */
  @javax.annotation.Nullable
  public String getDistributionGroupId() {
    return distributionGroupId;
  }

  public void setDistributionGroupId(String distributionGroupId) {
    this.distributionGroupId = distributionGroupId;
  }


  public PrivateReleaseDetailsResponse downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * The URL that hosts the binary for this release.
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public PrivateReleaseDetailsResponse fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * MD5 checksum of the release binary.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public PrivateReleaseDetailsResponse id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID identifying this unique release.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public PrivateReleaseDetailsResponse installUrl(String installUrl) {
    this.installUrl = installUrl;
    return this;
  }

  /**
   * The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
   * @return installUrl
   */
  @javax.annotation.Nullable
  public String getInstallUrl() {
    return installUrl;
  }

  public void setInstallUrl(String installUrl) {
    this.installUrl = installUrl;
  }


  public PrivateReleaseDetailsResponse isExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
    return this;
  }

  /**
   * This value determines if a release is external or not.
   * @return isExternalBuild
   */
  @javax.annotation.Nullable
  public Boolean getIsExternalBuild() {
    return isExternalBuild;
  }

  public void setIsExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
  }


  public PrivateReleaseDetailsResponse isProvisioningProfileSyncing(Boolean isProvisioningProfileSyncing) {
    this.isProvisioningProfileSyncing = isProvisioningProfileSyncing;
    return this;
  }

  /**
   * A flag that determines whether the release&#39;s provisioning profile is still extracted or not.
   * @return isProvisioningProfileSyncing
   */
  @javax.annotation.Nullable
  public Boolean getIsProvisioningProfileSyncing() {
    return isProvisioningProfileSyncing;
  }

  public void setIsProvisioningProfileSyncing(Boolean isProvisioningProfileSyncing) {
    this.isProvisioningProfileSyncing = isProvisioningProfileSyncing;
  }


  public PrivateReleaseDetailsResponse minOs(String minOs) {
    this.minOs = minOs;
    return this;
  }

  /**
   * The release&#39;s minimum required operating system.
   * @return minOs
   */
  @javax.annotation.Nullable
  public String getMinOs() {
    return minOs;
  }

  public void setMinOs(String minOs) {
    this.minOs = minOs;
  }


  public PrivateReleaseDetailsResponse origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The release&#39;s origin
   * @return origin
   */
  @javax.annotation.Nullable
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public PrivateReleaseDetailsResponse provisioningProfileName(String provisioningProfileName) {
    this.provisioningProfileName = provisioningProfileName;
    return this;
  }

  /**
   * The release&#39;s provisioning profile name.
   * @return provisioningProfileName
   */
  @javax.annotation.Nullable
  public String getProvisioningProfileName() {
    return provisioningProfileName;
  }

  public void setProvisioningProfileName(String provisioningProfileName) {
    this.provisioningProfileName = provisioningProfileName;
  }


  public PrivateReleaseDetailsResponse provisioningProfileType(ProvisioningProfileTypeEnum provisioningProfileType) {
    this.provisioningProfileType = provisioningProfileType;
    return this;
  }

  /**
   * The type of the provisioning profile for the requested app version.
   * @return provisioningProfileType
   */
  @javax.annotation.Nullable
  public ProvisioningProfileTypeEnum getProvisioningProfileType() {
    return provisioningProfileType;
  }

  public void setProvisioningProfileType(ProvisioningProfileTypeEnum provisioningProfileType) {
    this.provisioningProfileType = provisioningProfileType;
  }


  public PrivateReleaseDetailsResponse publishingStatus(String publishingStatus) {
    this.publishingStatus = publishingStatus;
    return this;
  }

  /**
   * the publishing status of the distributed release
   * @return publishingStatus
   */
  @javax.annotation.Nullable
  public String getPublishingStatus() {
    return publishingStatus;
  }

  public void setPublishingStatus(String publishingStatus) {
    this.publishingStatus = publishingStatus;
  }


  public PrivateReleaseDetailsResponse releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  /**
   * The release&#39;s release notes.
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  public PrivateReleaseDetailsResponse secondaryDownloadUrl(String secondaryDownloadUrl) {
    this.secondaryDownloadUrl = secondaryDownloadUrl;
    return this;
  }

  /**
   * The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
   * @return secondaryDownloadUrl
   */
  @javax.annotation.Nullable
  public String getSecondaryDownloadUrl() {
    return secondaryDownloadUrl;
  }

  public void setSecondaryDownloadUrl(String secondaryDownloadUrl) {
    this.secondaryDownloadUrl = secondaryDownloadUrl;
  }


  public PrivateReleaseDetailsResponse shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * The release&#39;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
   * @return shortVersion
   */
  @javax.annotation.Nullable
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public PrivateReleaseDetailsResponse size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The release&#39;s size in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public PrivateReleaseDetailsResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#39;available&#39; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public PrivateReleaseDetailsResponse uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   * @return uploadedAt
   */
  @javax.annotation.Nullable
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public PrivateReleaseDetailsResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release&#39;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateReleaseDetailsResponse privateReleaseDetailsResponse = (PrivateReleaseDetailsResponse) o;
    return Objects.equals(this.androidMinApiLevel, privateReleaseDetailsResponse.androidMinApiLevel) &&
        Objects.equals(this.appDisplayName, privateReleaseDetailsResponse.appDisplayName) &&
        Objects.equals(this.appIconUrl, privateReleaseDetailsResponse.appIconUrl) &&
        Objects.equals(this.appName, privateReleaseDetailsResponse.appName) &&
        Objects.equals(this.bundleIdentifier, privateReleaseDetailsResponse.bundleIdentifier) &&
        Objects.equals(this.destinationType, privateReleaseDetailsResponse.destinationType) &&
        Objects.equals(this.deviceFamily, privateReleaseDetailsResponse.deviceFamily) &&
        Objects.equals(this.distributionGroupId, privateReleaseDetailsResponse.distributionGroupId) &&
        Objects.equals(this.downloadUrl, privateReleaseDetailsResponse.downloadUrl) &&
        Objects.equals(this.fingerprint, privateReleaseDetailsResponse.fingerprint) &&
        Objects.equals(this.id, privateReleaseDetailsResponse.id) &&
        Objects.equals(this.installUrl, privateReleaseDetailsResponse.installUrl) &&
        Objects.equals(this.isExternalBuild, privateReleaseDetailsResponse.isExternalBuild) &&
        Objects.equals(this.isProvisioningProfileSyncing, privateReleaseDetailsResponse.isProvisioningProfileSyncing) &&
        Objects.equals(this.minOs, privateReleaseDetailsResponse.minOs) &&
        Objects.equals(this.origin, privateReleaseDetailsResponse.origin) &&
        Objects.equals(this.provisioningProfileName, privateReleaseDetailsResponse.provisioningProfileName) &&
        Objects.equals(this.provisioningProfileType, privateReleaseDetailsResponse.provisioningProfileType) &&
        Objects.equals(this.publishingStatus, privateReleaseDetailsResponse.publishingStatus) &&
        Objects.equals(this.releaseNotes, privateReleaseDetailsResponse.releaseNotes) &&
        Objects.equals(this.secondaryDownloadUrl, privateReleaseDetailsResponse.secondaryDownloadUrl) &&
        Objects.equals(this.shortVersion, privateReleaseDetailsResponse.shortVersion) &&
        Objects.equals(this.size, privateReleaseDetailsResponse.size) &&
        Objects.equals(this.status, privateReleaseDetailsResponse.status) &&
        Objects.equals(this.uploadedAt, privateReleaseDetailsResponse.uploadedAt) &&
        Objects.equals(this.version, privateReleaseDetailsResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidMinApiLevel, appDisplayName, appIconUrl, appName, bundleIdentifier, destinationType, deviceFamily, distributionGroupId, downloadUrl, fingerprint, id, installUrl, isExternalBuild, isProvisioningProfileSyncing, minOs, origin, provisioningProfileName, provisioningProfileType, publishingStatus, releaseNotes, secondaryDownloadUrl, shortVersion, size, status, uploadedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateReleaseDetailsResponse {\n");
    sb.append("    androidMinApiLevel: ").append(toIndentedString(androidMinApiLevel)).append("\n");
    sb.append("    appDisplayName: ").append(toIndentedString(appDisplayName)).append("\n");
    sb.append("    appIconUrl: ").append(toIndentedString(appIconUrl)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    bundleIdentifier: ").append(toIndentedString(bundleIdentifier)).append("\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    deviceFamily: ").append(toIndentedString(deviceFamily)).append("\n");
    sb.append("    distributionGroupId: ").append(toIndentedString(distributionGroupId)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installUrl: ").append(toIndentedString(installUrl)).append("\n");
    sb.append("    isExternalBuild: ").append(toIndentedString(isExternalBuild)).append("\n");
    sb.append("    isProvisioningProfileSyncing: ").append(toIndentedString(isProvisioningProfileSyncing)).append("\n");
    sb.append("    minOs: ").append(toIndentedString(minOs)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    provisioningProfileName: ").append(toIndentedString(provisioningProfileName)).append("\n");
    sb.append("    provisioningProfileType: ").append(toIndentedString(provisioningProfileType)).append("\n");
    sb.append("    publishingStatus: ").append(toIndentedString(publishingStatus)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    secondaryDownloadUrl: ").append(toIndentedString(secondaryDownloadUrl)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("android_min_api_level");
    openapiFields.add("app_display_name");
    openapiFields.add("app_icon_url");
    openapiFields.add("app_name");
    openapiFields.add("bundle_identifier");
    openapiFields.add("destination_type");
    openapiFields.add("device_family");
    openapiFields.add("distribution_group_id");
    openapiFields.add("download_url");
    openapiFields.add("fingerprint");
    openapiFields.add("id");
    openapiFields.add("install_url");
    openapiFields.add("is_external_build");
    openapiFields.add("is_provisioning_profile_syncing");
    openapiFields.add("min_os");
    openapiFields.add("origin");
    openapiFields.add("provisioning_profile_name");
    openapiFields.add("provisioning_profile_type");
    openapiFields.add("publishing_status");
    openapiFields.add("release_notes");
    openapiFields.add("secondary_download_url");
    openapiFields.add("short_version");
    openapiFields.add("size");
    openapiFields.add("status");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateReleaseDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateReleaseDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateReleaseDetailsResponse is not found in the empty JSON string", PrivateReleaseDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateReleaseDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateReleaseDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("android_min_api_level") != null && !jsonObj.get("android_min_api_level").isJsonNull()) && !jsonObj.get("android_min_api_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `android_min_api_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("android_min_api_level").toString()));
      }
      if ((jsonObj.get("app_display_name") != null && !jsonObj.get("app_display_name").isJsonNull()) && !jsonObj.get("app_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_display_name").toString()));
      }
      if ((jsonObj.get("app_icon_url") != null && !jsonObj.get("app_icon_url").isJsonNull()) && !jsonObj.get("app_icon_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_icon_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_icon_url").toString()));
      }
      if ((jsonObj.get("app_name") != null && !jsonObj.get("app_name").isJsonNull()) && !jsonObj.get("app_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_name").toString()));
      }
      if ((jsonObj.get("bundle_identifier") != null && !jsonObj.get("bundle_identifier").isJsonNull()) && !jsonObj.get("bundle_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_identifier").toString()));
      }
      if ((jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) && !jsonObj.get("destination_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_type").toString()));
      }
      // validate the optional field `destination_type`
      if (jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) {
        DestinationTypeEnum.validateJsonElement(jsonObj.get("destination_type"));
      }
      if ((jsonObj.get("device_family") != null && !jsonObj.get("device_family").isJsonNull()) && !jsonObj.get("device_family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_family").toString()));
      }
      if ((jsonObj.get("distribution_group_id") != null && !jsonObj.get("distribution_group_id").isJsonNull()) && !jsonObj.get("distribution_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distribution_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distribution_group_id").toString()));
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("install_url") != null && !jsonObj.get("install_url").isJsonNull()) && !jsonObj.get("install_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `install_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("install_url").toString()));
      }
      if ((jsonObj.get("min_os") != null && !jsonObj.get("min_os").isJsonNull()) && !jsonObj.get("min_os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_os").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        OriginEnum.validateJsonElement(jsonObj.get("origin"));
      }
      if ((jsonObj.get("provisioning_profile_name") != null && !jsonObj.get("provisioning_profile_name").isJsonNull()) && !jsonObj.get("provisioning_profile_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioning_profile_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioning_profile_name").toString()));
      }
      if ((jsonObj.get("provisioning_profile_type") != null && !jsonObj.get("provisioning_profile_type").isJsonNull()) && !jsonObj.get("provisioning_profile_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioning_profile_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioning_profile_type").toString()));
      }
      // validate the optional field `provisioning_profile_type`
      if (jsonObj.get("provisioning_profile_type") != null && !jsonObj.get("provisioning_profile_type").isJsonNull()) {
        ProvisioningProfileTypeEnum.validateJsonElement(jsonObj.get("provisioning_profile_type"));
      }
      if ((jsonObj.get("publishing_status") != null && !jsonObj.get("publishing_status").isJsonNull()) && !jsonObj.get("publishing_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publishing_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publishing_status").toString()));
      }
      if ((jsonObj.get("release_notes") != null && !jsonObj.get("release_notes").isJsonNull()) && !jsonObj.get("release_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_notes").toString()));
      }
      if ((jsonObj.get("secondary_download_url") != null && !jsonObj.get("secondary_download_url").isJsonNull()) && !jsonObj.get("secondary_download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_download_url").toString()));
      }
      if ((jsonObj.get("short_version") != null && !jsonObj.get("short_version").isJsonNull()) && !jsonObj.get("short_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_version").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("uploaded_at") != null && !jsonObj.get("uploaded_at").isJsonNull()) && !jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateReleaseDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateReleaseDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateReleaseDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateReleaseDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateReleaseDetailsResponse>() {
           @Override
           public void write(JsonWriter out, PrivateReleaseDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateReleaseDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateReleaseDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateReleaseDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to PrivateReleaseDetailsResponse
   */
  public static PrivateReleaseDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateReleaseDetailsResponse.class);
  }

  /**
   * Convert an instance of PrivateReleaseDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

