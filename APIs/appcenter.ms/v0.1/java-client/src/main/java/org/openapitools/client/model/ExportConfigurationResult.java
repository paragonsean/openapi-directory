/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExportConfigurationsList200ResponseValuesInnerExportConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Export configuration result
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportConfigurationResult {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_EXPORT_CONFIGURATION = "export_configuration";
  @SerializedName(SERIALIZED_NAME_EXPORT_CONFIGURATION)
  private ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfiguration;

  /**
   * Gets or Sets exportEntities
   */
  @JsonAdapter(ExportEntitiesEnum.Adapter.class)
  public enum ExportEntitiesEnum {
    CRASHES("crashes"),
    
    ERRORS("errors"),
    
    ATTACHMENTS("attachments"),
    
    NO_LOGS("no_logs");

    private String value;

    ExportEntitiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExportEntitiesEnum fromValue(String value) {
      for (ExportEntitiesEnum b : ExportEntitiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExportEntitiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportEntitiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExportEntitiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExportEntitiesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExportEntitiesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPORT_ENTITIES = "export_entities";
  @SerializedName(SERIALIZED_NAME_EXPORT_ENTITIES)
  private List<ExportEntitiesEnum> exportEntities = new ArrayList<>();

  /**
   * Target resource type of export configuration
   */
  @JsonAdapter(ExportTypeEnum.Adapter.class)
  public enum ExportTypeEnum {
    BLOB_STORAGE("BlobStorage"),
    
    APP_INSIGHTS("AppInsights");

    private String value;

    ExportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExportTypeEnum fromValue(String value) {
      for (ExportTypeEnum b : ExportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPORT_TYPE = "export_type";
  @SerializedName(SERIALIZED_NAME_EXPORT_TYPE)
  private ExportTypeEnum exportType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_RUN_TIME = "last_run_time";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_TIME)
  private String lastRunTime;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resource_group";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resource_name";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  /**
   * State of the export job
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    PENDING("Pending"),
    
    DELETED("Deleted"),
    
    INVALID("Invalid");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_INFO = "state_info";
  @SerializedName(SERIALIZED_NAME_STATE_INFO)
  private String stateInfo;

  public ExportConfigurationResult() {
  }

  public ExportConfigurationResult creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Creation time in ISO 8601 format
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public ExportConfigurationResult exportConfiguration(ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfiguration) {
    this.exportConfiguration = exportConfiguration;
    return this;
  }

  /**
   * Get exportConfiguration
   * @return exportConfiguration
   */
  @javax.annotation.Nullable
  public ExportConfigurationsList200ResponseValuesInnerExportConfiguration getExportConfiguration() {
    return exportConfiguration;
  }

  public void setExportConfiguration(ExportConfigurationsList200ResponseValuesInnerExportConfiguration exportConfiguration) {
    this.exportConfiguration = exportConfiguration;
  }


  public ExportConfigurationResult exportEntities(List<ExportEntitiesEnum> exportEntities) {
    this.exportEntities = exportEntities;
    return this;
  }

  public ExportConfigurationResult addExportEntitiesItem(ExportEntitiesEnum exportEntitiesItem) {
    if (this.exportEntities == null) {
      this.exportEntities = new ArrayList<>();
    }
    this.exportEntities.add(exportEntitiesItem);
    return this;
  }

  /**
   * Get exportEntities
   * @return exportEntities
   */
  @javax.annotation.Nullable
  public List<ExportEntitiesEnum> getExportEntities() {
    return exportEntities;
  }

  public void setExportEntities(List<ExportEntitiesEnum> exportEntities) {
    this.exportEntities = exportEntities;
  }


  public ExportConfigurationResult exportType(ExportTypeEnum exportType) {
    this.exportType = exportType;
    return this;
  }

  /**
   * Target resource type of export configuration
   * @return exportType
   */
  @javax.annotation.Nonnull
  public ExportTypeEnum getExportType() {
    return exportType;
  }

  public void setExportType(ExportTypeEnum exportType) {
    this.exportType = exportType;
  }


  public ExportConfigurationResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Export configuration id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExportConfigurationResult lastRunTime(String lastRunTime) {
    this.lastRunTime = lastRunTime;
    return this;
  }

  /**
   * Latest time in ISO 8601 format when export completed successfully
   * @return lastRunTime
   */
  @javax.annotation.Nullable
  public String getLastRunTime() {
    return lastRunTime;
  }

  public void setLastRunTime(String lastRunTime) {
    this.lastRunTime = lastRunTime;
  }


  public ExportConfigurationResult resourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
    return this;
  }

  /**
   * resource group for the storage account/App Insights resource
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }

  public void setResourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
  }


  public ExportConfigurationResult resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Storage accout or Appinsights resource name
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public ExportConfigurationResult state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the export job
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ExportConfigurationResult stateInfo(String stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  /**
   * Additional information about export configuration state
   * @return stateInfo
   */
  @javax.annotation.Nullable
  public String getStateInfo() {
    return stateInfo;
  }

  public void setStateInfo(String stateInfo) {
    this.stateInfo = stateInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportConfigurationResult exportConfigurationResult = (ExportConfigurationResult) o;
    return Objects.equals(this.creationTime, exportConfigurationResult.creationTime) &&
        Objects.equals(this.exportConfiguration, exportConfigurationResult.exportConfiguration) &&
        Objects.equals(this.exportEntities, exportConfigurationResult.exportEntities) &&
        Objects.equals(this.exportType, exportConfigurationResult.exportType) &&
        Objects.equals(this.id, exportConfigurationResult.id) &&
        Objects.equals(this.lastRunTime, exportConfigurationResult.lastRunTime) &&
        Objects.equals(this.resourceGroup, exportConfigurationResult.resourceGroup) &&
        Objects.equals(this.resourceName, exportConfigurationResult.resourceName) &&
        Objects.equals(this.state, exportConfigurationResult.state) &&
        Objects.equals(this.stateInfo, exportConfigurationResult.stateInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, exportConfiguration, exportEntities, exportType, id, lastRunTime, resourceGroup, resourceName, state, stateInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportConfigurationResult {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    exportConfiguration: ").append(toIndentedString(exportConfiguration)).append("\n");
    sb.append("    exportEntities: ").append(toIndentedString(exportEntities)).append("\n");
    sb.append("    exportType: ").append(toIndentedString(exportType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastRunTime: ").append(toIndentedString(lastRunTime)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateInfo: ").append(toIndentedString(stateInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_time");
    openapiFields.add("export_configuration");
    openapiFields.add("export_entities");
    openapiFields.add("export_type");
    openapiFields.add("id");
    openapiFields.add("last_run_time");
    openapiFields.add("resource_group");
    openapiFields.add("resource_name");
    openapiFields.add("state");
    openapiFields.add("state_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creation_time");
    openapiRequiredFields.add("export_type");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportConfigurationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportConfigurationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportConfigurationResult is not found in the empty JSON string", ExportConfigurationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportConfigurationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportConfigurationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportConfigurationResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("creation_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation_time").toString()));
      }
      // validate the optional field `export_configuration`
      if (jsonObj.get("export_configuration") != null && !jsonObj.get("export_configuration").isJsonNull()) {
        ExportConfigurationsList200ResponseValuesInnerExportConfiguration.validateJsonElement(jsonObj.get("export_configuration"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("export_entities") != null && !jsonObj.get("export_entities").isJsonNull() && !jsonObj.get("export_entities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `export_entities` to be an array in the JSON string but got `%s`", jsonObj.get("export_entities").toString()));
      }
      if (!jsonObj.get("export_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `export_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("export_type").toString()));
      }
      // validate the required field `export_type`
      ExportTypeEnum.validateJsonElement(jsonObj.get("export_type"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("last_run_time") != null && !jsonObj.get("last_run_time").isJsonNull()) && !jsonObj.get("last_run_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_run_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_run_time").toString()));
      }
      if ((jsonObj.get("resource_group") != null && !jsonObj.get("resource_group").isJsonNull()) && !jsonObj.get("resource_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_group").toString()));
      }
      if ((jsonObj.get("resource_name") != null && !jsonObj.get("resource_name").isJsonNull()) && !jsonObj.get("resource_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_name").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("state_info") != null && !jsonObj.get("state_info").isJsonNull()) && !jsonObj.get("state_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_info").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportConfigurationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportConfigurationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportConfigurationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportConfigurationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportConfigurationResult>() {
           @Override
           public void write(JsonWriter out, ExportConfigurationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportConfigurationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportConfigurationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportConfigurationResult
   * @throws IOException if the JSON string is invalid with respect to ExportConfigurationResult
   */
  public static ExportConfigurationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportConfigurationResult.class);
  }

  /**
   * Convert an instance of ExportConfigurationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

