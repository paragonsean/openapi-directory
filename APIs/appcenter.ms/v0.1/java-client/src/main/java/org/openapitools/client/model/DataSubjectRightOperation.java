/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataSubjectRightOperation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataSubjectRightOperation {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private String context;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private UUID operationId;

  public static final String SERIALIZED_NAME_PARTICIPANT = "participant";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT)
  private String participant;

  public static final String SERIALIZED_NAME_PARTICIPANT_DATA = "participantData";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_DATA)
  private String participantData;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  /**
   * Request type
   */
  @JsonAdapter(RequestTypeEnum.Adapter.class)
  public enum RequestTypeEnum {
    UNSUPPORTED("Unsupported"),
    
    DELETE("Delete"),
    
    PURGE("Purge"),
    
    UNDO_DELETE("UndoDelete"),
    
    SCHEDULED("Scheduled"),
    
    APP_DELETE("AppDelete"),
    
    APP_PURGE("AppPurge"),
    
    APP_UNDO_DELETE("AppUndoDelete"),
    
    EXPORT("Export"),
    
    CUSTOMER_ACCOUNT_DELETE("CustomerAccountDelete"),
    
    CUSTOMER_ACCOUNT_EXPORT("CustomerAccountExport"),
    
    CUSTOMER_USER_DELETE("CustomerUserDelete"),
    
    CUSTOMER_USER_EXPORT("CustomerUserExport");

    private String value;

    RequestTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestTypeEnum fromValue(String value) {
      for (RequestTypeEnum b : RequestTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private RequestTypeEnum requestType;

  /**
   * Operation status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NONE("None"),
    
    CREATED("Created"),
    
    QUEUED("Queued"),
    
    IN_PROGRESS("InProgress"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public DataSubjectRightOperation() {
  }

  public DataSubjectRightOperation appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * Application identifier if applicable
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public DataSubjectRightOperation context(String context) {
    this.context = context;
    return this;
  }

  /**
   * JSON object decribing what to delete (TODO - make separate definition?)
   * @return context
   */
  @javax.annotation.Nonnull
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }


  public DataSubjectRightOperation operationId(UUID operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Unique operation identifier
   * @return operationId
   */
  @javax.annotation.Nonnull
  public UUID getOperationId() {
    return operationId;
  }

  public void setOperationId(UUID operationId) {
    this.operationId = operationId;
  }


  public DataSubjectRightOperation participant(String participant) {
    this.participant = participant;
    return this;
  }

  /**
   * Participant to execute the response
   * @return participant
   */
  @javax.annotation.Nonnull
  public String getParticipant() {
    return participant;
  }

  public void setParticipant(String participant) {
    this.participant = participant;
  }


  public DataSubjectRightOperation participantData(String participantData) {
    this.participantData = participantData;
    return this;
  }

  /**
   * String field to be used by participant for any intermediate statuses or data they need to save
   * @return participantData
   */
  @javax.annotation.Nullable
  public String getParticipantData() {
    return participantData;
  }

  public void setParticipantData(String participantData) {
    this.participantData = participantData;
  }


  public DataSubjectRightOperation requestId(UUID requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Unique request identifier
   * @return requestId
   */
  @javax.annotation.Nonnull
  public UUID getRequestId() {
    return requestId;
  }

  public void setRequestId(UUID requestId) {
    this.requestId = requestId;
  }


  public DataSubjectRightOperation requestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * Request type
   * @return requestType
   */
  @javax.annotation.Nonnull
  public RequestTypeEnum getRequestType() {
    return requestType;
  }

  public void setRequestType(RequestTypeEnum requestType) {
    this.requestType = requestType;
  }


  public DataSubjectRightOperation status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Operation status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSubjectRightOperation dataSubjectRightOperation = (DataSubjectRightOperation) o;
    return Objects.equals(this.appId, dataSubjectRightOperation.appId) &&
        Objects.equals(this.context, dataSubjectRightOperation.context) &&
        Objects.equals(this.operationId, dataSubjectRightOperation.operationId) &&
        Objects.equals(this.participant, dataSubjectRightOperation.participant) &&
        Objects.equals(this.participantData, dataSubjectRightOperation.participantData) &&
        Objects.equals(this.requestId, dataSubjectRightOperation.requestId) &&
        Objects.equals(this.requestType, dataSubjectRightOperation.requestType) &&
        Objects.equals(this.status, dataSubjectRightOperation.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, context, operationId, participant, participantData, requestId, requestType, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSubjectRightOperation {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    participant: ").append(toIndentedString(participant)).append("\n");
    sb.append("    participantData: ").append(toIndentedString(participantData)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("context");
    openapiFields.add("operationId");
    openapiFields.add("participant");
    openapiFields.add("participantData");
    openapiFields.add("requestId");
    openapiFields.add("requestType");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("context");
    openapiRequiredFields.add("operationId");
    openapiRequiredFields.add("participant");
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("requestType");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataSubjectRightOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataSubjectRightOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSubjectRightOperation is not found in the empty JSON string", DataSubjectRightOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataSubjectRightOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSubjectRightOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSubjectRightOperation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if (!jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if (!jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if (!jsonObj.get("participant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participant").toString()));
      }
      if ((jsonObj.get("participantData") != null && !jsonObj.get("participantData").isJsonNull()) && !jsonObj.get("participantData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantData").toString()));
      }
      if (!jsonObj.get("requestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestId").toString()));
      }
      if (!jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      // validate the required field `requestType`
      RequestTypeEnum.validateJsonElement(jsonObj.get("requestType"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSubjectRightOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSubjectRightOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSubjectRightOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSubjectRightOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSubjectRightOperation>() {
           @Override
           public void write(JsonWriter out, DataSubjectRightOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSubjectRightOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataSubjectRightOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataSubjectRightOperation
   * @throws IOException if the JSON string is invalid with respect to DataSubjectRightOperation
   */
  public static DataSubjectRightOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSubjectRightOperation.class);
  }

  /**
   * Convert an instance of DataSubjectRightOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

