/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeviceList;
import org.openapitools.client.model.DeviceSelection;
import org.openapitools.client.model.DeviceSet;
import org.openapitools.client.model.DeviceSetUpdateInformation;
import org.openapitools.client.model.NameOfTheTestSeries;
import org.openapitools.client.model.Subscription1;
import org.openapitools.client.model.TestCloudErrorDetails;
import org.openapitools.client.model.TestCloudFileHash;
import org.openapitools.client.model.TestCloudFileHash1;
import org.openapitools.client.model.TestCloudFileHashResponse;
import org.openapitools.client.model.TestCloudStartTestRunOptions;
import org.openapitools.client.model.TestCloudTestRunStartResult;
import org.openapitools.client.model.TestGdprExportAccount200Response;
import org.openapitools.client.model.TestGdprExportAccounts200Response;
import org.openapitools.client.model.TestGdprExportApp200Response;
import org.openapitools.client.model.TestGdprExportFeatureFlag200Response;
import org.openapitools.client.model.TestGdprExportFileSetFile200Response;
import org.openapitools.client.model.TestGdprExportHashFile200Response;
import org.openapitools.client.model.TestGdprExportPipelineTest200Response;
import org.openapitools.client.model.TestGdprExportTestRun200Response;
import org.openapitools.client.model.TestGetDeviceConfigurations200ResponseInner;
import org.openapitools.client.model.TestGetTestReport200Response;
import org.openapitools.client.model.TestRun;
import org.openapitools.client.model.TestRunState;
import org.openapitools.client.model.TestSeries;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for testArchiveTestRun
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testArchiveTestRunCall(UUID testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testArchiveTestRunValidateBeforeCall(UUID testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testArchiveTestRun(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testArchiveTestRun(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testArchiveTestRun(Async)");
        }

        return testArchiveTestRunCall(testRunId, ownerName, appName, _callback);

    }

    /**
     * 
     * Logically deletes a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public TestRun testArchiveTestRun(UUID testRunId, String ownerName, String appName) throws ApiException {
        ApiResponse<TestRun> localVarResp = testArchiveTestRunWithHttpInfo(testRunId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Logically deletes a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRun> testArchiveTestRunWithHttpInfo(UUID testRunId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testArchiveTestRunValidateBeforeCall(testRunId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Logically deletes a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testArchiveTestRunAsync(UUID testRunId, String ownerName, String appName, final ApiCallback<TestRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = testArchiveTestRunValidateBeforeCall(testRunId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCreateDeviceSelection
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceList  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateDeviceSelectionCall(String ownerName, String appName, DeviceList deviceList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceList;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/device_selection"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCreateDeviceSelectionValidateBeforeCall(String ownerName, String appName, DeviceList deviceList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testCreateDeviceSelection(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testCreateDeviceSelection(Async)");
        }

        // verify the required parameter 'deviceList' is set
        if (deviceList == null) {
            throw new ApiException("Missing the required parameter 'deviceList' when calling testCreateDeviceSelection(Async)");
        }

        return testCreateDeviceSelectionCall(ownerName, appName, deviceList, _callback);

    }

    /**
     * 
     * Creates a short ID for a list of devices
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceList  (required)
     * @return DeviceSelection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs </td><td>  -  </td></tr>
     </table>
     */
    public DeviceSelection testCreateDeviceSelection(String ownerName, String appName, DeviceList deviceList) throws ApiException {
        ApiResponse<DeviceSelection> localVarResp = testCreateDeviceSelectionWithHttpInfo(ownerName, appName, deviceList);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a short ID for a list of devices
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceList  (required)
     * @return ApiResponse&lt;DeviceSelection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceSelection> testCreateDeviceSelectionWithHttpInfo(String ownerName, String appName, DeviceList deviceList) throws ApiException {
        okhttp3.Call localVarCall = testCreateDeviceSelectionValidateBeforeCall(ownerName, appName, deviceList, null);
        Type localVarReturnType = new TypeToken<DeviceSelection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a short ID for a list of devices
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceList  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateDeviceSelectionAsync(String ownerName, String appName, DeviceList deviceList, final ApiCallback<DeviceSelection> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCreateDeviceSelectionValidateBeforeCall(ownerName, appName, deviceList, _callback);
        Type localVarReturnType = new TypeToken<DeviceSelection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCreateDeviceSetOfOwner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateDeviceSetOfOwnerCall(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSetUpdateInformation;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCreateDeviceSetOfOwnerValidateBeforeCall(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testCreateDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testCreateDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'deviceSetUpdateInformation' is set
        if (deviceSetUpdateInformation == null) {
            throw new ApiException("Missing the required parameter 'deviceSetUpdateInformation' when calling testCreateDeviceSetOfOwner(Async)");
        }

        return testCreateDeviceSetOfOwnerCall(ownerName, appName, deviceSetUpdateInformation, _callback);

    }

    /**
     * 
     * Creates a device set belonging to the owner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return DeviceSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public DeviceSet testCreateDeviceSetOfOwner(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        ApiResponse<DeviceSet> localVarResp = testCreateDeviceSetOfOwnerWithHttpInfo(ownerName, appName, deviceSetUpdateInformation);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a device set belonging to the owner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return ApiResponse&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceSet> testCreateDeviceSetOfOwnerWithHttpInfo(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        okhttp3.Call localVarCall = testCreateDeviceSetOfOwnerValidateBeforeCall(ownerName, appName, deviceSetUpdateInformation, null);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a device set belonging to the owner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateDeviceSetOfOwnerAsync(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback<DeviceSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCreateDeviceSetOfOwnerValidateBeforeCall(ownerName, appName, deviceSetUpdateInformation, _callback);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCreateDeviceSetOfUser
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateDeviceSetOfUserCall(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSetUpdateInformation;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCreateDeviceSetOfUserValidateBeforeCall(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testCreateDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testCreateDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'deviceSetUpdateInformation' is set
        if (deviceSetUpdateInformation == null) {
            throw new ApiException("Missing the required parameter 'deviceSetUpdateInformation' when calling testCreateDeviceSetOfUser(Async)");
        }

        return testCreateDeviceSetOfUserCall(ownerName, appName, deviceSetUpdateInformation, _callback);

    }

    /**
     * 
     * Creates a device set belonging to the user
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return DeviceSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public DeviceSet testCreateDeviceSetOfUser(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        ApiResponse<DeviceSet> localVarResp = testCreateDeviceSetOfUserWithHttpInfo(ownerName, appName, deviceSetUpdateInformation);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a device set belonging to the user
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return ApiResponse&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceSet> testCreateDeviceSetOfUserWithHttpInfo(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        okhttp3.Call localVarCall = testCreateDeviceSetOfUserValidateBeforeCall(ownerName, appName, deviceSetUpdateInformation, null);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a device set belonging to the user
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateDeviceSetOfUserAsync(String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback<DeviceSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCreateDeviceSetOfUserValidateBeforeCall(ownerName, appName, deviceSetUpdateInformation, _callback);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCreateSubscription
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateSubscriptionCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/subscriptions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCreateSubscriptionValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testCreateSubscription(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testCreateSubscription(Async)");
        }

        return testCreateSubscriptionCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Accept a free trial subscription
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return Subscription1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Subscription1 testCreateSubscription(String ownerName, String appName) throws ApiException {
        ApiResponse<Subscription1> localVarResp = testCreateSubscriptionWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Accept a free trial subscription
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Subscription1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription1> testCreateSubscriptionWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testCreateSubscriptionValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<Subscription1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Accept a free trial subscription
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateSubscriptionAsync(String ownerName, String appName, final ApiCallback<Subscription1> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCreateSubscriptionValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<Subscription1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCreateTestRun
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateTestRunCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCreateTestRunValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testCreateTestRun(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testCreateTestRun(Async)");
        }

        return testCreateTestRunCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Creates a new test run
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
     </table>
     */
    public void testCreateTestRun(String ownerName, String appName) throws ApiException {
        testCreateTestRunWithHttpInfo(ownerName, appName);
    }

    /**
     * 
     * Creates a new test run
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> testCreateTestRunWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testCreateTestRunValidateBeforeCall(ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Creates a new test run
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateTestRunAsync(String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCreateTestRunValidateBeforeCall(ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testCreateTestSeries
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid test series name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateTestSeriesCall(String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = nameOfTheTestSeries;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testCreateTestSeriesValidateBeforeCall(String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testCreateTestSeries(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testCreateTestSeries(Async)");
        }

        // verify the required parameter 'nameOfTheTestSeries' is set
        if (nameOfTheTestSeries == null) {
            throw new ApiException("Missing the required parameter 'nameOfTheTestSeries' when calling testCreateTestSeries(Async)");
        }

        return testCreateTestSeriesCall(ownerName, appName, nameOfTheTestSeries, _callback);

    }

    /**
     * 
     * Creates new test series for an application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @return TestSeries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid test series name </td><td>  -  </td></tr>
     </table>
     */
    public TestSeries testCreateTestSeries(String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries) throws ApiException {
        ApiResponse<TestSeries> localVarResp = testCreateTestSeriesWithHttpInfo(ownerName, appName, nameOfTheTestSeries);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates new test series for an application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @return ApiResponse&lt;TestSeries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid test series name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestSeries> testCreateTestSeriesWithHttpInfo(String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries) throws ApiException {
        okhttp3.Call localVarCall = testCreateTestSeriesValidateBeforeCall(ownerName, appName, nameOfTheTestSeries, null);
        Type localVarReturnType = new TypeToken<TestSeries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates new test series for an application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid test series name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testCreateTestSeriesAsync(String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries, final ApiCallback<TestSeries> _callback) throws ApiException {

        okhttp3.Call localVarCall = testCreateTestSeriesValidateBeforeCall(ownerName, appName, nameOfTheTestSeries, _callback);
        Type localVarReturnType = new TypeToken<TestSeries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testDeleteDeviceSetOfOwner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDeleteDeviceSetOfOwnerCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testDeleteDeviceSetOfOwnerValidateBeforeCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testDeleteDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testDeleteDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testDeleteDeviceSetOfOwner(Async)");
        }

        return testDeleteDeviceSetOfOwnerCall(id, ownerName, appName, _callback);

    }

    /**
     * 
     * Deletes a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public void testDeleteDeviceSetOfOwner(UUID id, String ownerName, String appName) throws ApiException {
        testDeleteDeviceSetOfOwnerWithHttpInfo(id, ownerName, appName);
    }

    /**
     * 
     * Deletes a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testDeleteDeviceSetOfOwnerWithHttpInfo(UUID id, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testDeleteDeviceSetOfOwnerValidateBeforeCall(id, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDeleteDeviceSetOfOwnerAsync(UUID id, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testDeleteDeviceSetOfOwnerValidateBeforeCall(id, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testDeleteDeviceSetOfUser
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDeleteDeviceSetOfUserCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testDeleteDeviceSetOfUserValidateBeforeCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testDeleteDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testDeleteDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testDeleteDeviceSetOfUser(Async)");
        }

        return testDeleteDeviceSetOfUserCall(id, ownerName, appName, _callback);

    }

    /**
     * 
     * Deletes a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public void testDeleteDeviceSetOfUser(UUID id, String ownerName, String appName) throws ApiException {
        testDeleteDeviceSetOfUserWithHttpInfo(id, ownerName, appName);
    }

    /**
     * 
     * Deletes a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testDeleteDeviceSetOfUserWithHttpInfo(UUID id, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testDeleteDeviceSetOfUserValidateBeforeCall(id, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDeleteDeviceSetOfUserAsync(UUID id, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testDeleteDeviceSetOfUserValidateBeforeCall(id, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testDeleteTestSeries
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The test series was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDeleteTestSeriesCall(String testSeriesSlug, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}"
            .replace("{" + "test_series_slug" + "}", localVarApiClient.escapeString(testSeriesSlug.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testDeleteTestSeriesValidateBeforeCall(String testSeriesSlug, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testSeriesSlug' is set
        if (testSeriesSlug == null) {
            throw new ApiException("Missing the required parameter 'testSeriesSlug' when calling testDeleteTestSeries(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testDeleteTestSeries(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testDeleteTestSeries(Async)");
        }

        return testDeleteTestSeriesCall(testSeriesSlug, ownerName, appName, _callback);

    }

    /**
     * 
     * Deletes a single test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The test series was not found </td><td>  -  </td></tr>
     </table>
     */
    public void testDeleteTestSeries(String testSeriesSlug, String ownerName, String appName) throws ApiException {
        testDeleteTestSeriesWithHttpInfo(testSeriesSlug, ownerName, appName);
    }

    /**
     * 
     * Deletes a single test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The test series was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testDeleteTestSeriesWithHttpInfo(String testSeriesSlug, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testDeleteTestSeriesValidateBeforeCall(testSeriesSlug, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a single test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully removed </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The test series was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testDeleteTestSeriesAsync(String testSeriesSlug, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testDeleteTestSeriesValidateBeforeCall(testSeriesSlug, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportAccount
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAccountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/account/test/export/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportAccountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return testGdprExportAccountCall(_callback);

    }

    /**
     * 
     * Lists account data
     * @return TestGdprExportAccount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportAccount200Response testGdprExportAccount() throws ApiException {
        ApiResponse<TestGdprExportAccount200Response> localVarResp = testGdprExportAccountWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists account data
     * @return ApiResponse&lt;TestGdprExportAccount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportAccount200Response> testGdprExportAccountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = testGdprExportAccountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TestGdprExportAccount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists account data
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAccountAsync(final ApiCallback<TestGdprExportAccount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportAccountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TestGdprExportAccount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAccountsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/account/test/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return testGdprExportAccountsCall(_callback);

    }

    /**
     * 
     * Lists all the endpoints available for Test accounts data
     * @return TestGdprExportAccounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportAccounts200Response testGdprExportAccounts() throws ApiException {
        ApiResponse<TestGdprExportAccounts200Response> localVarResp = testGdprExportAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the endpoints available for Test accounts data
     * @return ApiResponse&lt;TestGdprExportAccounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportAccounts200Response> testGdprExportAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = testGdprExportAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TestGdprExportAccounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the endpoints available for Test accounts data
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAccountsAsync(final ApiCallback<TestGdprExportAccounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TestGdprExportAccounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportApp
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAppCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/apps"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportAppValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGdprExportApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGdprExportApp(Async)");
        }

        return testGdprExportAppCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists app data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestGdprExportApp200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportApp200Response testGdprExportApp(String ownerName, String appName) throws ApiException {
        ApiResponse<TestGdprExportApp200Response> localVarResp = testGdprExportAppWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists app data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestGdprExportApp200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportApp200Response> testGdprExportAppWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGdprExportAppValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestGdprExportApp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists app data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAppAsync(String ownerName, String appName, final ApiCallback<TestGdprExportApp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportAppValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestGdprExportApp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportApps
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAppsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportAppsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGdprExportApps(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGdprExportApps(Async)");
        }

        return testGdprExportAppsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists all the endpoints available for Test apps data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestGdprExportAccounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportAccounts200Response testGdprExportApps(String ownerName, String appName) throws ApiException {
        ApiResponse<TestGdprExportAccounts200Response> localVarResp = testGdprExportAppsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the endpoints available for Test apps data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestGdprExportAccounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportAccounts200Response> testGdprExportAppsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGdprExportAppsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestGdprExportAccounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the endpoints available for Test apps data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportAppsAsync(String ownerName, String appName, final ApiCallback<TestGdprExportAccounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportAppsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestGdprExportAccounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportFeatureFlag
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportFeatureFlagCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/account/test/export/featureFlags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportFeatureFlagValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return testGdprExportFeatureFlagCall(_callback);

    }

    /**
     * 
     * Lists feature flag data
     * @return TestGdprExportFeatureFlag200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportFeatureFlag200Response testGdprExportFeatureFlag() throws ApiException {
        ApiResponse<TestGdprExportFeatureFlag200Response> localVarResp = testGdprExportFeatureFlagWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Lists feature flag data
     * @return ApiResponse&lt;TestGdprExportFeatureFlag200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportFeatureFlag200Response> testGdprExportFeatureFlagWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = testGdprExportFeatureFlagValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TestGdprExportFeatureFlag200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists feature flag data
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportFeatureFlagAsync(final ApiCallback<TestGdprExportFeatureFlag200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportFeatureFlagValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TestGdprExportFeatureFlag200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportFileSetFile
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportFileSetFileCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/fileSetFiles"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportFileSetFileValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGdprExportFileSetFile(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGdprExportFileSetFile(Async)");
        }

        return testGdprExportFileSetFileCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists file set file data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestGdprExportFileSetFile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportFileSetFile200Response testGdprExportFileSetFile(String ownerName, String appName) throws ApiException {
        ApiResponse<TestGdprExportFileSetFile200Response> localVarResp = testGdprExportFileSetFileWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists file set file data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestGdprExportFileSetFile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportFileSetFile200Response> testGdprExportFileSetFileWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGdprExportFileSetFileValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestGdprExportFileSetFile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists file set file data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportFileSetFileAsync(String ownerName, String appName, final ApiCallback<TestGdprExportFileSetFile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportFileSetFileValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestGdprExportFileSetFile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportHashFile
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportHashFileCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/hashFiles"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportHashFileValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGdprExportHashFile(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGdprExportHashFile(Async)");
        }

        return testGdprExportHashFileCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists hash file data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestGdprExportHashFile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportHashFile200Response testGdprExportHashFile(String ownerName, String appName) throws ApiException {
        ApiResponse<TestGdprExportHashFile200Response> localVarResp = testGdprExportHashFileWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists hash file data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestGdprExportHashFile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportHashFile200Response> testGdprExportHashFileWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGdprExportHashFileValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestGdprExportHashFile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists hash file data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportHashFileAsync(String ownerName, String appName, final ApiCallback<TestGdprExportHashFile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportHashFileValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestGdprExportHashFile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportPipelineTest
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportPipelineTestCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/pipelineTests"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportPipelineTestValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGdprExportPipelineTest(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGdprExportPipelineTest(Async)");
        }

        return testGdprExportPipelineTestCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists pipeline test data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestGdprExportPipelineTest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportPipelineTest200Response testGdprExportPipelineTest(String ownerName, String appName) throws ApiException {
        ApiResponse<TestGdprExportPipelineTest200Response> localVarResp = testGdprExportPipelineTestWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists pipeline test data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestGdprExportPipelineTest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportPipelineTest200Response> testGdprExportPipelineTestWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGdprExportPipelineTestValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestGdprExportPipelineTest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists pipeline test data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportPipelineTestAsync(String ownerName, String appName, final ApiCallback<TestGdprExportPipelineTest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportPipelineTestValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestGdprExportPipelineTest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGdprExportTestRun
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportTestRunCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test/export/testRuns"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGdprExportTestRunValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGdprExportTestRun(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGdprExportTestRun(Async)");
        }

        return testGdprExportTestRunCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists test run data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestGdprExportTestRun200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGdprExportTestRun200Response testGdprExportTestRun(String ownerName, String appName) throws ApiException {
        ApiResponse<TestGdprExportTestRun200Response> localVarResp = testGdprExportTestRunWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists test run data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestGdprExportTestRun200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGdprExportTestRun200Response> testGdprExportTestRunWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGdprExportTestRunValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestGdprExportTestRun200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists test run data
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGdprExportTestRunAsync(String ownerName, String appName, final ApiCallback<TestGdprExportTestRun200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGdprExportTestRunValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestGdprExportTestRun200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetAllTestRunsForSeries
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetAllTestRunsForSeriesCall(String testSeriesSlug, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}/test_runs"
            .replace("{" + "test_series_slug" + "}", localVarApiClient.escapeString(testSeriesSlug.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetAllTestRunsForSeriesValidateBeforeCall(String testSeriesSlug, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testSeriesSlug' is set
        if (testSeriesSlug == null) {
            throw new ApiException("Missing the required parameter 'testSeriesSlug' when calling testGetAllTestRunsForSeries(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetAllTestRunsForSeries(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetAllTestRunsForSeries(Async)");
        }

        return testGetAllTestRunsForSeriesCall(testSeriesSlug, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns list of all test runs for a given test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;TestRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TestRun> testGetAllTestRunsForSeries(String testSeriesSlug, String ownerName, String appName) throws ApiException {
        ApiResponse<List<TestRun>> localVarResp = testGetAllTestRunsForSeriesWithHttpInfo(testSeriesSlug, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns list of all test runs for a given test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;TestRun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestRun>> testGetAllTestRunsForSeriesWithHttpInfo(String testSeriesSlug, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetAllTestRunsForSeriesValidateBeforeCall(testSeriesSlug, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<TestRun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns list of all test runs for a given test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetAllTestRunsForSeriesAsync(String testSeriesSlug, String ownerName, String appName, final ApiCallback<List<TestRun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetAllTestRunsForSeriesValidateBeforeCall(testSeriesSlug, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<TestRun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetAllTestSeries
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param query A query string to filter test series (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetAllTestSeriesCall(String ownerName, String appName, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetAllTestSeriesValidateBeforeCall(String ownerName, String appName, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetAllTestSeries(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetAllTestSeries(Async)");
        }

        return testGetAllTestSeriesCall(ownerName, appName, query, _callback);

    }

    /**
     * 
     * Returns list of all test series for an application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param query A query string to filter test series (optional)
     * @return List&lt;TestSeries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TestSeries> testGetAllTestSeries(String ownerName, String appName, String query) throws ApiException {
        ApiResponse<List<TestSeries>> localVarResp = testGetAllTestSeriesWithHttpInfo(ownerName, appName, query);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns list of all test series for an application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param query A query string to filter test series (optional)
     * @return ApiResponse&lt;List&lt;TestSeries&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestSeries>> testGetAllTestSeriesWithHttpInfo(String ownerName, String appName, String query) throws ApiException {
        okhttp3.Call localVarCall = testGetAllTestSeriesValidateBeforeCall(ownerName, appName, query, null);
        Type localVarReturnType = new TypeToken<List<TestSeries>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns list of all test series for an application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param query A query string to filter test series (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetAllTestSeriesAsync(String ownerName, String appName, String query, final ApiCallback<List<TestSeries>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetAllTestSeriesValidateBeforeCall(ownerName, appName, query, _callback);
        Type localVarReturnType = new TypeToken<List<TestSeries>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetDeviceConfigurations
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appUploadId The ID of the test run (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetDeviceConfigurationsCall(String ownerName, String appName, UUID appUploadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/device_configurations"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appUploadId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_upload_id", appUploadId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetDeviceConfigurationsValidateBeforeCall(String ownerName, String appName, UUID appUploadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetDeviceConfigurations(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetDeviceConfigurations(Async)");
        }

        return testGetDeviceConfigurationsCall(ownerName, appName, appUploadId, _callback);

    }

    /**
     * 
     * Returns a list of available devices
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appUploadId The ID of the test run (optional)
     * @return List&lt;TestGetDeviceConfigurations200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TestGetDeviceConfigurations200ResponseInner> testGetDeviceConfigurations(String ownerName, String appName, UUID appUploadId) throws ApiException {
        ApiResponse<List<TestGetDeviceConfigurations200ResponseInner>> localVarResp = testGetDeviceConfigurationsWithHttpInfo(ownerName, appName, appUploadId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of available devices
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appUploadId The ID of the test run (optional)
     * @return ApiResponse&lt;List&lt;TestGetDeviceConfigurations200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestGetDeviceConfigurations200ResponseInner>> testGetDeviceConfigurationsWithHttpInfo(String ownerName, String appName, UUID appUploadId) throws ApiException {
        okhttp3.Call localVarCall = testGetDeviceConfigurationsValidateBeforeCall(ownerName, appName, appUploadId, null);
        Type localVarReturnType = new TypeToken<List<TestGetDeviceConfigurations200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of available devices
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param appUploadId The ID of the test run (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetDeviceConfigurationsAsync(String ownerName, String appName, UUID appUploadId, final ApiCallback<List<TestGetDeviceConfigurations200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetDeviceConfigurationsValidateBeforeCall(ownerName, appName, appUploadId, _callback);
        Type localVarReturnType = new TypeToken<List<TestGetDeviceConfigurations200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetDeviceSetOfOwner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetDeviceSetOfOwnerCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetDeviceSetOfOwnerValidateBeforeCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testGetDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetDeviceSetOfOwner(Async)");
        }

        return testGetDeviceSetOfOwnerCall(id, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return DeviceSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceSet testGetDeviceSetOfOwner(UUID id, String ownerName, String appName) throws ApiException {
        ApiResponse<DeviceSet> localVarResp = testGetDeviceSetOfOwnerWithHttpInfo(id, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceSet> testGetDeviceSetOfOwnerWithHttpInfo(UUID id, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetDeviceSetOfOwnerValidateBeforeCall(id, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetDeviceSetOfOwnerAsync(UUID id, String ownerName, String appName, final ApiCallback<DeviceSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetDeviceSetOfOwnerValidateBeforeCall(id, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetDeviceSetOfUser
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetDeviceSetOfUserCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetDeviceSetOfUserValidateBeforeCall(UUID id, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testGetDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetDeviceSetOfUser(Async)");
        }

        return testGetDeviceSetOfUserCall(id, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return DeviceSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceSet testGetDeviceSetOfUser(UUID id, String ownerName, String appName) throws ApiException {
        ApiResponse<DeviceSet> localVarResp = testGetDeviceSetOfUserWithHttpInfo(id, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceSet> testGetDeviceSetOfUserWithHttpInfo(UUID id, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetDeviceSetOfUserValidateBeforeCall(id, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetDeviceSetOfUserAsync(UUID id, String ownerName, String appName, final ApiCallback<DeviceSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetDeviceSetOfUserValidateBeforeCall(id, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetSubscriptions
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetSubscriptionsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/subscriptions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetSubscriptionsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetSubscriptions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetSubscriptions(Async)");
        }

        return testGetSubscriptionsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get information about the currently active subscriptions, if any
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return Subscription1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Subscription1 testGetSubscriptions(String ownerName, String appName) throws ApiException {
        ApiResponse<Subscription1> localVarResp = testGetSubscriptionsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get information about the currently active subscriptions, if any
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Subscription1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription1> testGetSubscriptionsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetSubscriptionsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<Subscription1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get information about the currently active subscriptions, if any
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetSubscriptionsAsync(String ownerName, String appName, final ApiCallback<Subscription1> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetSubscriptionsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<Subscription1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetTestReport
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestReportCall(UUID testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/report"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetTestReportValidateBeforeCall(UUID testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testGetTestReport(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetTestReport(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetTestReport(Async)");
        }

        return testGetTestReportCall(testRunId, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns a single test report
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestGetTestReport200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestGetTestReport200Response testGetTestReport(UUID testRunId, String ownerName, String appName) throws ApiException {
        ApiResponse<TestGetTestReport200Response> localVarResp = testGetTestReportWithHttpInfo(testRunId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a single test report
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestGetTestReport200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestGetTestReport200Response> testGetTestReportWithHttpInfo(UUID testRunId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetTestReportValidateBeforeCall(testRunId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestGetTestReport200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a single test report
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestReportAsync(UUID testRunId, String ownerName, String appName, final ApiCallback<TestGetTestReport200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetTestReportValidateBeforeCall(testRunId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestGetTestReport200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetTestRun
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestRunCall(UUID testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetTestRunValidateBeforeCall(UUID testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testGetTestRun(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetTestRun(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetTestRun(Async)");
        }

        return testGetTestRunCall(testRunId, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns a single test runs
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestRun testGetTestRun(UUID testRunId, String ownerName, String appName) throws ApiException {
        ApiResponse<TestRun> localVarResp = testGetTestRunWithHttpInfo(testRunId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a single test runs
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRun> testGetTestRunWithHttpInfo(UUID testRunId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetTestRunValidateBeforeCall(testRunId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a single test runs
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestRunAsync(UUID testRunId, String ownerName, String appName, final ApiCallback<TestRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetTestRunValidateBeforeCall(testRunId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetTestRunState
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestRunStateCall(String testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/state"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetTestRunStateValidateBeforeCall(String testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testGetTestRunState(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetTestRunState(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetTestRunState(Async)");
        }

        return testGetTestRunStateCall(testRunId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets state of the test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestRunState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestRunState testGetTestRunState(String testRunId, String ownerName, String appName) throws ApiException {
        ApiResponse<TestRunState> localVarResp = testGetTestRunStateWithHttpInfo(testRunId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets state of the test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestRunState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRunState> testGetTestRunStateWithHttpInfo(String testRunId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetTestRunStateValidateBeforeCall(testRunId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestRunState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets state of the test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestRunStateAsync(String testRunId, String ownerName, String appName, final ApiCallback<TestRunState> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetTestRunStateValidateBeforeCall(testRunId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestRunState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testGetTestRuns
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestRunsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testGetTestRunsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testGetTestRuns(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testGetTestRuns(Async)");
        }

        return testGetTestRunsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns a list of test runs
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;TestRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TestRun> testGetTestRuns(String ownerName, String appName) throws ApiException {
        ApiResponse<List<TestRun>> localVarResp = testGetTestRunsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of test runs
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;TestRun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestRun>> testGetTestRunsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testGetTestRunsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<TestRun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of test runs
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testGetTestRunsAsync(String ownerName, String appName, final ApiCallback<List<TestRun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testGetTestRunsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<TestRun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testListDeviceSetsOfOwner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testListDeviceSetsOfOwnerCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testListDeviceSetsOfOwnerValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testListDeviceSetsOfOwner(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testListDeviceSetsOfOwner(Async)");
        }

        return testListDeviceSetsOfOwnerCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists device sets belonging to the owner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<DeviceSet> testListDeviceSetsOfOwner(String ownerName, String appName) throws ApiException {
        ApiResponse<List<DeviceSet>> localVarResp = testListDeviceSetsOfOwnerWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists device sets belonging to the owner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;DeviceSet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeviceSet>> testListDeviceSetsOfOwnerWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testListDeviceSetsOfOwnerValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<DeviceSet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists device sets belonging to the owner
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testListDeviceSetsOfOwnerAsync(String ownerName, String appName, final ApiCallback<List<DeviceSet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testListDeviceSetsOfOwnerValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<DeviceSet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testListDeviceSetsOfUser
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testListDeviceSetsOfUserCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testListDeviceSetsOfUserValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testListDeviceSetsOfUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testListDeviceSetsOfUser(Async)");
        }

        return testListDeviceSetsOfUserCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Lists device sets belonging to the user
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<DeviceSet> testListDeviceSetsOfUser(String ownerName, String appName) throws ApiException {
        ApiResponse<List<DeviceSet>> localVarResp = testListDeviceSetsOfUserWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists device sets belonging to the user
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;DeviceSet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DeviceSet>> testListDeviceSetsOfUserWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testListDeviceSetsOfUserValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<DeviceSet>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists device sets belonging to the user
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testListDeviceSetsOfUserAsync(String ownerName, String appName, final ApiCallback<List<DeviceSet>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testListDeviceSetsOfUserValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<DeviceSet>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testPatchTestSeries
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully patched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new test series name is incorrect </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test series with the given slug name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPatchTestSeriesCall(String testSeriesSlug, String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = nameOfTheTestSeries;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_series/{test_series_slug}"
            .replace("{" + "test_series_slug" + "}", localVarApiClient.escapeString(testSeriesSlug.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testPatchTestSeriesValidateBeforeCall(String testSeriesSlug, String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testSeriesSlug' is set
        if (testSeriesSlug == null) {
            throw new ApiException("Missing the required parameter 'testSeriesSlug' when calling testPatchTestSeries(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testPatchTestSeries(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testPatchTestSeries(Async)");
        }

        // verify the required parameter 'nameOfTheTestSeries' is set
        if (nameOfTheTestSeries == null) {
            throw new ApiException("Missing the required parameter 'nameOfTheTestSeries' when calling testPatchTestSeries(Async)");
        }

        return testPatchTestSeriesCall(testSeriesSlug, ownerName, appName, nameOfTheTestSeries, _callback);

    }

    /**
     * 
     * Updates name and slug of a test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @return TestSeries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully patched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new test series name is incorrect </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test series with the given slug name was not found </td><td>  -  </td></tr>
     </table>
     */
    public TestSeries testPatchTestSeries(String testSeriesSlug, String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries) throws ApiException {
        ApiResponse<TestSeries> localVarResp = testPatchTestSeriesWithHttpInfo(testSeriesSlug, ownerName, appName, nameOfTheTestSeries);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates name and slug of a test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @return ApiResponse&lt;TestSeries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully patched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new test series name is incorrect </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test series with the given slug name was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestSeries> testPatchTestSeriesWithHttpInfo(String testSeriesSlug, String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries) throws ApiException {
        okhttp3.Call localVarCall = testPatchTestSeriesValidateBeforeCall(testSeriesSlug, ownerName, appName, nameOfTheTestSeries, null);
        Type localVarReturnType = new TypeToken<TestSeries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates name and slug of a test series
     * @param testSeriesSlug The slug of the test series (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param nameOfTheTestSeries  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Test series was successfully patched </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The new test series name is incorrect </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test series with the given slug name was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testPatchTestSeriesAsync(String testSeriesSlug, String ownerName, String appName, NameOfTheTestSeries nameOfTheTestSeries, final ApiCallback<TestSeries> _callback) throws ApiException {

        okhttp3.Call localVarCall = testPatchTestSeriesValidateBeforeCall(testSeriesSlug, ownerName, appName, nameOfTheTestSeries, _callback);
        Type localVarReturnType = new TypeToken<TestSeries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testStartTestRun
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudStartTestRunOptions Option required to start the test run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testStartTestRunCall(String testRunId, String ownerName, String appName, TestCloudStartTestRunOptions testCloudStartTestRunOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCloudStartTestRunOptions;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/start"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testStartTestRunValidateBeforeCall(String testRunId, String ownerName, String appName, TestCloudStartTestRunOptions testCloudStartTestRunOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testStartTestRun(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testStartTestRun(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testStartTestRun(Async)");
        }

        // verify the required parameter 'testCloudStartTestRunOptions' is set
        if (testCloudStartTestRunOptions == null) {
            throw new ApiException("Missing the required parameter 'testCloudStartTestRunOptions' when calling testStartTestRun(Async)");
        }

        return testStartTestRunCall(testRunId, ownerName, appName, testCloudStartTestRunOptions, _callback);

    }

    /**
     * 
     * Starts test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudStartTestRunOptions Option required to start the test run (required)
     * @return TestCloudTestRunStartResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TestCloudTestRunStartResult testStartTestRun(String testRunId, String ownerName, String appName, TestCloudStartTestRunOptions testCloudStartTestRunOptions) throws ApiException {
        ApiResponse<TestCloudTestRunStartResult> localVarResp = testStartTestRunWithHttpInfo(testRunId, ownerName, appName, testCloudStartTestRunOptions);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudStartTestRunOptions Option required to start the test run (required)
     * @return ApiResponse&lt;TestCloudTestRunStartResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestCloudTestRunStartResult> testStartTestRunWithHttpInfo(String testRunId, String ownerName, String appName, TestCloudStartTestRunOptions testCloudStartTestRunOptions) throws ApiException {
        okhttp3.Call localVarCall = testStartTestRunValidateBeforeCall(testRunId, ownerName, appName, testCloudStartTestRunOptions, null);
        Type localVarReturnType = new TypeToken<TestCloudTestRunStartResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudStartTestRunOptions Option required to start the test run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testStartTestRunAsync(String testRunId, String ownerName, String appName, TestCloudStartTestRunOptions testCloudStartTestRunOptions, final ApiCallback<TestCloudTestRunStartResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testStartTestRunValidateBeforeCall(testRunId, ownerName, appName, testCloudStartTestRunOptions, _callback);
        Type localVarReturnType = new TypeToken<TestCloudTestRunStartResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testStartUploadingFile
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File was created and can be uploaded </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testStartUploadingFileCall(String testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/files"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testStartUploadingFileValidateBeforeCall(String testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testStartUploadingFile(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testStartUploadingFile(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testStartUploadingFile(Async)");
        }

        return testStartUploadingFileCall(testRunId, ownerName, appName, _callback);

    }

    /**
     * 
     * Uploads file for a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File was created and can be uploaded </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public void testStartUploadingFile(String testRunId, String ownerName, String appName) throws ApiException {
        testStartUploadingFileWithHttpInfo(testRunId, ownerName, appName);
    }

    /**
     * 
     * Uploads file for a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File was created and can be uploaded </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testStartUploadingFileWithHttpInfo(String testRunId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testStartUploadingFileValidateBeforeCall(testRunId, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Uploads file for a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File was created and can be uploaded </td><td>  * Location - Link to get details about the cancel export. <br>  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testStartUploadingFileAsync(String testRunId, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testStartUploadingFileValidateBeforeCall(testRunId, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testStopTestRun
     * @param testRunId The ID of the test run to be stopped (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testStopTestRunCall(String testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/stop"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testStopTestRunValidateBeforeCall(String testRunId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testStopTestRun(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testStopTestRun(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testStopTestRun(Async)");
        }

        return testStopTestRunCall(testRunId, ownerName, appName, _callback);

    }

    /**
     * 
     * Stop a test run execution
     * @param testRunId The ID of the test run to be stopped (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return TestRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public TestRun testStopTestRun(String testRunId, String ownerName, String appName) throws ApiException {
        ApiResponse<TestRun> localVarResp = testStopTestRunWithHttpInfo(testRunId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Stop a test run execution
     * @param testRunId The ID of the test run to be stopped (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;TestRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRun> testStopTestRunWithHttpInfo(String testRunId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = testStopTestRunValidateBeforeCall(testRunId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<TestRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stop a test run execution
     * @param testRunId The ID of the test run to be stopped (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Test run with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testStopTestRunAsync(String testRunId, String ownerName, String appName, final ApiCallback<TestRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = testStopTestRunValidateBeforeCall(testRunId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<TestRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testUpdateDeviceSetOfOwner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUpdateDeviceSetOfOwnerCall(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSetUpdateInformation;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/owner/device_sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testUpdateDeviceSetOfOwnerValidateBeforeCall(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testUpdateDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testUpdateDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testUpdateDeviceSetOfOwner(Async)");
        }

        // verify the required parameter 'deviceSetUpdateInformation' is set
        if (deviceSetUpdateInformation == null) {
            throw new ApiException("Missing the required parameter 'deviceSetUpdateInformation' when calling testUpdateDeviceSetOfOwner(Async)");
        }

        return testUpdateDeviceSetOfOwnerCall(id, ownerName, appName, deviceSetUpdateInformation, _callback);

    }

    /**
     * 
     * Updates a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return DeviceSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceSet testUpdateDeviceSetOfOwner(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        ApiResponse<DeviceSet> localVarResp = testUpdateDeviceSetOfOwnerWithHttpInfo(id, ownerName, appName, deviceSetUpdateInformation);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return ApiResponse&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceSet> testUpdateDeviceSetOfOwnerWithHttpInfo(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        okhttp3.Call localVarCall = testUpdateDeviceSetOfOwnerValidateBeforeCall(id, ownerName, appName, deviceSetUpdateInformation, null);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a device set belonging to the owner
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUpdateDeviceSetOfOwnerAsync(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback<DeviceSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = testUpdateDeviceSetOfOwnerValidateBeforeCall(id, ownerName, appName, deviceSetUpdateInformation, _callback);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testUpdateDeviceSetOfUser
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUpdateDeviceSetOfUserCall(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceSetUpdateInformation;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/user/device_sets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testUpdateDeviceSetOfUserValidateBeforeCall(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testUpdateDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testUpdateDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testUpdateDeviceSetOfUser(Async)");
        }

        // verify the required parameter 'deviceSetUpdateInformation' is set
        if (deviceSetUpdateInformation == null) {
            throw new ApiException("Missing the required parameter 'deviceSetUpdateInformation' when calling testUpdateDeviceSetOfUser(Async)");
        }

        return testUpdateDeviceSetOfUserCall(id, ownerName, appName, deviceSetUpdateInformation, _callback);

    }

    /**
     * 
     * Updates a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return DeviceSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public DeviceSet testUpdateDeviceSetOfUser(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        ApiResponse<DeviceSet> localVarResp = testUpdateDeviceSetOfUserWithHttpInfo(id, ownerName, appName, deviceSetUpdateInformation);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @return ApiResponse&lt;DeviceSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceSet> testUpdateDeviceSetOfUserWithHttpInfo(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation) throws ApiException {
        okhttp3.Call localVarCall = testUpdateDeviceSetOfUserValidateBeforeCall(id, ownerName, appName, deviceSetUpdateInformation, null);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a device set belonging to the user
     * @param id The UUID of the device set (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deviceSetUpdateInformation  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid list of device IDs or conflicting name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Device set with the given ID was not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUpdateDeviceSetOfUserAsync(UUID id, String ownerName, String appName, DeviceSetUpdateInformation deviceSetUpdateInformation, final ApiCallback<DeviceSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = testUpdateDeviceSetOfUserValidateBeforeCall(id, ownerName, appName, deviceSetUpdateInformation, _callback);
        Type localVarReturnType = new TypeToken<DeviceSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testUploadHash
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash File hash information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Byte range verification required for given SHA256 hash </td><td>  * X-Challenge-Bytes - Byte range required to authenticate the request <br>  </td></tr>
        <tr><td> 412 </td><td> File with given SHA256 hash doesn&#39;t exist and must be uploaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUploadHashCall(String testRunId, String ownerName, String appName, TestCloudFileHash testCloudFileHash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCloudFileHash;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testUploadHashValidateBeforeCall(String testRunId, String ownerName, String appName, TestCloudFileHash testCloudFileHash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testUploadHash(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testUploadHash(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testUploadHash(Async)");
        }

        // verify the required parameter 'testCloudFileHash' is set
        if (testCloudFileHash == null) {
            throw new ApiException("Missing the required parameter 'testCloudFileHash' when calling testUploadHash(Async)");
        }

        return testUploadHashCall(testRunId, ownerName, appName, testCloudFileHash, _callback);

    }

    /**
     * 
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash File hash information (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Byte range verification required for given SHA256 hash </td><td>  * X-Challenge-Bytes - Byte range required to authenticate the request <br>  </td></tr>
        <tr><td> 412 </td><td> File with given SHA256 hash doesn&#39;t exist and must be uploaded </td><td>  -  </td></tr>
     </table>
     */
    public void testUploadHash(String testRunId, String ownerName, String appName, TestCloudFileHash testCloudFileHash) throws ApiException {
        testUploadHashWithHttpInfo(testRunId, ownerName, appName, testCloudFileHash);
    }

    /**
     * 
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash File hash information (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Byte range verification required for given SHA256 hash </td><td>  * X-Challenge-Bytes - Byte range required to authenticate the request <br>  </td></tr>
        <tr><td> 412 </td><td> File with given SHA256 hash doesn&#39;t exist and must be uploaded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testUploadHashWithHttpInfo(String testRunId, String ownerName, String appName, TestCloudFileHash testCloudFileHash) throws ApiException {
        okhttp3.Call localVarCall = testUploadHashValidateBeforeCall(testRunId, ownerName, appName, testCloudFileHash, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash File hash information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Byte range verification required for given SHA256 hash </td><td>  * X-Challenge-Bytes - Byte range required to authenticate the request <br>  </td></tr>
        <tr><td> 412 </td><td> File with given SHA256 hash doesn&#39;t exist and must be uploaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUploadHashAsync(String testRunId, String ownerName, String appName, TestCloudFileHash testCloudFileHash, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testUploadHashValidateBeforeCall(testRunId, ownerName, appName, testCloudFileHash, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testUploadHashesBatch
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash1 File hash information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUploadHashesBatchCall(String testRunId, String ownerName, String appName, List<TestCloudFileHash1> testCloudFileHash1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCloudFileHash1;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/test_runs/{test_run_id}/hashes/batch"
            .replace("{" + "test_run_id" + "}", localVarApiClient.escapeString(testRunId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testUploadHashesBatchValidateBeforeCall(String testRunId, String ownerName, String appName, List<TestCloudFileHash1> testCloudFileHash1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new ApiException("Missing the required parameter 'testRunId' when calling testUploadHashesBatch(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling testUploadHashesBatch(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling testUploadHashesBatch(Async)");
        }

        // verify the required parameter 'testCloudFileHash1' is set
        if (testCloudFileHash1 == null) {
            throw new ApiException("Missing the required parameter 'testCloudFileHash1' when calling testUploadHashesBatch(Async)");
        }

        return testUploadHashesBatchCall(testRunId, ownerName, appName, testCloudFileHash1, _callback);

    }

    /**
     * 
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash1 File hash information (required)
     * @return List&lt;TestCloudFileHashResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TestCloudFileHashResponse> testUploadHashesBatch(String testRunId, String ownerName, String appName, List<TestCloudFileHash1> testCloudFileHash1) throws ApiException {
        ApiResponse<List<TestCloudFileHashResponse>> localVarResp = testUploadHashesBatchWithHttpInfo(testRunId, ownerName, appName, testCloudFileHash1);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash1 File hash information (required)
     * @return ApiResponse&lt;List&lt;TestCloudFileHashResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TestCloudFileHashResponse>> testUploadHashesBatchWithHttpInfo(String testRunId, String ownerName, String appName, List<TestCloudFileHash1> testCloudFileHash1) throws ApiException {
        okhttp3.Call localVarCall = testUploadHashesBatchValidateBeforeCall(testRunId, ownerName, appName, testCloudFileHash1, null);
        Type localVarReturnType = new TypeToken<List<TestCloudFileHashResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds file with the given hash to a test run
     * @param testRunId The ID of the test run (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param testCloudFileHash1 File hash information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testUploadHashesBatchAsync(String testRunId, String ownerName, String appName, List<TestCloudFileHash1> testCloudFileHash1, final ApiCallback<List<TestCloudFileHashResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testUploadHashesBatchValidateBeforeCall(testRunId, ownerName, appName, testCloudFileHash1, _callback);
        Type localVarReturnType = new TypeToken<List<TestCloudFileHashResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
