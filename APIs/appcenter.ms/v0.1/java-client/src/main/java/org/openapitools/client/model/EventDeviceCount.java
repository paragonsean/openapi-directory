/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalyticsDeviceCounts200ResponseDailyInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventDeviceCount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventDeviceCount {
  public static final String SERIALIZED_NAME_DEVICES_COUNT = "devices_count";
  @SerializedName(SERIALIZED_NAME_DEVICES_COUNT)
  private List<AnalyticsDeviceCounts200ResponseDailyInner> devicesCount = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVIOUS_TOTAL_DEVICES_WITH_EVENT = "previous_total_devices_with_event";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TOTAL_DEVICES_WITH_EVENT)
  private Long previousTotalDevicesWithEvent;

  public static final String SERIALIZED_NAME_TOTAL_DEVICES = "total_devices";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEVICES)
  private Long totalDevices;

  public static final String SERIALIZED_NAME_TOTAL_DEVICES_WITH_EVENT = "total_devices_with_event";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEVICES_WITH_EVENT)
  private Long totalDevicesWithEvent;

  public EventDeviceCount() {
  }

  public EventDeviceCount devicesCount(List<AnalyticsDeviceCounts200ResponseDailyInner> devicesCount) {
    this.devicesCount = devicesCount;
    return this;
  }

  public EventDeviceCount addDevicesCountItem(AnalyticsDeviceCounts200ResponseDailyInner devicesCountItem) {
    if (this.devicesCount == null) {
      this.devicesCount = new ArrayList<>();
    }
    this.devicesCount.add(devicesCountItem);
    return this;
  }

  /**
   * Get devicesCount
   * @return devicesCount
   */
  @javax.annotation.Nullable
  public List<AnalyticsDeviceCounts200ResponseDailyInner> getDevicesCount() {
    return devicesCount;
  }

  public void setDevicesCount(List<AnalyticsDeviceCounts200ResponseDailyInner> devicesCount) {
    this.devicesCount = devicesCount;
  }


  public EventDeviceCount previousTotalDevicesWithEvent(Long previousTotalDevicesWithEvent) {
    this.previousTotalDevicesWithEvent = previousTotalDevicesWithEvent;
    return this;
  }

  /**
   * Get previousTotalDevicesWithEvent
   * @return previousTotalDevicesWithEvent
   */
  @javax.annotation.Nullable
  public Long getPreviousTotalDevicesWithEvent() {
    return previousTotalDevicesWithEvent;
  }

  public void setPreviousTotalDevicesWithEvent(Long previousTotalDevicesWithEvent) {
    this.previousTotalDevicesWithEvent = previousTotalDevicesWithEvent;
  }


  public EventDeviceCount totalDevices(Long totalDevices) {
    this.totalDevices = totalDevices;
    return this;
  }

  /**
   * Get totalDevices
   * @return totalDevices
   */
  @javax.annotation.Nullable
  public Long getTotalDevices() {
    return totalDevices;
  }

  public void setTotalDevices(Long totalDevices) {
    this.totalDevices = totalDevices;
  }


  public EventDeviceCount totalDevicesWithEvent(Long totalDevicesWithEvent) {
    this.totalDevicesWithEvent = totalDevicesWithEvent;
    return this;
  }

  /**
   * Get totalDevicesWithEvent
   * @return totalDevicesWithEvent
   */
  @javax.annotation.Nullable
  public Long getTotalDevicesWithEvent() {
    return totalDevicesWithEvent;
  }

  public void setTotalDevicesWithEvent(Long totalDevicesWithEvent) {
    this.totalDevicesWithEvent = totalDevicesWithEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDeviceCount eventDeviceCount = (EventDeviceCount) o;
    return Objects.equals(this.devicesCount, eventDeviceCount.devicesCount) &&
        Objects.equals(this.previousTotalDevicesWithEvent, eventDeviceCount.previousTotalDevicesWithEvent) &&
        Objects.equals(this.totalDevices, eventDeviceCount.totalDevices) &&
        Objects.equals(this.totalDevicesWithEvent, eventDeviceCount.totalDevicesWithEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(devicesCount, previousTotalDevicesWithEvent, totalDevices, totalDevicesWithEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDeviceCount {\n");
    sb.append("    devicesCount: ").append(toIndentedString(devicesCount)).append("\n");
    sb.append("    previousTotalDevicesWithEvent: ").append(toIndentedString(previousTotalDevicesWithEvent)).append("\n");
    sb.append("    totalDevices: ").append(toIndentedString(totalDevices)).append("\n");
    sb.append("    totalDevicesWithEvent: ").append(toIndentedString(totalDevicesWithEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("devices_count");
    openapiFields.add("previous_total_devices_with_event");
    openapiFields.add("total_devices");
    openapiFields.add("total_devices_with_event");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventDeviceCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventDeviceCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDeviceCount is not found in the empty JSON string", EventDeviceCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventDeviceCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDeviceCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("devices_count") != null && !jsonObj.get("devices_count").isJsonNull()) {
        JsonArray jsonArraydevicesCount = jsonObj.getAsJsonArray("devices_count");
        if (jsonArraydevicesCount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("devices_count").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `devices_count` to be an array in the JSON string but got `%s`", jsonObj.get("devices_count").toString()));
          }

          // validate the optional field `devices_count` (array)
          for (int i = 0; i < jsonArraydevicesCount.size(); i++) {
            AnalyticsDeviceCounts200ResponseDailyInner.validateJsonElement(jsonArraydevicesCount.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDeviceCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDeviceCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDeviceCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDeviceCount.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDeviceCount>() {
           @Override
           public void write(JsonWriter out, EventDeviceCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDeviceCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventDeviceCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventDeviceCount
   * @throws IOException if the JSON string is invalid with respect to EventDeviceCount
   */
  public static EventDeviceCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDeviceCount.class);
  }

  /**
   * Convert an instance of EventDeviceCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

