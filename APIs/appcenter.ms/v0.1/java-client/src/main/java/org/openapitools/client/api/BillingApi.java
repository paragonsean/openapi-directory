/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BillingAggregatedInformationGetAll200Response;
import org.openapitools.client.model.BillingAggregatedInformationGetByApp200Response;
import org.openapitools.client.model.BillingAggregatedInformationGetByAppDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for billingAggregatedInformationGetAll
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for the requesting user and the organizations in which the user is an admin. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingAggregatedInformationGetAllCall(String service, String period, Boolean showOriginalPlans, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/billing/allAccountsAggregated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (showOriginalPlans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showOriginalPlans", showOriginalPlans));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingAggregatedInformationGetAllValidateBeforeCall(String service, String period, Boolean showOriginalPlans, final ApiCallback _callback) throws ApiException {
        return billingAggregatedInformationGetAllCall(service, period, showOriginalPlans, _callback);

    }

    /**
     * 
     * Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @return BillingAggregatedInformationGetAll200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for the requesting user and the organizations in which the user is an admin. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public BillingAggregatedInformationGetAll200Response billingAggregatedInformationGetAll(String service, String period, Boolean showOriginalPlans) throws ApiException {
        ApiResponse<BillingAggregatedInformationGetAll200Response> localVarResp = billingAggregatedInformationGetAllWithHttpInfo(service, period, showOriginalPlans);
        return localVarResp.getData();
    }

    /**
     * 
     * Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @return ApiResponse&lt;BillingAggregatedInformationGetAll200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for the requesting user and the organizations in which the user is an admin. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingAggregatedInformationGetAll200Response> billingAggregatedInformationGetAllWithHttpInfo(String service, String period, Boolean showOriginalPlans) throws ApiException {
        okhttp3.Call localVarCall = billingAggregatedInformationGetAllValidateBeforeCall(service, period, showOriginalPlans, null);
        Type localVarReturnType = new TypeToken<BillingAggregatedInformationGetAll200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Aggregated Billing Information for the requesting user and the organizations in which the user is an admin.
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for the requesting user and the organizations in which the user is an admin. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingAggregatedInformationGetAllAsync(String service, String period, Boolean showOriginalPlans, final ApiCallback<BillingAggregatedInformationGetAll200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingAggregatedInformationGetAllValidateBeforeCall(service, period, showOriginalPlans, _callback);
        Type localVarReturnType = new TypeToken<BillingAggregatedInformationGetAll200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingAggregatedInformationGetByApp
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for owner of a given app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingAggregatedInformationGetByAppCall(String ownerName, String appName, String service, String period, Boolean showOriginalPlans, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/billing/aggregated"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (showOriginalPlans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showOriginalPlans", showOriginalPlans));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingAggregatedInformationGetByAppValidateBeforeCall(String ownerName, String appName, String service, String period, Boolean showOriginalPlans, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling billingAggregatedInformationGetByApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling billingAggregatedInformationGetByApp(Async)");
        }

        return billingAggregatedInformationGetByAppCall(ownerName, appName, service, period, showOriginalPlans, _callback);

    }

    /**
     * 
     * Aggregated Billing Information for owner of a given app.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @return BillingAggregatedInformationGetByApp200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for owner of a given app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public BillingAggregatedInformationGetByApp200Response billingAggregatedInformationGetByApp(String ownerName, String appName, String service, String period, Boolean showOriginalPlans) throws ApiException {
        ApiResponse<BillingAggregatedInformationGetByApp200Response> localVarResp = billingAggregatedInformationGetByAppWithHttpInfo(ownerName, appName, service, period, showOriginalPlans);
        return localVarResp.getData();
    }

    /**
     * 
     * Aggregated Billing Information for owner of a given app.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @return ApiResponse&lt;BillingAggregatedInformationGetByApp200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for owner of a given app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingAggregatedInformationGetByApp200Response> billingAggregatedInformationGetByAppWithHttpInfo(String ownerName, String appName, String service, String period, Boolean showOriginalPlans) throws ApiException {
        okhttp3.Call localVarCall = billingAggregatedInformationGetByAppValidateBeforeCall(ownerName, appName, service, period, showOriginalPlans, null);
        Type localVarReturnType = new TypeToken<BillingAggregatedInformationGetByApp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Aggregated Billing Information for owner of a given app.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for owner of a given app </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingAggregatedInformationGetByAppAsync(String ownerName, String appName, String service, String period, Boolean showOriginalPlans, final ApiCallback<BillingAggregatedInformationGetByApp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingAggregatedInformationGetByAppValidateBeforeCall(ownerName, appName, service, period, showOriginalPlans, _callback);
        Type localVarReturnType = new TypeToken<BillingAggregatedInformationGetByApp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for billingAggregatedInformationGetForOrg
     * @param orgName The name of the Organization (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for a given Organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingAggregatedInformationGetForOrgCall(String orgName, String service, String period, Boolean showOriginalPlans, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/orgs/{orgName}/billing/aggregated"
            .replace("{" + "orgName" + "}", localVarApiClient.escapeString(orgName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (showOriginalPlans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showOriginalPlans", showOriginalPlans));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billingAggregatedInformationGetForOrgValidateBeforeCall(String orgName, String service, String period, Boolean showOriginalPlans, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgName' is set
        if (orgName == null) {
            throw new ApiException("Missing the required parameter 'orgName' when calling billingAggregatedInformationGetForOrg(Async)");
        }

        return billingAggregatedInformationGetForOrgCall(orgName, service, period, showOriginalPlans, _callback);

    }

    /**
     * 
     * Aggregated Billing Information for a given Organization.
     * @param orgName The name of the Organization (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @return BillingAggregatedInformationGetByApp200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for a given Organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public BillingAggregatedInformationGetByApp200Response billingAggregatedInformationGetForOrg(String orgName, String service, String period, Boolean showOriginalPlans) throws ApiException {
        ApiResponse<BillingAggregatedInformationGetByApp200Response> localVarResp = billingAggregatedInformationGetForOrgWithHttpInfo(orgName, service, period, showOriginalPlans);
        return localVarResp.getData();
    }

    /**
     * 
     * Aggregated Billing Information for a given Organization.
     * @param orgName The name of the Organization (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @return ApiResponse&lt;BillingAggregatedInformationGetByApp200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for a given Organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BillingAggregatedInformationGetByApp200Response> billingAggregatedInformationGetForOrgWithHttpInfo(String orgName, String service, String period, Boolean showOriginalPlans) throws ApiException {
        okhttp3.Call localVarCall = billingAggregatedInformationGetForOrgValidateBeforeCall(orgName, service, period, showOriginalPlans, null);
        Type localVarReturnType = new TypeToken<BillingAggregatedInformationGetByApp200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Aggregated Billing Information for a given Organization.
     * @param orgName The name of the Organization (required)
     * @param service Type of service that should be included in the Billing Information (optional)
     * @param period Type of period that should be included in the Billing Information (optional)
     * @param showOriginalPlans Controls whether the API should show the original plan when Azure Subscription is not enabled (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Aggregated Billing Information for a given Organization </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call billingAggregatedInformationGetForOrgAsync(String orgName, String service, String period, Boolean showOriginalPlans, final ApiCallback<BillingAggregatedInformationGetByApp200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = billingAggregatedInformationGetForOrgValidateBeforeCall(orgName, service, period, showOriginalPlans, _callback);
        Type localVarReturnType = new TypeToken<BillingAggregatedInformationGetByApp200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
