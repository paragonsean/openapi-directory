/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalyticsCrashCounts200Response;
import org.openapitools.client.model.AnalyticsCrashFreeDevicePercentages200Response;
import org.openapitools.client.model.AnalyticsCrashGroupModelCounts200Response;
import org.openapitools.client.model.AnalyticsCrashGroupOperatingSystemCounts200Response;
import org.openapitools.client.model.AnalyticsCrashGroupsTotals200ResponseInner;
import org.openapitools.client.model.AnalyticsCrashGroupsTotals200ResponseInnerOverall;
import org.openapitools.client.model.AnalyticsCrashGroupsTotalsRequest;
import org.openapitools.client.model.AnalyticsDeviceCounts200Response;
import org.openapitools.client.model.AnalyticsDeviceCounts200ResponseDailyInner;
import org.openapitools.client.model.AnalyticsDeviceCountsDefaultResponse;
import org.openapitools.client.model.AnalyticsDistributionReleaseCounts200Response;
import org.openapitools.client.model.AnalyticsDistributionReleaseCountsRequest;
import org.openapitools.client.model.AnalyticsEventCount200Response;
import org.openapitools.client.model.AnalyticsEventDeviceCount200Response;
import org.openapitools.client.model.AnalyticsEventPerDeviceCount200Response;
import org.openapitools.client.model.AnalyticsEventPerSessionCount200Response;
import org.openapitools.client.model.AnalyticsEventProperties200Response;
import org.openapitools.client.model.AnalyticsEventPropertyCounts200Response;
import org.openapitools.client.model.AnalyticsEvents200Response;
import org.openapitools.client.model.AnalyticsGenericLogFlow200Response;
import org.openapitools.client.model.AnalyticsGetAudience200Response;
import org.openapitools.client.model.AnalyticsLanguageCounts200Response;
import org.openapitools.client.model.AnalyticsListAudiences200Response;
import org.openapitools.client.model.AnalyticsListCustomProperties200Response;
import org.openapitools.client.model.AnalyticsListDevicePropertyValues200Response;
import org.openapitools.client.model.AnalyticsLogFlow200Response;
import org.openapitools.client.model.AnalyticsModelCounts200Response;
import org.openapitools.client.model.AnalyticsOperatingSystemCounts200Response;
import org.openapitools.client.model.AnalyticsPerDeviceCounts200Response;
import org.openapitools.client.model.AnalyticsPlaceCounts200Response;
import org.openapitools.client.model.AnalyticsSessionDurationsDistribution200Response;
import org.openapitools.client.model.AnalyticsTestAudience200Response;
import org.openapitools.client.model.AnalyticsTestAudienceRequest;
import org.openapitools.client.model.AnalyticsVersions200Response;
import org.openapitools.client.model.CrashesListSessionLogs200Response;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnalyticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyticsAudienceNameExists
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsAudienceNameExistsCall(String audienceName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
            .replace("{" + "audience_name" + "}", localVarApiClient.escapeString(audienceName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsAudienceNameExistsValidateBeforeCall(String audienceName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceName' is set
        if (audienceName == null) {
            throw new ApiException("Missing the required parameter 'audienceName' when calling analyticsAudienceNameExists(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsAudienceNameExists(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsAudienceNameExists(Async)");
        }

        return analyticsAudienceNameExistsCall(audienceName, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns whether audience definition exists.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsAudienceNameExists(String audienceName, String ownerName, String appName) throws ApiException {
        analyticsAudienceNameExistsWithHttpInfo(audienceName, ownerName, appName);
    }

    /**
     * 
     * Returns whether audience definition exists.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsAudienceNameExistsWithHttpInfo(String audienceName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsAudienceNameExistsValidateBeforeCall(audienceName, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns whether audience definition exists.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsAudienceNameExistsAsync(String audienceName, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsAudienceNameExistsValidateBeforeCall(audienceName, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCrashCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCrashCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsCrashCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCrashCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCrashCounts(Async)");
        }

        return analyticsCrashCountsCall(start, ownerName, appName, end, versions, _callback);

    }

    /**
     * Available for UWP apps only.
     * Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsCrashCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AnalyticsCrashCounts200Response analyticsCrashCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsCrashCounts200Response> localVarResp = analyticsCrashCountsWithHttpInfo(start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * Available for UWP apps only.
     * Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsCrashCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AnalyticsCrashCounts200Response> analyticsCrashCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsCrashCountsValidateBeforeCall(start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsCrashCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available for UWP apps only. (asynchronously)
     * Count of crashes by day in the time range based the selected versions. Available for UWP apps only.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<AnalyticsCrashCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCrashCountsValidateBeforeCall(start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsCrashCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCrashFreeDevicePercentages
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of crash-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashFreeDevicePercentagesCall(OffsetDateTime start, String version, String ownerName, String appName, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCrashFreeDevicePercentagesValidateBeforeCall(OffsetDateTime start, String version, String ownerName, String appName, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsCrashFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling analyticsCrashFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCrashFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCrashFreeDevicePercentages(Async)");
        }

        return analyticsCrashFreeDevicePercentagesCall(start, version, ownerName, appName, end, _callback);

    }

    /**
     * 
     * Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @return AnalyticsCrashFreeDevicePercentages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of crash-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AnalyticsCrashFreeDevicePercentages200Response analyticsCrashFreeDevicePercentages(OffsetDateTime start, String version, String ownerName, String appName, OffsetDateTime end) throws ApiException {
        ApiResponse<AnalyticsCrashFreeDevicePercentages200Response> localVarResp = analyticsCrashFreeDevicePercentagesWithHttpInfo(start, version, ownerName, appName, end);
        return localVarResp.getData();
    }

    /**
     * 
     * Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @return ApiResponse&lt;AnalyticsCrashFreeDevicePercentages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of crash-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AnalyticsCrashFreeDevicePercentages200Response> analyticsCrashFreeDevicePercentagesWithHttpInfo(OffsetDateTime start, String version, String ownerName, String appName, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = analyticsCrashFreeDevicePercentagesValidateBeforeCall(start, version, ownerName, appName, end, null);
        Type localVarReturnType = new TypeToken<AnalyticsCrashFreeDevicePercentages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of crash-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashFreeDevicePercentagesAsync(OffsetDateTime start, String version, String ownerName, String appName, OffsetDateTime end, final ApiCallback<AnalyticsCrashFreeDevicePercentages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCrashFreeDevicePercentagesValidateBeforeCall(start, version, ownerName, appName, end, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsCrashFreeDevicePercentages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCrashGroupCounts
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupCountsCall(String crashGroupId, String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCrashGroupCountsValidateBeforeCall(String crashGroupId, String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupCounts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling analyticsCrashGroupCounts(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsCrashGroupCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCrashGroupCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCrashGroupCounts(Async)");
        }

        return analyticsCrashGroupCountsCall(crashGroupId, version, start, ownerName, appName, end, _callback);

    }

    /**
     * Available for UWP apps only.
     * Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @return AnalyticsCrashCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AnalyticsCrashCounts200Response analyticsCrashGroupCounts(String crashGroupId, String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end) throws ApiException {
        ApiResponse<AnalyticsCrashCounts200Response> localVarResp = analyticsCrashGroupCountsWithHttpInfo(crashGroupId, version, start, ownerName, appName, end);
        return localVarResp.getData();
    }

    /**
     * Available for UWP apps only.
     * Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @return ApiResponse&lt;AnalyticsCrashCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AnalyticsCrashCounts200Response> analyticsCrashGroupCountsWithHttpInfo(String crashGroupId, String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = analyticsCrashGroupCountsValidateBeforeCall(crashGroupId, version, start, ownerName, appName, end, null);
        Type localVarReturnType = new TypeToken<AnalyticsCrashCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available for UWP apps only. (asynchronously)
     * Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes by day in the time range and total crashes over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupCountsAsync(String crashGroupId, String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, final ApiCallback<AnalyticsCrashCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCrashGroupCountsValidateBeforeCall(crashGroupId, version, start, ownerName, appName, end, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsCrashCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCrashGroupModelCounts
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top models with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupModelCountsCall(String crashGroupId, String version, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCrashGroupModelCountsValidateBeforeCall(String crashGroupId, String version, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupModelCounts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling analyticsCrashGroupModelCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCrashGroupModelCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCrashGroupModelCounts(Async)");
        }

        return analyticsCrashGroupModelCountsCall(crashGroupId, version, ownerName, appName, $top, _callback);

    }

    /**
     * Available for UWP apps only.
     * Top models of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @return AnalyticsCrashGroupModelCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top models with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AnalyticsCrashGroupModelCounts200Response analyticsCrashGroupModelCounts(String crashGroupId, String version, String ownerName, String appName, Long $top) throws ApiException {
        ApiResponse<AnalyticsCrashGroupModelCounts200Response> localVarResp = analyticsCrashGroupModelCountsWithHttpInfo(crashGroupId, version, ownerName, appName, $top);
        return localVarResp.getData();
    }

    /**
     * Available for UWP apps only.
     * Top models of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @return ApiResponse&lt;AnalyticsCrashGroupModelCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top models with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AnalyticsCrashGroupModelCounts200Response> analyticsCrashGroupModelCountsWithHttpInfo(String crashGroupId, String version, String ownerName, String appName, Long $top) throws ApiException {
        okhttp3.Call localVarCall = analyticsCrashGroupModelCountsValidateBeforeCall(crashGroupId, version, ownerName, appName, $top, null);
        Type localVarReturnType = new TypeToken<AnalyticsCrashGroupModelCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available for UWP apps only. (asynchronously)
     * Top models of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top models with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupModelCountsAsync(String crashGroupId, String version, String ownerName, String appName, Long $top, final ApiCallback<AnalyticsCrashGroupModelCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCrashGroupModelCountsValidateBeforeCall(crashGroupId, version, ownerName, appName, $top, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsCrashGroupModelCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCrashGroupOperatingSystemCounts
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupOperatingSystemCountsCall(String crashGroupId, String version, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCrashGroupOperatingSystemCountsValidateBeforeCall(String crashGroupId, String version, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupOperatingSystemCounts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling analyticsCrashGroupOperatingSystemCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCrashGroupOperatingSystemCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCrashGroupOperatingSystemCounts(Async)");
        }

        return analyticsCrashGroupOperatingSystemCountsCall(crashGroupId, version, ownerName, appName, $top, _callback);

    }

    /**
     * Available for UWP apps only.
     * Top OSes of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @return AnalyticsCrashGroupOperatingSystemCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AnalyticsCrashGroupOperatingSystemCounts200Response analyticsCrashGroupOperatingSystemCounts(String crashGroupId, String version, String ownerName, String appName, Long $top) throws ApiException {
        ApiResponse<AnalyticsCrashGroupOperatingSystemCounts200Response> localVarResp = analyticsCrashGroupOperatingSystemCountsWithHttpInfo(crashGroupId, version, ownerName, appName, $top);
        return localVarResp.getData();
    }

    /**
     * Available for UWP apps only.
     * Top OSes of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @return ApiResponse&lt;AnalyticsCrashGroupOperatingSystemCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AnalyticsCrashGroupOperatingSystemCounts200Response> analyticsCrashGroupOperatingSystemCountsWithHttpInfo(String crashGroupId, String version, String ownerName, String appName, Long $top) throws ApiException {
        okhttp3.Call localVarCall = analyticsCrashGroupOperatingSystemCountsValidateBeforeCall(crashGroupId, version, ownerName, appName, $top, null);
        Type localVarReturnType = new TypeToken<AnalyticsCrashGroupOperatingSystemCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available for UWP apps only. (asynchronously)
     * Top OSes of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupOperatingSystemCountsAsync(String crashGroupId, String version, String ownerName, String appName, Long $top, final ApiCallback<AnalyticsCrashGroupOperatingSystemCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCrashGroupOperatingSystemCountsValidateBeforeCall(crashGroupId, version, ownerName, appName, $top, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsCrashGroupOperatingSystemCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCrashGroupTotals
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupTotalsCall(String crashGroupId, String version, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCrashGroupTotalsValidateBeforeCall(String crashGroupId, String version, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling analyticsCrashGroupTotals(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling analyticsCrashGroupTotals(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCrashGroupTotals(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCrashGroupTotals(Async)");
        }

        return analyticsCrashGroupTotalsCall(crashGroupId, version, ownerName, appName, _callback);

    }

    /**
     * Available for UWP apps only.
     * Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AnalyticsCrashGroupsTotals200ResponseInnerOverall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AnalyticsCrashGroupsTotals200ResponseInnerOverall analyticsCrashGroupTotals(String crashGroupId, String version, String ownerName, String appName) throws ApiException {
        ApiResponse<AnalyticsCrashGroupsTotals200ResponseInnerOverall> localVarResp = analyticsCrashGroupTotalsWithHttpInfo(crashGroupId, version, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * Available for UWP apps only.
     * Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AnalyticsCrashGroupsTotals200ResponseInnerOverall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AnalyticsCrashGroupsTotals200ResponseInnerOverall> analyticsCrashGroupTotalsWithHttpInfo(String crashGroupId, String version, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsCrashGroupTotalsValidateBeforeCall(crashGroupId, version, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AnalyticsCrashGroupsTotals200ResponseInnerOverall>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Available for UWP apps only. (asynchronously)
     * Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
     * @param crashGroupId The id of the crash group. (required)
     * @param version  (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call analyticsCrashGroupTotalsAsync(String crashGroupId, String version, String ownerName, String appName, final ApiCallback<AnalyticsCrashGroupsTotals200ResponseInnerOverall> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCrashGroupTotalsValidateBeforeCall(crashGroupId, version, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsCrashGroupsTotals200ResponseInnerOverall>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCrashGroupsTotals
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsCrashGroupsTotalsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count for all selected crash groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsCrashGroupsTotalsCall(String ownerName, String appName, AnalyticsCrashGroupsTotalsRequest analyticsCrashGroupsTotalsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticsCrashGroupsTotalsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCrashGroupsTotalsValidateBeforeCall(String ownerName, String appName, AnalyticsCrashGroupsTotalsRequest analyticsCrashGroupsTotalsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCrashGroupsTotals(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCrashGroupsTotals(Async)");
        }

        // verify the required parameter 'analyticsCrashGroupsTotalsRequest' is set
        if (analyticsCrashGroupsTotalsRequest == null) {
            throw new ApiException("Missing the required parameter 'analyticsCrashGroupsTotalsRequest' when calling analyticsCrashGroupsTotals(Async)");
        }

        return analyticsCrashGroupsTotalsCall(ownerName, appName, analyticsCrashGroupsTotalsRequest, _callback);

    }

    /**
     * 
     * Overall crashes and affected users count of the selected crash groups with selected versions.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsCrashGroupsTotalsRequest  (required)
     * @return List&lt;AnalyticsCrashGroupsTotals200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count for all selected crash groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public List<AnalyticsCrashGroupsTotals200ResponseInner> analyticsCrashGroupsTotals(String ownerName, String appName, AnalyticsCrashGroupsTotalsRequest analyticsCrashGroupsTotalsRequest) throws ApiException {
        ApiResponse<List<AnalyticsCrashGroupsTotals200ResponseInner>> localVarResp = analyticsCrashGroupsTotalsWithHttpInfo(ownerName, appName, analyticsCrashGroupsTotalsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Overall crashes and affected users count of the selected crash groups with selected versions.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsCrashGroupsTotalsRequest  (required)
     * @return ApiResponse&lt;List&lt;AnalyticsCrashGroupsTotals200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count for all selected crash groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnalyticsCrashGroupsTotals200ResponseInner>> analyticsCrashGroupsTotalsWithHttpInfo(String ownerName, String appName, AnalyticsCrashGroupsTotalsRequest analyticsCrashGroupsTotalsRequest) throws ApiException {
        okhttp3.Call localVarCall = analyticsCrashGroupsTotalsValidateBeforeCall(ownerName, appName, analyticsCrashGroupsTotalsRequest, null);
        Type localVarReturnType = new TypeToken<List<AnalyticsCrashGroupsTotals200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overall crashes and affected users count of the selected crash groups with selected versions.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsCrashGroupsTotalsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Overall crashes and affected users count for all selected crash groups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsCrashGroupsTotalsAsync(String ownerName, String appName, AnalyticsCrashGroupsTotalsRequest analyticsCrashGroupsTotalsRequest, final ApiCallback<List<AnalyticsCrashGroupsTotals200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCrashGroupsTotalsValidateBeforeCall(ownerName, appName, analyticsCrashGroupsTotalsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<AnalyticsCrashGroupsTotals200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsCreateOrUpdateAudience
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsCreateOrUpdateAudienceCall(String audienceName, String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticsTestAudienceRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
            .replace("{" + "audience_name" + "}", localVarApiClient.escapeString(audienceName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsCreateOrUpdateAudienceValidateBeforeCall(String audienceName, String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceName' is set
        if (audienceName == null) {
            throw new ApiException("Missing the required parameter 'audienceName' when calling analyticsCreateOrUpdateAudience(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsCreateOrUpdateAudience(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsCreateOrUpdateAudience(Async)");
        }

        // verify the required parameter 'analyticsTestAudienceRequest' is set
        if (analyticsTestAudienceRequest == null) {
            throw new ApiException("Missing the required parameter 'analyticsTestAudienceRequest' when calling analyticsCreateOrUpdateAudience(Async)");
        }

        return analyticsCreateOrUpdateAudienceCall(audienceName, ownerName, appName, analyticsTestAudienceRequest, _callback);

    }

    /**
     * 
     * Creates or updates audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @return AnalyticsGetAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsGetAudience200Response analyticsCreateOrUpdateAudience(String audienceName, String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest) throws ApiException {
        ApiResponse<AnalyticsGetAudience200Response> localVarResp = analyticsCreateOrUpdateAudienceWithHttpInfo(audienceName, ownerName, appName, analyticsTestAudienceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @return ApiResponse&lt;AnalyticsGetAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsGetAudience200Response> analyticsCreateOrUpdateAudienceWithHttpInfo(String audienceName, String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest) throws ApiException {
        okhttp3.Call localVarCall = analyticsCreateOrUpdateAudienceValidateBeforeCall(audienceName, ownerName, appName, analyticsTestAudienceRequest, null);
        Type localVarReturnType = new TypeToken<AnalyticsGetAudience200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updated audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsCreateOrUpdateAudienceAsync(String audienceName, String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest, final ApiCallback<AnalyticsGetAudience200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsCreateOrUpdateAudienceValidateBeforeCall(audienceName, ownerName, appName, analyticsTestAudienceRequest, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsGetAudience200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsDeleteAudience
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDeleteAudienceCall(String audienceName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
            .replace("{" + "audience_name" + "}", localVarApiClient.escapeString(audienceName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsDeleteAudienceValidateBeforeCall(String audienceName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceName' is set
        if (audienceName == null) {
            throw new ApiException("Missing the required parameter 'audienceName' when calling analyticsDeleteAudience(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsDeleteAudience(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsDeleteAudience(Async)");
        }

        return analyticsDeleteAudienceCall(audienceName, ownerName, appName, _callback);

    }

    /**
     * 
     * Deletes audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsDeleteAudience(String audienceName, String ownerName, String appName) throws ApiException {
        analyticsDeleteAudienceWithHttpInfo(audienceName, ownerName, appName);
    }

    /**
     * 
     * Deletes audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsDeleteAudienceWithHttpInfo(String audienceName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsDeleteAudienceValidateBeforeCall(audienceName, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Audiences exists. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audiences does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDeleteAudienceAsync(String audienceName, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsDeleteAudienceValidateBeforeCall(audienceName, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsDeviceCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param appBuild Application build number. If build number is specified than multiple versions are not allowed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active devices by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDeviceCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        if (appBuild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_build", appBuild));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsDeviceCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsDeviceCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsDeviceCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsDeviceCounts(Async)");
        }

        return analyticsDeviceCountsCall(start, ownerName, appName, end, versions, appBuild, _callback);

    }

    /**
     * 
     * Count of active devices by interval in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param appBuild Application build number. If build number is specified than multiple versions are not allowed. (optional)
     * @return AnalyticsDeviceCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active devices by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsDeviceCounts200Response analyticsDeviceCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild) throws ApiException {
        ApiResponse<AnalyticsDeviceCounts200Response> localVarResp = analyticsDeviceCountsWithHttpInfo(start, ownerName, appName, end, versions, appBuild);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of active devices by interval in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param appBuild Application build number. If build number is specified than multiple versions are not allowed. (optional)
     * @return ApiResponse&lt;AnalyticsDeviceCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active devices by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsDeviceCounts200Response> analyticsDeviceCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild) throws ApiException {
        okhttp3.Call localVarCall = analyticsDeviceCountsValidateBeforeCall(start, ownerName, appName, end, versions, appBuild, null);
        Type localVarReturnType = new TypeToken<AnalyticsDeviceCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of active devices by interval in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param appBuild Application build number. If build number is specified than multiple versions are not allowed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active devices by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDeviceCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, final ApiCallback<AnalyticsDeviceCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsDeviceCountsValidateBeforeCall(start, ownerName, appName, end, versions, appBuild, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsDeviceCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsDistributionReleaseCounts
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsDistributionReleaseCountsRequest The releases to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of total downloads for the provided distribution release(s). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDistributionReleaseCountsCall(String ownerName, String appName, AnalyticsDistributionReleaseCountsRequest analyticsDistributionReleaseCountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticsDistributionReleaseCountsRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsDistributionReleaseCountsValidateBeforeCall(String ownerName, String appName, AnalyticsDistributionReleaseCountsRequest analyticsDistributionReleaseCountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsDistributionReleaseCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsDistributionReleaseCounts(Async)");
        }

        // verify the required parameter 'analyticsDistributionReleaseCountsRequest' is set
        if (analyticsDistributionReleaseCountsRequest == null) {
            throw new ApiException("Missing the required parameter 'analyticsDistributionReleaseCountsRequest' when calling analyticsDistributionReleaseCounts(Async)");
        }

        return analyticsDistributionReleaseCountsCall(ownerName, appName, analyticsDistributionReleaseCountsRequest, _callback);

    }

    /**
     * 
     * Count of total downloads for the provided distribution releases.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsDistributionReleaseCountsRequest The releases to retrieve. (required)
     * @return AnalyticsDistributionReleaseCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of total downloads for the provided distribution release(s). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsDistributionReleaseCounts200Response analyticsDistributionReleaseCounts(String ownerName, String appName, AnalyticsDistributionReleaseCountsRequest analyticsDistributionReleaseCountsRequest) throws ApiException {
        ApiResponse<AnalyticsDistributionReleaseCounts200Response> localVarResp = analyticsDistributionReleaseCountsWithHttpInfo(ownerName, appName, analyticsDistributionReleaseCountsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of total downloads for the provided distribution releases.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsDistributionReleaseCountsRequest The releases to retrieve. (required)
     * @return ApiResponse&lt;AnalyticsDistributionReleaseCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of total downloads for the provided distribution release(s). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsDistributionReleaseCounts200Response> analyticsDistributionReleaseCountsWithHttpInfo(String ownerName, String appName, AnalyticsDistributionReleaseCountsRequest analyticsDistributionReleaseCountsRequest) throws ApiException {
        okhttp3.Call localVarCall = analyticsDistributionReleaseCountsValidateBeforeCall(ownerName, appName, analyticsDistributionReleaseCountsRequest, null);
        Type localVarReturnType = new TypeToken<AnalyticsDistributionReleaseCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of total downloads for the provided distribution releases.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsDistributionReleaseCountsRequest The releases to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of total downloads for the provided distribution release(s). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDistributionReleaseCountsAsync(String ownerName, String appName, AnalyticsDistributionReleaseCountsRequest analyticsDistributionReleaseCountsRequest, final ApiCallback<AnalyticsDistributionReleaseCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsDistributionReleaseCountsValidateBeforeCall(ownerName, appName, analyticsDistributionReleaseCountsRequest, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsDistributionReleaseCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventCount
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventCountCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventCountValidateBeforeCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventCount(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsEventCount(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventCount(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventCount(Async)");
        }

        return analyticsEventCountCall(eventName, start, ownerName, appName, end, versions, _callback);

    }

    /**
     * 
     * Count of events by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsEventCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsEventCount200Response analyticsEventCount(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsEventCount200Response> localVarResp = analyticsEventCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of events by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsEventCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsEventCount200Response> analyticsEventCountWithHttpInfo(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsEventCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of events by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventCountAsync(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<AnalyticsEventCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsEventCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventDeviceCount
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of devices for an event by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventDeviceCountCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventDeviceCountValidateBeforeCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventDeviceCount(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsEventDeviceCount(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventDeviceCount(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventDeviceCount(Async)");
        }

        return analyticsEventDeviceCountCall(eventName, start, ownerName, appName, end, versions, _callback);

    }

    /**
     * 
     * Count of devices for an event by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsEventDeviceCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of devices for an event by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsEventDeviceCount200Response analyticsEventDeviceCount(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsEventDeviceCount200Response> localVarResp = analyticsEventDeviceCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of devices for an event by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsEventDeviceCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of devices for an event by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsEventDeviceCount200Response> analyticsEventDeviceCountWithHttpInfo(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventDeviceCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsEventDeviceCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of devices for an event by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of devices for an event by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventDeviceCountAsync(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<AnalyticsEventDeviceCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventDeviceCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsEventDeviceCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventPerDeviceCount
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per device by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPerDeviceCountCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventPerDeviceCountValidateBeforeCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventPerDeviceCount(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsEventPerDeviceCount(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventPerDeviceCount(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventPerDeviceCount(Async)");
        }

        return analyticsEventPerDeviceCountCall(eventName, start, ownerName, appName, end, versions, _callback);

    }

    /**
     * 
     * Count of events per device by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsEventPerDeviceCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per device by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsEventPerDeviceCount200Response analyticsEventPerDeviceCount(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsEventPerDeviceCount200Response> localVarResp = analyticsEventPerDeviceCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of events per device by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsEventPerDeviceCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per device by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsEventPerDeviceCount200Response> analyticsEventPerDeviceCountWithHttpInfo(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventPerDeviceCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsEventPerDeviceCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of events per device by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per device by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPerDeviceCountAsync(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<AnalyticsEventPerDeviceCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventPerDeviceCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsEventPerDeviceCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventPerSessionCount
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per session by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPerSessionCountCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventPerSessionCountValidateBeforeCall(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventPerSessionCount(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsEventPerSessionCount(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventPerSessionCount(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventPerSessionCount(Async)");
        }

        return analyticsEventPerSessionCountCall(eventName, start, ownerName, appName, end, versions, _callback);

    }

    /**
     * 
     * Count of events per session by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsEventPerSessionCount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per session by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsEventPerSessionCount200Response analyticsEventPerSessionCount(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsEventPerSessionCount200Response> localVarResp = analyticsEventPerSessionCountWithHttpInfo(eventName, start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of events per session by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsEventPerSessionCount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per session by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsEventPerSessionCount200Response> analyticsEventPerSessionCountWithHttpInfo(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventPerSessionCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsEventPerSessionCount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of events per session by interval in the time range.
     * @param eventName The id of the event. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of events per session by interval in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPerSessionCountAsync(String eventName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<AnalyticsEventPerSessionCount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventPerSessionCountValidateBeforeCall(eventName, start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsEventPerSessionCount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventProperties
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPropertiesCall(String eventName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventPropertiesValidateBeforeCall(String eventName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventProperties(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventProperties(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventProperties(Async)");
        }

        return analyticsEventPropertiesCall(eventName, ownerName, appName, _callback);

    }

    /**
     * 
     * Event properties.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AnalyticsEventProperties200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsEventProperties200Response analyticsEventProperties(String eventName, String ownerName, String appName) throws ApiException {
        ApiResponse<AnalyticsEventProperties200Response> localVarResp = analyticsEventPropertiesWithHttpInfo(eventName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Event properties.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AnalyticsEventProperties200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsEventProperties200Response> analyticsEventPropertiesWithHttpInfo(String eventName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventPropertiesValidateBeforeCall(eventName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AnalyticsEventProperties200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Event properties.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPropertiesAsync(String eventName, String ownerName, String appName, final ApiCallback<AnalyticsEventProperties200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventPropertiesValidateBeforeCall(eventName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsEventProperties200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventPropertyCounts
     * @param eventName The id of the event. (required)
     * @param eventPropertyName The id of the event property. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param $top The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties value counts during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPropertyCountsCall(String eventName, String eventPropertyName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, Long $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "event_property_name" + "}", localVarApiClient.escapeString(eventPropertyName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventPropertyCountsValidateBeforeCall(String eventName, String eventPropertyName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, Long $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventPropertyCounts(Async)");
        }

        // verify the required parameter 'eventPropertyName' is set
        if (eventPropertyName == null) {
            throw new ApiException("Missing the required parameter 'eventPropertyName' when calling analyticsEventPropertyCounts(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsEventPropertyCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventPropertyCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventPropertyCounts(Async)");
        }

        return analyticsEventPropertyCountsCall(eventName, eventPropertyName, start, ownerName, appName, end, versions, $top, _callback);

    }

    /**
     * 
     * Event properties value counts during the time range in descending order.
     * @param eventName The id of the event. (required)
     * @param eventPropertyName The id of the event property. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param $top The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)
     * @return AnalyticsEventPropertyCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties value counts during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsEventPropertyCounts200Response analyticsEventPropertyCounts(String eventName, String eventPropertyName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, Long $top) throws ApiException {
        ApiResponse<AnalyticsEventPropertyCounts200Response> localVarResp = analyticsEventPropertyCountsWithHttpInfo(eventName, eventPropertyName, start, ownerName, appName, end, versions, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Event properties value counts during the time range in descending order.
     * @param eventName The id of the event. (required)
     * @param eventPropertyName The id of the event property. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param $top The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)
     * @return ApiResponse&lt;AnalyticsEventPropertyCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties value counts during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsEventPropertyCounts200Response> analyticsEventPropertyCountsWithHttpInfo(String eventName, String eventPropertyName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, Long $top) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventPropertyCountsValidateBeforeCall(eventName, eventPropertyName, start, ownerName, appName, end, versions, $top, null);
        Type localVarReturnType = new TypeToken<AnalyticsEventPropertyCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Event properties value counts during the time range in descending order.
     * @param eventName The id of the event. (required)
     * @param eventPropertyName The id of the event property. (required)
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param $top The number of property values to return. Set to 0 in order to fetch all results available. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event properties value counts during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventPropertyCountsAsync(String eventName, String eventPropertyName, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, Long $top, final ApiCallback<AnalyticsEventPropertyCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventPropertyCountsValidateBeforeCall(eventName, eventPropertyName, start, ownerName, appName, end, versions, $top, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsEventPropertyCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEvents
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param eventName To select the specific events. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active events in the time range ordered by event. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, List<String> eventName, Long $top, Long $skip, String $inlinecount, String $orderby, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        if (eventName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "event_name", eventName));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$inlinecount", $inlinecount));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, List<String> eventName, Long $top, Long $skip, String $inlinecount, String $orderby, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsEvents(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEvents(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEvents(Async)");
        }

        return analyticsEventsCall(start, ownerName, appName, end, versions, eventName, $top, $skip, $inlinecount, $orderby, _callback);

    }

    /**
     * 
     * Count of active events in the time range ordered by event.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param eventName To select the specific events. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @return AnalyticsEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active events in the time range ordered by event. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsEvents200Response analyticsEvents(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, List<String> eventName, Long $top, Long $skip, String $inlinecount, String $orderby) throws ApiException {
        ApiResponse<AnalyticsEvents200Response> localVarResp = analyticsEventsWithHttpInfo(start, ownerName, appName, end, versions, eventName, $top, $skip, $inlinecount, $orderby);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of active events in the time range ordered by event.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param eventName To select the specific events. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @return ApiResponse&lt;AnalyticsEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active events in the time range ordered by event. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsEvents200Response> analyticsEventsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, List<String> eventName, Long $top, Long $skip, String $inlinecount, String $orderby) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventsValidateBeforeCall(start, ownerName, appName, end, versions, eventName, $top, $skip, $inlinecount, $orderby, null);
        Type localVarReturnType = new TypeToken<AnalyticsEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of active events in the time range ordered by event.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param eventName To select the specific events. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active events in the time range ordered by event. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, List<String> eventName, Long $top, Long $skip, String $inlinecount, String $orderby, final ApiCallback<AnalyticsEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventsValidateBeforeCall(start, ownerName, appName, end, versions, eventName, $top, $skip, $inlinecount, $orderby, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventsDelete
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventsDeleteCall(String eventName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventsDeleteValidateBeforeCall(String eventName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventsDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventsDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventsDelete(Async)");
        }

        return analyticsEventsDeleteCall(eventName, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete the set of Events with the specified event names.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsEventsDelete(String eventName, String ownerName, String appName) throws ApiException {
        analyticsEventsDeleteWithHttpInfo(eventName, ownerName, appName);
    }

    /**
     * 
     * Delete the set of Events with the specified event names.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsEventsDeleteWithHttpInfo(String eventName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventsDeleteValidateBeforeCall(eventName, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the set of Events with the specified event names.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventsDeleteAsync(String eventName, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventsDeleteValidateBeforeCall(eventName, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsEventsDeleteLogs
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventsDeleteLogsCall(String eventName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}"
            .replace("{" + "event_name" + "}", localVarApiClient.escapeString(eventName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsEventsDeleteLogsValidateBeforeCall(String eventName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventName' is set
        if (eventName == null) {
            throw new ApiException("Missing the required parameter 'eventName' when calling analyticsEventsDeleteLogs(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsEventsDeleteLogs(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsEventsDeleteLogs(Async)");
        }

        return analyticsEventsDeleteLogsCall(eventName, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete the set of Events with the specified event names.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsEventsDeleteLogs(String eventName, String ownerName, String appName) throws ApiException {
        analyticsEventsDeleteLogsWithHttpInfo(eventName, ownerName, appName);
    }

    /**
     * 
     * Delete the set of Events with the specified event names.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsEventsDeleteLogsWithHttpInfo(String eventName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsEventsDeleteLogsValidateBeforeCall(eventName, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the set of Events with the specified event names.
     * @param eventName The id of the event. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Event successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsEventsDeleteLogsAsync(String eventName, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsEventsDeleteLogsValidateBeforeCall(eventName, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsGenericLogFlow
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsGenericLogFlowCall(String ownerName, String appName, OffsetDateTime start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsGenericLogFlowValidateBeforeCall(String ownerName, String appName, OffsetDateTime start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsGenericLogFlow(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsGenericLogFlow(Async)");
        }

        return analyticsGenericLogFlowCall(ownerName, appName, start, _callback);

    }

    /**
     * 
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @return AnalyticsGenericLogFlow200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsGenericLogFlow200Response analyticsGenericLogFlow(String ownerName, String appName, OffsetDateTime start) throws ApiException {
        ApiResponse<AnalyticsGenericLogFlow200Response> localVarResp = analyticsGenericLogFlowWithHttpInfo(ownerName, appName, start);
        return localVarResp.getData();
    }

    /**
     * 
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @return ApiResponse&lt;AnalyticsGenericLogFlow200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsGenericLogFlow200Response> analyticsGenericLogFlowWithHttpInfo(String ownerName, String appName, OffsetDateTime start) throws ApiException {
        okhttp3.Call localVarCall = analyticsGenericLogFlowValidateBeforeCall(ownerName, appName, start, null);
        Type localVarReturnType = new TypeToken<AnalyticsGenericLogFlow200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsGenericLogFlowAsync(String ownerName, String appName, OffsetDateTime start, final ApiCallback<AnalyticsGenericLogFlow200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsGenericLogFlowValidateBeforeCall(ownerName, appName, start, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsGenericLogFlow200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsGetAudience
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsGetAudienceCall(String audienceName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}"
            .replace("{" + "audience_name" + "}", localVarApiClient.escapeString(audienceName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsGetAudienceValidateBeforeCall(String audienceName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'audienceName' is set
        if (audienceName == null) {
            throw new ApiException("Missing the required parameter 'audienceName' when calling analyticsGetAudience(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsGetAudience(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsGetAudience(Async)");
        }

        return analyticsGetAudienceCall(audienceName, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AnalyticsGetAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsGetAudience200Response analyticsGetAudience(String audienceName, String ownerName, String appName) throws ApiException {
        ApiResponse<AnalyticsGetAudience200Response> localVarResp = analyticsGetAudienceWithHttpInfo(audienceName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AnalyticsGetAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsGetAudience200Response> analyticsGetAudienceWithHttpInfo(String audienceName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsGetAudienceValidateBeforeCall(audienceName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AnalyticsGetAudience200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets audience definition.
     * @param audienceName The name of the audience (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Audiences definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsGetAudienceAsync(String audienceName, String ownerName, String appName, final ApiCallback<AnalyticsGetAudience200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsGetAudienceValidateBeforeCall(audienceName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsGetAudience200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsLanguageCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Languages with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsLanguageCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/languages"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsLanguageCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsLanguageCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsLanguageCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsLanguageCounts(Async)");
        }

        return analyticsLanguageCountsCall(start, ownerName, appName, end, $top, versions, _callback);

    }

    /**
     * 
     * Languages in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsLanguageCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Languages with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsLanguageCounts200Response analyticsLanguageCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsLanguageCounts200Response> localVarResp = analyticsLanguageCountsWithHttpInfo(start, ownerName, appName, end, $top, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Languages in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsLanguageCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Languages with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsLanguageCounts200Response> analyticsLanguageCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsLanguageCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsLanguageCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Languages in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Languages with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsLanguageCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback<AnalyticsLanguageCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsLanguageCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsLanguageCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsListAudiences
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeDisabled Include disabled audience definitions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of audiences. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListAudiencesCall(String ownerName, String appName, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_disabled", includeDisabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsListAudiencesValidateBeforeCall(String ownerName, String appName, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsListAudiences(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsListAudiences(Async)");
        }

        return analyticsListAudiencesCall(ownerName, appName, includeDisabled, _callback);

    }

    /**
     * 
     * Get list of audiences.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeDisabled Include disabled audience definitions (optional)
     * @return AnalyticsListAudiences200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of audiences. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsListAudiences200Response analyticsListAudiences(String ownerName, String appName, Boolean includeDisabled) throws ApiException {
        ApiResponse<AnalyticsListAudiences200Response> localVarResp = analyticsListAudiencesWithHttpInfo(ownerName, appName, includeDisabled);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of audiences.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeDisabled Include disabled audience definitions (optional)
     * @return ApiResponse&lt;AnalyticsListAudiences200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of audiences. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsListAudiences200Response> analyticsListAudiencesWithHttpInfo(String ownerName, String appName, Boolean includeDisabled) throws ApiException {
        okhttp3.Call localVarCall = analyticsListAudiencesValidateBeforeCall(ownerName, appName, includeDisabled, null);
        Type localVarReturnType = new TypeToken<AnalyticsListAudiences200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of audiences.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeDisabled Include disabled audience definitions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of audiences. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListAudiencesAsync(String ownerName, String appName, Boolean includeDisabled, final ApiCallback<AnalyticsListAudiences200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsListAudiencesValidateBeforeCall(ownerName, appName, includeDisabled, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsListAudiences200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsListCustomProperties
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListCustomPropertiesCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsListCustomPropertiesValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsListCustomProperties(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsListCustomProperties(Async)");
        }

        return analyticsListCustomPropertiesCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get list of custom properties.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AnalyticsListCustomProperties200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsListCustomProperties200Response analyticsListCustomProperties(String ownerName, String appName) throws ApiException {
        ApiResponse<AnalyticsListCustomProperties200Response> localVarResp = analyticsListCustomPropertiesWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of custom properties.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AnalyticsListCustomProperties200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsListCustomProperties200Response> analyticsListCustomPropertiesWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsListCustomPropertiesValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AnalyticsListCustomProperties200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of custom properties.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListCustomPropertiesAsync(String ownerName, String appName, final ApiCallback<AnalyticsListCustomProperties200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsListCustomPropertiesValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsListCustomProperties200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsListDeviceProperties
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListDevicePropertiesCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsListDevicePropertiesValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsListDeviceProperties(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsListDeviceProperties(Async)");
        }

        return analyticsListDevicePropertiesCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Get list of device properties.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return AnalyticsListCustomProperties200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsListCustomProperties200Response analyticsListDeviceProperties(String ownerName, String appName) throws ApiException {
        ApiResponse<AnalyticsListCustomProperties200Response> localVarResp = analyticsListDevicePropertiesWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of device properties.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;AnalyticsListCustomProperties200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsListCustomProperties200Response> analyticsListDevicePropertiesWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = analyticsListDevicePropertiesValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<AnalyticsListCustomProperties200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of device properties.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of device properties. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListDevicePropertiesAsync(String ownerName, String appName, final ApiCallback<AnalyticsListCustomProperties200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsListDevicePropertiesValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsListCustomProperties200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsListDevicePropertyValues
     * @param propertyName Device property (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param contains Contains string (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported device property values. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListDevicePropertyValuesCall(String propertyName, String ownerName, String appName, String contains, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values"
            .replace("{" + "property_name" + "}", localVarApiClient.escapeString(propertyName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsListDevicePropertyValuesValidateBeforeCall(String propertyName, String ownerName, String appName, String contains, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling analyticsListDevicePropertyValues(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsListDevicePropertyValues(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsListDevicePropertyValues(Async)");
        }

        return analyticsListDevicePropertyValuesCall(propertyName, ownerName, appName, contains, _callback);

    }

    /**
     * 
     * Get list of device property values.
     * @param propertyName Device property (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param contains Contains string (optional)
     * @return AnalyticsListDevicePropertyValues200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported device property values. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsListDevicePropertyValues200Response analyticsListDevicePropertyValues(String propertyName, String ownerName, String appName, String contains) throws ApiException {
        ApiResponse<AnalyticsListDevicePropertyValues200Response> localVarResp = analyticsListDevicePropertyValuesWithHttpInfo(propertyName, ownerName, appName, contains);
        return localVarResp.getData();
    }

    /**
     * 
     * Get list of device property values.
     * @param propertyName Device property (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param contains Contains string (optional)
     * @return ApiResponse&lt;AnalyticsListDevicePropertyValues200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported device property values. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsListDevicePropertyValues200Response> analyticsListDevicePropertyValuesWithHttpInfo(String propertyName, String ownerName, String appName, String contains) throws ApiException {
        okhttp3.Call localVarCall = analyticsListDevicePropertyValuesValidateBeforeCall(propertyName, ownerName, appName, contains, null);
        Type localVarReturnType = new TypeToken<AnalyticsListDevicePropertyValues200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get list of device property values.
     * @param propertyName Device property (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param contains Contains string (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of supported device property values. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsListDevicePropertyValuesAsync(String propertyName, String ownerName, String appName, String contains, final ApiCallback<AnalyticsListDevicePropertyValues200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsListDevicePropertyValuesValidateBeforeCall(propertyName, ownerName, appName, contains, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsListDevicePropertyValues200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsLogFlow
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsLogFlowCall(String ownerName, String appName, OffsetDateTime start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsLogFlowValidateBeforeCall(String ownerName, String appName, OffsetDateTime start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsLogFlow(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsLogFlow(Async)");
        }

        return analyticsLogFlowCall(ownerName, appName, start, _callback);

    }

    /**
     * 
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @return AnalyticsLogFlow200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsLogFlow200Response analyticsLogFlow(String ownerName, String appName, OffsetDateTime start) throws ApiException {
        ApiResponse<AnalyticsLogFlow200Response> localVarResp = analyticsLogFlowWithHttpInfo(ownerName, appName, start);
        return localVarResp.getData();
    }

    /**
     * 
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @return ApiResponse&lt;AnalyticsLogFlow200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsLogFlow200Response> analyticsLogFlowWithHttpInfo(String ownerName, String appName, OffsetDateTime start) throws ApiException {
        okhttp3.Call localVarCall = analyticsLogFlowValidateBeforeCall(ownerName, appName, start, null);
        Type localVarReturnType = new TypeToken<AnalyticsLogFlow200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param start Start date time in data in ISO 8601 date time format. It must be within the current day in the UTC timezone. The default value is the start time of the current day in UTC timezone. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of logs for the requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsLogFlowAsync(String ownerName, String appName, OffsetDateTime start, final ApiCallback<AnalyticsLogFlow200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsLogFlowValidateBeforeCall(ownerName, appName, start, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsLogFlow200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsModelCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Models with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsModelCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/models"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsModelCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsModelCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsModelCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsModelCounts(Async)");
        }

        return analyticsModelCountsCall(start, ownerName, appName, end, $top, versions, _callback);

    }

    /**
     * 
     * Models in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsModelCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Models with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsModelCounts200Response analyticsModelCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsModelCounts200Response> localVarResp = analyticsModelCountsWithHttpInfo(start, ownerName, appName, end, $top, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Models in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsModelCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Models with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsModelCounts200Response> analyticsModelCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsModelCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsModelCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Models in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Models with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsModelCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback<AnalyticsModelCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsModelCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsModelCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsOperatingSystemCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OSes with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsOperatingSystemCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/oses"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsOperatingSystemCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsOperatingSystemCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsOperatingSystemCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsOperatingSystemCounts(Async)");
        }

        return analyticsOperatingSystemCountsCall(start, ownerName, appName, end, $top, versions, _callback);

    }

    /**
     * 
     * OSes in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsOperatingSystemCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OSes with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsOperatingSystemCounts200Response analyticsOperatingSystemCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsOperatingSystemCounts200Response> localVarResp = analyticsOperatingSystemCountsWithHttpInfo(start, ownerName, appName, end, $top, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * OSes in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsOperatingSystemCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OSes with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsOperatingSystemCounts200Response> analyticsOperatingSystemCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsOperatingSystemCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsOperatingSystemCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OSes in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OSes with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsOperatingSystemCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback<AnalyticsOperatingSystemCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsOperatingSystemCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsOperatingSystemCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsPerDeviceCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions per device in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsPerDeviceCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsPerDeviceCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsPerDeviceCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsPerDeviceCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsPerDeviceCounts(Async)");
        }

        return analyticsPerDeviceCountsCall(start, ownerName, appName, end, versions, _callback);

    }

    /**
     * 
     * Count of sessions per device in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsPerDeviceCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions per device in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsPerDeviceCounts200Response analyticsPerDeviceCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsPerDeviceCounts200Response> localVarResp = analyticsPerDeviceCountsWithHttpInfo(start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of sessions per device in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsPerDeviceCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions per device in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsPerDeviceCounts200Response> analyticsPerDeviceCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsPerDeviceCountsValidateBeforeCall(start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsPerDeviceCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of sessions per device in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions per device in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsPerDeviceCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<AnalyticsPerDeviceCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsPerDeviceCountsValidateBeforeCall(start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsPerDeviceCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsPlaceCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Places with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsPlaceCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/places"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsPlaceCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsPlaceCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsPlaceCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsPlaceCounts(Async)");
        }

        return analyticsPlaceCountsCall(start, ownerName, appName, end, $top, versions, _callback);

    }

    /**
     * 
     * Places in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsPlaceCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Places with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsPlaceCounts200Response analyticsPlaceCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsPlaceCounts200Response> localVarResp = analyticsPlaceCountsWithHttpInfo(start, ownerName, appName, end, $top, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Places in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsPlaceCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Places with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsPlaceCounts200Response> analyticsPlaceCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsPlaceCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsPlaceCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Places in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Places with count during the time range in descending order. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsPlaceCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback<AnalyticsPlaceCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsPlaceCountsValidateBeforeCall(start, ownerName, appName, end, $top, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsPlaceCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsSessionCounts
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsSessionCountsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_counts"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsSessionCountsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsSessionCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsSessionCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsSessionCounts(Async)");
        }

        return analyticsSessionCountsCall(start, ownerName, appName, end, versions, _callback);

    }

    /**
     * 
     * Count of sessions in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return List&lt;AnalyticsDeviceCounts200ResponseDailyInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public List<AnalyticsDeviceCounts200ResponseDailyInner> analyticsSessionCounts(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<List<AnalyticsDeviceCounts200ResponseDailyInner>> localVarResp = analyticsSessionCountsWithHttpInfo(start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of sessions in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;List&lt;AnalyticsDeviceCounts200ResponseDailyInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnalyticsDeviceCounts200ResponseDailyInner>> analyticsSessionCountsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsSessionCountsValidateBeforeCall(start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<List<AnalyticsDeviceCounts200ResponseDailyInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of sessions in the time range.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of sessions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsSessionCountsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<List<AnalyticsDeviceCounts200ResponseDailyInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsSessionCountsValidateBeforeCall(start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<List<AnalyticsDeviceCounts200ResponseDailyInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsSessionDurationsDistribution
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of  session durations for requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsSessionDurationsDistributionCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsSessionDurationsDistributionValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsSessionDurationsDistribution(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsSessionDurationsDistribution(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsSessionDurationsDistribution(Async)");
        }

        return analyticsSessionDurationsDistributionCall(start, ownerName, appName, end, versions, _callback);

    }

    /**
     * 
     * Gets session duration.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsSessionDurationsDistribution200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of  session durations for requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsSessionDurationsDistribution200Response analyticsSessionDurationsDistribution(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsSessionDurationsDistribution200Response> localVarResp = analyticsSessionDurationsDistributionWithHttpInfo(start, ownerName, appName, end, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets session duration.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsSessionDurationsDistribution200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of  session durations for requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsSessionDurationsDistribution200Response> analyticsSessionDurationsDistributionWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsSessionDurationsDistributionValidateBeforeCall(start, ownerName, appName, end, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsSessionDurationsDistribution200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets session duration.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of  session durations for requested time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsSessionDurationsDistributionAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, final ApiCallback<AnalyticsSessionDurationsDistribution200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsSessionDurationsDistributionValidateBeforeCall(start, ownerName, appName, end, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsSessionDurationsDistribution200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsTestAudience
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tests audience definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsTestAudienceCall(String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = analyticsTestAudienceRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsTestAudienceValidateBeforeCall(String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsTestAudience(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsTestAudience(Async)");
        }

        // verify the required parameter 'analyticsTestAudienceRequest' is set
        if (analyticsTestAudienceRequest == null) {
            throw new ApiException("Missing the required parameter 'analyticsTestAudienceRequest' when calling analyticsTestAudience(Async)");
        }

        return analyticsTestAudienceCall(ownerName, appName, analyticsTestAudienceRequest, _callback);

    }

    /**
     * 
     * Tests audience definition.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @return AnalyticsTestAudience200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tests audience definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsTestAudience200Response analyticsTestAudience(String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest) throws ApiException {
        ApiResponse<AnalyticsTestAudience200Response> localVarResp = analyticsTestAudienceWithHttpInfo(ownerName, appName, analyticsTestAudienceRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Tests audience definition.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @return ApiResponse&lt;AnalyticsTestAudience200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tests audience definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsTestAudience200Response> analyticsTestAudienceWithHttpInfo(String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest) throws ApiException {
        okhttp3.Call localVarCall = analyticsTestAudienceValidateBeforeCall(ownerName, appName, analyticsTestAudienceRequest, null);
        Type localVarReturnType = new TypeToken<AnalyticsTestAudience200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Tests audience definition.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param analyticsTestAudienceRequest Audience definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tests audience definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsTestAudienceAsync(String ownerName, String appName, AnalyticsTestAudienceRequest analyticsTestAudienceRequest, final ApiCallback<AnalyticsTestAudience200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsTestAudienceValidateBeforeCall(ownerName, appName, analyticsTestAudienceRequest, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsTestAudience200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyticsVersions
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active versions in the time range ordered by version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsVersionsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/analytics/versions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsVersionsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling analyticsVersions(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling analyticsVersions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling analyticsVersions(Async)");
        }

        return analyticsVersionsCall(start, ownerName, appName, end, $top, versions, _callback);

    }

    /**
     * 
     * Count of active versions in the time range ordered by version.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return AnalyticsVersions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active versions in the time range ordered by version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public AnalyticsVersions200Response analyticsVersions(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        ApiResponse<AnalyticsVersions200Response> localVarResp = analyticsVersionsWithHttpInfo(start, ownerName, appName, end, $top, versions);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of active versions in the time range ordered by version.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @return ApiResponse&lt;AnalyticsVersions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active versions in the time range ordered by version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalyticsVersions200Response> analyticsVersionsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions) throws ApiException {
        okhttp3.Call localVarCall = analyticsVersionsValidateBeforeCall(start, ownerName, appName, end, $top, versions, null);
        Type localVarReturnType = new TypeToken<AnalyticsVersions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of active versions in the time range ordered by version.
     * @param start Start date time in data in ISO 8601 date time format. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format. (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results) (optional, default to 30)
     * @param versions To select specific application versions (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of active versions in the time range ordered by version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsVersionsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, List<String> versions, final ApiCallback<AnalyticsVersions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsVersionsValidateBeforeCall(start, ownerName, appName, end, $top, versions, _callback);
        Type localVarReturnType = new TypeToken<AnalyticsVersions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appBlockLogs
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appBlockLogsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appBlockLogsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling appBlockLogs(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling appBlockLogs(Async)");
        }

        return appBlockLogsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public String appBlockLogs(String ownerName, String appName) throws ApiException {
        ApiResponse<String> localVarResp = appBlockLogsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> appBlockLogsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = appBlockLogsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id. 
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appBlockLogsAsync(String ownerName, String appName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = appBlockLogsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesListSessionLogs
     * @param crashId The id of the a crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific crash </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crashesListSessionLogsCall(String crashId, String ownerName, String appName, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs"
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesListSessionLogsValidateBeforeCall(String crashId, String ownerName, String appName, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesListSessionLogs(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesListSessionLogs(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesListSessionLogs(Async)");
        }

        return crashesListSessionLogsCall(crashId, ownerName, appName, date, _callback);

    }

    /**
     * 
     * Get session logs by crash ID
     * @param crashId The id of the a crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @return CrashesListSessionLogs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific crash </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public CrashesListSessionLogs200Response crashesListSessionLogs(String crashId, String ownerName, String appName, OffsetDateTime date) throws ApiException {
        ApiResponse<CrashesListSessionLogs200Response> localVarResp = crashesListSessionLogsWithHttpInfo(crashId, ownerName, appName, date);
        return localVarResp.getData();
    }

    /**
     * 
     * Get session logs by crash ID
     * @param crashId The id of the a crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @return ApiResponse&lt;CrashesListSessionLogs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific crash </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CrashesListSessionLogs200Response> crashesListSessionLogsWithHttpInfo(String crashId, String ownerName, String appName, OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = crashesListSessionLogsValidateBeforeCall(crashId, ownerName, appName, date, null);
        Type localVarReturnType = new TypeToken<CrashesListSessionLogs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get session logs by crash ID
     * @param crashId The id of the a crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific crash </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call crashesListSessionLogsAsync(String crashId, String ownerName, String appName, OffsetDateTime date, final ApiCallback<CrashesListSessionLogs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesListSessionLogsValidateBeforeCall(crashId, ownerName, appName, date, _callback);
        Type localVarReturnType = new TypeToken<CrashesListSessionLogs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devicesBlockLogs
     * @param installId The id of the device (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesBlockLogsCall(String installId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}"
            .replace("{" + "install_id" + "}", localVarApiClient.escapeString(installId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devicesBlockLogsValidateBeforeCall(String installId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'installId' is set
        if (installId == null) {
            throw new ApiException("Missing the required parameter 'installId' when calling devicesBlockLogs(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling devicesBlockLogs(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling devicesBlockLogs(Async)");
        }

        return devicesBlockLogsCall(installId, ownerName, appName, _callback);

    }

    /**
     * 
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
     * @param installId The id of the device (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public String devicesBlockLogs(String installId, String ownerName, String appName) throws ApiException {
        ApiResponse<String> localVarResp = devicesBlockLogsWithHttpInfo(installId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
     * @param installId The id of the device (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> devicesBlockLogsWithHttpInfo(String installId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = devicesBlockLogsValidateBeforeCall(installId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * **Warning, this operation is not reversible.**   A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user. 
     * @param installId The id of the device (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devicesBlockLogsAsync(String installId, String ownerName, String appName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = devicesBlockLogsValidateBeforeCall(installId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
