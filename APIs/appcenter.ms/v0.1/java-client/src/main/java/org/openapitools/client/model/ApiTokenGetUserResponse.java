/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiTokenGetUserResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiTokenGetUserResponse {
  public static final String SERIALIZED_NAME_TOKEN_ID = "token_id";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private UUID tokenId;

  /**
   * Gets or Sets tokenScope
   */
  @JsonAdapter(TokenScopeEnum.Adapter.class)
  public enum TokenScopeEnum {
    ALL("all"),
    
    IN_APP_UPDATE("in_app_update"),
    
    VIEWER("viewer");

    private String value;

    TokenScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TokenScopeEnum fromValue(String value) {
      for (TokenScopeEnum b : TokenScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TokenScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TokenScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TokenScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TokenScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TokenScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOKEN_SCOPE = "token_scope";
  @SerializedName(SERIALIZED_NAME_TOKEN_SCOPE)
  private List<TokenScopeEnum> tokenScope = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  /**
   * The creation origin of the user who created this api token
   */
  @JsonAdapter(UserOriginEnum.Adapter.class)
  public enum UserOriginEnum {
    APPCENTER("appcenter"),
    
    HOCKEYAPP("hockeyapp"),
    
    CODEPUSH("codepush");

    private String value;

    UserOriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserOriginEnum fromValue(String value) {
      for (UserOriginEnum b : UserOriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserOriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserOriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserOriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserOriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserOriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_ORIGIN = "user_origin";
  @SerializedName(SERIALIZED_NAME_USER_ORIGIN)
  private UserOriginEnum userOrigin;

  public ApiTokenGetUserResponse() {
  }

  public ApiTokenGetUserResponse tokenId(UUID tokenId) {
    this.tokenId = tokenId;
    return this;
  }

  /**
   * The token&#39;s unique id (UUID)
   * @return tokenId
   */
  @javax.annotation.Nonnull
  public UUID getTokenId() {
    return tokenId;
  }

  public void setTokenId(UUID tokenId) {
    this.tokenId = tokenId;
  }


  public ApiTokenGetUserResponse tokenScope(List<TokenScopeEnum> tokenScope) {
    this.tokenScope = tokenScope;
    return this;
  }

  public ApiTokenGetUserResponse addTokenScopeItem(TokenScopeEnum tokenScopeItem) {
    if (this.tokenScope == null) {
      this.tokenScope = new ArrayList<>();
    }
    this.tokenScope.add(tokenScopeItem);
    return this;
  }

  /**
   * The token&#39;s scope. A list of allowed roles.
   * @return tokenScope
   */
  @javax.annotation.Nonnull
  public List<TokenScopeEnum> getTokenScope() {
    return tokenScope;
  }

  public void setTokenScope(List<TokenScopeEnum> tokenScope) {
    this.tokenScope = tokenScope;
  }


  public ApiTokenGetUserResponse userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * The user email
   * @return userEmail
   */
  @javax.annotation.Nonnull
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public ApiTokenGetUserResponse userId(UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique id (UUID) of the user
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public ApiTokenGetUserResponse userOrigin(UserOriginEnum userOrigin) {
    this.userOrigin = userOrigin;
    return this;
  }

  /**
   * The creation origin of the user who created this api token
   * @return userOrigin
   */
  @javax.annotation.Nonnull
  public UserOriginEnum getUserOrigin() {
    return userOrigin;
  }

  public void setUserOrigin(UserOriginEnum userOrigin) {
    this.userOrigin = userOrigin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiTokenGetUserResponse apiTokenGetUserResponse = (ApiTokenGetUserResponse) o;
    return Objects.equals(this.tokenId, apiTokenGetUserResponse.tokenId) &&
        Objects.equals(this.tokenScope, apiTokenGetUserResponse.tokenScope) &&
        Objects.equals(this.userEmail, apiTokenGetUserResponse.userEmail) &&
        Objects.equals(this.userId, apiTokenGetUserResponse.userId) &&
        Objects.equals(this.userOrigin, apiTokenGetUserResponse.userOrigin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenId, tokenScope, userEmail, userId, userOrigin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiTokenGetUserResponse {\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    tokenScope: ").append(toIndentedString(tokenScope)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userOrigin: ").append(toIndentedString(userOrigin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("token_id");
    openapiFields.add("token_scope");
    openapiFields.add("user_email");
    openapiFields.add("user_id");
    openapiFields.add("user_origin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("token_id");
    openapiRequiredFields.add("token_scope");
    openapiRequiredFields.add("user_email");
    openapiRequiredFields.add("user_id");
    openapiRequiredFields.add("user_origin");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiTokenGetUserResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiTokenGetUserResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiTokenGetUserResponse is not found in the empty JSON string", ApiTokenGetUserResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiTokenGetUserResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiTokenGetUserResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiTokenGetUserResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("token_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("token_scope") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("token_scope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_scope` to be an array in the JSON string but got `%s`", jsonObj.get("token_scope").toString()));
      }
      if (!jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
      if (!jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
      if (!jsonObj.get("user_origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_origin").toString()));
      }
      // validate the required field `user_origin`
      UserOriginEnum.validateJsonElement(jsonObj.get("user_origin"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiTokenGetUserResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiTokenGetUserResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiTokenGetUserResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiTokenGetUserResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiTokenGetUserResponse>() {
           @Override
           public void write(JsonWriter out, ApiTokenGetUserResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiTokenGetUserResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiTokenGetUserResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiTokenGetUserResponse
   * @throws IOException if the JSON string is invalid with respect to ApiTokenGetUserResponse
   */
  public static ApiTokenGetUserResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiTokenGetUserResponse.class);
  }

  /**
   * Convert an instance of ApiTokenGetUserResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

