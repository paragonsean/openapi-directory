/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TesterAppRelease
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TesterAppRelease {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_EXTERNAL_BUILD = "is_external_build";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL_BUILD)
  private Boolean isExternalBuild;

  public static final String SERIALIZED_NAME_MANDATORY_UPDATE = "mandatory_update";
  @SerializedName(SERIALIZED_NAME_MANDATORY_UPDATE)
  private Boolean mandatoryUpdate;

  /**
   * The release&#39;s origin
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    HOCKEYAPP("hockeyapp"),
    
    APPCENTER("appcenter");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String value) {
      for (OriginEnum b : OriginEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OriginEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OriginEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private OriginEnum origin;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "short_version";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_INSTALL_URL = "install_url";
  @SerializedName(SERIALIZED_NAME_INSTALL_URL)
  private String installUrl;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "release_notes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  private String releaseNotes;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public TesterAppRelease() {
  }

  public TesterAppRelease enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * This value determines the whether a release currently is enabled or disabled.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public TesterAppRelease id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID identifying this unique release.
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public TesterAppRelease isExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
    return this;
  }

  /**
   * This value determines if a release is external or not.
   * @return isExternalBuild
   */
  @javax.annotation.Nullable
  public Boolean getIsExternalBuild() {
    return isExternalBuild;
  }

  public void setIsExternalBuild(Boolean isExternalBuild) {
    this.isExternalBuild = isExternalBuild;
  }


  public TesterAppRelease mandatoryUpdate(Boolean mandatoryUpdate) {
    this.mandatoryUpdate = mandatoryUpdate;
    return this;
  }

  /**
   * A boolean which determines whether the release is a mandatory update or not.
   * @return mandatoryUpdate
   */
  @javax.annotation.Nonnull
  public Boolean getMandatoryUpdate() {
    return mandatoryUpdate;
  }

  public void setMandatoryUpdate(Boolean mandatoryUpdate) {
    this.mandatoryUpdate = mandatoryUpdate;
  }


  public TesterAppRelease origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

  /**
   * The release&#39;s origin
   * @return origin
   */
  @javax.annotation.Nullable
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }


  public TesterAppRelease shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * The release&#39;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist.&lt;br&gt; For Android: android:versionName from AppManifest.xml. 
   * @return shortVersion
   */
  @javax.annotation.Nonnull
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public TesterAppRelease uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   * @return uploadedAt
   */
  @javax.annotation.Nonnull
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public TesterAppRelease version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release&#39;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist.&lt;br&gt; For Android: android:versionCode from AppManifest.xml. 
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public TesterAppRelease installUrl(String installUrl) {
    this.installUrl = installUrl;
    return this;
  }

  /**
   * The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
   * @return installUrl
   */
  @javax.annotation.Nullable
  public String getInstallUrl() {
    return installUrl;
  }

  public void setInstallUrl(String installUrl) {
    this.installUrl = installUrl;
  }


  public TesterAppRelease releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  /**
   * The release&#39;s release notes.
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  public TesterAppRelease size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The release&#39;s size in bytes.
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TesterAppRelease testerAppRelease = (TesterAppRelease) o;
    return Objects.equals(this.enabled, testerAppRelease.enabled) &&
        Objects.equals(this.id, testerAppRelease.id) &&
        Objects.equals(this.isExternalBuild, testerAppRelease.isExternalBuild) &&
        Objects.equals(this.mandatoryUpdate, testerAppRelease.mandatoryUpdate) &&
        Objects.equals(this.origin, testerAppRelease.origin) &&
        Objects.equals(this.shortVersion, testerAppRelease.shortVersion) &&
        Objects.equals(this.uploadedAt, testerAppRelease.uploadedAt) &&
        Objects.equals(this.version, testerAppRelease.version) &&
        Objects.equals(this.installUrl, testerAppRelease.installUrl) &&
        Objects.equals(this.releaseNotes, testerAppRelease.releaseNotes) &&
        Objects.equals(this.size, testerAppRelease.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, id, isExternalBuild, mandatoryUpdate, origin, shortVersion, uploadedAt, version, installUrl, releaseNotes, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TesterAppRelease {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isExternalBuild: ").append(toIndentedString(isExternalBuild)).append("\n");
    sb.append("    mandatoryUpdate: ").append(toIndentedString(mandatoryUpdate)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    installUrl: ").append(toIndentedString(installUrl)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("is_external_build");
    openapiFields.add("mandatory_update");
    openapiFields.add("origin");
    openapiFields.add("short_version");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");
    openapiFields.add("install_url");
    openapiFields.add("release_notes");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("mandatory_update");
    openapiRequiredFields.add("short_version");
    openapiRequiredFields.add("uploaded_at");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("size");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TesterAppRelease
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TesterAppRelease.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TesterAppRelease is not found in the empty JSON string", TesterAppRelease.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TesterAppRelease.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TesterAppRelease` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TesterAppRelease.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        OriginEnum.validateJsonElement(jsonObj.get("origin"));
      }
      if (!jsonObj.get("short_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_version").toString()));
      }
      if (!jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("install_url") != null && !jsonObj.get("install_url").isJsonNull()) && !jsonObj.get("install_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `install_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("install_url").toString()));
      }
      if ((jsonObj.get("release_notes") != null && !jsonObj.get("release_notes").isJsonNull()) && !jsonObj.get("release_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TesterAppRelease.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TesterAppRelease' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TesterAppRelease> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TesterAppRelease.class));

       return (TypeAdapter<T>) new TypeAdapter<TesterAppRelease>() {
           @Override
           public void write(JsonWriter out, TesterAppRelease value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TesterAppRelease read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TesterAppRelease given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TesterAppRelease
   * @throws IOException if the JSON string is invalid with respect to TesterAppRelease
   */
  public static TesterAppRelease fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TesterAppRelease.class);
  }

  /**
   * Convert an instance of TesterAppRelease to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

