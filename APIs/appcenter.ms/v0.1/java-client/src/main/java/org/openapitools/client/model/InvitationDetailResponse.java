/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AppInvitationsList200ResponseInvitedBy;
import org.openapitools.client.model.AppsList200ResponseInner;
import org.openapitools.client.model.OrganizationsListAdministered200ResponseOrganizations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvitationDetailResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvitationDetailResponse {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private AppsList200ResponseInner app;

  public static final String SERIALIZED_NAME_INVITATION_ID = "invitation_id";
  @SerializedName(SERIALIZED_NAME_INVITATION_ID)
  private UUID invitationId;

  public static final String SERIALIZED_NAME_INVITED_BY = "invited_by";
  @SerializedName(SERIALIZED_NAME_INVITED_BY)
  private AppInvitationsList200ResponseInvitedBy invitedBy;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private OrganizationsListAdministered200ResponseOrganizations organization;

  public InvitationDetailResponse() {
  }

  public InvitationDetailResponse app(AppsList200ResponseInner app) {
    this.app = app;
    return this;
  }

  /**
   * Get app
   * @return app
   */
  @javax.annotation.Nullable
  public AppsList200ResponseInner getApp() {
    return app;
  }

  public void setApp(AppsList200ResponseInner app) {
    this.app = app;
  }


  public InvitationDetailResponse invitationId(UUID invitationId) {
    this.invitationId = invitationId;
    return this;
  }

  /**
   * The id of the invitation
   * @return invitationId
   */
  @javax.annotation.Nonnull
  public UUID getInvitationId() {
    return invitationId;
  }

  public void setInvitationId(UUID invitationId) {
    this.invitationId = invitationId;
  }


  public InvitationDetailResponse invitedBy(AppInvitationsList200ResponseInvitedBy invitedBy) {
    this.invitedBy = invitedBy;
    return this;
  }

  /**
   * Get invitedBy
   * @return invitedBy
   */
  @javax.annotation.Nonnull
  public AppInvitationsList200ResponseInvitedBy getInvitedBy() {
    return invitedBy;
  }

  public void setInvitedBy(AppInvitationsList200ResponseInvitedBy invitedBy) {
    this.invitedBy = invitedBy;
  }


  public InvitationDetailResponse organization(OrganizationsListAdministered200ResponseOrganizations organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public OrganizationsListAdministered200ResponseOrganizations getOrganization() {
    return organization;
  }

  public void setOrganization(OrganizationsListAdministered200ResponseOrganizations organization) {
    this.organization = organization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvitationDetailResponse invitationDetailResponse = (InvitationDetailResponse) o;
    return Objects.equals(this.app, invitationDetailResponse.app) &&
        Objects.equals(this.invitationId, invitationDetailResponse.invitationId) &&
        Objects.equals(this.invitedBy, invitationDetailResponse.invitedBy) &&
        Objects.equals(this.organization, invitationDetailResponse.organization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, invitationId, invitedBy, organization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvitationDetailResponse {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    invitationId: ").append(toIndentedString(invitationId)).append("\n");
    sb.append("    invitedBy: ").append(toIndentedString(invitedBy)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("invitation_id");
    openapiFields.add("invited_by");
    openapiFields.add("organization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("invitation_id");
    openapiRequiredFields.add("invited_by");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvitationDetailResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvitationDetailResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvitationDetailResponse is not found in the empty JSON string", InvitationDetailResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvitationDetailResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvitationDetailResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvitationDetailResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `app`
      if (jsonObj.get("app") != null && !jsonObj.get("app").isJsonNull()) {
        AppsList200ResponseInner.validateJsonElement(jsonObj.get("app"));
      }
      if (!jsonObj.get("invitation_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitation_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitation_id").toString()));
      }
      // validate the required field `invited_by`
      AppInvitationsList200ResponseInvitedBy.validateJsonElement(jsonObj.get("invited_by"));
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        OrganizationsListAdministered200ResponseOrganizations.validateJsonElement(jsonObj.get("organization"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvitationDetailResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvitationDetailResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvitationDetailResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvitationDetailResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InvitationDetailResponse>() {
           @Override
           public void write(JsonWriter out, InvitationDetailResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvitationDetailResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvitationDetailResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvitationDetailResponse
   * @throws IOException if the JSON string is invalid with respect to InvitationDetailResponse
   */
  public static InvitationDetailResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvitationDetailResponse.class);
  }

  /**
   * Convert an instance of InvitationDetailResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

