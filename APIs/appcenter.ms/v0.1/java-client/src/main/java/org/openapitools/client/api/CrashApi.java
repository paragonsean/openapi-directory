/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BranchConfigurationsDelete200Response;
import org.openapitools.client.model.Crash;
import org.openapitools.client.model.CrashGroupsList200Response;
import org.openapitools.client.model.CrashGroupsList200ResponseCrashGroupsInner;
import org.openapitools.client.model.CrashGroupsUpdateRequest;
import org.openapitools.client.model.CrashesDelete200Response;
import org.openapitools.client.model.CrashesGetAppCrashesInfo200Response;
import org.openapitools.client.model.CrashesGetAppVersions200ResponseInner;
import org.openapitools.client.model.CrashesGetCrashAttachmentLocation200Response;
import org.openapitools.client.model.CrashesGetRawCrashLocation200Response;
import org.openapitools.client.model.CrashesListAttachments200ResponseInner;
import org.openapitools.client.model.MissingSymbolGroupsInfo200Response;
import org.openapitools.client.model.MissingSymbolGroupsList200Response;
import org.openapitools.client.model.MissingSymbolGroupsListDefaultResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Stacktrace;
import org.openapitools.client.model.SymbolUploadsCompleteRequest;
import org.openapitools.client.model.SymbolUploadsCreate200Response;
import org.openapitools.client.model.SymbolUploadsCreateRequest;
import org.openapitools.client.model.SymbolUploadsGetLocation200Response;
import org.openapitools.client.model.SymbolUploadsList200ResponseInner;
import org.openapitools.client.model.SymbolsGetLocation200Response;
import org.openapitools.client.model.SymbolsGetStatus200Response;
import org.openapitools.client.model.SymbolsList200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CrashApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CrashApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CrashApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for crashGroupsGet
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsGetCall(String crashGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashGroupsGetValidateBeforeCall(String crashGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashGroupsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashGroupsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashGroupsGet(Async)");
        }

        return crashGroupsGetCall(crashGroupId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets a specific group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return CrashGroupsList200ResponseCrashGroupsInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CrashGroupsList200ResponseCrashGroupsInner crashGroupsGet(String crashGroupId, String ownerName, String appName) throws ApiException {
        ApiResponse<CrashGroupsList200ResponseCrashGroupsInner> localVarResp = crashGroupsGetWithHttpInfo(crashGroupId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;CrashGroupsList200ResponseCrashGroupsInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CrashGroupsList200ResponseCrashGroupsInner> crashGroupsGetWithHttpInfo(String crashGroupId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashGroupsGetValidateBeforeCall(crashGroupId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<CrashGroupsList200ResponseCrashGroupsInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsGetAsync(String crashGroupId, String ownerName, String appName, final ApiCallback<CrashGroupsList200ResponseCrashGroupsInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashGroupsGetValidateBeforeCall(crashGroupId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<CrashGroupsList200ResponseCrashGroupsInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashGroupsGetStacktrace
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsGetStacktraceCall(String crashGroupId, String ownerName, String appName, Boolean groupingOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupingOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grouping_only", groupingOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashGroupsGetStacktraceValidateBeforeCall(String crashGroupId, String ownerName, String appName, Boolean groupingOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashGroupsGetStacktrace(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashGroupsGetStacktrace(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashGroupsGetStacktrace(Async)");
        }

        return crashGroupsGetStacktraceCall(crashGroupId, ownerName, appName, groupingOnly, _callback);

    }

    /**
     * 
     * Gets a stacktrace for a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @return Stacktrace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Stacktrace crashGroupsGetStacktrace(String crashGroupId, String ownerName, String appName, Boolean groupingOnly) throws ApiException {
        ApiResponse<Stacktrace> localVarResp = crashGroupsGetStacktraceWithHttpInfo(crashGroupId, ownerName, appName, groupingOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a stacktrace for a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @return ApiResponse&lt;Stacktrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Stacktrace> crashGroupsGetStacktraceWithHttpInfo(String crashGroupId, String ownerName, String appName, Boolean groupingOnly) throws ApiException {
        okhttp3.Call localVarCall = crashGroupsGetStacktraceValidateBeforeCall(crashGroupId, ownerName, appName, groupingOnly, null);
        Type localVarReturnType = new TypeToken<Stacktrace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a stacktrace for a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsGetStacktraceAsync(String crashGroupId, String ownerName, String appName, Boolean groupingOnly, final ApiCallback<Stacktrace> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashGroupsGetStacktraceValidateBeforeCall(crashGroupId, ownerName, appName, groupingOnly, _callback);
        Type localVarReturnType = new TypeToken<Stacktrace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashGroupsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param lastOccurrenceFrom Earliest date when the last time a crash occured in a crash group (optional)
     * @param lastOccurrenceTo Latest date when the last time a crash occured in a crash group (optional)
     * @param appVersion version (optional)
     * @param groupType  (optional)
     * @param groupStatus  (optional)
     * @param groupTextSearch A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)
     * @param $orderby the OData-like $orderby argument (optional, default to last_occurrence desc)
     * @param continuationToken Cassandra request continuation token. The token is used for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsListCall(String ownerName, String appName, OffsetDateTime lastOccurrenceFrom, OffsetDateTime lastOccurrenceTo, String appVersion, String groupType, String groupStatus, String groupTextSearch, String $orderby, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastOccurrenceFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_occurrence_from", lastOccurrenceFrom));
        }

        if (lastOccurrenceTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_occurrence_to", lastOccurrenceTo));
        }

        if (appVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_version", appVersion));
        }

        if (groupType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_type", groupType));
        }

        if (groupStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_status", groupStatus));
        }

        if (groupTextSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_text_search", groupTextSearch));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuation_token", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashGroupsListValidateBeforeCall(String ownerName, String appName, OffsetDateTime lastOccurrenceFrom, OffsetDateTime lastOccurrenceTo, String appVersion, String groupType, String groupStatus, String groupTextSearch, String $orderby, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashGroupsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashGroupsList(Async)");
        }

        return crashGroupsListCall(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, $orderby, continuationToken, _callback);

    }

    /**
     * 
     * Gets a list of crash groups and whether the list contains all available groups.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param lastOccurrenceFrom Earliest date when the last time a crash occured in a crash group (optional)
     * @param lastOccurrenceTo Latest date when the last time a crash occured in a crash group (optional)
     * @param appVersion version (optional)
     * @param groupType  (optional)
     * @param groupStatus  (optional)
     * @param groupTextSearch A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)
     * @param $orderby the OData-like $orderby argument (optional, default to last_occurrence desc)
     * @param continuationToken Cassandra request continuation token. The token is used for pagination. (optional)
     * @return CrashGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CrashGroupsList200Response crashGroupsList(String ownerName, String appName, OffsetDateTime lastOccurrenceFrom, OffsetDateTime lastOccurrenceTo, String appVersion, String groupType, String groupStatus, String groupTextSearch, String $orderby, String continuationToken) throws ApiException {
        ApiResponse<CrashGroupsList200Response> localVarResp = crashGroupsListWithHttpInfo(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, $orderby, continuationToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of crash groups and whether the list contains all available groups.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param lastOccurrenceFrom Earliest date when the last time a crash occured in a crash group (optional)
     * @param lastOccurrenceTo Latest date when the last time a crash occured in a crash group (optional)
     * @param appVersion version (optional)
     * @param groupType  (optional)
     * @param groupStatus  (optional)
     * @param groupTextSearch A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)
     * @param $orderby the OData-like $orderby argument (optional, default to last_occurrence desc)
     * @param continuationToken Cassandra request continuation token. The token is used for pagination. (optional)
     * @return ApiResponse&lt;CrashGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CrashGroupsList200Response> crashGroupsListWithHttpInfo(String ownerName, String appName, OffsetDateTime lastOccurrenceFrom, OffsetDateTime lastOccurrenceTo, String appVersion, String groupType, String groupStatus, String groupTextSearch, String $orderby, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = crashGroupsListValidateBeforeCall(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, $orderby, continuationToken, null);
        Type localVarReturnType = new TypeToken<CrashGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of crash groups and whether the list contains all available groups.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param lastOccurrenceFrom Earliest date when the last time a crash occured in a crash group (optional)
     * @param lastOccurrenceTo Latest date when the last time a crash occured in a crash group (optional)
     * @param appVersion version (optional)
     * @param groupType  (optional)
     * @param groupStatus  (optional)
     * @param groupTextSearch A freetext search that matches in crash, crash types, crash stack_traces and crash user (optional)
     * @param $orderby the OData-like $orderby argument (optional, default to last_occurrence desc)
     * @param continuationToken Cassandra request continuation token. The token is used for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsListAsync(String ownerName, String appName, OffsetDateTime lastOccurrenceFrom, OffsetDateTime lastOccurrenceTo, String appVersion, String groupType, String groupStatus, String groupTextSearch, String $orderby, String continuationToken, final ApiCallback<CrashGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashGroupsListValidateBeforeCall(ownerName, appName, lastOccurrenceFrom, lastOccurrenceTo, appVersion, groupType, groupStatus, groupTextSearch, $orderby, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<CrashGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashGroupsUpdate
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param crashGroupsUpdateRequest Group change object. All fields are optional and only provided fields will get updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsUpdateCall(String crashGroupId, String ownerName, String appName, CrashGroupsUpdateRequest crashGroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = crashGroupsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashGroupsUpdateValidateBeforeCall(String crashGroupId, String ownerName, String appName, CrashGroupsUpdateRequest crashGroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashGroupsUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashGroupsUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashGroupsUpdate(Async)");
        }

        // verify the required parameter 'crashGroupsUpdateRequest' is set
        if (crashGroupsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'crashGroupsUpdateRequest' when calling crashGroupsUpdate(Async)");
        }

        return crashGroupsUpdateCall(crashGroupId, ownerName, appName, crashGroupsUpdateRequest, _callback);

    }

    /**
     * 
     * Updates a group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param crashGroupsUpdateRequest Group change object. All fields are optional and only provided fields will get updated. (required)
     * @return CrashGroupsList200ResponseCrashGroupsInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CrashGroupsList200ResponseCrashGroupsInner crashGroupsUpdate(String crashGroupId, String ownerName, String appName, CrashGroupsUpdateRequest crashGroupsUpdateRequest) throws ApiException {
        ApiResponse<CrashGroupsList200ResponseCrashGroupsInner> localVarResp = crashGroupsUpdateWithHttpInfo(crashGroupId, ownerName, appName, crashGroupsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param crashGroupsUpdateRequest Group change object. All fields are optional and only provided fields will get updated. (required)
     * @return ApiResponse&lt;CrashGroupsList200ResponseCrashGroupsInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CrashGroupsList200ResponseCrashGroupsInner> crashGroupsUpdateWithHttpInfo(String crashGroupId, String ownerName, String appName, CrashGroupsUpdateRequest crashGroupsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = crashGroupsUpdateValidateBeforeCall(crashGroupId, ownerName, appName, crashGroupsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CrashGroupsList200ResponseCrashGroupsInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param crashGroupsUpdateRequest Group change object. All fields are optional and only provided fields will get updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashGroupsUpdateAsync(String crashGroupId, String ownerName, String appName, CrashGroupsUpdateRequest crashGroupsUpdateRequest, final ApiCallback<CrashGroupsList200ResponseCrashGroupsInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashGroupsUpdateValidateBeforeCall(crashGroupId, ownerName, appName, crashGroupsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CrashGroupsList200ResponseCrashGroupsInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesDelete
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param retentionDelete true in that case if the method should skip update counts (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesDeleteCall(String crashGroupId, String crashId, String ownerName, String appName, Boolean retentionDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (retentionDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retention_delete", retentionDelete));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesDeleteValidateBeforeCall(String crashGroupId, String crashId, String ownerName, String appName, Boolean retentionDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashesDelete(Async)");
        }

        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesDelete(Async)");
        }

        return crashesDeleteCall(crashGroupId, crashId, ownerName, appName, retentionDelete, _callback);

    }

    /**
     * 
     * Delete a specific crash and related attachments and blobs for an app.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param retentionDelete true in that case if the method should skip update counts (optional, default to false)
     * @return CrashesDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CrashesDelete200Response crashesDelete(String crashGroupId, String crashId, String ownerName, String appName, Boolean retentionDelete) throws ApiException {
        ApiResponse<CrashesDelete200Response> localVarResp = crashesDeleteWithHttpInfo(crashGroupId, crashId, ownerName, appName, retentionDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a specific crash and related attachments and blobs for an app.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param retentionDelete true in that case if the method should skip update counts (optional, default to false)
     * @return ApiResponse&lt;CrashesDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CrashesDelete200Response> crashesDeleteWithHttpInfo(String crashGroupId, String crashId, String ownerName, String appName, Boolean retentionDelete) throws ApiException {
        okhttp3.Call localVarCall = crashesDeleteValidateBeforeCall(crashGroupId, crashId, ownerName, appName, retentionDelete, null);
        Type localVarReturnType = new TypeToken<CrashesDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a specific crash and related attachments and blobs for an app.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param retentionDelete true in that case if the method should skip update counts (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesDeleteAsync(String crashGroupId, String crashId, String ownerName, String appName, Boolean retentionDelete, final ApiCallback<CrashesDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesDeleteValidateBeforeCall(crashGroupId, crashId, ownerName, appName, retentionDelete, _callback);
        Type localVarReturnType = new TypeToken<CrashesDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGet
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param includeDetails true if the crash should include in depth crash details (optional, default to false)
     * @param includeStacktrace true if the crash should include the stacktrace information (optional, default to false)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetCall(String crashGroupId, String crashId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, Boolean includeDetails, Boolean includeStacktrace, Boolean groupingOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeReport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_report", includeReport));
        }

        if (includeLog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_log", includeLog));
        }

        if (includeDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_details", includeDetails));
        }

        if (includeStacktrace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_stacktrace", includeStacktrace));
        }

        if (groupingOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grouping_only", groupingOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetValidateBeforeCall(String crashGroupId, String crashId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, Boolean includeDetails, Boolean includeStacktrace, Boolean groupingOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashesGet(Async)");
        }

        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGet(Async)");
        }

        return crashesGetCall(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly, _callback);

    }

    /**
     * 
     * Gets a specific crash for an app.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param includeDetails true if the crash should include in depth crash details (optional, default to false)
     * @param includeStacktrace true if the crash should include the stacktrace information (optional, default to false)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @return Crash
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Crash crashesGet(String crashGroupId, String crashId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, Boolean includeDetails, Boolean includeStacktrace, Boolean groupingOnly) throws ApiException {
        ApiResponse<Crash> localVarResp = crashesGetWithHttpInfo(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific crash for an app.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param includeDetails true if the crash should include in depth crash details (optional, default to false)
     * @param includeStacktrace true if the crash should include the stacktrace information (optional, default to false)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @return ApiResponse&lt;Crash&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Crash> crashesGetWithHttpInfo(String crashGroupId, String crashId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, Boolean includeDetails, Boolean includeStacktrace, Boolean groupingOnly) throws ApiException {
        okhttp3.Call localVarCall = crashesGetValidateBeforeCall(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly, null);
        Type localVarReturnType = new TypeToken<Crash>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific crash for an app.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param includeDetails true if the crash should include in depth crash details (optional, default to false)
     * @param includeStacktrace true if the crash should include the stacktrace information (optional, default to false)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetAsync(String crashGroupId, String crashId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, Boolean includeDetails, Boolean includeStacktrace, Boolean groupingOnly, final ApiCallback<Crash> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetValidateBeforeCall(crashGroupId, crashId, ownerName, appName, includeReport, includeLog, includeDetails, includeStacktrace, groupingOnly, _callback);
        Type localVarReturnType = new TypeToken<Crash>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetAppCrashesInfo
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetAppCrashesInfoCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes_info"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetAppCrashesInfoValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetAppCrashesInfo(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetAppCrashesInfo(Async)");
        }

        return crashesGetAppCrashesInfoCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Gets whether the application has any crashes.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return CrashesGetAppCrashesInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CrashesGetAppCrashesInfo200Response crashesGetAppCrashesInfo(String ownerName, String appName) throws ApiException {
        ApiResponse<CrashesGetAppCrashesInfo200Response> localVarResp = crashesGetAppCrashesInfoWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets whether the application has any crashes.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;CrashesGetAppCrashesInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CrashesGetAppCrashesInfo200Response> crashesGetAppCrashesInfoWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesGetAppCrashesInfoValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<CrashesGetAppCrashesInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets whether the application has any crashes.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetAppCrashesInfoAsync(String ownerName, String appName, final ApiCallback<CrashesGetAppCrashesInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetAppCrashesInfoValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<CrashesGetAppCrashesInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetAppVersions
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetAppVersionsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/versions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetAppVersionsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetAppVersions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetAppVersions(Async)");
        }

        return crashesGetAppVersionsCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Gets a list of application versions.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;CrashesGetAppVersions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<CrashesGetAppVersions200ResponseInner> crashesGetAppVersions(String ownerName, String appName) throws ApiException {
        ApiResponse<List<CrashesGetAppVersions200ResponseInner>> localVarResp = crashesGetAppVersionsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of application versions.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;CrashesGetAppVersions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<CrashesGetAppVersions200ResponseInner>> crashesGetAppVersionsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesGetAppVersionsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<CrashesGetAppVersions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of application versions.
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetAppVersionsAsync(String ownerName, String appName, final ApiCallback<List<CrashesGetAppVersions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetAppVersionsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<CrashesGetAppVersions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetCrashAttachmentLocation
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetCrashAttachmentLocationCall(String crashId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location"
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetCrashAttachmentLocationValidateBeforeCall(String crashId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesGetCrashAttachmentLocation(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling crashesGetCrashAttachmentLocation(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetCrashAttachmentLocation(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetCrashAttachmentLocation(Async)");
        }

        return crashesGetCrashAttachmentLocationCall(crashId, attachmentId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the URI location to download crash attachment.
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return CrashesGetCrashAttachmentLocation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CrashesGetCrashAttachmentLocation200Response crashesGetCrashAttachmentLocation(String crashId, String attachmentId, String ownerName, String appName) throws ApiException {
        ApiResponse<CrashesGetCrashAttachmentLocation200Response> localVarResp = crashesGetCrashAttachmentLocationWithHttpInfo(crashId, attachmentId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the URI location to download crash attachment.
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;CrashesGetCrashAttachmentLocation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CrashesGetCrashAttachmentLocation200Response> crashesGetCrashAttachmentLocationWithHttpInfo(String crashId, String attachmentId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesGetCrashAttachmentLocationValidateBeforeCall(crashId, attachmentId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<CrashesGetCrashAttachmentLocation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the URI location to download crash attachment.
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetCrashAttachmentLocationAsync(String crashId, String attachmentId, String ownerName, String appName, final ApiCallback<CrashesGetCrashAttachmentLocation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetCrashAttachmentLocationValidateBeforeCall(crashId, attachmentId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<CrashesGetCrashAttachmentLocation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetCrashTextAttachmentContent
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetCrashTextAttachmentContentCall(String crashId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text"
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetCrashTextAttachmentContentValidateBeforeCall(String crashId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesGetCrashTextAttachmentContent(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling crashesGetCrashTextAttachmentContent(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetCrashTextAttachmentContent(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetCrashTextAttachmentContent(Async)");
        }

        return crashesGetCrashTextAttachmentContentCall(crashId, attachmentId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets content of the text attachment.
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String crashesGetCrashTextAttachmentContent(String crashId, String attachmentId, String ownerName, String appName) throws ApiException {
        ApiResponse<String> localVarResp = crashesGetCrashTextAttachmentContentWithHttpInfo(crashId, attachmentId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets content of the text attachment.
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> crashesGetCrashTextAttachmentContentWithHttpInfo(String crashId, String attachmentId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesGetCrashTextAttachmentContentValidateBeforeCall(crashId, attachmentId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets content of the text attachment.
     * @param crashId id of a specific crash (required)
     * @param attachmentId attachment id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetCrashTextAttachmentContentAsync(String crashId, String attachmentId, String ownerName, String appName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetCrashTextAttachmentContentValidateBeforeCall(crashId, attachmentId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetNativeCrash
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetNativeCrashCall(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetNativeCrashValidateBeforeCall(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashesGetNativeCrash(Async)");
        }

        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesGetNativeCrash(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetNativeCrash(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetNativeCrash(Async)");
        }

        return crashesGetNativeCrashCall(crashGroupId, crashId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the native log of a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String crashesGetNativeCrash(String crashGroupId, String crashId, String ownerName, String appName) throws ApiException {
        ApiResponse<String> localVarResp = crashesGetNativeCrashWithHttpInfo(crashGroupId, crashId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the native log of a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> crashesGetNativeCrashWithHttpInfo(String crashGroupId, String crashId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesGetNativeCrashValidateBeforeCall(crashGroupId, crashId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the native log of a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetNativeCrashAsync(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetNativeCrashValidateBeforeCall(crashGroupId, crashId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetNativeCrashDownload
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetNativeCrashDownloadCall(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetNativeCrashDownloadValidateBeforeCall(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashesGetNativeCrashDownload(Async)");
        }

        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesGetNativeCrashDownload(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetNativeCrashDownload(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetNativeCrashDownload(Async)");
        }

        return crashesGetNativeCrashDownloadCall(crashGroupId, crashId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the native log of a specific crash as a text attachment.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public String crashesGetNativeCrashDownload(String crashGroupId, String crashId, String ownerName, String appName) throws ApiException {
        ApiResponse<String> localVarResp = crashesGetNativeCrashDownloadWithHttpInfo(crashGroupId, crashId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the native log of a specific crash as a text attachment.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<String> crashesGetNativeCrashDownloadWithHttpInfo(String crashGroupId, String crashId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesGetNativeCrashDownloadValidateBeforeCall(crashGroupId, crashId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the native log of a specific crash as a text attachment.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetNativeCrashDownloadAsync(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetNativeCrashDownloadValidateBeforeCall(crashGroupId, crashId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetRawCrashLocation
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetRawCrashLocationCall(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetRawCrashLocationValidateBeforeCall(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashesGetRawCrashLocation(Async)");
        }

        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesGetRawCrashLocation(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetRawCrashLocation(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetRawCrashLocation(Async)");
        }

        return crashesGetRawCrashLocationCall(crashGroupId, crashId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the URI location to download json of a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return CrashesGetRawCrashLocation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CrashesGetRawCrashLocation200Response crashesGetRawCrashLocation(String crashGroupId, String crashId, String ownerName, String appName) throws ApiException {
        ApiResponse<CrashesGetRawCrashLocation200Response> localVarResp = crashesGetRawCrashLocationWithHttpInfo(crashGroupId, crashId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the URI location to download json of a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;CrashesGetRawCrashLocation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CrashesGetRawCrashLocation200Response> crashesGetRawCrashLocationWithHttpInfo(String crashGroupId, String crashId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesGetRawCrashLocationValidateBeforeCall(crashGroupId, crashId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<CrashesGetRawCrashLocation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the URI location to download json of a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetRawCrashLocationAsync(String crashGroupId, String crashId, String ownerName, String appName, final ApiCallback<CrashesGetRawCrashLocation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetRawCrashLocationValidateBeforeCall(crashGroupId, crashId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<CrashesGetRawCrashLocation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesGetStacktrace
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetStacktraceCall(String crashGroupId, String crashId, String ownerName, String appName, Boolean groupingOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupingOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grouping_only", groupingOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesGetStacktraceValidateBeforeCall(String crashGroupId, String crashId, String ownerName, String appName, Boolean groupingOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashesGetStacktrace(Async)");
        }

        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesGetStacktrace(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesGetStacktrace(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesGetStacktrace(Async)");
        }

        return crashesGetStacktraceCall(crashGroupId, crashId, ownerName, appName, groupingOnly, _callback);

    }

    /**
     * 
     * Gets a stacktrace for a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @return Stacktrace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Stacktrace crashesGetStacktrace(String crashGroupId, String crashId, String ownerName, String appName, Boolean groupingOnly) throws ApiException {
        ApiResponse<Stacktrace> localVarResp = crashesGetStacktraceWithHttpInfo(crashGroupId, crashId, ownerName, appName, groupingOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a stacktrace for a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @return ApiResponse&lt;Stacktrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Stacktrace> crashesGetStacktraceWithHttpInfo(String crashGroupId, String crashId, String ownerName, String appName, Boolean groupingOnly) throws ApiException {
        okhttp3.Call localVarCall = crashesGetStacktraceValidateBeforeCall(crashGroupId, crashId, ownerName, appName, groupingOnly, null);
        Type localVarReturnType = new TypeToken<Stacktrace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a stacktrace for a specific crash.
     * @param crashGroupId id of a specific group (required)
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param groupingOnly true if the stacktrace should be only the relevant thread / exception. Default is false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesGetStacktraceAsync(String crashGroupId, String crashId, String ownerName, String appName, Boolean groupingOnly, final ApiCallback<Stacktrace> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesGetStacktraceValidateBeforeCall(crashGroupId, crashId, ownerName, appName, groupingOnly, _callback);
        Type localVarReturnType = new TypeToken<Stacktrace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesList
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param appVersion version (optional)
     * @param errorType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesListCall(String crashGroupId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, OffsetDateTime dateFrom, OffsetDateTime dateTo, String appVersion, String errorType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes"
            .replace("{" + "crash_group_id" + "}", localVarApiClient.escapeString(crashGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeReport != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_report", includeReport));
        }

        if (includeLog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_log", includeLog));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (appVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_version", appVersion));
        }

        if (errorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error_type", errorType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesListValidateBeforeCall(String crashGroupId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, OffsetDateTime dateFrom, OffsetDateTime dateTo, String appVersion, String errorType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashGroupId' is set
        if (crashGroupId == null) {
            throw new ApiException("Missing the required parameter 'crashGroupId' when calling crashesList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesList(Async)");
        }

        return crashesListCall(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType, _callback);

    }

    /**
     * 
     * Gets all crashes of a group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param appVersion version (optional)
     * @param errorType  (optional)
     * @return List&lt;Crash&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<Crash> crashesList(String crashGroupId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, OffsetDateTime dateFrom, OffsetDateTime dateTo, String appVersion, String errorType) throws ApiException {
        ApiResponse<List<Crash>> localVarResp = crashesListWithHttpInfo(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all crashes of a group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param appVersion version (optional)
     * @param errorType  (optional)
     * @return ApiResponse&lt;List&lt;Crash&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<Crash>> crashesListWithHttpInfo(String crashGroupId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, OffsetDateTime dateFrom, OffsetDateTime dateTo, String appVersion, String errorType) throws ApiException {
        okhttp3.Call localVarCall = crashesListValidateBeforeCall(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType, null);
        Type localVarReturnType = new TypeToken<List<Crash>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all crashes of a group.
     * @param crashGroupId id of a specific group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param includeReport true if the crash should include the raw crash report. Default is false (optional, default to false)
     * @param includeLog true if the crash should include the custom log report. Default is false (optional, default to false)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param appVersion version (optional)
     * @param errorType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesListAsync(String crashGroupId, String ownerName, String appName, Boolean includeReport, Boolean includeLog, OffsetDateTime dateFrom, OffsetDateTime dateTo, String appVersion, String errorType, final ApiCallback<List<Crash>> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesListValidateBeforeCall(crashGroupId, ownerName, appName, includeReport, includeLog, dateFrom, dateTo, appVersion, errorType, _callback);
        Type localVarReturnType = new TypeToken<List<Crash>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for crashesListAttachments
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesListAttachmentsCall(String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments"
            .replace("{" + "crash_id" + "}", localVarApiClient.escapeString(crashId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call crashesListAttachmentsValidateBeforeCall(String crashId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'crashId' is set
        if (crashId == null) {
            throw new ApiException("Missing the required parameter 'crashId' when calling crashesListAttachments(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling crashesListAttachments(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling crashesListAttachments(Async)");
        }

        return crashesListAttachmentsCall(crashId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets all attachments for a specific crash.
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;CrashesListAttachments200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<CrashesListAttachments200ResponseInner> crashesListAttachments(String crashId, String ownerName, String appName) throws ApiException {
        ApiResponse<List<CrashesListAttachments200ResponseInner>> localVarResp = crashesListAttachmentsWithHttpInfo(crashId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all attachments for a specific crash.
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;CrashesListAttachments200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<CrashesListAttachments200ResponseInner>> crashesListAttachmentsWithHttpInfo(String crashId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = crashesListAttachmentsValidateBeforeCall(crashId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<CrashesListAttachments200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all attachments for a specific crash.
     * @param crashId id of a specific crash (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call crashesListAttachmentsAsync(String crashId, String ownerName, String appName, final ApiCallback<List<CrashesListAttachments200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = crashesListAttachmentsValidateBeforeCall(crashId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<CrashesListAttachments200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for missingSymbolGroupsGet
     * @param symbolGroupId missing symbol crash group id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call missingSymbolGroupsGetCall(String symbolGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}"
            .replace("{" + "symbol_group_id" + "}", localVarApiClient.escapeString(symbolGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call missingSymbolGroupsGetValidateBeforeCall(String symbolGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolGroupId' is set
        if (symbolGroupId == null) {
            throw new ApiException("Missing the required parameter 'symbolGroupId' when calling missingSymbolGroupsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling missingSymbolGroupsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling missingSymbolGroupsGet(Async)");
        }

        return missingSymbolGroupsGetCall(symbolGroupId, ownerName, appName, _callback);

    }

    /**
     * Gets missing symbol crash group by its id
     * Gets missing symbol crash group by its id
     * @param symbolGroupId missing symbol crash group id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return MissingSymbolGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public MissingSymbolGroupsList200Response missingSymbolGroupsGet(String symbolGroupId, String ownerName, String appName) throws ApiException {
        ApiResponse<MissingSymbolGroupsList200Response> localVarResp = missingSymbolGroupsGetWithHttpInfo(symbolGroupId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * Gets missing symbol crash group by its id
     * Gets missing symbol crash group by its id
     * @param symbolGroupId missing symbol crash group id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;MissingSymbolGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MissingSymbolGroupsList200Response> missingSymbolGroupsGetWithHttpInfo(String symbolGroupId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = missingSymbolGroupsGetValidateBeforeCall(symbolGroupId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<MissingSymbolGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets missing symbol crash group by its id (asynchronously)
     * Gets missing symbol crash group by its id
     * @param symbolGroupId missing symbol crash group id (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call missingSymbolGroupsGetAsync(String symbolGroupId, String ownerName, String appName, final ApiCallback<MissingSymbolGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = missingSymbolGroupsGetValidateBeforeCall(symbolGroupId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<MissingSymbolGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for missingSymbolGroupsInfo
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call missingSymbolGroupsInfoCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call missingSymbolGroupsInfoValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling missingSymbolGroupsInfo(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling missingSymbolGroupsInfo(Async)");
        }

        return missingSymbolGroupsInfoCall(ownerName, appName, _callback);

    }

    /**
     * Gets application level statistics for all missing symbol groups
     * Gets application level statistics for all missing symbol groups
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return MissingSymbolGroupsInfo200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public MissingSymbolGroupsInfo200Response missingSymbolGroupsInfo(String ownerName, String appName) throws ApiException {
        ApiResponse<MissingSymbolGroupsInfo200Response> localVarResp = missingSymbolGroupsInfoWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * Gets application level statistics for all missing symbol groups
     * Gets application level statistics for all missing symbol groups
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;MissingSymbolGroupsInfo200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MissingSymbolGroupsInfo200Response> missingSymbolGroupsInfoWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = missingSymbolGroupsInfoValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<MissingSymbolGroupsInfo200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets application level statistics for all missing symbol groups (asynchronously)
     * Gets application level statistics for all missing symbol groups
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call missingSymbolGroupsInfoAsync(String ownerName, String appName, final ApiCallback<MissingSymbolGroupsInfo200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = missingSymbolGroupsInfoValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<MissingSymbolGroupsInfo200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for missingSymbolGroupsList
     * @param top top N elements (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call missingSymbolGroupsListCall(Integer top, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call missingSymbolGroupsListValidateBeforeCall(Integer top, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'top' is set
        if (top == null) {
            throw new ApiException("Missing the required parameter 'top' when calling missingSymbolGroupsList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling missingSymbolGroupsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling missingSymbolGroupsList(Async)");
        }

        return missingSymbolGroupsListCall(top, ownerName, appName, _callback);

    }

    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * @param top top N elements (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return MissingSymbolGroupsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public MissingSymbolGroupsList200Response missingSymbolGroupsList(Integer top, String ownerName, String appName) throws ApiException {
        ApiResponse<MissingSymbolGroupsList200Response> localVarResp = missingSymbolGroupsListWithHttpInfo(top, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * @param top top N elements (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;MissingSymbolGroupsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MissingSymbolGroupsList200Response> missingSymbolGroupsListWithHttpInfo(Integer top, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = missingSymbolGroupsListValidateBeforeCall(top, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<MissingSymbolGroupsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets top N (ordered by crash count) of crash groups by missing symbol (asynchronously)
     * Gets top N (ordered by crash count) of crash groups by missing symbol
     * @param top top N elements (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call missingSymbolGroupsListAsync(Integer top, String ownerName, String appName, final ApiCallback<MissingSymbolGroupsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = missingSymbolGroupsListValidateBeforeCall(top, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<MissingSymbolGroupsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolUploadsComplete
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCompleteRequest The symbol information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsCompleteCall(String symbolUploadId, String ownerName, String appName, SymbolUploadsCompleteRequest symbolUploadsCompleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = symbolUploadsCompleteRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}"
            .replace("{" + "symbol_upload_id" + "}", localVarApiClient.escapeString(symbolUploadId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolUploadsCompleteValidateBeforeCall(String symbolUploadId, String ownerName, String appName, SymbolUploadsCompleteRequest symbolUploadsCompleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolUploadId' is set
        if (symbolUploadId == null) {
            throw new ApiException("Missing the required parameter 'symbolUploadId' when calling symbolUploadsComplete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolUploadsComplete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolUploadsComplete(Async)");
        }

        // verify the required parameter 'symbolUploadsCompleteRequest' is set
        if (symbolUploadsCompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'symbolUploadsCompleteRequest' when calling symbolUploadsComplete(Async)");
        }

        return symbolUploadsCompleteCall(symbolUploadId, ownerName, appName, symbolUploadsCompleteRequest, _callback);

    }

    /**
     * 
     * Commits or aborts the symbol upload process for a new set of symbols for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCompleteRequest The symbol information (required)
     * @return SymbolUploadsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolUploadsList200ResponseInner symbolUploadsComplete(String symbolUploadId, String ownerName, String appName, SymbolUploadsCompleteRequest symbolUploadsCompleteRequest) throws ApiException {
        ApiResponse<SymbolUploadsList200ResponseInner> localVarResp = symbolUploadsCompleteWithHttpInfo(symbolUploadId, ownerName, appName, symbolUploadsCompleteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Commits or aborts the symbol upload process for a new set of symbols for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCompleteRequest The symbol information (required)
     * @return ApiResponse&lt;SymbolUploadsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolUploadsList200ResponseInner> symbolUploadsCompleteWithHttpInfo(String symbolUploadId, String ownerName, String appName, SymbolUploadsCompleteRequest symbolUploadsCompleteRequest) throws ApiException {
        okhttp3.Call localVarCall = symbolUploadsCompleteValidateBeforeCall(symbolUploadId, ownerName, appName, symbolUploadsCompleteRequest, null);
        Type localVarReturnType = new TypeToken<SymbolUploadsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Commits or aborts the symbol upload process for a new set of symbols for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCompleteRequest The symbol information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsCompleteAsync(String symbolUploadId, String ownerName, String appName, SymbolUploadsCompleteRequest symbolUploadsCompleteRequest, final ApiCallback<SymbolUploadsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolUploadsCompleteValidateBeforeCall(symbolUploadId, ownerName, appName, symbolUploadsCompleteRequest, _callback);
        Type localVarReturnType = new TypeToken<SymbolUploadsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolUploadsCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCreateRequest The symbol information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsCreateCall(String ownerName, String appName, SymbolUploadsCreateRequest symbolUploadsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = symbolUploadsCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolUploadsCreateValidateBeforeCall(String ownerName, String appName, SymbolUploadsCreateRequest symbolUploadsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolUploadsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolUploadsCreate(Async)");
        }

        // verify the required parameter 'symbolUploadsCreateRequest' is set
        if (symbolUploadsCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'symbolUploadsCreateRequest' when calling symbolUploadsCreate(Async)");
        }

        return symbolUploadsCreateCall(ownerName, appName, symbolUploadsCreateRequest, _callback);

    }

    /**
     * 
     * Begins the symbol upload process for a new set of symbols for the specified application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCreateRequest The symbol information (required)
     * @return SymbolUploadsCreate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolUploadsCreate200Response symbolUploadsCreate(String ownerName, String appName, SymbolUploadsCreateRequest symbolUploadsCreateRequest) throws ApiException {
        ApiResponse<SymbolUploadsCreate200Response> localVarResp = symbolUploadsCreateWithHttpInfo(ownerName, appName, symbolUploadsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Begins the symbol upload process for a new set of symbols for the specified application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCreateRequest The symbol information (required)
     * @return ApiResponse&lt;SymbolUploadsCreate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolUploadsCreate200Response> symbolUploadsCreateWithHttpInfo(String ownerName, String appName, SymbolUploadsCreateRequest symbolUploadsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = symbolUploadsCreateValidateBeforeCall(ownerName, appName, symbolUploadsCreateRequest, null);
        Type localVarReturnType = new TypeToken<SymbolUploadsCreate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Begins the symbol upload process for a new set of symbols for the specified application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param symbolUploadsCreateRequest The symbol information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsCreateAsync(String ownerName, String appName, SymbolUploadsCreateRequest symbolUploadsCreateRequest, final ApiCallback<SymbolUploadsCreate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolUploadsCreateValidateBeforeCall(ownerName, appName, symbolUploadsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<SymbolUploadsCreate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolUploadsDelete
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsDeleteCall(String symbolUploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}"
            .replace("{" + "symbol_upload_id" + "}", localVarApiClient.escapeString(symbolUploadId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolUploadsDeleteValidateBeforeCall(String symbolUploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolUploadId' is set
        if (symbolUploadId == null) {
            throw new ApiException("Missing the required parameter 'symbolUploadId' when calling symbolUploadsDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolUploadsDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolUploadsDelete(Async)");
        }

        return symbolUploadsDeleteCall(symbolUploadId, ownerName, appName, _callback);

    }

    /**
     * 
     * Deletes a symbol upload by id for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return SymbolUploadsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolUploadsList200ResponseInner symbolUploadsDelete(String symbolUploadId, String ownerName, String appName) throws ApiException {
        ApiResponse<SymbolUploadsList200ResponseInner> localVarResp = symbolUploadsDeleteWithHttpInfo(symbolUploadId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a symbol upload by id for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;SymbolUploadsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolUploadsList200ResponseInner> symbolUploadsDeleteWithHttpInfo(String symbolUploadId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolUploadsDeleteValidateBeforeCall(symbolUploadId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<SymbolUploadsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a symbol upload by id for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsDeleteAsync(String symbolUploadId, String ownerName, String appName, final ApiCallback<SymbolUploadsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolUploadsDeleteValidateBeforeCall(symbolUploadId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<SymbolUploadsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolUploadsGet
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsGetCall(String symbolUploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}"
            .replace("{" + "symbol_upload_id" + "}", localVarApiClient.escapeString(symbolUploadId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolUploadsGetValidateBeforeCall(String symbolUploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolUploadId' is set
        if (symbolUploadId == null) {
            throw new ApiException("Missing the required parameter 'symbolUploadId' when calling symbolUploadsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolUploadsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolUploadsGet(Async)");
        }

        return symbolUploadsGetCall(symbolUploadId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets a symbol upload by id for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return SymbolUploadsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolUploadsList200ResponseInner symbolUploadsGet(String symbolUploadId, String ownerName, String appName) throws ApiException {
        ApiResponse<SymbolUploadsList200ResponseInner> localVarResp = symbolUploadsGetWithHttpInfo(symbolUploadId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a symbol upload by id for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;SymbolUploadsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolUploadsList200ResponseInner> symbolUploadsGetWithHttpInfo(String symbolUploadId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolUploadsGetValidateBeforeCall(symbolUploadId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<SymbolUploadsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a symbol upload by id for the specified application
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsGetAsync(String symbolUploadId, String ownerName, String appName, final ApiCallback<SymbolUploadsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolUploadsGetValidateBeforeCall(symbolUploadId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<SymbolUploadsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolUploadsGetLocation
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsGetLocationCall(String symbolUploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location"
            .replace("{" + "symbol_upload_id" + "}", localVarApiClient.escapeString(symbolUploadId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolUploadsGetLocationValidateBeforeCall(String symbolUploadId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolUploadId' is set
        if (symbolUploadId == null) {
            throw new ApiException("Missing the required parameter 'symbolUploadId' when calling symbolUploadsGetLocation(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolUploadsGetLocation(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolUploadsGetLocation(Async)");
        }

        return symbolUploadsGetLocationCall(symbolUploadId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the URL to download the symbol upload
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return SymbolUploadsGetLocation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolUploadsGetLocation200Response symbolUploadsGetLocation(String symbolUploadId, String ownerName, String appName) throws ApiException {
        ApiResponse<SymbolUploadsGetLocation200Response> localVarResp = symbolUploadsGetLocationWithHttpInfo(symbolUploadId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the URL to download the symbol upload
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;SymbolUploadsGetLocation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolUploadsGetLocation200Response> symbolUploadsGetLocationWithHttpInfo(String symbolUploadId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolUploadsGetLocationValidateBeforeCall(symbolUploadId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<SymbolUploadsGetLocation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the URL to download the symbol upload
     * @param symbolUploadId The ID of the symbol upload (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsGetLocationAsync(String symbolUploadId, String ownerName, String appName, final ApiCallback<SymbolUploadsGetLocation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolUploadsGetLocationValidateBeforeCall(symbolUploadId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<SymbolUploadsGetLocation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolUploadsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param top The maximum number of results to return. (optional, default to 30)
     * @param status Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)
     * @param symbolType The type of symbols (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsListCall(String ownerName, String appName, Long top, String status, String symbolType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbol_uploads"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (symbolType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol_type", symbolType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolUploadsListValidateBeforeCall(String ownerName, String appName, Long top, String status, String symbolType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolUploadsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolUploadsList(Async)");
        }

        return symbolUploadsListCall(ownerName, appName, top, status, symbolType, _callback);

    }

    /**
     * 
     * Gets a list of all uploads for the specified application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param top The maximum number of results to return. (optional, default to 30)
     * @param status Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)
     * @param symbolType The type of symbols (optional)
     * @return List&lt;SymbolUploadsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<SymbolUploadsList200ResponseInner> symbolUploadsList(String ownerName, String appName, Long top, String status, String symbolType) throws ApiException {
        ApiResponse<List<SymbolUploadsList200ResponseInner>> localVarResp = symbolUploadsListWithHttpInfo(ownerName, appName, top, status, symbolType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of all uploads for the specified application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param top The maximum number of results to return. (optional, default to 30)
     * @param status Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)
     * @param symbolType The type of symbols (optional)
     * @return ApiResponse&lt;List&lt;SymbolUploadsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SymbolUploadsList200ResponseInner>> symbolUploadsListWithHttpInfo(String ownerName, String appName, Long top, String status, String symbolType) throws ApiException {
        okhttp3.Call localVarCall = symbolUploadsListValidateBeforeCall(ownerName, appName, top, status, symbolType, null);
        Type localVarReturnType = new TypeToken<List<SymbolUploadsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of all uploads for the specified application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param top The maximum number of results to return. (optional, default to 30)
     * @param status Filter results by the current status of a symbol upload: * all: all states in the symbol upload process. Includes created, aborted, committed, processing, indexed and failed states * uploaded: all states after package is uploaded. Includes committed, processing, indexed and failed states * processed: symbol upload processing is completed. Includes indexed and failed states.  (optional)
     * @param symbolType The type of symbols (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolUploadsListAsync(String ownerName, String appName, Long top, String status, String symbolType, final ApiCallback<List<SymbolUploadsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolUploadsListValidateBeforeCall(ownerName, appName, top, status, symbolType, _callback);
        Type localVarReturnType = new TypeToken<List<SymbolUploadsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolsGet
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsGetCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolsGetValidateBeforeCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling symbolsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolsGet(Async)");
        }

        return symbolsGetCall(symbolId, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns a particular symbol by id (uuid) for the provided application
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return SymbolsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolsList200ResponseInner symbolsGet(String symbolId, String ownerName, String appName) throws ApiException {
        ApiResponse<SymbolsList200ResponseInner> localVarResp = symbolsGetWithHttpInfo(symbolId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a particular symbol by id (uuid) for the provided application
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;SymbolsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolsList200ResponseInner> symbolsGetWithHttpInfo(String symbolId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolsGetValidateBeforeCall(symbolId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<SymbolsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a particular symbol by id (uuid) for the provided application
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsGetAsync(String symbolId, String ownerName, String appName, final ApiCallback<SymbolsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolsGetValidateBeforeCall(symbolId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<SymbolsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolsGetLocation
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsGetLocationCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolsGetLocationValidateBeforeCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling symbolsGetLocation(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolsGetLocation(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolsGetLocation(Async)");
        }

        return symbolsGetLocationCall(symbolId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the URL to download the symbol
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return SymbolsGetLocation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolsGetLocation200Response symbolsGetLocation(String symbolId, String ownerName, String appName) throws ApiException {
        ApiResponse<SymbolsGetLocation200Response> localVarResp = symbolsGetLocationWithHttpInfo(symbolId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the URL to download the symbol
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;SymbolsGetLocation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolsGetLocation200Response> symbolsGetLocationWithHttpInfo(String symbolId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolsGetLocationValidateBeforeCall(symbolId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<SymbolsGetLocation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the URL to download the symbol
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsGetLocationAsync(String symbolId, String ownerName, String appName, final ApiCallback<SymbolsGetLocation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolsGetLocationValidateBeforeCall(symbolId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<SymbolsGetLocation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolsGetStatus
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsGetStatusCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolsGetStatusValidateBeforeCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling symbolsGetStatus(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolsGetStatus(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolsGetStatus(Async)");
        }

        return symbolsGetStatusCall(symbolId, ownerName, appName, _callback);

    }

    /**
     * 
     * Returns a particular symbol by id (uuid) for the provided application
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return SymbolsGetStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolsGetStatus200Response symbolsGetStatus(String symbolId, String ownerName, String appName) throws ApiException {
        ApiResponse<SymbolsGetStatus200Response> localVarResp = symbolsGetStatusWithHttpInfo(symbolId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a particular symbol by id (uuid) for the provided application
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;SymbolsGetStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolsGetStatus200Response> symbolsGetStatusWithHttpInfo(String symbolId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolsGetStatusValidateBeforeCall(symbolId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<SymbolsGetStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a particular symbol by id (uuid) for the provided application
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsGetStatusAsync(String symbolId, String ownerName, String appName, final ApiCallback<SymbolsGetStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolsGetStatusValidateBeforeCall(symbolId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<SymbolsGetStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolsIgnore
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsIgnoreCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore"
            .replace("{" + "symbol_id" + "}", localVarApiClient.escapeString(symbolId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolsIgnoreValidateBeforeCall(String symbolId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbolId' is set
        if (symbolId == null) {
            throw new ApiException("Missing the required parameter 'symbolId' when calling symbolsIgnore(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolsIgnore(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolsIgnore(Async)");
        }

        return symbolsIgnoreCall(symbolId, ownerName, appName, _callback);

    }

    /**
     * 
     * Marks a symbol by id (uuid) as ignored
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return SymbolsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public SymbolsList200ResponseInner symbolsIgnore(String symbolId, String ownerName, String appName) throws ApiException {
        ApiResponse<SymbolsList200ResponseInner> localVarResp = symbolsIgnoreWithHttpInfo(symbolId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Marks a symbol by id (uuid) as ignored
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;SymbolsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SymbolsList200ResponseInner> symbolsIgnoreWithHttpInfo(String symbolId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolsIgnoreValidateBeforeCall(symbolId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<SymbolsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Marks a symbol by id (uuid) as ignored
     * @param symbolId The ID of the symbol (uuid of the symbol) (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsIgnoreAsync(String symbolId, String ownerName, String appName, final ApiCallback<SymbolsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolsIgnoreValidateBeforeCall(symbolId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<SymbolsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for symbolsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/symbols"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call symbolsListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling symbolsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling symbolsList(Async)");
        }

        return symbolsListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Returns the list of all symbols for the provided application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;SymbolsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public List<SymbolsList200ResponseInner> symbolsList(String ownerName, String appName) throws ApiException {
        ApiResponse<List<SymbolsList200ResponseInner>> localVarResp = symbolsListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of all symbols for the provided application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;SymbolsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SymbolsList200ResponseInner>> symbolsListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = symbolsListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<SymbolsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of all symbols for the provided application
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call symbolsListAsync(String ownerName, String appName, final ApiCallback<List<SymbolsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = symbolsListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<SymbolsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
