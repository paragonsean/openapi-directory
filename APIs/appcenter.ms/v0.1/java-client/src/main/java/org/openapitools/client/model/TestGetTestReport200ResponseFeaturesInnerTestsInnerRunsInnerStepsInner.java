/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInnerStepExecutionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner {
  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private BigDecimal failed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  private BigDecimal skipped;

  public static final String SERIALIZED_NAME_STEP_EXECUTIONS = "stepExecutions";
  @SerializedName(SERIALIZED_NAME_STEP_EXECUTIONS)
  private List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInnerStepExecutionsInner> stepExecutions = new ArrayList<>();

  public static final String SERIALIZED_NAME_STEP_NAME = "stepName";
  @SerializedName(SERIALIZED_NAME_STEP_NAME)
  private String stepName;

  public static final String SERIALIZED_NAME_STEP_REPORT_URL = "step_report_url";
  @SerializedName(SERIALIZED_NAME_STEP_REPORT_URL)
  private String stepReportUrl;

  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner() {
  }

  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner failed(BigDecimal failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public BigDecimal getFailed() {
    return failed;
  }

  public void setFailed(BigDecimal failed) {
    this.failed = failed;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner skipped(BigDecimal skipped) {
    this.skipped = skipped;
    return this;
  }

  /**
   * Get skipped
   * @return skipped
   */
  @javax.annotation.Nullable
  public BigDecimal getSkipped() {
    return skipped;
  }

  public void setSkipped(BigDecimal skipped) {
    this.skipped = skipped;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner stepExecutions(List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInnerStepExecutionsInner> stepExecutions) {
    this.stepExecutions = stepExecutions;
    return this;
  }

  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner addStepExecutionsItem(TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInnerStepExecutionsInner stepExecutionsItem) {
    if (this.stepExecutions == null) {
      this.stepExecutions = new ArrayList<>();
    }
    this.stepExecutions.add(stepExecutionsItem);
    return this;
  }

  /**
   * Get stepExecutions
   * @return stepExecutions
   */
  @javax.annotation.Nullable
  public List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInnerStepExecutionsInner> getStepExecutions() {
    return stepExecutions;
  }

  public void setStepExecutions(List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInnerStepExecutionsInner> stepExecutions) {
    this.stepExecutions = stepExecutions;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner stepName(String stepName) {
    this.stepName = stepName;
    return this;
  }

  /**
   * Get stepName
   * @return stepName
   */
  @javax.annotation.Nullable
  public String getStepName() {
    return stepName;
  }

  public void setStepName(String stepName) {
    this.stepName = stepName;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner stepReportUrl(String stepReportUrl) {
    this.stepReportUrl = stepReportUrl;
    return this;
  }

  /**
   * Get stepReportUrl
   * @return stepReportUrl
   */
  @javax.annotation.Nullable
  public String getStepReportUrl() {
    return stepReportUrl;
  }

  public void setStepReportUrl(String stepReportUrl) {
    this.stepReportUrl = stepReportUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner = (TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner) o;
    return Objects.equals(this.failed, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.failed) &&
        Objects.equals(this.id, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.id) &&
        Objects.equals(this.skipped, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.skipped) &&
        Objects.equals(this.stepExecutions, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.stepExecutions) &&
        Objects.equals(this.stepName, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.stepName) &&
        Objects.equals(this.stepReportUrl, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.stepReportUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failed, id, skipped, stepExecutions, stepName, stepReportUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner {\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    stepExecutions: ").append(toIndentedString(stepExecutions)).append("\n");
    sb.append("    stepName: ").append(toIndentedString(stepName)).append("\n");
    sb.append("    stepReportUrl: ").append(toIndentedString(stepReportUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failed");
    openapiFields.add("id");
    openapiFields.add("skipped");
    openapiFields.add("stepExecutions");
    openapiFields.add("stepName");
    openapiFields.add("step_report_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner is not found in the empty JSON string", TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("stepExecutions") != null && !jsonObj.get("stepExecutions").isJsonNull()) {
        JsonArray jsonArraystepExecutions = jsonObj.getAsJsonArray("stepExecutions");
        if (jsonArraystepExecutions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stepExecutions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stepExecutions` to be an array in the JSON string but got `%s`", jsonObj.get("stepExecutions").toString()));
          }

          // validate the optional field `stepExecutions` (array)
          for (int i = 0; i < jsonArraystepExecutions.size(); i++) {
            TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInnerStepExecutionsInner.validateJsonElement(jsonArraystepExecutions.get(i));
          };
        }
      }
      if ((jsonObj.get("stepName") != null && !jsonObj.get("stepName").isJsonNull()) && !jsonObj.get("stepName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepName").toString()));
      }
      if ((jsonObj.get("step_report_url") != null && !jsonObj.get("step_report_url").isJsonNull()) && !jsonObj.get("step_report_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `step_report_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("step_report_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner>() {
           @Override
           public void write(JsonWriter out, TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner
   * @throws IOException if the JSON string is invalid with respect to TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner
   */
  public static TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.class);
  }

  /**
   * Convert an instance of TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

