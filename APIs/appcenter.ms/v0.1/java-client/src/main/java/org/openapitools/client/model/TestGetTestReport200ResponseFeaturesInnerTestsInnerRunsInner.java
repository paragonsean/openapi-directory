/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner {
  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private BigDecimal failed;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private BigDecimal number;

  public static final String SERIALIZED_NAME_REPORT_URL = "report_url";
  @SerializedName(SERIALIZED_NAME_REPORT_URL)
  private String reportUrl;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  private BigDecimal skipped;

  public static final String SERIALIZED_NAME_STEPS = "steps";
  @SerializedName(SERIALIZED_NAME_STEPS)
  private List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner> steps = new ArrayList<>();

  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner() {
  }

  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner failed(BigDecimal failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nullable
  public BigDecimal getFailed() {
    return failed;
  }

  public void setFailed(BigDecimal failed) {
    this.failed = failed;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner number(BigDecimal number) {
    this.number = number;
    return this;
  }

  /**
   * Get number
   * @return number
   */
  @javax.annotation.Nullable
  public BigDecimal getNumber() {
    return number;
  }

  public void setNumber(BigDecimal number) {
    this.number = number;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner reportUrl(String reportUrl) {
    this.reportUrl = reportUrl;
    return this;
  }

  /**
   * Get reportUrl
   * @return reportUrl
   */
  @javax.annotation.Nullable
  public String getReportUrl() {
    return reportUrl;
  }

  public void setReportUrl(String reportUrl) {
    this.reportUrl = reportUrl;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner skipped(BigDecimal skipped) {
    this.skipped = skipped;
    return this;
  }

  /**
   * Get skipped
   * @return skipped
   */
  @javax.annotation.Nullable
  public BigDecimal getSkipped() {
    return skipped;
  }

  public void setSkipped(BigDecimal skipped) {
    this.skipped = skipped;
  }


  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner steps(List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner> steps) {
    this.steps = steps;
    return this;
  }

  public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner addStepsItem(TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner stepsItem) {
    if (this.steps == null) {
      this.steps = new ArrayList<>();
    }
    this.steps.add(stepsItem);
    return this;
  }

  /**
   * Get steps
   * @return steps
   */
  @javax.annotation.Nullable
  public List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner> getSteps() {
    return steps;
  }

  public void setSteps(List<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner> steps) {
    this.steps = steps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner = (TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner) o;
    return Objects.equals(this.failed, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.failed) &&
        Objects.equals(this.id, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.id) &&
        Objects.equals(this.number, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.number) &&
        Objects.equals(this.reportUrl, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.reportUrl) &&
        Objects.equals(this.skipped, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.skipped) &&
        Objects.equals(this.steps, testGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.steps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failed, id, number, reportUrl, skipped, steps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner {\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    reportUrl: ").append(toIndentedString(reportUrl)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failed");
    openapiFields.add("id");
    openapiFields.add("number");
    openapiFields.add("report_url");
    openapiFields.add("skipped");
    openapiFields.add("steps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner is not found in the empty JSON string", TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("report_url") != null && !jsonObj.get("report_url").isJsonNull()) && !jsonObj.get("report_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_url").toString()));
      }
      if (jsonObj.get("steps") != null && !jsonObj.get("steps").isJsonNull()) {
        JsonArray jsonArraysteps = jsonObj.getAsJsonArray("steps");
        if (jsonArraysteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("steps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `steps` to be an array in the JSON string but got `%s`", jsonObj.get("steps").toString()));
          }

          // validate the optional field `steps` (array)
          for (int i = 0; i < jsonArraysteps.size(); i++) {
            TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInnerStepsInner.validateJsonElement(jsonArraysteps.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner>() {
           @Override
           public void write(JsonWriter out, TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner
   * @throws IOException if the JSON string is invalid with respect to TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner
   */
  public static TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner.class);
  }

  /**
   * Convert an instance of TestGetTestReport200ResponseFeaturesInnerTestsInnerRunsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

