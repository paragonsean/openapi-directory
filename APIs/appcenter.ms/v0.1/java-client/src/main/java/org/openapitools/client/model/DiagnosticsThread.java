/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiagnosticsException;
import org.openapitools.client.model.DiagnosticsExceptionFramesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * a thread representation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticsThread {
  public static final String SERIALIZED_NAME_CRASHED = "crashed";
  @SerializedName(SERIALIZED_NAME_CRASHED)
  private Boolean crashed;

  public static final String SERIALIZED_NAME_EXCEPTION = "exception";
  @SerializedName(SERIALIZED_NAME_EXCEPTION)
  private DiagnosticsException exception;

  public static final String SERIALIZED_NAME_FRAMES = "frames";
  @SerializedName(SERIALIZED_NAME_FRAMES)
  private List<DiagnosticsExceptionFramesInner> frames = new ArrayList<>();

  /**
   * SDK/Platform this thread is beeing generated from
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
  public enum PlatformEnum {
    IOS("ios"),
    
    ANDROID("android"),
    
    XAMARIN("xamarin"),
    
    REACT_NATIVE("react-native"),
    
    NDK("ndk"),
    
    UNITY("unity"),
    
    OTHER("other");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformEnum platform;

  public static final String SERIALIZED_NAME_RELEVANT = "relevant";
  @SerializedName(SERIALIZED_NAME_RELEVANT)
  private Boolean relevant;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public DiagnosticsThread() {
  }

  public DiagnosticsThread crashed(Boolean crashed) {
    this.crashed = crashed;
    return this;
  }

  /**
   * True if this thread crashed
   * @return crashed
   */
  @javax.annotation.Nullable
  public Boolean getCrashed() {
    return crashed;
  }

  public void setCrashed(Boolean crashed) {
    this.crashed = crashed;
  }


  public DiagnosticsThread exception(DiagnosticsException exception) {
    this.exception = exception;
    return this;
  }

  /**
   * Get exception
   * @return exception
   */
  @javax.annotation.Nullable
  public DiagnosticsException getException() {
    return exception;
  }

  public void setException(DiagnosticsException exception) {
    this.exception = exception;
  }


  public DiagnosticsThread frames(List<DiagnosticsExceptionFramesInner> frames) {
    this.frames = frames;
    return this;
  }

  public DiagnosticsThread addFramesItem(DiagnosticsExceptionFramesInner framesItem) {
    if (this.frames == null) {
      this.frames = new ArrayList<>();
    }
    this.frames.add(framesItem);
    return this;
  }

  /**
   * frames of that thread
   * @return frames
   */
  @javax.annotation.Nonnull
  public List<DiagnosticsExceptionFramesInner> getFrames() {
    return frames;
  }

  public void setFrames(List<DiagnosticsExceptionFramesInner> frames) {
    this.frames = frames;
  }


  public DiagnosticsThread platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

  /**
   * SDK/Platform this thread is beeing generated from
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformEnum getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }


  public DiagnosticsThread relevant(Boolean relevant) {
    this.relevant = relevant;
    return this;
  }

  /**
   * Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true
   * @return relevant
   */
  @javax.annotation.Nullable
  public Boolean getRelevant() {
    return relevant;
  }

  public void setRelevant(Boolean relevant) {
    this.relevant = relevant;
  }


  public DiagnosticsThread title(String title) {
    this.title = title;
    return this;
  }

  /**
   * name of the thread
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticsThread diagnosticsThread = (DiagnosticsThread) o;
    return Objects.equals(this.crashed, diagnosticsThread.crashed) &&
        Objects.equals(this.exception, diagnosticsThread.exception) &&
        Objects.equals(this.frames, diagnosticsThread.frames) &&
        Objects.equals(this.platform, diagnosticsThread.platform) &&
        Objects.equals(this.relevant, diagnosticsThread.relevant) &&
        Objects.equals(this.title, diagnosticsThread.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crashed, exception, frames, platform, relevant, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticsThread {\n");
    sb.append("    crashed: ").append(toIndentedString(crashed)).append("\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    frames: ").append(toIndentedString(frames)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    relevant: ").append(toIndentedString(relevant)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crashed");
    openapiFields.add("exception");
    openapiFields.add("frames");
    openapiFields.add("platform");
    openapiFields.add("relevant");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("frames");
    openapiRequiredFields.add("title");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticsThread
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticsThread.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticsThread is not found in the empty JSON string", DiagnosticsThread.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticsThread.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticsThread` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiagnosticsThread.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `exception`
      if (jsonObj.get("exception") != null && !jsonObj.get("exception").isJsonNull()) {
        DiagnosticsException.validateJsonElement(jsonObj.get("exception"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("frames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `frames` to be an array in the JSON string but got `%s`", jsonObj.get("frames").toString()));
      }

      JsonArray jsonArrayframes = jsonObj.getAsJsonArray("frames");
      // validate the required field `frames` (array)
      for (int i = 0; i < jsonArrayframes.size(); i++) {
        DiagnosticsExceptionFramesInner.validateJsonElement(jsonArrayframes.get(i));
      };
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformEnum.validateJsonElement(jsonObj.get("platform"));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticsThread.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticsThread' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticsThread> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticsThread.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticsThread>() {
           @Override
           public void write(JsonWriter out, DiagnosticsThread value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticsThread read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticsThread given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticsThread
   * @throws IOException if the JSON string is invalid with respect to DiagnosticsThread
   */
  public static DiagnosticsThread fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticsThread.class);
  }

  /**
   * Convert an instance of DiagnosticsThread to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

