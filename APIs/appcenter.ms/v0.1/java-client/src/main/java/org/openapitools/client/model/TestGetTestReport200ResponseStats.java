/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestGetTestReport200ResponseStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestGetTestReport200ResponseStats {
  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private Map<String, String> artifacts = new HashMap<>();

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private BigDecimal devices;

  public static final String SERIALIZED_NAME_DEVICES_FAILED = "devices_failed";
  @SerializedName(SERIALIZED_NAME_DEVICES_FAILED)
  private BigDecimal devicesFailed;

  public static final String SERIALIZED_NAME_DEVICES_FINISHED = "devices_finished";
  @SerializedName(SERIALIZED_NAME_DEVICES_FINISHED)
  private BigDecimal devicesFinished;

  public static final String SERIALIZED_NAME_DEVICES_NOT_RUNNED = "devices_not_runned";
  @SerializedName(SERIALIZED_NAME_DEVICES_NOT_RUNNED)
  private BigDecimal devicesNotRunned;

  public static final String SERIALIZED_NAME_DEVICES_SKIPPED = "devices_skipped";
  @SerializedName(SERIALIZED_NAME_DEVICES_SKIPPED)
  private BigDecimal devicesSkipped;

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private BigDecimal failed;

  public static final String SERIALIZED_NAME_FILESIZE = "filesize";
  @SerializedName(SERIALIZED_NAME_FILESIZE)
  private BigDecimal filesize;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private BigDecimal os;

  public static final String SERIALIZED_NAME_PASSED = "passed";
  @SerializedName(SERIALIZED_NAME_PASSED)
  private BigDecimal passed;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  private BigDecimal skipped;

  public static final String SERIALIZED_NAME_STEP_COUNT = "step_count";
  @SerializedName(SERIALIZED_NAME_STEP_COUNT)
  private BigDecimal stepCount;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private BigDecimal total;

  public static final String SERIALIZED_NAME_TOTAL_DEVICE_MINUTES = "totalDeviceMinutes";
  @SerializedName(SERIALIZED_NAME_TOTAL_DEVICE_MINUTES)
  private BigDecimal totalDeviceMinutes;

  public TestGetTestReport200ResponseStats() {
  }

  public TestGetTestReport200ResponseStats artifacts(Map<String, String> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public TestGetTestReport200ResponseStats putArtifactsItem(String key, String artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new HashMap<>();
    }
    this.artifacts.put(key, artifactsItem);
    return this;
  }

  /**
   * Get artifacts
   * @return artifacts
   */
  @javax.annotation.Nullable
  public Map<String, String> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(Map<String, String> artifacts) {
    this.artifacts = artifacts;
  }


  public TestGetTestReport200ResponseStats devices(BigDecimal devices) {
    this.devices = devices;
    return this;
  }

  /**
   * Get devices
   * @return devices
   */
  @javax.annotation.Nonnull
  public BigDecimal getDevices() {
    return devices;
  }

  public void setDevices(BigDecimal devices) {
    this.devices = devices;
  }


  public TestGetTestReport200ResponseStats devicesFailed(BigDecimal devicesFailed) {
    this.devicesFailed = devicesFailed;
    return this;
  }

  /**
   * Get devicesFailed
   * @return devicesFailed
   */
  @javax.annotation.Nonnull
  public BigDecimal getDevicesFailed() {
    return devicesFailed;
  }

  public void setDevicesFailed(BigDecimal devicesFailed) {
    this.devicesFailed = devicesFailed;
  }


  public TestGetTestReport200ResponseStats devicesFinished(BigDecimal devicesFinished) {
    this.devicesFinished = devicesFinished;
    return this;
  }

  /**
   * Get devicesFinished
   * @return devicesFinished
   */
  @javax.annotation.Nonnull
  public BigDecimal getDevicesFinished() {
    return devicesFinished;
  }

  public void setDevicesFinished(BigDecimal devicesFinished) {
    this.devicesFinished = devicesFinished;
  }


  public TestGetTestReport200ResponseStats devicesNotRunned(BigDecimal devicesNotRunned) {
    this.devicesNotRunned = devicesNotRunned;
    return this;
  }

  /**
   * Get devicesNotRunned
   * @return devicesNotRunned
   */
  @javax.annotation.Nonnull
  public BigDecimal getDevicesNotRunned() {
    return devicesNotRunned;
  }

  public void setDevicesNotRunned(BigDecimal devicesNotRunned) {
    this.devicesNotRunned = devicesNotRunned;
  }


  public TestGetTestReport200ResponseStats devicesSkipped(BigDecimal devicesSkipped) {
    this.devicesSkipped = devicesSkipped;
    return this;
  }

  /**
   * Get devicesSkipped
   * @return devicesSkipped
   */
  @javax.annotation.Nonnull
  public BigDecimal getDevicesSkipped() {
    return devicesSkipped;
  }

  public void setDevicesSkipped(BigDecimal devicesSkipped) {
    this.devicesSkipped = devicesSkipped;
  }


  public TestGetTestReport200ResponseStats failed(BigDecimal failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Get failed
   * @return failed
   */
  @javax.annotation.Nonnull
  public BigDecimal getFailed() {
    return failed;
  }

  public void setFailed(BigDecimal failed) {
    this.failed = failed;
  }


  public TestGetTestReport200ResponseStats filesize(BigDecimal filesize) {
    this.filesize = filesize;
    return this;
  }

  /**
   * Get filesize
   * @return filesize
   */
  @javax.annotation.Nonnull
  public BigDecimal getFilesize() {
    return filesize;
  }

  public void setFilesize(BigDecimal filesize) {
    this.filesize = filesize;
  }


  public TestGetTestReport200ResponseStats os(BigDecimal os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nonnull
  public BigDecimal getOs() {
    return os;
  }

  public void setOs(BigDecimal os) {
    this.os = os;
  }


  public TestGetTestReport200ResponseStats passed(BigDecimal passed) {
    this.passed = passed;
    return this;
  }

  /**
   * Get passed
   * @return passed
   */
  @javax.annotation.Nonnull
  public BigDecimal getPassed() {
    return passed;
  }

  public void setPassed(BigDecimal passed) {
    this.passed = passed;
  }


  public TestGetTestReport200ResponseStats skipped(BigDecimal skipped) {
    this.skipped = skipped;
    return this;
  }

  /**
   * Get skipped
   * @return skipped
   */
  @javax.annotation.Nonnull
  public BigDecimal getSkipped() {
    return skipped;
  }

  public void setSkipped(BigDecimal skipped) {
    this.skipped = skipped;
  }


  public TestGetTestReport200ResponseStats stepCount(BigDecimal stepCount) {
    this.stepCount = stepCount;
    return this;
  }

  /**
   * Get stepCount
   * @return stepCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getStepCount() {
    return stepCount;
  }

  public void setStepCount(BigDecimal stepCount) {
    this.stepCount = stepCount;
  }


  public TestGetTestReport200ResponseStats total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotal() {
    return total;
  }

  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  public TestGetTestReport200ResponseStats totalDeviceMinutes(BigDecimal totalDeviceMinutes) {
    this.totalDeviceMinutes = totalDeviceMinutes;
    return this;
  }

  /**
   * Get totalDeviceMinutes
   * @return totalDeviceMinutes
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalDeviceMinutes() {
    return totalDeviceMinutes;
  }

  public void setTotalDeviceMinutes(BigDecimal totalDeviceMinutes) {
    this.totalDeviceMinutes = totalDeviceMinutes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestGetTestReport200ResponseStats testGetTestReport200ResponseStats = (TestGetTestReport200ResponseStats) o;
    return Objects.equals(this.artifacts, testGetTestReport200ResponseStats.artifacts) &&
        Objects.equals(this.devices, testGetTestReport200ResponseStats.devices) &&
        Objects.equals(this.devicesFailed, testGetTestReport200ResponseStats.devicesFailed) &&
        Objects.equals(this.devicesFinished, testGetTestReport200ResponseStats.devicesFinished) &&
        Objects.equals(this.devicesNotRunned, testGetTestReport200ResponseStats.devicesNotRunned) &&
        Objects.equals(this.devicesSkipped, testGetTestReport200ResponseStats.devicesSkipped) &&
        Objects.equals(this.failed, testGetTestReport200ResponseStats.failed) &&
        Objects.equals(this.filesize, testGetTestReport200ResponseStats.filesize) &&
        Objects.equals(this.os, testGetTestReport200ResponseStats.os) &&
        Objects.equals(this.passed, testGetTestReport200ResponseStats.passed) &&
        Objects.equals(this.skipped, testGetTestReport200ResponseStats.skipped) &&
        Objects.equals(this.stepCount, testGetTestReport200ResponseStats.stepCount) &&
        Objects.equals(this.total, testGetTestReport200ResponseStats.total) &&
        Objects.equals(this.totalDeviceMinutes, testGetTestReport200ResponseStats.totalDeviceMinutes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifacts, devices, devicesFailed, devicesFinished, devicesNotRunned, devicesSkipped, failed, filesize, os, passed, skipped, stepCount, total, totalDeviceMinutes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestGetTestReport200ResponseStats {\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    devicesFailed: ").append(toIndentedString(devicesFailed)).append("\n");
    sb.append("    devicesFinished: ").append(toIndentedString(devicesFinished)).append("\n");
    sb.append("    devicesNotRunned: ").append(toIndentedString(devicesNotRunned)).append("\n");
    sb.append("    devicesSkipped: ").append(toIndentedString(devicesSkipped)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    filesize: ").append(toIndentedString(filesize)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    passed: ").append(toIndentedString(passed)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    stepCount: ").append(toIndentedString(stepCount)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDeviceMinutes: ").append(toIndentedString(totalDeviceMinutes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifacts");
    openapiFields.add("devices");
    openapiFields.add("devices_failed");
    openapiFields.add("devices_finished");
    openapiFields.add("devices_not_runned");
    openapiFields.add("devices_skipped");
    openapiFields.add("failed");
    openapiFields.add("filesize");
    openapiFields.add("os");
    openapiFields.add("passed");
    openapiFields.add("skipped");
    openapiFields.add("step_count");
    openapiFields.add("total");
    openapiFields.add("totalDeviceMinutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("devices");
    openapiRequiredFields.add("devices_failed");
    openapiRequiredFields.add("devices_finished");
    openapiRequiredFields.add("devices_not_runned");
    openapiRequiredFields.add("devices_skipped");
    openapiRequiredFields.add("failed");
    openapiRequiredFields.add("filesize");
    openapiRequiredFields.add("os");
    openapiRequiredFields.add("passed");
    openapiRequiredFields.add("skipped");
    openapiRequiredFields.add("step_count");
    openapiRequiredFields.add("total");
    openapiRequiredFields.add("totalDeviceMinutes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestGetTestReport200ResponseStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestGetTestReport200ResponseStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestGetTestReport200ResponseStats is not found in the empty JSON string", TestGetTestReport200ResponseStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestGetTestReport200ResponseStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestGetTestReport200ResponseStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestGetTestReport200ResponseStats.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestGetTestReport200ResponseStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestGetTestReport200ResponseStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestGetTestReport200ResponseStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestGetTestReport200ResponseStats.class));

       return (TypeAdapter<T>) new TypeAdapter<TestGetTestReport200ResponseStats>() {
           @Override
           public void write(JsonWriter out, TestGetTestReport200ResponseStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestGetTestReport200ResponseStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestGetTestReport200ResponseStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestGetTestReport200ResponseStats
   * @throws IOException if the JSON string is invalid with respect to TestGetTestReport200ResponseStats
   */
  public static TestGetTestReport200ResponseStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestGetTestReport200ResponseStats.class);
  }

  /**
   * Convert an instance of TestGetTestReport200ResponseStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

