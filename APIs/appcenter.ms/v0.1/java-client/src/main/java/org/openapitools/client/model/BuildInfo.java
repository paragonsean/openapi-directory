/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains metadata about the build that produced the release being uploaded
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildInfo {
  public static final String SERIALIZED_NAME_BRANCH_NAME = "branch_name";
  @SerializedName(SERIALIZED_NAME_BRANCH_NAME)
  private String branchName;

  public static final String SERIALIZED_NAME_COMMIT_HASH = "commit_hash";
  @SerializedName(SERIALIZED_NAME_COMMIT_HASH)
  private String commitHash;

  public static final String SERIALIZED_NAME_COMMIT_MESSAGE = "commit_message";
  @SerializedName(SERIALIZED_NAME_COMMIT_MESSAGE)
  private String commitMessage;

  public BuildInfo() {
  }

  public BuildInfo branchName(String branchName) {
    this.branchName = branchName;
    return this;
  }

  /**
   * The branch name of the build producing the release
   * @return branchName
   */
  @javax.annotation.Nullable
  public String getBranchName() {
    return branchName;
  }

  public void setBranchName(String branchName) {
    this.branchName = branchName;
  }


  public BuildInfo commitHash(String commitHash) {
    this.commitHash = commitHash;
    return this;
  }

  /**
   * The commit hash of the build producing the release
   * @return commitHash
   */
  @javax.annotation.Nullable
  public String getCommitHash() {
    return commitHash;
  }

  public void setCommitHash(String commitHash) {
    this.commitHash = commitHash;
  }


  public BuildInfo commitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
    return this;
  }

  /**
   * The commit message of the build producing the release
   * @return commitMessage
   */
  @javax.annotation.Nullable
  public String getCommitMessage() {
    return commitMessage;
  }

  public void setCommitMessage(String commitMessage) {
    this.commitMessage = commitMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildInfo buildInfo = (BuildInfo) o;
    return Objects.equals(this.branchName, buildInfo.branchName) &&
        Objects.equals(this.commitHash, buildInfo.commitHash) &&
        Objects.equals(this.commitMessage, buildInfo.commitMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branchName, commitHash, commitMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildInfo {\n");
    sb.append("    branchName: ").append(toIndentedString(branchName)).append("\n");
    sb.append("    commitHash: ").append(toIndentedString(commitHash)).append("\n");
    sb.append("    commitMessage: ").append(toIndentedString(commitMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branch_name");
    openapiFields.add("commit_hash");
    openapiFields.add("commit_message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildInfo is not found in the empty JSON string", BuildInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branch_name") != null && !jsonObj.get("branch_name").isJsonNull()) && !jsonObj.get("branch_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch_name").toString()));
      }
      if ((jsonObj.get("commit_hash") != null && !jsonObj.get("commit_hash").isJsonNull()) && !jsonObj.get("commit_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_hash").toString()));
      }
      if ((jsonObj.get("commit_message") != null && !jsonObj.get("commit_message").isJsonNull()) && !jsonObj.get("commit_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildInfo>() {
           @Override
           public void write(JsonWriter out, BuildInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildInfo
   * @throws IOException if the JSON string is invalid with respect to BuildInfo
   */
  public static BuildInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildInfo.class);
  }

  /**
   * Convert an instance of BuildInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

