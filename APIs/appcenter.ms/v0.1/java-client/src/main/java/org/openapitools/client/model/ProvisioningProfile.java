/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing information about an iOS provisioning profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisioningProfile {
  public static final String SERIALIZED_NAME_APPLICATION_IDENTIFIER = "application_identifier";
  @SerializedName(SERIALIZED_NAME_APPLICATION_IDENTIFIER)
  private String applicationIdentifier;

  public static final String SERIALIZED_NAME_EXPIRED_AT = "expired_at";
  @SerializedName(SERIALIZED_NAME_EXPIRED_AT)
  private String expiredAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets profileType
   */
  @JsonAdapter(ProfileTypeEnum.Adapter.class)
  public enum ProfileTypeEnum {
    ADHOC("adhoc"),
    
    ENTERPRISE("enterprise"),
    
    OTHER("other");

    private String value;

    ProfileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProfileTypeEnum fromValue(String value) {
      for (ProfileTypeEnum b : ProfileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProfileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProfileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProfileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProfileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProfileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROFILE_TYPE = "profile_type";
  @SerializedName(SERIALIZED_NAME_PROFILE_TYPE)
  private ProfileTypeEnum profileType;

  public static final String SERIALIZED_NAME_TEAM_IDENTIFIER = "team_identifier";
  @SerializedName(SERIALIZED_NAME_TEAM_IDENTIFIER)
  private String teamIdentifier;

  public static final String SERIALIZED_NAME_UDIDS = "udids";
  @SerializedName(SERIALIZED_NAME_UDIDS)
  private List<String> udids = new ArrayList<>();

  public ProvisioningProfile() {
  }

  public ProvisioningProfile applicationIdentifier(String applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
    return this;
  }

  /**
   * The application identifier.
   * @return applicationIdentifier
   */
  @javax.annotation.Nonnull
  public String getApplicationIdentifier() {
    return applicationIdentifier;
  }

  public void setApplicationIdentifier(String applicationIdentifier) {
    this.applicationIdentifier = applicationIdentifier;
  }


  public ProvisioningProfile expiredAt(String expiredAt) {
    this.expiredAt = expiredAt;
    return this;
  }

  /**
   * The profile&#39;s expiration date in RFC 3339 format, i.e. 2017-07-21T17:32:28Z
   * @return expiredAt
   */
  @javax.annotation.Nonnull
  public String getExpiredAt() {
    return expiredAt;
  }

  public void setExpiredAt(String expiredAt) {
    this.expiredAt = expiredAt;
  }


  public ProvisioningProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the provisioning profile.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProvisioningProfile profileType(ProfileTypeEnum profileType) {
    this.profileType = profileType;
    return this;
  }

  /**
   * Get profileType
   * @return profileType
   */
  @javax.annotation.Nonnull
  public ProfileTypeEnum getProfileType() {
    return profileType;
  }

  public void setProfileType(ProfileTypeEnum profileType) {
    this.profileType = profileType;
  }


  public ProvisioningProfile teamIdentifier(String teamIdentifier) {
    this.teamIdentifier = teamIdentifier;
    return this;
  }

  /**
   * The team identifier.
   * @return teamIdentifier
   */
  @javax.annotation.Nonnull
  public String getTeamIdentifier() {
    return teamIdentifier;
  }

  public void setTeamIdentifier(String teamIdentifier) {
    this.teamIdentifier = teamIdentifier;
  }


  public ProvisioningProfile udids(List<String> udids) {
    this.udids = udids;
    return this;
  }

  public ProvisioningProfile addUdidsItem(String udidsItem) {
    if (this.udids == null) {
      this.udids = new ArrayList<>();
    }
    this.udids.add(udidsItem);
    return this;
  }

  /**
   * Get udids
   * @return udids
   */
  @javax.annotation.Nullable
  public List<String> getUdids() {
    return udids;
  }

  public void setUdids(List<String> udids) {
    this.udids = udids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisioningProfile provisioningProfile = (ProvisioningProfile) o;
    return Objects.equals(this.applicationIdentifier, provisioningProfile.applicationIdentifier) &&
        Objects.equals(this.expiredAt, provisioningProfile.expiredAt) &&
        Objects.equals(this.name, provisioningProfile.name) &&
        Objects.equals(this.profileType, provisioningProfile.profileType) &&
        Objects.equals(this.teamIdentifier, provisioningProfile.teamIdentifier) &&
        Objects.equals(this.udids, provisioningProfile.udids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationIdentifier, expiredAt, name, profileType, teamIdentifier, udids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisioningProfile {\n");
    sb.append("    applicationIdentifier: ").append(toIndentedString(applicationIdentifier)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    profileType: ").append(toIndentedString(profileType)).append("\n");
    sb.append("    teamIdentifier: ").append(toIndentedString(teamIdentifier)).append("\n");
    sb.append("    udids: ").append(toIndentedString(udids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application_identifier");
    openapiFields.add("expired_at");
    openapiFields.add("name");
    openapiFields.add("profile_type");
    openapiFields.add("team_identifier");
    openapiFields.add("udids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("application_identifier");
    openapiRequiredFields.add("expired_at");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("profile_type");
    openapiRequiredFields.add("team_identifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisioningProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisioningProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisioningProfile is not found in the empty JSON string", ProvisioningProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisioningProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisioningProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProvisioningProfile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("application_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_identifier").toString()));
      }
      if (!jsonObj.get("expired_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expired_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expired_at").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("profile_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_type").toString()));
      }
      // validate the required field `profile_type`
      ProfileTypeEnum.validateJsonElement(jsonObj.get("profile_type"));
      if (!jsonObj.get("team_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_identifier").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("udids") != null && !jsonObj.get("udids").isJsonNull() && !jsonObj.get("udids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `udids` to be an array in the JSON string but got `%s`", jsonObj.get("udids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisioningProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisioningProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisioningProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisioningProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisioningProfile>() {
           @Override
           public void write(JsonWriter out, ProvisioningProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisioningProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisioningProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisioningProfile
   * @throws IOException if the JSON string is invalid with respect to ProvisioningProfile
   */
  public static ProvisioningProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisioningProfile.class);
  }

  /**
   * Convert an instance of ProvisioningProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

