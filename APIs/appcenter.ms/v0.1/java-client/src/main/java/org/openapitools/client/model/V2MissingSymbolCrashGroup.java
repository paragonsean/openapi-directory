/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * missing symbol crash group object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V2MissingSymbolCrashGroup {
  public static final String SERIALIZED_NAME_APP_BUILD = "app_build";
  @SerializedName(SERIALIZED_NAME_APP_BUILD)
  private String appBuild;

  public static final String SERIALIZED_NAME_APP_ID = "app_id";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_VER = "app_ver";
  @SerializedName(SERIALIZED_NAME_APP_VER)
  private String appVer;

  public static final String SERIALIZED_NAME_CRASH_COUNT = "crash_count";
  @SerializedName(SERIALIZED_NAME_CRASH_COUNT)
  private Integer crashCount;

  public static final String SERIALIZED_NAME_ERROR_COUNT = "error_count";
  @SerializedName(SERIALIZED_NAME_ERROR_COUNT)
  private Integer errorCount;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_MISSING_SYMBOLS = "missing_symbols";
  @SerializedName(SERIALIZED_NAME_MISSING_SYMBOLS)
  private List<MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner> missingSymbols = new ArrayList<>();

  /**
   * group status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    PENDING("pending"),
    
    CLOSED("closed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SYMBOL_GROUP_ID = "symbol_group_id";
  @SerializedName(SERIALIZED_NAME_SYMBOL_GROUP_ID)
  private String symbolGroupId;

  public V2MissingSymbolCrashGroup() {
  }

  public V2MissingSymbolCrashGroup appBuild(String appBuild) {
    this.appBuild = appBuild;
    return this;
  }

  /**
   * application build
   * @return appBuild
   */
  @javax.annotation.Nonnull
  public String getAppBuild() {
    return appBuild;
  }

  public void setAppBuild(String appBuild) {
    this.appBuild = appBuild;
  }


  public V2MissingSymbolCrashGroup appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * application id
   * @return appId
   */
  @javax.annotation.Nonnull
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public V2MissingSymbolCrashGroup appVer(String appVer) {
    this.appVer = appVer;
    return this;
  }

  /**
   * application version
   * @return appVer
   */
  @javax.annotation.Nonnull
  public String getAppVer() {
    return appVer;
  }

  public void setAppVer(String appVer) {
    this.appVer = appVer;
  }


  public V2MissingSymbolCrashGroup crashCount(Integer crashCount) {
    this.crashCount = crashCount;
    return this;
  }

  /**
   * number of crashes that belong to this group
   * @return crashCount
   */
  @javax.annotation.Nullable
  public Integer getCrashCount() {
    return crashCount;
  }

  public void setCrashCount(Integer crashCount) {
    this.crashCount = crashCount;
  }


  public V2MissingSymbolCrashGroup errorCount(Integer errorCount) {
    this.errorCount = errorCount;
    return this;
  }

  /**
   * number of errors that belong to this group
   * @return errorCount
   */
  @javax.annotation.Nullable
  public Integer getErrorCount() {
    return errorCount;
  }

  public void setErrorCount(Integer errorCount) {
    this.errorCount = errorCount;
  }


  public V2MissingSymbolCrashGroup lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * last update date for the group
   * @return lastModified
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public V2MissingSymbolCrashGroup missingSymbols(List<MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner> missingSymbols) {
    this.missingSymbols = missingSymbols;
    return this;
  }

  public V2MissingSymbolCrashGroup addMissingSymbolsItem(MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner missingSymbolsItem) {
    if (this.missingSymbols == null) {
      this.missingSymbols = new ArrayList<>();
    }
    this.missingSymbols.add(missingSymbolsItem);
    return this;
  }

  /**
   * list of missing symbols
   * @return missingSymbols
   */
  @javax.annotation.Nonnull
  public List<MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner> getMissingSymbols() {
    return missingSymbols;
  }

  public void setMissingSymbols(List<MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner> missingSymbols) {
    this.missingSymbols = missingSymbols;
  }


  public V2MissingSymbolCrashGroup status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * group status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public V2MissingSymbolCrashGroup symbolGroupId(String symbolGroupId) {
    this.symbolGroupId = symbolGroupId;
    return this;
  }

  /**
   * id of the symbol group
   * @return symbolGroupId
   */
  @javax.annotation.Nonnull
  public String getSymbolGroupId() {
    return symbolGroupId;
  }

  public void setSymbolGroupId(String symbolGroupId) {
    this.symbolGroupId = symbolGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2MissingSymbolCrashGroup v2MissingSymbolCrashGroup = (V2MissingSymbolCrashGroup) o;
    return Objects.equals(this.appBuild, v2MissingSymbolCrashGroup.appBuild) &&
        Objects.equals(this.appId, v2MissingSymbolCrashGroup.appId) &&
        Objects.equals(this.appVer, v2MissingSymbolCrashGroup.appVer) &&
        Objects.equals(this.crashCount, v2MissingSymbolCrashGroup.crashCount) &&
        Objects.equals(this.errorCount, v2MissingSymbolCrashGroup.errorCount) &&
        Objects.equals(this.lastModified, v2MissingSymbolCrashGroup.lastModified) &&
        Objects.equals(this.missingSymbols, v2MissingSymbolCrashGroup.missingSymbols) &&
        Objects.equals(this.status, v2MissingSymbolCrashGroup.status) &&
        Objects.equals(this.symbolGroupId, v2MissingSymbolCrashGroup.symbolGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appBuild, appId, appVer, crashCount, errorCount, lastModified, missingSymbols, status, symbolGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2MissingSymbolCrashGroup {\n");
    sb.append("    appBuild: ").append(toIndentedString(appBuild)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appVer: ").append(toIndentedString(appVer)).append("\n");
    sb.append("    crashCount: ").append(toIndentedString(crashCount)).append("\n");
    sb.append("    errorCount: ").append(toIndentedString(errorCount)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    missingSymbols: ").append(toIndentedString(missingSymbols)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    symbolGroupId: ").append(toIndentedString(symbolGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_build");
    openapiFields.add("app_id");
    openapiFields.add("app_ver");
    openapiFields.add("crash_count");
    openapiFields.add("error_count");
    openapiFields.add("last_modified");
    openapiFields.add("missing_symbols");
    openapiFields.add("status");
    openapiFields.add("symbol_group_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_build");
    openapiRequiredFields.add("app_id");
    openapiRequiredFields.add("app_ver");
    openapiRequiredFields.add("last_modified");
    openapiRequiredFields.add("missing_symbols");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("symbol_group_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V2MissingSymbolCrashGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V2MissingSymbolCrashGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V2MissingSymbolCrashGroup is not found in the empty JSON string", V2MissingSymbolCrashGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V2MissingSymbolCrashGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V2MissingSymbolCrashGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : V2MissingSymbolCrashGroup.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_build").toString()));
      }
      if (!jsonObj.get("app_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_id").toString()));
      }
      if (!jsonObj.get("app_ver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_ver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_ver").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("missing_symbols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `missing_symbols` to be an array in the JSON string but got `%s`", jsonObj.get("missing_symbols").toString()));
      }

      JsonArray jsonArraymissingSymbols = jsonObj.getAsJsonArray("missing_symbols");
      // validate the required field `missing_symbols` (array)
      for (int i = 0; i < jsonArraymissingSymbols.size(); i++) {
        MissingSymbolGroupsList200ResponseGroupsInnerMissingSymbolsInner.validateJsonElement(jsonArraymissingSymbols.get(i));
      };
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("symbol_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol_group_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V2MissingSymbolCrashGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V2MissingSymbolCrashGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V2MissingSymbolCrashGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V2MissingSymbolCrashGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<V2MissingSymbolCrashGroup>() {
           @Override
           public void write(JsonWriter out, V2MissingSymbolCrashGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V2MissingSymbolCrashGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V2MissingSymbolCrashGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V2MissingSymbolCrashGroup
   * @throws IOException if the JSON string is invalid with respect to V2MissingSymbolCrashGroup
   */
  public static V2MissingSymbolCrashGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V2MissingSymbolCrashGroup.class);
  }

  /**
   * Convert an instance of V2MissingSymbolCrashGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

