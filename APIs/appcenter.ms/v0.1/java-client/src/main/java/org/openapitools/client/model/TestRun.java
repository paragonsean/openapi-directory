/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.TestRunStatistics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary single test run on Xamarin Test Cloud
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestRun {
  public static final String SERIALIZED_NAME_APP_VERSION = "appVersion";
  @SerializedName(SERIALIZED_NAME_APP_VERSION)
  private String appVersion;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_RESULT_STATUS = "resultStatus";
  @SerializedName(SERIALIZED_NAME_RESULT_STATUS)
  private String resultStatus;

  public static final String SERIALIZED_NAME_RUN_STATUS = "runStatus";
  @SerializedName(SERIALIZED_NAME_RUN_STATUS)
  private String runStatus;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private TestRunStatistics stats;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEST_SERIES = "testSeries";
  @SerializedName(SERIALIZED_NAME_TEST_SERIES)
  private String testSeries;

  public static final String SERIALIZED_NAME_TEST_TYPE = "testType";
  @SerializedName(SERIALIZED_NAME_TEST_TYPE)
  private String testType;

  public TestRun() {
  }

  public TestRun appVersion(String appVersion) {
    this.appVersion = appVersion;
    return this;
  }

  /**
   * The compiled version of the app binary
   * @return appVersion
   */
  @javax.annotation.Nullable
  public String getAppVersion() {
    return appVersion;
  }

  public void setAppVersion(String appVersion) {
    this.appVersion = appVersion;
  }


  public TestRun date(String date) {
    this.date = date;
    return this;
  }

  /**
   * The date and time the test was uploaded
   * @return date
   */
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public TestRun description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Human readable explanation of the current test status
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TestRun id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique id of the test upload
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public TestRun platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * The device platform targeted by the test. Possible values are &#39;ios&#39; or &#39;android&#39;
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public TestRun resultStatus(String resultStatus) {
    this.resultStatus = resultStatus;
    return this;
  }

  /**
   * The passed/failed state
   * @return resultStatus
   */
  @javax.annotation.Nullable
  public String getResultStatus() {
    return resultStatus;
  }

  public void setResultStatus(String resultStatus) {
    this.resultStatus = resultStatus;
  }


  public TestRun runStatus(String runStatus) {
    this.runStatus = runStatus;
    return this;
  }

  /**
   * The current status of the test run, in relation to the various phases
   * @return runStatus
   */
  @javax.annotation.Nullable
  public String getRunStatus() {
    return runStatus;
  }

  public void setRunStatus(String runStatus) {
    this.runStatus = runStatus;
  }


  public TestRun state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Deprecated. Use runStatus instead.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public TestRun stats(TestRunStatistics stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public TestRunStatistics getStats() {
    return stats;
  }

  public void setStats(TestRunStatistics stats) {
    this.stats = stats;
  }


  public TestRun status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Deprecated. Use resultStatus instead.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TestRun testSeries(String testSeries) {
    this.testSeries = testSeries;
    return this;
  }

  /**
   * The name of the test series with which this test upload is associated
   * @return testSeries
   */
  @javax.annotation.Nullable
  public String getTestSeries() {
    return testSeries;
  }

  public void setTestSeries(String testSeries) {
    this.testSeries = testSeries;
  }


  public TestRun testType(String testType) {
    this.testType = testType;
    return this;
  }

  /**
   * The name of the test framework used to run this test
   * @return testType
   */
  @javax.annotation.Nullable
  public String getTestType() {
    return testType;
  }

  public void setTestType(String testType) {
    this.testType = testType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRun testRun = (TestRun) o;
    return Objects.equals(this.appVersion, testRun.appVersion) &&
        Objects.equals(this.date, testRun.date) &&
        Objects.equals(this.description, testRun.description) &&
        Objects.equals(this.id, testRun.id) &&
        Objects.equals(this.platform, testRun.platform) &&
        Objects.equals(this.resultStatus, testRun.resultStatus) &&
        Objects.equals(this.runStatus, testRun.runStatus) &&
        Objects.equals(this.state, testRun.state) &&
        Objects.equals(this.stats, testRun.stats) &&
        Objects.equals(this.status, testRun.status) &&
        Objects.equals(this.testSeries, testRun.testSeries) &&
        Objects.equals(this.testType, testRun.testType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appVersion, date, description, id, platform, resultStatus, runStatus, state, stats, status, testSeries, testType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRun {\n");
    sb.append("    appVersion: ").append(toIndentedString(appVersion)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    resultStatus: ").append(toIndentedString(resultStatus)).append("\n");
    sb.append("    runStatus: ").append(toIndentedString(runStatus)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    testSeries: ").append(toIndentedString(testSeries)).append("\n");
    sb.append("    testType: ").append(toIndentedString(testType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appVersion");
    openapiFields.add("date");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("platform");
    openapiFields.add("resultStatus");
    openapiFields.add("runStatus");
    openapiFields.add("state");
    openapiFields.add("stats");
    openapiFields.add("status");
    openapiFields.add("testSeries");
    openapiFields.add("testType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestRun is not found in the empty JSON string", TestRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appVersion") != null && !jsonObj.get("appVersion").isJsonNull()) && !jsonObj.get("appVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appVersion").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("resultStatus") != null && !jsonObj.get("resultStatus").isJsonNull()) && !jsonObj.get("resultStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultStatus").toString()));
      }
      if ((jsonObj.get("runStatus") != null && !jsonObj.get("runStatus").isJsonNull()) && !jsonObj.get("runStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runStatus").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        TestRunStatistics.validateJsonElement(jsonObj.get("stats"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("testSeries") != null && !jsonObj.get("testSeries").isJsonNull()) && !jsonObj.get("testSeries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testSeries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testSeries").toString()));
      }
      if ((jsonObj.get("testType") != null && !jsonObj.get("testType").isJsonNull()) && !jsonObj.get("testType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestRun.class));

       return (TypeAdapter<T>) new TypeAdapter<TestRun>() {
           @Override
           public void write(JsonWriter out, TestRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestRun
   * @throws IOException if the JSON string is invalid with respect to TestRun
   */
  public static TestRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestRun.class);
  }

  /**
   * Convert an instance of TestRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

