/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NewAppReleaseAlertingEventAllOfAppReleaseProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * New app release alerting event
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewAppReleaseAlertingEvent {
  public static final String SERIALIZED_NAME_EVENT_ID = "event_id";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_EVENT_TIMESTAMP = "event_timestamp";
  @SerializedName(SERIALIZED_NAME_EVENT_TIMESTAMP)
  private String eventTimestamp;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_APP_RELEASE_PROPERTIES = "app_release_properties";
  @SerializedName(SERIALIZED_NAME_APP_RELEASE_PROPERTIES)
  private NewAppReleaseAlertingEventAllOfAppReleaseProperties appReleaseProperties;

  public static final String SERIALIZED_NAME_DISABLE_WEBHOOK = "disable_webhook";
  @SerializedName(SERIALIZED_NAME_DISABLE_WEBHOOK)
  private Boolean disableWebhook;

  public static final String SERIALIZED_NAME_USER_IDS = "user_ids";
  @SerializedName(SERIALIZED_NAME_USER_IDS)
  private List<String> userIds = new ArrayList<>();

  public NewAppReleaseAlertingEvent() {
  }

  public NewAppReleaseAlertingEvent eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * A unique identifier for this event instance. Useful for deduplication
   * @return eventId
   */
  @javax.annotation.Nonnull
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public NewAppReleaseAlertingEvent eventTimestamp(String eventTimestamp) {
    this.eventTimestamp = eventTimestamp;
    return this;
  }

  /**
   * ISO 8601 date time when event was generated
   * @return eventTimestamp
   */
  @javax.annotation.Nonnull
  public String getEventTimestamp() {
    return eventTimestamp;
  }

  public void setEventTimestamp(String eventTimestamp) {
    this.eventTimestamp = eventTimestamp;
  }


  public NewAppReleaseAlertingEvent properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Obsolete. Use emailProperties.
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public NewAppReleaseAlertingEvent appReleaseProperties(NewAppReleaseAlertingEventAllOfAppReleaseProperties appReleaseProperties) {
    this.appReleaseProperties = appReleaseProperties;
    return this;
  }

  /**
   * Get appReleaseProperties
   * @return appReleaseProperties
   */
  @javax.annotation.Nullable
  public NewAppReleaseAlertingEventAllOfAppReleaseProperties getAppReleaseProperties() {
    return appReleaseProperties;
  }

  public void setAppReleaseProperties(NewAppReleaseAlertingEventAllOfAppReleaseProperties appReleaseProperties) {
    this.appReleaseProperties = appReleaseProperties;
  }


  public NewAppReleaseAlertingEvent disableWebhook(Boolean disableWebhook) {
    this.disableWebhook = disableWebhook;
    return this;
  }

  /**
   * indicate whether notify via webhook or not
   * @return disableWebhook
   */
  @javax.annotation.Nullable
  public Boolean getDisableWebhook() {
    return disableWebhook;
  }

  public void setDisableWebhook(Boolean disableWebhook) {
    this.disableWebhook = disableWebhook;
  }


  public NewAppReleaseAlertingEvent userIds(List<String> userIds) {
    this.userIds = userIds;
    return this;
  }

  public NewAppReleaseAlertingEvent addUserIdsItem(String userIdsItem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<>();
    }
    this.userIds.add(userIdsItem);
    return this;
  }

  /**
   * List of users who need to receive an email notification. If this is not null, then only sending emails will be triggered even if the event requires calling webhooks or doing other actions.
   * @return userIds
   */
  @javax.annotation.Nullable
  public List<String> getUserIds() {
    return userIds;
  }

  public void setUserIds(List<String> userIds) {
    this.userIds = userIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewAppReleaseAlertingEvent newAppReleaseAlertingEvent = (NewAppReleaseAlertingEvent) o;
    return Objects.equals(this.eventId, newAppReleaseAlertingEvent.eventId) &&
        Objects.equals(this.eventTimestamp, newAppReleaseAlertingEvent.eventTimestamp) &&
        Objects.equals(this.properties, newAppReleaseAlertingEvent.properties) &&
        Objects.equals(this.appReleaseProperties, newAppReleaseAlertingEvent.appReleaseProperties) &&
        Objects.equals(this.disableWebhook, newAppReleaseAlertingEvent.disableWebhook) &&
        Objects.equals(this.userIds, newAppReleaseAlertingEvent.userIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventId, eventTimestamp, properties, appReleaseProperties, disableWebhook, userIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewAppReleaseAlertingEvent {\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    eventTimestamp: ").append(toIndentedString(eventTimestamp)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    appReleaseProperties: ").append(toIndentedString(appReleaseProperties)).append("\n");
    sb.append("    disableWebhook: ").append(toIndentedString(disableWebhook)).append("\n");
    sb.append("    userIds: ").append(toIndentedString(userIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("event_id");
    openapiFields.add("event_timestamp");
    openapiFields.add("properties");
    openapiFields.add("app_release_properties");
    openapiFields.add("disable_webhook");
    openapiFields.add("user_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("event_id");
    openapiRequiredFields.add("event_timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewAppReleaseAlertingEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewAppReleaseAlertingEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewAppReleaseAlertingEvent is not found in the empty JSON string", NewAppReleaseAlertingEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewAppReleaseAlertingEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewAppReleaseAlertingEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewAppReleaseAlertingEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("event_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_id").toString()));
      }
      if (!jsonObj.get("event_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_timestamp").toString()));
      }
      // validate the optional field `app_release_properties`
      if (jsonObj.get("app_release_properties") != null && !jsonObj.get("app_release_properties").isJsonNull()) {
        NewAppReleaseAlertingEventAllOfAppReleaseProperties.validateJsonElement(jsonObj.get("app_release_properties"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_ids") != null && !jsonObj.get("user_ids").isJsonNull() && !jsonObj.get("user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("user_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewAppReleaseAlertingEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewAppReleaseAlertingEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewAppReleaseAlertingEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewAppReleaseAlertingEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<NewAppReleaseAlertingEvent>() {
           @Override
           public void write(JsonWriter out, NewAppReleaseAlertingEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewAppReleaseAlertingEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewAppReleaseAlertingEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewAppReleaseAlertingEvent
   * @throws IOException if the JSON string is invalid with respect to NewAppReleaseAlertingEvent
   */
  public static NewAppReleaseAlertingEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewAppReleaseAlertingEvent.class);
  }

  /**
   * Convert an instance of NewAppReleaseAlertingEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

