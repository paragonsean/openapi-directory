/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalyticsDeviceCounts200ResponseDailyInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalyticsDeviceCounts200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalyticsDeviceCounts200Response {
  public static final String SERIALIZED_NAME_DAILY = "daily";
  @SerializedName(SERIALIZED_NAME_DAILY)
  private List<AnalyticsDeviceCounts200ResponseDailyInner> daily = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONTHLY = "monthly";
  @SerializedName(SERIALIZED_NAME_MONTHLY)
  private List<AnalyticsDeviceCounts200ResponseDailyInner> monthly = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEEKLY = "weekly";
  @SerializedName(SERIALIZED_NAME_WEEKLY)
  private List<AnalyticsDeviceCounts200ResponseDailyInner> weekly = new ArrayList<>();

  public AnalyticsDeviceCounts200Response() {
  }

  public AnalyticsDeviceCounts200Response daily(List<AnalyticsDeviceCounts200ResponseDailyInner> daily) {
    this.daily = daily;
    return this;
  }

  public AnalyticsDeviceCounts200Response addDailyItem(AnalyticsDeviceCounts200ResponseDailyInner dailyItem) {
    if (this.daily == null) {
      this.daily = new ArrayList<>();
    }
    this.daily.add(dailyItem);
    return this;
  }

  /**
   * The active device count for each interval.
   * @return daily
   */
  @javax.annotation.Nullable
  public List<AnalyticsDeviceCounts200ResponseDailyInner> getDaily() {
    return daily;
  }

  public void setDaily(List<AnalyticsDeviceCounts200ResponseDailyInner> daily) {
    this.daily = daily;
  }


  public AnalyticsDeviceCounts200Response monthly(List<AnalyticsDeviceCounts200ResponseDailyInner> monthly) {
    this.monthly = monthly;
    return this;
  }

  public AnalyticsDeviceCounts200Response addMonthlyItem(AnalyticsDeviceCounts200ResponseDailyInner monthlyItem) {
    if (this.monthly == null) {
      this.monthly = new ArrayList<>();
    }
    this.monthly.add(monthlyItem);
    return this;
  }

  /**
   * The active device count for each interval with a month&#39;s retention.
   * @return monthly
   */
  @javax.annotation.Nullable
  public List<AnalyticsDeviceCounts200ResponseDailyInner> getMonthly() {
    return monthly;
  }

  public void setMonthly(List<AnalyticsDeviceCounts200ResponseDailyInner> monthly) {
    this.monthly = monthly;
  }


  public AnalyticsDeviceCounts200Response weekly(List<AnalyticsDeviceCounts200ResponseDailyInner> weekly) {
    this.weekly = weekly;
    return this;
  }

  public AnalyticsDeviceCounts200Response addWeeklyItem(AnalyticsDeviceCounts200ResponseDailyInner weeklyItem) {
    if (this.weekly == null) {
      this.weekly = new ArrayList<>();
    }
    this.weekly.add(weeklyItem);
    return this;
  }

  /**
   * The active device count for each interval with a week&#39;s retention.
   * @return weekly
   */
  @javax.annotation.Nullable
  public List<AnalyticsDeviceCounts200ResponseDailyInner> getWeekly() {
    return weekly;
  }

  public void setWeekly(List<AnalyticsDeviceCounts200ResponseDailyInner> weekly) {
    this.weekly = weekly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsDeviceCounts200Response analyticsDeviceCounts200Response = (AnalyticsDeviceCounts200Response) o;
    return Objects.equals(this.daily, analyticsDeviceCounts200Response.daily) &&
        Objects.equals(this.monthly, analyticsDeviceCounts200Response.monthly) &&
        Objects.equals(this.weekly, analyticsDeviceCounts200Response.weekly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(daily, monthly, weekly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsDeviceCounts200Response {\n");
    sb.append("    daily: ").append(toIndentedString(daily)).append("\n");
    sb.append("    monthly: ").append(toIndentedString(monthly)).append("\n");
    sb.append("    weekly: ").append(toIndentedString(weekly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("daily");
    openapiFields.add("monthly");
    openapiFields.add("weekly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalyticsDeviceCounts200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalyticsDeviceCounts200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyticsDeviceCounts200Response is not found in the empty JSON string", AnalyticsDeviceCounts200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalyticsDeviceCounts200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalyticsDeviceCounts200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("daily") != null && !jsonObj.get("daily").isJsonNull()) {
        JsonArray jsonArraydaily = jsonObj.getAsJsonArray("daily");
        if (jsonArraydaily != null) {
          // ensure the json data is an array
          if (!jsonObj.get("daily").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `daily` to be an array in the JSON string but got `%s`", jsonObj.get("daily").toString()));
          }

          // validate the optional field `daily` (array)
          for (int i = 0; i < jsonArraydaily.size(); i++) {
            AnalyticsDeviceCounts200ResponseDailyInner.validateJsonElement(jsonArraydaily.get(i));
          };
        }
      }
      if (jsonObj.get("monthly") != null && !jsonObj.get("monthly").isJsonNull()) {
        JsonArray jsonArraymonthly = jsonObj.getAsJsonArray("monthly");
        if (jsonArraymonthly != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monthly").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monthly` to be an array in the JSON string but got `%s`", jsonObj.get("monthly").toString()));
          }

          // validate the optional field `monthly` (array)
          for (int i = 0; i < jsonArraymonthly.size(); i++) {
            AnalyticsDeviceCounts200ResponseDailyInner.validateJsonElement(jsonArraymonthly.get(i));
          };
        }
      }
      if (jsonObj.get("weekly") != null && !jsonObj.get("weekly").isJsonNull()) {
        JsonArray jsonArrayweekly = jsonObj.getAsJsonArray("weekly");
        if (jsonArrayweekly != null) {
          // ensure the json data is an array
          if (!jsonObj.get("weekly").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `weekly` to be an array in the JSON string but got `%s`", jsonObj.get("weekly").toString()));
          }

          // validate the optional field `weekly` (array)
          for (int i = 0; i < jsonArrayweekly.size(); i++) {
            AnalyticsDeviceCounts200ResponseDailyInner.validateJsonElement(jsonArrayweekly.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyticsDeviceCounts200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyticsDeviceCounts200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyticsDeviceCounts200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyticsDeviceCounts200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyticsDeviceCounts200Response>() {
           @Override
           public void write(JsonWriter out, AnalyticsDeviceCounts200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyticsDeviceCounts200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalyticsDeviceCounts200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalyticsDeviceCounts200Response
   * @throws IOException if the JSON string is invalid with respect to AnalyticsDeviceCounts200Response
   */
  public static AnalyticsDeviceCounts200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyticsDeviceCounts200Response.class);
  }

  /**
   * Convert an instance of AnalyticsDeviceCounts200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

