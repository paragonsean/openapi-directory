/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransferRepoOwnerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferRepoOwnerRequest {
  public static final String SERIALIZED_NAME_ISSUE_ID = "issue_id";
  @SerializedName(SERIALIZED_NAME_ISSUE_ID)
  private String issueId;

  public static final String SERIALIZED_NAME_NEW_OWNER_ID = "new_owner_id";
  @SerializedName(SERIALIZED_NAME_NEW_OWNER_ID)
  private UUID newOwnerId;

  public static final String SERIALIZED_NAME_REPOSITORY_URL = "repository_url";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URL)
  private String repositoryUrl;

  public static final String SERIALIZED_NAME_RESPONSIBLE_ADMIN_ID = "responsible_admin_id";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_ADMIN_ID)
  private UUID responsibleAdminId;

  public static final String SERIALIZED_NAME_TRANSFER_REASON = "transfer_reason";
  @SerializedName(SERIALIZED_NAME_TRANSFER_REASON)
  private String transferReason;

  public TransferRepoOwnerRequest() {
  }

  public TransferRepoOwnerRequest issueId(String issueId) {
    this.issueId = issueId;
    return this;
  }

  /**
   * The id of the related Intercom issue.
   * @return issueId
   */
  @javax.annotation.Nonnull
  public String getIssueId() {
    return issueId;
  }

  public void setIssueId(String issueId) {
    this.issueId = issueId;
  }


  public TransferRepoOwnerRequest newOwnerId(UUID newOwnerId) {
    this.newOwnerId = newOwnerId;
    return this;
  }

  /**
   * The internal unique id (UUID) of the user.
   * @return newOwnerId
   */
  @javax.annotation.Nonnull
  public UUID getNewOwnerId() {
    return newOwnerId;
  }

  public void setNewOwnerId(UUID newOwnerId) {
    this.newOwnerId = newOwnerId;
  }


  public TransferRepoOwnerRequest repositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
    return this;
  }

  /**
   * The url of repository to have its ownership transferred.
   * @return repositoryUrl
   */
  @javax.annotation.Nonnull
  public String getRepositoryUrl() {
    return repositoryUrl;
  }

  public void setRepositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }


  public TransferRepoOwnerRequest responsibleAdminId(UUID responsibleAdminId) {
    this.responsibleAdminId = responsibleAdminId;
    return this;
  }

  /**
   * The id of the user who started transfer process.
   * @return responsibleAdminId
   */
  @javax.annotation.Nonnull
  public UUID getResponsibleAdminId() {
    return responsibleAdminId;
  }

  public void setResponsibleAdminId(UUID responsibleAdminId) {
    this.responsibleAdminId = responsibleAdminId;
  }


  public TransferRepoOwnerRequest transferReason(String transferReason) {
    this.transferReason = transferReason;
    return this;
  }

  /**
   * The explanation for starting transfer process.
   * @return transferReason
   */
  @javax.annotation.Nonnull
  public String getTransferReason() {
    return transferReason;
  }

  public void setTransferReason(String transferReason) {
    this.transferReason = transferReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferRepoOwnerRequest transferRepoOwnerRequest = (TransferRepoOwnerRequest) o;
    return Objects.equals(this.issueId, transferRepoOwnerRequest.issueId) &&
        Objects.equals(this.newOwnerId, transferRepoOwnerRequest.newOwnerId) &&
        Objects.equals(this.repositoryUrl, transferRepoOwnerRequest.repositoryUrl) &&
        Objects.equals(this.responsibleAdminId, transferRepoOwnerRequest.responsibleAdminId) &&
        Objects.equals(this.transferReason, transferRepoOwnerRequest.transferReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueId, newOwnerId, repositoryUrl, responsibleAdminId, transferReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferRepoOwnerRequest {\n");
    sb.append("    issueId: ").append(toIndentedString(issueId)).append("\n");
    sb.append("    newOwnerId: ").append(toIndentedString(newOwnerId)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    responsibleAdminId: ").append(toIndentedString(responsibleAdminId)).append("\n");
    sb.append("    transferReason: ").append(toIndentedString(transferReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issue_id");
    openapiFields.add("new_owner_id");
    openapiFields.add("repository_url");
    openapiFields.add("responsible_admin_id");
    openapiFields.add("transfer_reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("issue_id");
    openapiRequiredFields.add("new_owner_id");
    openapiRequiredFields.add("repository_url");
    openapiRequiredFields.add("responsible_admin_id");
    openapiRequiredFields.add("transfer_reason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferRepoOwnerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferRepoOwnerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferRepoOwnerRequest is not found in the empty JSON string", TransferRepoOwnerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferRepoOwnerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferRepoOwnerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransferRepoOwnerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("issue_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_id").toString()));
      }
      if (!jsonObj.get("new_owner_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_owner_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_owner_id").toString()));
      }
      if (!jsonObj.get("repository_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository_url").toString()));
      }
      if (!jsonObj.get("responsible_admin_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responsible_admin_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responsible_admin_id").toString()));
      }
      if (!jsonObj.get("transfer_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transfer_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transfer_reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferRepoOwnerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferRepoOwnerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferRepoOwnerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferRepoOwnerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferRepoOwnerRequest>() {
           @Override
           public void write(JsonWriter out, TransferRepoOwnerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferRepoOwnerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferRepoOwnerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferRepoOwnerRequest
   * @throws IOException if the JSON string is invalid with respect to TransferRepoOwnerRequest
   */
  public static TransferRepoOwnerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferRepoOwnerRequest.class);
  }

  /**
   * Convert an instance of TransferRepoOwnerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

