/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DiagnosticsStackTrace;
import org.openapitools.client.model.ErrorsAppBuildsList200Response;
import org.openapitools.client.model.ErrorsAvailableVersions200Response;
import org.openapitools.client.model.ErrorsCountsPerDay200Response;
import org.openapitools.client.model.ErrorsDeleteError200Response;
import org.openapitools.client.model.ErrorsErrorAttachmentText200Response;
import org.openapitools.client.model.ErrorsErrorAttachments200ResponseInner;
import org.openapitools.client.model.ErrorsErrorGroupsSearch200Response;
import org.openapitools.client.model.ErrorsErrorLocation200Response;
import org.openapitools.client.model.ErrorsErrorSearch200Response;
import org.openapitools.client.model.ErrorsGetRetentionSettings200Response;
import org.openapitools.client.model.ErrorsGroupDetails200Response;
import org.openapitools.client.model.ErrorsGroupErrorFreeDevicePercentages200Response;
import org.openapitools.client.model.ErrorsGroupList200Response;
import org.openapitools.client.model.ErrorsGroupModelCounts200Response;
import org.openapitools.client.model.ErrorsGroupOperatingSystemCounts200Response;
import org.openapitools.client.model.ErrorsLatestErrorDetails200Response;
import org.openapitools.client.model.ErrorsListForGroup200Response;
import org.openapitools.client.model.ErrorsListSessionLogs200Response;
import org.openapitools.client.model.ErrorsUpdateStateRequest;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrganizationsListAdministeredDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ErrorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ErrorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ErrorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for errorsAppBuildsList
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of App builds </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsAppBuildsListCall(String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String errorType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (errorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("errorType", errorType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsAppBuildsListValidateBeforeCall(String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String errorType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling errorsAppBuildsList(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsAppBuildsList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsAppBuildsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsAppBuildsList(Async)");
        }

        return errorsAppBuildsListCall(version, start, ownerName, appName, end, $top, errorType, _callback);

    }

    /**
     * 
     * List of app builds
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @return ErrorsAppBuildsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of App builds </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsAppBuildsList200Response errorsAppBuildsList(String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String errorType) throws ApiException {
        ApiResponse<ErrorsAppBuildsList200Response> localVarResp = errorsAppBuildsListWithHttpInfo(version, start, ownerName, appName, end, $top, errorType);
        return localVarResp.getData();
    }

    /**
     * 
     * List of app builds
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @return ApiResponse&lt;ErrorsAppBuildsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of App builds </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsAppBuildsList200Response> errorsAppBuildsListWithHttpInfo(String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String errorType) throws ApiException {
        okhttp3.Call localVarCall = errorsAppBuildsListValidateBeforeCall(version, start, ownerName, appName, end, $top, errorType, null);
        Type localVarReturnType = new TypeToken<ErrorsAppBuildsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of app builds
     * @param version  (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of App builds </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsAppBuildsListAsync(String version, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String errorType, final ApiCallback<ErrorsAppBuildsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsAppBuildsListValidateBeforeCall(version, start, ownerName, appName, end, $top, errorType, _callback);
        Type localVarReturnType = new TypeToken<ErrorsAppBuildsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsAvailableVersions
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available versions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsAvailableVersionsCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, Long $skip, String $filter, String $inlinecount, String errorType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($inlinecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$inlinecount", $inlinecount));
        }

        if (errorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("errorType", errorType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsAvailableVersionsValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, Long $skip, String $filter, String $inlinecount, String errorType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsAvailableVersions(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsAvailableVersions(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsAvailableVersions(Async)");
        }

        return errorsAvailableVersionsCall(start, ownerName, appName, end, $top, $skip, $filter, $inlinecount, errorType, _callback);

    }

    /**
     * 
     * Get all available versions in the time range.
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @return ErrorsAvailableVersions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available versions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsAvailableVersions200Response errorsAvailableVersions(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, Long $skip, String $filter, String $inlinecount, String errorType) throws ApiException {
        ApiResponse<ErrorsAvailableVersions200Response> localVarResp = errorsAvailableVersionsWithHttpInfo(start, ownerName, appName, end, $top, $skip, $filter, $inlinecount, errorType);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all available versions in the time range.
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @return ApiResponse&lt;ErrorsAvailableVersions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available versions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsAvailableVersions200Response> errorsAvailableVersionsWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, Long $skip, String $filter, String $inlinecount, String errorType) throws ApiException {
        okhttp3.Call localVarCall = errorsAvailableVersionsValidateBeforeCall(start, ownerName, appName, end, $top, $skip, $filter, $inlinecount, errorType, null);
        Type localVarReturnType = new TypeToken<ErrorsAvailableVersions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all available versions in the time range.
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param $filter A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering. (optional)
     * @param $inlinecount Controls whether or not to include a count of all the items across all pages. (optional, default to none)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of available versions in the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsAvailableVersionsAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, Long $skip, String $filter, String $inlinecount, String errorType, final ApiCallback<ErrorsAvailableVersions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsAvailableVersionsValidateBeforeCall(start, ownerName, appName, end, $top, $skip, $filter, $inlinecount, errorType, _callback);
        Type localVarReturnType = new TypeToken<ErrorsAvailableVersions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsCountsPerDay
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes or errors by day in the time range, and total over the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsCountsPerDayCall(OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, String appBuild, String errorType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (appBuild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_build", appBuild));
        }

        if (errorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("errorType", errorType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsCountsPerDayValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, String appBuild, String errorType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsCountsPerDay(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsCountsPerDay(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsCountsPerDay(Async)");
        }

        return errorsCountsPerDayCall(start, ownerName, appName, version, end, appBuild, errorType, _callback);

    }

    /**
     * 
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @return ErrorsCountsPerDay200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes or errors by day in the time range, and total over the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsCountsPerDay200Response errorsCountsPerDay(OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, String appBuild, String errorType) throws ApiException {
        ApiResponse<ErrorsCountsPerDay200Response> localVarResp = errorsCountsPerDayWithHttpInfo(start, ownerName, appName, version, end, appBuild, errorType);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @return ApiResponse&lt;ErrorsCountsPerDay200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes or errors by day in the time range, and total over the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsCountsPerDay200Response> errorsCountsPerDayWithHttpInfo(OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, String appBuild, String errorType) throws ApiException {
        okhttp3.Call localVarCall = errorsCountsPerDayValidateBeforeCall(start, ownerName, appName, version, end, appBuild, errorType, null);
        Type localVarReturnType = new TypeToken<ErrorsCountsPerDay200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of crashes or errors by day in the time range, and total over the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsCountsPerDayAsync(OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, String appBuild, String errorType, final ApiCallback<ErrorsCountsPerDay200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsCountsPerDayValidateBeforeCall(start, ownerName, appName, version, end, appBuild, errorType, _callback);
        Type localVarReturnType = new TypeToken<ErrorsCountsPerDay200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsDeleteError
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsDeleteErrorCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsDeleteErrorValidateBeforeCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsDeleteError(Async)");
        }

        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsDeleteError(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsDeleteError(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsDeleteError(Async)");
        }

        return errorsDeleteErrorCall(errorGroupId, errorId, ownerName, appName, _callback);

    }

    /**
     * 
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsDeleteError200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsDeleteError200Response errorsDeleteError(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsDeleteError200Response> localVarResp = errorsDeleteErrorWithHttpInfo(errorGroupId, errorId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsDeleteError200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsDeleteError200Response> errorsDeleteErrorWithHttpInfo(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsDeleteErrorValidateBeforeCall(errorGroupId, errorId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsDeleteError200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsDeleteErrorAsync(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback<ErrorsDeleteError200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsDeleteErrorValidateBeforeCall(errorGroupId, errorId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsDeleteError200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorAttachmentLocation
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorAttachmentLocationCall(String errorId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location"
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorAttachmentLocationValidateBeforeCall(String errorId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsErrorAttachmentLocation(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling errorsErrorAttachmentLocation(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorAttachmentLocation(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorAttachmentLocation(Async)");
        }

        return errorsErrorAttachmentLocationCall(errorId, attachmentId, ownerName, appName, _callback);

    }

    /**
     * 
     * Error attachment location.
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsErrorLocation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsErrorLocation200Response errorsErrorAttachmentLocation(String errorId, String attachmentId, String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsErrorLocation200Response> localVarResp = errorsErrorAttachmentLocationWithHttpInfo(errorId, attachmentId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Error attachment location.
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsErrorLocation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsErrorLocation200Response> errorsErrorAttachmentLocationWithHttpInfo(String errorId, String attachmentId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorAttachmentLocationValidateBeforeCall(errorId, attachmentId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsErrorLocation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Error attachment location.
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorAttachmentLocationAsync(String errorId, String attachmentId, String ownerName, String appName, final ApiCallback<ErrorsErrorLocation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorAttachmentLocationValidateBeforeCall(errorId, attachmentId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsErrorLocation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorAttachmentText
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment text. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorAttachmentTextCall(String errorId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text"
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorAttachmentTextValidateBeforeCall(String errorId, String attachmentId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsErrorAttachmentText(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling errorsErrorAttachmentText(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorAttachmentText(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorAttachmentText(Async)");
        }

        return errorsErrorAttachmentTextCall(errorId, attachmentId, ownerName, appName, _callback);

    }

    /**
     * 
     * Error attachment text.
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsErrorAttachmentText200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment text. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsErrorAttachmentText200Response errorsErrorAttachmentText(String errorId, String attachmentId, String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsErrorAttachmentText200Response> localVarResp = errorsErrorAttachmentTextWithHttpInfo(errorId, attachmentId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Error attachment text.
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsErrorAttachmentText200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment text. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsErrorAttachmentText200Response> errorsErrorAttachmentTextWithHttpInfo(String errorId, String attachmentId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorAttachmentTextValidateBeforeCall(errorId, attachmentId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsErrorAttachmentText200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Error attachment text.
     * @param errorId The id of the error (required)
     * @param attachmentId Error attachment id. (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error attachment text. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorAttachmentTextAsync(String errorId, String attachmentId, String ownerName, String appName, final ApiCallback<ErrorsErrorAttachmentText200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorAttachmentTextValidateBeforeCall(errorId, attachmentId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsErrorAttachmentText200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorAttachments
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error attachments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorAttachmentsCall(String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments"
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorAttachmentsValidateBeforeCall(String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsErrorAttachments(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorAttachments(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorAttachments(Async)");
        }

        return errorsErrorAttachmentsCall(errorId, ownerName, appName, _callback);

    }

    /**
     * 
     * List error attachments.
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;ErrorsErrorAttachments200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error attachments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public List<ErrorsErrorAttachments200ResponseInner> errorsErrorAttachments(String errorId, String ownerName, String appName) throws ApiException {
        ApiResponse<List<ErrorsErrorAttachments200ResponseInner>> localVarResp = errorsErrorAttachmentsWithHttpInfo(errorId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * List error attachments.
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;ErrorsErrorAttachments200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error attachments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ErrorsErrorAttachments200ResponseInner>> errorsErrorAttachmentsWithHttpInfo(String errorId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorAttachmentsValidateBeforeCall(errorId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<ErrorsErrorAttachments200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List error attachments.
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error attachments. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorAttachmentsAsync(String errorId, String ownerName, String appName, final ApiCallback<List<ErrorsErrorAttachments200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorAttachmentsValidateBeforeCall(errorId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<ErrorsErrorAttachments200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorDownload
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format the format of the crash log (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorDownloadCall(String errorGroupId, String errorId, String ownerName, String appName, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorDownloadValidateBeforeCall(String errorGroupId, String errorId, String ownerName, String appName, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsErrorDownload(Async)");
        }

        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsErrorDownload(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorDownload(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorDownload(Async)");
        }

        return errorsErrorDownloadCall(errorGroupId, errorId, ownerName, appName, format, _callback);

    }

    /**
     * 
     * Download details for a specific error.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format the format of the crash log (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public Object errorsErrorDownload(String errorGroupId, String errorId, String ownerName, String appName, String format) throws ApiException {
        ApiResponse<Object> localVarResp = errorsErrorDownloadWithHttpInfo(errorGroupId, errorId, ownerName, appName, format);
        return localVarResp.getData();
    }

    /**
     * 
     * Download details for a specific error.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format the format of the crash log (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> errorsErrorDownloadWithHttpInfo(String errorGroupId, String errorId, String ownerName, String appName, String format) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorDownloadValidateBeforeCall(errorGroupId, errorId, ownerName, appName, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Download details for a specific error.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param format the format of the crash log (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorDownloadAsync(String errorGroupId, String errorId, String ownerName, String appName, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorDownloadValidateBeforeCall(errorGroupId, errorId, ownerName, appName, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorFreeDevicePercentages
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param versions  (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorFreeDevicePercentagesCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, String errorType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (versions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("pipes", "versions", versions));
        }

        if (appBuild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_build", appBuild));
        }

        if (errorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("errorType", errorType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorFreeDevicePercentagesValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, String errorType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsErrorFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorFreeDevicePercentages(Async)");
        }

        return errorsErrorFreeDevicePercentagesCall(start, ownerName, appName, end, versions, appBuild, errorType, _callback);

    }

    /**
     * 
     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param versions  (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @return ErrorsGroupErrorFreeDevicePercentages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGroupErrorFreeDevicePercentages200Response errorsErrorFreeDevicePercentages(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, String errorType) throws ApiException {
        ApiResponse<ErrorsGroupErrorFreeDevicePercentages200Response> localVarResp = errorsErrorFreeDevicePercentagesWithHttpInfo(start, ownerName, appName, end, versions, appBuild, errorType);
        return localVarResp.getData();
    }

    /**
     * 
     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param versions  (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @return ApiResponse&lt;ErrorsGroupErrorFreeDevicePercentages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGroupErrorFreeDevicePercentages200Response> errorsErrorFreeDevicePercentagesWithHttpInfo(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, String errorType) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorFreeDevicePercentagesValidateBeforeCall(start, ownerName, appName, end, versions, appBuild, errorType, null);
        Type localVarReturnType = new TypeToken<ErrorsGroupErrorFreeDevicePercentages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param versions  (optional)
     * @param appBuild app build (optional)
     * @param errorType Type of error (handled vs unhandled), excluding All (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the entire time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorFreeDevicePercentagesAsync(OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, List<String> versions, String appBuild, String errorType, final ApiCallback<ErrorsGroupErrorFreeDevicePercentages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorFreeDevicePercentagesValidateBeforeCall(start, ownerName, appName, end, versions, appBuild, errorType, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGroupErrorFreeDevicePercentages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorGroupsSearch
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorGroupsSearchCall(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorGroupsSearchValidateBeforeCall(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorGroupsSearch(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorGroupsSearch(Async)");
        }

        return errorsErrorGroupsSearchCall(ownerName, appName, filter, q, order, sort, $top, $skip, _callback);

    }

    /**
     * 
     * Error groups list based on search parameters
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @return ErrorsErrorGroupsSearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsErrorGroupsSearch200Response errorsErrorGroupsSearch(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip) throws ApiException {
        ApiResponse<ErrorsErrorGroupsSearch200Response> localVarResp = errorsErrorGroupsSearchWithHttpInfo(ownerName, appName, filter, q, order, sort, $top, $skip);
        return localVarResp.getData();
    }

    /**
     * 
     * Error groups list based on search parameters
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @return ApiResponse&lt;ErrorsErrorGroupsSearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsErrorGroupsSearch200Response> errorsErrorGroupsSearchWithHttpInfo(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorGroupsSearchValidateBeforeCall(ownerName, appName, filter, q, order, sort, $top, $skip, null);
        Type localVarReturnType = new TypeToken<ErrorsErrorGroupsSearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Error groups list based on search parameters
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to matchingReportsCount)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorGroupsSearchAsync(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip, final ApiCallback<ErrorsErrorGroupsSearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorGroupsSearchValidateBeforeCall(ownerName, appName, filter, q, order, sort, $top, $skip, _callback);
        Type localVarReturnType = new TypeToken<ErrorsErrorGroupsSearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorLocation
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorLocationCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorLocationValidateBeforeCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsErrorLocation(Async)");
        }

        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsErrorLocation(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorLocation(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorLocation(Async)");
        }

        return errorsErrorLocationCall(errorGroupId, errorId, ownerName, appName, _callback);

    }

    /**
     * 
     * Error location.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsErrorLocation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsErrorLocation200Response errorsErrorLocation(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsErrorLocation200Response> localVarResp = errorsErrorLocationWithHttpInfo(errorGroupId, errorId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Error location.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsErrorLocation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsErrorLocation200Response> errorsErrorLocationWithHttpInfo(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorLocationValidateBeforeCall(errorGroupId, errorId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsErrorLocation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Error location.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error location. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorLocationAsync(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback<ErrorsErrorLocation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorLocationValidateBeforeCall(errorGroupId, errorId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsErrorLocation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorSearch
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to timestamp)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of errors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorSearchCall(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/search"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorSearchValidateBeforeCall(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorSearch(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorSearch(Async)");
        }

        return errorsErrorSearchCall(ownerName, appName, filter, q, order, sort, $top, $skip, _callback);

    }

    /**
     * 
     * Errors list based on search parameters
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to timestamp)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @return ErrorsErrorSearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of errors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsErrorSearch200Response errorsErrorSearch(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip) throws ApiException {
        ApiResponse<ErrorsErrorSearch200Response> localVarResp = errorsErrorSearchWithHttpInfo(ownerName, appName, filter, q, order, sort, $top, $skip);
        return localVarResp.getData();
    }

    /**
     * 
     * Errors list based on search parameters
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to timestamp)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @return ApiResponse&lt;ErrorsErrorSearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of errors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsErrorSearch200Response> errorsErrorSearchWithHttpInfo(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorSearchValidateBeforeCall(ownerName, appName, filter, q, order, sort, $top, $skip, null);
        Type localVarReturnType = new TypeToken<ErrorsErrorSearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Errors list based on search parameters
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param filter A filter as specified in OData notation (optional)
     * @param q A query string (optional)
     * @param order It controls the order of sorting (optional, default to desc)
     * @param sort It controls the sort based on specified field (optional, default to timestamp)
     * @param $top The maximum number of results to return (optional, default to 100)
     * @param $skip The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of errors </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorSearchAsync(String ownerName, String appName, String filter, String q, String order, String sort, Long $top, Long $skip, final ApiCallback<ErrorsErrorSearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorSearchValidateBeforeCall(ownerName, appName, filter, q, order, sort, $top, $skip, _callback);
        Type localVarReturnType = new TypeToken<ErrorsErrorSearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsErrorStackTrace
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error stacktrace details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorStackTraceCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsErrorStackTraceValidateBeforeCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsErrorStackTrace(Async)");
        }

        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsErrorStackTrace(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsErrorStackTrace(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsErrorStackTrace(Async)");
        }

        return errorsErrorStackTraceCall(errorGroupId, errorId, ownerName, appName, _callback);

    }

    /**
     * 
     * Error Stacktrace details.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return DiagnosticsStackTrace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error stacktrace details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticsStackTrace errorsErrorStackTrace(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        ApiResponse<DiagnosticsStackTrace> localVarResp = errorsErrorStackTraceWithHttpInfo(errorGroupId, errorId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Error Stacktrace details.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;DiagnosticsStackTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error stacktrace details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticsStackTrace> errorsErrorStackTraceWithHttpInfo(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsErrorStackTraceValidateBeforeCall(errorGroupId, errorId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<DiagnosticsStackTrace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Error Stacktrace details.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error stacktrace details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsErrorStackTraceAsync(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback<DiagnosticsStackTrace> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsErrorStackTraceValidateBeforeCall(errorGroupId, errorId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticsStackTrace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGetErrorDetails
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGetErrorDetailsCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGetErrorDetailsValidateBeforeCall(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsGetErrorDetails(Async)");
        }

        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsGetErrorDetails(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGetErrorDetails(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGetErrorDetails(Async)");
        }

        return errorsGetErrorDetailsCall(errorGroupId, errorId, ownerName, appName, _callback);

    }

    /**
     * 
     * Error details.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsLatestErrorDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsLatestErrorDetails200Response errorsGetErrorDetails(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsLatestErrorDetails200Response> localVarResp = errorsGetErrorDetailsWithHttpInfo(errorGroupId, errorId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Error details.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsLatestErrorDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsLatestErrorDetails200Response> errorsGetErrorDetailsWithHttpInfo(String errorGroupId, String errorId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsGetErrorDetailsValidateBeforeCall(errorGroupId, errorId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsLatestErrorDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Error details.
     * @param errorGroupId The id of the error group (required)
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGetErrorDetailsAsync(String errorGroupId, String errorId, String ownerName, String appName, final ApiCallback<ErrorsLatestErrorDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGetErrorDetailsValidateBeforeCall(errorGroupId, errorId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsLatestErrorDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGetRetentionSettings
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGetRetentionSettingsCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGetRetentionSettingsValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGetRetentionSettings(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGetRetentionSettings(Async)");
        }

        return errorsGetRetentionSettingsCall(ownerName, appName, _callback);

    }

    /**
     * gets the retention settings in days
     * gets the retention settings in days
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsGetRetentionSettings200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGetRetentionSettings200Response errorsGetRetentionSettings(String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsGetRetentionSettings200Response> localVarResp = errorsGetRetentionSettingsWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * gets the retention settings in days
     * gets the retention settings in days
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsGetRetentionSettings200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGetRetentionSettings200Response> errorsGetRetentionSettingsWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsGetRetentionSettingsValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsGetRetentionSettings200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * gets the retention settings in days (asynchronously)
     * gets the retention settings in days
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGetRetentionSettingsAsync(String ownerName, String appName, final ApiCallback<ErrorsGetRetentionSettings200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGetRetentionSettingsValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGetRetentionSettings200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGroupCountsPerDay
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of errors by day in the time range and total errors over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupCountsPerDayCall(String errorGroupId, OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGroupCountsPerDayValidateBeforeCall(String errorGroupId, OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsGroupCountsPerDay(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsGroupCountsPerDay(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGroupCountsPerDay(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGroupCountsPerDay(Async)");
        }

        return errorsGroupCountsPerDayCall(errorGroupId, start, ownerName, appName, version, end, _callback);

    }

    /**
     * 
     * Count of errors by day in the time range of the selected error group with selected version
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @return ErrorsCountsPerDay200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of errors by day in the time range and total errors over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsCountsPerDay200Response errorsGroupCountsPerDay(String errorGroupId, OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end) throws ApiException {
        ApiResponse<ErrorsCountsPerDay200Response> localVarResp = errorsGroupCountsPerDayWithHttpInfo(errorGroupId, start, ownerName, appName, version, end);
        return localVarResp.getData();
    }

    /**
     * 
     * Count of errors by day in the time range of the selected error group with selected version
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @return ApiResponse&lt;ErrorsCountsPerDay200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of errors by day in the time range and total errors over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsCountsPerDay200Response> errorsGroupCountsPerDayWithHttpInfo(String errorGroupId, OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = errorsGroupCountsPerDayValidateBeforeCall(errorGroupId, start, ownerName, appName, version, end, null);
        Type localVarReturnType = new TypeToken<ErrorsCountsPerDay200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Count of errors by day in the time range of the selected error group with selected version
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Count of errors by day in the time range and total errors over the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupCountsPerDayAsync(String errorGroupId, OffsetDateTime start, String ownerName, String appName, String version, OffsetDateTime end, final ApiCallback<ErrorsCountsPerDay200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGroupCountsPerDayValidateBeforeCall(errorGroupId, start, ownerName, appName, version, end, _callback);
        Type localVarReturnType = new TypeToken<ErrorsCountsPerDay200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGroupDetails
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupDetailsCall(String errorGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGroupDetailsValidateBeforeCall(String errorGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsGroupDetails(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGroupDetails(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGroupDetails(Async)");
        }

        return errorsGroupDetailsCall(errorGroupId, ownerName, appName, _callback);

    }

    /**
     * 
     * Error group details
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsGroupDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGroupDetails200Response errorsGroupDetails(String errorGroupId, String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsGroupDetails200Response> localVarResp = errorsGroupDetailsWithHttpInfo(errorGroupId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Error group details
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsGroupDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGroupDetails200Response> errorsGroupDetailsWithHttpInfo(String errorGroupId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsGroupDetailsValidateBeforeCall(errorGroupId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsGroupDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Error group details
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupDetailsAsync(String errorGroupId, String ownerName, String appName, final ApiCallback<ErrorsGroupDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGroupDetailsValidateBeforeCall(errorGroupId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGroupDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGroupErrorFreeDevicePercentages
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupErrorFreeDevicePercentagesCall(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGroupErrorFreeDevicePercentagesValidateBeforeCall(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsGroupErrorFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsGroupErrorFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGroupErrorFreeDevicePercentages(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGroupErrorFreeDevicePercentages(Async)");
        }

        return errorsGroupErrorFreeDevicePercentagesCall(errorGroupId, start, ownerName, appName, end, _callback);

    }

    /**
     * 
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @return ErrorsGroupErrorFreeDevicePercentages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGroupErrorFreeDevicePercentages200Response errorsGroupErrorFreeDevicePercentages(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end) throws ApiException {
        ApiResponse<ErrorsGroupErrorFreeDevicePercentages200Response> localVarResp = errorsGroupErrorFreeDevicePercentagesWithHttpInfo(errorGroupId, start, ownerName, appName, end);
        return localVarResp.getData();
    }

    /**
     * 
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @return ApiResponse&lt;ErrorsGroupErrorFreeDevicePercentages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGroupErrorFreeDevicePercentages200Response> errorsGroupErrorFreeDevicePercentagesWithHttpInfo(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end) throws ApiException {
        okhttp3.Call localVarCall = errorsGroupErrorFreeDevicePercentagesValidateBeforeCall(errorGroupId, start, ownerName, appName, end, null);
        Type localVarReturnType = new TypeToken<ErrorsGroupErrorFreeDevicePercentages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Percentage of error-free devices by day in the time range and overall percentage of the time range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupErrorFreeDevicePercentagesAsync(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, final ApiCallback<ErrorsGroupErrorFreeDevicePercentages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGroupErrorFreeDevicePercentagesValidateBeforeCall(errorGroupId, start, ownerName, appName, end, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGroupErrorFreeDevicePercentages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGroupErrorStackTrace
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the stack trace for the error group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupErrorStackTraceCall(String errorGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGroupErrorStackTraceValidateBeforeCall(String errorGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsGroupErrorStackTrace(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGroupErrorStackTrace(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGroupErrorStackTrace(Async)");
        }

        return errorsGroupErrorStackTraceCall(errorGroupId, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the stack trace for the error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return DiagnosticsStackTrace
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the stack trace for the error group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosticsStackTrace errorsGroupErrorStackTrace(String errorGroupId, String ownerName, String appName) throws ApiException {
        ApiResponse<DiagnosticsStackTrace> localVarResp = errorsGroupErrorStackTraceWithHttpInfo(errorGroupId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the stack trace for the error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;DiagnosticsStackTrace&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the stack trace for the error group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosticsStackTrace> errorsGroupErrorStackTraceWithHttpInfo(String errorGroupId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsGroupErrorStackTraceValidateBeforeCall(errorGroupId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<DiagnosticsStackTrace>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the stack trace for the error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the stack trace for the error group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupErrorStackTraceAsync(String errorGroupId, String ownerName, String appName, final ApiCallback<DiagnosticsStackTrace> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGroupErrorStackTraceValidateBeforeCall(errorGroupId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<DiagnosticsStackTrace>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGroupList
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param appBuild app build (optional)
     * @param groupState  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupListCall(OffsetDateTime start, String ownerName, String appName, String version, String appBuild, String groupState, OffsetDateTime end, String $orderby, Long $top, String errorType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (appBuild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_build", appBuild));
        }

        if (groupState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupState", groupState));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (errorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("errorType", errorType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGroupListValidateBeforeCall(OffsetDateTime start, String ownerName, String appName, String version, String appBuild, String groupState, OffsetDateTime end, String $orderby, Long $top, String errorType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsGroupList(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGroupList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGroupList(Async)");
        }

        return errorsGroupListCall(start, ownerName, appName, version, appBuild, groupState, end, $orderby, $top, errorType, _callback);

    }

    /**
     * 
     * List of error groups
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param appBuild app build (optional)
     * @param groupState  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @return ErrorsGroupList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGroupList200Response errorsGroupList(OffsetDateTime start, String ownerName, String appName, String version, String appBuild, String groupState, OffsetDateTime end, String $orderby, Long $top, String errorType) throws ApiException {
        ApiResponse<ErrorsGroupList200Response> localVarResp = errorsGroupListWithHttpInfo(start, ownerName, appName, version, appBuild, groupState, end, $orderby, $top, errorType);
        return localVarResp.getData();
    }

    /**
     * 
     * List of error groups
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param appBuild app build (optional)
     * @param groupState  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @return ApiResponse&lt;ErrorsGroupList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGroupList200Response> errorsGroupListWithHttpInfo(OffsetDateTime start, String ownerName, String appName, String version, String appBuild, String groupState, OffsetDateTime end, String $orderby, Long $top, String errorType) throws ApiException {
        okhttp3.Call localVarCall = errorsGroupListValidateBeforeCall(start, ownerName, appName, version, appBuild, groupState, end, $orderby, $top, errorType, null);
        Type localVarReturnType = new TypeToken<ErrorsGroupList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of error groups
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param version  (optional)
     * @param appBuild app build (optional)
     * @param groupState  (optional)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $orderby controls the sorting order and sorting based on which column (optional, default to count desc)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param errorType Type of error (handled vs unhandled), including All (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of error groups </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupListAsync(OffsetDateTime start, String ownerName, String appName, String version, String appBuild, String groupState, OffsetDateTime end, String $orderby, Long $top, String errorType, final ApiCallback<ErrorsGroupList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGroupListValidateBeforeCall(start, ownerName, appName, version, appBuild, groupState, end, $orderby, $top, errorType, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGroupList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGroupModelCounts
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top Models with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupModelCountsCall(String errorGroupId, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGroupModelCountsValidateBeforeCall(String errorGroupId, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsGroupModelCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGroupModelCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGroupModelCounts(Async)");
        }

        return errorsGroupModelCountsCall(errorGroupId, ownerName, appName, $top, _callback);

    }

    /**
     * 
     * Top models of the selected error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @return ErrorsGroupModelCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top Models with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGroupModelCounts200Response errorsGroupModelCounts(String errorGroupId, String ownerName, String appName, Long $top) throws ApiException {
        ApiResponse<ErrorsGroupModelCounts200Response> localVarResp = errorsGroupModelCountsWithHttpInfo(errorGroupId, ownerName, appName, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Top models of the selected error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @return ApiResponse&lt;ErrorsGroupModelCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top Models with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGroupModelCounts200Response> errorsGroupModelCountsWithHttpInfo(String errorGroupId, String ownerName, String appName, Long $top) throws ApiException {
        okhttp3.Call localVarCall = errorsGroupModelCountsValidateBeforeCall(errorGroupId, ownerName, appName, $top, null);
        Type localVarReturnType = new TypeToken<ErrorsGroupModelCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Top models of the selected error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top Models with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupModelCountsAsync(String errorGroupId, String ownerName, String appName, Long $top, final ApiCallback<ErrorsGroupModelCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGroupModelCountsValidateBeforeCall(errorGroupId, ownerName, appName, $top, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGroupModelCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsGroupOperatingSystemCounts
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupOperatingSystemCountsCall(String errorGroupId, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsGroupOperatingSystemCountsValidateBeforeCall(String errorGroupId, String ownerName, String appName, Long $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsGroupOperatingSystemCounts(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsGroupOperatingSystemCounts(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsGroupOperatingSystemCounts(Async)");
        }

        return errorsGroupOperatingSystemCountsCall(errorGroupId, ownerName, appName, $top, _callback);

    }

    /**
     * 
     * Top OSes of the selected error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @return ErrorsGroupOperatingSystemCounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGroupOperatingSystemCounts200Response errorsGroupOperatingSystemCounts(String errorGroupId, String ownerName, String appName, Long $top) throws ApiException {
        ApiResponse<ErrorsGroupOperatingSystemCounts200Response> localVarResp = errorsGroupOperatingSystemCountsWithHttpInfo(errorGroupId, ownerName, appName, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Top OSes of the selected error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @return ApiResponse&lt;ErrorsGroupOperatingSystemCounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGroupOperatingSystemCounts200Response> errorsGroupOperatingSystemCountsWithHttpInfo(String errorGroupId, String ownerName, String appName, Long $top) throws ApiException {
        okhttp3.Call localVarCall = errorsGroupOperatingSystemCountsValidateBeforeCall(errorGroupId, ownerName, appName, $top, null);
        Type localVarReturnType = new TypeToken<ErrorsGroupOperatingSystemCounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Top OSes of the selected error group.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Top OSes with percentage in descending order </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsGroupOperatingSystemCountsAsync(String errorGroupId, String ownerName, String appName, Long $top, final ApiCallback<ErrorsGroupOperatingSystemCounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsGroupOperatingSystemCountsValidateBeforeCall(errorGroupId, ownerName, appName, $top, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGroupOperatingSystemCounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsLatestErrorDetails
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsLatestErrorDetailsCall(String errorGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsLatestErrorDetailsValidateBeforeCall(String errorGroupId, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsLatestErrorDetails(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsLatestErrorDetails(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsLatestErrorDetails(Async)");
        }

        return errorsLatestErrorDetailsCall(errorGroupId, ownerName, appName, _callback);

    }

    /**
     * 
     * Latest error details.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ErrorsLatestErrorDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsLatestErrorDetails200Response errorsLatestErrorDetails(String errorGroupId, String ownerName, String appName) throws ApiException {
        ApiResponse<ErrorsLatestErrorDetails200Response> localVarResp = errorsLatestErrorDetailsWithHttpInfo(errorGroupId, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Latest error details.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;ErrorsLatestErrorDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsLatestErrorDetails200Response> errorsLatestErrorDetailsWithHttpInfo(String errorGroupId, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = errorsLatestErrorDetailsValidateBeforeCall(errorGroupId, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<ErrorsLatestErrorDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Latest error details.
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Latest error details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsLatestErrorDetailsAsync(String errorGroupId, String ownerName, String appName, final ApiCallback<ErrorsLatestErrorDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsLatestErrorDetailsValidateBeforeCall(errorGroupId, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<ErrorsLatestErrorDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsListForGroup
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param model  (optional)
     * @param os  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all errors for group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsListForGroupCall(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String model, String os, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (model != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("model", model));
        }

        if (os != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("os", os));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsListForGroupValidateBeforeCall(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String model, String os, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsListForGroup(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling errorsListForGroup(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsListForGroup(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsListForGroup(Async)");
        }

        return errorsListForGroupCall(errorGroupId, start, ownerName, appName, end, $top, model, os, _callback);

    }

    /**
     * 
     * Get all errors for group
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param model  (optional)
     * @param os  (optional)
     * @return ErrorsListForGroup200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all errors for group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsListForGroup200Response errorsListForGroup(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String model, String os) throws ApiException {
        ApiResponse<ErrorsListForGroup200Response> localVarResp = errorsListForGroupWithHttpInfo(errorGroupId, start, ownerName, appName, end, $top, model, os);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all errors for group
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param model  (optional)
     * @param os  (optional)
     * @return ApiResponse&lt;ErrorsListForGroup200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all errors for group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsListForGroup200Response> errorsListForGroupWithHttpInfo(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String model, String os) throws ApiException {
        okhttp3.Call localVarCall = errorsListForGroupValidateBeforeCall(errorGroupId, start, ownerName, appName, end, $top, model, os, null);
        Type localVarReturnType = new TypeToken<ErrorsListForGroup200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all errors for group
     * @param errorGroupId The id of the error group (required)
     * @param start Start date time in data in ISO 8601 date time format (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param end Last date time in data in ISO 8601 date time format (optional)
     * @param $top The maximum number of results to return. (0 will fetch all results till the max number.) (optional, default to 30)
     * @param model  (optional)
     * @param os  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all errors for group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsListForGroupAsync(String errorGroupId, OffsetDateTime start, String ownerName, String appName, OffsetDateTime end, Long $top, String model, String os, final ApiCallback<ErrorsListForGroup200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsListForGroupValidateBeforeCall(errorGroupId, start, ownerName, appName, end, $top, model, os, _callback);
        Type localVarReturnType = new TypeToken<ErrorsListForGroup200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsListSessionLogs
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsListSessionLogsCall(String errorId, String ownerName, String appName, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs"
            .replace("{" + "errorId" + "}", localVarApiClient.escapeString(errorId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsListSessionLogsValidateBeforeCall(String errorId, String ownerName, String appName, OffsetDateTime date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorId' is set
        if (errorId == null) {
            throw new ApiException("Missing the required parameter 'errorId' when calling errorsListSessionLogs(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsListSessionLogs(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsListSessionLogs(Async)");
        }

        return errorsListSessionLogsCall(errorId, ownerName, appName, date, _callback);

    }

    /**
     * 
     * Get session logs by error ID
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @return ErrorsListSessionLogs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsListSessionLogs200Response errorsListSessionLogs(String errorId, String ownerName, String appName, OffsetDateTime date) throws ApiException {
        ApiResponse<ErrorsListSessionLogs200Response> localVarResp = errorsListSessionLogsWithHttpInfo(errorId, ownerName, appName, date);
        return localVarResp.getData();
    }

    /**
     * 
     * Get session logs by error ID
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @return ApiResponse&lt;ErrorsListSessionLogs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsListSessionLogs200Response> errorsListSessionLogsWithHttpInfo(String errorId, String ownerName, String appName, OffsetDateTime date) throws ApiException {
        okhttp3.Call localVarCall = errorsListSessionLogsValidateBeforeCall(errorId, ownerName, appName, date, null);
        Type localVarReturnType = new TypeToken<ErrorsListSessionLogs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get session logs by error ID
     * @param errorId The id of the error (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param date Date of data requested (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Session logs of specific error </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsListSessionLogsAsync(String errorId, String ownerName, String appName, OffsetDateTime date, final ApiCallback<ErrorsListSessionLogs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsListSessionLogsValidateBeforeCall(errorId, ownerName, appName, date, _callback);
        Type localVarReturnType = new TypeToken<ErrorsListSessionLogs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for errorsUpdateState
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param errorsUpdateStateRequest The state of the error group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsUpdateStateCall(String errorGroupId, String ownerName, String appName, ErrorsUpdateStateRequest errorsUpdateStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = errorsUpdateStateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}"
            .replace("{" + "errorGroupId" + "}", localVarApiClient.escapeString(errorGroupId.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call errorsUpdateStateValidateBeforeCall(String errorGroupId, String ownerName, String appName, ErrorsUpdateStateRequest errorsUpdateStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'errorGroupId' is set
        if (errorGroupId == null) {
            throw new ApiException("Missing the required parameter 'errorGroupId' when calling errorsUpdateState(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling errorsUpdateState(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling errorsUpdateState(Async)");
        }

        // verify the required parameter 'errorsUpdateStateRequest' is set
        if (errorsUpdateStateRequest == null) {
            throw new ApiException("Missing the required parameter 'errorsUpdateStateRequest' when calling errorsUpdateState(Async)");
        }

        return errorsUpdateStateCall(errorGroupId, ownerName, appName, errorsUpdateStateRequest, _callback);

    }

    /**
     * 
     * Update error group state
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param errorsUpdateStateRequest The state of the error group (required)
     * @return ErrorsGroupDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ErrorsGroupDetails200Response errorsUpdateState(String errorGroupId, String ownerName, String appName, ErrorsUpdateStateRequest errorsUpdateStateRequest) throws ApiException {
        ApiResponse<ErrorsGroupDetails200Response> localVarResp = errorsUpdateStateWithHttpInfo(errorGroupId, ownerName, appName, errorsUpdateStateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update error group state
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param errorsUpdateStateRequest The state of the error group (required)
     * @return ApiResponse&lt;ErrorsGroupDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorsGroupDetails200Response> errorsUpdateStateWithHttpInfo(String errorGroupId, String ownerName, String appName, ErrorsUpdateStateRequest errorsUpdateStateRequest) throws ApiException {
        okhttp3.Call localVarCall = errorsUpdateStateValidateBeforeCall(errorGroupId, ownerName, appName, errorsUpdateStateRequest, null);
        Type localVarReturnType = new TypeToken<ErrorsGroupDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update error group state
     * @param errorGroupId The id of the error group (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param errorsUpdateStateRequest The state of the error group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Error group details </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error code with reason </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call errorsUpdateStateAsync(String errorGroupId, String ownerName, String appName, ErrorsUpdateStateRequest errorsUpdateStateRequest, final ApiCallback<ErrorsGroupDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = errorsUpdateStateValidateBeforeCall(errorGroupId, ownerName, appName, errorsUpdateStateRequest, _callback);
        Type localVarReturnType = new TypeToken<ErrorsGroupDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
