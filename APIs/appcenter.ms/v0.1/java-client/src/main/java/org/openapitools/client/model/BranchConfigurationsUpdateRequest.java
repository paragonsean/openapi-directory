/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BranchConfigurationsGet200ResponseAllOfArtifactVersioning;
import org.openapitools.client.model.BranchConfigurationsGet200ResponseAllOfToolsets;
import org.openapitools.client.model.BuildsListBranches200ResponseInnerValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The branch build configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BranchConfigurationsUpdateRequest {
  public static final String SERIALIZED_NAME_ARTIFACT_VERSIONING = "artifactVersioning";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_VERSIONING)
  private BranchConfigurationsGet200ResponseAllOfArtifactVersioning artifactVersioning;

  public static final String SERIALIZED_NAME_BADGE_IS_ENABLED = "badgeIsEnabled";
  @SerializedName(SERIALIZED_NAME_BADGE_IS_ENABLED)
  private Boolean badgeIsEnabled;

  public static final String SERIALIZED_NAME_CLONE_FROM_BRANCH = "cloneFromBranch";
  @SerializedName(SERIALIZED_NAME_CLONE_FROM_BRANCH)
  private String cloneFromBranch;

  public static final String SERIALIZED_NAME_SIGNED = "signed";
  @SerializedName(SERIALIZED_NAME_SIGNED)
  private Boolean signed;

  public static final String SERIALIZED_NAME_TESTS_ENABLED = "testsEnabled";
  @SerializedName(SERIALIZED_NAME_TESTS_ENABLED)
  private Boolean testsEnabled;

  public static final String SERIALIZED_NAME_TOOLSETS = "toolsets";
  @SerializedName(SERIALIZED_NAME_TOOLSETS)
  private BranchConfigurationsGet200ResponseAllOfToolsets toolsets;

  /**
   * Gets or Sets trigger
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    CONTINOUS("continous"),
    
    CONTINUOUS("continuous"),
    
    MANUAL("manual");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String value) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private TriggerEnum trigger;

  public BranchConfigurationsUpdateRequest() {
  }

  public BranchConfigurationsUpdateRequest artifactVersioning(BranchConfigurationsGet200ResponseAllOfArtifactVersioning artifactVersioning) {
    this.artifactVersioning = artifactVersioning;
    return this;
  }

  /**
   * Get artifactVersioning
   * @return artifactVersioning
   */
  @javax.annotation.Nullable
  public BranchConfigurationsGet200ResponseAllOfArtifactVersioning getArtifactVersioning() {
    return artifactVersioning;
  }

  public void setArtifactVersioning(BranchConfigurationsGet200ResponseAllOfArtifactVersioning artifactVersioning) {
    this.artifactVersioning = artifactVersioning;
  }


  public BranchConfigurationsUpdateRequest badgeIsEnabled(Boolean badgeIsEnabled) {
    this.badgeIsEnabled = badgeIsEnabled;
    return this;
  }

  /**
   * Get badgeIsEnabled
   * @return badgeIsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBadgeIsEnabled() {
    return badgeIsEnabled;
  }

  public void setBadgeIsEnabled(Boolean badgeIsEnabled) {
    this.badgeIsEnabled = badgeIsEnabled;
  }


  public BranchConfigurationsUpdateRequest cloneFromBranch(String cloneFromBranch) {
    this.cloneFromBranch = cloneFromBranch;
    return this;
  }

  /**
   * A configured branch name to clone from. If provided, all other parameters will be ignored. Only supported in POST requests.
   * @return cloneFromBranch
   */
  @javax.annotation.Nullable
  public String getCloneFromBranch() {
    return cloneFromBranch;
  }

  public void setCloneFromBranch(String cloneFromBranch) {
    this.cloneFromBranch = cloneFromBranch;
  }


  public BranchConfigurationsUpdateRequest signed(Boolean signed) {
    this.signed = signed;
    return this;
  }

  /**
   * Get signed
   * @return signed
   */
  @javax.annotation.Nullable
  public Boolean getSigned() {
    return signed;
  }

  public void setSigned(Boolean signed) {
    this.signed = signed;
  }


  public BranchConfigurationsUpdateRequest testsEnabled(Boolean testsEnabled) {
    this.testsEnabled = testsEnabled;
    return this;
  }

  /**
   * Get testsEnabled
   * @return testsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTestsEnabled() {
    return testsEnabled;
  }

  public void setTestsEnabled(Boolean testsEnabled) {
    this.testsEnabled = testsEnabled;
  }


  public BranchConfigurationsUpdateRequest toolsets(BranchConfigurationsGet200ResponseAllOfToolsets toolsets) {
    this.toolsets = toolsets;
    return this;
  }

  /**
   * Get toolsets
   * @return toolsets
   */
  @javax.annotation.Nullable
  public BranchConfigurationsGet200ResponseAllOfToolsets getToolsets() {
    return toolsets;
  }

  public void setToolsets(BranchConfigurationsGet200ResponseAllOfToolsets toolsets) {
    this.toolsets = toolsets;
  }


  public BranchConfigurationsUpdateRequest trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BranchConfigurationsUpdateRequest instance itself
   */
  public BranchConfigurationsUpdateRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchConfigurationsUpdateRequest branchConfigurationsUpdateRequest = (BranchConfigurationsUpdateRequest) o;
    return Objects.equals(this.artifactVersioning, branchConfigurationsUpdateRequest.artifactVersioning) &&
        Objects.equals(this.badgeIsEnabled, branchConfigurationsUpdateRequest.badgeIsEnabled) &&
        Objects.equals(this.cloneFromBranch, branchConfigurationsUpdateRequest.cloneFromBranch) &&
        Objects.equals(this.signed, branchConfigurationsUpdateRequest.signed) &&
        Objects.equals(this.testsEnabled, branchConfigurationsUpdateRequest.testsEnabled) &&
        Objects.equals(this.toolsets, branchConfigurationsUpdateRequest.toolsets) &&
        Objects.equals(this.trigger, branchConfigurationsUpdateRequest.trigger)&&
        Objects.equals(this.additionalProperties, branchConfigurationsUpdateRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactVersioning, badgeIsEnabled, cloneFromBranch, signed, testsEnabled, toolsets, trigger, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchConfigurationsUpdateRequest {\n");
    sb.append("    artifactVersioning: ").append(toIndentedString(artifactVersioning)).append("\n");
    sb.append("    badgeIsEnabled: ").append(toIndentedString(badgeIsEnabled)).append("\n");
    sb.append("    cloneFromBranch: ").append(toIndentedString(cloneFromBranch)).append("\n");
    sb.append("    signed: ").append(toIndentedString(signed)).append("\n");
    sb.append("    testsEnabled: ").append(toIndentedString(testsEnabled)).append("\n");
    sb.append("    toolsets: ").append(toIndentedString(toolsets)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifactVersioning");
    openapiFields.add("badgeIsEnabled");
    openapiFields.add("cloneFromBranch");
    openapiFields.add("signed");
    openapiFields.add("testsEnabled");
    openapiFields.add("toolsets");
    openapiFields.add("trigger");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BranchConfigurationsUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BranchConfigurationsUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BranchConfigurationsUpdateRequest is not found in the empty JSON string", BranchConfigurationsUpdateRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `artifactVersioning`
      if (jsonObj.get("artifactVersioning") != null && !jsonObj.get("artifactVersioning").isJsonNull()) {
        BranchConfigurationsGet200ResponseAllOfArtifactVersioning.validateJsonElement(jsonObj.get("artifactVersioning"));
      }
      if ((jsonObj.get("cloneFromBranch") != null && !jsonObj.get("cloneFromBranch").isJsonNull()) && !jsonObj.get("cloneFromBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloneFromBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloneFromBranch").toString()));
      }
      // validate the optional field `toolsets`
      if (jsonObj.get("toolsets") != null && !jsonObj.get("toolsets").isJsonNull()) {
        BranchConfigurationsGet200ResponseAllOfToolsets.validateJsonElement(jsonObj.get("toolsets"));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        TriggerEnum.validateJsonElement(jsonObj.get("trigger"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BranchConfigurationsUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BranchConfigurationsUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BranchConfigurationsUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BranchConfigurationsUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BranchConfigurationsUpdateRequest>() {
           @Override
           public void write(JsonWriter out, BranchConfigurationsUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BranchConfigurationsUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             BranchConfigurationsUpdateRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BranchConfigurationsUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BranchConfigurationsUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to BranchConfigurationsUpdateRequest
   */
  public static BranchConfigurationsUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BranchConfigurationsUpdateRequest.class);
  }

  /**
   * Convert an instance of BranchConfigurationsUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

