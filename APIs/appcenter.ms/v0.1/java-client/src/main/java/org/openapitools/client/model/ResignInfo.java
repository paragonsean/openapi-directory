/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The information for a resign attempt.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResignInfo {
  public static final String SERIALIZED_NAME_CERTIFICATE_EXPIRATION = "certificate_expiration";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_EXPIRATION)
  private String certificateExpiration;

  public static final String SERIALIZED_NAME_CERTIFICATE_NAME = "certificate_name";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_NAME)
  private String certificateName;

  public static final String SERIALIZED_NAME_GROUP_NAME = "group_name";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_PROFILE_NAME = "profile_name";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROFILE_TYPE = "profile_type";
  @SerializedName(SERIALIZED_NAME_PROFILE_TYPE)
  private String profileType;

  public ResignInfo() {
  }

  public ResignInfo certificateExpiration(String certificateExpiration) {
    this.certificateExpiration = certificateExpiration;
    return this;
  }

  /**
   * The expiration date of the certificate used for the resign attempt
   * @return certificateExpiration
   */
  @javax.annotation.Nullable
  public String getCertificateExpiration() {
    return certificateExpiration;
  }

  public void setCertificateExpiration(String certificateExpiration) {
    this.certificateExpiration = certificateExpiration;
  }


  public ResignInfo certificateName(String certificateName) {
    this.certificateName = certificateName;
    return this;
  }

  /**
   * The name of the certificate used for the resign attempt
   * @return certificateName
   */
  @javax.annotation.Nullable
  public String getCertificateName() {
    return certificateName;
  }

  public void setCertificateName(String certificateName) {
    this.certificateName = certificateName;
  }


  public ResignInfo groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * The group name of the resign attempt
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public ResignInfo profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * The provisioning profile name of group for the given resign attempt
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public ResignInfo profileType(String profileType) {
    this.profileType = profileType;
    return this;
  }

  /**
   * The provisioning profile type of group for the given resign attempt
   * @return profileType
   */
  @javax.annotation.Nullable
  public String getProfileType() {
    return profileType;
  }

  public void setProfileType(String profileType) {
    this.profileType = profileType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResignInfo resignInfo = (ResignInfo) o;
    return Objects.equals(this.certificateExpiration, resignInfo.certificateExpiration) &&
        Objects.equals(this.certificateName, resignInfo.certificateName) &&
        Objects.equals(this.groupName, resignInfo.groupName) &&
        Objects.equals(this.profileName, resignInfo.profileName) &&
        Objects.equals(this.profileType, resignInfo.profileType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateExpiration, certificateName, groupName, profileName, profileType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResignInfo {\n");
    sb.append("    certificateExpiration: ").append(toIndentedString(certificateExpiration)).append("\n");
    sb.append("    certificateName: ").append(toIndentedString(certificateName)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    profileType: ").append(toIndentedString(profileType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificate_expiration");
    openapiFields.add("certificate_name");
    openapiFields.add("group_name");
    openapiFields.add("profile_name");
    openapiFields.add("profile_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResignInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResignInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResignInfo is not found in the empty JSON string", ResignInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResignInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResignInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificate_expiration") != null && !jsonObj.get("certificate_expiration").isJsonNull()) && !jsonObj.get("certificate_expiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_expiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_expiration").toString()));
      }
      if ((jsonObj.get("certificate_name") != null && !jsonObj.get("certificate_name").isJsonNull()) && !jsonObj.get("certificate_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_name").toString()));
      }
      if ((jsonObj.get("group_name") != null && !jsonObj.get("group_name").isJsonNull()) && !jsonObj.get("group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_name").toString()));
      }
      if ((jsonObj.get("profile_name") != null && !jsonObj.get("profile_name").isJsonNull()) && !jsonObj.get("profile_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_name").toString()));
      }
      if ((jsonObj.get("profile_type") != null && !jsonObj.get("profile_type").isJsonNull()) && !jsonObj.get("profile_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResignInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResignInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResignInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResignInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ResignInfo>() {
           @Override
           public void write(JsonWriter out, ResignInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResignInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResignInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResignInfo
   * @throws IOException if the JSON string is invalid with respect to ResignInfo
   */
  public static ResignInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResignInfo.class);
  }

  /**
   * Convert an instance of ResignInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

