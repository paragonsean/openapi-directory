/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StoreReleasesGetLatest200ResponseInnerDistributionStoresInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an uploaded release
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoresReleaseDetails {
  public static final String SERIALIZED_NAME_ANDROID_MIN_API_LEVEL = "android_min_api_level";
  @SerializedName(SERIALIZED_NAME_ANDROID_MIN_API_LEVEL)
  private String androidMinApiLevel;

  public static final String SERIALIZED_NAME_APP_DISPLAY_NAME = "app_display_name";
  @SerializedName(SERIALIZED_NAME_APP_DISPLAY_NAME)
  private String appDisplayName;

  public static final String SERIALIZED_NAME_APP_NAME = "app_name";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_BUNDLE_IDENTIFIER = "bundle_identifier";
  @SerializedName(SERIALIZED_NAME_BUNDLE_IDENTIFIER)
  private String bundleIdentifier;

  public static final String SERIALIZED_NAME_DISTRIBUTION_STORES = "distribution_stores";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_STORES)
  private List<StoreReleasesGetLatest200ResponseInnerDistributionStoresInner> distributionStores = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  /**
   * The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
   */
  @JsonAdapter(InstallUrlEnum.Adapter.class)
  public enum InstallUrlEnum {
    GROUP("group"),
    
    STORE("store");

    private String value;

    InstallUrlEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstallUrlEnum fromValue(String value) {
      for (InstallUrlEnum b : InstallUrlEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstallUrlEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstallUrlEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstallUrlEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstallUrlEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstallUrlEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTALL_URL = "install_url";
  @SerializedName(SERIALIZED_NAME_INSTALL_URL)
  private InstallUrlEnum installUrl;

  public static final String SERIALIZED_NAME_MIN_OS = "min_os";
  @SerializedName(SERIALIZED_NAME_MIN_OS)
  private String minOs;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "release_notes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  private String releaseNotes;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "short_version";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  /**
   * OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#39;available&#39; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("available"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public StoresReleaseDetails() {
  }

  public StoresReleaseDetails androidMinApiLevel(String androidMinApiLevel) {
    this.androidMinApiLevel = androidMinApiLevel;
    return this;
  }

  /**
   * The release&#39;s minimum required Android API level.
   * @return androidMinApiLevel
   */
  @javax.annotation.Nullable
  public String getAndroidMinApiLevel() {
    return androidMinApiLevel;
  }

  public void setAndroidMinApiLevel(String androidMinApiLevel) {
    this.androidMinApiLevel = androidMinApiLevel;
  }


  public StoresReleaseDetails appDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
    return this;
  }

  /**
   * The app&#39;s display name.
   * @return appDisplayName
   */
  @javax.annotation.Nullable
  public String getAppDisplayName() {
    return appDisplayName;
  }

  public void setAppDisplayName(String appDisplayName) {
    this.appDisplayName = appDisplayName;
  }


  public StoresReleaseDetails appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * The app&#39;s name (extracted from the uploaded release).
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public StoresReleaseDetails bundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
    return this;
  }

  /**
   * The identifier of the apps bundle.
   * @return bundleIdentifier
   */
  @javax.annotation.Nullable
  public String getBundleIdentifier() {
    return bundleIdentifier;
  }

  public void setBundleIdentifier(String bundleIdentifier) {
    this.bundleIdentifier = bundleIdentifier;
  }


  public StoresReleaseDetails distributionStores(List<StoreReleasesGetLatest200ResponseInnerDistributionStoresInner> distributionStores) {
    this.distributionStores = distributionStores;
    return this;
  }

  public StoresReleaseDetails addDistributionStoresItem(StoreReleasesGetLatest200ResponseInnerDistributionStoresInner distributionStoresItem) {
    if (this.distributionStores == null) {
      this.distributionStores = new ArrayList<>();
    }
    this.distributionStores.add(distributionStoresItem);
    return this;
  }

  /**
   * a list of distribution stores that are associated with this release.
   * @return distributionStores
   */
  @javax.annotation.Nullable
  public List<StoreReleasesGetLatest200ResponseInnerDistributionStoresInner> getDistributionStores() {
    return distributionStores;
  }

  public void setDistributionStores(List<StoreReleasesGetLatest200ResponseInnerDistributionStoresInner> distributionStores) {
    this.distributionStores = distributionStores;
  }


  public StoresReleaseDetails downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * The URL that hosts the binary for this release.
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public StoresReleaseDetails fingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
    return this;
  }

  /**
   * MD5 checksum of the release binary.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }

  public void setFingerprint(String fingerprint) {
    this.fingerprint = fingerprint;
  }


  public StoresReleaseDetails id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * ID identifying this unique release.
   * @return id
   */
  @javax.annotation.Nullable
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public StoresReleaseDetails installUrl(InstallUrlEnum installUrl) {
    this.installUrl = installUrl;
    return this;
  }

  /**
   * The href required to install a release on a mobile device. On iOS devices will be prefixed with &#x60;itms-services://?action&#x3D;download-manifest&amp;url&#x3D;&#x60;
   * @return installUrl
   */
  @javax.annotation.Nullable
  public InstallUrlEnum getInstallUrl() {
    return installUrl;
  }

  public void setInstallUrl(InstallUrlEnum installUrl) {
    this.installUrl = installUrl;
  }


  public StoresReleaseDetails minOs(String minOs) {
    this.minOs = minOs;
    return this;
  }

  /**
   * The release&#39;s minimum required operating system.
   * @return minOs
   */
  @javax.annotation.Nullable
  public String getMinOs() {
    return minOs;
  }

  public void setMinOs(String minOs) {
    this.minOs = minOs;
  }


  public StoresReleaseDetails releaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  /**
   * The release&#39;s release notes.
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  public StoresReleaseDetails shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * The release&#39;s short version.&lt;br&gt; For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
   * @return shortVersion
   */
  @javax.annotation.Nullable
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public StoresReleaseDetails size(BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * The release&#39;s size in bytes.
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public StoresReleaseDetails status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any &#39;available&#39; release will be associated with the default distribution group of an app.&lt;/br&gt; The release state.&lt;br&gt; &lt;b&gt;available&lt;/b&gt;: The uploaded release has been distributed.&lt;br&gt; &lt;b&gt;unavailable&lt;/b&gt;: The uploaded release is not visible to the user. &lt;br&gt; 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public StoresReleaseDetails uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   * @return uploadedAt
   */
  @javax.annotation.Nullable
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public StoresReleaseDetails version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release&#39;s version.&lt;br&gt; For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoresReleaseDetails storesReleaseDetails = (StoresReleaseDetails) o;
    return Objects.equals(this.androidMinApiLevel, storesReleaseDetails.androidMinApiLevel) &&
        Objects.equals(this.appDisplayName, storesReleaseDetails.appDisplayName) &&
        Objects.equals(this.appName, storesReleaseDetails.appName) &&
        Objects.equals(this.bundleIdentifier, storesReleaseDetails.bundleIdentifier) &&
        Objects.equals(this.distributionStores, storesReleaseDetails.distributionStores) &&
        Objects.equals(this.downloadUrl, storesReleaseDetails.downloadUrl) &&
        Objects.equals(this.fingerprint, storesReleaseDetails.fingerprint) &&
        Objects.equals(this.id, storesReleaseDetails.id) &&
        Objects.equals(this.installUrl, storesReleaseDetails.installUrl) &&
        Objects.equals(this.minOs, storesReleaseDetails.minOs) &&
        Objects.equals(this.releaseNotes, storesReleaseDetails.releaseNotes) &&
        Objects.equals(this.shortVersion, storesReleaseDetails.shortVersion) &&
        Objects.equals(this.size, storesReleaseDetails.size) &&
        Objects.equals(this.status, storesReleaseDetails.status) &&
        Objects.equals(this.uploadedAt, storesReleaseDetails.uploadedAt) &&
        Objects.equals(this.version, storesReleaseDetails.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidMinApiLevel, appDisplayName, appName, bundleIdentifier, distributionStores, downloadUrl, fingerprint, id, installUrl, minOs, releaseNotes, shortVersion, size, status, uploadedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoresReleaseDetails {\n");
    sb.append("    androidMinApiLevel: ").append(toIndentedString(androidMinApiLevel)).append("\n");
    sb.append("    appDisplayName: ").append(toIndentedString(appDisplayName)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    bundleIdentifier: ").append(toIndentedString(bundleIdentifier)).append("\n");
    sb.append("    distributionStores: ").append(toIndentedString(distributionStores)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installUrl: ").append(toIndentedString(installUrl)).append("\n");
    sb.append("    minOs: ").append(toIndentedString(minOs)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("android_min_api_level");
    openapiFields.add("app_display_name");
    openapiFields.add("app_name");
    openapiFields.add("bundle_identifier");
    openapiFields.add("distribution_stores");
    openapiFields.add("download_url");
    openapiFields.add("fingerprint");
    openapiFields.add("id");
    openapiFields.add("install_url");
    openapiFields.add("min_os");
    openapiFields.add("release_notes");
    openapiFields.add("short_version");
    openapiFields.add("size");
    openapiFields.add("status");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoresReleaseDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoresReleaseDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoresReleaseDetails is not found in the empty JSON string", StoresReleaseDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoresReleaseDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoresReleaseDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("android_min_api_level") != null && !jsonObj.get("android_min_api_level").isJsonNull()) && !jsonObj.get("android_min_api_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `android_min_api_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("android_min_api_level").toString()));
      }
      if ((jsonObj.get("app_display_name") != null && !jsonObj.get("app_display_name").isJsonNull()) && !jsonObj.get("app_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_display_name").toString()));
      }
      if ((jsonObj.get("app_name") != null && !jsonObj.get("app_name").isJsonNull()) && !jsonObj.get("app_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_name").toString()));
      }
      if ((jsonObj.get("bundle_identifier") != null && !jsonObj.get("bundle_identifier").isJsonNull()) && !jsonObj.get("bundle_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_identifier").toString()));
      }
      if (jsonObj.get("distribution_stores") != null && !jsonObj.get("distribution_stores").isJsonNull()) {
        JsonArray jsonArraydistributionStores = jsonObj.getAsJsonArray("distribution_stores");
        if (jsonArraydistributionStores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distribution_stores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distribution_stores` to be an array in the JSON string but got `%s`", jsonObj.get("distribution_stores").toString()));
          }

          // validate the optional field `distribution_stores` (array)
          for (int i = 0; i < jsonArraydistributionStores.size(); i++) {
            StoreReleasesGetLatest200ResponseInnerDistributionStoresInner.validateJsonElement(jsonArraydistributionStores.get(i));
          };
        }
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("install_url") != null && !jsonObj.get("install_url").isJsonNull()) && !jsonObj.get("install_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `install_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("install_url").toString()));
      }
      // validate the optional field `install_url`
      if (jsonObj.get("install_url") != null && !jsonObj.get("install_url").isJsonNull()) {
        InstallUrlEnum.validateJsonElement(jsonObj.get("install_url"));
      }
      if ((jsonObj.get("min_os") != null && !jsonObj.get("min_os").isJsonNull()) && !jsonObj.get("min_os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `min_os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("min_os").toString()));
      }
      if ((jsonObj.get("release_notes") != null && !jsonObj.get("release_notes").isJsonNull()) && !jsonObj.get("release_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_notes").toString()));
      }
      if ((jsonObj.get("short_version") != null && !jsonObj.get("short_version").isJsonNull()) && !jsonObj.get("short_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_version").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("uploaded_at") != null && !jsonObj.get("uploaded_at").isJsonNull()) && !jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoresReleaseDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoresReleaseDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoresReleaseDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoresReleaseDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<StoresReleaseDetails>() {
           @Override
           public void write(JsonWriter out, StoresReleaseDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoresReleaseDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoresReleaseDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoresReleaseDetails
   * @throws IOException if the JSON string is invalid with respect to StoresReleaseDetails
   */
  public static StoresReleaseDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoresReleaseDetails.class);
  }

  /**
   * Convert an instance of StoresReleaseDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

