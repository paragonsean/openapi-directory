/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AppInvitationsList200ResponseDistributionGroup;
import org.openapitools.client.model.AppInvitationsList200ResponseInvitedBy;
import org.openapitools.client.model.AppsList200ResponseInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AppInvitationDetailResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppInvitationDetailResponse {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  private AppsList200ResponseInner app;

  public static final String SERIALIZED_NAME_APP_COUNT = "app_count";
  @SerializedName(SERIALIZED_NAME_APP_COUNT)
  private BigDecimal appCount;

  public static final String SERIALIZED_NAME_DISTRIBUTION_GROUP = "distribution_group";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_GROUP)
  private AppInvitationsList200ResponseDistributionGroup distributionGroup;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  /**
   * The invitation type
   */
  @JsonAdapter(InviteTypeEnum.Adapter.class)
  public enum InviteTypeEnum {
    DEVELOPER("developer"),
    
    TESTER("tester");

    private String value;

    InviteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InviteTypeEnum fromValue(String value) {
      for (InviteTypeEnum b : InviteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InviteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InviteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InviteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InviteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InviteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVITE_TYPE = "invite_type";
  @SerializedName(SERIALIZED_NAME_INVITE_TYPE)
  private InviteTypeEnum inviteType;

  public static final String SERIALIZED_NAME_INVITED_BY = "invited_by";
  @SerializedName(SERIALIZED_NAME_INVITED_BY)
  private AppInvitationsList200ResponseInvitedBy invitedBy;

  public static final String SERIALIZED_NAME_IS_EXISTING_USER = "is_existing_user";
  @SerializedName(SERIALIZED_NAME_IS_EXISTING_USER)
  private Boolean isExistingUser;

  /**
   * Gets or Sets permissions
   */
  @JsonAdapter(PermissionsEnum.Adapter.class)
  public enum PermissionsEnum {
    MANAGER("manager"),
    
    DEVELOPER("developer"),
    
    VIEWER("viewer"),
    
    TESTER("tester");

    private String value;

    PermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionsEnum fromValue(String value) {
      for (PermissionsEnum b : PermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<PermissionsEnum> permissions = new ArrayList<>();

  public AppInvitationDetailResponse() {
  }

  public AppInvitationDetailResponse app(AppsList200ResponseInner app) {
    this.app = app;
    return this;
  }

  /**
   * Get app
   * @return app
   */
  @javax.annotation.Nonnull
  public AppsList200ResponseInner getApp() {
    return app;
  }

  public void setApp(AppsList200ResponseInner app) {
    this.app = app;
  }


  public AppInvitationDetailResponse appCount(BigDecimal appCount) {
    this.appCount = appCount;
    return this;
  }

  /**
   * The number of apps in the group
   * @return appCount
   */
  @javax.annotation.Nullable
  public BigDecimal getAppCount() {
    return appCount;
  }

  public void setAppCount(BigDecimal appCount) {
    this.appCount = appCount;
  }


  public AppInvitationDetailResponse distributionGroup(AppInvitationsList200ResponseDistributionGroup distributionGroup) {
    this.distributionGroup = distributionGroup;
    return this;
  }

  /**
   * Get distributionGroup
   * @return distributionGroup
   */
  @javax.annotation.Nullable
  public AppInvitationsList200ResponseDistributionGroup getDistributionGroup() {
    return distributionGroup;
  }

  public void setDistributionGroup(AppInvitationsList200ResponseDistributionGroup distributionGroup) {
    this.distributionGroup = distributionGroup;
  }


  public AppInvitationDetailResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email address of the invited user
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public AppInvitationDetailResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID (UUID) of the invitation
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public AppInvitationDetailResponse inviteType(InviteTypeEnum inviteType) {
    this.inviteType = inviteType;
    return this;
  }

  /**
   * The invitation type
   * @return inviteType
   */
  @javax.annotation.Nonnull
  public InviteTypeEnum getInviteType() {
    return inviteType;
  }

  public void setInviteType(InviteTypeEnum inviteType) {
    this.inviteType = inviteType;
  }


  public AppInvitationDetailResponse invitedBy(AppInvitationsList200ResponseInvitedBy invitedBy) {
    this.invitedBy = invitedBy;
    return this;
  }

  /**
   * Get invitedBy
   * @return invitedBy
   */
  @javax.annotation.Nonnull
  public AppInvitationsList200ResponseInvitedBy getInvitedBy() {
    return invitedBy;
  }

  public void setInvitedBy(AppInvitationsList200ResponseInvitedBy invitedBy) {
    this.invitedBy = invitedBy;
  }


  public AppInvitationDetailResponse isExistingUser(Boolean isExistingUser) {
    this.isExistingUser = isExistingUser;
    return this;
  }

  /**
   * Indicates whether the invited user already exists
   * @return isExistingUser
   */
  @javax.annotation.Nonnull
  public Boolean getIsExistingUser() {
    return isExistingUser;
  }

  public void setIsExistingUser(Boolean isExistingUser) {
    this.isExistingUser = isExistingUser;
  }


  public AppInvitationDetailResponse permissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
    return this;
  }

  public AppInvitationDetailResponse addPermissionsItem(PermissionsEnum permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * The permissions the user has for the app
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<PermissionsEnum> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<PermissionsEnum> permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppInvitationDetailResponse appInvitationDetailResponse = (AppInvitationDetailResponse) o;
    return Objects.equals(this.app, appInvitationDetailResponse.app) &&
        Objects.equals(this.appCount, appInvitationDetailResponse.appCount) &&
        Objects.equals(this.distributionGroup, appInvitationDetailResponse.distributionGroup) &&
        Objects.equals(this.email, appInvitationDetailResponse.email) &&
        Objects.equals(this.id, appInvitationDetailResponse.id) &&
        Objects.equals(this.inviteType, appInvitationDetailResponse.inviteType) &&
        Objects.equals(this.invitedBy, appInvitationDetailResponse.invitedBy) &&
        Objects.equals(this.isExistingUser, appInvitationDetailResponse.isExistingUser) &&
        Objects.equals(this.permissions, appInvitationDetailResponse.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, appCount, distributionGroup, email, id, inviteType, invitedBy, isExistingUser, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppInvitationDetailResponse {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    appCount: ").append(toIndentedString(appCount)).append("\n");
    sb.append("    distributionGroup: ").append(toIndentedString(distributionGroup)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inviteType: ").append(toIndentedString(inviteType)).append("\n");
    sb.append("    invitedBy: ").append(toIndentedString(invitedBy)).append("\n");
    sb.append("    isExistingUser: ").append(toIndentedString(isExistingUser)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app");
    openapiFields.add("app_count");
    openapiFields.add("distribution_group");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("invite_type");
    openapiFields.add("invited_by");
    openapiFields.add("is_existing_user");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("invite_type");
    openapiRequiredFields.add("invited_by");
    openapiRequiredFields.add("is_existing_user");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppInvitationDetailResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppInvitationDetailResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppInvitationDetailResponse is not found in the empty JSON string", AppInvitationDetailResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppInvitationDetailResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppInvitationDetailResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppInvitationDetailResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `app`
      AppsList200ResponseInner.validateJsonElement(jsonObj.get("app"));
      // validate the optional field `distribution_group`
      if (jsonObj.get("distribution_group") != null && !jsonObj.get("distribution_group").isJsonNull()) {
        AppInvitationsList200ResponseDistributionGroup.validateJsonElement(jsonObj.get("distribution_group"));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("invite_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invite_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invite_type").toString()));
      }
      // validate the required field `invite_type`
      InviteTypeEnum.validateJsonElement(jsonObj.get("invite_type"));
      // validate the required field `invited_by`
      AppInvitationsList200ResponseInvitedBy.validateJsonElement(jsonObj.get("invited_by"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull() && !jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppInvitationDetailResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppInvitationDetailResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppInvitationDetailResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppInvitationDetailResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AppInvitationDetailResponse>() {
           @Override
           public void write(JsonWriter out, AppInvitationDetailResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppInvitationDetailResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppInvitationDetailResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppInvitationDetailResponse
   * @throws IOException if the JSON string is invalid with respect to AppInvitationDetailResponse
   */
  public static AppInvitationDetailResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppInvitationDetailResponse.class);
  }

  /**
   * Convert an instance of AppInvitationDetailResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

