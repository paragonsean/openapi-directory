/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestRunSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of a single test series
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestSeries {
  public static final String SERIALIZED_NAME_MOST_RECENT_ACTIVITY = "mostRecentActivity";
  @SerializedName(SERIALIZED_NAME_MOST_RECENT_ACTIVITY)
  private String mostRecentActivity;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TEST_RUNS = "testRuns";
  @SerializedName(SERIALIZED_NAME_TEST_RUNS)
  private List<TestRunSummary> testRuns = new ArrayList<>();

  public TestSeries() {
  }

  public TestSeries mostRecentActivity(String mostRecentActivity) {
    this.mostRecentActivity = mostRecentActivity;
    return this;
  }

  /**
   * Date of the latest test run that used this test series
   * @return mostRecentActivity
   */
  @javax.annotation.Nullable
  public String getMostRecentActivity() {
    return mostRecentActivity;
  }

  public void setMostRecentActivity(String mostRecentActivity) {
    this.mostRecentActivity = mostRecentActivity;
  }


  public TestSeries name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the test series
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TestSeries slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Unique, human-readable identifier of the test series
   * @return slug
   */
  @javax.annotation.Nonnull
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public TestSeries testRuns(List<TestRunSummary> testRuns) {
    this.testRuns = testRuns;
    return this;
  }

  public TestSeries addTestRunsItem(TestRunSummary testRunsItem) {
    if (this.testRuns == null) {
      this.testRuns = new ArrayList<>();
    }
    this.testRuns.add(testRunsItem);
    return this;
  }

  /**
   * Most recent test runs
   * @return testRuns
   */
  @javax.annotation.Nullable
  public List<TestRunSummary> getTestRuns() {
    return testRuns;
  }

  public void setTestRuns(List<TestRunSummary> testRuns) {
    this.testRuns = testRuns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestSeries testSeries = (TestSeries) o;
    return Objects.equals(this.mostRecentActivity, testSeries.mostRecentActivity) &&
        Objects.equals(this.name, testSeries.name) &&
        Objects.equals(this.slug, testSeries.slug) &&
        Objects.equals(this.testRuns, testSeries.testRuns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mostRecentActivity, name, slug, testRuns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestSeries {\n");
    sb.append("    mostRecentActivity: ").append(toIndentedString(mostRecentActivity)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    testRuns: ").append(toIndentedString(testRuns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mostRecentActivity");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("testRuns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestSeries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestSeries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestSeries is not found in the empty JSON string", TestSeries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestSeries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestSeries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestSeries.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mostRecentActivity") != null && !jsonObj.get("mostRecentActivity").isJsonNull()) && !jsonObj.get("mostRecentActivity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mostRecentActivity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mostRecentActivity").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (jsonObj.get("testRuns") != null && !jsonObj.get("testRuns").isJsonNull()) {
        JsonArray jsonArraytestRuns = jsonObj.getAsJsonArray("testRuns");
        if (jsonArraytestRuns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("testRuns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `testRuns` to be an array in the JSON string but got `%s`", jsonObj.get("testRuns").toString()));
          }

          // validate the optional field `testRuns` (array)
          for (int i = 0; i < jsonArraytestRuns.size(); i++) {
            TestRunSummary.validateJsonElement(jsonArraytestRuns.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestSeries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestSeries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestSeries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestSeries.class));

       return (TypeAdapter<T>) new TypeAdapter<TestSeries>() {
           @Override
           public void write(JsonWriter out, TestSeries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestSeries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestSeries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestSeries
   * @throws IOException if the JSON string is invalid with respect to TestSeries
   */
  public static TestSeries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestSeries.class);
  }

  /**
   * Convert an instance of TestSeries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

