/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CrashDetails;
import org.openapitools.client.model.Stacktrace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Crash
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Crash {
  public static final String SERIALIZED_NAME_BUILD = "build";
  @SerializedName(SERIALIZED_NAME_BUILD)
  private String build;

  public static final String SERIALIZED_NAME_CRASH_ID = "crash_id";
  @SerializedName(SERIALIZED_NAME_CRASH_ID)
  private String crashId;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private CrashDetails details;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private String device;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "device_name";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DISPLAY_ID = "display_id";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ID)
  private String displayId;

  public static final String SERIALIZED_NAME_NEW_CRASH_GROUP_ID = "new_crash_group_id";
  @SerializedName(SERIALIZED_NAME_NEW_CRASH_GROUP_ID)
  private String newCrashGroupId;

  public static final String SERIALIZED_NAME_NEW_CRASH_ID = "new_crash_id";
  @SerializedName(SERIALIZED_NAME_NEW_CRASH_ID)
  private String newCrashId;

  public static final String SERIALIZED_NAME_OS_TYPE = "os_type";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_OS_VERSION = "os_version";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_STACKTRACE = "stacktrace";
  @SerializedName(SERIALIZED_NAME_STACKTRACE)
  private Stacktrace stacktrace;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "user_name";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Crash() {
  }

  public Crash build(String build) {
    this.build = build;
    return this;
  }

  /**
   * 
   * @return build
   */
  @javax.annotation.Nonnull
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }


  public Crash crashId(String crashId) {
    this.crashId = crashId;
    return this;
  }

  /**
   * 
   * @return crashId
   */
  @javax.annotation.Nonnull
  public String getCrashId() {
    return crashId;
  }

  public void setCrashId(String crashId) {
    this.crashId = crashId;
  }


  public Crash details(CrashDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public CrashDetails getDetails() {
    return details;
  }

  public void setDetails(CrashDetails details) {
    this.details = details;
  }


  public Crash device(String device) {
    this.device = device;
    return this;
  }

  /**
   * 
   * @return device
   */
  @javax.annotation.Nonnull
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }


  public Crash deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * 
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public Crash displayId(String displayId) {
    this.displayId = displayId;
    return this;
  }

  /**
   * Get displayId
   * @return displayId
   */
  @javax.annotation.Nullable
  public String getDisplayId() {
    return displayId;
  }

  public void setDisplayId(String displayId) {
    this.displayId = displayId;
  }


  public Crash newCrashGroupId(String newCrashGroupId) {
    this.newCrashGroupId = newCrashGroupId;
    return this;
  }

  /**
   * 
   * @return newCrashGroupId
   */
  @javax.annotation.Nonnull
  public String getNewCrashGroupId() {
    return newCrashGroupId;
  }

  public void setNewCrashGroupId(String newCrashGroupId) {
    this.newCrashGroupId = newCrashGroupId;
  }


  public Crash newCrashId(String newCrashId) {
    this.newCrashId = newCrashId;
    return this;
  }

  /**
   * 
   * @return newCrashId
   */
  @javax.annotation.Nonnull
  public String getNewCrashId() {
    return newCrashId;
  }

  public void setNewCrashId(String newCrashId) {
    this.newCrashId = newCrashId;
  }


  public Crash osType(String osType) {
    this.osType = osType;
    return this;
  }

  /**
   * 
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }

  public void setOsType(String osType) {
    this.osType = osType;
  }


  public Crash osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * 
   * @return osVersion
   */
  @javax.annotation.Nonnull
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public Crash stacktrace(Stacktrace stacktrace) {
    this.stacktrace = stacktrace;
    return this;
  }

  /**
   * Get stacktrace
   * @return stacktrace
   */
  @javax.annotation.Nullable
  public Stacktrace getStacktrace() {
    return stacktrace;
  }

  public void setStacktrace(Stacktrace stacktrace) {
    this.stacktrace = stacktrace;
  }


  public Crash timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public Crash userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  /**
   * 
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }


  public Crash userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * 
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public Crash version(String version) {
    this.version = version;
    return this;
  }

  /**
   * 
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Crash crash = (Crash) o;
    return Objects.equals(this.build, crash.build) &&
        Objects.equals(this.crashId, crash.crashId) &&
        Objects.equals(this.details, crash.details) &&
        Objects.equals(this.device, crash.device) &&
        Objects.equals(this.deviceName, crash.deviceName) &&
        Objects.equals(this.displayId, crash.displayId) &&
        Objects.equals(this.newCrashGroupId, crash.newCrashGroupId) &&
        Objects.equals(this.newCrashId, crash.newCrashId) &&
        Objects.equals(this.osType, crash.osType) &&
        Objects.equals(this.osVersion, crash.osVersion) &&
        Objects.equals(this.stacktrace, crash.stacktrace) &&
        Objects.equals(this.timestamp, crash.timestamp) &&
        Objects.equals(this.userEmail, crash.userEmail) &&
        Objects.equals(this.userName, crash.userName) &&
        Objects.equals(this.version, crash.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(build, crashId, details, device, deviceName, displayId, newCrashGroupId, newCrashId, osType, osVersion, stacktrace, timestamp, userEmail, userName, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Crash {\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    crashId: ").append(toIndentedString(crashId)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    newCrashGroupId: ").append(toIndentedString(newCrashGroupId)).append("\n");
    sb.append("    newCrashId: ").append(toIndentedString(newCrashId)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    stacktrace: ").append(toIndentedString(stacktrace)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("build");
    openapiFields.add("crash_id");
    openapiFields.add("details");
    openapiFields.add("device");
    openapiFields.add("device_name");
    openapiFields.add("display_id");
    openapiFields.add("new_crash_group_id");
    openapiFields.add("new_crash_id");
    openapiFields.add("os_type");
    openapiFields.add("os_version");
    openapiFields.add("stacktrace");
    openapiFields.add("timestamp");
    openapiFields.add("user_email");
    openapiFields.add("user_name");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("build");
    openapiRequiredFields.add("crash_id");
    openapiRequiredFields.add("device");
    openapiRequiredFields.add("new_crash_group_id");
    openapiRequiredFields.add("new_crash_id");
    openapiRequiredFields.add("os_version");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("user_name");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Crash
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Crash.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Crash is not found in the empty JSON string", Crash.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Crash.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Crash` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Crash.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("build").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build").toString()));
      }
      if (!jsonObj.get("crash_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crash_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crash_id").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        CrashDetails.validateJsonElement(jsonObj.get("details"));
      }
      if (!jsonObj.get("device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device").toString()));
      }
      if ((jsonObj.get("device_name") != null && !jsonObj.get("device_name").isJsonNull()) && !jsonObj.get("device_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device_name").toString()));
      }
      if ((jsonObj.get("display_id") != null && !jsonObj.get("display_id").isJsonNull()) && !jsonObj.get("display_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_id").toString()));
      }
      if (!jsonObj.get("new_crash_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_crash_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_crash_group_id").toString()));
      }
      if (!jsonObj.get("new_crash_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_crash_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_crash_id").toString()));
      }
      if ((jsonObj.get("os_type") != null && !jsonObj.get("os_type").isJsonNull()) && !jsonObj.get("os_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_type").toString()));
      }
      if (!jsonObj.get("os_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os_version").toString()));
      }
      // validate the optional field `stacktrace`
      if (jsonObj.get("stacktrace") != null && !jsonObj.get("stacktrace").isJsonNull()) {
        Stacktrace.validateJsonElement(jsonObj.get("stacktrace"));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
      if (!jsonObj.get("user_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_name").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Crash.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Crash' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Crash> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Crash.class));

       return (TypeAdapter<T>) new TypeAdapter<Crash>() {
           @Override
           public void write(JsonWriter out, Crash value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Crash read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Crash given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Crash
   * @throws IOException if the JSON string is invalid with respect to Crash
   */
  public static Crash fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Crash.class);
  }

  /**
   * Convert an instance of Crash to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

