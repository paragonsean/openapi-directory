/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Build configuration for Xamarin projects
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BranchConfigurationsGet200ResponseAllOfToolsetsXamarin {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private String args;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private String _configuration;

  public static final String SERIALIZED_NAME_IS_SIM_BUILD = "isSimBuild";
  @SerializedName(SERIALIZED_NAME_IS_SIM_BUILD)
  private Boolean isSimBuild;

  public static final String SERIALIZED_NAME_MONO_VERSION = "monoVersion";
  @SerializedName(SERIALIZED_NAME_MONO_VERSION)
  private String monoVersion;

  public static final String SERIALIZED_NAME_P12_FILE = "p12File";
  @SerializedName(SERIALIZED_NAME_P12_FILE)
  private String p12File;

  public static final String SERIALIZED_NAME_P12_PWD = "p12Pwd";
  @SerializedName(SERIALIZED_NAME_P12_PWD)
  private String p12Pwd;

  public static final String SERIALIZED_NAME_PROV_PROFILE = "provProfile";
  @SerializedName(SERIALIZED_NAME_PROV_PROFILE)
  private String provProfile;

  public static final String SERIALIZED_NAME_SDK_BUNDLE = "sdkBundle";
  @SerializedName(SERIALIZED_NAME_SDK_BUNDLE)
  private String sdkBundle;

  public static final String SERIALIZED_NAME_SLN_PATH = "slnPath";
  @SerializedName(SERIALIZED_NAME_SLN_PATH)
  private String slnPath;

  public static final String SERIALIZED_NAME_SYMLINK = "symlink";
  @SerializedName(SERIALIZED_NAME_SYMLINK)
  private String symlink;

  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin() {
  }

  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin args(String args) {
    this.args = args;
    return this;
  }

  /**
   * Get args
   * @return args
   */
  @javax.annotation.Nullable
  public String getArgs() {
    return args;
  }

  public void setArgs(String args) {
    this.args = args;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin _configuration(String _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public String getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(String _configuration) {
    this._configuration = _configuration;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin isSimBuild(Boolean isSimBuild) {
    this.isSimBuild = isSimBuild;
    return this;
  }

  /**
   * Get isSimBuild
   * @return isSimBuild
   */
  @javax.annotation.Nullable
  public Boolean getIsSimBuild() {
    return isSimBuild;
  }

  public void setIsSimBuild(Boolean isSimBuild) {
    this.isSimBuild = isSimBuild;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin monoVersion(String monoVersion) {
    this.monoVersion = monoVersion;
    return this;
  }

  /**
   * Get monoVersion
   * @return monoVersion
   */
  @javax.annotation.Nullable
  public String getMonoVersion() {
    return monoVersion;
  }

  public void setMonoVersion(String monoVersion) {
    this.monoVersion = monoVersion;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin p12File(String p12File) {
    this.p12File = p12File;
    return this;
  }

  /**
   * Get p12File
   * @return p12File
   */
  @javax.annotation.Nullable
  public String getP12File() {
    return p12File;
  }

  public void setP12File(String p12File) {
    this.p12File = p12File;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin p12Pwd(String p12Pwd) {
    this.p12Pwd = p12Pwd;
    return this;
  }

  /**
   * Get p12Pwd
   * @return p12Pwd
   */
  @javax.annotation.Nullable
  public String getP12Pwd() {
    return p12Pwd;
  }

  public void setP12Pwd(String p12Pwd) {
    this.p12Pwd = p12Pwd;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin provProfile(String provProfile) {
    this.provProfile = provProfile;
    return this;
  }

  /**
   * Get provProfile
   * @return provProfile
   */
  @javax.annotation.Nullable
  public String getProvProfile() {
    return provProfile;
  }

  public void setProvProfile(String provProfile) {
    this.provProfile = provProfile;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin sdkBundle(String sdkBundle) {
    this.sdkBundle = sdkBundle;
    return this;
  }

  /**
   * Get sdkBundle
   * @return sdkBundle
   */
  @javax.annotation.Nullable
  public String getSdkBundle() {
    return sdkBundle;
  }

  public void setSdkBundle(String sdkBundle) {
    this.sdkBundle = sdkBundle;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin slnPath(String slnPath) {
    this.slnPath = slnPath;
    return this;
  }

  /**
   * Get slnPath
   * @return slnPath
   */
  @javax.annotation.Nullable
  public String getSlnPath() {
    return slnPath;
  }

  public void setSlnPath(String slnPath) {
    this.slnPath = slnPath;
  }


  public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin symlink(String symlink) {
    this.symlink = symlink;
    return this;
  }

  /**
   * Symlink of the SDK Bundle and Mono installation. The build will use the associated Mono bundled with related Xamarin SDK. If both symlink and monoVersion or sdkBundle are passed, the symlink is taking precedence. If non-existing symlink is passed, the current stable Mono version will be configured for building. 
   * @return symlink
   */
  @javax.annotation.Nullable
  public String getSymlink() {
    return symlink;
  }

  public void setSymlink(String symlink) {
    this.symlink = symlink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BranchConfigurationsGet200ResponseAllOfToolsetsXamarin branchConfigurationsGet200ResponseAllOfToolsetsXamarin = (BranchConfigurationsGet200ResponseAllOfToolsetsXamarin) o;
    return Objects.equals(this.args, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.args) &&
        Objects.equals(this._configuration, branchConfigurationsGet200ResponseAllOfToolsetsXamarin._configuration) &&
        Objects.equals(this.isSimBuild, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.isSimBuild) &&
        Objects.equals(this.monoVersion, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.monoVersion) &&
        Objects.equals(this.p12File, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.p12File) &&
        Objects.equals(this.p12Pwd, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.p12Pwd) &&
        Objects.equals(this.provProfile, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.provProfile) &&
        Objects.equals(this.sdkBundle, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.sdkBundle) &&
        Objects.equals(this.slnPath, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.slnPath) &&
        Objects.equals(this.symlink, branchConfigurationsGet200ResponseAllOfToolsetsXamarin.symlink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, _configuration, isSimBuild, monoVersion, p12File, p12Pwd, provProfile, sdkBundle, slnPath, symlink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BranchConfigurationsGet200ResponseAllOfToolsetsXamarin {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    isSimBuild: ").append(toIndentedString(isSimBuild)).append("\n");
    sb.append("    monoVersion: ").append(toIndentedString(monoVersion)).append("\n");
    sb.append("    p12File: ").append(toIndentedString(p12File)).append("\n");
    sb.append("    p12Pwd: ").append(toIndentedString(p12Pwd)).append("\n");
    sb.append("    provProfile: ").append(toIndentedString(provProfile)).append("\n");
    sb.append("    sdkBundle: ").append(toIndentedString(sdkBundle)).append("\n");
    sb.append("    slnPath: ").append(toIndentedString(slnPath)).append("\n");
    sb.append("    symlink: ").append(toIndentedString(symlink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("args");
    openapiFields.add("configuration");
    openapiFields.add("isSimBuild");
    openapiFields.add("monoVersion");
    openapiFields.add("p12File");
    openapiFields.add("p12Pwd");
    openapiFields.add("provProfile");
    openapiFields.add("sdkBundle");
    openapiFields.add("slnPath");
    openapiFields.add("symlink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BranchConfigurationsGet200ResponseAllOfToolsetsXamarin
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BranchConfigurationsGet200ResponseAllOfToolsetsXamarin is not found in the empty JSON string", BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BranchConfigurationsGet200ResponseAllOfToolsetsXamarin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("args") != null && !jsonObj.get("args").isJsonNull()) && !jsonObj.get("args").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `args` to be a primitive type in the JSON string but got `%s`", jsonObj.get("args").toString()));
      }
      if ((jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) && !jsonObj.get("configuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
      }
      if ((jsonObj.get("monoVersion") != null && !jsonObj.get("monoVersion").isJsonNull()) && !jsonObj.get("monoVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monoVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monoVersion").toString()));
      }
      if ((jsonObj.get("p12File") != null && !jsonObj.get("p12File").isJsonNull()) && !jsonObj.get("p12File").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p12File` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p12File").toString()));
      }
      if ((jsonObj.get("p12Pwd") != null && !jsonObj.get("p12Pwd").isJsonNull()) && !jsonObj.get("p12Pwd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p12Pwd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p12Pwd").toString()));
      }
      if ((jsonObj.get("provProfile") != null && !jsonObj.get("provProfile").isJsonNull()) && !jsonObj.get("provProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provProfile").toString()));
      }
      if ((jsonObj.get("sdkBundle") != null && !jsonObj.get("sdkBundle").isJsonNull()) && !jsonObj.get("sdkBundle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkBundle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkBundle").toString()));
      }
      if ((jsonObj.get("slnPath") != null && !jsonObj.get("slnPath").isJsonNull()) && !jsonObj.get("slnPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slnPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slnPath").toString()));
      }
      if ((jsonObj.get("symlink") != null && !jsonObj.get("symlink").isJsonNull()) && !jsonObj.get("symlink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symlink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symlink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BranchConfigurationsGet200ResponseAllOfToolsetsXamarin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BranchConfigurationsGet200ResponseAllOfToolsetsXamarin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.class));

       return (TypeAdapter<T>) new TypeAdapter<BranchConfigurationsGet200ResponseAllOfToolsetsXamarin>() {
           @Override
           public void write(JsonWriter out, BranchConfigurationsGet200ResponseAllOfToolsetsXamarin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BranchConfigurationsGet200ResponseAllOfToolsetsXamarin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BranchConfigurationsGet200ResponseAllOfToolsetsXamarin given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BranchConfigurationsGet200ResponseAllOfToolsetsXamarin
   * @throws IOException if the JSON string is invalid with respect to BranchConfigurationsGet200ResponseAllOfToolsetsXamarin
   */
  public static BranchConfigurationsGet200ResponseAllOfToolsetsXamarin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BranchConfigurationsGet200ResponseAllOfToolsetsXamarin.class);
  }

  /**
   * Convert an instance of BranchConfigurationsGet200ResponseAllOfToolsetsXamarin to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

