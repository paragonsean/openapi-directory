/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DistributionGroupWithUsersResponseAadGroupsInner;
import org.openapitools.client.model.DistributionGroupsListUsers200ResponseInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DistributionGroupWithUsersResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DistributionGroupWithUsersResponse {
  public static final String SERIALIZED_NAME_AAD_GROUPS = "aad_groups";
  @SerializedName(SERIALIZED_NAME_AAD_GROUPS)
  private List<DistributionGroupWithUsersResponseAadGroupsInner> aadGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "is_public";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFIED_USER_COUNT = "notified_user_count";
  @SerializedName(SERIALIZED_NAME_NOTIFIED_USER_COUNT)
  private BigDecimal notifiedUserCount;

  public static final String SERIALIZED_NAME_TOTAL_GROUPS_COUNT = "total_groups_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROUPS_COUNT)
  private BigDecimal totalGroupsCount;

  public static final String SERIALIZED_NAME_TOTAL_USER_COUNT = "total_user_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_USER_COUNT)
  private BigDecimal totalUserCount;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<DistributionGroupsListUsers200ResponseInner> users = new ArrayList<>();

  public DistributionGroupWithUsersResponse() {
  }

  public DistributionGroupWithUsersResponse aadGroups(List<DistributionGroupWithUsersResponseAadGroupsInner> aadGroups) {
    this.aadGroups = aadGroups;
    return this;
  }

  public DistributionGroupWithUsersResponse addAadGroupsItem(DistributionGroupWithUsersResponseAadGroupsInner aadGroupsItem) {
    if (this.aadGroups == null) {
      this.aadGroups = new ArrayList<>();
    }
    this.aadGroups.add(aadGroupsItem);
    return this;
  }

  /**
   * The distribution group aad groups
   * @return aadGroups
   */
  @javax.annotation.Nullable
  public List<DistributionGroupWithUsersResponseAadGroupsInner> getAadGroups() {
    return aadGroups;
  }

  public void setAadGroups(List<DistributionGroupWithUsersResponseAadGroupsInner> aadGroups) {
    this.aadGroups = aadGroups;
  }


  public DistributionGroupWithUsersResponse id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID of the distribution group
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public DistributionGroupWithUsersResponse isPublic(Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * Whether the distribution group is public
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public DistributionGroupWithUsersResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the distribution group used in URLs
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DistributionGroupWithUsersResponse notifiedUserCount(BigDecimal notifiedUserCount) {
    this.notifiedUserCount = notifiedUserCount;
    return this;
  }

  /**
   * The count of non-pending users in the distribution group who will be notified by new releases
   * @return notifiedUserCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getNotifiedUserCount() {
    return notifiedUserCount;
  }

  public void setNotifiedUserCount(BigDecimal notifiedUserCount) {
    this.notifiedUserCount = notifiedUserCount;
  }


  public DistributionGroupWithUsersResponse totalGroupsCount(BigDecimal totalGroupsCount) {
    this.totalGroupsCount = totalGroupsCount;
    return this;
  }

  /**
   * The count of aad groups in the distribution group
   * @return totalGroupsCount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalGroupsCount() {
    return totalGroupsCount;
  }

  public void setTotalGroupsCount(BigDecimal totalGroupsCount) {
    this.totalGroupsCount = totalGroupsCount;
  }


  public DistributionGroupWithUsersResponse totalUserCount(BigDecimal totalUserCount) {
    this.totalUserCount = totalUserCount;
    return this;
  }

  /**
   * The count of users in the distribution group
   * @return totalUserCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalUserCount() {
    return totalUserCount;
  }

  public void setTotalUserCount(BigDecimal totalUserCount) {
    this.totalUserCount = totalUserCount;
  }


  public DistributionGroupWithUsersResponse users(List<DistributionGroupsListUsers200ResponseInner> users) {
    this.users = users;
    return this;
  }

  public DistributionGroupWithUsersResponse addUsersItem(DistributionGroupsListUsers200ResponseInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * The distribution group users
   * @return users
   */
  @javax.annotation.Nonnull
  public List<DistributionGroupsListUsers200ResponseInner> getUsers() {
    return users;
  }

  public void setUsers(List<DistributionGroupsListUsers200ResponseInner> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DistributionGroupWithUsersResponse distributionGroupWithUsersResponse = (DistributionGroupWithUsersResponse) o;
    return Objects.equals(this.aadGroups, distributionGroupWithUsersResponse.aadGroups) &&
        Objects.equals(this.id, distributionGroupWithUsersResponse.id) &&
        Objects.equals(this.isPublic, distributionGroupWithUsersResponse.isPublic) &&
        Objects.equals(this.name, distributionGroupWithUsersResponse.name) &&
        Objects.equals(this.notifiedUserCount, distributionGroupWithUsersResponse.notifiedUserCount) &&
        Objects.equals(this.totalGroupsCount, distributionGroupWithUsersResponse.totalGroupsCount) &&
        Objects.equals(this.totalUserCount, distributionGroupWithUsersResponse.totalUserCount) &&
        Objects.equals(this.users, distributionGroupWithUsersResponse.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadGroups, id, isPublic, name, notifiedUserCount, totalGroupsCount, totalUserCount, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DistributionGroupWithUsersResponse {\n");
    sb.append("    aadGroups: ").append(toIndentedString(aadGroups)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notifiedUserCount: ").append(toIndentedString(notifiedUserCount)).append("\n");
    sb.append("    totalGroupsCount: ").append(toIndentedString(totalGroupsCount)).append("\n");
    sb.append("    totalUserCount: ").append(toIndentedString(totalUserCount)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aad_groups");
    openapiFields.add("id");
    openapiFields.add("is_public");
    openapiFields.add("name");
    openapiFields.add("notified_user_count");
    openapiFields.add("total_groups_count");
    openapiFields.add("total_user_count");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("notified_user_count");
    openapiRequiredFields.add("total_user_count");
    openapiRequiredFields.add("users");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DistributionGroupWithUsersResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DistributionGroupWithUsersResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DistributionGroupWithUsersResponse is not found in the empty JSON string", DistributionGroupWithUsersResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DistributionGroupWithUsersResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DistributionGroupWithUsersResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DistributionGroupWithUsersResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("aad_groups") != null && !jsonObj.get("aad_groups").isJsonNull()) {
        JsonArray jsonArrayaadGroups = jsonObj.getAsJsonArray("aad_groups");
        if (jsonArrayaadGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("aad_groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `aad_groups` to be an array in the JSON string but got `%s`", jsonObj.get("aad_groups").toString()));
          }

          // validate the optional field `aad_groups` (array)
          for (int i = 0; i < jsonArrayaadGroups.size(); i++) {
            DistributionGroupWithUsersResponseAadGroupsInner.validateJsonElement(jsonArrayaadGroups.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }

      JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
      // validate the required field `users` (array)
      for (int i = 0; i < jsonArrayusers.size(); i++) {
        DistributionGroupsListUsers200ResponseInner.validateJsonElement(jsonArrayusers.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DistributionGroupWithUsersResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DistributionGroupWithUsersResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DistributionGroupWithUsersResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DistributionGroupWithUsersResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DistributionGroupWithUsersResponse>() {
           @Override
           public void write(JsonWriter out, DistributionGroupWithUsersResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DistributionGroupWithUsersResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DistributionGroupWithUsersResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DistributionGroupWithUsersResponse
   * @throws IOException if the JSON string is invalid with respect to DistributionGroupWithUsersResponse
   */
  public static DistributionGroupWithUsersResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DistributionGroupWithUsersResponse.class);
  }

  /**
   * Convert an instance of DistributionGroupWithUsersResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

