/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TestGetTestReport200ResponseDeviceLogsInner;
import org.openapitools.client.model.TestGetTestReport200ResponseFeaturesInner;
import org.openapitools.client.model.TestGetTestReport200ResponseSnapshotFatalErrorsInner;
import org.openapitools.client.model.TestGetTestReport200ResponseStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestGetTestReport200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestGetTestReport200Response {
  public static final String SERIALIZED_NAME_APP_UPLOAD_ID = "app_upload_id";
  @SerializedName(SERIALIZED_NAME_APP_UPLOAD_ID)
  private String appUploadId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_DATE_FINISHED = "date_finished";
  @SerializedName(SERIALIZED_NAME_DATE_FINISHED)
  private String dateFinished;

  public static final String SERIALIZED_NAME_DEVICE_LOGS = "device_logs";
  @SerializedName(SERIALIZED_NAME_DEVICE_LOGS)
  private List<TestGetTestReport200ResponseDeviceLogsInner> deviceLogs = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<TestGetTestReport200ResponseFeaturesInner> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_FINISHED_DEVICE_SNAPSHOTS = "finished_device_snapshots";
  @SerializedName(SERIALIZED_NAME_FINISHED_DEVICE_SNAPSHOTS)
  private List<String> finishedDeviceSnapshots = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private BigDecimal revision;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schema_version";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private BigDecimal schemaVersion;

  public static final String SERIALIZED_NAME_SNAPSHOT_FATAL_ERRORS = "snapshot_fatal_errors";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_FATAL_ERRORS)
  private List<TestGetTestReport200ResponseSnapshotFatalErrorsInner> snapshotFatalErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private TestGetTestReport200ResponseStats stats;

  public static final String SERIALIZED_NAME_TEST_TYPE = "testType";
  @SerializedName(SERIALIZED_NAME_TEST_TYPE)
  private String testType;

  public TestGetTestReport200Response() {
  }

  public TestGetTestReport200Response appUploadId(String appUploadId) {
    this.appUploadId = appUploadId;
    return this;
  }

  /**
   * Get appUploadId
   * @return appUploadId
   */
  @javax.annotation.Nonnull
  public String getAppUploadId() {
    return appUploadId;
  }

  public void setAppUploadId(String appUploadId) {
    this.appUploadId = appUploadId;
  }


  public TestGetTestReport200Response date(String date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nonnull
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public TestGetTestReport200Response dateFinished(String dateFinished) {
    this.dateFinished = dateFinished;
    return this;
  }

  /**
   * Get dateFinished
   * @return dateFinished
   */
  @javax.annotation.Nonnull
  public String getDateFinished() {
    return dateFinished;
  }

  public void setDateFinished(String dateFinished) {
    this.dateFinished = dateFinished;
  }


  public TestGetTestReport200Response deviceLogs(List<TestGetTestReport200ResponseDeviceLogsInner> deviceLogs) {
    this.deviceLogs = deviceLogs;
    return this;
  }

  public TestGetTestReport200Response addDeviceLogsItem(TestGetTestReport200ResponseDeviceLogsInner deviceLogsItem) {
    if (this.deviceLogs == null) {
      this.deviceLogs = new ArrayList<>();
    }
    this.deviceLogs.add(deviceLogsItem);
    return this;
  }

  /**
   * Get deviceLogs
   * @return deviceLogs
   */
  @javax.annotation.Nonnull
  public List<TestGetTestReport200ResponseDeviceLogsInner> getDeviceLogs() {
    return deviceLogs;
  }

  public void setDeviceLogs(List<TestGetTestReport200ResponseDeviceLogsInner> deviceLogs) {
    this.deviceLogs = deviceLogs;
  }


  public TestGetTestReport200Response errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public TestGetTestReport200Response features(List<TestGetTestReport200ResponseFeaturesInner> features) {
    this.features = features;
    return this;
  }

  public TestGetTestReport200Response addFeaturesItem(TestGetTestReport200ResponseFeaturesInner featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * Get features
   * @return features
   */
  @javax.annotation.Nonnull
  public List<TestGetTestReport200ResponseFeaturesInner> getFeatures() {
    return features;
  }

  public void setFeatures(List<TestGetTestReport200ResponseFeaturesInner> features) {
    this.features = features;
  }


  public TestGetTestReport200Response finishedDeviceSnapshots(List<String> finishedDeviceSnapshots) {
    this.finishedDeviceSnapshots = finishedDeviceSnapshots;
    return this;
  }

  public TestGetTestReport200Response addFinishedDeviceSnapshotsItem(String finishedDeviceSnapshotsItem) {
    if (this.finishedDeviceSnapshots == null) {
      this.finishedDeviceSnapshots = new ArrayList<>();
    }
    this.finishedDeviceSnapshots.add(finishedDeviceSnapshotsItem);
    return this;
  }

  /**
   * Get finishedDeviceSnapshots
   * @return finishedDeviceSnapshots
   */
  @javax.annotation.Nonnull
  public List<String> getFinishedDeviceSnapshots() {
    return finishedDeviceSnapshots;
  }

  public void setFinishedDeviceSnapshots(List<String> finishedDeviceSnapshots) {
    this.finishedDeviceSnapshots = finishedDeviceSnapshots;
  }


  public TestGetTestReport200Response id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public TestGetTestReport200Response platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nonnull
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public TestGetTestReport200Response revision(BigDecimal revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Get revision
   * @return revision
   */
  @javax.annotation.Nonnull
  public BigDecimal getRevision() {
    return revision;
  }

  public void setRevision(BigDecimal revision) {
    this.revision = revision;
  }


  public TestGetTestReport200Response schemaVersion(BigDecimal schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nonnull
  public BigDecimal getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(BigDecimal schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public TestGetTestReport200Response snapshotFatalErrors(List<TestGetTestReport200ResponseSnapshotFatalErrorsInner> snapshotFatalErrors) {
    this.snapshotFatalErrors = snapshotFatalErrors;
    return this;
  }

  public TestGetTestReport200Response addSnapshotFatalErrorsItem(TestGetTestReport200ResponseSnapshotFatalErrorsInner snapshotFatalErrorsItem) {
    if (this.snapshotFatalErrors == null) {
      this.snapshotFatalErrors = new ArrayList<>();
    }
    this.snapshotFatalErrors.add(snapshotFatalErrorsItem);
    return this;
  }

  /**
   * Get snapshotFatalErrors
   * @return snapshotFatalErrors
   */
  @javax.annotation.Nullable
  public List<TestGetTestReport200ResponseSnapshotFatalErrorsInner> getSnapshotFatalErrors() {
    return snapshotFatalErrors;
  }

  public void setSnapshotFatalErrors(List<TestGetTestReport200ResponseSnapshotFatalErrorsInner> snapshotFatalErrors) {
    this.snapshotFatalErrors = snapshotFatalErrors;
  }


  public TestGetTestReport200Response stats(TestGetTestReport200ResponseStats stats) {
    this.stats = stats;
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nonnull
  public TestGetTestReport200ResponseStats getStats() {
    return stats;
  }

  public void setStats(TestGetTestReport200ResponseStats stats) {
    this.stats = stats;
  }


  public TestGetTestReport200Response testType(String testType) {
    this.testType = testType;
    return this;
  }

  /**
   * Get testType
   * @return testType
   */
  @javax.annotation.Nonnull
  public String getTestType() {
    return testType;
  }

  public void setTestType(String testType) {
    this.testType = testType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestGetTestReport200Response testGetTestReport200Response = (TestGetTestReport200Response) o;
    return Objects.equals(this.appUploadId, testGetTestReport200Response.appUploadId) &&
        Objects.equals(this.date, testGetTestReport200Response.date) &&
        Objects.equals(this.dateFinished, testGetTestReport200Response.dateFinished) &&
        Objects.equals(this.deviceLogs, testGetTestReport200Response.deviceLogs) &&
        Objects.equals(this.errorMessage, testGetTestReport200Response.errorMessage) &&
        Objects.equals(this.features, testGetTestReport200Response.features) &&
        Objects.equals(this.finishedDeviceSnapshots, testGetTestReport200Response.finishedDeviceSnapshots) &&
        Objects.equals(this.id, testGetTestReport200Response.id) &&
        Objects.equals(this.platform, testGetTestReport200Response.platform) &&
        Objects.equals(this.revision, testGetTestReport200Response.revision) &&
        Objects.equals(this.schemaVersion, testGetTestReport200Response.schemaVersion) &&
        Objects.equals(this.snapshotFatalErrors, testGetTestReport200Response.snapshotFatalErrors) &&
        Objects.equals(this.stats, testGetTestReport200Response.stats) &&
        Objects.equals(this.testType, testGetTestReport200Response.testType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appUploadId, date, dateFinished, deviceLogs, errorMessage, features, finishedDeviceSnapshots, id, platform, revision, schemaVersion, snapshotFatalErrors, stats, testType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestGetTestReport200Response {\n");
    sb.append("    appUploadId: ").append(toIndentedString(appUploadId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateFinished: ").append(toIndentedString(dateFinished)).append("\n");
    sb.append("    deviceLogs: ").append(toIndentedString(deviceLogs)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    finishedDeviceSnapshots: ").append(toIndentedString(finishedDeviceSnapshots)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    snapshotFatalErrors: ").append(toIndentedString(snapshotFatalErrors)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    testType: ").append(toIndentedString(testType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_upload_id");
    openapiFields.add("date");
    openapiFields.add("date_finished");
    openapiFields.add("device_logs");
    openapiFields.add("errorMessage");
    openapiFields.add("features");
    openapiFields.add("finished_device_snapshots");
    openapiFields.add("id");
    openapiFields.add("platform");
    openapiFields.add("revision");
    openapiFields.add("schema_version");
    openapiFields.add("snapshot_fatal_errors");
    openapiFields.add("stats");
    openapiFields.add("testType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_upload_id");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("date_finished");
    openapiRequiredFields.add("device_logs");
    openapiRequiredFields.add("features");
    openapiRequiredFields.add("finished_device_snapshots");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("platform");
    openapiRequiredFields.add("revision");
    openapiRequiredFields.add("schema_version");
    openapiRequiredFields.add("stats");
    openapiRequiredFields.add("testType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestGetTestReport200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestGetTestReport200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestGetTestReport200Response is not found in the empty JSON string", TestGetTestReport200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestGetTestReport200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestGetTestReport200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestGetTestReport200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("app_upload_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_upload_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("app_upload_id").toString()));
      }
      if (!jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (!jsonObj.get("date_finished").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_finished` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_finished").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("device_logs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `device_logs` to be an array in the JSON string but got `%s`", jsonObj.get("device_logs").toString()));
      }

      JsonArray jsonArraydeviceLogs = jsonObj.getAsJsonArray("device_logs");
      // validate the required field `device_logs` (array)
      for (int i = 0; i < jsonArraydeviceLogs.size(); i++) {
        TestGetTestReport200ResponseDeviceLogsInner.validateJsonElement(jsonArraydeviceLogs.get(i));
      };
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }

      JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
      // validate the required field `features` (array)
      for (int i = 0; i < jsonArrayfeatures.size(); i++) {
        TestGetTestReport200ResponseFeaturesInner.validateJsonElement(jsonArrayfeatures.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("finished_device_snapshots") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("finished_device_snapshots").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `finished_device_snapshots` to be an array in the JSON string but got `%s`", jsonObj.get("finished_device_snapshots").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if (jsonObj.get("snapshot_fatal_errors") != null && !jsonObj.get("snapshot_fatal_errors").isJsonNull()) {
        JsonArray jsonArraysnapshotFatalErrors = jsonObj.getAsJsonArray("snapshot_fatal_errors");
        if (jsonArraysnapshotFatalErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("snapshot_fatal_errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `snapshot_fatal_errors` to be an array in the JSON string but got `%s`", jsonObj.get("snapshot_fatal_errors").toString()));
          }

          // validate the optional field `snapshot_fatal_errors` (array)
          for (int i = 0; i < jsonArraysnapshotFatalErrors.size(); i++) {
            TestGetTestReport200ResponseSnapshotFatalErrorsInner.validateJsonElement(jsonArraysnapshotFatalErrors.get(i));
          };
        }
      }
      // validate the required field `stats`
      TestGetTestReport200ResponseStats.validateJsonElement(jsonObj.get("stats"));
      if (!jsonObj.get("testType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestGetTestReport200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestGetTestReport200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestGetTestReport200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestGetTestReport200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<TestGetTestReport200Response>() {
           @Override
           public void write(JsonWriter out, TestGetTestReport200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestGetTestReport200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestGetTestReport200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestGetTestReport200Response
   * @throws IOException if the JSON string is invalid with respect to TestGetTestReport200Response
   */
  public static TestGetTestReport200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestGetTestReport200Response.class);
  }

  /**
   * Convert an instance of TestGetTestReport200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

