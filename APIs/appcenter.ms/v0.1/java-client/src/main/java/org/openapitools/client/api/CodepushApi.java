/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BranchConfigurationsDelete200Response;
import org.openapitools.client.model.CodePushAcquisitionGetAcquisitionStatus200Response;
import org.openapitools.client.model.CodePushAcquisitionUpdateCheck200Response;
import org.openapitools.client.model.CodePushAcquisitionUpdateDeployStatusRequest;
import org.openapitools.client.model.CodePushDeploymentMetricsGet200ResponseInner;
import org.openapitools.client.model.CodePushDeploymentReleaseRollbackRequest;
import org.openapitools.client.model.CodePushDeploymentReleasesCreateRequest;
import org.openapitools.client.model.CodePushDeploymentUploadCreate200Response;
import org.openapitools.client.model.CodePushDeploymentsList200ResponseInner;
import org.openapitools.client.model.CodePushDeploymentsList200ResponseInnerLatestRelease;
import org.openapitools.client.model.CodePushDeploymentsPromoteRequest;
import org.openapitools.client.model.CodePushDeploymentsUpdateRequest;
import org.openapitools.client.model.DeploymentReleasesUpdateRequest;
import org.openapitools.client.model.LegacyCodePushAcquisitionUpdateCheck200Response;
import org.openapitools.client.model.LegacyCodePushAcquisitionUpdateInstallsStatusRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CodepushApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CodepushApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CodepushApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for codePushAcquisitionGetAcquisitionStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionGetAcquisitionStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/public/codepush/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushAcquisitionGetAcquisitionStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return codePushAcquisitionGetAcquisitionStatusCall(_callback);

    }

    /**
     * 
     * Returns the acquisition service status to the caller
     * @return CodePushAcquisitionGetAcquisitionStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushAcquisitionGetAcquisitionStatus200Response codePushAcquisitionGetAcquisitionStatus() throws ApiException {
        ApiResponse<CodePushAcquisitionGetAcquisitionStatus200Response> localVarResp = codePushAcquisitionGetAcquisitionStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the acquisition service status to the caller
     * @return ApiResponse&lt;CodePushAcquisitionGetAcquisitionStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushAcquisitionGetAcquisitionStatus200Response> codePushAcquisitionGetAcquisitionStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = codePushAcquisitionGetAcquisitionStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CodePushAcquisitionGetAcquisitionStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the acquisition service status to the caller
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionGetAcquisitionStatusAsync(final ApiCallback<CodePushAcquisitionGetAcquisitionStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushAcquisitionGetAcquisitionStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CodePushAcquisitionGetAcquisitionStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushAcquisitionUpdateCheck
     * @param deploymentKey  (required)
     * @param appVersion  (required)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @param previousLabelOrAppVersion  (optional)
     * @param previousDeploymentKey  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionUpdateCheckCall(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, Boolean isCompanion, String previousLabelOrAppVersion, String previousDeploymentKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/public/codepush/update_check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deploymentKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deployment_key", deploymentKey));
        }

        if (appVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_version", appVersion));
        }

        if (packageHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("package_hash", packageHash));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (clientUniqueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_unique_id", clientUniqueId));
        }

        if (isCompanion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_companion", isCompanion));
        }

        if (previousLabelOrAppVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previous_label_or_app_version", previousLabelOrAppVersion));
        }

        if (previousDeploymentKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previous_deployment_key", previousDeploymentKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushAcquisitionUpdateCheckValidateBeforeCall(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, Boolean isCompanion, String previousLabelOrAppVersion, String previousDeploymentKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentKey' is set
        if (deploymentKey == null) {
            throw new ApiException("Missing the required parameter 'deploymentKey' when calling codePushAcquisitionUpdateCheck(Async)");
        }

        // verify the required parameter 'appVersion' is set
        if (appVersion == null) {
            throw new ApiException("Missing the required parameter 'appVersion' when calling codePushAcquisitionUpdateCheck(Async)");
        }

        return codePushAcquisitionUpdateCheckCall(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, previousLabelOrAppVersion, previousDeploymentKey, _callback);

    }

    /**
     * 
     * Check for updates
     * @param deploymentKey  (required)
     * @param appVersion  (required)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @param previousLabelOrAppVersion  (optional)
     * @param previousDeploymentKey  (optional)
     * @return CodePushAcquisitionUpdateCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushAcquisitionUpdateCheck200Response codePushAcquisitionUpdateCheck(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, Boolean isCompanion, String previousLabelOrAppVersion, String previousDeploymentKey) throws ApiException {
        ApiResponse<CodePushAcquisitionUpdateCheck200Response> localVarResp = codePushAcquisitionUpdateCheckWithHttpInfo(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, previousLabelOrAppVersion, previousDeploymentKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Check for updates
     * @param deploymentKey  (required)
     * @param appVersion  (required)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @param previousLabelOrAppVersion  (optional)
     * @param previousDeploymentKey  (optional)
     * @return ApiResponse&lt;CodePushAcquisitionUpdateCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushAcquisitionUpdateCheck200Response> codePushAcquisitionUpdateCheckWithHttpInfo(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, Boolean isCompanion, String previousLabelOrAppVersion, String previousDeploymentKey) throws ApiException {
        okhttp3.Call localVarCall = codePushAcquisitionUpdateCheckValidateBeforeCall(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, previousLabelOrAppVersion, previousDeploymentKey, null);
        Type localVarReturnType = new TypeToken<CodePushAcquisitionUpdateCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check for updates
     * @param deploymentKey  (required)
     * @param appVersion  (required)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @param previousLabelOrAppVersion  (optional)
     * @param previousDeploymentKey  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionUpdateCheckAsync(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, Boolean isCompanion, String previousLabelOrAppVersion, String previousDeploymentKey, final ApiCallback<CodePushAcquisitionUpdateCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushAcquisitionUpdateCheckValidateBeforeCall(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, previousLabelOrAppVersion, previousDeploymentKey, _callback);
        Type localVarReturnType = new TypeToken<CodePushAcquisitionUpdateCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushAcquisitionUpdateDeployStatus
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionUpdateDeployStatusCall(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codePushAcquisitionUpdateDeployStatusRequest;

        // create path and map variables
        String localVarPath = "/v0.1/public/codepush/report_status/deploy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushAcquisitionUpdateDeployStatusValidateBeforeCall(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' is set
        if (codePushAcquisitionUpdateDeployStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' when calling codePushAcquisitionUpdateDeployStatus(Async)");
        }

        return codePushAcquisitionUpdateDeployStatusCall(codePushAcquisitionUpdateDeployStatusRequest, _callback);

    }

    /**
     * 
     * Report Deployment status metric
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void codePushAcquisitionUpdateDeployStatus(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest) throws ApiException {
        codePushAcquisitionUpdateDeployStatusWithHttpInfo(codePushAcquisitionUpdateDeployStatusRequest);
    }

    /**
     * 
     * Report Deployment status metric
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codePushAcquisitionUpdateDeployStatusWithHttpInfo(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = codePushAcquisitionUpdateDeployStatusValidateBeforeCall(codePushAcquisitionUpdateDeployStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Report Deployment status metric
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionUpdateDeployStatusAsync(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushAcquisitionUpdateDeployStatusValidateBeforeCall(codePushAcquisitionUpdateDeployStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushAcquisitionUpdateDownloadStatus
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionUpdateDownloadStatusCall(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codePushAcquisitionUpdateDeployStatusRequest;

        // create path and map variables
        String localVarPath = "/v0.1/public/codepush/report_status/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushAcquisitionUpdateDownloadStatusValidateBeforeCall(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' is set
        if (codePushAcquisitionUpdateDeployStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'codePushAcquisitionUpdateDeployStatusRequest' when calling codePushAcquisitionUpdateDownloadStatus(Async)");
        }

        return codePushAcquisitionUpdateDownloadStatusCall(codePushAcquisitionUpdateDeployStatusRequest, _callback);

    }

    /**
     * 
     * Report download of specified release
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void codePushAcquisitionUpdateDownloadStatus(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest) throws ApiException {
        codePushAcquisitionUpdateDownloadStatusWithHttpInfo(codePushAcquisitionUpdateDeployStatusRequest);
    }

    /**
     * 
     * Report download of specified release
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codePushAcquisitionUpdateDownloadStatusWithHttpInfo(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = codePushAcquisitionUpdateDownloadStatusValidateBeforeCall(codePushAcquisitionUpdateDeployStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Report download of specified release
     * @param codePushAcquisitionUpdateDeployStatusRequest Deployment status metric properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushAcquisitionUpdateDownloadStatusAsync(CodePushAcquisitionUpdateDeployStatusRequest codePushAcquisitionUpdateDeployStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushAcquisitionUpdateDownloadStatusValidateBeforeCall(codePushAcquisitionUpdateDeployStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentMetricsGet
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentMetricsGetCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/metrics"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentMetricsGetValidateBeforeCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentMetricsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentMetricsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentMetricsGet(Async)");
        }

        return codePushDeploymentMetricsGetCall(deploymentName, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets all releases metrics for specified Deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;CodePushDeploymentMetricsGet200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<CodePushDeploymentMetricsGet200ResponseInner> codePushDeploymentMetricsGet(String deploymentName, String ownerName, String appName) throws ApiException {
        ApiResponse<List<CodePushDeploymentMetricsGet200ResponseInner>> localVarResp = codePushDeploymentMetricsGetWithHttpInfo(deploymentName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all releases metrics for specified Deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;CodePushDeploymentMetricsGet200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CodePushDeploymentMetricsGet200ResponseInner>> codePushDeploymentMetricsGetWithHttpInfo(String deploymentName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentMetricsGetValidateBeforeCall(deploymentName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<CodePushDeploymentMetricsGet200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all releases metrics for specified Deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentMetricsGetAsync(String deploymentName, String ownerName, String appName, final ApiCallback<List<CodePushDeploymentMetricsGet200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentMetricsGetValidateBeforeCall(deploymentName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<CodePushDeploymentMetricsGet200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentReleaseRollback
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleaseRollbackRequest The specific release label that you want to rollback to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleaseRollbackCall(String deploymentName, String ownerName, String appName, CodePushDeploymentReleaseRollbackRequest codePushDeploymentReleaseRollbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codePushDeploymentReleaseRollbackRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/rollback_release"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentReleaseRollbackValidateBeforeCall(String deploymentName, String ownerName, String appName, CodePushDeploymentReleaseRollbackRequest codePushDeploymentReleaseRollbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleaseRollback(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentReleaseRollback(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentReleaseRollback(Async)");
        }

        return codePushDeploymentReleaseRollbackCall(deploymentName, ownerName, appName, codePushDeploymentReleaseRollbackRequest, _callback);

    }

    /**
     * 
     * Rollback the latest or a specific release for an app deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleaseRollbackRequest The specific release label that you want to rollback to (optional)
     * @return CodePushDeploymentsList200ResponseInnerLatestRelease
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushDeploymentsList200ResponseInnerLatestRelease codePushDeploymentReleaseRollback(String deploymentName, String ownerName, String appName, CodePushDeploymentReleaseRollbackRequest codePushDeploymentReleaseRollbackRequest) throws ApiException {
        ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> localVarResp = codePushDeploymentReleaseRollbackWithHttpInfo(deploymentName, ownerName, appName, codePushDeploymentReleaseRollbackRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Rollback the latest or a specific release for an app deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleaseRollbackRequest The specific release label that you want to rollback to (optional)
     * @return ApiResponse&lt;CodePushDeploymentsList200ResponseInnerLatestRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> codePushDeploymentReleaseRollbackWithHttpInfo(String deploymentName, String ownerName, String appName, CodePushDeploymentReleaseRollbackRequest codePushDeploymentReleaseRollbackRequest) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentReleaseRollbackValidateBeforeCall(deploymentName, ownerName, appName, codePushDeploymentReleaseRollbackRequest, null);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rollback the latest or a specific release for an app deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleaseRollbackRequest The specific release label that you want to rollback to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleaseRollbackAsync(String deploymentName, String ownerName, String appName, CodePushDeploymentReleaseRollbackRequest codePushDeploymentReleaseRollbackRequest, final ApiCallback<CodePushDeploymentsList200ResponseInnerLatestRelease> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentReleaseRollbackValidateBeforeCall(deploymentName, ownerName, appName, codePushDeploymentReleaseRollbackRequest, _callback);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentReleasesCreate
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleasesCreateRequest The necessary information required to download the bundle and being the release process. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleasesCreateCall(String deploymentName, String ownerName, String appName, CodePushDeploymentReleasesCreateRequest codePushDeploymentReleasesCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codePushDeploymentReleasesCreateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentReleasesCreateValidateBeforeCall(String deploymentName, String ownerName, String appName, CodePushDeploymentReleasesCreateRequest codePushDeploymentReleasesCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleasesCreate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentReleasesCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentReleasesCreate(Async)");
        }

        // verify the required parameter 'codePushDeploymentReleasesCreateRequest' is set
        if (codePushDeploymentReleasesCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'codePushDeploymentReleasesCreateRequest' when calling codePushDeploymentReleasesCreate(Async)");
        }

        return codePushDeploymentReleasesCreateCall(deploymentName, ownerName, appName, codePushDeploymentReleasesCreateRequest, _callback);

    }

    /**
     * 
     * Create a new CodePush release for the specified deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleasesCreateRequest The necessary information required to download the bundle and being the release process. (required)
     * @return CodePushDeploymentsList200ResponseInnerLatestRelease
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushDeploymentsList200ResponseInnerLatestRelease codePushDeploymentReleasesCreate(String deploymentName, String ownerName, String appName, CodePushDeploymentReleasesCreateRequest codePushDeploymentReleasesCreateRequest) throws ApiException {
        ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> localVarResp = codePushDeploymentReleasesCreateWithHttpInfo(deploymentName, ownerName, appName, codePushDeploymentReleasesCreateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new CodePush release for the specified deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleasesCreateRequest The necessary information required to download the bundle and being the release process. (required)
     * @return ApiResponse&lt;CodePushDeploymentsList200ResponseInnerLatestRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> codePushDeploymentReleasesCreateWithHttpInfo(String deploymentName, String ownerName, String appName, CodePushDeploymentReleasesCreateRequest codePushDeploymentReleasesCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentReleasesCreateValidateBeforeCall(deploymentName, ownerName, appName, codePushDeploymentReleasesCreateRequest, null);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new CodePush release for the specified deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentReleasesCreateRequest The necessary information required to download the bundle and being the release process. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleasesCreateAsync(String deploymentName, String ownerName, String appName, CodePushDeploymentReleasesCreateRequest codePushDeploymentReleasesCreateRequest, final ApiCallback<CodePushDeploymentsList200ResponseInnerLatestRelease> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentReleasesCreateValidateBeforeCall(deploymentName, ownerName, appName, codePushDeploymentReleasesCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentReleasesDelete
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleasesDeleteCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentReleasesDeleteValidateBeforeCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleasesDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentReleasesDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentReleasesDelete(Async)");
        }

        return codePushDeploymentReleasesDeleteCall(deploymentName, ownerName, appName, _callback);

    }

    /**
     * 
     * Clears a Deployment of releases
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void codePushDeploymentReleasesDelete(String deploymentName, String ownerName, String appName) throws ApiException {
        codePushDeploymentReleasesDeleteWithHttpInfo(deploymentName, ownerName, appName);
    }

    /**
     * 
     * Clears a Deployment of releases
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codePushDeploymentReleasesDeleteWithHttpInfo(String deploymentName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentReleasesDeleteValidateBeforeCall(deploymentName, ownerName, appName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Clears a Deployment of releases
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleasesDeleteAsync(String deploymentName, String ownerName, String appName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentReleasesDeleteValidateBeforeCall(deploymentName, ownerName, appName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentReleasesGet
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleasesGetCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentReleasesGetValidateBeforeCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentReleasesGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentReleasesGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentReleasesGet(Async)");
        }

        return codePushDeploymentReleasesGetCall(deploymentName, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets the history of releases on a Deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;CodePushDeploymentsList200ResponseInnerLatestRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<CodePushDeploymentsList200ResponseInnerLatestRelease> codePushDeploymentReleasesGet(String deploymentName, String ownerName, String appName) throws ApiException {
        ApiResponse<List<CodePushDeploymentsList200ResponseInnerLatestRelease>> localVarResp = codePushDeploymentReleasesGetWithHttpInfo(deploymentName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the history of releases on a Deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;CodePushDeploymentsList200ResponseInnerLatestRelease&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CodePushDeploymentsList200ResponseInnerLatestRelease>> codePushDeploymentReleasesGetWithHttpInfo(String deploymentName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentReleasesGetValidateBeforeCall(deploymentName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<CodePushDeploymentsList200ResponseInnerLatestRelease>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the history of releases on a Deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentReleasesGetAsync(String deploymentName, String ownerName, String appName, final ApiCallback<List<CodePushDeploymentsList200ResponseInnerLatestRelease>> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentReleasesGetValidateBeforeCall(deploymentName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<CodePushDeploymentsList200ResponseInnerLatestRelease>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentUploadCreate
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentUploadCreateCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/uploads"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentUploadCreateValidateBeforeCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentUploadCreate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentUploadCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentUploadCreate(Async)");
        }

        return codePushDeploymentUploadCreateCall(deploymentName, ownerName, appName, _callback);

    }

    /**
     * 
     * Create a new CodePush release upload for the specified deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return CodePushDeploymentUploadCreate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushDeploymentUploadCreate200Response codePushDeploymentUploadCreate(String deploymentName, String ownerName, String appName) throws ApiException {
        ApiResponse<CodePushDeploymentUploadCreate200Response> localVarResp = codePushDeploymentUploadCreateWithHttpInfo(deploymentName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new CodePush release upload for the specified deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;CodePushDeploymentUploadCreate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushDeploymentUploadCreate200Response> codePushDeploymentUploadCreateWithHttpInfo(String deploymentName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentUploadCreateValidateBeforeCall(deploymentName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<CodePushDeploymentUploadCreate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new CodePush release upload for the specified deployment
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentUploadCreateAsync(String deploymentName, String ownerName, String appName, final ApiCallback<CodePushDeploymentUploadCreate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentUploadCreateValidateBeforeCall(deploymentName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<CodePushDeploymentUploadCreate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentsCreate
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsList200ResponseInner Deployment to be created (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsCreateCall(String ownerName, String appName, CodePushDeploymentsList200ResponseInner codePushDeploymentsList200ResponseInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codePushDeploymentsList200ResponseInner;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentsCreateValidateBeforeCall(String ownerName, String appName, CodePushDeploymentsList200ResponseInner codePushDeploymentsList200ResponseInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentsCreate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentsCreate(Async)");
        }

        // verify the required parameter 'codePushDeploymentsList200ResponseInner' is set
        if (codePushDeploymentsList200ResponseInner == null) {
            throw new ApiException("Missing the required parameter 'codePushDeploymentsList200ResponseInner' when calling codePushDeploymentsCreate(Async)");
        }

        return codePushDeploymentsCreateCall(ownerName, appName, codePushDeploymentsList200ResponseInner, _callback);

    }

    /**
     * 
     * Creates a CodePush Deployment for the given app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsList200ResponseInner Deployment to be created (required)
     * @return CodePushDeploymentsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushDeploymentsList200ResponseInner codePushDeploymentsCreate(String ownerName, String appName, CodePushDeploymentsList200ResponseInner codePushDeploymentsList200ResponseInner) throws ApiException {
        ApiResponse<CodePushDeploymentsList200ResponseInner> localVarResp = codePushDeploymentsCreateWithHttpInfo(ownerName, appName, codePushDeploymentsList200ResponseInner);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a CodePush Deployment for the given app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsList200ResponseInner Deployment to be created (required)
     * @return ApiResponse&lt;CodePushDeploymentsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushDeploymentsList200ResponseInner> codePushDeploymentsCreateWithHttpInfo(String ownerName, String appName, CodePushDeploymentsList200ResponseInner codePushDeploymentsList200ResponseInner) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentsCreateValidateBeforeCall(ownerName, appName, codePushDeploymentsList200ResponseInner, null);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a CodePush Deployment for the given app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsList200ResponseInner Deployment to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsCreateAsync(String ownerName, String appName, CodePushDeploymentsList200ResponseInner codePushDeploymentsList200ResponseInner, final ApiCallback<CodePushDeploymentsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentsCreateValidateBeforeCall(ownerName, appName, codePushDeploymentsList200ResponseInner, _callback);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentsDelete
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsDeleteCall(String deploymentName, String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentsDeleteValidateBeforeCall(String deploymentName, String ownerName, String appName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentsDelete(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentsDelete(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentsDelete(Async)");
        }

        return codePushDeploymentsDeleteCall(deploymentName, ownerName, appName, body, _callback);

    }

    /**
     * 
     * Deletes a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void codePushDeploymentsDelete(String deploymentName, String ownerName, String appName, Object body) throws ApiException {
        codePushDeploymentsDeleteWithHttpInfo(deploymentName, ownerName, appName, body);
    }

    /**
     * 
     * Deletes a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codePushDeploymentsDeleteWithHttpInfo(String deploymentName, String ownerName, String appName, Object body) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentsDeleteValidateBeforeCall(deploymentName, ownerName, appName, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsDeleteAsync(String deploymentName, String ownerName, String appName, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentsDeleteValidateBeforeCall(deploymentName, ownerName, appName, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentsGet
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsGetCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentsGetValidateBeforeCall(String deploymentName, String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentsGet(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentsGet(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentsGet(Async)");
        }

        return codePushDeploymentsGetCall(deploymentName, ownerName, appName, _callback);

    }

    /**
     * 
     * Gets a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return CodePushDeploymentsList200ResponseInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushDeploymentsList200ResponseInner codePushDeploymentsGet(String deploymentName, String ownerName, String appName) throws ApiException {
        ApiResponse<CodePushDeploymentsList200ResponseInner> localVarResp = codePushDeploymentsGetWithHttpInfo(deploymentName, ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;CodePushDeploymentsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushDeploymentsList200ResponseInner> codePushDeploymentsGetWithHttpInfo(String deploymentName, String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentsGetValidateBeforeCall(deploymentName, ownerName, appName, null);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsGetAsync(String deploymentName, String ownerName, String appName, final ApiCallback<CodePushDeploymentsList200ResponseInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentsGetValidateBeforeCall(deploymentName, ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentsList
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsListCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments"
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentsListValidateBeforeCall(String ownerName, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentsList(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentsList(Async)");
        }

        return codePushDeploymentsListCall(ownerName, appName, _callback);

    }

    /**
     * 
     * Gets a list of CodePush deployments for the given app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return List&lt;CodePushDeploymentsList200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public List<CodePushDeploymentsList200ResponseInner> codePushDeploymentsList(String ownerName, String appName) throws ApiException {
        ApiResponse<List<CodePushDeploymentsList200ResponseInner>> localVarResp = codePushDeploymentsListWithHttpInfo(ownerName, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of CodePush deployments for the given app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @return ApiResponse&lt;List&lt;CodePushDeploymentsList200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CodePushDeploymentsList200ResponseInner>> codePushDeploymentsListWithHttpInfo(String ownerName, String appName) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentsListValidateBeforeCall(ownerName, appName, null);
        Type localVarReturnType = new TypeToken<List<CodePushDeploymentsList200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of CodePush deployments for the given app
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsListAsync(String ownerName, String appName, final ApiCallback<List<CodePushDeploymentsList200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentsListValidateBeforeCall(ownerName, appName, _callback);
        Type localVarReturnType = new TypeToken<List<CodePushDeploymentsList200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentsPromote
     * @param deploymentName deployment name (required)
     * @param promoteDeploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsPromoteRequest Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promote a new release to the target deployment, return this new release. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsPromoteCall(String deploymentName, String promoteDeploymentName, String ownerName, String appName, CodePushDeploymentsPromoteRequest codePushDeploymentsPromoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codePushDeploymentsPromoteRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/promote_release/{promote_deployment_name}"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "promote_deployment_name" + "}", localVarApiClient.escapeString(promoteDeploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentsPromoteValidateBeforeCall(String deploymentName, String promoteDeploymentName, String ownerName, String appName, CodePushDeploymentsPromoteRequest codePushDeploymentsPromoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentsPromote(Async)");
        }

        // verify the required parameter 'promoteDeploymentName' is set
        if (promoteDeploymentName == null) {
            throw new ApiException("Missing the required parameter 'promoteDeploymentName' when calling codePushDeploymentsPromote(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentsPromote(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentsPromote(Async)");
        }

        return codePushDeploymentsPromoteCall(deploymentName, promoteDeploymentName, ownerName, appName, codePushDeploymentsPromoteRequest, _callback);

    }

    /**
     * 
     * Promote one release (default latest one) from one deployment to another
     * @param deploymentName deployment name (required)
     * @param promoteDeploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsPromoteRequest Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion (optional)
     * @return CodePushDeploymentsList200ResponseInnerLatestRelease
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promote a new release to the target deployment, return this new release. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushDeploymentsList200ResponseInnerLatestRelease codePushDeploymentsPromote(String deploymentName, String promoteDeploymentName, String ownerName, String appName, CodePushDeploymentsPromoteRequest codePushDeploymentsPromoteRequest) throws ApiException {
        ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> localVarResp = codePushDeploymentsPromoteWithHttpInfo(deploymentName, promoteDeploymentName, ownerName, appName, codePushDeploymentsPromoteRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Promote one release (default latest one) from one deployment to another
     * @param deploymentName deployment name (required)
     * @param promoteDeploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsPromoteRequest Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion (optional)
     * @return ApiResponse&lt;CodePushDeploymentsList200ResponseInnerLatestRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promote a new release to the target deployment, return this new release. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> codePushDeploymentsPromoteWithHttpInfo(String deploymentName, String promoteDeploymentName, String ownerName, String appName, CodePushDeploymentsPromoteRequest codePushDeploymentsPromoteRequest) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentsPromoteValidateBeforeCall(deploymentName, promoteDeploymentName, ownerName, appName, codePushDeploymentsPromoteRequest, null);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Promote one release (default latest one) from one deployment to another
     * @param deploymentName deployment name (required)
     * @param promoteDeploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsPromoteRequest Release to be promoted, only needs to provide optional fields, description, label, disabled, mandatory, rollout, targetBinaryVersion (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Promote a new release to the target deployment, return this new release. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsPromoteAsync(String deploymentName, String promoteDeploymentName, String ownerName, String appName, CodePushDeploymentsPromoteRequest codePushDeploymentsPromoteRequest, final ApiCallback<CodePushDeploymentsList200ResponseInnerLatestRelease> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentsPromoteValidateBeforeCall(deploymentName, promoteDeploymentName, ownerName, appName, codePushDeploymentsPromoteRequest, _callback);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for codePushDeploymentsUpdate
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsUpdateRequest Deployment modification. All fields are optional and only provided fields will get updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsUpdateCall(String deploymentName, String ownerName, String appName, CodePushDeploymentsUpdateRequest codePushDeploymentsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = codePushDeploymentsUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call codePushDeploymentsUpdateValidateBeforeCall(String deploymentName, String ownerName, String appName, CodePushDeploymentsUpdateRequest codePushDeploymentsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling codePushDeploymentsUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling codePushDeploymentsUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling codePushDeploymentsUpdate(Async)");
        }

        // verify the required parameter 'codePushDeploymentsUpdateRequest' is set
        if (codePushDeploymentsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'codePushDeploymentsUpdateRequest' when calling codePushDeploymentsUpdate(Async)");
        }

        return codePushDeploymentsUpdateCall(deploymentName, ownerName, appName, codePushDeploymentsUpdateRequest, _callback);

    }

    /**
     * 
     * Modifies a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsUpdateRequest Deployment modification. All fields are optional and only provided fields will get updated. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void codePushDeploymentsUpdate(String deploymentName, String ownerName, String appName, CodePushDeploymentsUpdateRequest codePushDeploymentsUpdateRequest) throws ApiException {
        codePushDeploymentsUpdateWithHttpInfo(deploymentName, ownerName, appName, codePushDeploymentsUpdateRequest);
    }

    /**
     * 
     * Modifies a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsUpdateRequest Deployment modification. All fields are optional and only provided fields will get updated. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> codePushDeploymentsUpdateWithHttpInfo(String deploymentName, String ownerName, String appName, CodePushDeploymentsUpdateRequest codePushDeploymentsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = codePushDeploymentsUpdateValidateBeforeCall(deploymentName, ownerName, appName, codePushDeploymentsUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Modifies a CodePush Deployment for the given app
     * @param deploymentName deployment name (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param codePushDeploymentsUpdateRequest Deployment modification. All fields are optional and only provided fields will get updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call codePushDeploymentsUpdateAsync(String deploymentName, String ownerName, String appName, CodePushDeploymentsUpdateRequest codePushDeploymentsUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = codePushDeploymentsUpdateValidateBeforeCall(deploymentName, ownerName, appName, codePushDeploymentsUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deploymentReleasesUpdate
     * @param deploymentName deployment name (required)
     * @param releaseLabel release label (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deploymentReleasesUpdateRequest Release modification. All fields are optional and only provided fields will get updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Nothing to patch </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentReleasesUpdateCall(String deploymentName, String releaseLabel, String ownerName, String appName, DeploymentReleasesUpdateRequest deploymentReleasesUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploymentReleasesUpdateRequest;

        // create path and map variables
        String localVarPath = "/v0.1/apps/{owner_name}/{app_name}/deployments/{deployment_name}/releases/{release_label}"
            .replace("{" + "deployment_name" + "}", localVarApiClient.escapeString(deploymentName.toString()))
            .replace("{" + "release_label" + "}", localVarApiClient.escapeString(releaseLabel.toString()))
            .replace("{" + "owner_name" + "}", localVarApiClient.escapeString(ownerName.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentReleasesUpdateValidateBeforeCall(String deploymentName, String releaseLabel, String ownerName, String appName, DeploymentReleasesUpdateRequest deploymentReleasesUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling deploymentReleasesUpdate(Async)");
        }

        // verify the required parameter 'releaseLabel' is set
        if (releaseLabel == null) {
            throw new ApiException("Missing the required parameter 'releaseLabel' when calling deploymentReleasesUpdate(Async)");
        }

        // verify the required parameter 'ownerName' is set
        if (ownerName == null) {
            throw new ApiException("Missing the required parameter 'ownerName' when calling deploymentReleasesUpdate(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling deploymentReleasesUpdate(Async)");
        }

        // verify the required parameter 'deploymentReleasesUpdateRequest' is set
        if (deploymentReleasesUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'deploymentReleasesUpdateRequest' when calling deploymentReleasesUpdate(Async)");
        }

        return deploymentReleasesUpdateCall(deploymentName, releaseLabel, ownerName, appName, deploymentReleasesUpdateRequest, _callback);

    }

    /**
     * 
     * Modifies a CodePush release metadata under the given Deployment
     * @param deploymentName deployment name (required)
     * @param releaseLabel release label (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deploymentReleasesUpdateRequest Release modification. All fields are optional and only provided fields will get updated. (required)
     * @return CodePushDeploymentsList200ResponseInnerLatestRelease
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Nothing to patch </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public CodePushDeploymentsList200ResponseInnerLatestRelease deploymentReleasesUpdate(String deploymentName, String releaseLabel, String ownerName, String appName, DeploymentReleasesUpdateRequest deploymentReleasesUpdateRequest) throws ApiException {
        ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> localVarResp = deploymentReleasesUpdateWithHttpInfo(deploymentName, releaseLabel, ownerName, appName, deploymentReleasesUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies a CodePush release metadata under the given Deployment
     * @param deploymentName deployment name (required)
     * @param releaseLabel release label (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deploymentReleasesUpdateRequest Release modification. All fields are optional and only provided fields will get updated. (required)
     * @return ApiResponse&lt;CodePushDeploymentsList200ResponseInnerLatestRelease&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Nothing to patch </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CodePushDeploymentsList200ResponseInnerLatestRelease> deploymentReleasesUpdateWithHttpInfo(String deploymentName, String releaseLabel, String ownerName, String appName, DeploymentReleasesUpdateRequest deploymentReleasesUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = deploymentReleasesUpdateValidateBeforeCall(deploymentName, releaseLabel, ownerName, appName, deploymentReleasesUpdateRequest, null);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies a CodePush release metadata under the given Deployment
     * @param deploymentName deployment name (required)
     * @param releaseLabel release label (required)
     * @param ownerName The name of the owner (required)
     * @param appName The name of the application (required)
     * @param deploymentReleasesUpdateRequest Release modification. All fields are optional and only provided fields will get updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Nothing to patch </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deploymentReleasesUpdateAsync(String deploymentName, String releaseLabel, String ownerName, String appName, DeploymentReleasesUpdateRequest deploymentReleasesUpdateRequest, final ApiCallback<CodePushDeploymentsList200ResponseInnerLatestRelease> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentReleasesUpdateValidateBeforeCall(deploymentName, releaseLabel, ownerName, appName, deploymentReleasesUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<CodePushDeploymentsList200ResponseInnerLatestRelease>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for legacyCodePushAcquisitionUpdateCheck
     * @param deploymentKey  (optional)
     * @param appVersion  (optional)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call legacyCodePushAcquisitionUpdateCheckCall(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, String isCompanion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v0.1/legacy/updateCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deploymentKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploymentKey", deploymentKey));
        }

        if (appVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appVersion", appVersion));
        }

        if (packageHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("packageHash", packageHash));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (clientUniqueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientUniqueId", clientUniqueId));
        }

        if (isCompanion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isCompanion", isCompanion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call legacyCodePushAcquisitionUpdateCheckValidateBeforeCall(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, String isCompanion, final ApiCallback _callback) throws ApiException {
        return legacyCodePushAcquisitionUpdateCheckCall(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, _callback);

    }

    /**
     * 
     * Check for updates
     * @param deploymentKey  (optional)
     * @param appVersion  (optional)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @return LegacyCodePushAcquisitionUpdateCheck200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public LegacyCodePushAcquisitionUpdateCheck200Response legacyCodePushAcquisitionUpdateCheck(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, String isCompanion) throws ApiException {
        ApiResponse<LegacyCodePushAcquisitionUpdateCheck200Response> localVarResp = legacyCodePushAcquisitionUpdateCheckWithHttpInfo(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion);
        return localVarResp.getData();
    }

    /**
     * 
     * Check for updates
     * @param deploymentKey  (optional)
     * @param appVersion  (optional)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @return ApiResponse&lt;LegacyCodePushAcquisitionUpdateCheck200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegacyCodePushAcquisitionUpdateCheck200Response> legacyCodePushAcquisitionUpdateCheckWithHttpInfo(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, String isCompanion) throws ApiException {
        okhttp3.Call localVarCall = legacyCodePushAcquisitionUpdateCheckValidateBeforeCall(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, null);
        Type localVarReturnType = new TypeToken<LegacyCodePushAcquisitionUpdateCheck200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check for updates
     * @param deploymentKey  (optional)
     * @param appVersion  (optional)
     * @param packageHash  (optional)
     * @param label  (optional)
     * @param clientUniqueId  (optional)
     * @param isCompanion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call legacyCodePushAcquisitionUpdateCheckAsync(String deploymentKey, String appVersion, String packageHash, String label, String clientUniqueId, String isCompanion, final ApiCallback<LegacyCodePushAcquisitionUpdateCheck200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = legacyCodePushAcquisitionUpdateCheckValidateBeforeCall(deploymentKey, appVersion, packageHash, label, clientUniqueId, isCompanion, _callback);
        Type localVarReturnType = new TypeToken<LegacyCodePushAcquisitionUpdateCheck200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for legacyCodePushAcquisitionUpdateDownloadStatus
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call legacyCodePushAcquisitionUpdateDownloadStatusCall(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = legacyCodePushAcquisitionUpdateInstallsStatusRequest;

        // create path and map variables
        String localVarPath = "/v0.1/legacy/reportStatus/download";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call legacyCodePushAcquisitionUpdateDownloadStatusValidateBeforeCall(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' is set
        if (legacyCodePushAcquisitionUpdateInstallsStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' when calling legacyCodePushAcquisitionUpdateDownloadStatus(Async)");
        }

        return legacyCodePushAcquisitionUpdateDownloadStatusCall(legacyCodePushAcquisitionUpdateInstallsStatusRequest, _callback);

    }

    /**
     * 
     * Report download of specified release
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void legacyCodePushAcquisitionUpdateDownloadStatus(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest) throws ApiException {
        legacyCodePushAcquisitionUpdateDownloadStatusWithHttpInfo(legacyCodePushAcquisitionUpdateInstallsStatusRequest);
    }

    /**
     * 
     * Report download of specified release
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> legacyCodePushAcquisitionUpdateDownloadStatusWithHttpInfo(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = legacyCodePushAcquisitionUpdateDownloadStatusValidateBeforeCall(legacyCodePushAcquisitionUpdateInstallsStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Report download of specified release
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call legacyCodePushAcquisitionUpdateDownloadStatusAsync(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = legacyCodePushAcquisitionUpdateDownloadStatusValidateBeforeCall(legacyCodePushAcquisitionUpdateInstallsStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for legacyCodePushAcquisitionUpdateInstallsStatus
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call legacyCodePushAcquisitionUpdateInstallsStatusCall(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = legacyCodePushAcquisitionUpdateInstallsStatusRequest;

        // create path and map variables
        String localVarPath = "/v0.1/legacy/reportStatus/deploy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call legacyCodePushAcquisitionUpdateInstallsStatusValidateBeforeCall(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' is set
        if (legacyCodePushAcquisitionUpdateInstallsStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'legacyCodePushAcquisitionUpdateInstallsStatusRequest' when calling legacyCodePushAcquisitionUpdateInstallsStatus(Async)");
        }

        return legacyCodePushAcquisitionUpdateInstallsStatusCall(legacyCodePushAcquisitionUpdateInstallsStatusRequest, _callback);

    }

    /**
     * 
     * Report deploy of specified release
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void legacyCodePushAcquisitionUpdateInstallsStatus(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest) throws ApiException {
        legacyCodePushAcquisitionUpdateInstallsStatusWithHttpInfo(legacyCodePushAcquisitionUpdateInstallsStatusRequest);
    }

    /**
     * 
     * Report deploy of specified release
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> legacyCodePushAcquisitionUpdateInstallsStatusWithHttpInfo(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = legacyCodePushAcquisitionUpdateInstallsStatusValidateBeforeCall(legacyCodePushAcquisitionUpdateInstallsStatusRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Report deploy of specified release
     * @param legacyCodePushAcquisitionUpdateInstallsStatusRequest Deployment status metric properties (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call legacyCodePushAcquisitionUpdateInstallsStatusAsync(LegacyCodePushAcquisitionUpdateInstallsStatusRequest legacyCodePushAcquisitionUpdateInstallsStatusRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = legacyCodePushAcquisitionUpdateInstallsStatusValidateBeforeCall(legacyCodePushAcquisitionUpdateInstallsStatusRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
