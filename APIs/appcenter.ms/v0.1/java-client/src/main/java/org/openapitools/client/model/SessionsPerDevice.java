/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SessionsPerDevice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SessionsPerDevice {
  public static final String SERIALIZED_NAME_AVERAGE_SESSIONS_PER_USER = "average_sessions_per_user";
  @SerializedName(SERIALIZED_NAME_AVERAGE_SESSIONS_PER_USER)
  private Double averageSessionsPerUser;

  public static final String SERIALIZED_NAME_PREVIOUS_AVERAGE_SESSIONS_PER_USER = "previous_average_sessions_per_user";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_AVERAGE_SESSIONS_PER_USER)
  private Double previousAverageSessionsPerUser;

  public static final String SERIALIZED_NAME_PREVIOUS_TOTAL_COUNT = "previous_total_count";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TOTAL_COUNT)
  private Long previousTotalCount;

  public static final String SERIALIZED_NAME_SESSIONS_PER_USER = "sessions_per_user";
  @SerializedName(SERIALIZED_NAME_SESSIONS_PER_USER)
  private List<AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner> sessionsPerUser = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public SessionsPerDevice() {
  }

  public SessionsPerDevice averageSessionsPerUser(Double averageSessionsPerUser) {
    this.averageSessionsPerUser = averageSessionsPerUser;
    return this;
  }

  /**
   * Average seesion per user.
   * @return averageSessionsPerUser
   */
  @javax.annotation.Nullable
  public Double getAverageSessionsPerUser() {
    return averageSessionsPerUser;
  }

  public void setAverageSessionsPerUser(Double averageSessionsPerUser) {
    this.averageSessionsPerUser = averageSessionsPerUser;
  }


  public SessionsPerDevice previousAverageSessionsPerUser(Double previousAverageSessionsPerUser) {
    this.previousAverageSessionsPerUser = previousAverageSessionsPerUser;
    return this;
  }

  /**
   * Previous average session per user.
   * @return previousAverageSessionsPerUser
   */
  @javax.annotation.Nullable
  public Double getPreviousAverageSessionsPerUser() {
    return previousAverageSessionsPerUser;
  }

  public void setPreviousAverageSessionsPerUser(Double previousAverageSessionsPerUser) {
    this.previousAverageSessionsPerUser = previousAverageSessionsPerUser;
  }


  public SessionsPerDevice previousTotalCount(Long previousTotalCount) {
    this.previousTotalCount = previousTotalCount;
    return this;
  }

  /**
   * Previous total count.
   * @return previousTotalCount
   */
  @javax.annotation.Nullable
  public Long getPreviousTotalCount() {
    return previousTotalCount;
  }

  public void setPreviousTotalCount(Long previousTotalCount) {
    this.previousTotalCount = previousTotalCount;
  }


  public SessionsPerDevice sessionsPerUser(List<AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner> sessionsPerUser) {
    this.sessionsPerUser = sessionsPerUser;
    return this;
  }

  public SessionsPerDevice addSessionsPerUserItem(AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner sessionsPerUserItem) {
    if (this.sessionsPerUser == null) {
      this.sessionsPerUser = new ArrayList<>();
    }
    this.sessionsPerUser.add(sessionsPerUserItem);
    return this;
  }

  /**
   * The session count for each interval per device.
   * @return sessionsPerUser
   */
  @javax.annotation.Nullable
  public List<AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner> getSessionsPerUser() {
    return sessionsPerUser;
  }

  public void setSessionsPerUser(List<AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner> sessionsPerUser) {
    this.sessionsPerUser = sessionsPerUser;
  }


  public SessionsPerDevice totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Total session per device count.
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionsPerDevice sessionsPerDevice = (SessionsPerDevice) o;
    return Objects.equals(this.averageSessionsPerUser, sessionsPerDevice.averageSessionsPerUser) &&
        Objects.equals(this.previousAverageSessionsPerUser, sessionsPerDevice.previousAverageSessionsPerUser) &&
        Objects.equals(this.previousTotalCount, sessionsPerDevice.previousTotalCount) &&
        Objects.equals(this.sessionsPerUser, sessionsPerDevice.sessionsPerUser) &&
        Objects.equals(this.totalCount, sessionsPerDevice.totalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageSessionsPerUser, previousAverageSessionsPerUser, previousTotalCount, sessionsPerUser, totalCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionsPerDevice {\n");
    sb.append("    averageSessionsPerUser: ").append(toIndentedString(averageSessionsPerUser)).append("\n");
    sb.append("    previousAverageSessionsPerUser: ").append(toIndentedString(previousAverageSessionsPerUser)).append("\n");
    sb.append("    previousTotalCount: ").append(toIndentedString(previousTotalCount)).append("\n");
    sb.append("    sessionsPerUser: ").append(toIndentedString(sessionsPerUser)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average_sessions_per_user");
    openapiFields.add("previous_average_sessions_per_user");
    openapiFields.add("previous_total_count");
    openapiFields.add("sessions_per_user");
    openapiFields.add("total_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SessionsPerDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SessionsPerDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionsPerDevice is not found in the empty JSON string", SessionsPerDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SessionsPerDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionsPerDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("sessions_per_user") != null && !jsonObj.get("sessions_per_user").isJsonNull()) {
        JsonArray jsonArraysessionsPerUser = jsonObj.getAsJsonArray("sessions_per_user");
        if (jsonArraysessionsPerUser != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sessions_per_user").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sessions_per_user` to be an array in the JSON string but got `%s`", jsonObj.get("sessions_per_user").toString()));
          }

          // validate the optional field `sessions_per_user` (array)
          for (int i = 0; i < jsonArraysessionsPerUser.size(); i++) {
            AnalyticsPerDeviceCounts200ResponseSessionsPerUserInner.validateJsonElement(jsonArraysessionsPerUser.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionsPerDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionsPerDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionsPerDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionsPerDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionsPerDevice>() {
           @Override
           public void write(JsonWriter out, SessionsPerDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionsPerDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SessionsPerDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SessionsPerDevice
   * @throws IOException if the JSON string is invalid with respect to SessionsPerDevice
   */
  public static SessionsPerDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionsPerDevice.class);
  }

  /**
   * Convert an instance of SessionsPerDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

