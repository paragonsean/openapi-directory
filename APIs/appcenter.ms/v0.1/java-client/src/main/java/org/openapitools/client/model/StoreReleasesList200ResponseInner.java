/*
 * App Center Client
 * Microsoft Visual Studio App Center API
 *
 * The version of the OpenAPI document: v0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StoreReleasesList200ResponseInnerDistributionStoresInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Basic information on a release
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:56:40.008147-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoreReleasesList200ResponseInner {
  /**
   * Destination for this release.
   */
  @JsonAdapter(DestinationTypeEnum.Adapter.class)
  public enum DestinationTypeEnum {
    GROUP("group"),
    
    STORE("store"),
    
    TESTER("tester");

    private String value;

    DestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationTypeEnum fromValue(String value) {
      for (DestinationTypeEnum b : DestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DestinationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destination_type";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private DestinationTypeEnum destinationType;

  public static final String SERIALIZED_NAME_DISTRIBUTION_STORES = "distribution_stores";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_STORES)
  private List<StoreReleasesList200ResponseInnerDistributionStoresInner> distributionStores = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_SHORT_VERSION = "short_version";
  @SerializedName(SERIALIZED_NAME_SHORT_VERSION)
  private String shortVersion;

  public static final String SERIALIZED_NAME_UPLOADED_AT = "uploaded_at";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AT)
  private String uploadedAt;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public StoreReleasesList200ResponseInner() {
  }

  public StoreReleasesList200ResponseInner destinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
    return this;
  }

  /**
   * Destination for this release.
   * @return destinationType
   */
  @javax.annotation.Nullable
  public DestinationTypeEnum getDestinationType() {
    return destinationType;
  }

  public void setDestinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
  }


  public StoreReleasesList200ResponseInner distributionStores(List<StoreReleasesList200ResponseInnerDistributionStoresInner> distributionStores) {
    this.distributionStores = distributionStores;
    return this;
  }

  public StoreReleasesList200ResponseInner addDistributionStoresItem(StoreReleasesList200ResponseInnerDistributionStoresInner distributionStoresItem) {
    if (this.distributionStores == null) {
      this.distributionStores = new ArrayList<>();
    }
    this.distributionStores.add(distributionStoresItem);
    return this;
  }

  /**
   * a list of distribution stores that are associated with this release.
   * @return distributionStores
   */
  @javax.annotation.Nullable
  public List<StoreReleasesList200ResponseInnerDistributionStoresInner> getDistributionStores() {
    return distributionStores;
  }

  public void setDistributionStores(List<StoreReleasesList200ResponseInnerDistributionStoresInner> distributionStores) {
    this.distributionStores = distributionStores;
  }


  public StoreReleasesList200ResponseInner id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * ID identifying this unique release.
   * @return id
   */
  @javax.annotation.Nullable
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public StoreReleasesList200ResponseInner shortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
    return this;
  }

  /**
   * The release&#39;s short version. For iOS: CFBundleShortVersionString from info.plist. For Android: android:versionName from AppManifest.xml. 
   * @return shortVersion
   */
  @javax.annotation.Nullable
  public String getShortVersion() {
    return shortVersion;
  }

  public void setShortVersion(String shortVersion) {
    this.shortVersion = shortVersion;
  }


  public StoreReleasesList200ResponseInner uploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
    return this;
  }

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   * @return uploadedAt
   */
  @javax.annotation.Nullable
  public String getUploadedAt() {
    return uploadedAt;
  }

  public void setUploadedAt(String uploadedAt) {
    this.uploadedAt = uploadedAt;
  }


  public StoreReleasesList200ResponseInner version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The release&#39;s version. For iOS: CFBundleVersion from info.plist. For Android: android:versionCode from AppManifest.xml. 
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreReleasesList200ResponseInner storeReleasesList200ResponseInner = (StoreReleasesList200ResponseInner) o;
    return Objects.equals(this.destinationType, storeReleasesList200ResponseInner.destinationType) &&
        Objects.equals(this.distributionStores, storeReleasesList200ResponseInner.distributionStores) &&
        Objects.equals(this.id, storeReleasesList200ResponseInner.id) &&
        Objects.equals(this.shortVersion, storeReleasesList200ResponseInner.shortVersion) &&
        Objects.equals(this.uploadedAt, storeReleasesList200ResponseInner.uploadedAt) &&
        Objects.equals(this.version, storeReleasesList200ResponseInner.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationType, distributionStores, id, shortVersion, uploadedAt, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreReleasesList200ResponseInner {\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    distributionStores: ").append(toIndentedString(distributionStores)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shortVersion: ").append(toIndentedString(shortVersion)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destination_type");
    openapiFields.add("distribution_stores");
    openapiFields.add("id");
    openapiFields.add("short_version");
    openapiFields.add("uploaded_at");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoreReleasesList200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoreReleasesList200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoreReleasesList200ResponseInner is not found in the empty JSON string", StoreReleasesList200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoreReleasesList200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoreReleasesList200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) && !jsonObj.get("destination_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_type").toString()));
      }
      // validate the optional field `destination_type`
      if (jsonObj.get("destination_type") != null && !jsonObj.get("destination_type").isJsonNull()) {
        DestinationTypeEnum.validateJsonElement(jsonObj.get("destination_type"));
      }
      if (jsonObj.get("distribution_stores") != null && !jsonObj.get("distribution_stores").isJsonNull()) {
        JsonArray jsonArraydistributionStores = jsonObj.getAsJsonArray("distribution_stores");
        if (jsonArraydistributionStores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("distribution_stores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `distribution_stores` to be an array in the JSON string but got `%s`", jsonObj.get("distribution_stores").toString()));
          }

          // validate the optional field `distribution_stores` (array)
          for (int i = 0; i < jsonArraydistributionStores.size(); i++) {
            StoreReleasesList200ResponseInnerDistributionStoresInner.validateJsonElement(jsonArraydistributionStores.get(i));
          };
        }
      }
      if ((jsonObj.get("short_version") != null && !jsonObj.get("short_version").isJsonNull()) && !jsonObj.get("short_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_version").toString()));
      }
      if ((jsonObj.get("uploaded_at") != null && !jsonObj.get("uploaded_at").isJsonNull()) && !jsonObj.get("uploaded_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_at").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoreReleasesList200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoreReleasesList200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoreReleasesList200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoreReleasesList200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<StoreReleasesList200ResponseInner>() {
           @Override
           public void write(JsonWriter out, StoreReleasesList200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoreReleasesList200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoreReleasesList200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoreReleasesList200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to StoreReleasesList200ResponseInner
   */
  public static StoreReleasesList200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoreReleasesList200ResponseInner.class);
  }

  /**
   * Convert an instance of StoreReleasesList200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

